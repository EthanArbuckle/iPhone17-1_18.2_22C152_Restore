uint64_t sub_10014DBFC()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v8 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  v1 = type metadata accessor for Logger();
  v0[47] = sub_100044058(v1, (uint64_t)qword_10040B708);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v4 = 136446210;
    v0[18] = sub_100037004(0xD000000000000034, 0x80000001003761B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s start updateFriends", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v5 = (void *)swift_task_alloc();
  v0[48] = v5;
  *v5 = v0;
  v5[1] = sub_10014DDE8;
  return daemon.getter();
}

uint64_t sub_10014DDE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 392) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10014DF00, v2, 0);
}

void sub_10014DF00()
{
  v194 = v0;
  type metadata accessor for Daemon();
  sub_1000471EC(&qword_1003EF4B8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v1 = ActorDaemon.bundleIdentifier.getter();
  uint64_t v3 = v2;
  swift_release();
  id v4 = [(id)BiomeLibrary() FindMy];
  swift_unknownObjectRelease();
  id v5 = [v4 ContactActivity];
  swift_unknownObjectRelease();
  id v6 = [v5 source];
  uint64_t v7 = swift_bridgeObjectRetain();
  v8 = sub_100158DAC(v7);
  swift_bridgeObjectRelease();
  v193[0] = v8;
  sub_100159244(v193);
  v9 = v193[0];
  uint64_t v171 = v3;
  swift_retain_n();
  v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v164 = v1;
  v165 = v6;
  v172 = v9;
  v149 = v5;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v193[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    v0[16] = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    swift_retain();
    sub_100044014(&qword_1003EEBF0);
    uint64_t v13 = Array.description.getter();
    unint64_t v15 = v14;
    swift_release();
    v0[17] = sub_100037004(v13, v15, (uint64_t *)v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v9 = v172;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s sortedFriendsArray: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  unint64_t v16 = 0;
  uint64_t v17 = v0[39];
  uint64_t v18 = v0[35];
  v190 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v191 = (void (**)(void))(v17 + 32);
  uint64_t v19 = v0[31];
  v188 = (void (**)(uint64_t, uint64_t))(v19 + 8);
  v189 = (void (**)(uint64_t, void, uint64_t))(v19 + 104);
  v186 = (void (**)(os_log_type_t *, uint64_t))(v18 + 8);
  v192 = (void (**)(uint64_t, uint64_t))(v17 + 8);
  v182 = (uint64_t (**)(uint64_t, uint64_t))(v18 + 88);
  v183 = (void (**)(uint64_t, void, uint64_t))(v18 + 16);
  v178 = (void (**)(void, uint64_t, uint64_t))(v17 + 16);
  unint64_t v20 = v9[2];
  unsigned int v187 = enum case for HandleType.following(_:);
  v184 = (void (**)(uint64_t, uint64_t))(v0[26] + 8);
  int v181 = enum case for FriendshipAction.add(_:);
  int v166 = enum case for FriendshipAction.remove(_:);
  for (i = v20; ; unint64_t v20 = i)
  {
    if (v16 == v20)
    {
      uint64_t v23 = v0[45];
      uint64_t v24 = sub_100044014(&qword_1003EEBF0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
      unint64_t v16 = v20;
    }
    else
    {
      if (v16 >= v9[2])
      {
        __break(1u);
        return;
      }
      uint64_t v25 = v0[45];
      uint64_t v26 = sub_100044014(&qword_1003EEBF0);
      uint64_t v27 = *(void *)(v26 - 8);
      sub_100013210((uint64_t)v9+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v16++, v25, &qword_1003EEBF0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    }
    uint64_t v28 = v0[46];
    sub_100013B50(v0[45], v28, &qword_1003EFEA0);
    uint64_t v29 = sub_100044014(&qword_1003EEBF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) == 1) {
      break;
    }
    uint64_t v30 = v0[37];
    uint64_t v32 = v0[33];
    uint64_t v31 = v0[34];
    uint64_t v33 = v0[32];
    uint64_t v34 = v0[30];
    uint64_t v35 = v0[46] + *(int *)(v29 + 48);
    (*v191)(v0[44]);
    (*v190)(v30, v35, v31);
    Friend.type.getter();
    (*v189)(v33, v187, v34);
    LOBYTE(v35) = static HandleType.== infix(_:_:)();
    v36 = *v188;
    (*v188)(v33, v34);
    v36(v32, v34);
    if ((v35 & 1) == 0)
    {
      uint64_t v21 = v0[44];
      uint64_t v22 = v0[38];
      (*v186)((os_log_type_t *)v0[37], v0[34]);
      (*v192)(v21, v22);
      continue;
    }
    uint64_t v37 = v0[36];
    uint64_t v38 = v0[34];
    (*v183)(v37, v0[37], v38);
    int v39 = (*v182)(v37, v38);
    if (v39 != v181)
    {
      if (v39 != v166)
      {
        uint64_t v74 = v0[44];
        uint64_t v75 = v0[38];
        v76 = (os_log_type_t *)v0[36];
        uint64_t v77 = v0[34];
        v78 = *v186;
        (*v186)((os_log_type_t *)v0[37], v77);
        (*v192)(v74, v75);
        v78(v76, v77);
        continue;
      }
      (*v178)(v0[40], v0[44], v0[38]);
      v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      BOOL v65 = os_log_type_enabled(v63, v64);
      uint64_t v66 = v0[40];
      unint64_t v179 = v16;
      if (v65)
      {
        uint64_t v67 = v0[28];
        uint64_t v161 = v0[25];
        uint64_t v174 = v0[38];
        uint64_t v68 = swift_slowAlloc();
        v193[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 136446723;
        v0[3] = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 12) = 2160;
        v0[4] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 22) = 2081;
        Friend.handle.getter();
        uint64_t v69 = Handle.identifier.getter();
        unint64_t v71 = v70;
        v72 = v184;
        (*v184)(v67, v161);
        v0[5] = sub_100037004(v69, v71, (uint64_t *)v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v73 = v174;
        v175 = *v192;
        (*v192)(v66, v73);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "%{public}s Removed a Friend: %{private,mask.hash}s", (uint8_t *)v68, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v175 = *v192;
        (*v192)(v66, v0[38]);

        v72 = v184;
      }
      uint64_t v102 = v0[27];
      uint64_t v103 = v0[25];
      uint64_t v105 = v0[21];
      uint64_t v104 = v0[22];
      Friend.handle.getter();
      Handle.identifier.getter();
      (*v72)(v102, v103);
      Friend.createdAt.getter();
      uint64_t v106 = type metadata accessor for Date();
      uint64_t v107 = *(void *)(v106 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v105, 1, 1, v106);
      swift_bridgeObjectRetain();
      NSString v108 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
      int v110 = v109(v104, 1, v106);
      Class isa = 0;
      if (v110 != 1)
      {
        uint64_t v112 = v0[22];
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v112, v106);
      }
      uint64_t v113 = v0[21];
      if (v109(v113, 1, v106) == 1)
      {
        Class v114 = 0;
      }
      else
      {
        Class v114 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v113, v106);
      }
      v115 = v165;
      id v116 = objc_allocWithZone((Class)BMFindMyContactActivity);
      NSString v117 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v118 = [v116 initWithHandle:v108 actionType:3 eventTimestampBegin:isa eventTimestampEnd:v114 bundleID:v117];

LABEL_38:
      [v115 sendEvent:v118];
      id v130 = v118;
      v131 = Logger.logObject.getter();
      os_log_type_t v132 = static os_log_type_t.default.getter();
      BOOL v133 = os_log_type_enabled(v131, v132);
      uint64_t v134 = v0[44];
      v136 = (os_log_type_t *)v0[37];
      uint64_t v135 = v0[38];
      uint64_t v137 = v0[34];
      if (v133)
      {
        uint64_t v138 = swift_slowAlloc();
        v193[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v138 = 141558275;
        *(void *)(v138 + 4) = 1752392040;
        *(_WORD *)(v138 + 12) = 2081;
        uint64_t v170 = v134;
        id v139 = [v130 description];
        *(void *)typec = v136;
        uint64_t v163 = v135;
        uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v142 = v141;

        *(void *)(v138 + 14) = sub_100037004(v140, v142, (uint64_t *)v193);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v131, v132, "Sent event: %{private,mask.hash}s", (uint8_t *)v138, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v186)(*(os_log_type_t **)typec, v137);
        uint64_t v143 = v170;
        uint64_t v144 = v163;
      }
      else
      {

        (*v186)(v136, v137);
        uint64_t v143 = v134;
        uint64_t v144 = v135;
      }
      v175(v143, v144);
      v9 = v172;
      unint64_t v16 = v179;
      continue;
    }
    uint64_t v40 = v0[29];
    uint64_t v41 = v0[25];
    Friend.handle.getter();
    uint64_t v42 = Handle.serverID.getter();
    unint64_t v44 = v43;
    v45 = *v184;
    (*v184)(v40, v41);
    if (v44)
    {
      swift_bridgeObjectRetain();
      char v46 = sub_100022CD8(v42, v44, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease();
      v47 = *v178;
      uint64_t v48 = v0[44];
      uint64_t v49 = v0[38];
      if (v46)
      {
        v47(v0[43], v48, v49);
        swift_bridgeObjectRetain();
        v50 = Logger.logObject.getter();
        os_log_type_t type = static os_log_type_t.default.getter();
        BOOL v51 = os_log_type_enabled(v50, type);
        uint64_t v52 = v0[43];
        uint64_t v53 = v0[44];
        uint64_t v54 = v0[38];
        v173 = (os_log_type_t *)v0[37];
        uint64_t v160 = v0[34];
        if (v51)
        {
          uint64_t v55 = v0[28];
          uint64_t v150 = v0[25];
          *(void *)v153 = v0[44];
          uint64_t v56 = swift_slowAlloc();
          log = v50;
          v193[0] = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = 136447235;
          v0[11] = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
          v167 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v56 + 12) = 2160;
          v0[12] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v56 + 22) = 2081;
          Friend.handle.getter();
          uint64_t v57 = Handle.identifier.getter();
          uint64_t v58 = v54;
          unint64_t v60 = v59;
          uint64_t v61 = v55;
          v9 = v172;
          v167(v61, v150);
          v0[13] = sub_100037004(v57, v60, (uint64_t *)v193);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v62 = *v192;
          (*v192)(v52, v58);
          *(_WORD *)(v56 + 32) = 2160;
          v0[14] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v56 + 42) = 2081;
          swift_bridgeObjectRetain();
          v0[15] = sub_100037004(v42, v44, (uint64_t *)v193);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s Friend: %{private,mask.hash}s has already added serverId %{private,mask.hash}s - skipping", (uint8_t *)v56, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v186)(v173, v160);
          v62(*(void *)v153, v58);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v120 = *v192;
          (*v192)(v52, v54);
          (*v186)(v173, v160);
          v120(v53, v54);
        }
        continue;
      }
      v169 = v45;
      unint64_t v179 = v16;
      v47(v0[42], v48, v49);
      swift_bridgeObjectRetain_n();
      v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      BOOL v93 = os_log_type_enabled(v91, v92);
      uint64_t v94 = v0[42];
      if (v93)
      {
        uint64_t v95 = v0[28];
        uint64_t v152 = v0[25];
        uint64_t v177 = v0[38];
        uint64_t v96 = swift_slowAlloc();
        typeb = v91;
        v193[0] = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v96 = 136447235;
        v0[6] = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
        os_log_type_t v155 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v96 + 12) = 2160;
        v0[7] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v96 + 22) = 2081;
        Swift::Int v97 = v42;
        Friend.handle.getter();
        uint64_t v98 = Handle.identifier.getter();
        unint64_t v100 = v99;
        v45(v95, v152);
        v0[8] = sub_100037004(v98, v100, (uint64_t *)v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v101 = v177;
        v175 = *v192;
        (*v192)(v94, v101);
        *(_WORD *)(v96 + 32) = 2160;
        v0[9] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v96 + 42) = 2081;
        swift_bridgeObjectRetain();
        v0[10] = sub_100037004(v42, v44, (uint64_t *)v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, typeb, v155, "%{public}s Added a Friend: %{private,mask.hash}s with serverId %{private,mask.hash}s", (uint8_t *)v96, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v175 = *v192;
        (*v192)(v0[42], v0[38]);
        swift_bridgeObjectRelease_n();

        Swift::Int v97 = v42;
      }
      uint64_t v121 = v0[28];
      uint64_t v122 = v0[24];
      uint64_t v123 = v0[25];
      uint64_t v124 = v0[23];
      sub_10003B9E4((Swift::Int *)v193, v97, v44);
      swift_bridgeObjectRelease();
      Friend.handle.getter();
      uint64_t v125 = Handle.identifier.getter();
      uint64_t v127 = v126;
      v169(v121, v123);
      Friend.createdAt.getter();
      uint64_t v128 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v124, 1, 1, v128);
      id v129 = objc_allocWithZone((Class)BMFindMyContactActivity);
      swift_bridgeObjectRetain();
      id v118 = sub_100154304(v125, v127, 2u, v122, v124, v164, v171);
      v115 = v165;
      goto LABEL_38;
    }
    (*v178)(v0[41], v0[44], v0[38]);
    v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v82 = v0[44];
    uint64_t v83 = v0[41];
    uint64_t v84 = v0[38];
    v176 = (os_log_type_t *)v0[37];
    uint64_t v162 = v0[34];
    if (v81)
    {
      v168 = v45;
      uint64_t v85 = v0[28];
      *(void *)v154 = v0[25];
      unint64_t v180 = v16;
      uint64_t v86 = swift_slowAlloc();
      v193[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136446723;
      *(void *)(v86 + 4) = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
      *(_WORD *)(v86 + 12) = 2160;
      *(void *)(v86 + 14) = 1752392040;
      *(_WORD *)(v86 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v87 = Handle.identifier.getter();
      *(void *)typea = v82;
      unint64_t v89 = v88;
      v168(v85, *(void *)v154);
      *(void *)(v86 + 24) = sub_100037004(v87, v89, (uint64_t *)v193);
      swift_bridgeObjectRelease();
      v90 = *v192;
      (*v192)(v83, v84);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "%{public}s Friend: %{private,mask.hash}s has nil serverId", (uint8_t *)v86, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v16 = v180;
      swift_slowDealloc();

      (*v186)(v176, v162);
      v90(*(void *)typea, v84);
    }
    else
    {

      v119 = *v192;
      (*v192)(v83, v84);
      (*v186)(v176, v162);
      v119(v82, v84);
    }
    v9 = v172;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v145 = Logger.logObject.getter();
  os_log_type_t v146 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v145, v146))
  {
    v147 = (uint8_t *)swift_slowAlloc();
    v193[0] = (void *)swift_slowAlloc();
    *(_DWORD *)v147 = 136446210;
    v0[2] = sub_100037004(0xD000000000000034, 0x80000001003761B0, (uint64_t *)v193);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v145, v146, "%{public}s end updateFriends", v147, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v148 = (void (*)(void))v0[1];
  v148();
}

uint64_t sub_10014F7BC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[7] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10014F850;
  return daemon.getter();
}

uint64_t sub_10014F850(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for FriendshipService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F0480, (void (*)(uint64_t))type metadata accessor for FriendshipService);
  *uint64_t v3 = v9;
  v3[1] = sub_10014FA2C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10014FA2C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 48);
    uint64_t v6 = sub_10014FC34;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 88) = a1;
    uint64_t v6 = sub_10014FB68;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10014FB68()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1001CF2B0(*(void *)(v0 + 40));
  return _swift_task_switch(sub_10014FBD4, v1, 0);
}

uint64_t sub_10014FBD4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014FC34()
{
  uint64_t v12 = v0;
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[2] = sub_100037004(0xD000000000000031, 0x8000000100376170, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    v0[3] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10014FEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v49 = a4;
  uint64_t v6 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v6 - 8);
  uint64_t v48 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ClientOrigin();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  __chkstk_darwin(v8);
  v47 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v44 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v43 = (char *)&v38 - v13;
  uint64_t v40 = type metadata accessor for HandleType();
  uint64_t v14 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  int v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Handle();
  uint64_t v50 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v38 - v20;
  unint64_t v22 = sub_100101B14((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = *(void *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 88);
  double v25 = *(double *)(a1 + 72);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v51 = v22;
  sub_100142F28(v23, v24, isUniquelyReferenced_nonNull_native, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = a1;
  sub_100044014(&qword_1003EE3F0);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100367D70;
  uint64_t v28 = v42;
  *(void *)(v27 + 32) = a2;
  *(void *)(v27 + 40) = v28;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v29 = v39;
  Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  uint64_t v42 = v19;
  v30(v19, v21, v16);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v29, enum case for HandleType.pendingOffer(_:), v40);
  if (v25 == 0.0)
  {
    uint64_t v31 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v43, 1, 1, v31);
  }
  else
  {
    uint64_t v32 = v43;
    Date.init(timeIntervalSince1970:)();
    uint64_t v31 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v32, 0, 1, v31);
  }
  uint64_t v33 = v41;
  uint64_t v34 = v44;
  Date.init(timeIntervalSince1970:)();
  type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v34, 0, 1, v31);
  uint64_t v35 = (unsigned int *)&enum case for ClientOrigin.other(_:);
  if (*(unsigned char *)(v33 + 96)) {
    uint64_t v35 = (unsigned int *)&enum case for ClientOrigin.messagesApp(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v47, *v35, v46);
  uint64_t v36 = v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v48, 1, 1, v16);
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, v16);
}

uint64_t sub_10015041C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10015052C, v1, 0);
}

uint64_t sub_10015052C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[14];
  uint64_t v119 = v0[13];
  uint64_t v6 = swift_bridgeObjectRetain();
  v90 = sub_10015BE0C(v6, (unsigned int *)&enum case for HandleType.futureFollowing(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10015BE0C(v7, (unsigned int *)&enum case for HandleType.following(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v10 = 0;
  uint64_t v85 = v8 + 16;
  uint64_t v11 = -1;
  unint64_t v88 = v8;
  uint64_t v12 = -1 << *((unsigned char *)v8 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *((void *)v8 + 8);
  int64_t v86 = (unint64_t)(63 - v12) >> 6;
  v115 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  id v116 = (void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  Class v114 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v87 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v113 = v0;
  while (1)
  {
    uint64_t v117 = v2;
    if (v13)
    {
      uint64_t v109 = (v13 - 1) & v13;
      int64_t v111 = v10;
      unint64_t v20 = __clz(__rbit64(v13)) | (v10 << 6);
      goto LABEL_23;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v21 >= v86) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)&v85[2 * v21];
    int64_t v23 = v10 + 1;
    if (!v22)
    {
      int64_t v23 = v10 + 2;
      if (v10 + 2 >= v86) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)&v85[2 * v23];
      if (!v22)
      {
        int64_t v23 = v10 + 3;
        if (v10 + 3 >= v86) {
          goto LABEL_26;
        }
        unint64_t v22 = *(void *)&v85[2 * v23];
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v109 = (v22 - 1) & v22;
    int64_t v111 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_23:
    double v25 = (void *)v1[34];
    uint64_t v27 = v1[24];
    uint64_t v26 = v1[25];
    uint64_t v96 = v1[33];
    uint64_t v29 = v1[19];
    uint64_t v28 = v1[20];
    uint64_t v101 = v1[18];
    uint64_t v103 = v1[12];
    uint64_t v105 = v1[11];
    uint64_t v107 = v1[13];
    unint64_t v99 = (void (*)(uint64_t, unint64_t))v25[2];
    v99(v28, *((void *)v88 + 6) + v25[9] * v20);
    unint64_t v30 = *((void *)v88 + 7) + *(void *)(v26 + 72) * v20;
    uint64_t v31 = v28 + *(int *)(v119 + 48);
    Swift::Int v97 = *v116;
    (*v116)(v31, v30, v27);
    unint64_t v32 = v29 + *(int *)(v119 + 48);
    os_log_type_t v92 = (void (*)(uint64_t, uint64_t, uint64_t))v25[4];
    v92(v29, v28, v96);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v32, v31, v27);
    uint64_t v33 = v101 + *(int *)(v119 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v99)(v101, v29, v96);
    v97(v33, v32, v27);
    *(void *)(swift_task_alloc() + 16) = v101;
    uint64_t v2 = v117;
    sub_1000D4D2C((uint64_t (*)(char *))sub_10015F1D4, (uint64_t)v90, v103);
    swift_task_dealloc();
    sub_10000A520(v101, &qword_1003EEBF0);
    sub_100013210(v103, v105, &qword_1003EFEA0);
    if ((*v115)(v105, 1, v107) == 1)
    {
      uint64_t v1 = v113;
      uint64_t v14 = v113[33];
      uint64_t v15 = v113[22];
      sub_10000A520(v113[11], &qword_1003EFEA0);
      (*v114)(v15, 1, 1, v14);
LABEL_5:
      uint64_t v16 = v1[22];
      uint64_t v17 = v1[19];
      sub_10000A520(v1[12], &qword_1003EFEA0);
      sub_10000A520(v17, &qword_1003EEBF0);
      uint64_t v18 = v16;
      uint64_t v19 = &qword_1003ECFE8;
      goto LABEL_6;
    }
    uint64_t v1 = v113;
    uint64_t v34 = v113[33];
    uint64_t v35 = v113[34];
    uint64_t v36 = v113[24];
    uint64_t v37 = v113[22];
    uint64_t v38 = v113[11] + *(int *)(v119 + 48);
    ((void (*)(uint64_t))v92)(v37);
    (*v114)(v37, 0, 1, v34);
    (*v87)(v38, v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v37, 1, v34) == 1) {
      goto LABEL_5;
    }
    uint64_t v39 = v113[36];
    uint64_t v41 = v113[33];
    uint64_t v40 = v113[34];
    uint64_t v42 = v113[19];
    uint64_t v43 = v113[12];
    uint64_t v44 = v113[8];
    v92(v39, v113[22], v41);
    sub_100122EF0(v39, v44);
    sub_10000A520(v44, &qword_1003F04F0);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    sub_10000A520(v43, &qword_1003EFEA0);
    uint64_t v18 = v42;
    uint64_t v19 = &qword_1003EEBF0;
LABEL_6:
    uint64_t result = sub_10000A520(v18, v19);
    unint64_t v13 = v109;
    int64_t v10 = v111;
  }
  uint64_t v24 = v10 + 4;
  if (v10 + 4 >= v86)
  {
LABEL_26:
    swift_release();
    swift_release();
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v94 = sub_10015BE0C(v45, (unsigned int *)&enum case for HandleType.futureFollower(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_bridgeObjectRetain();
    v47 = sub_10015BE0C(v46, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v48 = 0;
    unint64_t v89 = v47 + 16;
    uint64_t v49 = -1;
    uint64_t v50 = -1 << *((unsigned char *)v47 + 32);
    if (-v50 < 64) {
      uint64_t v49 = ~(-1 << -(char)v50);
    }
    unint64_t v51 = v49 & *((void *)v47 + 8);
    int64_t v91 = (unint64_t)(63 - v50) >> 6;
    BOOL v93 = v47;
    while (1)
    {
      uint64_t v118 = v2;
      if (v51)
      {
        uint64_t v98 = (v51 - 1) & v51;
        int64_t v100 = v48;
        unint64_t v58 = __clz(__rbit64(v51)) | (v48 << 6);
      }
      else
      {
        int64_t v59 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_55;
        }
        if (v59 >= v91)
        {
LABEL_51:
          swift_release();
          swift_release();
          uint64_t v120 = v1[2];
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v84 = (uint64_t (*)(uint64_t))v1[1];
          return v84(v120);
        }
        unint64_t v60 = *(void *)&v89[2 * v59];
        int64_t v61 = v48 + 1;
        if (!v60)
        {
          int64_t v61 = v48 + 2;
          if (v48 + 2 >= v91) {
            goto LABEL_51;
          }
          unint64_t v60 = *(void *)&v89[2 * v61];
          if (!v60)
          {
            int64_t v61 = v48 + 3;
            if (v48 + 3 >= v91) {
              goto LABEL_51;
            }
            unint64_t v60 = *(void *)&v89[2 * v61];
            if (!v60)
            {
              uint64_t v62 = v48 + 4;
              if (v48 + 4 >= v91) {
                goto LABEL_51;
              }
              unint64_t v60 = *(void *)&v89[2 * v62];
              if (!v60)
              {
                while (1)
                {
                  int64_t v61 = v62 + 1;
                  if (__OFADD__(v62, 1)) {
                    goto LABEL_57;
                  }
                  if (v61 >= v91) {
                    goto LABEL_51;
                  }
                  unint64_t v60 = *(void *)&v89[2 * v61];
                  ++v62;
                  if (v60) {
                    goto LABEL_47;
                  }
                }
              }
              int64_t v61 = v48 + 4;
            }
          }
        }
LABEL_47:
        uint64_t v98 = (v60 - 1) & v60;
        int64_t v100 = v61;
        unint64_t v58 = __clz(__rbit64(v60)) + (v61 << 6);
      }
      uint64_t v63 = v1[33];
      os_log_type_t v64 = (void *)v1[34];
      uint64_t v65 = v1[24];
      uint64_t v66 = v1[25];
      unint64_t v67 = v1[16];
      uint64_t v68 = v1[17];
      uint64_t v106 = v1[15];
      uint64_t v108 = v1[10];
      uint64_t v110 = v1[9];
      uint64_t v112 = v1[13];
      uint64_t v104 = (void (*)(uint64_t, unint64_t, uint64_t))v64[2];
      v104(v68, *((void *)v93 + 6) + v64[9] * v58, v63);
      unint64_t v69 = *((void *)v93 + 7) + *(void *)(v66 + 72) * v58;
      uint64_t v70 = v68 + *(int *)(v119 + 48);
      uint64_t v102 = *v116;
      (*v116)(v70, v69, v65);
      uint64_t v95 = (void (*)(uint64_t, uint64_t, uint64_t))v64[4];
      unint64_t v71 = v67 + *(int *)(v119 + 48);
      v95(v67, v68, v63);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 32))(v71, v70, v65);
      uint64_t v72 = v106 + *(int *)(v119 + 48);
      v104(v106, v67, v63);
      v102(v72, v71, v65);
      *(void *)(swift_task_alloc() + 16) = v106;
      uint64_t v2 = v118;
      sub_1000D4D2C((uint64_t (*)(char *))sub_10015F020, (uint64_t)v94, v108);
      swift_task_dealloc();
      sub_10000A520(v106, &qword_1003EEBF0);
      sub_100013210(v108, v110, &qword_1003EFEA0);
      if ((*v115)(v110, 1, v112) == 1) {
        break;
      }
      uint64_t v1 = v113;
      uint64_t v73 = v113[33];
      uint64_t v74 = v113[34];
      uint64_t v75 = v113[24];
      uint64_t v76 = v113[21];
      uint64_t v77 = v113[9] + *(int *)(v119 + 48);
      ((void (*)(uint64_t))v95)(v76);
      (*v114)(v76, 0, 1, v73);
      (*v87)(v77, v75);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1) {
        goto LABEL_30;
      }
      uint64_t v79 = v113[34];
      uint64_t v78 = v113[35];
      uint64_t v80 = v113[33];
      uint64_t v81 = v113[16];
      uint64_t v82 = v113[10];
      uint64_t v83 = v113[8];
      v95(v78, v113[21], v80);
      sub_100122EF0(v78, v83);
      sub_10000A520(v83, &qword_1003F04F0);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      sub_10000A520(v82, &qword_1003EFEA0);
      uint64_t v56 = v81;
      uint64_t v57 = &qword_1003EEBF0;
LABEL_31:
      uint64_t result = sub_10000A520(v56, v57);
      unint64_t v51 = v98;
      int64_t v48 = v100;
    }
    uint64_t v1 = v113;
    uint64_t v52 = v113[33];
    uint64_t v53 = v113[21];
    sub_10000A520(v113[9], &qword_1003EFEA0);
    (*v114)(v53, 1, 1, v52);
LABEL_30:
    uint64_t v54 = v1[21];
    uint64_t v55 = v1[16];
    sub_10000A520(v1[10], &qword_1003EFEA0);
    sub_10000A520(v55, &qword_1003EEBF0);
    uint64_t v56 = v54;
    uint64_t v57 = &qword_1003ECFE8;
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)&v85[2 * v24];
  if (v22)
  {
    int64_t v23 = v10 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v86) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)&v85[2 * v23];
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_100151134()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100151260, v1, 0);
}

uint64_t sub_100151260()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[14];
  uint64_t v119 = v0[13];
  uint64_t v6 = swift_bridgeObjectRetain();
  v90 = sub_10015BE0C(v6, (unsigned int *)&enum case for HandleType.futureFollowing(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10015BE0C(v7, (unsigned int *)&enum case for HandleType.following(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v10 = 0;
  uint64_t v85 = v8 + 16;
  uint64_t v11 = -1;
  unint64_t v88 = v8;
  uint64_t v12 = -1 << *((unsigned char *)v8 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *((void *)v8 + 8);
  int64_t v86 = (unint64_t)(63 - v12) >> 6;
  v115 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  id v116 = (void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  Class v114 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v87 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v113 = v0;
  while (1)
  {
    uint64_t v117 = v2;
    if (v13)
    {
      uint64_t v109 = (v13 - 1) & v13;
      int64_t v111 = v10;
      unint64_t v20 = __clz(__rbit64(v13)) | (v10 << 6);
      goto LABEL_23;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v21 >= v86) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)&v85[2 * v21];
    int64_t v23 = v10 + 1;
    if (!v22)
    {
      int64_t v23 = v10 + 2;
      if (v10 + 2 >= v86) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)&v85[2 * v23];
      if (!v22)
      {
        int64_t v23 = v10 + 3;
        if (v10 + 3 >= v86) {
          goto LABEL_26;
        }
        unint64_t v22 = *(void *)&v85[2 * v23];
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v109 = (v22 - 1) & v22;
    int64_t v111 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_23:
    double v25 = (void *)v1[34];
    uint64_t v27 = v1[24];
    uint64_t v26 = v1[25];
    uint64_t v96 = v1[33];
    uint64_t v29 = v1[19];
    uint64_t v28 = v1[20];
    uint64_t v101 = v1[18];
    uint64_t v103 = v1[12];
    uint64_t v105 = v1[11];
    uint64_t v107 = v1[13];
    unint64_t v99 = (void (*)(uint64_t, unint64_t))v25[2];
    v99(v28, *((void *)v88 + 6) + v25[9] * v20);
    unint64_t v30 = *((void *)v88 + 7) + *(void *)(v26 + 72) * v20;
    uint64_t v31 = v28 + *(int *)(v119 + 48);
    Swift::Int v97 = *v116;
    (*v116)(v31, v30, v27);
    unint64_t v32 = v29 + *(int *)(v119 + 48);
    os_log_type_t v92 = (void (*)(uint64_t, uint64_t, uint64_t))v25[4];
    v92(v29, v28, v96);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v32, v31, v27);
    uint64_t v33 = v101 + *(int *)(v119 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v99)(v101, v29, v96);
    v97(v33, v32, v27);
    *(void *)(swift_task_alloc() + 16) = v101;
    uint64_t v2 = v117;
    sub_1000D4D2C((uint64_t (*)(char *))sub_10015F1D4, (uint64_t)v90, v103);
    swift_task_dealloc();
    sub_10000A520(v101, &qword_1003EEBF0);
    sub_100013210(v103, v105, &qword_1003EFEA0);
    if ((*v115)(v105, 1, v107) == 1)
    {
      uint64_t v1 = v113;
      uint64_t v14 = v113[33];
      uint64_t v15 = v113[22];
      sub_10000A520(v113[11], &qword_1003EFEA0);
      (*v114)(v15, 1, 1, v14);
LABEL_5:
      uint64_t v16 = v1[22];
      uint64_t v17 = v1[19];
      sub_10000A520(v1[12], &qword_1003EFEA0);
      sub_10000A520(v17, &qword_1003EEBF0);
      uint64_t v18 = v16;
      uint64_t v19 = &qword_1003ECFE8;
      goto LABEL_6;
    }
    uint64_t v1 = v113;
    uint64_t v34 = v113[33];
    uint64_t v35 = v113[34];
    uint64_t v36 = v113[24];
    uint64_t v37 = v113[22];
    uint64_t v38 = v113[11] + *(int *)(v119 + 48);
    ((void (*)(uint64_t))v92)(v37);
    (*v114)(v37, 0, 1, v34);
    (*v87)(v38, v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v37, 1, v34) == 1) {
      goto LABEL_5;
    }
    uint64_t v39 = v113[36];
    uint64_t v41 = v113[33];
    uint64_t v40 = v113[34];
    uint64_t v42 = v113[19];
    uint64_t v43 = v113[12];
    uint64_t v44 = v113[8];
    v92(v39, v113[22], v41);
    sub_100122EF0(v39, v44);
    sub_10000A520(v44, &qword_1003F04F0);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    sub_10000A520(v43, &qword_1003EFEA0);
    uint64_t v18 = v42;
    uint64_t v19 = &qword_1003EEBF0;
LABEL_6:
    uint64_t result = sub_10000A520(v18, v19);
    unint64_t v13 = v109;
    int64_t v10 = v111;
  }
  uint64_t v24 = v10 + 4;
  if (v10 + 4 >= v86)
  {
LABEL_26:
    swift_release();
    swift_release();
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v94 = sub_10015BE0C(v45, (unsigned int *)&enum case for HandleType.futureFollower(_:), (unsigned int *)&enum case for FriendshipAction.remove(_:));
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_bridgeObjectRetain();
    v47 = sub_10015BE0C(v46, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v48 = 0;
    unint64_t v89 = v47 + 16;
    uint64_t v49 = -1;
    uint64_t v50 = -1 << *((unsigned char *)v47 + 32);
    if (-v50 < 64) {
      uint64_t v49 = ~(-1 << -(char)v50);
    }
    unint64_t v51 = v49 & *((void *)v47 + 8);
    int64_t v91 = (unint64_t)(63 - v50) >> 6;
    BOOL v93 = v47;
    while (1)
    {
      uint64_t v118 = v2;
      if (v51)
      {
        uint64_t v98 = (v51 - 1) & v51;
        int64_t v100 = v48;
        unint64_t v58 = __clz(__rbit64(v51)) | (v48 << 6);
      }
      else
      {
        int64_t v59 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_55;
        }
        if (v59 >= v91)
        {
LABEL_51:
          swift_release();
          swift_release();
          uint64_t v120 = v1[2];
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v84 = (uint64_t (*)(uint64_t))v1[1];
          return v84(v120);
        }
        unint64_t v60 = *(void *)&v89[2 * v59];
        int64_t v61 = v48 + 1;
        if (!v60)
        {
          int64_t v61 = v48 + 2;
          if (v48 + 2 >= v91) {
            goto LABEL_51;
          }
          unint64_t v60 = *(void *)&v89[2 * v61];
          if (!v60)
          {
            int64_t v61 = v48 + 3;
            if (v48 + 3 >= v91) {
              goto LABEL_51;
            }
            unint64_t v60 = *(void *)&v89[2 * v61];
            if (!v60)
            {
              uint64_t v62 = v48 + 4;
              if (v48 + 4 >= v91) {
                goto LABEL_51;
              }
              unint64_t v60 = *(void *)&v89[2 * v62];
              if (!v60)
              {
                while (1)
                {
                  int64_t v61 = v62 + 1;
                  if (__OFADD__(v62, 1)) {
                    goto LABEL_57;
                  }
                  if (v61 >= v91) {
                    goto LABEL_51;
                  }
                  unint64_t v60 = *(void *)&v89[2 * v61];
                  ++v62;
                  if (v60) {
                    goto LABEL_47;
                  }
                }
              }
              int64_t v61 = v48 + 4;
            }
          }
        }
LABEL_47:
        uint64_t v98 = (v60 - 1) & v60;
        int64_t v100 = v61;
        unint64_t v58 = __clz(__rbit64(v60)) + (v61 << 6);
      }
      uint64_t v63 = v1[33];
      os_log_type_t v64 = (void *)v1[34];
      uint64_t v65 = v1[24];
      uint64_t v66 = v1[25];
      unint64_t v67 = v1[16];
      uint64_t v68 = v1[17];
      uint64_t v106 = v1[15];
      uint64_t v108 = v1[10];
      uint64_t v110 = v1[9];
      uint64_t v112 = v1[13];
      uint64_t v104 = (void (*)(uint64_t, unint64_t, uint64_t))v64[2];
      v104(v68, *((void *)v93 + 6) + v64[9] * v58, v63);
      unint64_t v69 = *((void *)v93 + 7) + *(void *)(v66 + 72) * v58;
      uint64_t v70 = v68 + *(int *)(v119 + 48);
      uint64_t v102 = *v116;
      (*v116)(v70, v69, v65);
      uint64_t v95 = (void (*)(uint64_t, uint64_t, uint64_t))v64[4];
      unint64_t v71 = v67 + *(int *)(v119 + 48);
      v95(v67, v68, v63);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 32))(v71, v70, v65);
      uint64_t v72 = v106 + *(int *)(v119 + 48);
      v104(v106, v67, v63);
      v102(v72, v71, v65);
      *(void *)(swift_task_alloc() + 16) = v106;
      uint64_t v2 = v118;
      sub_1000D4D2C((uint64_t (*)(char *))sub_10015F020, (uint64_t)v94, v108);
      swift_task_dealloc();
      sub_10000A520(v106, &qword_1003EEBF0);
      sub_100013210(v108, v110, &qword_1003EFEA0);
      if ((*v115)(v110, 1, v112) == 1) {
        break;
      }
      uint64_t v1 = v113;
      uint64_t v73 = v113[33];
      uint64_t v74 = v113[34];
      uint64_t v75 = v113[24];
      uint64_t v76 = v113[21];
      uint64_t v77 = v113[9] + *(int *)(v119 + 48);
      ((void (*)(uint64_t))v95)(v76);
      (*v114)(v76, 0, 1, v73);
      (*v87)(v77, v75);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v76, 1, v73) == 1) {
        goto LABEL_30;
      }
      uint64_t v79 = v113[34];
      uint64_t v78 = v113[35];
      uint64_t v80 = v113[33];
      uint64_t v81 = v113[16];
      uint64_t v82 = v113[10];
      uint64_t v83 = v113[8];
      v95(v78, v113[21], v80);
      sub_100122EF0(v78, v83);
      sub_10000A520(v83, &qword_1003F04F0);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      sub_10000A520(v82, &qword_1003EFEA0);
      uint64_t v56 = v81;
      uint64_t v57 = &qword_1003EEBF0;
LABEL_31:
      uint64_t result = sub_10000A520(v56, v57);
      unint64_t v51 = v98;
      int64_t v48 = v100;
    }
    uint64_t v1 = v113;
    uint64_t v52 = v113[33];
    uint64_t v53 = v113[21];
    sub_10000A520(v113[9], &qword_1003EFEA0);
    (*v114)(v53, 1, 1, v52);
LABEL_30:
    uint64_t v54 = v1[21];
    uint64_t v55 = v1[16];
    sub_10000A520(v1[10], &qword_1003EFEA0);
    sub_10000A520(v55, &qword_1003EEBF0);
    uint64_t v56 = v54;
    uint64_t v57 = &qword_1003ECFE8;
    goto LABEL_31;
  }
  unint64_t v22 = *(void *)&v85[2 * v24];
  if (v22)
  {
    int64_t v23 = v10 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v86) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)&v85[2 * v23];
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_100151E68(char *a1, char *a2, uint64_t a3)
{
  uint64_t v73 = a3;
  uint64_t v78 = a2;
  uint64_t v79 = a1;
  uint64_t v85 = type metadata accessor for Handle();
  uint64_t v71 = *(void *)(v85 - 8);
  uint64_t v3 = __chkstk_darwin(v85);
  uint64_t v83 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v82 = (char *)v69 - v5;
  uint64_t v88 = type metadata accessor for FriendshipAction();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v88 - 8);
  uint64_t v6 = v84;
  __chkstk_darwin(v88);
  uint64_t v72 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HandleType();
  uint64_t v76 = *(char **)(v8 - 8);
  uint64_t v77 = (void (*)(void, void))v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v75 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)v69 - v11;
  uint64_t v94 = sub_100044014(&qword_1003EEBF0);
  uint64_t v12 = __chkstk_darwin(v94);
  uint64_t v70 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v87 = (char *)v69 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v69 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int64_t v21 = (char *)v69 - v20;
  int64_t v86 = (char *)v69 + *(int *)(v19 + 48) - v20;
  unint64_t v22 = v86;
  uint64_t v81 = type metadata accessor for Friend();
  uint64_t v23 = *(void *)(v81 - 8);
  uint64_t v24 = (char *)(v23 + 16);
  double v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  unint64_t v89 = v21;
  v25(v21, v79, v81);
  uint64_t v80 = v25;
  uint64_t v26 = (void (*)(char *, char *, uint64_t))*((void *)v6 + 2);
  uint64_t v27 = v88;
  v26(v22, v78, v88);
  uint64_t v78 = &v18[*(int *)(v94 + 48)];
  uint64_t v28 = v78;
  uint64_t v79 = (char *)v26;
  uint64_t v29 = v21;
  uint64_t v30 = v81;
  v25(v18, v29, v81);
  v26(v28, v86, v27);
  uint64_t v31 = v74;
  Friend.type.getter();
  unint64_t v32 = *(void (**)(char *, uint64_t))(v23 + 8);
  v69[1] = v23 + 8;
  v69[0] = v32;
  v32(v18, v30);
  uint64_t v33 = v75;
  uint64_t v34 = v76;
  uint64_t v35 = v77;
  (*((void (**)(char *, void, void (*)(void, void)))v76 + 13))(v75, enum case for HandleType.pendingOffer(_:), v77);
  uint64_t v36 = v33;
  char v37 = static HandleType.== infix(_:_:)();
  uint64_t v38 = (void (*)(char *, void))*((void *)v34 + 1);
  v38(v36, v35);
  uint64_t v39 = v88;
  v38(v31, v35);
  uint64_t v40 = (void (*)(void, void))*((void *)v84 + 1);
  uint64_t v41 = v87;
  uint64_t v76 = (char *)v84 + 8;
  uint64_t v77 = v40;
  v40(v78, v39);
  uint64_t v42 = &v41[*(int *)(v94 + 48)];
  uint64_t v43 = v30;
  uint64_t v44 = v86;
  uint64_t v78 = v24;
  v80(v41, v89, v43);
  uint64_t v75 = (char *)v6 + 16;
  ((void (*)(char *, char *, uint64_t))v79)(v42, v44, v39);
  if ((v37 & 1) == 0)
  {
    sub_10000A520((uint64_t)v87, &qword_1003EEBF0);
    goto LABEL_10;
  }
  uint64_t v45 = v72;
  (*((void (**)(char *, void, uint64_t))v84 + 13))(v72, enum case for FriendshipAction.add(_:), v39);
  sub_1000471EC(&qword_1003F0518, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v92 == v90 && v93 == v91)
  {
    swift_bridgeObjectRelease_n();
    v77(v45, v39);
    sub_10000A520((uint64_t)v87, &qword_1003EEBF0);
    v47 = v82;
    uint64_t v46 = v83;
    goto LABEL_7;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77(v45, v39);
  sub_10000A520((uint64_t)v87, &qword_1003EEBF0);
  v47 = v82;
  uint64_t v46 = v83;
  if ((v48 & 1) == 0)
  {
LABEL_10:
    sub_10000A520((uint64_t)v89, &qword_1003EEBF0);
    return 1;
  }
LABEL_7:
  uint64_t v49 = v70;
  uint64_t v50 = &v70[*(int *)(v94 + 48)];
  uint64_t v51 = (uint64_t)v89;
  uint64_t v52 = v81;
  v80(v70, v89, v81);
  ((void (*)(char *, char *, uint64_t))v79)(v50, v44, v39);
  Friend.handle.getter();
  uint64_t v53 = v49;
  uint64_t v54 = v73;
  ((void (*)(char *, uint64_t))v69[0])(v53, v52);
  uint64_t v94 = *(void *)(v54 + 16);
  if (!v94)
  {
    uint64_t v60 = 1;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v85);
LABEL_23:
    sub_10000A520(v51, &qword_1003EEBF0);
    v77(v50, v39);
    return v60;
  }
  uint64_t v81 = (uint64_t)v50;
  uint64_t v55 = v71;
  uint64_t v79 = (char *)((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
  uint64_t v56 = v85;
  uint64_t v87 = *(char **)(v71 + 16);
  ((void (*)(char *, char *, uint64_t))v87)(v46, &v79[v54], v85);
  uint64_t v57 = sub_1000471EC(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
  swift_bridgeObjectRetain();
  int64_t v86 = (char *)v57;
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  int64_t v59 = *(void (**)(char *, uint64_t))(v55 + 8);
  uint64_t v80 = (void (*)(char *, char *, uint64_t))((v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  v59(v46, v56);
  if (v58)
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = 0;
    goto LABEL_14;
  }
  if (v94 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = 1;
LABEL_14:
    uint64_t v51 = (uint64_t)v89;
    uint64_t v50 = (char *)v81;
LABEL_22:
    v59(v47, v85);
    goto LABEL_23;
  }
  uint64_t v84 = v59;
  uint64_t v61 = *(void *)(v71 + 72);
  uint64_t v62 = &v79[v73 + v61];
  uint64_t v63 = 1;
  os_log_type_t v64 = v83;
  uint64_t v65 = v85;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v87)(v64, v62, v65);
    uint64_t v67 = v63 + 1;
    if (__OFADD__(v63, 1)) {
      break;
    }
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    v84(v64, v65);
    if (v68)
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = 0;
      uint64_t v39 = v88;
      v47 = v82;
      goto LABEL_21;
    }
    ++v63;
    v62 += v61;
    v47 = v82;
    if (v67 == v94)
    {
      swift_bridgeObjectRelease();
      uint64_t v60 = 1;
      uint64_t v39 = v88;
LABEL_21:
      uint64_t v51 = (uint64_t)v89;
      uint64_t v50 = (char *)v81;
      int64_t v59 = v84;
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100152780(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[6] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100152814;
  return daemon.getter();
}

uint64_t sub_100152814(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001529F0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001529F0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100152CA8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100152B80;
    uint64_t v7 = v3[4];
    return sub_10021FF08(v7);
  }
}

uint64_t sub_100152B80()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100152ED0;
  }
  else {
    uint64_t v3 = sub_10015F1F0;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100152CA8()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager storeIntoLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100152ED0()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[12];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager storeIntoLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001530F8(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[6] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10015318C;
  return daemon.getter();
}

uint64_t sub_10015318C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100153368;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100153368(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100153680, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001534F8;
    uint64_t v7 = v3[4];
    return sub_1002201BC(v7);
  }
}

uint64_t sub_1001534F8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_1001538A8;
  }
  else {
    uint64_t v3 = sub_100153620;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100153620()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100153680()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager update LocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001538A8()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[12];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager update LocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100153AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for Handle();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v29 - v6;
  uint64_t v7 = sub_100044014(&qword_1003EEBF0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v30 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(int *)(v8 + 56);
  char v37 = (char *)&v29 + v13 - v11;
  uint64_t v31 = (void (*)(char *, uint64_t))(a2 + v13);
  uint64_t v14 = type metadata accessor for Friend();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v32(v12, a2, v14);
  uint64_t v16 = type metadata accessor for FriendshipAction();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v29 = *(void (**)(char *, void (*)(void, void), uint64_t))(v17 + 16);
  v29(v37, (void (*)(void, void))v31, v16);
  Friend.handle.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v15 + 8);
  v31(v12, v14);
  uint64_t v18 = *(int *)(v8 + 56);
  uint64_t v19 = v30;
  uint64_t v20 = &v30[v18];
  int64_t v21 = (void (*)(void, void))(v34 + v18);
  ((void (*)(char *))v32)(v30);
  v29(v20, v21, v16);
  unint64_t v22 = v33;
  Friend.handle.getter();
  v31(v19, v14);
  uint64_t v23 = v38;
  LOBYTE(v19) = static Handle.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v35 + 8);
  double v25 = v22;
  uint64_t v26 = v36;
  v24(v25, v36);
  v24(v23, v26);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  v27(v37, v16);
  return v19 & 1;
}

uint64_t sub_100153E04(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v61 = a3;
  uint64_t v74 = a2;
  uint64_t v4 = type metadata accessor for HandleType();
  uint64_t v62 = *(void *)(v4 - 8);
  uint64_t v63 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v59 = (char *)&v55 - v7;
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v72 = *(void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v73 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v68 = (char *)&v55 - v11;
  uint64_t v69 = sub_100044014(&qword_1003EEBF0);
  uint64_t v12 = __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = *(int *)(v14 + 48);
  uint64_t v75 = (char *)&v55 + v17 - v15;
  uint64_t v67 = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v65 = a1 + v17;
  uint64_t v19 = type metadata accessor for Friend();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20 + 16;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v66(v16, a1, v19);
  uint64_t v22 = type metadata accessor for FriendshipAction();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = (char *)(v23 + 16);
  os_log_type_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v64(v75, v18, v22);
  double v25 = v68;
  Friend.handle.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v56 = v16;
  uint64_t v57 = v26;
  uint64_t v58 = v20 + 8;
  v26(v16, v19);
  uint64_t v27 = v19;
  uint64_t v28 = v71;
  Friend.handle.getter();
  LODWORD(v74) = static Handle.== infix(_:_:)();
  uint64_t v29 = (void (*)(char *, uint64_t))*((void *)v72 + 1);
  uint64_t v30 = v28;
  uint64_t v31 = v73;
  v29(v30, v73);
  unint64_t v32 = v25;
  uint64_t v33 = (uint64_t)v70;
  v29(v32, v31);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v35 = v75;
  uint64_t v75 = (char *)(v23 + 8);
  uint64_t v72 = v34;
  v34(v35, v22);
  uint64_t v36 = v69;
  uint64_t v37 = v33 + *(int *)(v69 + 48);
  uint64_t v38 = v27;
  uint64_t v39 = v27;
  uint64_t v73 = v21;
  uint64_t v40 = v66;
  v66((char *)v33, v67, v39);
  uint64_t v41 = v40;
  uint64_t v42 = v22;
  uint64_t v43 = v22;
  uint64_t v71 = v24;
  uint64_t v44 = v64;
  v64((char *)v37, v65, v43);
  if (v74)
  {
    uint64_t v45 = v56;
    uint64_t v46 = &v56[*(int *)(v36 + 48)];
    uint64_t v74 = v46;
    v41(v56, v33, v38);
    v44(v46, v37, v42);
    uint64_t v47 = v33;
    char v48 = v59;
    Friend.type.getter();
    v57(v45, v38);
    uint64_t v49 = v62;
    uint64_t v50 = v60;
    uint64_t v51 = v63;
    (*(void (**)(char *, void, uint64_t))(v62 + 104))(v60, *v61, v63);
    char v52 = static HandleType.== infix(_:_:)();
    uint64_t v53 = *(void (**)(char *, uint64_t))(v49 + 8);
    v53(v50, v51);
    v53(v48, v51);
    sub_10000A520(v47, &qword_1003EEBF0);
    v72(v74, v42);
  }
  else
  {
    sub_10000A520(v33, &qword_1003EEBF0);
    char v52 = 0;
  }
  return v52 & 1;
}

id sub_100154304(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  Class isa = 0;
  if (v13(a4, 1, v11) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a4, v11);
  }
  if (v13(a5, 1, v11) == 1)
  {
    Class v15 = 0;
  }
  else
  {
    Class v15 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
  }
  if (a7)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  id v17 = [v20 initWithHandle:v10 actionType:a3 eventTimestampBegin:isa eventTimestampEnd:v15 bundleID:v16];

  return v17;
}

unint64_t sub_1001544D4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10015454C(a1, a2, v4);
}

unint64_t sub_10015454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    NSString v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            Class v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_100154694(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000471EC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    NSString v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    id v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000471EC(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000258D0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1001549B8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000471EC(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    NSString v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    id v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000471EC(&qword_1003F0598, (void (*)(uint64_t))&type metadata accessor for Device);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100156700((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100154CDC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10015F194();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_100154F5C(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_1001563DC();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    sub_10015667C((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10015F194();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1001569BC((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int sub_100154F5C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100044014(&qword_1003F0570);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10015F194();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1001563DC();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_100155144()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100044014(&qword_1003F0490);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100155424()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FriendInfoOption(0);
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100044014(&qword_1003F04C0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v0;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v33 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v32 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v32) {
          goto LABEL_33;
        }
        unint64_t v19 = v33[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v19 = v33[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v19 = v33[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v33, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v33[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v34 + 72);
      sub_1000457F4(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
      Hasher.init(_seed:)();
      type metadata accessor for HandleType();
      sub_1000471EC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_1000457F4((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1001557E8()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F0560);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000471EC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100155BE4()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F05A0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000471EC(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100155FE0()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F0520);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000471EC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1001563DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100044014(&qword_1003F0570);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    unint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10015667C(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_100156700(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100155BE4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100156F44((uint64_t (*)(void))&type metadata accessor for Device, &qword_1003F05A0);
      goto LABEL_12;
    }
    sub_100157AD8();
  }
  uint64_t v12 = *v3;
  sub_1000471EC(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000471EC(&qword_1003F0598, (void (*)(uint64_t))&type metadata accessor for Device);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001569BC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1001563DC();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1001571F4();
      goto LABEL_14;
    }
    sub_100158238();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10015F194();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void *sub_100156B34()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003F0490);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100156CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FriendInfoOption(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F04C0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_100045790(*(void *)(v6 + 48) + v19, (uint64_t)v5);
    uint64_t result = (void *)sub_1000457F4((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100156F24()
{
  return sub_100156F44((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1003F0560);
}

void *sub_100156F44(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_100044014(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  BOOL v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1001571F4()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003F0570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001573A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FriendInfoOption(0);
  uint64_t v33 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100044014(&qword_1003F04C0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v30 = v0;
  uint64_t v31 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v31 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v31 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v33 + 72);
    sub_100045790(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
    Hasher.init(_seed:)();
    type metadata accessor for HandleType();
    sub_1000471EC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_1000457F4((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v32) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100157728()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F0560);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000471EC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100157AD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F05A0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000471EC(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100157E88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F0520);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000471EC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100158238()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100044014(&qword_1003F0570);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1001584B4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0548, (uint64_t (*)(void))&type metadata accessor for Fence.DaysOfWeek);
}

uint64_t sub_1001584D4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F03F0, (uint64_t (*)(void))&type metadata accessor for Handle);
}

uint64_t sub_1001584F4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend);
}

uint64_t sub_100158514(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F03A0, (uint64_t (*)(void))type metadata accessor for FenceRecord);
}

uint64_t sub_100158534(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0388, (uint64_t (*)(void))&type metadata accessor for PersonHandle);
}

uint64_t sub_100158554(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003ECA98);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_100044014(&qword_1003F05A8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001586F8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003ECFC0, (uint64_t (*)(void))&type metadata accessor for Destination);
}

uint64_t sub_100158718(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F03E8, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100158738(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0550, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
}

uint64_t sub_100158758(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0558, (uint64_t (*)(void))&type metadata accessor for CloudKitCoordinator.Deletion);
}

uint64_t sub_100158778(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003F03C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 584);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 584 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001588F8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F04A8, (uint64_t (*)(void))&type metadata accessor for Device);
}

uint64_t sub_100158918(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100040DE8(a1, a2, a3, a4, &qword_1003F0510, &qword_1003F04F8);
}

uint64_t sub_10015892C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F03B0, type metadata accessor for FriendRecord);
}

uint64_t sub_10015894C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F05B0, (uint64_t (*)(void))type metadata accessor for ShareInvitationRecord);
}

uint64_t sub_10015896C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0540, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
}

uint64_t sub_10015898C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001589B4(a1, a2, a3, a4, &qword_1003F0588, &qword_1003F0590);
}

uint64_t sub_1001589A0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001589B4(a1, a2, a3, a4, &qword_1003F0578, &qword_1003F0580);
}

uint64_t sub_1001589B4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100044014(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_100044014(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100158B44(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100158B64(a1, a2, a3, a4, &qword_1003F0460, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_100158B64(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100044014(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100158DAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100044014(&qword_1003F0498);
  uint64_t v3 = *(void *)(sub_100044014(&qword_1003EEBF0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_100044014(&qword_1003EEBF0) - 8);
      uint64_t v10 = sub_10015CDF0(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_1001491B4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100158F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100044014(&qword_1003F03E8);
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_10015D17C(&v10, (char *)v6 + v5, v1, a1);
      sub_1001491B4();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100159074(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100044014(&qword_1003F03F0);
  uint64_t v3 = *(void *)(type metadata accessor for Handle() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_10015D570(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1001491B4();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001591C8(void *a1)
{
  return sub_100158B64(0, a1[2], 0, a1, &qword_1003F0358, (uint64_t (*)(void))&type metadata accessor for Fence);
}

uint64_t sub_10015920C(void *a1)
{
  return sub_100040DE8(0, a1[2], 0, a1, &qword_1003F0498, &qword_1003EEBF0);
}

Swift::Int sub_100159244(void **a1)
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003EEBF0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_10015920C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001592F0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001592F0(uint64_t *a1)
{
  uint64_t v254 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v254 - 8);
  uint64_t v3 = __chkstk_darwin(v254);
  v248 = (char *)&v219 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  v247 = (char *)&v219 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v238 = (char *)&v219 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v237 = (char *)&v219 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v225 = (char *)&v219 - v12;
  __chkstk_darwin(v11);
  v224 = (char *)&v219 - v13;
  uint64_t v256 = sub_100044014(&qword_1003EEBF0);
  uint64_t v243 = *(void *)(v256 - 8);
  uint64_t v14 = __chkstk_darwin(v256);
  uint64_t v234 = (uint64_t)&v219 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v257 = (uint64_t)&v219 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v246 = (char *)&v219 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v245 = (char *)&v219 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v272 = (uint64_t)&v219 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v271 = (uint64_t)&v219 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v236 = (char *)&v219 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v235 = (char *)&v219 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v241 = (uint64_t)&v219 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v240 = (uint64_t)&v219 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v223 = (char *)&v219 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v222 = (char *)&v219 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v227 = (uint64_t)&v219 - v39;
  __chkstk_darwin(v38);
  uint64_t v226 = (uint64_t)&v219 - v40;
  Swift::Int v41 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v41);
  if (result >= v41)
  {
    if ((v41 & 0x8000000000000000) == 0)
    {
      if (v41) {
        return sub_10015A81C(0, v41, 1, a1);
      }
      return result;
    }
    goto LABEL_158;
  }
  if (v41 >= 0) {
    uint64_t v43 = v41;
  }
  else {
    uint64_t v43 = v41 + 1;
  }
  if (v41 < -1)
  {
LABEL_166:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  Swift::Int v221 = result;
  if (v41 >= 2)
  {
    uint64_t v44 = v43 >> 1;
    uint64_t v45 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v45 + 16) = v44;
    uint64_t v46 = *(unsigned __int8 *)(v243 + 80);
    v220 = (void *)v45;
    unint64_t v242 = v45 + ((v46 + 32) & ~v46);
LABEL_12:
    Swift::Int v47 = 0;
    v253 = (char **)(v2 + 8);
    char v48 = (char *)_swiftEmptyArrayStorage;
    v249 = a1;
    while (1)
    {
      v233 = v48;
      Swift::Int v239 = v47;
      if (v47 + 1 >= v41)
      {
        Swift::Int v76 = v47 + 1;
      }
      else
      {
        Swift::Int v258 = v41;
        uint64_t v50 = *a1;
        Swift::Int v51 = v47;
        char v52 = *(char **)(v243 + 72);
        Swift::Int v260 = v47 + 1;
        uint64_t v53 = v226;
        sub_100013210(v50 + (void)v52 * (v47 + 1), v226, &qword_1003EEBF0);
        uint64_t v228 = v50;
        v268 = v52;
        sub_100013210(v50 + (void)v52 * v51, v227, &qword_1003EEBF0);
        uint64_t v54 = *(int *)(v256 + 48);
        uint64_t v55 = v222;
        uint64_t v56 = &v222[v54];
        uint64_t v270 = v53 + v54;
        uint64_t v57 = type metadata accessor for Friend();
        uint64_t v58 = *(void *)(v57 - 8);
        v251 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
        v251(v55, v53, v57);
        uint64_t v59 = type metadata accessor for FriendshipAction();
        v259 = *(char **)(v59 - 8);
        uint64_t v60 = (void (*)(char *, uint64_t, uint64_t))(v259 + 16);
        uint64_t v61 = (void (*)(char *, uint64_t, uint64_t))*((void *)v259 + 2);
        v263 = v56;
        v61(v56, v270, v59);
        uint64_t v62 = v224;
        Friend.handle.getter();
        uint64_t v269 = *(void *)(v58 + 8);
        ((void (*)(char *, uint64_t))v269)(v55, v57);
        uint64_t v63 = Handle.identifier.getter();
        uint64_t v261 = v64;
        uint64_t v262 = v63;
        v250 = *v253;
        ((void (*)(char *, uint64_t))v250)(v62, v254);
        uint64_t v65 = *(int *)(v256 + 48);
        uint64_t v66 = v223;
        uint64_t v67 = &v223[v65];
        uint64_t v68 = v227 + v65;
        uint64_t v266 = v58 + 16;
        ((void (*)(char *))v251)(v223);
        uint64_t v69 = v67;
        uint64_t v270 = v59;
        v264 = v61;
        v265 = v60;
        v61(v67, v68, v59);
        uint64_t v70 = v225;
        Friend.handle.getter();
        uint64_t v232 = v57;
        uint64_t v71 = v57;
        uint64_t v72 = v261;
        uint64_t v267 = v58 + 8;
        ((void (*)(char *, uint64_t))v269)(v66, v71);
        uint64_t v73 = Handle.identifier.getter();
        uint64_t v75 = v74;
        ((void (*)(char *, uint64_t))v250)(v70, v254);
        if (v262 == v73 && v72 == v75) {
          LODWORD(v252) = 0;
        }
        else {
          LODWORD(v252) = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v77 = v259 + 8;
        uint64_t v78 = (void (*)(char *, uint64_t))*((void *)v259 + 1);
        uint64_t v79 = v270;
        v78(v69, v270);
        v259 = v77;
        v231 = v78;
        v78(v263, v79);
        sub_10000A520(v227, &qword_1003EEBF0);
        sub_10000A520(v226, &qword_1003EEBF0);
        Swift::Int v47 = v239;
        Swift::Int v76 = v239 + 2;
        Swift::Int v41 = v258;
        if (v239 + 2 >= v258)
        {
          a1 = v249;
        }
        else
        {
          uint64_t v230 = (void)v268 * v260;
          uint64_t v80 = (char *)v228;
          Swift::Int v229 = (void)v268 * v76;
          while (1)
          {
            Swift::Int v255 = v76;
            uint64_t v81 = v240;
            sub_100013210((uint64_t)&v80[v229], v240, &qword_1003EEBF0);
            Swift::Int v260 = (Swift::Int)v80;
            uint64_t v82 = v241;
            sub_100013210((uint64_t)&v80[v230], v241, &qword_1003EEBF0);
            uint64_t v83 = v256;
            uint64_t v84 = *(int *)(v256 + 48);
            uint64_t v85 = v235;
            int64_t v86 = &v235[v84];
            uint64_t v87 = v81 + v84;
            uint64_t v88 = v232;
            unint64_t v89 = v251;
            v251(v235, v81, v232);
            v263 = v86;
            v264(v86, v87, v270);
            uint64_t v90 = v237;
            Friend.handle.getter();
            ((void (*)(char *, uint64_t))v269)(v85, v88);
            uint64_t v91 = Handle.identifier.getter();
            uint64_t v261 = v92;
            uint64_t v262 = v91;
            uint64_t v93 = v254;
            uint64_t v94 = (void (*)(char *, uint64_t))v250;
            ((void (*)(char *, uint64_t))v250)(v90, v254);
            uint64_t v95 = *(int *)(v83 + 48);
            uint64_t v96 = v236;
            Swift::Int v97 = &v236[v95];
            uint64_t v98 = v82 + v95;
            v89(v236, v82, v88);
            unint64_t v99 = v97;
            v264(v97, v98, v270);
            int64_t v100 = v238;
            Friend.handle.getter();
            ((void (*)(char *, uint64_t))v269)(v96, v88);
            uint64_t v101 = Handle.identifier.getter();
            uint64_t v103 = v102;
            v94(v100, v93);
            if (v262 != v101) {
              goto LABEL_26;
            }
            if (v261 == v103) {
              char v104 = 0;
            }
            else {
LABEL_26:
            }
              char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v105 = v270;
            uint64_t v106 = v231;
            v231(v99, v270);
            v106(v263, v105);
            sub_10000A520(v241, &qword_1003EEBF0);
            sub_10000A520(v240, &qword_1003EEBF0);
            char v107 = v252 ^ v104;
            Swift::Int v41 = v258;
            if (v107) {
              break;
            }
            Swift::Int v76 = v255 + 1;
            uint64_t v80 = &v268[v260];
            if (v258 == v255 + 1)
            {
              Swift::Int v76 = v258;
              a1 = v249;
              goto LABEL_32;
            }
          }
          a1 = v249;
          Swift::Int v76 = v255;
LABEL_32:
          Swift::Int v47 = v239;
        }
        if (v252)
        {
          if (v76 < v47) {
            goto LABEL_159;
          }
          if (v47 < v76)
          {
            uint64_t v108 = 0;
            uint64_t v109 = (void)v268 * (v76 - 1);
            Swift::Int v110 = v76 * (void)v268;
            Swift::Int v111 = v47;
            uint64_t v112 = v47 * (void)v268;
            Swift::Int v255 = v76;
            do
            {
              if (v111 != v76 + v108 - 1)
              {
                uint64_t v113 = v228;
                if (!v228) {
                  goto LABEL_164;
                }
                unint64_t v114 = v228 + v112;
                sub_100013B50(v228 + v112, v234, &qword_1003EEBF0);
                if (v112 < v109 || v114 >= v113 + v110)
                {
                  swift_arrayInitWithTakeFrontToBack();
                }
                else if (v112 != v109)
                {
                  swift_arrayInitWithTakeBackToFront();
                }
                sub_100013B50(v234, v113 + v109, &qword_1003EEBF0);
                Swift::Int v76 = v255;
              }
              ++v111;
              --v108;
              v109 -= (uint64_t)v268;
              v110 -= (uint64_t)v268;
              v112 += (uint64_t)v268;
            }
            while (v111 < v76 + v108);
            Swift::Int v47 = v239;
            Swift::Int v41 = v258;
            a1 = v249;
          }
        }
      }
      if (v76 < v41)
      {
        if (__OFSUB__(v76, v47)) {
          goto LABEL_157;
        }
        if (v76 - v47 < v221)
        {
          if (__OFADD__(v239, v221)) {
            goto LABEL_160;
          }
          if (v239 + v221 >= v41) {
            Swift::Int v115 = v41;
          }
          else {
            Swift::Int v115 = v239 + v221;
          }
          if (v115 < v239) {
            goto LABEL_161;
          }
          if (v76 == v115)
          {
            Swift::Int v47 = v239;
            goto LABEL_70;
          }
          id v116 = *(char **)(v243 + 72);
          uint64_t v117 = (void)v116 * (v76 - 1);
          v250 = v116;
          Swift::Int v118 = v76 * (void)v116;
          uint64_t v232 = v115;
          do
          {
            uint64_t v121 = 0;
            Swift::Int v122 = v239;
            Swift::Int v255 = v76;
            v251 = (void (*)(char *, uint64_t, uint64_t))v118;
            uint64_t v252 = v117;
            while (1)
            {
              Swift::Int v260 = v122;
              uint64_t v123 = *a1;
              v259 = (char *)(v118 + v121);
              uint64_t v124 = v118 + v121 + v123;
              uint64_t v125 = v271;
              sub_100013210(v124, v271, &qword_1003EEBF0);
              uint64_t v261 = v121;
              Swift::Int v258 = v117 + v121;
              sub_100013210(v117 + v121 + v123, v272, &qword_1003EEBF0);
              uint64_t v126 = v256;
              uint64_t v127 = *(int *)(v256 + 48);
              uint64_t v128 = v245;
              id v129 = &v245[v127];
              uint64_t v130 = v125 + v127;
              uint64_t v131 = type metadata accessor for Friend();
              uint64_t v132 = *(void *)(v131 - 8);
              v268 = *(char **)(v132 + 16);
              ((void (*)(char *, uint64_t, uint64_t))v268)(v128, v125, v131);
              uint64_t v262 = type metadata accessor for FriendshipAction();
              uint64_t v269 = *(void *)(v262 - 8);
              uint64_t v270 = (uint64_t)v129;
              v265 = *(void (**)(char *, uint64_t, uint64_t))(v269 + 16);
              v265(v129, v130, v262);
              BOOL v133 = v247;
              Friend.handle.getter();
              v264 = *(void (**)(char *, uint64_t, uint64_t))(v132 + 8);
              ((void (*)(char *, uint64_t))v264)(v128, v131);
              uint64_t v134 = Handle.identifier.getter();
              uint64_t v266 = v135;
              uint64_t v267 = v134;
              v263 = *v253;
              v136 = v133;
              uint64_t v137 = v254;
              ((void (*)(char *, uint64_t))v263)(v136, v254);
              uint64_t v138 = *(int *)(v126 + 48);
              id v139 = v246;
              uint64_t v140 = &v246[v138];
              uint64_t v141 = v272 + v138;
              ((void (*)(char *))v268)(v246);
              uint64_t v142 = v262;
              v268 = v140;
              v265(v140, v141, v262);
              uint64_t v143 = v248;
              Friend.handle.getter();
              ((void (*)(char *, uint64_t))v264)(v139, v131);
              uint64_t v144 = Handle.identifier.getter();
              uint64_t v146 = v145;
              uint64_t v147 = v137;
              uint64_t v148 = v266;
              ((void (*)(char *, uint64_t))v263)(v143, v147);
              if (v267 == v144 && v148 == v146) {
                break;
              }
              char v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v150 = *(void (**)(char *, uint64_t))(v269 + 8);
              v150(v268, v142);
              v150((char *)v270, v142);
              sub_10000A520(v272, &qword_1003EEBF0);
              sub_10000A520(v271, &qword_1003EEBF0);
              if ((v149 & 1) == 0) {
                goto LABEL_59;
              }
              a1 = v249;
              uint64_t v151 = *v249;
              uint64_t v117 = v252;
              if (!*v249) {
                goto LABEL_162;
              }
              Swift::Int v118 = (Swift::Int)v251;
              uint64_t v152 = v261;
              uint64_t v153 = v151 + v252 + v261;
              sub_100013B50((uint64_t)v251 + v151 + v261, v257, &qword_1003EEBF0);
              swift_arrayInitWithTakeFrontToBack();
              sub_100013B50(v257, v153, &qword_1003EEBF0);
              uint64_t v121 = v152 - (void)v250;
              Swift::Int v122 = v260 + 1;
              Swift::Int v120 = v255;
              if (v255 == v260 + 1) {
                goto LABEL_60;
              }
            }
            swift_bridgeObjectRelease_n();
            uint64_t v119 = *(void (**)(char *, uint64_t))(v269 + 8);
            v119(v268, v142);
            v119((char *)v270, v142);
            sub_10000A520(v272, &qword_1003EEBF0);
            sub_10000A520(v271, &qword_1003EEBF0);
LABEL_59:
            a1 = v249;
            Swift::Int v120 = v255;
            Swift::Int v118 = (Swift::Int)v251;
            uint64_t v117 = v252;
LABEL_60:
            Swift::Int v76 = v120 + 1;
            v117 += (uint64_t)v250;
            v118 += (Swift::Int)v250;
          }
          while (v76 != v232);
          Swift::Int v76 = v232;
        }
        Swift::Int v47 = v239;
      }
LABEL_70:
      if (v76 < v47)
      {
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v255 = v76;
      if (isUniquelyReferenced_nonNull_native) {
        char v48 = v233;
      }
      else {
        char v48 = sub_10015BA78(0, *((void *)v233 + 2) + 1, 1, v233);
      }
      unint64_t v156 = *((void *)v48 + 2);
      unint64_t v155 = *((void *)v48 + 3);
      unint64_t v49 = v156 + 1;
      if (v156 >= v155 >> 1) {
        char v48 = sub_10015BA78((char *)(v155 > 1), v156 + 1, 1, v48);
      }
      *((void *)v48 + 2) = v49;
      v157 = v48 + 32;
      v158 = &v48[16 * v156 + 32];
      Swift::Int v159 = v255;
      *(void *)v158 = v239;
      *((void *)v158 + 1) = v159;
      if (v156)
      {
        while (1)
        {
          unint64_t v160 = v49 - 1;
          if (v49 >= 4)
          {
            v165 = &v157[16 * v49];
            uint64_t v166 = *((void *)v165 - 8);
            uint64_t v167 = *((void *)v165 - 7);
            BOOL v171 = __OFSUB__(v167, v166);
            uint64_t v168 = v167 - v166;
            if (v171) {
              goto LABEL_141;
            }
            uint64_t v170 = *((void *)v165 - 6);
            uint64_t v169 = *((void *)v165 - 5);
            BOOL v171 = __OFSUB__(v169, v170);
            uint64_t v163 = v169 - v170;
            char v164 = v171;
            if (v171) {
              goto LABEL_142;
            }
            unint64_t v172 = v49 - 2;
            v173 = &v157[16 * v49 - 32];
            uint64_t v175 = *(void *)v173;
            uint64_t v174 = *((void *)v173 + 1);
            BOOL v171 = __OFSUB__(v174, v175);
            uint64_t v176 = v174 - v175;
            if (v171) {
              goto LABEL_144;
            }
            BOOL v171 = __OFADD__(v163, v176);
            uint64_t v177 = v163 + v176;
            if (v171) {
              goto LABEL_147;
            }
            if (v177 >= v168)
            {
              uint64_t v195 = &v157[16 * v160];
              uint64_t v197 = *(void *)v195;
              uint64_t v196 = *((void *)v195 + 1);
              BOOL v171 = __OFSUB__(v196, v197);
              uint64_t v198 = v196 - v197;
              if (v171) {
                goto LABEL_151;
              }
              BOOL v188 = v163 < v198;
              goto LABEL_107;
            }
          }
          else
          {
            if (v49 != 3)
            {
              uint64_t v189 = *((void *)v48 + 4);
              uint64_t v190 = *((void *)v48 + 5);
              BOOL v171 = __OFSUB__(v190, v189);
              uint64_t v182 = v190 - v189;
              char v183 = v171;
              goto LABEL_101;
            }
            uint64_t v162 = *((void *)v48 + 4);
            uint64_t v161 = *((void *)v48 + 5);
            BOOL v171 = __OFSUB__(v161, v162);
            uint64_t v163 = v161 - v162;
            char v164 = v171;
          }
          if (v164) {
            goto LABEL_143;
          }
          unint64_t v172 = v49 - 2;
          v178 = &v157[16 * v49 - 32];
          uint64_t v180 = *(void *)v178;
          uint64_t v179 = *((void *)v178 + 1);
          BOOL v181 = __OFSUB__(v179, v180);
          uint64_t v182 = v179 - v180;
          char v183 = v181;
          if (v181) {
            goto LABEL_146;
          }
          v184 = &v157[16 * v160];
          uint64_t v186 = *(void *)v184;
          uint64_t v185 = *((void *)v184 + 1);
          BOOL v171 = __OFSUB__(v185, v186);
          uint64_t v187 = v185 - v186;
          if (v171) {
            goto LABEL_149;
          }
          if (__OFADD__(v182, v187)) {
            goto LABEL_150;
          }
          if (v182 + v187 >= v163)
          {
            BOOL v188 = v163 < v187;
LABEL_107:
            if (v188) {
              unint64_t v160 = v172;
            }
            goto LABEL_109;
          }
LABEL_101:
          if (v183) {
            goto LABEL_145;
          }
          v191 = &v157[16 * v160];
          uint64_t v193 = *(void *)v191;
          uint64_t v192 = *((void *)v191 + 1);
          BOOL v171 = __OFSUB__(v192, v193);
          uint64_t v194 = v192 - v193;
          if (v171) {
            goto LABEL_148;
          }
          if (v194 < v182) {
            goto LABEL_14;
          }
LABEL_109:
          unint64_t v199 = v160 - 1;
          if (v160 - 1 >= v49)
          {
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }
          uint64_t v200 = *a1;
          if (!*a1) {
            goto LABEL_163;
          }
          v201 = v48;
          v202 = a1;
          v203 = &v157[16 * v199];
          uint64_t v204 = *(void *)v203;
          v205 = v157;
          v206 = &v157[16 * v160];
          uint64_t v207 = *((void *)v206 + 1);
          uint64_t v208 = v244;
          sub_10015AE68(v200 + *(void *)(v243 + 72) * *(void *)v203, v200 + *(void *)(v243 + 72) * *(void *)v206, v200 + *(void *)(v243 + 72) * v207, v242);
          if (v208)
          {
            v210 = v220;
LABEL_119:
            swift_bridgeObjectRelease();
            v210[2] = 0;
            return swift_bridgeObjectRelease();
          }
          if (v207 < v204) {
            goto LABEL_138;
          }
          if (v160 > *((void *)v201 + 2)) {
            goto LABEL_139;
          }
          *(void *)v203 = v204;
          *(void *)&v205[16 * v199 + 8] = v207;
          unint64_t v209 = *((void *)v201 + 2);
          if (v160 >= v209) {
            goto LABEL_140;
          }
          uint64_t v244 = 0;
          unint64_t v49 = v209 - 1;
          memmove(v206, v206 + 16, 16 * (v209 - 1 - v160));
          v157 = v205;
          char v48 = v201;
          *((void *)v201 + 2) = v209 - 1;
          a1 = v202;
          if (v209 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v49 = 1;
LABEL_14:
      Swift::Int v41 = a1[1];
      Swift::Int v47 = v255;
      if (v255 >= v41) {
        goto LABEL_121;
      }
    }
  }
  unint64_t v242 = (unint64_t)_swiftEmptyArrayStorage
       + ((*(unsigned __int8 *)(v243 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v243 + 80));
  v220 = _swiftEmptyArrayStorage;
  if (v41 == 1) {
    goto LABEL_12;
  }
  unint64_t v49 = _swiftEmptyArrayStorage[2];
  char v48 = (char *)_swiftEmptyArrayStorage;
LABEL_121:
  if (v49 >= 2)
  {
    uint64_t v211 = *a1;
    v210 = v220;
    while (1)
    {
      unint64_t v212 = v49 - 2;
      if (v49 < 2) {
        goto LABEL_153;
      }
      if (!v211) {
        goto LABEL_165;
      }
      v213 = v48;
      uint64_t v214 = *(void *)&v48[16 * v212 + 32];
      uint64_t v215 = *(void *)&v48[16 * v49 + 24];
      uint64_t v216 = v244;
      sub_10015AE68(v211 + *(void *)(v243 + 72) * v214, v211 + *(void *)(v243 + 72) * *(void *)&v48[16 * v49 + 16], v211 + *(void *)(v243 + 72) * v215, v242);
      if (v216) {
        goto LABEL_119;
      }
      if (v215 < v214) {
        goto LABEL_154;
      }
      uint64_t v244 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v213 = sub_10015BDF8((uint64_t)v213);
      }
      if (v212 >= *((void *)v213 + 2)) {
        goto LABEL_155;
      }
      v217 = &v213[16 * v212 + 32];
      *(void *)v217 = v214;
      *((void *)v217 + 1) = v215;
      unint64_t v218 = *((void *)v213 + 2);
      if (v49 > v218) {
        goto LABEL_156;
      }
      memmove(&v213[16 * v49 + 16], &v213[16 * v49 + 32], 16 * (v218 - v49));
      char v48 = v213;
      *((void *)v213 + 2) = v218 - 1;
      unint64_t v49 = v218 - 1;
      if (v218 <= 2) {
        goto LABEL_134;
      }
    }
  }
  v210 = v220;
LABEL_134:
  swift_bridgeObjectRelease();
  v210[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015A81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v75 = a4;
  uint64_t v59 = a1;
  uint64_t v66 = type metadata accessor for Handle();
  uint64_t v6 = *(void *)(v66 - 8);
  uint64_t v7 = __chkstk_darwin(v66);
  uint64_t v65 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v64 = &v57[-v9];
  uint64_t v71 = sub_100044014(&qword_1003EEBF0);
  uint64_t v10 = __chkstk_darwin(v71);
  uint64_t v72 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v63 = &v57[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v62 = &v57[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v87 = &v57[-v17];
  uint64_t result = __chkstk_darwin(v16);
  uint64_t v21 = &v57[-v20];
  uint64_t v70 = a3;
  uint64_t v58 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *(void *)(v19 + 72);
    uint64_t v60 = (void (**)(unsigned char *, uint64_t))(v6 + 8);
    uint64_t v23 = v22 * (v70 - 1);
    uint64_t v67 = v22;
    uint64_t v24 = v22 * v70;
    uint64_t v61 = &v57[-v20];
LABEL_6:
    uint64_t v26 = 0;
    uint64_t v76 = v59;
    uint64_t v68 = v24;
    uint64_t v69 = v23;
    while (1)
    {
      uint64_t v27 = *v75;
      uint64_t v74 = v24 + v26;
      sub_100013210(v24 + v26 + v27, (uint64_t)v21, &qword_1003EEBF0);
      uint64_t v77 = v26;
      uint64_t v73 = v23 + v26;
      sub_100013210(v23 + v26 + v27, (uint64_t)v87, &qword_1003EEBF0);
      uint64_t v28 = v71;
      uint64_t v29 = *(int *)(v71 + 48);
      uint64_t v30 = v62;
      uint64_t v31 = &v62[v29];
      uint64_t v32 = &v21[v29];
      uint64_t v33 = type metadata accessor for Friend();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v84 = *(void (**)(void))(v34 + 16);
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v84)(v30, v21, v33);
      uint64_t v35 = type metadata accessor for FriendshipAction();
      uint64_t v85 = *(void *)(v35 - 8);
      int64_t v86 = v31;
      uint64_t v36 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v85 + 16);
      uint64_t v80 = v35;
      uint64_t v81 = v36;
      v36(v31, v32, v35);
      uint64_t v37 = v64;
      Friend.handle.getter();
      uint64_t v79 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
      v79(v30, v33);
      uint64_t v38 = Handle.identifier.getter();
      uint64_t v82 = v39;
      uint64_t v83 = v38;
      uint64_t v78 = *v60;
      uint64_t v40 = v37;
      uint64_t v41 = v66;
      v78(v40, v66);
      uint64_t v42 = *(int *)(v28 + 48);
      uint64_t v43 = v63;
      uint64_t v44 = &v63[v42];
      uint64_t v45 = &v87[v42];
      v84(v63);
      uint64_t v46 = v45;
      uint64_t v47 = v80;
      v81(v44, v46, v80);
      char v48 = v65;
      Friend.handle.getter();
      v79(v43, v33);
      uint64_t v49 = Handle.identifier.getter();
      uint64_t v51 = v50;
      v78(v48, v41);
      if (v83 == v49 && v82 == v51)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v85 + 8);
        v25(v44, v47);
        v25(v86, v47);
        sub_10000A520((uint64_t)v87, &qword_1003EEBF0);
        uint64_t v21 = v61;
        uint64_t result = sub_10000A520((uint64_t)v61, &qword_1003EEBF0);
        uint64_t v24 = v68;
        uint64_t v23 = v69;
LABEL_5:
        v23 += v67;
        v24 += v67;
        if (++v70 == v58) {
          return result;
        }
        goto LABEL_6;
      }
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void (**)(unsigned char *, uint64_t))(v85 + 8);
      v53(v44, v47);
      v53(v86, v47);
      sub_10000A520((uint64_t)v87, &qword_1003EEBF0);
      uint64_t v21 = v61;
      uint64_t result = sub_10000A520((uint64_t)v61, &qword_1003EEBF0);
      uint64_t v24 = v68;
      uint64_t v23 = v69;
      uint64_t v54 = v77;
      if ((v52 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v55 = *v75;
      if (!*v75) {
        break;
      }
      uint64_t v56 = v55 + v69 + v77;
      sub_100013B50(v55 + v68 + v77, (uint64_t)v72, &qword_1003EEBF0);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100013B50((uint64_t)v72, v56, &qword_1003EEBF0);
      uint64_t v26 = v54 - v67;
      if (v70 == ++v76) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10015AE68(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v133 = type metadata accessor for Handle();
  uint64_t v8 = *(void *)(v133 - 8);
  uint64_t v9 = __chkstk_darwin(v133);
  uint64_t v123 = &v111[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v121 = &v111[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v124 = &v111[-v14];
  __chkstk_darwin(v13);
  Swift::Int v122 = &v111[-v15];
  uint64_t v137 = sub_100044014(&qword_1003EEBF0);
  uint64_t v16 = __chkstk_darwin(v137);
  Swift::Int v120 = &v111[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v119 = &v111[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v135 = &v111[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = &v111[-v23];
  uint64_t v25 = __chkstk_darwin(v22);
  Swift::Int v118 = &v111[-v26];
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v117 = &v111[-v28];
  uint64_t v29 = __chkstk_darwin(v27);
  v136 = &v111[-v30];
  __chkstk_darwin(v29);
  uint64_t v32 = &v111[-v31];
  uint64_t v34 = *(void *)(v33 + 72);
  if (!v34)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v34 == -1) {
    goto LABEL_68;
  }
  int64_t v35 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v34 == -1) {
    goto LABEL_69;
  }
  uint64_t v36 = (uint64_t)(a2 - a1) / v34;
  unint64_t v141 = a1;
  unint64_t v140 = a4;
  uint64_t v37 = v35 / v34;
  if (v36 >= v35 / v34)
  {
    if ((v37 & 0x8000000000000000) == 0)
    {
      uint64_t v39 = v37 * v34;
      if (a4 < a2 || a2 + v39 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v76 = a4 + v39;
      unint64_t v139 = a4 + v39;
      unint64_t v141 = a2;
      if (v39 >= 1 && a1 < a2)
      {
        uint64_t v78 = -v34;
        Swift::Int v118 = (unsigned char *)(v8 + 8);
        unint64_t v116 = a4;
        unint64_t v115 = a1;
        uint64_t v113 = v24;
        Swift::Int v122 = (unsigned char *)v78;
        do
        {
          unint64_t v134 = a3;
          sub_100013210(v76 + v78, (uint64_t)v24, &qword_1003EEBF0);
          unint64_t v138 = a2;
          uint64_t v124 = (unsigned char *)(a2 + v78);
          sub_100013210(a2 + v78, (uint64_t)v135, &qword_1003EEBF0);
          uint64_t v79 = v137;
          uint64_t v80 = *(int *)(v137 + 48);
          uint64_t v81 = v119;
          uint64_t v82 = &v119[v80];
          uint64_t v83 = &v24[v80];
          uint64_t v84 = type metadata accessor for Friend();
          uint64_t v85 = *(void *)(v84 - 8);
          uint64_t v131 = *(void (**)(void))(v85 + 16);
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v131)(v81, v24, v84);
          uint64_t v125 = (void *)type metadata accessor for FriendshipAction();
          uint64_t v132 = *(v125 - 1);
          uint64_t v128 = *(void (**)(unsigned char *, unsigned char *, void (*)(unsigned char *, uint64_t)))(v132 + 16);
          v136 = v82;
          v128(v82, v83, (void (*)(unsigned char *, uint64_t))v125);
          int64_t v86 = v121;
          Friend.handle.getter();
          uint64_t v127 = *(void (**)(unsigned char *, uint64_t))(v85 + 8);
          v127(v81, v84);
          uint64_t v87 = Handle.identifier.getter();
          uint64_t v129 = v88;
          uint64_t v130 = v87;
          uint64_t v126 = *(void (**)(unsigned char *, uint64_t))v118;
          unint64_t v89 = v86;
          uint64_t v90 = v133;
          v126(v89, v133);
          uint64_t v91 = *(int *)(v79 + 48);
          uint64_t v92 = v120;
          uint64_t v93 = &v120[v91];
          uint64_t v94 = &v135[v91];
          v131(v120);
          uint64_t v95 = v125;
          v128(v93, v94, (void (*)(unsigned char *, uint64_t))v125);
          uint64_t v96 = v123;
          Friend.handle.getter();
          v127(v92, v84);
          uint64_t v97 = Handle.identifier.getter();
          uint64_t v99 = v98;
          int64_t v100 = v96;
          uint64_t v101 = v129;
          v126(v100, v90);
          if (v130 == v97 && v101 == v99) {
            char v102 = 0;
          }
          else {
            char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          unint64_t v103 = v134;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v78 = (uint64_t)v122;
          char v104 = &v122[v103];
          uint64_t v105 = *(void (**)(unsigned char *, void *))(v132 + 8);
          v105(v93, v95);
          v105(v136, v95);
          sub_10000A520((uint64_t)v135, &qword_1003EEBF0);
          uint64_t v24 = v113;
          sub_10000A520((uint64_t)v113, &qword_1003EEBF0);
          unint64_t v106 = v115;
          if (v102)
          {
            if (v103 < v138 || (unint64_t)v104 >= v138)
            {
              uint64_t v108 = v124;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v107 = v116;
            }
            else
            {
              unint64_t v107 = v116;
              uint64_t v108 = v124;
              if (v103 != v138) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v141 += v78;
          }
          else
          {
            unint64_t v109 = v139;
            v139 += v78;
            if (v103 < v109 || (unint64_t)v104 >= v109)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v108 = (unsigned char *)v138;
              unint64_t v107 = v116;
            }
            else
            {
              uint64_t v108 = (unsigned char *)v138;
              unint64_t v107 = v116;
              if (v103 != v109) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
          }
          unint64_t v76 = v139;
          if (v139 <= v107) {
            break;
          }
          a2 = (unint64_t)v108;
          a3 = v103 + v78;
        }
        while ((unint64_t)v108 > v106);
      }
LABEL_66:
      sub_10015BCB4(&v141, &v140, (uint64_t *)&v139);
      return 1;
    }
  }
  else if ((v36 & 0x8000000000000000) == 0)
  {
    uint64_t v38 = v36 * v34;
    if (a4 < a1 || a1 + v38 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v123 = (unsigned char *)(a4 + v38);
    unint64_t v139 = a4 + v38;
    if (v38 >= 1 && a2 < a3)
    {
      uint64_t v121 = (unsigned char *)(v8 + 8);
      unint64_t v134 = a3;
      uint64_t v114 = v34;
      uint64_t v112 = v32;
      while (1)
      {
        unint64_t v138 = a2;
        sub_100013210(a2, (uint64_t)v32, &qword_1003EEBF0);
        sub_100013210(a4, (uint64_t)v136, &qword_1003EEBF0);
        uint64_t v41 = v137;
        uint64_t v42 = *(int *)(v137 + 48);
        uint64_t v43 = v117;
        uint64_t v44 = &v117[v42];
        uint64_t v45 = &v32[v42];
        uint64_t v46 = type metadata accessor for Friend();
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v131 = *(void (**)(void))(v47 + 16);
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v131)(v43, v32, v46);
        uint64_t v48 = type metadata accessor for FriendshipAction();
        uint64_t v132 = *(void *)(v48 - 8);
        uint64_t v49 = *(void (**)(unsigned char *, unsigned char *, void (*)(unsigned char *, uint64_t)))(v132 + 16);
        uint64_t v127 = (void (*)(unsigned char *, uint64_t))v48;
        uint64_t v128 = v49;
        uint64_t v135 = v44;
        v49(v44, v45, (void (*)(unsigned char *, uint64_t))v48);
        uint64_t v50 = v122;
        Friend.handle.getter();
        uint64_t v126 = *(void (**)(unsigned char *, uint64_t))(v47 + 8);
        v126(v43, v46);
        uint64_t v51 = Handle.identifier.getter();
        uint64_t v129 = v52;
        uint64_t v130 = v51;
        uint64_t v125 = *(void **)v121;
        uint64_t v53 = v50;
        uint64_t v54 = v133;
        ((void (*)(unsigned char *, uint64_t))v125)(v53, v133);
        uint64_t v55 = *(int *)(v41 + 48);
        uint64_t v56 = v118;
        uint64_t v57 = &v118[v55];
        uint64_t v58 = &v136[v55];
        v131(v118);
        uint64_t v59 = v58;
        uint64_t v60 = (void (*)(void, void))v127;
        v128(v57, v59, v127);
        uint64_t v61 = v124;
        Friend.handle.getter();
        v126(v56, v46);
        uint64_t v62 = Handle.identifier.getter();
        uint64_t v64 = v63;
        uint64_t v65 = v61;
        uint64_t v66 = v129;
        ((void (*)(unsigned char *, uint64_t))v125)(v65, v54);
        if (v130 == v62 && v66 == v64) {
          break;
        }
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = *(void (**)(unsigned char *, void))(v132 + 8);
        v70(v57, v60);
        v70(v135, v60);
        sub_10000A520((uint64_t)v136, &qword_1003EEBF0);
        uint64_t v32 = v112;
        sub_10000A520((uint64_t)v112, &qword_1003EEBF0);
        uint64_t v68 = v114;
        if ((v69 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v71 = v141;
        unint64_t v72 = v138 + v114;
        if (v141 < v138 || v141 >= v72)
        {
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v73 = v134;
        }
        else
        {
          unint64_t v73 = v134;
          if (v141 == v138) {
            unint64_t v71 = v138;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v141 = v71 + v68;
        a4 = v140;
        if (v140 < (unint64_t)v123)
        {
          a2 = v72;
          if (v72 < v73) {
            continue;
          }
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v67 = *(void (**)(unsigned char *, void))(v132 + 8);
      v67(v57, v60);
      v67(v135, v60);
      sub_10000A520((uint64_t)v136, &qword_1003EEBF0);
      uint64_t v32 = v112;
      sub_10000A520((uint64_t)v112, &qword_1003EEBF0);
      uint64_t v68 = v114;
LABEL_31:
      unint64_t v71 = v141;
      unint64_t v74 = v140 + v68;
      unint64_t v75 = v138;
      if (v141 < v140 || v141 >= v74)
      {
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v73 = v134;
      }
      else
      {
        unint64_t v73 = v134;
        if (v141 != v140) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v140 = v74;
      unint64_t v72 = v75;
      goto LABEL_37;
    }
    goto LABEL_66;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10015BA78(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003F04A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10015BB74(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for Fence();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_10015BCB4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_100044014(&qword_1003EEBF0);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_10015BDF8(uint64_t a1)
{
  return sub_10015BA78(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unsigned int *sub_10015BE0C(uint64_t isStackAllocationSafe, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_10015BF84((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2, a3);
    if (v3) {
      swift_willThrow();
    }
    else {
      return (unsigned int *)v10;
    }
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = (unsigned int *)sub_10015BF84((unint64_t *)v11, v8, v6, a2, a3);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_10015BF84(unint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v63 = a2;
  uint64_t v64 = a1;
  uint64_t v80 = type metadata accessor for HandleType();
  uint64_t v8 = *(void *)(v80 - 8);
  uint64_t v9 = __chkstk_darwin(v80);
  uint64_t v79 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v78 = (char *)&v62 - v11;
  uint64_t v94 = sub_100044014(&qword_1003EEBF0);
  uint64_t v12 = __chkstk_darwin(v94);
  uint64_t v77 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v76 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  unint64_t v102 = (unint64_t)&v62 - v16;
  uint64_t v95 = type metadata accessor for FriendshipAction();
  uint64_t v17 = *(void *)(v95 - 8);
  uint64_t v18 = __chkstk_darwin(v95);
  unint64_t v72 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v96 = (char *)&v62 - v20;
  uint64_t v21 = type metadata accessor for Friend();
  uint64_t result = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = 0;
  int64_t v26 = 0;
  uint64_t v82 = (void *)a3;
  uint64_t v27 = *(void *)(a3 + 64);
  uint64_t v69 = a3 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v70 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v97 = v23 + 2;
  uint64_t v91 = v17 + 16;
  uint64_t v92 = v23;
  uint64_t v90 = v23 + 1;
  unsigned int v75 = *a4;
  unint64_t v74 = (void (**)(char *, void, uint64_t))(v8 + 104);
  unint64_t v73 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v31 = v25;
  uint64_t v83 = v17 + 8;
  unsigned int v67 = *a5;
  uint64_t v93 = (void *)v17;
  uint64_t v66 = (void (**)(char *, void, uint64_t))(v17 + 104);
  uint64_t v68 = result;
  unint64_t v71 = v25;
  while (v30)
  {
    uint64_t v84 = (v30 - 1) & v30;
    int64_t v85 = v26;
    unint64_t v32 = __clz(__rbit64(v30)) | (v26 << 6);
LABEL_21:
    uint64_t v37 = v82;
    unint64_t v38 = v82[6] + v92[9] * v32;
    uint64_t v39 = (void (*)(char *, unint64_t, uint64_t))v92[2];
    unint64_t v40 = v32;
    unint64_t v81 = v32;
    v39(v31, v38, v21);
    uint64_t v88 = (void (*)(char *, uint64_t, uint64_t))v39;
    uint64_t v41 = v21;
    uint64_t v42 = (void (*)(char *, unint64_t, uint64_t))v93[2];
    uint64_t v43 = v95;
    v42(v96, v37[7] + v93[9] * v40, v95);
    uint64_t v44 = v94;
    uint64_t v45 = (char *)(v102 + *(int *)(v94 + 48));
    ((void (*)(void))v39)();
    unint64_t v89 = (unint64_t)v45;
    v42(v45, (unint64_t)v96, v43);
    uint64_t v46 = v76;
    uint64_t v47 = &v76[*(int *)(v44 + 48)];
    v39(v76, v102, v41);
    uint64_t v48 = v47;
    v42(v47, (unint64_t)v45, v43);
    uint64_t v49 = v78;
    Friend.type.getter();
    int64_t v86 = (void (*)(char *, uint64_t))v92[1];
    v86(v46, v41);
    uint64_t v50 = v79;
    uint64_t v51 = v80;
    (*v74)(v79, v75, v80);
    int v87 = static HandleType.== infix(_:_:)();
    uint64_t v52 = *v73;
    (*v73)(v50, v51);
    v52(v49, v51);
    uint64_t v53 = (void (*)(char *, uint64_t))v93[1];
    v53(v48, v43);
    uint64_t v54 = (uint64_t)v77;
    uint64_t v55 = &v77[*(int *)(v94 + 48)];
    v88(v77, v102, v41);
    v42(v55, v89, v43);
    if (v87)
    {
      uint64_t v56 = v71;
      uint64_t v57 = v96;
      (*v66)(v72, v67, v95);
      sub_1000471EC(&qword_1003F0518, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v100 == v98 && v101 == v99)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v60 = v95;
        v53(v72, v95);
        sub_10000A520(v54, &qword_1003EEBF0);
        sub_10000A520(v102, &qword_1003EEBF0);
        v53(v57, v60);
        uint64_t v31 = v56;
        uint64_t v21 = v68;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v86)(v56, v68);
        unint64_t v30 = v84;
        int64_t v26 = v85;
LABEL_27:
        *(unint64_t *)((char *)v64 + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v81;
        if (__OFADD__(v65++, 1))
        {
          __break(1u);
          return sub_10015C8F8(v64, v63, v65, v82);
        }
      }
      else
      {
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = v95;
        v53(v72, v95);
        sub_10000A520(v54, &qword_1003EEBF0);
        sub_10000A520(v102, &qword_1003EEBF0);
        v53(v57, v59);
        uint64_t v31 = v56;
        uint64_t v21 = v68;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v86)(v56, v68);
        unint64_t v30 = v84;
        int64_t v26 = v85;
        if (v58) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      sub_10000A520(v54, &qword_1003EEBF0);
      sub_10000A520(v102, &qword_1003EEBF0);
      v53(v96, v95);
      uint64_t v31 = v71;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v86)(v71, v41);
      uint64_t v21 = v41;
      unint64_t v30 = v84;
      int64_t v26 = v85;
    }
  }
  int64_t v33 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v33 >= v70) {
    return sub_10015C8F8(v64, v63, v65, v82);
  }
  unint64_t v34 = *(void *)(v69 + 8 * v33);
  int64_t v35 = v26 + 1;
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v26 + 2;
  if (v26 + 2 >= v70) {
    return sub_10015C8F8(v64, v63, v65, v82);
  }
  unint64_t v34 = *(void *)(v69 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v26 + 3;
  if (v26 + 3 >= v70) {
    return sub_10015C8F8(v64, v63, v65, v82);
  }
  unint64_t v34 = *(void *)(v69 + 8 * v35);
  if (v34)
  {
LABEL_20:
    uint64_t v84 = (v34 - 1) & v34;
    int64_t v85 = v35;
    unint64_t v32 = __clz(__rbit64(v34)) + (v35 << 6);
    goto LABEL_21;
  }
  uint64_t v36 = v26 + 4;
  if (v26 + 4 >= v70) {
    return sub_10015C8F8(v64, v63, v65, v82);
  }
  unint64_t v34 = *(void *)(v69 + 8 * v36);
  if (v34)
  {
    int64_t v35 = v26 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v35 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v35 >= v70) {
      return sub_10015C8F8(v64, v63, v65, v82);
    }
    unint64_t v34 = *(void *)(v69 + 8 * v35);
    ++v36;
    if (v34) {
      goto LABEL_20;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10015C8F8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v64 = type metadata accessor for FriendshipAction();
  uint64_t v56 = *(void *)(v64 - 8);
  uint64_t v8 = __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for Friend();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v53 = (char *)&v47 - v14;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100044014(&qword_1003EFEE0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v16 = result;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v51 = v55 + 16;
  uint64_t v52 = result;
  uint64_t v49 = a4;
  uint64_t v50 = v56 + 16;
  uint64_t v60 = v56 + 32;
  uint64_t v61 = v55 + 32;
  uint64_t v19 = result + 64;
  uint64_t v20 = v62;
  while (1)
  {
    uint64_t v59 = a3;
    if (v17)
    {
      uint64_t v57 = (v17 - 1) & v17;
      uint64_t v58 = v18;
      unint64_t v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v48) {
        return v16;
      }
      unint64_t v23 = v47[v22];
      uint64_t v24 = v18 + 1;
      if (!v23)
      {
        uint64_t v24 = v18 + 2;
        if (v18 + 2 >= v48) {
          return v16;
        }
        unint64_t v23 = v47[v24];
        if (!v23)
        {
          uint64_t v24 = v18 + 3;
          if (v18 + 3 >= v48) {
            return v16;
          }
          unint64_t v23 = v47[v24];
          if (!v23)
          {
            uint64_t v25 = v18 + 4;
            if (v18 + 4 >= v48) {
              return v16;
            }
            unint64_t v23 = v47[v25];
            if (!v23)
            {
              while (1)
              {
                uint64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v24 >= v48) {
                  return v16;
                }
                unint64_t v23 = v47[v24];
                ++v25;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v57 = (v23 - 1) & v23;
      uint64_t v58 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    uint64_t v26 = v55;
    uint64_t v27 = *(void *)(v55 + 72);
    uint64_t v28 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, a4[6] + v27 * v21, v11);
    uint64_t v29 = a4[7];
    uint64_t v30 = v56;
    uint64_t v31 = *(void *)(v56 + 72);
    uint64_t v32 = v29 + v31 * v21;
    uint64_t v33 = v11;
    unint64_t v34 = v54;
    uint64_t v35 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v32, v64);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v36(v20, v28, v33);
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    unint64_t v38 = v34;
    uint64_t v11 = v33;
    v37(v63, v38, v35);
    uint64_t v16 = v52;
    sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v45 = v41 == v44;
        if (v41 == v44) {
          unint64_t v41 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v19 + 8 * v41);
      }
      while (v46 == -1);
      unint64_t v42 = __clz(__rbit64(~v46)) + (v41 << 6);
    }
    *(void *)(v19 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    v36((char *)(*(void *)(v16 + 48) + v42 * v27), v62, v11);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v37)(*(void *)(v16 + 56) + v42 * v31, v63, v64);
    ++*(void *)(v16 + 16);
    a3 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      break;
    }
    a4 = v49;
    unint64_t v17 = v57;
    uint64_t v18 = v58;
    if (v59 == 1) {
      return v16;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10015CDF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100044014(&qword_1003EEBF0);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v35 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v36 = (unint64_t)(63 - v16) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v21 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v27 = *(void *)(a4 + 48);
    uint64_t v28 = type metadata accessor for Friend();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v11, v27 + *(void *)(*(void *)(v28 - 8) + 72) * v23, v28);
    uint64_t v29 = *(void *)(a4 + 56);
    uint64_t v30 = type metadata accessor for FriendshipAction();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(&v11[*(int *)(v39 + 48)], v29 + *(void *)(*(void *)(v30 - 8) + 72) * v23, v30);
    sub_100013B50((uint64_t)v11, (uint64_t)v14, &qword_1003EEBF0);
    uint64_t result = sub_100013B50((uint64_t)v14, a2, &qword_1003EEBF0);
    if (v20 == v21)
    {
      a3 = v21;
      goto LABEL_38;
    }
    a2 += *(void *)(v38 + 72);
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v24 >= v36) {
      goto LABEL_33;
    }
    unint64_t v25 = *(void *)(v37 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v36)
      {
        unint64_t v18 = 0;
        int64_t v19 = v24;
      }
      else
      {
        unint64_t v25 = *(void *)(v37 + 8 * v19);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v26 = v24 + 2;
        if (v24 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (v25)
        {
LABEL_17:
          int64_t v24 = v26;
          goto LABEL_18;
        }
        int64_t v19 = v24 + 3;
        if (v24 + 3 < v36)
        {
          unint64_t v25 = *(void *)(v37 + 8 * v19);
          if (v25)
          {
LABEL_14:
            int64_t v24 = v19;
            goto LABEL_18;
          }
          int64_t v26 = v24 + 4;
          if (v24 + 4 >= v36)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_42;
              }
              if (v24 >= v36)
              {
                unint64_t v18 = 0;
                int64_t v19 = v33;
                goto LABEL_37;
              }
              unint64_t v25 = *(void *)(v37 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10015D17C(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  unint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  int64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  uint64_t v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  uint64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    uint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_10000A520((uint64_t)v10, &qword_1003ECFB8);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10015D570(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  int64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 48) + v29 * v24, v8);
    int64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10015D8B8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_10015D958(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10015DA40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  unint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_10015DAF0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Friend();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v17[1] = v1;
    int64_t v25 = _swiftEmptyArrayStorage;
    sub_10003BD78(0, v7, 0);
    unint64_t v8 = v25;
    unint64_t v9 = (long long *)(a1 + 32);
    do
    {
      long long v10 = v9[5];
      long long v22 = v9[4];
      long long v23 = v10;
      char v24 = *((unsigned char *)v9 + 96);
      long long v11 = v9[1];
      long long v18 = *v9;
      long long v19 = v11;
      long long v12 = v9[3];
      long long v20 = v9[2];
      long long v21 = v12;
      long long v13 = v19;
      sub_10015DCB8((uint64_t)&v18);
      sub_10014FEA4((uint64_t)&v18, v13, *((char **)&v13 + 1), (uint64_t)v6);
      sub_10015DD24((uint64_t)&v18);
      int64_t v25 = v8;
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1)
      {
        sub_10003BD78(v14 > 1, v15 + 1, 1);
        unint64_t v8 = v25;
      }
      v8[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v15, v6, v3);
      unint64_t v9 = (long long *)((char *)v9 + 104);
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_10015DCB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10015DD24(uint64_t a1)
{
  return a1;
}

uint64_t sub_10015DD90(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a2;
  uint64_t v66 = a1;
  uint64_t v2 = sub_100044014(&qword_1003EFEA0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v60 = (uint64_t)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v64 = (uint64_t)v56 - v5;
  uint64_t v67 = sub_100044014(&qword_1003EEBF0);
  uint64_t v65 = *(void *)(v67 - 8);
  uint64_t v6 = __chkstk_darwin(v67);
  unint64_t v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)v56 - v9;
  uint64_t v10 = type metadata accessor for HandleType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v56 - v15;
  uint64_t v17 = type metadata accessor for FriendshipAction();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v57 = (char *)v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v59 = (char *)v56 - v22;
  __chkstk_darwin(v21);
  char v24 = (char *)v56 - v23;
  uint64_t v69 = v18;
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
  uint64_t v25 = v18 + 104;
  uint64_t v62 = v26;
  v26((char *)v56 - v23, enum case for FriendshipAction.remove(_:), v17);
  uint64_t v27 = sub_1000471EC(&qword_1003F0518, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v63 = v27;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v58 = v8;
  if (v72 == v70 && v73 == v71) {
    char v28 = 1;
  }
  else {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v69 + 8;
  int64_t v30 = *(void (**)(char *, uint64_t))(v69 + 8);
  v30(v24, v17);
  if ((v28 & 1) == 0) {
    return 1;
  }
  v56[1] = v29;
  v56[2] = v25;
  v56[0] = v30;
  uint64_t v31 = v68;
  Friend.type.getter();
  uint64_t v32 = *(void (**)(char *, void, uint64_t))(v11 + 104);
  v32(v14, enum case for HandleType.futureFollower(_:), v10);
  char v33 = static HandleType.== infix(_:_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v11 + 8);
  v34(v14, v10);
  uint64_t v35 = ((uint64_t (*)(char *, uint64_t))v34)(v16, v10);
  if (v33)
  {
    __chkstk_darwin(v35);
    v56[-2] = v31;
    uint64_t v36 = v64;
    sub_1000D4D2C((uint64_t (*)(char *))sub_10015F074, v66, v64);
    uint64_t v37 = v67;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v36, 1, v67) == 1)
    {
      uint64_t v38 = v36;
LABEL_12:
      sub_10000A520(v38, &qword_1003EFEA0);
      return 0;
    }
    uint64_t v44 = *(int *)(v37 + 48);
    uint64_t v45 = (uint64_t)v61;
    uint64_t v46 = &v61[v44];
    uint64_t v47 = v36 + v44;
    uint64_t v48 = type metadata accessor for Friend();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 32))(v45, v36, v48);
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v46, v47, v17);
    uint64_t v49 = enum case for FriendshipAction.add(_:);
    uint64_t v50 = v59;
  }
  else
  {
    Friend.type.getter();
    v32(v14, enum case for HandleType.futureFollowing(_:), v10);
    char v39 = static HandleType.== infix(_:_:)();
    v34(v14, v10);
    uint64_t v40 = ((uint64_t (*)(char *, uint64_t))v34)(v16, v10);
    if ((v39 & 1) == 0) {
      return 1;
    }
    __chkstk_darwin(v40);
    v56[-2] = v31;
    uint64_t v41 = v60;
    sub_1000D4D2C((uint64_t (*)(char *))sub_10015F04C, v66, v60);
    uint64_t v42 = v67;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v41, 1, v67) == 1)
    {
      uint64_t v38 = v41;
      goto LABEL_12;
    }
    uint64_t v51 = *(int *)(v42 + 48);
    uint64_t v45 = (uint64_t)v58;
    uint64_t v52 = &v58[v51];
    uint64_t v53 = v41 + v51;
    uint64_t v54 = type metadata accessor for Friend();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(v45, v41, v54);
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v52, v53, v17);
    uint64_t v49 = enum case for FriendshipAction.add(_:);
    uint64_t v50 = v57;
  }
  v62(v50, v49, v17);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v72 == v70 && v73 == v71)
  {
    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v56[0])(v50, v17);
    sub_10000A520(v45, &qword_1003EEBF0);
  }
  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v56[0])(v50, v17);
    sub_10000A520(v45, &qword_1003EEBF0);
    if ((v55 & 1) == 0) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_10015E534(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v46 = a4;
  uint64_t v32 = a1;
  uint64_t v45 = type metadata accessor for FriendshipAction();
  uint64_t v5 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v43 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Friend();
  uint64_t result = __chkstk_darwin(v42);
  uint64_t v40 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v47 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v33 = 0;
  uint64_t v34 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v38 = v5 + 16;
  uint64_t v39 = v8 + 16;
  uint64_t v44 = v5;
  uint64_t v37 = v5 + 8;
  uint64_t v41 = v8;
  int64_t v35 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v36 = v8 + 8;
  uint64_t v15 = v8;
  uint64_t v16 = (uint64_t)v40;
  uint64_t v18 = v42;
  uint64_t v17 = v43;
  uint64_t v19 = v5;
  uint64_t v20 = v45;
  while (1)
  {
    if (v14)
    {
      uint64_t v48 = (v14 - 1) & v14;
      int64_t v49 = v10;
      unint64_t v21 = __clz(__rbit64(v14)) | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v35) {
      return sub_10015C8F8(v32, v31, v33, v47);
    }
    unint64_t v26 = *(void *)(v34 + 8 * v25);
    int64_t v27 = v10 + 1;
    if (!v26)
    {
      int64_t v27 = v10 + 2;
      if (v10 + 2 >= v35) {
        return sub_10015C8F8(v32, v31, v33, v47);
      }
      unint64_t v26 = *(void *)(v34 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v10 + 3;
        if (v10 + 3 >= v35) {
          return sub_10015C8F8(v32, v31, v33, v47);
        }
        unint64_t v26 = *(void *)(v34 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v48 = (v26 - 1) & v26;
    int64_t v49 = v27;
    unint64_t v21 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    uint64_t v22 = v47;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(v16, v47[6] + *(void *)(v15 + 72) * v21, v18);
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, v22[7] + *(void *)(v19 + 72) * v21, v20);
    uint64_t v23 = swift_bridgeObjectRetain();
    char v24 = sub_10015DD90(v23, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v20);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v18);
    int64_t v10 = v49;
    unint64_t v14 = v48;
    if (v24)
    {
      *(unint64_t *)((char *)v32 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (__OFADD__(v33++, 1))
      {
        __break(1u);
        return sub_10015C8F8(v32, v31, v33, v47);
      }
    }
  }
  uint64_t v28 = v10 + 4;
  if (v10 + 4 >= v35) {
    return sub_10015C8F8(v32, v31, v33, v47);
  }
  unint64_t v26 = *(void *)(v34 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v10 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v35) {
      return sub_10015C8F8(v32, v31, v33, v47);
    }
    unint64_t v26 = *(void *)(v34 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10015E8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_retain();
    uint64_t v12 = sub_10015E534((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a3);
    swift_release();
    if (v4) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_retain();
    uint64_t v12 = sub_10015E534((unint64_t *)v13, v9, a1, a3);
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v12;
}

uint64_t sub_10015EAA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v40 = type metadata accessor for FriendshipAction();
  uint64_t v6 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unsigned int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Friend();
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  uint64_t v42 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v31 = 0;
  uint64_t v32 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v33 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v34 = v6 + 16;
  uint64_t v38 = v11;
  uint64_t v39 = v6;
  uint64_t v35 = v11 + 16;
  uint64_t v36 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v19 = v40;
  while (v18)
  {
    unint64_t v20 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    unint64_t v21 = v20 | (v14 << 6);
LABEL_17:
    int64_t v25 = v42;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v13, v42[6] + *(void *)(v38 + 72) * v21, v9);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v8, v25[7] + *(void *)(v39 + 72) * v21, v19);
    char v26 = sub_100151E68(v13, v8, v41);
    if (v4)
    {
      (*v36)(v8, v19);
      return (*v37)(v13, v9);
    }
    char v27 = v26;
    (*v36)(v8, v19);
    uint64_t result = (*v37)(v13, v9);
    if (v27)
    {
      *(unint64_t *)((char *)v30 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      BOOL v22 = __OFADD__(v31++, 1);
      if (v22) {
        goto LABEL_30;
      }
    }
  }
  BOOL v22 = __OFADD__(v14++, 1);
  if (v22)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= v33) {
    return sub_10015C8F8(v30, v29, v31, v42);
  }
  unint64_t v23 = *(void *)(v32 + 8 * v14);
  if (v23)
  {
LABEL_16:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_17;
  }
  int64_t v24 = v14 + 1;
  if (v14 + 1 >= v33) {
    return sub_10015C8F8(v30, v29, v31, v42);
  }
  unint64_t v23 = *(void *)(v32 + 8 * v24);
  if (v23) {
    goto LABEL_15;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v33) {
    return sub_10015C8F8(v30, v29, v31, v42);
  }
  unint64_t v23 = *(void *)(v32 + 8 * v24);
  if (v23) {
    goto LABEL_15;
  }
  int64_t v24 = v14 + 3;
  if (v14 + 3 >= v33) {
    return sub_10015C8F8(v30, v29, v31, v42);
  }
  unint64_t v23 = *(void *)(v32 + 8 * v24);
  if (v23)
  {
LABEL_15:
    int64_t v14 = v24;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v33) {
      return sub_10015C8F8(v30, v29, v31, v42);
    }
    unint64_t v23 = *(void *)(v32 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10015EE64(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10015EAA8((unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10015EAA8((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_10015F020(uint64_t a1)
{
  return sub_100153AD0(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10015F040(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10015F04C(uint64_t a1)
{
  return sub_100153E04(a1, *(char **)(v1 + 16), (unsigned int *)&enum case for HandleType.following(_:)) & 1;
}

uint64_t sub_10015F074(uint64_t a1)
{
  return sub_100153E04(a1, *(char **)(v1 + 16), (unsigned int *)&enum case for HandleType.follower(_:)) & 1;
}

uint64_t sub_10015F09C(uint64_t a1)
{
  return sub_1002252E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10015F0A4(uint64_t a1)
{
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  sub_10012A3AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1));
  return a1;
}

unint64_t sub_10015F194()
{
  unint64_t result = qword_1003F0418;
  if (!qword_1003F0418)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F0418);
  }
  return result;
}

uint64_t sub_10015F1D4(uint64_t a1)
{
  return sub_10015F020(a1) & 1;
}

BOOL sub_10015F1F4(uint64_t a1)
{
  return sub_10002BFE0(a1);
}

uint64_t sub_10015F234(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100044014(&qword_1003F0090);
  uint64_t v38 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v37 = v2;
  long long v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v40 = v13;
    UUID.init()();
    uint64_t v30 = v3;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32(v11, v13, v7);
    uint64_t v28 = v1;
    uint64_t v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = v8;
    uint64_t v39 = v6;
    uint64_t v31 = v16 | 7;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v38;
    *(void *)(v17 + 16) = v15;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v33 = v8 + 32;
    uint64_t v34 = v19;
    v19((char *)(v17 + ((v16 + 24) & ~v16)), v11, v7);
    swift_retain();
    uint64_t v20 = v28;
    uint64_t v21 = v36;
    AsyncStream.Continuation.onTermination.setter();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v39, 1, 1, v22);
    unint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v30, v21, v20);
    int64_t v24 = v29;
    v32(v29, v40, v7);
    unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    unint64_t v26 = (v37 + v16 + v25) & ~v16;
    char v27 = (char *)swift_allocObject();
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = v15;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v27[v25], v23, v20);
    v34(&v27[v26], v24, v7);
    swift_retain();
    sub_10010405C((uint64_t)v39, (uint64_t)&unk_1003F05D0, (uint64_t)v27);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v40, v7);
  }
  return result;
}

uint64_t sub_10015F620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v13[v12], (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_10010405C((uint64_t)v10, (uint64_t)&unk_1003F05E0, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10015F7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10015F814, a4, 0);
}

uint64_t sub_10015F814()
{
  sub_10015F874(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015F874(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F0448);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - v10;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B708);
  char v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v11, a1, v6);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    unint64_t v25 = v5;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = v1;
    v30[0] = v17;
    uint64_t v24 = a1;
    *(_DWORD *)uint64_t v16 = 136446210;
    unint64_t v23 = v16 + 4;
    sub_100160950(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_100037004(v18, v19, v30);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Removing stateContinuation for %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }

  uint64_t v20 = (uint64_t)v28;
  v27(v28, a1, v6);
  uint64_t v21 = sub_100044014(&qword_1003F0090);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_beginAccess();
  sub_10012C1C8((uint64_t)v5, v20);
  return swift_endAccess();
}

uint64_t sub_10015FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v8 = sub_100044014(&qword_1003F05C0);
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  type metadata accessor for DataManager.State(0);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_10015FD2C, a4, 0);
}

uint64_t sub_10015FD2C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[5];
  sub_10015FEB0(v0[6], v0[7]);
  uint64_t v3 = v2 + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess();
  sub_10004E968(v3, v1);
  return _swift_task_switch(sub_10015FDD8, 0, 0);
}

uint64_t sub_10015FDD8()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  sub_10004E968(v1, v0[11]);
  sub_100044014(&qword_1003F0090);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10004E90C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10015FEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100044014(&qword_1003F0448);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v32 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - v12;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040B708);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v31 = a2;
  v30(v13, a2, v8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v2;
    v34[0] = v19;
    uint64_t v27 = a1;
    *(_DWORD *)uint64_t v18 = 136446210;
    v26[1] = v18 + 4;
    sub_100160950(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_100037004(v20, v21, v34);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Storing stateContinuation for %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v22 = (uint64_t)v32;
  v30(v32, v31, v8);
  uint64_t v23 = sub_100044014(&qword_1003F0090);
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, a1, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
  swift_beginAccess();
  sub_10012C1C8((uint64_t)v7, v22);
  return swift_endAccess();
}

uint64_t sub_10016029C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_100160300(uint64_t a1, unint64_t a2)
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100044058(v4, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100037004(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Posting notification: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v9 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(v8, v9, 0, 0, 1u);
}

uint64_t sub_1001604E8(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EFCD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100160548()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100160614(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10015F620(a1, v4, v5);
}

uint64_t sub_100160688()
{
  uint64_t v1 = sub_100044014(&qword_1003F0090);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001607EC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_100044014(&qword_1003F0090) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10004A274;
  return sub_10015FC24(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_100160950(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100160998()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100160A6C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_100018CD0;
  return _swift_task_switch(sub_10015F814, v3, 0);
}

uint64_t sub_100160B54()
{
  v1[3] = v0;
  v1[4] = *v0;
  type metadata accessor for DispatchQoS();
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_100160C0C, v0, 0);
}

uint64_t sub_100160C0C()
{
  uint64_t v13 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[2] = sub_100037004(0xD000000000000024, 0x8000000100376260, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  type metadata accessor for XPCActivity();
  static DispatchQoS.utility.getter();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  void *v8 = v0;
  v8[1] = sub_100160EB8;
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[3];
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000030, 0x8000000100376220, v9, &unk_1003F05F8, v10, &unk_1003F0608, v7);
}

uint64_t sub_100160EB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100160FD0, v2, 0);
}

uint64_t sub_100160FD0()
{
  *(void *)(v0[3] + 112) = v0[7];
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100161048(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1001611D8(a1);
}

uint64_t sub_1001610F4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100018CD0;
  return sub_100161048(a1);
}

uint64_t sub_1001611A0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001611D8(uint64_t a1)
{
  v2[332] = v1;
  v2[331] = a1;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options();
  v2[333] = v3;
  v2[334] = *(void *)(v3 - 8);
  v2[335] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCActivity.Priority();
  v2[336] = v4;
  v2[337] = *(void *)(v4 - 8);
  v2[338] = swift_task_alloc();
  return _swift_task_switch(sub_1001612F8, v1, 0);
}

uint64_t sub_1001612F8()
{
  uint64_t v8 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[339] = sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[330] = sub_100037004(0xD000000000000018, 0x80000001003762C0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[340] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001614F0;
  return sub_10000E400((uint64_t)(v0 + 218));
}

uint64_t sub_1001614F0()
{
  uint64_t v1 = *(void *)v0 + 16;
  uint64_t v2 = *(void *)v0 + 1744;
  uint64_t v3 = *(void *)(*(void *)v0 + 2656);
  swift_task_dealloc();
  sub_100013B50(v2, v1, &qword_1003ECCD0);
  return _swift_task_switch(sub_100161624, v3, 0);
}

uint64_t sub_100161624()
{
  os_log_type_t v16 = v0;
  sub_100013B50((uint64_t)(v0 + 218), (uint64_t)(v0 + 164), &qword_1003ECCD0);
  if (sub_10005F070((uint64_t)(v0 + 164)) == 1) {
    goto LABEL_2;
  }
  memcpy(v0 + 110, v0 + 164, 0x1B0uLL);
  sub_100013B50((uint64_t)(v0 + 142), (uint64_t)(v0 + 310), &qword_1003ECCD8);
  sub_100013B50((uint64_t)(v0 + 310), (uint64_t)(v0 + 292), &qword_1003ECCD8);
  if (sub_10005F088((uint64_t)(v0 + 292)) == 1
    && (sub_100013B50((uint64_t)(v0 + 2), (uint64_t)(v0 + 56), &qword_1003ECCD0),
        sub_100013B50((uint64_t)(v0 + 68), (uint64_t)(v0 + 272), &qword_1003ED068),
        sub_100085654((uint64_t)(v0 + 272)) == 1))
  {
    uint64_t v6 = v0[106];
    uint64_t v7 = v0[107];
    sub_1000372F0(v6, v7);
    sub_10000E224((uint64_t)(v0 + 218));
    if (!v7)
    {
LABEL_2:
      uint64_t v1 = v0[338];
      uint64_t v2 = v0[337];
      uint64_t v3 = v0[336];
      sub_100363160();
      (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for XPCActivity.Priority.utility(_:), v3);
      sub_100044014(&qword_1003F0618);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1003677A0;
      static XPCActivity.Criteria.Options.requiresClassC.getter();
      static XPCActivity.Criteria.Options.requiresNetwork.getter();
      v0[328] = v4;
      sub_1001622B8(&qword_1003F0620, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
      sub_100044014(&qword_1003F0628);
      sub_100162300();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    sub_100037334(v6, v7);
  }
  else
  {
    sub_10000E224((uint64_t)(v0 + 218));
  }
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    v0[329] = sub_100037004(0xD000000000000018, 0x80000001003762C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s not eligible, since we have non-nil serverSettings already.", v10, 0xCu);
    uint64_t v5 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v5 = 1;
  }
LABEL_11:
  uint64_t v11 = v0[331];
  uint64_t v12 = type metadata accessor for XPCActivity.Criteria();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, v5, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100161A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_100161B28, 0, 0);
}

uint64_t sub_100161B28()
{
  uint64_t v19 = v0;
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[7], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B708);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      v0[5] = sub_100037004(0xD000000000000024, 0x8000000100376260, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s receive state .run", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    v0[12] = Strong;
    if (Strong)
    {
      uint64_t v10 = (void *)swift_task_alloc();
      v0[13] = v10;
      void *v10 = v0;
      v10[1] = sub_100161F14;
      return sub_10010D5B8();
    }
    type metadata accessor for XPCActivity();
    sub_1001622B8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v17;
    uint64_t v15 = sub_1001620A0;
    goto LABEL_16;
  }
  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    type metadata accessor for XPCActivity();
    sub_1001622B8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v13;
    uint64_t v15 = sub_100162168;
LABEL_16:
    return _swift_task_switch(v15, v12, v14);
  }
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  os_log_type_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100161F14()
{
  swift_task_dealloc();
  swift_release();
  type metadata accessor for XPCActivity();
  sub_1001622B8(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001620A0, v1, v0);
}

uint64_t sub_1001620A0()
{
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100162108, 0, 0);
}

uint64_t sub_100162108()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100162168()
{
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_10016235C, 0, 0);
}

uint64_t sub_1001621D0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100162208(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = sub_10004A274;
  return sub_100161A64(a1, a2, v6);
}

uint64_t sub_1001622B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100162300()
{
  unint64_t result = qword_1003F0630;
  if (!qword_1003F0630)
  {
    sub_10004AE58(&qword_1003F0628);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F0630);
  }
  return result;
}

uint64_t sub_100162360()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager read all devices failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(_swiftEmptyArrayStorage);
}

uint64_t sub_100162584()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[13];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager read all devices failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(_swiftEmptyArrayStorage);
}

uint64_t sub_1001627A8()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 1808);
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v0 + 1744) = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 1752) = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager read serverSettings fromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1001634E8((_OWORD *)(v0 + 880));
  sub_100037758(v0 + 880, v0 + 16);
  sub_100037758(v0 + 16, *(void *)(v0 + 1760));
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001629F8()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 1824);
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v0 + 1744) = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 1752) = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager read serverSettings fromLocalStorage failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1001634E8((_OWORD *)(v0 + 880));
  sub_100037758(v0 + 880, v0 + 16);
  sub_100037758(v0 + 16, *(void *)(v0 + 1760));
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100162C48()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[11];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager writeAllDevices failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100162E70()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[13];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager writeAllDevices failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100163098()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager write serverSettings failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001632C0()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[12];
  swift_release();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B708);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DataManager write serverSettings failed with error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

double sub_1001634E8(_OWORD *a1)
{
  double result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_100163528(uint64_t a1)
{
  uint64_t v15 = type metadata accessor for Handle();
  uint64_t v3 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v13[1] = v1;
    os_log_type_t v16 = _swiftEmptyArrayStorage;
    sub_100020D44(0, v6, 0);
    unint64_t v7 = v16;
    uint64_t v8 = *(void *)(type metadata accessor for Friend() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    do
    {
      Friend.handle.getter();
      os_log_type_t v16 = v7;
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_100020D44(v10 > 1, v11 + 1, 1);
        unint64_t v7 = v16;
      }
      v7[2] = v11 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v5, v15);
      v9 += v14;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_100163710@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v134 = (void *)a1;
  uint64_t v132 = a2;
  uint64_t v2 = type metadata accessor for Fence();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v140 = v2;
  uint64_t v141 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v130 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v139 = (char *)&v115 - v6;
  uint64_t v118 = type metadata accessor for Handle();
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v116 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100044014(&qword_1003F0658);
  __chkstk_darwin(v126);
  uint64_t v133 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Fence.Participant();
  unint64_t v10 = *(void **)(v9 - 8);
  uint64_t v137 = (void (*)(void, void, void))v9;
  unint64_t v138 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v128 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v136 = (char *)&v115 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v125 = (char *)&v115 - v16;
  __chkstk_darwin(v15);
  uint64_t v124 = (char *)&v115 - v17;
  uint64_t v129 = type metadata accessor for Fence.Variant();
  uint64_t v127 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v123 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for Fence.Trigger();
  uint64_t v121 = *(void *)(v122 - 8);
  uint64_t v19 = __chkstk_darwin(v122);
  uint64_t v119 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::Int v120 = (char *)&v115 - v21;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v115 - v27;
  uint64_t v29 = type metadata accessor for Fence.ID();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v115 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  Fence.id.getter();
  Fence.ID.uuid.getter();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v30 + 8);
  v33(v32, v29);
  static UUID.nilUUID.getter();
  char v34 = static UUID.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v23 + 8);
  v35(v26, v22);
  v35(v28, v22);
  uint64_t v135 = 0;
  uint64_t v36 = 0;
  if ((v34 & 1) == 0)
  {
    Fence.id.getter();
    uint64_t v135 = Fence.ID.uuidString.getter();
    uint64_t v36 = v37;
    v33(v32, v29);
  }
  uint64_t v38 = v123;
  Fence.variant.getter();
  uint64_t v39 = v127;
  uint64_t v40 = v129;
  int v41 = (*(uint64_t (**)(char *, uint64_t))(v127 + 88))(v38, v129);
  uint64_t v131 = v36;
  if (v41 == enum case for Fence.Variant.oneTime(_:) || v41 == enum case for Fence.Variant.recurring(_:))
  {
    (*(void (**)(char *, uint64_t))(v39 + 96))(v38, v40);
    uint64_t v47 = v121;
    uint64_t v48 = v120;
    uint64_t v49 = v122;
    (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v120, v38, v122);
    uint64_t v50 = v119;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v119, v48, v49);
    int v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v50, v49);
    uint64_t v43 = v137;
    uint64_t v42 = v138;
    uint64_t v44 = v136;
    uint64_t v45 = v133;
    if (v51 == enum case for Fence.Trigger.arriving(_:))
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      uint64_t v129 = 0xE500000000000000;
      uint64_t v46 = 0x7265746E65;
    }
    else
    {
      if (v51 != enum case for Fence.Trigger.leaving(_:)) {
        goto LABEL_46;
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      uint64_t v129 = 0xE400000000000000;
      uint64_t v46 = 1953069157;
    }
  }
  else
  {
    uint64_t v43 = v137;
    uint64_t v42 = v138;
    uint64_t v44 = v136;
    uint64_t v45 = v133;
    if (v41 != enum case for Fence.Variant.scheduled(_:)) {
      goto LABEL_46;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
    uint64_t v129 = 0xE900000000000064;
    uint64_t v46 = 0x656C756465686373;
  }
  uint64_t v52 = v124;
  Fence.createdBy.getter();
  uint64_t v53 = v125;
  Fence.finder.getter();
  uint64_t v54 = &v45[*(int *)(v126 + 48)];
  char v55 = (void (*)(char *, char *, void))v42[4];
  v55(v45, v52, v43);
  v55(v54, v53, v43);
  uint64_t v56 = (uint64_t (*)(void, void))v42[11];
  int v57 = v56(v45, v43);
  int v58 = v57;
  int v59 = enum case for Fence.Participant.me(_:);
  LODWORD(v133) = enum case for Fence.Participant.me(_:);
  uint64_t v127 = v46;
  if (v57 == enum case for Fence.Participant.me(_:))
  {
    int v60 = v56(v54, v43);
    BOOL v61 = v60 == v58;
    int v58 = enum case for Fence.Participant.other(_:);
    if (!v61)
    {
      int v58 = v60;
      if (v60 != enum case for Fence.Participant.other(_:)) {
        goto LABEL_46;
      }
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  if (v57 != enum case for Fence.Participant.other(_:)) {
    goto LABEL_46;
  }
  int v62 = v56(v54, v43);
  if (v62 == v59)
  {
LABEL_17:
    LODWORD(v136) = v58;
    uint64_t v63 = (void (*)(void, void))v42[1];
    uint64_t v64 = v42;
    uint64_t v65 = (unint64_t)(v42 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v63(v45, v43);
    uint64_t v126 = 0xEC00000073726568;
    uint64_t v66 = 0x744F796669746F4ELL;
    goto LABEL_20;
  }
  if (v62 != v58)
  {
LABEL_46:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_19:
  LODWORD(v136) = v58;
  uint64_t v63 = (void (*)(void, void))v42[1];
  uint64_t v64 = v42;
  uint64_t v65 = (unint64_t)(v42 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v63(v45, v43);
  uint64_t v126 = 0xE800000000000000;
  uint64_t v66 = 0x654D796669746F4ELL;
LABEL_20:
  uint64_t v125 = (char *)v66;
  uint64_t v67 = (uint64_t)sub_100163528((uint64_t)v134);
  uint64_t v68 = Fence.others.getter();
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_100166154(v68, v67);
  uint64_t v124 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  Fence.findee.getter();
  uint64_t v70 = v128;
  uint64_t v71 = v44;
  uint64_t v72 = v64 + 13;
  uint64_t v137 = (void (*)(void, void, void))v64[13];
  v137(v128, v136, v43);
  LOBYTE(v67) = static Fence.Participant.== infix(_:_:)();
  v63(v70, v43);
  uint64_t v73 = v71;
  v63(v71, v43);
  unint64_t v134 = v69;
  uint64_t v121 = v65;
  if ((v67 & 1) != 0 && v69[2])
  {
    unint64_t v74 = v69;
    unsigned int v75 = v63;
    uint64_t v76 = v117;
    uint64_t v77 = v116;
    uint64_t v78 = v118;
    (*(void (**)(char *, unint64_t, uint64_t))(v117 + 16))(v116, (unint64_t)v74+ ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80)), v118);
    uint64_t v123 = (char *)Handle.serverID.getter();
    uint64_t v122 = v79;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
  }
  else
  {
    unsigned int v75 = v63;
    uint64_t v123 = 0;
    uint64_t v122 = 0;
  }
  uint64_t v80 = (void (*)(char *, void, void))v137;
  unint64_t v81 = v73;
  uint64_t v82 = v142;
  Fence.createdBy.getter();
  uint64_t v83 = v133;
  v80(v70, v133, v43);
  char v84 = static Fence.Participant.== infix(_:_:)();
  v75(v70, v43);
  v75(v73, v43);
  uint64_t v119 = *(char **)(v141 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v119)(v139, v82, v140);
  if (v84)
  {
    Fence.findee.getter();
    int64_t v85 = (void (*)(char *, void, void))v137;
    v137(v70, v83, v43);
    LODWORD(v120) = static Fence.Participant.== infix(_:_:)();
    v75(v70, v43);
    v75(v73, v43);
  }
  else
  {
    LODWORD(v120) = 0;
    int64_t v85 = (void (*)(char *, void, void))v137;
  }
  uint64_t v86 = v140;
  int v87 = *(char **)(v141 + 8);
  uint64_t v88 = v139;
  v141 += 8;
  unint64_t v138 = v72;
  unint64_t v139 = v87;
  ((void (*)(char *, uint64_t))v87)(v88, v140);
  uint64_t v89 = v142;
  Fence.createdBy.getter();
  v85(v70, v136, v43);
  char v90 = static Fence.Participant.== infix(_:_:)();
  v75(v70, v43);
  v75(v73, v43);
  uint64_t v91 = v130;
  ((void (*)(char *, uint64_t, uint64_t))v119)(v130, v89, v86);
  if (v90)
  {
    Fence.findee.getter();
    v137(v70, v133, v43);
    char v92 = static Fence.Participant.== infix(_:_:)();
    v75(v70, v43);
    v75(v81, v43);
  }
  else
  {
    char v92 = 0;
  }
  uint64_t v93 = (uint64_t)v134;
  ((void (*)(char *, uint64_t))v139)(v91, v140);
  uint64_t v94 = _swiftEmptyArrayStorage;
  uint64_t v143 = _swiftEmptyArrayStorage;
  if (v120)
  {
    uint64_t v95 = Fence.others.getter();
    uint64_t v96 = sub_10016492C(v95, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(uint64_t))&PersonHandle.email.getter);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v143 = v96;
    swift_bridgeObjectRetain();
    uint64_t v97 = Fence.others.getter();
    uint64_t v94 = sub_10016492C(v97, (uint64_t (*)(void))&type metadata accessor for PersonHandle, (uint64_t (*)(uint64_t))&PersonHandle.phoneNumber.getter);
    swift_bridgeObjectRelease();
    uint64_t v98 = v96[2];
    swift_bridgeObjectRelease();
    if (!v98)
    {
      if (qword_1003EC068 != -1) {
        swift_once();
      }
      uint64_t v99 = type metadata accessor for Logger();
      sub_100044058(v99, (uint64_t)qword_10040B788);
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v100, v101))
      {
        unint64_t v102 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "FenceByMeOnMe: No emails. Adding phone numbers...", v102, 2u);
        swift_slowDealloc();
      }

      if (v94[2])
      {
        uint64_t v103 = swift_bridgeObjectRetain();
        sub_10012D1A4(v103);
      }
      else
      {
        char v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v104, v105))
        {
          unint64_t v106 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "FenceByMeOnMe: No phone numbers either.", v106, 2u);
          swift_slowDealloc();
        }
      }
    }
    uint64_t v93 = (uint64_t)v134;
  }
  if (v92) {
    unint64_t v107 = sub_10016492C(v93, (uint64_t (*)(void))&type metadata accessor for Handle, (uint64_t (*)(uint64_t))&Handle.serverID.getter);
  }
  else {
    unint64_t v107 = _swiftEmptyArrayStorage;
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v109 = v143;
  Swift::Int v110 = v132;
  uint64_t v111 = v131;
  *uint64_t v132 = v135;
  v110[1] = v111;
  uint64_t v112 = v122;
  v110[2] = (uint64_t)v123;
  v110[3] = v112;
  uint64_t v113 = v126;
  v110[4] = (uint64_t)v125;
  v110[5] = v113;
  uint64_t v114 = v129;
  v110[6] = v127;
  v110[7] = v114;
  v110[8] = (uint64_t)v109;
  v110[9] = (uint64_t)v94;
  v110[10] = (uint64_t)v107;
  return result;
}

uint64_t sub_1001646A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Fence.AcceptanceStatus();
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v15 = v7;
    if (a1 == 0x6465747065636341 && a2 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v10 = (unsigned int *)&enum case for Fence.AcceptanceStatus.accepted(_:);
LABEL_6:
      swift_bridgeObjectRelease();
LABEL_7:
      (*(void (**)(char *, void, uint64_t))(v15 + 104))(v9, *v10, v6);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v9, v6);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v6);
    }
    if (a1 == 0x6E6564646948 && a2 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      unint64_t v10 = (unsigned int *)&enum case for Fence.AcceptanceStatus.pendingHidden(_:);
      goto LABEL_6;
    }
    if (a1 == 0x676E69646E6550 && a2 == 0xE700000000000000)
    {
      unint64_t v10 = (unsigned int *)&enum case for Fence.AcceptanceStatus.pending(_:);
      goto LABEL_6;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = v15;
    if (v12)
    {
      unint64_t v10 = (unsigned int *)&enum case for Fence.AcceptanceStatus.pending(_:);
      goto LABEL_7;
    }
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v13(a3, 1, 1, v6);
}

void *sub_10016492C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *(void *)(a2(0) - 8);
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = *(void *)(v6 + 72);
  uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  unint64_t v10 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t isUniquelyReferenced_nonNull_native = a3(isUniquelyReferenced_nonNull_native);
    if (v12)
    {
      uint64_t v13 = isUniquelyReferenced_nonNull_native;
      uint64_t v14 = v12;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10004AFDC(0, v10[2] + 1, 1, v10);
        unint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10004AFDC((void *)(v15 > 1), v16 + 1, 1, v10);
        unint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
      }
      v10[2] = v16 + 1;
      uint64_t v11 = &v10[2 * v16];
      v11[4] = v13;
      v11[5] = v14;
    }
    v7 += v8;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100164A9C()
{
  uint64_t v0 = type metadata accessor for Fence.Participant();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for Fence.Variant();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Fence.variant.getter();
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for Fence.Variant.oneTime(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    char v12 = 0;
  }
  else
  {
    if (v11 != enum case for Fence.Variant.recurring(_:) && v11 != enum case for Fence.Variant.scheduled(_:))
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    Fence.createdBy.getter();
    Fence.finder.getter();
    char v12 = static Fence.Participant.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
    v14(v4, v0);
    v14(v6, v0);
  }
  return v12 & 1;
}

uint64_t sub_100164D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Fence.MonitorRegion.Source();
  uint64_t v14 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 48 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.unknown(_:);
LABEL_5:
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v8, *v9, v6);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a3, v8, v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v6);
  }
  if (a1 == 49 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.currentLocation(_:);
    goto LABEL_5;
  }
  if (a1 == 50 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.friendLocation(_:);
    goto LABEL_5;
  }
  if (a1 == 51 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.labelledLocation(_:);
    goto LABEL_5;
  }
  if (a1 == 52 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.addressBook(_:);
    goto LABEL_5;
  }
  if (a1 == 53 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.custom(_:);
    goto LABEL_5;
  }
  if (a1 == 54 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.droppedPin(_:);
    goto LABEL_5;
  }
  if (a1 == 55 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_34:
    uint64_t v9 = (unsigned int *)&enum case for Fence.MonitorRegion.Source.tool(_:);
    goto LABEL_5;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_34;
  }
  char v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);

  return v12(a3, 1, 1, v6);
}

uint64_t sub_1001650EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v135 = a1;
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v2 - 8);
  uint64_t v129 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014(&qword_1003EE810);
  __chkstk_darwin(v4 - 8);
  uint64_t v128 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v126 = *(void *)(v6 - 8);
  uint64_t v127 = v6;
  __chkstk_darwin(v6);
  uint64_t v125 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PlaceMark();
  uint64_t v123 = *(void *)(v8 - 8);
  uint64_t v124 = v8;
  __chkstk_darwin(v8);
  uint64_t v122 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for Fence.MonitorRegion.Source();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v10 = __chkstk_darwin(v116);
  uint64_t v112 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v114 = (char *)&v98 - v12;
  uint64_t v13 = type metadata accessor for Fence.MonitorRegion();
  uint64_t v120 = *(void *)(v13 - 8);
  uint64_t v121 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v119 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v117 = (char *)&v98 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v98 - v18;
  uint64_t v20 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for UUID();
  uint64_t v134 = *(void *)(v131 - 8);
  uint64_t v23 = __chkstk_darwin(v131);
  uint64_t v130 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v133 = (char *)&v98 - v25;
  uint64_t v26 = type metadata accessor for Fence.Participant();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v98 - v31;
  uint64_t v33 = type metadata accessor for Fence.Variant();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v118 = (char *)&v98 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v98 - v37;
  uint64_t v132 = v1;
  Fence.variant.getter();
  uint64_t v113 = *(uint64_t (**)(char *, uint64_t))(v34 + 88);
  int v39 = v113(v38, v33);
  if (v39 == enum case for Fence.Variant.oneTime(_:))
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v33);
LABEL_8:
    uint64_t v45 = type metadata accessor for FenceRecord();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v135, 1, 1, v45);
  }
  int v109 = enum case for Fence.Variant.oneTime(_:);
  uint64_t v110 = v34 + 88;
  int v108 = enum case for Fence.Variant.recurring(_:);
  if (v39 != enum case for Fence.Variant.recurring(_:) && v39 != enum case for Fence.Variant.scheduled(_:)) {
    goto LABEL_37;
  }
  int v107 = enum case for Fence.Variant.scheduled(_:);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  uint64_t v111 = v33;
  uint64_t v106 = v34 + 8;
  os_log_type_t v105 = v40;
  v40(v38, v33);
  Fence.createdBy.getter();
  Fence.finder.getter();
  char v41 = static Fence.Participant.== infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v27 + 8);
  v42(v30, v26);
  v42(v32, v26);
  if ((v41 & 1) == 0) {
    goto LABEL_8;
  }
  Fence.ckRecordIdentifier.getter();
  uint64_t v43 = v134;
  uint64_t v44 = v131;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v22, 1, v131) == 1)
  {
    sub_100166584((uint64_t)v22);
    UUID.init()();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v133, v22, v44);
  }
  uint64_t v47 = v114;
  Fence.region.getter();
  Fence.MonitorRegion.source.getter();
  uint64_t v48 = v121;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v120 + 8);
  v49(v19, v121);
  uint64_t v50 = v115;
  int v51 = v112;
  uint64_t v52 = v116;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v112, v47, v116);
  int v53 = (*(uint64_t (**)(char *, uint64_t))(v50 + 88))(v51, v52);
  if (v53 == enum case for Fence.MonitorRegion.Source.unknown(_:))
  {
    uint64_t v120 = 0;
  }
  else
  {
    if (v53 == enum case for Fence.MonitorRegion.Source.currentLocation(_:))
    {
      uint64_t v54 = 1;
    }
    else if (v53 == enum case for Fence.MonitorRegion.Source.friendLocation(_:))
    {
      uint64_t v54 = 2;
    }
    else if (v53 == enum case for Fence.MonitorRegion.Source.labelledLocation(_:))
    {
      uint64_t v54 = 3;
    }
    else if (v53 == enum case for Fence.MonitorRegion.Source.addressBook(_:))
    {
      uint64_t v54 = 4;
    }
    else if (v53 == enum case for Fence.MonitorRegion.Source.custom(_:))
    {
      uint64_t v54 = 5;
    }
    else if (v53 == enum case for Fence.MonitorRegion.Source.droppedPin(_:))
    {
      uint64_t v54 = 6;
    }
    else
    {
      if (v53 != enum case for Fence.MonitorRegion.Source.tool(_:)) {
        goto LABEL_33;
      }
      uint64_t v54 = 7;
    }
    uint64_t v120 = v54;
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v52);
  char v55 = v122;
  Fence.placemark.getter();
  uint64_t v116 = PlaceMark.locality.getter();
  uint64_t v115 = v56;
  uint64_t v114 = (char *)PlaceMark.administrativeArea.getter();
  uint64_t v112 = v57;
  uint64_t v104 = PlaceMark.country.getter();
  uint64_t v103 = v58;
  uint64_t v102 = PlaceMark.stateCode.getter();
  uint64_t v101 = v59;
  uint64_t v100 = PlaceMark.streetAddress.getter();
  uint64_t v99 = v60;
  uint64_t v61 = PlaceMark.streetName.getter();
  uint64_t v98 = v62;
  (*(void (**)(char *, uint64_t))(v123 + 8))(v55, v124);
  uint64_t v63 = v117;
  Fence.region.getter();
  Fence.MonitorRegion.center.getter();
  double v65 = v64;
  double v67 = v66;
  v49(v63, v48);
  uint64_t v68 = v119;
  Fence.region.getter();
  Fence.MonitorRegion.radius.getter();
  double v70 = v69;
  v49(v68, v48);
  uint64_t v71 = v125;
  static Date.now.getter();
  id v72 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v74 = [v72 initWithCoordinate:isa, v65, v67, 0.0, v70, -1.0];

  (*(void (**)(char *, uint64_t))(v126 + 8))(v71, v127);
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v130, v133, v44);
  uint64_t v75 = Fence.label.getter();
  uint64_t v77 = v76;
  uint64_t v78 = v118;
  Fence.variant.getter();
  uint64_t v79 = v111;
  int v80 = v113(v78, v111);
  if (v80 == v109 || v80 == v108)
  {
    v105(v78, v79);
    uint64_t v84 = type metadata accessor for Fence.Schedule();
    uint64_t v83 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v128, 1, 1, v84);
    goto LABEL_32;
  }
  if (v80 != v107)
  {
LABEL_37:
    while (1)
    {
LABEL_33:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  (*(void (**)(char *, uint64_t))(v34 + 96))(v78, v79);
  uint64_t v81 = type metadata accessor for Fence.Schedule();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = (uint64_t)v128;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v128, v78, v81);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v81);
LABEL_32:
  uint64_t v85 = (uint64_t)v129;
  Fence.muteEndDate.getter();
  uint64_t v86 = v134;
  uint64_t v87 = v131;
  (*(void (**)(char *, uint64_t))(v134 + 8))(v133, v131);
  uint64_t v88 = v135;
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v135, v130, v87);
  uint64_t v89 = (int *)type metadata accessor for FenceRecord();
  char v90 = (uint64_t *)(v88 + v89[5]);
  uint64_t *v90 = v75;
  v90[1] = v77;
  *(void *)(v88 + v89[6]) = v74;
  *(void *)(v88 + v89[7]) = v120;
  sub_100013B50(v83, v88 + v89[8], &qword_1003EE810);
  sub_100013B50(v85, v88 + v89[9], (uint64_t *)&unk_1003EE800);
  uint64_t v91 = (uint64_t *)(v88 + v89[10]);
  uint64_t v92 = v115;
  uint64_t *v91 = v116;
  v91[1] = v92;
  uint64_t v93 = v112;
  v91[2] = (uint64_t)v114;
  v91[3] = (uint64_t)v93;
  uint64_t v94 = v103;
  v91[4] = v104;
  v91[5] = v94;
  uint64_t v95 = v101;
  v91[6] = v102;
  v91[7] = v95;
  uint64_t v96 = v99;
  v91[8] = v100;
  v91[9] = v96;
  uint64_t v97 = v98;
  v91[10] = v61;
  v91[11] = v97;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v89 - 1) + 56))(v88, 0, 1, v89);
}

uint64_t sub_100165EB4()
{
  uint64_t v0 = type metadata accessor for Fence.Variant();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Fence.Participant();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  Fence.finder.getter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for Fence.Participant.me(_:), v4);
  char v11 = static Fence.Participant.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  if ((v11 & 1) == 0) {
    return 0;
  }
  Fence.variant.getter();
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  BOOL v14 = v13 != enum case for Fence.Variant.oneTime(_:);
  if (v13 != enum case for Fence.Variant.oneTime(_:)
    && v13 != enum case for Fence.Variant.recurring(_:)
    && v13 != enum case for Fence.Variant.scheduled(_:))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v14;
}

void *sub_100166154(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Handle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v42 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)v34 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v36 = (char *)v34 - v13;
  __chkstk_darwin(v12);
  uint64_t v35 = (char *)v34 - v14;
  uint64_t v44 = *(void *)(a1 + 16);
  if (!v44) {
    return _swiftEmptyArrayStorage;
  }
  v34[2] = v2;
  uint64_t v15 = *(void *)(type metadata accessor for PersonHandle() - 8);
  uint64_t v40 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v38 = *(void *)(v15 + 72);
  uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v49 = v6 + 16;
  char v41 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  v34[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v45 = a2;
  uint64_t v37 = v6;
  uint64_t v39 = v16;
  do
  {
    if (v16)
    {
      uint64_t v46 = v18;
      uint64_t v47 = v17;
      unint64_t v43 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v20 = a2 + v43;
      uint64_t v50 = *(void *)(v6 + 72);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v22 = v5;
        v21(v11, v20, v5);
        uint64_t v23 = PersonHandle.id.getter();
        uint64_t v25 = v24;
        if (v23 == Handle.identifier.getter() && v25 == v26) {
          break;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27) {
          goto LABEL_14;
        }
        uint64_t v5 = v22;
        (*v48)(v11, v22);
        v20 += v50;
        if (!--v16)
        {
          a2 = v45;
          swift_bridgeObjectRelease();
          uint64_t v6 = v37;
          uint64_t v16 = v39;
          uint64_t v18 = v46;
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v6 = v37;
      uint64_t v18 = v46;
      swift_bridgeObjectRelease();
      uint64_t v28 = *v41;
      uint64_t v29 = v36;
      (*v41)(v36, v11, v22);
      uint64_t v30 = v35;
      v28(v35, v29, v22);
      v28(v42, v30, v22);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = (void *)sub_10013DC78(0, v18[2] + 1, 1, (unint64_t)v18);
      }
      unint64_t v32 = v18[2];
      unint64_t v31 = v18[3];
      if (v32 >= v31 >> 1) {
        uint64_t v18 = (void *)sub_10013DC78(v31 > 1, v32 + 1, 1, (unint64_t)v18);
      }
      v18[2] = v32 + 1;
      uint64_t v19 = (char *)v18 + v43 + v32 * v50;
      uint64_t v5 = v22;
      v28(v19, v42, v22);
      uint64_t v16 = v39;
      a2 = v45;
LABEL_4:
      uint64_t v17 = v47;
    }
    ++v17;
  }
  while (v17 != v44);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_100166584(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003ECFB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001665E4()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FenceServiceClient()
{
  return self;
}

uint64_t sub_100166640(uint64_t a1)
{
  type metadata accessor for FenceServiceClient();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_1001711CC(v4, v1, v3);
}

Swift::Int sub_1001666E0()
{
  return Hasher._finalize()();
}

uint64_t sub_10016673C()
{
  type metadata accessor for FenceServiceClient();
  sub_100170C38(&qword_1003F09F0, v0, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);
  return XPCAcceptedClient.hash(into:)();
}

Swift::Int sub_1001667B4()
{
  return Hasher._finalize()();
}

uint64_t sub_10016680C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = type metadata accessor for FenceServiceClient();
  uint64_t v6 = sub_100170C38(&qword_1003F09F0, v5, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);

  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_100166894()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B770);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B770);
  if (qword_1003EC068 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B788);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10016695C()
{
  uint64_t v2 = v0;
  *(void *)(v1 + 16) = v0;
  swift_defaultActor_initialize();
  strcpy((char *)(v0 + 112), "FenceService");
  *(unsigned char *)(v0 + 125) = 0;
  *(_WORD *)(v0 + 126) = -5120;
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated12FenceService_serviceDescription;
  uint64_t v4 = type metadata accessor for XPCServiceDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_trampoline) = 0;
  uint64_t v5 = OBJC_IVAR____TtC13findmylocated12FenceService_connectionPool;
  sub_100044014(&qword_1003F09A0);
  *(void *)(v2 + v5) = XPCClientConnectionPool.__allocating_init()();
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_systemClockDidChangeObserver) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_systemTimeZoneDidChangeObserver) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_darwinSignificantTimeChangeTask) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_xpcAlarmHandlerTask) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated12FenceService_significantTimeChangeDebounceTask) = 0;
  type metadata accessor for XPCSessionManager();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100166B00;
  return XPCSessionManager.__allocating_init(name:)(0x72655365636E6546, 0xEC00000065636976);
}

uint64_t sub_100166B00(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated12FenceService_xpcSessionManager) = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  return v5(v6);
}

uint64_t sub_100166C24()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100166CE0, v0, 0);
}

uint64_t sub_100166CE0()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "FenceService: startup", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];

  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  uint64_t v9 = sub_100170C38(&qword_1003EF740, 255, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v9;
  v10[4] = v7;
  v10[5] = v6;
  swift_retain_n();
  sub_10010405C(v5, (uint64_t)&unk_1003F0A90, (uint64_t)v10);
  swift_release();
  v0[5] = *(void *)(v7 + OBJC_IVAR____TtC13findmylocated12FenceService_connectionPool);
  uint64_t v11 = swift_allocObject();
  v0[6] = v11;
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v6;
  swift_retain();
  sub_100044014(&qword_1003F09A0);
  sub_100170D10();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[7] = v13;
  v0[8] = v12;
  return _swift_task_switch(sub_100166F34, v13, v12);
}

uint64_t sub_100166F34()
{
  dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_100166FB8, v1, v2);
}

uint64_t sub_100166FB8()
{
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016703C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_10016705C, a4, 0);
}

uint64_t sub_10016705C()
{
  uint64_t v8 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[6] = sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[4] = sub_100037004(0x2870757472617473, 0xE900000000000029, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Waiting for first unlock", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100167248;
  return daemon.getter();
}

uint64_t sub_100167248(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t UnlockService = type metadata accessor for FirstUnlockService();
  uint64_t v6 = sub_100170C38(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100170C38(&qword_1003EF448, 255, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10016742C;
  return ActorServiceDaemon.getService<A>()(v4, UnlockService, v6, v7);
}

uint64_t sub_10016742C(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100167A10, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                           + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
    uint64_t v6 = (void *)swift_task_alloc();
    v3[12] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001675D0;
    return v8();
  }
}

uint64_t sub_1001675D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001676E0, v1, 0);
}

uint64_t sub_1001676E0()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 24) = sub_100037004(0x2870757472617473, 0xE900000000000029, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s first unlock completed", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100167884;
  return sub_100174290();
}

uint64_t sub_100167884()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_100167BC4;
  }
  else {
    uint64_t v4 = sub_1001679B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001679B0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100167A10()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error retryAllUnacceptedFenceShares: %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100167BC4()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error retryAllUnacceptedFenceShares: %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100167D78(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100167E0C, 0, 0);
}

uint64_t sub_100167E0C()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "stopProcessing", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];

  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  swift_retain();
  sub_10010405C(v5, (uint64_t)&unk_1003F0AB8, (uint64_t)v8);
  swift_release();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100167FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_task_switch(sub_100167FD4, a4, 0);
}

uint64_t sub_100167FD4()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All client connections have been terminated. Invalidating...", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001680E8()
{
  v1[12] = v0;
  sub_100044014(&qword_1003F0A50);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MachServiceName();
  v1[18] = v3;
  v1[19] = *(void *)(v3 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_100168254, v0, 0);
}

uint64_t sub_100168254()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v27 = *(void *)(v0 + 104);
  uint64_t v6 = (objc_class *)type metadata accessor for FenceService.Trampoline();
  id v7 = objc_allocWithZone(v6);
  swift_weakInit();
  swift_weakAssign();
  *(void *)(v0 + 80) = v7;
  *(void *)(v0 + 88) = v6;
  id v23 = [super init];
  *(void *)(v0 + 176) = v23;
  uint64_t v8 = self;
  id v9 = [v8 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate21FenceServiceClientXPC_];
  *(void *)(v0 + 184) = v9;
  MachServiceName.init(_:)();
  id v10 = [v8 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate21FenceServiceDaemonXPC_];
  *(void *)(v0 + 192) = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v22);
  uint64_t v11 = type metadata accessor for ServiceEntitlements();
  *(void *)(v0 + 40) = v11;
  *(void *)(v0 + 48) = sub_100170C38(&qword_1003F0A58, 255, (void (*)(uint64_t))&type metadata accessor for ServiceEntitlements);
  uint64_t v12 = sub_10003E0F4((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for ServiceEntitlements.locationService(_:), v11);
  swift_allocObject();
  swift_weakInit();
  id v13 = v23;
  id v14 = v10;
  id v15 = v9;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)();
  uint64_t v16 = *(void **)(v5 + OBJC_IVAR____TtC13findmylocated12FenceService_trampoline);
  *(void *)(v5 + OBJC_IVAR____TtC13findmylocated12FenceService_trampoline) = v13;
  id v17 = v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v25, v24, v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v25, 0, 1, v26);
  sub_100013B50(v25, v27, &qword_1003F0A50);
  uint64_t v18 = v5 + OBJC_IVAR____TtC13findmylocated12FenceService_serviceDescription;
  swift_beginAccess();
  sub_100171EAC(v27, v18);
  swift_endAccess();
  *(void *)(v0 + 200) = *(void *)(v5 + OBJC_IVAR____TtC13findmylocated12FenceService_xpcSessionManager);
  type metadata accessor for XPCSessionManager();
  sub_100170C38(&qword_1003F0A70, 255, (void (*)(uint64_t))&type metadata accessor for XPCSessionManager);
  uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100168600, v20, v19);
}

uint64_t sub_100168600()
{
  dispatch thunk of XPCSessionManager.register(service:)();
  *(void *)(v0 + 208) = 0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001686EC;
  return sub_1001B1714();
}

uint64_t sub_1001686EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001687FC, v1, 0);
}

uint64_t sub_1001687FC()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001688FC()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001689FC(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100168A90, 0, 0);
}

uint64_t sub_100168A90()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[7];
    uint64_t v4 = (void *)v0[5];
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = (void *)swift_allocObject();
    uint64_t v6[2] = 0;
    v6[3] = 0;
    v6[4] = v2;
    v6[5] = v4;
    swift_retain();
    id v7 = v4;
    sub_10010405C(v3, (uint64_t)&unk_1003F0A80, (uint64_t)v6);
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(1);
}

uint64_t sub_100168BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  void *v8 = v5;
  v8[1] = sub_10004A274;
  v8[3] = a5;
  v8[4] = a4;
  return _swift_task_switch(sub_100168CA0, a4, 0);
}

uint64_t sub_100168C80(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100168CA0, v1, 0);
}

uint64_t sub_100168CA0()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                       + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100168D58;
  uint64_t v2 = *(void *)(v0 + 24);
  return v4(v2);
}

uint64_t sub_100168D58()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    return _swift_task_switch(sub_100168EAC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_100168EAC()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error adding connection: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100169090()
{
  swift_bridgeObjectRelease();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated12FenceService_serviceDescription, &qword_1003F0A50);

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100169150()
{
  sub_100169090();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10016917C()
{
  return type metadata accessor for FenceService(0);
}

uint64_t type metadata accessor for FenceService(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003F0758);
}

void sub_1001691A4()
{
  sub_10016926C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10016926C()
{
  if (!qword_1003F0780)
  {
    type metadata accessor for XPCServiceDescription();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003F0780);
    }
  }
}

uint64_t sub_1001692C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FenceService(0);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_100169370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for FenceService(0);
  void *v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_100169438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FenceService(0);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001694E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100166C24();
}

uint64_t sub_100169570()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100018CD0;
  return sub_1001680E8();
}

uint64_t sub_1001695FC()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_10016966C(uint64_t a1, void (*a2)(uint64_t *), void (*a3)(uint64_t *))
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v29 = a1;
  uint64_t v32 = *v3;
  uint64_t v31 = sub_100044014(&qword_1003F0A18);
  __chkstk_darwin(v31);
  uint64_t v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for GenericError();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for FenceClientRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t My = type metadata accessor for Feature.FindMy();
  v35[3] = My;
  v35[4] = sub_100170C38(&qword_1003ECEC8, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v16 = sub_10003E0F4(v35);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v16, enum case for Feature.FindMy.fencesMigration(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v35);
  if (My)
  {
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
    unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v18, (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    *(void *)(v21 + v19) = v3;
    uint64_t v22 = (void (**)(uint64_t *))(v21 + v20);
    id v23 = v34;
    *uint64_t v22 = v33;
    v22[1] = v23;
    *(void *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v32;
    swift_retain();
    swift_retain();
    sub_10010405C((uint64_t)v14, (uint64_t)&unk_1003F0A28, v21);
    return swift_release();
  }
  else
  {
    void *v8 = 0xD000000000000027;
    v8[1] = 0x8000000100376500;
    uint64_t v25 = v30;
    (*(void (**)(void *, void, uint64_t))(v30 + 104))(v8, enum case for GenericError.error(_:), v6);
    sub_100170C38((unint64_t *)&qword_1003ECD00, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    uint64_t v26 = swift_allocError();
    (*(void (**)(uint64_t, void *, uint64_t))(v25 + 16))(v27, v8, v6);
    *uint64_t v5 = v26;
    swift_storeEnumTagMultiPayload();
    v33(v5);
    sub_10000A520((uint64_t)v5, &qword_1003F0A18);
    return (*(uint64_t (**)(void *, uint64_t))(v25 + 8))(v8, v6);
  }
}

uint64_t sub_100169B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[91] = a7;
  v7[90] = a6;
  v7[89] = a5;
  v7[88] = a4;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v7[92] = swift_task_alloc();
  sub_100044014(&qword_1003F0A30);
  v7[93] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.TriggerPosition();
  v7[94] = v8;
  v7[95] = *(void *)(v8 - 8);
  v7[96] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v7[97] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v7[98] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PersonHandle();
  v7[99] = v9;
  v7[100] = *(void *)(v9 - 8);
  v7[101] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.ID();
  v7[102] = v10;
  v7[103] = *(void *)(v10 - 8);
  v7[104] = swift_task_alloc();
  v7[105] = swift_task_alloc();
  v7[106] = swift_task_alloc();
  v7[107] = sub_100044014(&qword_1003F0A18);
  v7[108] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence();
  v7[109] = v11;
  v7[110] = *(void *)(v11 - 8);
  v7[111] = swift_task_alloc();
  v7[112] = swift_task_alloc();
  v7[113] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for FenceClientRequest();
  v7[114] = v12;
  v7[115] = *(void *)(v12 - 8);
  v7[116] = swift_task_alloc();
  return _swift_task_switch(sub_100169E88, 0, 0);
}

uint64_t sub_100169E88()
{
  uint64_t v1 = v0[116];
  uint64_t v2 = v0[115];
  uint64_t v3 = v0[114];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[88], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for FenceClientRequest.saveFence(_:))
  {
    uint64_t v5 = v0[116];
    uint64_t v6 = v0[113];
    uint64_t v7 = v0[110];
    uint64_t v8 = v0[109];
    (*(void (**)(uint64_t, void))(v0[115] + 96))(v5, v0[114]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, v5, v8);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[117] = v9;
    void *v9 = v0;
    v9[1] = sub_10016A724;
    uint64_t v10 = v0[113];
    uint64_t v11 = v0[112];
    return sub_100182930(v11, v10);
  }
  if (v4 == enum case for FenceClientRequest.deleteFence(_:))
  {
    uint64_t v13 = v0[116];
    uint64_t v14 = v0[106];
    uint64_t v15 = v0[103];
    uint64_t v16 = v0[102];
    (*(void (**)(uint64_t, void))(v0[115] + 96))(v13, v0[114]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v13, v16);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[119] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10016AA3C;
    uint64_t v18 = v0[106];
    return sub_100186B7C(v18);
  }
  if (v4 == enum case for FenceClientRequest.acceptFence(_:))
  {
    uint64_t v19 = v0[116];
    uint64_t v20 = v0[105];
    uint64_t v21 = v0[103];
    uint64_t v22 = v0[102];
    (*(void (**)(uint64_t, void))(v0[115] + 96))(v19, v0[114]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v19, v22);
    id v23 = (void *)swift_task_alloc();
    v0[128] = v23;
    *id v23 = v0;
    v23[1] = sub_10016B3BC;
    uint64_t v24 = v0[111];
    uint64_t v25 = v0[105];
    return sub_100189AF4(v24, v25);
  }
  if (v4 == enum case for FenceClientRequest.muteFences(_:))
  {
    uint64_t v26 = v0[116];
    uint64_t v27 = v0[110];
    uint64_t v28 = v0[109];
    uint64_t v29 = v0[101];
    uint64_t v30 = v0[100];
    uint64_t v31 = v0[99];
    uint64_t v32 = v0[98];
    uint64_t v33 = v0[97];
    (*(void (**)(uint64_t, void))(v0[115] + 96))(v26, v0[114]);
    uint64_t v34 = v26 + *(int *)(sub_100044014(&qword_1003F0A40) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v29, v26, v31);
    sub_100013B50(v34, v32, (uint64_t *)&unk_1003EE800);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v33, 1, 1, v28);
    uint64_t v35 = (void *)swift_task_alloc();
    v0[130] = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_10016B6E0;
    uint64_t v36 = v0[101];
    uint64_t v37 = v0[98];
    uint64_t v38 = v0[97];
    return sub_10018AD68(v36, v37, v38);
  }
  if (v4 == enum case for FenceClientRequest.triggerFence(_:))
  {
    uint64_t v39 = v0[116];
    uint64_t v40 = v0[104];
    uint64_t v41 = v0[103];
    uint64_t v42 = v0[102];
    uint64_t v43 = v0[96];
    uint64_t v44 = v0[95];
    uint64_t v45 = v0[94];
    (*(void (**)(uint64_t, void))(v0[115] + 96))(v39, v0[114]);
    uint64_t v46 = v39 + *(int *)(sub_100044014(&qword_1003F0A38) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v39, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v43, v46, v45);
    uint64_t v47 = (void *)swift_task_alloc();
    v0[132] = v47;
    void *v47 = v0;
    v47[1] = sub_10016B9F8;
    uint64_t v48 = v0[104];
    uint64_t v49 = v0[96];
    uint64_t v50 = v0[93];
    return sub_10019A3A8(v50, v48, v49);
  }
  if (v4 == enum case for FenceClientRequest.fences(_:))
  {
    int v51 = (void *)swift_task_alloc();
    v0[121] = v51;
    *int v51 = v0;
    uint64_t v52 = sub_10016AD1C;
LABEL_29:
    v51[1] = v52;
    return daemon.getter();
  }
  if (v4 == enum case for FenceClientRequest.startStreaming(_:))
  {
    uint64_t v53 = v0[89];
    return _swift_task_switch(sub_10016BD28, v53, 0);
  }
  else
  {
    if (v4 == enum case for FenceClientRequest.forceRefreshClient(_:))
    {
      int v51 = (void *)swift_task_alloc();
      v0[134] = v51;
      *int v51 = v0;
      uint64_t v52 = sub_10016C00C;
      goto LABEL_29;
    }
    uint64_t v54 = v0[116];
    uint64_t v55 = v0[115];
    uint64_t v56 = v0[114];
    int v57 = (uint64_t *)v0[108];
    uint64_t v58 = (void (*)(uint64_t *))v0[90];
    uint64_t v59 = type metadata accessor for GenericError();
    sub_100170C38((unint64_t *)&qword_1003ECD00, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    uint64_t v60 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v59 - 8) + 104))(v61, enum case for GenericError.notImplemented(_:), v59);
    *int v57 = v60;
    swift_storeEnumTagMultiPayload();
    v58(v57);
    sub_10000A520((uint64_t)v57, &qword_1003F0A18);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = (uint64_t (*)(void))v0[1];
    return v62();
  }
}

uint64_t sub_10016A724()
{
  *(void *)(*(void *)v1 + 944) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016C508;
  }
  else {
    uint64_t v2 = sub_10016A838;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016A838()
{
  uint64_t v1 = v0[113];
  uint64_t v2 = v0[112];
  uint64_t v3 = v0[110];
  uint64_t v4 = v0[109];
  uint64_t v5 = v0[108];
  uint64_t v6 = (void (*)(uint64_t))v0[90];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  uint64_t v7 = enum case for FenceResponse.fence(_:);
  uint64_t v8 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v5, v7, v8);
  swift_storeEnumTagMultiPayload();
  v6(v5);
  sub_10000A520(v5, &qword_1003F0A18);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v2, v4);
  v9(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10016AA3C()
{
  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016C894;
  }
  else {
    uint64_t v2 = sub_10016AB50;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016AB50()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[106];
  uint64_t v3 = v0[103];
  uint64_t v4 = v0[102];
  uint64_t v5 = (void (*)(uint64_t))v0[90];
  uint64_t v6 = enum case for FenceResponse.void(_:);
  uint64_t v7 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v1, v6, v7);
  swift_storeEnumTagMultiPayload();
  v5(v1);
  sub_10000A520(v1, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10016AD1C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 976) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 984) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100170C38(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100170C38(&qword_1003ECCC0, 255, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10016AF00;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10016AF00(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 992) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[89];
    return _swift_task_switch(sub_10016CC20, v6, 0);
  }
  else
  {
    swift_release();
    v4[125] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[126] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_10016B08C;
    return sub_10012F108();
  }
}

uint64_t sub_10016B08C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 712);
  *(void *)(*(void *)v1 + 1016) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10016B1A4, v2, 0);
}

uint64_t sub_10016B1A4()
{
  swift_release();
  return _swift_task_switch(sub_10016B20C, 0, 0);
}

uint64_t sub_10016B20C()
{
  uint64_t v1 = (void *)v0[108];
  uint64_t v2 = (void (*)(void *))v0[90];
  *uint64_t v1 = v0[127];
  uint64_t v3 = enum case for FenceResponse.fences(_:);
  uint64_t v4 = type metadata accessor for FenceResponse();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v1, v3, v4);
  swift_storeEnumTagMultiPayload();
  v2(v1);
  sub_10000A520((uint64_t)v1, &qword_1003F0A18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10016B3BC()
{
  *(void *)(*(void *)v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016CFF0;
  }
  else {
    uint64_t v2 = sub_10016B4D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016B4D0()
{
  uint64_t v1 = v0[111];
  uint64_t v2 = v0[110];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[108];
  uint64_t v5 = v0[103];
  uint64_t v11 = v0[102];
  uint64_t v12 = v0[105];
  uint64_t v6 = (void (*)(uint64_t))v0[90];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  uint64_t v7 = enum case for FenceResponse.fence(_:);
  uint64_t v8 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v4, v7, v8);
  swift_storeEnumTagMultiPayload();
  v6(v4);
  sub_10000A520(v4, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10016B6E0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 776);
  *(void *)(*(void *)v1 + 1048) = v0;
  swift_task_dealloc();
  sub_10000A520(v2, &qword_1003F0350);
  if (v0) {
    uint64_t v3 = sub_10016D37C;
  }
  else {
    uint64_t v3 = sub_10016B818;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10016B818()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[100];
  uint64_t v4 = v0[99];
  uint64_t v5 = v0[98];
  uint64_t v6 = (void (*)(uint64_t))v0[90];
  uint64_t v7 = enum case for FenceResponse.void(_:);
  uint64_t v8 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v1, v7, v8);
  swift_storeEnumTagMultiPayload();
  v6(v1);
  sub_10000A520(v1, &qword_1003F0A18);
  sub_10000A520(v5, (uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10016B9F8()
{
  *(void *)(*(void *)v1 + 1064) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016D71C;
  }
  else {
    uint64_t v2 = sub_10016BB0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016BB0C()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[103];
  uint64_t v12 = v0[102];
  uint64_t v13 = v0[104];
  uint64_t v11 = v0[96];
  uint64_t v3 = v0[95];
  uint64_t v4 = v0[94];
  uint64_t v5 = v0[93];
  uint64_t v6 = (void (*)(uint64_t))v0[90];
  sub_100013210(v5, v1, &qword_1003F0A30);
  uint64_t v7 = enum case for FenceResponse.triggerID(_:);
  uint64_t v8 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v1, v7, v8);
  swift_storeEnumTagMultiPayload();
  v6(v1);
  sub_10000A520(v1, &qword_1003F0A18);
  sub_10000A520(v5, &qword_1003F0A30);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v11, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10016BD28()
{
  uint64_t v1 = *(void *)(v0 + 736);
  uint64_t v2 = *(void *)(v0 + 712);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = sub_100170C38(&qword_1003EF740, 255, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v2;
  swift_retain_n();
  sub_10012EDF8(v1, (uint64_t)&unk_1003EF748, (uint64_t)v5);
  swift_release();
  return _swift_task_switch(sub_10016BE64, 0, 0);
}

uint64_t sub_10016BE64()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = (void (*)(uint64_t))v0[90];
  uint64_t v3 = enum case for FenceResponse.void(_:);
  uint64_t v4 = type metadata accessor for FenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v1, v3, v4);
  swift_storeEnumTagMultiPayload();
  v2(v1);
  sub_10000A520(v1, &qword_1003F0A18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10016C00C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1080) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1088) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100170C38(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100170C38(&qword_1003ECCC0, 255, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10016C1F0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10016C1F0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 1096) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[89];
    return _swift_task_switch(sub_10016DAD0, v6, 0);
  }
  else
  {
    swift_release();
    v4[138] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[139] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_10016C384;
    return sub_10010B8B8((uint64_t)(v4 + 2));
  }
}

uint64_t sub_10016C384()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 712);
  swift_task_dealloc();
  return _swift_task_switch(sub_10016C494, v1, 0);
}

uint64_t sub_10016C494()
{
  swift_release();
  sub_10015F0A4(v0 + 16);
  return _swift_task_switch(sub_100172D50, 0, 0);
}

uint64_t sub_10016C508()
{
  uint64_t v15 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[86] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[87] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s updateFence Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[113];
  uint64_t v8 = v0[110];
  uint64_t v9 = v0[109];
  uint64_t v10 = (void *)v0[108];
  uint64_t v11 = (void (*)(void *))v0[90];
  void *v10 = v0[118];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v11(v10);
  swift_errorRelease();
  sub_10000A520((uint64_t)v10, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10016C894()
{
  uint64_t v15 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[84] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[85] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s deleteFence Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v8 = v0[106];
  uint64_t v9 = v0[103];
  uint64_t v10 = v0[102];
  uint64_t v11 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[120];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v11(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10016CC20()
{
  swift_release();
  return _swift_task_switch(sub_10016CC88, 0, 0);
}

uint64_t sub_10016CC88()
{
  uint64_t v12 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[82] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[83] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s getFences Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v8 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[124];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v8(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10016CFF0()
{
  uint64_t v15 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[80] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[81] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s acceptFence Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v8 = v0[105];
  uint64_t v9 = v0[103];
  uint64_t v10 = v0[102];
  uint64_t v11 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[129];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v11(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10016D37C()
{
  uint64_t v16 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[78] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[79] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s muteFences Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v8 = v0[101];
  uint64_t v9 = v0[100];
  uint64_t v10 = v0[99];
  uint64_t v11 = v0[98];
  uint64_t v12 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[131];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v12(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  sub_10000A520(v11, (uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10016D71C()
{
  uint64_t v18 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[76] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[77] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s, triggerFence failed with error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v16 = v0[104];
  uint64_t v8 = v0[103];
  uint64_t v9 = v0[102];
  uint64_t v10 = v0[96];
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[94];
  uint64_t v13 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[133];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v13(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10016DAD0()
{
  swift_release();
  return _swift_task_switch(sub_10016DB38, 0, 0);
}

uint64_t sub_10016DB38()
{
  uint64_t v12 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[74] = sub_100037004(0xD00000000000001CLL, 0x8000000100376530, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[75] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s, forceRefreshClient failed with error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[108];
  uint64_t v8 = (void (*)(void *))v0[90];
  *uint64_t v7 = v0[137];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v8(v7);
  swift_errorRelease();
  sub_10000A520((uint64_t)v7, &qword_1003F0A18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10016DEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10016DF34;
  return daemon.getter();
}

uint64_t sub_10016DF34(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 32) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100170C38(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100170C38(&qword_1003ECCC0, 255, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10016E118;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10016E118(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[6] = a1;
  v3[7] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[2];
    return _swift_task_switch(sub_10016EA5C, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[8] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10016E2A0;
    return sub_10012F108();
  }
}

uint64_t sub_10016E2A0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 72) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 80) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10016E3F4;
  return sub_1001B2350(a1);
}

uint64_t sub_10016E3F4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10016E54C;
  uint64_t v4 = *(void *)(v1 + 72);
  return sub_1001B33A8(v4);
}

uint64_t sub_10016E54C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10016E65C, v1, 0);
}

uint64_t sub_10016E65C()
{
  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13findmylocated12FenceService_connectionPool);
  sub_100044014(&qword_1003F09A0);
  sub_100170D10();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10016E6F8, v2, v1);
}

uint64_t sub_10016E6F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 104) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return _swift_task_switch(sub_10016E768, v1, 0);
}

uint64_t sub_10016E768()
{
  uint64_t v1 = v0[13];
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      uint64_t v2 = v0[13];
      uint64_t v3 = v0[9];
      sub_100170C38(&qword_1003EF740, 255, (void (*)(uint64_t))type metadata accessor for FenceService);
      uint64_t v4 = swift_task_alloc();
      v0[14] = v4;
      *(void *)(v4 + 16) = v2;
      *(void *)(v4 + 24) = v3;
      uint64_t v5 = (void *)swift_task_alloc();
      v0[15] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_10016E918;
      return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
    }
  }
  else if (*(void *)(v1 + 16))
  {
    goto LABEL_3;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10016E918()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v4 = sub_10016EAC0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = sub_1000F0314;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10016EA5C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016EAC0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016EB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[16] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_10016EBF4, 0, 0);
}

uint64_t sub_10016EBF4()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for FenceServiceClient();
    sub_100170C38((unint64_t *)&unk_1003F0988, v2, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v34 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v34 = v1 + 56;
    uint64_t v5 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v33 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v35 = v1;
  while (v1 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_37;
    }
    *(void *)(v0 + 120) = v14;
    type metadata accessor for FenceServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 112);
    swift_unknownObjectRelease();
    uint64_t v13 = v4;
    uint64_t v11 = v6;
    if (!v15) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v36 = v11;
    uint64_t v37 = v13;
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v19 = *(void *)(v0 + 160);
    uint64_t v21 = *(void *)(v0 + 144);
    uint64_t v22 = type metadata accessor for TaskPriority();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v19, 1, 1, v22);
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = 0;
    uint64_t v25 = v24 + 2;
    v24[3] = 0;
    v24[4] = v15;
    v24[5] = v21;
    sub_100013210(v19, v20, (uint64_t *)&unk_1003F3C10);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v26 = *(void *)(v0 + 152);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 152), (uint64_t *)&unk_1003F3C10);
      if (*v25) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
      if (*v25)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
LABEL_35:
    uint64_t v30 = **(void **)(v0 + 128);
    uint64_t v31 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v31 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v27;
      *(void *)(v0 + 80) = v29;
    }
    uint64_t v1 = v35;
    uint64_t v10 = *(void *)(v0 + 160);
    *(void *)(v0 + 88) = 1;
    *(void *)(v0 + 96) = v31;
    *(void *)(v0 + 104) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = sub_10000A520(v10, (uint64_t *)&unk_1003F3C10);
    uint64_t v4 = v37;
    unint64_t v6 = v36;
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v4 << 6);
    uint64_t v13 = v4;
    goto LABEL_29;
  }
  int64_t v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v33) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v34 + 8 * v16);
  uint64_t v13 = v4 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 2;
  if (v4 + 2 >= v33) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v34 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 3;
  if (v4 + 3 >= v33) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v34 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 4;
  if (v4 + 4 >= v33) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v34 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v4 + 5;
  while (v33 != v18)
  {
    unint64_t v17 = *(void *)(v34 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  sub_1001491B4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_10016F110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a3;
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for FenceDaemonRequest();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FenceResponse();
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_10016F23C, 0, 0);
}

uint64_t sub_10016F23C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  **(void **)(v0 + 48) = *(void *)(v0 + 24);
  (*(void (**)(void))(v1 + 104))();
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10016F324;
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  v2[5] = *(void *)(v0 + 48);
  v2[6] = v4;
  v2[4] = v3;
  return _swift_task_switch(sub_10016F74C, v4, 0);
}

uint64_t sub_10016F324()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10016F6A8;
  }
  else {
    uint64_t v5 = sub_10016F494;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10016F494()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v4(v1, v0[10], v2);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v8 = v0[9];
  uint64_t v7 = v0[10];
  uint64_t v9 = v0[7];
  if (v5 == enum case for FenceResponse.void(_:))
  {
    v6(v0[10], v0[7]);
    v6(v8, v9);
  }
  else
  {
    uint64_t v11 = v0[8];
    v6(v0[9], v0[7]);
    type metadata accessor for FenceServiceClient.Failure(0);
    sub_100170C38(&qword_1003F09D8, 255, (void (*)(uint64_t))type metadata accessor for FenceServiceClient.Failure);
    swift_allocError();
    uint64_t v13 = v12;
    v4(v12, v7, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v9);
    swift_willThrow();
    v6(v7, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10016F6A8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016F728(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_10016F74C, v2, 0);
}

uint64_t sub_10016F74C()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for FenceResponse();
  *uint64_t v2 = v0;
  v2[1] = sub_10016F844;
  uint64_t v4 = *(void *)(v0 + 32);
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v4, 0x75716552656B616DLL, 0xEF293A5F28747365, sub_100170F34, v1, v3);
}

uint64_t sub_10016F844()
{
  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[6];
    return _swift_task_switch(sub_10016F980, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_10016F980()
{
  uint64_t v10 = v0;
  swift_task_dealloc();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    int v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0x75716552656B616DLL, 0xEF293A5F28747365, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10016FC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceDaemonRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = a2;
  *((void *)v14 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v14[v13], (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain();
  swift_retain();
  sub_10010405C((uint64_t)v11, (uint64_t)&unk_1003F09E8, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10016FDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  return _swift_task_switch(sub_10016FE14, 0, 0);
}

uint64_t sub_10016FE14()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  uint64_t v2 = type metadata accessor for FenceServiceClient();
  uint64_t v4 = sub_100170C38(&qword_1003F09F0, v3, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);
  *uint64_t v1 = v0;
  v1[1] = sub_10016FF20;
  uint64_t v5 = *(void *)(v0 + 88);
  return XPCAcceptedClient.proxy(errorHandler:)(v0 + 64, sub_100171184, v5, v2, v4);
}

uint64_t sub_10016FF20()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100170230;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10017003C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017003C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for FenceDaemonRequest();
  sub_100170C38(&qword_1003F09F8, 255, (void (*)(uint64_t))&type metadata accessor for FenceDaemonRequest);
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
    swift_unknownObjectRelease();
    v0[9] = v1;
    OnceCheckedContinuation.resume(throwing:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    uint64_t v7 = v0[11];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001711AC;
    v0[7] = v7;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100170508;
    v0[5] = &unk_1003E10C0;
    uint64_t v9 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v2 request:isa completion:v9];
    _Block_release(v9);

    sub_100044090(v5, v6);
    swift_release();
    swift_unknownObjectRelease();
  }
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100170230()
{
  swift_release();
  v0[9] = v0[14];
  OnceCheckedContinuation.resume(throwing:)();
  swift_errorRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001702AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      uint64_t v14 = a3;
      swift_errorRetain();
    }
    else
    {
      type metadata accessor for FenceServiceClient.Failure(0);
      sub_100170C38(&qword_1003F09D8, 255, (void (*)(uint64_t))type metadata accessor for FenceServiceClient.Failure);
      uint64_t v10 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v11, 1, 1, v6);
      uint64_t v14 = v10;
    }
    OnceCheckedContinuation.resume(throwing:)();
    return swift_errorRelease();
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    sub_100022C64(a1, a2);
    PropertyListDecoder.init()();
    sub_100170C38(&qword_1003F0A00, 255, (void (*)(uint64_t))&type metadata accessor for FenceResponse);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    OnceCheckedContinuation.resume(returning:)();
    sub_1000440E8(a1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_100170508(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    unint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_1000440E8((uint64_t)v4, v8);

  return swift_release();
}

uint64_t sub_1001705B4(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for FenceResponse();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003F0A18);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100013210(a1, (uint64_t)v10, &qword_1003F0A18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    if (qword_1003EC068 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B788);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      uint64_t v24 = v22[0];
      *(_DWORD *)uint64_t v15 = 136446466;
      uint64_t v23 = sub_100037004(0xD000000000000016, 0x80000001003764E0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2114;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v23 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: %{public}@", (uint8_t *)v15, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(0, 0xF000000000000000, v11);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v10, v4);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100170C38(&qword_1003F0A48, 255, (void (*)(uint64_t))&type metadata accessor for FenceResponse);
    uint64_t v18 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v20 = v19;
    sub_100022C64(v18, v19);
    a2(v18, v20, 0);
    sub_100044090(v18, v20);
    swift_release();
    sub_100044090(v18, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

id sub_100170B34()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for FenceService.Trampoline()
{
  return self;
}

uint64_t sub_100170BA0()
{
  return sub_100170C38(qword_1003F0950, 255, (void (*)(uint64_t))type metadata accessor for FenceService);
}

uint64_t sub_100170BEC()
{
  return sub_100170C38(&qword_1003EF740, 255, (void (*)(uint64_t))type metadata accessor for FenceService);
}

uint64_t sub_100170C38(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100170C80(uint64_t a1, uint64_t a2)
{
  return sub_100170C38(&qword_1003F0980, a2, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);
}

uint64_t sub_100170CC8(uint64_t a1, uint64_t a2)
{
  return sub_100170C38((unint64_t *)&unk_1003F0988, a2, (void (*)(uint64_t))type metadata accessor for FenceServiceClient);
}

unint64_t sub_100170D10()
{
  unint64_t result = qword_1003F09A8;
  if (!qword_1003F09A8)
  {
    sub_10004AE58(&qword_1003F09A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F09A8);
  }
  return result;
}

uint64_t sub_100170D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_10004A274;
  return sub_10016EB4C(a1, a2, v7, v6);
}

uint64_t sub_100170E20()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100170E68()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_10016F110(v2, v3, v5, v4);
}

uint64_t type metadata accessor for FenceServiceClient.Failure(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003F0B38);
}

uint64_t sub_100170F34(uint64_t a1)
{
  return sub_10016FC08(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100170F3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B788);
  sub_100044058(v0, (uint64_t)qword_10040B788);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100170FBC()
{
  uint64_t v1 = type metadata accessor for FenceDaemonRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100171098()
{
  uint64_t v2 = *(void *)(type metadata accessor for FenceDaemonRequest() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10004A274;
  *(void *)(v4 + 96) = v3;
  *(_OWORD *)(v4 + 80) = v5;
  return _swift_task_switch(sub_10016FE14, 0, 0);
}

uint64_t sub_100171184()
{
  return OnceCheckedContinuation.resume(throwing:)();
}

uint64_t sub_1001711AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1001702AC(a1, a2, a3);
}

uint64_t sub_1001711B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001711C4()
{
  return swift_release();
}

uint64_t sub_1001711CC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1001711E0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(sub_100171200, 0, 0);
}

uint64_t sub_100171200()
{
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                         + async function pointer to dispatch thunk of FM.XPCSession.connection.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001712A8;
  return v3();
}

uint64_t sub_1001712A8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001713A8, 0, 0);
}

uint64_t sub_1001713A8()
{
  uint64_t v17 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B770);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    id v9 = v7;
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    v0[2] = sub_100037004(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fences Service: removed connection: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1001715C0(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v5 = type metadata accessor for FenceClientRequest();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a4;
  if (swift_weakLoadStrong())
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    _Block_copy(a4);
    PropertyListDecoder.init()();
    sub_100170C38(&qword_1003F0A10, 255, (void (*)(uint64_t))&type metadata accessor for FenceClientRequest);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_100171AE0;
    *(void *)(v11 + 24) = v9;
    swift_retain();
    sub_10016966C((uint64_t)v8, (void (*)(uint64_t *))sub_100171B74, (void (*)(uint64_t *))v11);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_release();
  }
  else
  {
    sub_100171AE8();
    swift_allocError();
    _Block_copy(a4);
    id v10 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v10);

    swift_errorRelease();
    return swift_release();
  }
}

uint64_t sub_100171AA8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100171AE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100347068(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t sub_100171AE8()
{
  unint64_t result = qword_1003F0A08;
  if (!qword_1003F0A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F0A08);
  }
  return result;
}

uint64_t sub_100171B3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100171B74(uint64_t a1)
{
  return sub_1001705B4(a1, *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100171B7C()
{
  uint64_t v1 = type metadata accessor for FenceClientRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100171C80(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FenceClientRequest() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v6);
  uint64_t v12 = *(void *)(v1 + v7);
  uint64_t v13 = *(void *)(v1 + v7 + 8);
  os_log_type_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *os_log_type_t v14 = v2;
  v14[1] = sub_100018CD0;
  return sub_100169B20(a1, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100171DD4()
{
  return sub_1001721A8(40);
}

uint64_t sub_100171DDC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100171E14(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004CAE8;
  return sub_1001689FC(a1, v1);
}

uint64_t sub_100171EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F0A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100171F14()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100171F5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10004A274;
  return sub_100168BD0(a1, v4, v5, v7, v6);
}

uint64_t sub_10017201C()
{
  return sub_1001721A8(48);
}

uint64_t sub_100172024()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  v3[5] = v2;
  return _swift_task_switch(sub_10016705C, v2, 0);
}

uint64_t sub_1001720D0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100172108()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_100167D78(v2);
}

uint64_t sub_1001721A0()
{
  return sub_1001721A8(40);
}

uint64_t sub_1001721A8(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1001721F4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return _swift_task_switch(sub_100167FD4, v2, 0);
}

unsigned char *storeEnumTagSinglePayload for FenceService.TrampolineFailure(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100172338);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceService.TrampolineFailure()
{
  return &type metadata for FenceService.TrampolineFailure;
}

uint64_t *sub_100172370(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for FenceResponse();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001724BC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FenceResponse();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10017258C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10017269C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_100172810(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100172920(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100172A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100172AA8);
}

uint64_t sub_100172AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceResponse();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100172B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100172B28);
}

uint64_t sub_100172B28(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for FenceResponse();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100172BA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FenceResponse();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_100172C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceResponse();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_100172C80()
{
  uint64_t result = type metadata accessor for FenceResponse();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_100172CFC()
{
  unint64_t result = qword_1003F0B48;
  if (!qword_1003F0B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F0B48);
  }
  return result;
}

uint64_t sub_100172D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100172E74, v3, 0);
}

uint64_t sub_100172E74()
{
  uint64_t v18 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[2] = sub_100037004(0xD00000000000001ELL, 0x8000000100376630, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_10004727C((unint64_t *)&qword_1003EF0A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s url:%{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  uint64_t v15 = (void *)swift_task_alloc();
  v0[15] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10017317C;
  return daemon.getter();
}

uint64_t sub_10017317C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 128) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 136) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004727C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004727C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100173358;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100173358(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[8];
    uint64_t v5 = sub_100174194;
  }
  else
  {
    uint64_t v6 = v3[8];
    swift_release();
    uint64_t v5 = sub_100173480;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100173480()
{
  v0[20] = Data.init(base64Encoded:options:)();
  v0[21] = v1;
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = v0[6];
    uint64_t v2 = (void *)v0[7];
    uint64_t v4 = type metadata accessor for GenericError();
    sub_10004727C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v6 = v5;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = v3;
    v7._object = v2;
    String.append(_:)(v7);
    *uint64_t v6 = 0xD00000000000001DLL;
    v6[1] = 0x80000001003765B0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, enum case for GenericError.error(_:), v4);
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    return _swift_task_switch(sub_100173668, 0, 0);
  }
}

uint64_t sub_100173668()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[22] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[23] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100173770;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD00000000000002BLL, 0x80000001003765D0, sub_100178D5C, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_100173770()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100173B54;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10017388C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10017388C()
{
  return _swift_task_switch(sub_1001738A8, *(void *)(v0 + 64), 0);
}

uint64_t sub_1001738A8()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003F0B58 + dword_1003F0B58);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100173970;
  return v3(0x8AC7230489E80000, 0, 0, 0, 1);
}

uint64_t sub_100173970()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[26] = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[11];
  uint64_t v5 = v2[10];
  uint64_t v6 = v2[9];
  if (v0)
  {
    uint64_t v7 = v2[8];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    return _swift_task_switch(sub_100173D60, v7, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v8 = (void *)swift_task_alloc();
    v2[27] = v8;
    void *v8 = v3;
    v8[1] = sub_100173C44;
    uint64_t v9 = v2[20];
    uint64_t v10 = v2[21];
    uint64_t v11 = v2[5];
    return sub_100174DC4(v11, v9, v10);
  }
}

uint64_t sub_100173B54()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_100173BC0, v1, 0);
}

uint64_t sub_100173BC0()
{
  sub_1000440E8(v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100173C44()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_10017420C;
  }
  else
  {
    uint64_t v4 = sub_100173DE4;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100173D60()
{
  sub_1000440E8(v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100173DE4()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_task_alloc();
  v0[29] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100173EDC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000025, 0x8000000100376600, sub_100178F90, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100173EDC()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001740A4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100173FF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100173FF8()
{
  return _swift_task_switch(sub_100174014, *(void *)(v0 + 64), 0);
}

uint64_t sub_100174014()
{
  sub_1000440E8(v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001740A4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_100174110, v1, 0);
}

uint64_t sub_100174110()
{
  sub_1000440E8(v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100174194()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10017420C()
{
  sub_1000440E8(v0[20], v0[21]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100174290()
{
  v1[5] = v0;
  v1[6] = *v0;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[7] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10017434C;
  return daemon.getter();
}

uint64_t sub_10017434C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004727C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004727C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100174528;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100174528(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[5];
    uint64_t v5 = sub_100174D60;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10017464C;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10017464C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = sub_100044014(&qword_1003F0BD8);
  *uint64_t v1 = v0;
  v1[1] = sub_100174730;
  uint64_t v3 = *(void *)(v0 + 80);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000025, 0x80000001003766F0, sub_1001799B0, v3, v2);
}

uint64_t sub_100174730()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100174844;
  }
  else {
    uint64_t v2 = sub_1001748C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100174844()
{
  return _swift_task_switch(sub_100174860, *(void *)(v0 + 40), 0);
}

uint64_t sub_100174860()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001748C4()
{
  uint64_t v1 = v0[5];
  v0[14] = v0[2];
  return _swift_task_switch(sub_1001748E8, v1, 0);
}

uint64_t sub_1001748E8()
{
  uint64_t v15 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[14];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[3] = sub_100037004(0xD00000000000001FLL, 0x8000000100376720, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2050;
    v0[4] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s retrying %{public}ld share invites.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[14];
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[5];
  uint64_t v10 = v0[6];
  sub_10004727C(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[15] = v11;
  v11[2] = v7;
  v11[3] = v9;
  v11[4] = v8;
  v11[5] = v10;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[16] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100174BAC;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_100174BAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100174CFC, v1, 0);
}

uint64_t sub_100174CFC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100174D60()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100174DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  v4[31] = *v3;
  uint64_t v5 = type metadata accessor for URL();
  v4[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[33] = v6;
  v4[34] = *(void *)(v6 + 64);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  return _swift_task_switch(sub_100174EFC, v3, 0);
}

uint64_t sub_100174EFC()
{
  uint64_t v19 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[33];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B770);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[37] = v6;
  v0[38] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[36];
  uint64_t v11 = v0[32];
  uint64_t v12 = v0[33];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446723;
    v0[24] = sub_100037004(0xD000000000000021, 0x80000001003766C0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    v0[25] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_10004727C((unint64_t *)&qword_1003EF0A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_100037004(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s accepting share invite for url: %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[36], v0[32]);
  }

  uint64_t v16 = (void *)swift_task_alloc();
  v0[39] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10017523C;
  return daemon.getter();
}

uint64_t sub_10017523C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[40] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[41] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[42] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004727C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[43] = v6;
  uint64_t v7 = sub_10004727C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100175454;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100175454(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[30];
    return _swift_task_switch(sub_10017621C, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[46] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100175618;
    return daemon.getter();
  }
}

uint64_t sub_100175618(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 376) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 384) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_10004727C(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001757F8;
  uint64_t v8 = *(void *)(v2 + 344);
  uint64_t v9 = *(void *)(v2 + 336);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001757F8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[30];
    uint64_t v5 = sub_1001762C4;
  }
  else
  {
    uint64_t v6 = v3[30];
    swift_release();
    uint64_t v5 = sub_10017596C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10017596C()
{
  sub_100044014(&qword_1003EE608);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100367D70;
  unint64_t v2 = sub_100178F98();
  *(void *)(v1 + 56) = sub_100044014(&qword_1003F0B70);
  *(void *)(v1 + 32) = v2;
  id v3 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithArray:isa];

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  uint64_t v6 = type metadata accessor for GenericError();
  sub_10004727C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
  swift_allocError();
  *uint64_t v7 = 0xD00000000000002BLL;
  v7[1] = 0x8000000100376650;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, enum case for GenericError.error(_:), v6);
  swift_willThrow();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100175FD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100176378;
  }
  else {
    uint64_t v4 = sub_10017614C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10017614C()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_release();

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10017621C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001762C4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100176378()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_release();

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10017643C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[16] = a2;
  uint64_t v7 = type metadata accessor for URL();
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  return _swift_task_switch(sub_100176504, 0, 0);
}

void sub_100176504()
{
  uint64_t v1 = v0[16];
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 16));
  uint64_t v2 = *(void *)(v1 + 24);
  v0[24] = v2;
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    id v5 = (os_unfair_lock_s *)(v0[16] + 16);
    *(void *)(v1 + 24) = v4;
    os_unfair_lock_unlock(v5);
    v0[25] = sub_100179554((uint64_t)&off_1003DD490);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[26] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1001765DC;
    uint64_t v8 = v0[18];
    uint64_t v7 = v0[19];
    sub_1000F2620(v8, v7);
  }
}

uint64_t sub_1001765DC()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100176C2C;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001766F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001766F8()
{
  uint64_t v23 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[22];
  uint64_t v9 = v0[23];
  uint64_t v11 = v0[21];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[14] = sub_100037004(0xD000000000000021, 0x80000001003766C0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_10004727C((unint64_t *)&qword_1003EF0A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_100037004(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s accepted url: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[23], v0[21]);
  }

  uint64_t v15 = sub_100050974(v0[24], v0[24] < 5, 0, 0);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v15, v17, v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100176A24()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100176BB4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100176B40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100176B40()
{
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100176BB4()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_task_dealloc();

  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100176C2C()
{
  uint64_t v44 = v0;
  *(void *)(v0 + 16) = *(void *)(v0 + 216);
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {
    uint64_t v1 = *(void **)(v0 + 24);
    *(void *)(v0 + 80) = v1;
    uint64_t v2 = *(void *)(v0 + 200);
    *(void *)(v0 + 224) = v1;
    sub_10004727C(&qword_1003EC698, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    BOOL v3 = sub_100149418(*(void *)(v0 + 72), v2);
    swift_bridgeObjectRelease();
    if (v3)
    {
      swift_errorRelease();
      if (qword_1003EC060 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100044058(v4, (uint64_t)qword_10040B770);
      id v5 = v1;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v42 = *(void *)(v0 + 192);
        uint64_t v8 = swift_slowAlloc();
        v43[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136446722;
        *(void *)(v0 + 88) = sub_100037004(0xD000000000000021, 0x80000001003766C0, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2082;
        id v9 = v5;
        uint64_t v10 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v12 = v11;

        *(void *)(v0 + 96) = sub_100037004(v10, v12, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 22) = 2048;
        *(void *)(v0 + 104) = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s accept fence failed with unrecoverable error: %{public}s; attempt #%ld. The invitation will be removed.",
          (uint8_t *)v8,
          0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v30 = *(void *)(v0 + 192);
      uint64_t v31 = *(void *)(v0 + 160);
      uint64_t v32 = *(void *)(v0 + 144);
      id v33 = v5;
      uint64_t v34 = sub_100050974(v30, 0, (uint64_t)v5, 1);
      uint64_t v36 = v35;
      uint64_t v38 = v37;

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v34, v36, v38);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v39 = swift_task_alloc();
      *(void *)(v0 + 232) = v39;
      *(void *)(v39 + 16) = v31;
      *(void *)(v39 + 24) = v32;
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v40;
      *uint64_t v40 = v0;
      v40[1] = sub_100176A24;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v40, 0, 0, 0xD000000000000025, 0x8000000100376600, sub_100179F34, v39, (char *)&type metadata for () + 8);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_errorRelease();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100044058(v13, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v0 + 216);
  if (v16)
  {
    uint64_t v41 = *(void *)(v0 + 192);
    uint64_t v18 = swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446978;
    *(void *)(v0 + 32) = sub_100037004(0xD000000000000021, 0x80000001003766C0, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2082;
    *(void *)(v0 + 40) = v17;
    swift_errorRetain();
    uint64_t v19 = String.init<A>(describing:)();
    *(void *)(v0 + 48) = sub_100037004(v19, v20, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v18 + 22) = 2048;
    *(void *)(v0 + 56) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 32) = 1024;
    *(_DWORD *)(v0 + 256) = v41 < 5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s accept fence failed with error: %{public}s; attempt #%ld, will retry again: %{BOOL}d",
      (uint8_t *)v18,
      0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 192);
  swift_errorRetain();
  uint64_t v23 = sub_100050974(v22, v22 < 5, v21, 1);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v23, v25, v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100177388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Handle();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  return _swift_task_switch(sub_10017747C, v4, 0);
}

uint64_t sub_10017747C()
{
  uint64_t v18 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  if (v8)
  {
    uint64_t v16 = v0[11];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446723;
    v0[3] = sub_100037004(0xD000000000000040, 0x8000000100373B80, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2081;
    uint64_t v12 = Handle.identifier.getter();
    v0[5] = sub_100037004(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s to handle %{private,mask.hash}s!", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[13], v0[11]);
  }

  unint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_100177768;
  return daemon.getter();
}

uint64_t sub_100177768(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 120) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 128) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CommandManager();
  uint64_t v6 = sub_10004727C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004727C(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10017796C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10017796C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[10];
    uint64_t v5 = sub_100177EC4;
  }
  else
  {
    uint64_t v6 = v3[10];
    swift_release();
    uint64_t v5 = sub_100177AE0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100177AE0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = self;
  *(void *)(v0 + 16) = 0;
  id v3 = [v2 archivedDataWithRootObject:v1 requiringSecureCoding:1 error:v0 + 16];
  id v4 = *(id *)(v0 + 16);
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    Swift::String v8 = Data.base64EncodedString(options:)(0);
    *(void *)(v0 + 152) = v8._object;
    sub_100044090(v5, v7);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v9;
    void *v9 = v0;
    v9[1] = sub_100177CBC;
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v12 = *(void *)(v0 + 56);
    return sub_10007D1A0(v8._countAndFlagsBits, (uint64_t)v8._object, v12, v10, v11);
  }
  else
  {
    unint64_t v14 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    os_log_type_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100177CBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 80);
  if (v0) {
    id v4 = sub_100177F5C;
  }
  else {
    id v4 = sub_100177E14;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100177E14()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100177EC4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100177F5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100178000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  uint64_t v8 = *(void *)(type metadata accessor for ShareInvitationRecord() - 8);
  v6[16] = v8;
  v6[17] = *(void *)(v8 + 64);
  v6[18] = swift_task_alloc();
  return _swift_task_switch(sub_100178110, a4, 0);
}

uint64_t sub_100178110()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + ((v4 + 32) & ~v4);
    uint64_t v26 = (v4 + 40) & ~v4;
    uint64_t v27 = *(void *)(v3 + 72);
    unint64_t v25 = (*(void *)(v0 + 136) + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v28 = v2;
      uint64_t v6 = *(void *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 112);
      uint64_t v7 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 96);
      uint64_t v10 = *(void *)(v0 + 104);
      uint64_t v11 = *(void *)(v0 + 88);
      sub_100179A80(v5, v6);
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = 0;
      unint64_t v13 = v12 + 2;
      v12[3] = 0;
      v12[4] = v11;
      sub_100179C04(v6, (uint64_t)v12 + v26);
      *(void *)((char *)v12 + v25) = v9;
      *(void *)((char *)v12 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v10;
      uint64_t v14 = type metadata accessor for TaskPriority();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v7, 1, 1, v14);
      sub_100179D88(v7, v8);
      LODWORD(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14);
      swift_retain();
      swift_retain();
      uint64_t v16 = *(void *)(v0 + 112);
      if (v7 == 1)
      {
        sub_100179DF0(*(void *)(v0 + 112));
        if (!*v13) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
        if (!*v13)
        {
LABEL_8:
          uint64_t v17 = 0;
          uint64_t v19 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v20 = **(void **)(v0 + 72);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = &unk_1003F0BF8;
      *(void *)(v21 + 24) = v12;
      uint64_t v22 = v19 | v17;
      if (v19 | v17)
      {
        uint64_t v22 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v17;
        *(void *)(v0 + 40) = v19;
      }
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v22;
      *(void *)(v0 + 64) = v20;
      swift_task_create();
      swift_release();
      v5 += v27;
      uint64_t v2 = v28 - 1;
      if (v28 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_100178450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[4] = a3;
  return _swift_task_switch(sub_100178474, 0, 0);
}

uint64_t sub_100178474()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ShareInvitationRecord() + 20));
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100178530;
  uint64_t v6 = *(void *)(v0 + 40);
  return sub_100174DC4(v6, v4, v3);
}

uint64_t sub_100178530()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100178AE4;
  }
  else {
    uint64_t v2 = sub_100178644;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100178644()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100178734;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000025, 0x8000000100376600, sub_100179F34, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100178734()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100178864;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100178850;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100178850()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100178864()
{
  uint64_t v10 = v0;
  swift_task_dealloc();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD00000000000001FLL, 0x8000000100376720, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failure: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100178AE4()
{
  uint64_t v10 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD00000000000001FLL, 0x8000000100376720, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s failure: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100178D5C(uint64_t a1)
{
  return sub_100228D44(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100178D68()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100178F24, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100178F24()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100178F90(uint64_t a1)
{
  return sub_100229284(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100178F98()
{
  unint64_t result = qword_1003F0B68;
  if (!qword_1003F0B68)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F0B68);
  }
  return result;
}

uint64_t sub_100178FD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100178FE8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1001790F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100018CD0;
  return sub_10017643C(a1, v7, v8, v9, v10, v11);
}

void *sub_10017923C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100044014(&qword_1003F0B98);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10004727C(&qword_1003F0BA0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10004727C(&qword_1003F0BA8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

Swift::Int sub_100179554(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100044014(&qword_1003F0B88);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void *sub_100179698(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessagingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100044014(&qword_1003F0BB0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10004727C(&qword_1003F0BB8, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10004727C(&qword_1003F0BC0, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        Swift::Int result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1001799B0(uint64_t a1)
{
  return sub_100228888(a1, v1);
}

uint64_t sub_1001799B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_100018CD0;
  return sub_100178000(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_100179A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareInvitationRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100179AE4()
{
  uint64_t v1 = (int *)(type metadata accessor for ShareInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_100044090(*(void *)(v6 + v1[7]), *(void *)(v6 + v1[7] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100179C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareInvitationRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100179C68()
{
  uint64_t v2 = *(void *)(type metadata accessor for ShareInvitationRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  v7[5] = v5;
  v7[6] = v6;
  v7[4] = v4;
  return _swift_task_switch(sub_100178474, 0, 0);
}

uint64_t sub_100179D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100179DF0(uint64_t a1)
{
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003F3C10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100179E50()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100179E88()
{
  uint64_t v2 = *(int **)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10004A274;
  uint64_t v4 = (uint64_t (*)(int *))((char *)&dword_1003F0CC8 + dword_1003F0CC8);
  return v4(v2);
}

uint64_t sub_100179F38()
{
  uint64_t v0 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v44 = *(void *)(v0 - 8);
  uint64_t v45 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PlaceMark();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v40 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = Fence.label.getter();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v19) {
    return Fence.label.getter();
  }
  uint64_t v42 = v7;
  uint64_t v43 = v10;
  uint64_t v41 = v2;
  Fence.placemark.getter();
  uint64_t v20 = PlaceMark.streetAddress.getter();
  unint64_t v23 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v15, v3);
  if (v23)
  {
    uint64_t v25 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v25) {
      return v20;
    }
    swift_bridgeObjectRelease();
  }
  Fence.placemark.getter();
  uint64_t v20 = PlaceMark.streetName.getter();
  unint64_t v27 = v26;
  v24(v13, v3);
  BOOL v28 = v43;
  if (v27)
  {
    uint64_t v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0) {
      uint64_t v29 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v29) {
      return v20;
    }
    swift_bridgeObjectRelease();
  }
  Fence.placemark.getter();
  uint64_t v20 = PlaceMark.locality.getter();
  unint64_t v31 = v30;
  v24(v28, v3);
  uint64_t v32 = v42;
  if (v31)
  {
    uint64_t v33 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0) {
      uint64_t v33 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v33) {
      return v20;
    }
    swift_bridgeObjectRelease();
  }
  Fence.placemark.getter();
  uint64_t v20 = PlaceMark.administrativeArea.getter();
  unint64_t v35 = v34;
  v24(v32, v3);
  uint64_t v37 = v44;
  uint64_t v36 = v45;
  uint64_t v38 = v41;
  if (!v35)
  {
LABEL_26:
    (*(void (**)(char *, void, uint64_t))(v37 + 104))(v38, enum case for LocalizationUtility.Table.default(_:), v36);
    uint64_t v20 = static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    return v20;
  }
  uint64_t v39 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0) {
    uint64_t v39 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v39)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  return v20;
}

uint64_t sub_10017A2E4(uint64_t a1)
{
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10017A5C0(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A520((uint64_t)v4, (uint64_t *)&unk_1003EE800);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v10 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v12 = [v10 localizedStringFromDate:isa dateStyle:0 timeStyle:1];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

void *sub_10017A4C4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    sub_100245DC8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v13 = v2;
      unint64_t v7 = v2[2];
      unint64_t v8 = v2[3];
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1)
      {
        sub_100245DC8(v8 > 1, v7 + 1, 1);
        uint64_t v2 = v13;
      }
      v4 += 2;
      uint64_t v11 = &type metadata for String;
      unint64_t v12 = sub_10005D368();
      *(void *)&long long v10 = v6;
      *((void *)&v10 + 1) = v5;
      v2[2] = v7 + 1;
      sub_100022CC0(&v10, (uint64_t)&v2[5 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10017A5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v17 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F0C48);
  uint64_t v8 = type metadata accessor for Calendar.Component();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100367F20;
  unint64_t v13 = v12 + v11;
  uint64_t v14 = *(void (**)(unint64_t, void, uint64_t))(v9 + 104);
  v14(v13, enum case for Calendar.Component.era(_:), v8);
  v14(v13 + v10, enum case for Calendar.Component.year(_:), v8);
  v14(v13 + 2 * v10, enum case for Calendar.Component.month(_:), v8);
  v14(v13 + 3 * v10, enum case for Calendar.Component.day(_:), v8);
  v14(v13 + 4 * v10, enum case for Calendar.Component.hour(_:), v8);
  v14(v13 + 5 * v10, enum case for Calendar.Component.minute(_:), v8);
  sub_10017923C(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  static Date.now.getter();
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  uint64_t result = Fence.TimeOfDay.hour.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    DateComponents.hour.setter();
    uint64_t result = Fence.TimeOfDay.minute.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      DateComponents.minute.setter();
      Calendar.date(from:)();
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v7, v17);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10017A938(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.Participant();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Destination();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  sub_100044014(&qword_1003F0380);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PersonHandle();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.ID();
  v2[19] = v7;
  v2[20] = *(void *)(v7 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence();
  v2[22] = v8;
  v2[23] = *(void *)(v8 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.TriggerPosition();
  v2[25] = v9;
  v2[26] = *(void *)(v9 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_10017AC60, 0, 0);
}

uint64_t sub_10017AC60()
{
  uint64_t v52 = v0;
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[4], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  uint64_t v5 = v0[26];
  uint64_t v6 = (id *)v0[27];
  uint64_t v7 = v0[25];
  if (v4 == enum case for Fence.TriggerPosition.inside(_:))
  {
    (*(void (**)(void, uint64_t))(v5 + 96))(v0[27], v7);

    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[3];
    uint64_t v10 = v0[23];
    uint64_t v9 = v0[24];
    uint64_t v11 = v0[22];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = v0[23];
    uint64_t v16 = v0[24];
    if (v15)
    {
      uint64_t v48 = v0[22];
      os_log_type_t type = v14;
      uint64_t v18 = v0[20];
      uint64_t v19 = v0[21];
      uint64_t v20 = v0[19];
      log = v13;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      Fence.id.getter();
      sub_1001820CC(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      v0[2] = sub_100037004(v22, v24, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v48);
      unint64_t v13 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "Invalid position inside for leaving fence with id %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v17 + 8))(v0[24], v0[22]);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(v5 + 8))(v0[27], v7);
  }
  uint64_t v25 = Fence.others.getter();
  if (*(void *)(v25 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[17] + 16))(v0[15], v25 + ((*(unsigned __int8 *)(v0[17] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[17] + 80)), v0[16]);
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 1;
  }
  uint64_t v27 = v0[16];
  uint64_t v28 = v0[17];
  uint64_t v29 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, v26, 1, v27);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
  {
    sub_10000A520(v0[15], &qword_1003F0380);
    uint64_t v31 = v0[10];
    uint64_t v30 = v0[11];
    uint64_t v33 = v0[8];
    uint64_t v32 = v0[9];
    uint64_t v34 = v0[6];
    uint64_t v47 = v0[7];
    uint64_t v35 = v0[5];
    Fence.findee.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v31, enum case for Fence.Participant.me(_:), v33);
    static Fence.Participant.== infix(_:_:)();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v36(v31, v33);
    v36(v30, v33);
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v47, enum case for LocalizationUtility.Table.default(_:), v35);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v47, v35);
    sub_100044014(&qword_1003ECA98);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1003677A0;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v38 = sub_10005D368();
    *(void *)(v37 + 64) = v38;
    *(void *)(v37 + 32) = 0;
    *(void *)(v37 + 40) = 0xE000000000000000;
    uint64_t v39 = sub_100179F38();
    *(void *)(v37 + 96) = &type metadata for String;
    *(void *)(v37 + 104) = v38;
    *(void *)(v37 + 72) = v39;
    *(void *)(v37 + 80) = v40;
    uint64_t v41 = String.init(format:arguments:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v44(v41, v43);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[17] + 32))(v0[18], v0[15], v0[16]);
    sub_10019C390();
    uint64_t v46 = (void *)swift_task_alloc();
    v0[28] = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_10017B2F4;
    return sub_10032E0BC(0);
  }
}

uint64_t sub_10017B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *(void *)(*v2 + 96);
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_10017B454, 0, 0);
}

uint64_t sub_10017B454()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  uint64_t v18 = v0[29];
  uint64_t v19 = v0[30];
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v17 = v0[7];
  uint64_t v6 = v0[5];
  Fence.findee.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for Fence.Participant.me(_:), v4);
  static Fence.Participant.== infix(_:_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v2, v4);
  v7(v1, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v17, enum case for LocalizationUtility.Table.default(_:), v6);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v17, v6);
  sub_100044014(&qword_1003ECA98);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1003677A0;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v9 = sub_10005D368();
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 32) = v18;
  *(void *)(v8 + 40) = v19;
  uint64_t v10 = sub_100179F38();
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = v11;
  uint64_t v12 = String.init(format:arguments:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v15 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v15(v12, v14);
}

uint64_t sub_10017B6F8(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.Participant();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Destination();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  sub_100044014(&qword_1003F0380);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PersonHandle();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.ID();
  v2[19] = v7;
  v2[20] = *(void *)(v7 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence();
  v2[22] = v8;
  v2[23] = *(void *)(v8 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.TriggerPosition();
  v2[25] = v9;
  v2[26] = *(void *)(v9 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_10017BA20, 0, 0);
}

uint64_t sub_10017BA20()
{
  uint64_t v52 = v0;
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[4], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  uint64_t v5 = v0[26];
  uint64_t v6 = (id *)v0[27];
  uint64_t v7 = v0[25];
  if (v4 == enum case for Fence.TriggerPosition.outside(_:))
  {
    (*(void (**)(void, uint64_t))(v5 + 96))(v0[27], v7);

    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[3];
    uint64_t v10 = v0[23];
    uint64_t v9 = v0[24];
    uint64_t v11 = v0[22];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = v0[23];
    uint64_t v16 = v0[24];
    if (v15)
    {
      uint64_t v48 = v0[22];
      os_log_type_t type = v14;
      uint64_t v18 = v0[20];
      uint64_t v19 = v0[21];
      uint64_t v20 = v0[19];
      log = v13;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      Fence.id.getter();
      sub_1001820CC(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      v0[2] = sub_100037004(v22, v24, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v48);
      uint64_t v13 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "Invalid position outside for arriving fence with id %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v17 + 8))(v0[24], v0[22]);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(v5 + 8))(v0[27], v7);
  }
  uint64_t v25 = Fence.others.getter();
  if (*(void *)(v25 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[17] + 16))(v0[15], v25 + ((*(unsigned __int8 *)(v0[17] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[17] + 80)), v0[16]);
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 1;
  }
  uint64_t v27 = v0[16];
  uint64_t v28 = v0[17];
  uint64_t v29 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, v26, 1, v27);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
  {
    sub_10000A520(v0[15], &qword_1003F0380);
    uint64_t v31 = v0[10];
    uint64_t v30 = v0[11];
    uint64_t v33 = v0[8];
    uint64_t v32 = v0[9];
    uint64_t v34 = v0[6];
    uint64_t v47 = v0[7];
    uint64_t v35 = v0[5];
    Fence.findee.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v31, enum case for Fence.Participant.me(_:), v33);
    static Fence.Participant.== infix(_:_:)();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v36(v31, v33);
    v36(v30, v33);
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v47, enum case for LocalizationUtility.Table.default(_:), v35);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v47, v35);
    sub_100044014(&qword_1003ECA98);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1003677A0;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v38 = sub_10005D368();
    *(void *)(v37 + 64) = v38;
    *(void *)(v37 + 32) = 0;
    *(void *)(v37 + 40) = 0xE000000000000000;
    uint64_t v39 = sub_100179F38();
    *(void *)(v37 + 96) = &type metadata for String;
    *(void *)(v37 + 104) = v38;
    *(void *)(v37 + 72) = v39;
    *(void *)(v37 + 80) = v40;
    uint64_t v41 = String.init(format:arguments:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v44(v41, v43);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[17] + 32))(v0[18], v0[15], v0[16]);
    sub_10019C390();
    uint64_t v46 = (void *)swift_task_alloc();
    v0[28] = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_10017C0B4;
    return sub_10032E0BC(0);
  }
}

uint64_t sub_10017C0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *(void *)(*v2 + 96);
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_10017C214, 0, 0);
}

uint64_t sub_10017C214()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  uint64_t v18 = v0[29];
  uint64_t v19 = v0[30];
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v17 = v0[7];
  uint64_t v6 = v0[5];
  Fence.findee.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for Fence.Participant.me(_:), v4);
  static Fence.Participant.== infix(_:_:)();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v2, v4);
  v7(v1, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v17, enum case for LocalizationUtility.Table.default(_:), v6);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v17, v6);
  sub_100044014(&qword_1003ECA98);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1003677A0;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v9 = sub_10005D368();
  *(void *)(v8 + 64) = v9;
  *(void *)(v8 + 32) = v18;
  *(void *)(v8 + 40) = v19;
  uint64_t v10 = sub_100179F38();
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v9;
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = v11;
  uint64_t v12 = String.init(format:arguments:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v15 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v15(v12, v14);
}

uint64_t sub_10017C4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = sub_100044014(&qword_1003F0C30);
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalizationUtility.Table();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.Participant();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  sub_100044014(&qword_1003F0C38);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.TriggerPosition();
  v4[19] = v7;
  v4[20] = *(void *)(v7 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = sub_100044014(&qword_1003F0C40);
  v4[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  v4[25] = v8;
  v4[26] = *(void *)(v8 - 8);
  v4[27] = swift_task_alloc();
  sub_100044014(&qword_1003F0380);
  v4[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PersonHandle();
  v4[29] = v9;
  v4[30] = *(void *)(v9 - 8);
  v4[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.DaysOfWeek();
  v4[32] = v10;
  v4[33] = *(void *)(v10 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.TimeOfDay();
  v4[36] = v11;
  v4[37] = *(void *)(v11 - 8);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Date();
  v4[40] = v12;
  v4[41] = *(void *)(v12 - 8);
  v4[42] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Calendar();
  v4[43] = v13;
  v4[44] = *(void *)(v13 - 8);
  v4[45] = swift_task_alloc();
  return _swift_task_switch(sub_10017C980, 0, 0);
}

uint64_t sub_10017C980()
{
  uint64_t v267 = v0;
  uint64_t v1 = v0 + 3;
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[41];
  uint64_t v4 = v0[42];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v1[34];
  uint64_t v232 = v1[33];
  uint64_t v241 = v1[32];
  uint64_t v8 = v1[30];
  uint64_t v252 = v1[29];
  static Calendar.current.getter();
  uint64_t v9 = self;
  sub_10019A184(v4);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  uint64_t v11 = 1;
  id v12 = [v9 localizedStringFromDate:isa dateStyle:0 timeStyle:1];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v1[43] = v13;
  v1[44] = v15;
  Fence.Schedule.start.getter();
  v1[45] = sub_10017A2E4(v2);
  v1[46] = v16;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v1[47] = v17;
  v1[48] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v6, v232);
  Fence.Schedule.end.getter();
  v1[49] = sub_10017A2E4(v2);
  v1[50] = v18;
  v17(v6, v232);
  Fence.Schedule.daysOfWeek.getter();
  v1[51] = sub_10005C18C(v2);
  v1[52] = v19;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v1[53] = v20;
  v1[54] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v241, v252);
  v1[55] = sub_100179F38();
  v1[56] = v21;
  uint64_t v22 = Fence.others.getter();
  if (*(void *)(v22 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v265[30] + 16))(v265[28], v22 + ((*(unsigned __int8 *)(v265[30] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v265[30] + 80)), v265[29]);
    uint64_t v11 = 0;
  }
  uint64_t v23 = v265[29];
  uint64_t v24 = v265[30];
  uint64_t v25 = v265[28];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v25, v11, 1, v23);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v23) == 1)
  {
    sub_10000A520(v265[28], &qword_1003F0380);
    uint64_t v26 = v265[24];
    uint64_t v27 = v265[19];
    uint64_t v28 = v265[20];
    uint64_t v29 = v265[6];
    uint64_t v30 = v26 + *(int *)(v265[23] + 48);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    v31(v26, v265[5], v27);
    sub_10018112C(v29, v30);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 88);
    int v33 = v32(v26, v27);
    int v34 = enum case for Fence.TriggerPosition.inside(_:);
    uint64_t v262 = v30;
    if (v33 == enum case for Fence.TriggerPosition.inside(_:))
    {
      v253 = v32;
      int v242 = v33;
      uint64_t v233 = v265[24];
      uint64_t v35 = v265[20];
      uint64_t v36 = (id *)v265[21];
      uint64_t v37 = v265[19];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31((uint64_t)v36, v233, v37);
      unint64_t v38 = *(void (**)(id *, uint64_t))(v35 + 96);
      v38(v36, v37);

      uint64_t v39 = v265;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v30, 1, v37) != 1)
      {
        uint64_t v40 = (void (*)(uint64_t, uint64_t))v38;
        uint64_t v42 = (id **)(v265 + 17);
        uint64_t v41 = v265[17];
        uint64_t v43 = v265[19];
        sub_10018112C(v262, v41);
        int v44 = v253(v41, v43);
        if (v44 == v242)
        {
          uint64_t v45 = v265[19];
          uint64_t v46 = v265[17];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40(v46, v45);
LABEL_8:
          uint64_t v47 = v39[24];
          uint64_t v49 = v39[19];
          uint64_t v48 = v39[20];

          sub_10000A520(v262, &qword_1003F0C38);
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
          if (qword_1003EC060 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_100044058(v50, (uint64_t)qword_10040B770);
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v51, v52))
          {
            uint64_t v53 = (uint8_t *)swift_slowAlloc();
            uint64_t v266 = swift_slowAlloc();
            *(_DWORD *)uint64_t v53 = 136446210;
            *(v1 - 1) = sub_100037004(0xD00000000000004DLL, 0x80000001003769F0, &v266);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "%{public}s Trying to trigger scheduled fence with same placement twice", v53, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }

          uint64_t v55 = v39[44];
          uint64_t v54 = v39[45];
          uint64_t v56 = v39[43];
          uint64_t v57 = type metadata accessor for GenericError();
          sub_1001820CC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
          swift_allocError();
          *uint64_t v58 = 0xD00000000000003BLL;
          v58[1] = 0x80000001003769B0;
          (*(void (**)(void *, void, uint64_t))(*(void *)(v57 - 8) + 104))(v58, enum case for GenericError.error(_:), v57);
          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v59 = (uint64_t (*)(void))v39[1];
          return v59();
        }
        if (v44 == enum case for Fence.TriggerPosition.outside(_:))
        {
          uint64_t v105 = v265[16];
          uint64_t v106 = (id *)v265[17];
          uint64_t v107 = v265[15];
          uint64_t v108 = v265[12];
          uint64_t v109 = v265[13];
          uint64_t v110 = v265[10];
          uint64_t v258 = v265[11];
          uint64_t v247 = v265[9];
          v40((uint64_t)v106, v265[19]);

          Fence.findee.getter();
          (*(void (**)(uint64_t, void, uint64_t))(v109 + 104))(v107, enum case for Fence.Participant.me(_:), v108);
          static Fence.Participant.== infix(_:_:)();
          uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
          v111(v107, v108);
          v111(v105, v108);
          (*(void (**)(uint64_t, void, uint64_t))(v110 + 104))(v258, enum case for LocalizationUtility.Table.default(_:), v247);
          uint64_t v112 = (void (**)(uint64_t, uint64_t))(v110 + 8);
          uint64_t v113 = v265[58];
          uint64_t v114 = v265[59];
          uint64_t v213 = v265[46];
          uint64_t v221 = v265[47];
          uint64_t v96 = v265[44];
          uint64_t v228 = v265[43];
          uint64_t v236 = v265[45];
          uint64_t v257 = v265[24];
          uint64_t v97 = v265[20];
          uint64_t v246 = v265[19];
          uint64_t v115 = v265[11];
          uint64_t v116 = v265[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*v112)(v115, v116);
          sub_100044014(&qword_1003ECA98);
          uint64_t v175 = swift_allocObject();
          *(_OWORD *)(v175 + 16) = xmmword_1003677C0;
          *(void *)(v175 + 56) = &type metadata for String;
          unint64_t v176 = sub_10005D368();
          *(void *)(v175 + 32) = 0;
          *(void *)(v175 + 40) = 0xE000000000000000;
          *(void *)(v175 + 96) = &type metadata for String;
          *(void *)(v175 + 104) = v176;
          *(void *)(v175 + 64) = v176;
          *(void *)(v175 + 72) = v113;
          *(void *)(v175 + 80) = v114;
          *(void *)(v175 + 136) = &type metadata for String;
          *(void *)(v175 + 144) = v176;
          *(void *)(v175 + 112) = v213;
          *(void *)(v175 + 120) = v221;
          uint64_t v177 = String.init(format:arguments:)();
          uint64_t v197 = v178;
          uint64_t v200 = v177;
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        (*(void (**)(void, void))(v265[20] + 8))(v265[17], v265[19]);
      }
      uint64_t v143 = v265[15];
      uint64_t v144 = v265[16];
      uint64_t v145 = v265[12];
      uint64_t v146 = v265[13];
      uint64_t v148 = v265[10];
      uint64_t v147 = v265[11];
      uint64_t v149 = v265[9];
      Fence.findee.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v146 + 104))(v143, enum case for Fence.Participant.me(_:), v145);
      static Fence.Participant.== infix(_:_:)();
      uint64_t v150 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
      v150(v143, v145);
      v150(v144, v145);
      (*(void (**)(uint64_t, void, uint64_t))(v148 + 104))(v147, enum case for LocalizationUtility.Table.default(_:), v149);
      uint64_t v151 = (void (**)(uint64_t, uint64_t))(v148 + 8);
      uint64_t v152 = v265[58];
      uint64_t v209 = v265[59];
      uint64_t v216 = v265[46];
      uint64_t v153 = v265[44];
      uint64_t v240 = v265[45];
      uint64_t v225 = v265[47];
      uint64_t v231 = v265[43];
      uint64_t v261 = v265[24];
      uint64_t v154 = v265[20];
      uint64_t v251 = v265[19];
      uint64_t v155 = v265[11];
      uint64_t v156 = v265[9];
      static LocalizationUtility.localizedString(key:table:)();
      (*v151)(v155, v156);
      sub_100044014(&qword_1003ECA98);
      uint64_t v157 = swift_allocObject();
      *(_OWORD *)(v157 + 16) = xmmword_1003677C0;
      *(void *)(v157 + 56) = &type metadata for String;
      unint64_t v158 = sub_10005D368();
      *(void *)(v157 + 32) = 0;
      *(void *)(v157 + 40) = 0xE000000000000000;
      *(void *)(v157 + 96) = &type metadata for String;
      *(void *)(v157 + 104) = v158;
      *(void *)(v157 + 64) = v158;
      *(void *)(v157 + 72) = v152;
      *(void *)(v157 + 80) = v209;
      *(void *)(v157 + 136) = &type metadata for String;
      *(void *)(v157 + 144) = v158;
      *(void *)(v157 + 112) = v216;
      *(void *)(v157 + 120) = v225;
      uint64_t v159 = String.init(format:arguments:)();
      uint64_t v197 = v160;
      uint64_t v200 = v159;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v240, v231);
      sub_10000A520(v262, &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v261, v251);
LABEL_46:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v192 = (uint64_t (*)(uint64_t, uint64_t))v265[1];
      return v192(v200, v197);
    }
    if (v33 == enum case for Fence.TriggerPosition.outside(_:))
    {
      uint64_t v254 = v32;
      int v243 = v33;
      uint64_t v62 = (id *)v265[22];
      uint64_t v63 = v265[19];
      uint64_t v64 = v265[20];
      v31((uint64_t)v62, v265[24], v63);
      double v65 = *(void (**)(id *, uint64_t))(v64 + 96);
      v65(v62, v63);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v30, 1, v63) == 1)
      {
        swift_bridgeObjectRelease();
        double v66 = v265;
      }
      else
      {
        uint64_t v117 = v265[18];
        uint64_t v118 = v265[19];
        uint64_t v42 = (id **)(v265 + 18);
        sub_10018112C(v30, v117);
        int v119 = v254(v117, v118);
        double v66 = v265;
        if (v119 == v34)
        {
          uint64_t v120 = (id *)v265[18];
          uint64_t v222 = v265[19];
          uint64_t v237 = v265[16];
          uint64_t v121 = v265[15];
          uint64_t v123 = v265[12];
          uint64_t v122 = v265[13];
          uint64_t v124 = v265[10];
          uint64_t v259 = v265[11];
          uint64_t v248 = v265[9];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v65(v120, v222);

          Fence.findee.getter();
          (*(void (**)(uint64_t, void, uint64_t))(v122 + 104))(v121, enum case for Fence.Participant.me(_:), v123);
          static Fence.Participant.== infix(_:_:)();
          uint64_t v125 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
          v125(v121, v123);
          v125(v237, v123);
          (*(void (**)(uint64_t, void, uint64_t))(v124 + 104))(v259, enum case for LocalizationUtility.Table.default(_:), v248);
          uint64_t v126 = v265[58];
          uint64_t v127 = v265[59];
          uint64_t v214 = v265[46];
          uint64_t v223 = v265[47];
          uint64_t v128 = v265[44];
          uint64_t v229 = v265[43];
          uint64_t v238 = v265[45];
          uint64_t v260 = v265[24];
          uint64_t v129 = v265[20];
          uint64_t v249 = v265[19];
          uint64_t v130 = v265[11];
          uint64_t v131 = v265[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v130, v131);
          sub_100044014(&qword_1003ECA98);
          uint64_t v179 = swift_allocObject();
          *(_OWORD *)(v179 + 16) = xmmword_1003677C0;
          *(void *)(v179 + 56) = &type metadata for String;
          unint64_t v180 = sub_10005D368();
          *(void *)(v179 + 32) = 0;
          *(void *)(v179 + 40) = 0xE000000000000000;
          *(void *)(v179 + 96) = &type metadata for String;
          *(void *)(v179 + 104) = v180;
          *(void *)(v179 + 64) = v180;
          *(void *)(v179 + 72) = v126;
          *(void *)(v179 + 80) = v127;
          *(void *)(v179 + 136) = &type metadata for String;
          *(void *)(v179 + 144) = v180;
          *(void *)(v179 + 112) = v214;
          *(void *)(v179 + 120) = v223;
          uint64_t v181 = String.init(format:arguments:)();
          uint64_t v197 = v182;
          uint64_t v200 = v181;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v238, v229);
          sub_10000A520(v262, &qword_1003F0C38);
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v260, v249);
          goto LABEL_46;
        }
        if (v119 == v243)
        {
          uint64_t v161 = v265[19];
          uint64_t v162 = (id *)v265[18];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v163 = v162;
          uint64_t v39 = v265;
          v65(v163, v161);
          goto LABEL_8;
        }
        if (v119 != enum case for Fence.TriggerPosition.undetermined(_:))
        {
          (*(void (**)(void, void))(v265[20] + 8))(v265[18], v265[19]);
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v184 = v265[19];
        uint64_t v183 = v265[20];
        uint64_t v185 = v265[18];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v185, v184);
      }
      v206 = (void (*)(uint64_t, uint64_t))v66[50];
      double v67 = v66;
      double v70 = v66 + 38;
      uint64_t v69 = v66[38];
      uint64_t v68 = v70[1];
      uint64_t v71 = v67[36];
      uint64_t v226 = v67[34];
      uint64_t v244 = v67[33];
      uint64_t v255 = v67[32];
      uint64_t v72 = v67[24];
      uint64_t v74 = v67[19];
      uint64_t v73 = v67[20];
      uint64_t v75 = v67[13];
      uint64_t v234 = v67[12];
      uint64_t v76 = (unsigned char *)v67[8];
      uint64_t v218 = v67[7];
      uint64_t v202 = v67[14];
      sub_10000A520(v262, &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      Fence.Schedule.start.getter();
      Fence.Schedule.end.getter();
      char v77 = static Fence.TimeOfDay.== infix(_:_:)();
      v206(v69, v71);
      v206(v68, v71);
      Fence.findee.getter();
      Fence.Schedule.daysOfWeek.getter();
      uint64_t v78 = &v76[*(int *)(v218 + 48)];
      uint64_t v79 = &v76[*(int *)(v218 + 64)];
      unsigned char *v76 = v77 & 1;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v75 + 32))(v78, v202, v234);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v244 + 32))(v79, v226, v255);
      int v80 = (*(uint64_t (**)(unsigned char *, uint64_t))(v75 + 88))(v78, v234);
      if (v80 == enum case for Fence.Participant.me(_:))
      {
        uint64_t v81 = (void (*)(uint64_t, uint64_t))v67[56];
        v263 = v79;
        if (v77)
        {
          uint64_t v82 = v67[35];
          uint64_t v83 = v67[32];
          uint64_t v84 = v67[10];
          uint64_t v85 = v67[11];
          uint64_t v86 = v67[9];
          swift_bridgeObjectRelease();
          static Fence.DaysOfWeek.all.getter();
          sub_1001820CC(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
          char v87 = dispatch thunk of static Equatable.== infix(_:_:)();
          v81(v82, v83);
          (*(void (**)(uint64_t, void, uint64_t))(v84 + 104))(v85, enum case for LocalizationUtility.Table.default(_:), v86);
          uint64_t v203 = v67[59];
          uint64_t v196 = v67[58];
          uint64_t v256 = (void (*)(unsigned char *, uint64_t))v67[56];
          uint64_t v207 = v67[54];
          uint64_t v211 = v67[55];
          uint64_t v199 = v67[49];
          uint64_t v194 = v67[48];
          uint64_t v88 = v67[44];
          uint64_t v219 = v67[43];
          uint64_t v227 = v67[45];
          uint64_t v89 = v67[13];
          uint64_t v235 = v67[32];
          uint64_t v245 = v67[12];
          uint64_t v90 = v67[11];
          uint64_t v91 = v67[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v90, v91);
          sub_100044014(&qword_1003ECA98);
          if (v87)
          {
            uint64_t v92 = swift_allocObject();
            *(_OWORD *)(v92 + 16) = xmmword_100367790;
            *(void *)(v92 + 56) = &type metadata for String;
            unint64_t v93 = sub_10005D368();
            *(void *)(v92 + 32) = 0;
            *(void *)(v92 + 40) = 0xE000000000000000;
            *(void *)(v92 + 96) = &type metadata for String;
            *(void *)(v92 + 104) = v93;
            *(void *)(v92 + 64) = v93;
            *(void *)(v92 + 72) = v196;
            *(void *)(v92 + 80) = v203;
            *(void *)(v92 + 136) = &type metadata for String;
            *(void *)(v92 + 144) = v93;
            *(void *)(v92 + 112) = v194;
            *(void *)(v92 + 120) = v199;
            *(void *)(v92 + 176) = &type metadata for String;
            *(void *)(v92 + 184) = v93;
            *(void *)(v92 + 152) = v207;
            *(void *)(v92 + 160) = v211;
          }
          else
          {
            uint64_t v186 = swift_allocObject();
            *(_OWORD *)(v186 + 16) = xmmword_100367790;
            *(void *)(v186 + 56) = &type metadata for String;
            unint64_t v187 = sub_10005D368();
            *(void *)(v186 + 32) = 0;
            *(void *)(v186 + 40) = 0xE000000000000000;
            *(void *)(v186 + 96) = &type metadata for String;
            *(void *)(v186 + 104) = v187;
            *(void *)(v186 + 64) = v187;
            *(void *)(v186 + 72) = v196;
            *(void *)(v186 + 80) = v203;
            *(void *)(v186 + 136) = &type metadata for String;
            *(void *)(v186 + 144) = v187;
            *(void *)(v186 + 112) = v194;
            *(void *)(v186 + 120) = v199;
            *(void *)(v186 + 176) = &type metadata for String;
            *(void *)(v186 + 184) = v187;
            *(void *)(v186 + 152) = v207;
            *(void *)(v186 + 160) = v211;
          }
        }
        else
        {
          uint64_t v164 = v67[35];
          uint64_t v165 = v67[32];
          uint64_t v166 = v67[10];
          uint64_t v167 = v67[11];
          uint64_t v168 = v67[9];
          static Fence.DaysOfWeek.all.getter();
          sub_1001820CC(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
          char v169 = dispatch thunk of static Equatable.== infix(_:_:)();
          v81(v164, v165);
          (*(void (**)(uint64_t, void, uint64_t))(v166 + 104))(v167, enum case for LocalizationUtility.Table.default(_:), v168);
          uint64_t v198 = v67[59];
          uint64_t v193 = v67[58];
          uint64_t v256 = (void (*)(unsigned char *, uint64_t))v67[56];
          uint64_t v210 = v67[54];
          uint64_t v217 = v67[55];
          uint64_t v201 = v67[52];
          uint64_t v205 = v67[53];
          uint64_t v170 = v67[48];
          uint64_t v195 = v67[49];
          uint64_t v88 = v67[44];
          uint64_t v219 = v67[43];
          uint64_t v227 = v67[45];
          uint64_t v89 = v67[13];
          uint64_t v235 = v67[32];
          uint64_t v245 = v67[12];
          uint64_t v171 = v67[11];
          uint64_t v172 = v67[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v171, v172);
          sub_100044014(&qword_1003ECA98);
          if (v169)
          {
            uint64_t v173 = swift_allocObject();
            *(_OWORD *)(v173 + 16) = xmmword_1003677B0;
            *(void *)(v173 + 56) = &type metadata for String;
            unint64_t v174 = sub_10005D368();
            *(void *)(v173 + 32) = 0;
            *(void *)(v173 + 40) = 0xE000000000000000;
            *(void *)(v173 + 96) = &type metadata for String;
            *(void *)(v173 + 104) = v174;
            *(void *)(v173 + 64) = v174;
            *(void *)(v173 + 72) = v193;
            *(void *)(v173 + 80) = v198;
            *(void *)(v173 + 136) = &type metadata for String;
            *(void *)(v173 + 144) = v174;
            *(void *)(v173 + 112) = v170;
            *(void *)(v173 + 120) = v195;
            *(void *)(v173 + 176) = &type metadata for String;
            *(void *)(v173 + 184) = v174;
            *(void *)(v173 + 152) = v201;
            *(void *)(v173 + 160) = v205;
            *(void *)(v173 + 216) = &type metadata for String;
            *(void *)(v173 + 224) = v174;
            *(void *)(v173 + 192) = v210;
            *(void *)(v173 + 200) = v217;
          }
          else
          {
            uint64_t v188 = swift_allocObject();
            *(_OWORD *)(v188 + 16) = xmmword_1003677B0;
            *(void *)(v188 + 56) = &type metadata for String;
            unint64_t v189 = sub_10005D368();
            *(void *)(v188 + 32) = 0;
            *(void *)(v188 + 40) = 0xE000000000000000;
            *(void *)(v188 + 96) = &type metadata for String;
            *(void *)(v188 + 104) = v189;
            *(void *)(v188 + 64) = v189;
            *(void *)(v188 + 72) = v193;
            *(void *)(v188 + 80) = v198;
            *(void *)(v188 + 136) = &type metadata for String;
            *(void *)(v188 + 144) = v189;
            *(void *)(v188 + 112) = v170;
            *(void *)(v188 + 120) = v195;
            *(void *)(v188 + 176) = &type metadata for String;
            *(void *)(v188 + 184) = v189;
            *(void *)(v188 + 152) = v201;
            *(void *)(v188 + 160) = v205;
            *(void *)(v188 + 216) = &type metadata for String;
            *(void *)(v188 + 224) = v189;
            *(void *)(v188 + 192) = v210;
            *(void *)(v188 + 200) = v217;
          }
        }
        uint64_t v190 = String.init(format:arguments:)();
        uint64_t v197 = v191;
        uint64_t v200 = v190;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v227, v219);
        v256(v263, v235);
        (*(void (**)(unsigned char *, uint64_t))(v89 + 8))(v78, v245);
        goto LABEL_46;
      }
      if (v80 == enum case for Fence.Participant.other(_:))
      {
        uint64_t v132 = v265[58];
        uint64_t v208 = v265[59];
        uint64_t v133 = v265[48];
        uint64_t v204 = v265[49];
        uint64_t v134 = v265[44];
        uint64_t v215 = v265[43];
        uint64_t v224 = v265[45];
        uint64_t v230 = v265[32];
        uint64_t v135 = v265[13];
        uint64_t v239 = v265[12];
        v250 = (void (*)(unsigned char *, uint64_t))v265[56];
        uint64_t v136 = v265[10];
        uint64_t v137 = v265[11];
        v264 = v79;
        uint64_t v138 = v265[9];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v136 + 104))(v137, enum case for LocalizationUtility.Table.default(_:), v138);
        static LocalizationUtility.localizedString(key:table:)();
        (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v137, v138);
        sub_100044014(&qword_1003ECA98);
        uint64_t v139 = swift_allocObject();
        *(_OWORD *)(v139 + 16) = xmmword_1003677C0;
        *(void *)(v139 + 56) = &type metadata for String;
        unint64_t v140 = sub_10005D368();
        *(void *)(v139 + 32) = 0;
        *(void *)(v139 + 40) = 0xE000000000000000;
        *(void *)(v139 + 96) = &type metadata for String;
        *(void *)(v139 + 104) = v140;
        *(void *)(v139 + 64) = v140;
        *(void *)(v139 + 72) = v132;
        *(void *)(v139 + 80) = v208;
        *(void *)(v139 + 136) = &type metadata for String;
        *(void *)(v139 + 144) = v140;
        *(void *)(v139 + 112) = v133;
        *(void *)(v139 + 120) = v204;
        uint64_t v141 = String.init(format:arguments:)();
        uint64_t v197 = v142;
        uint64_t v200 = v141;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v224, v215);
        v250(v264, v230);
        (*(void (**)(unsigned char *, uint64_t))(v135 + 8))(v78, v239);
        goto LABEL_46;
      }
    }
    else if (v33 == enum case for Fence.TriggerPosition.undetermined(_:))
    {
      uint64_t v94 = v265[58];
      uint64_t v95 = v265[48];
      uint64_t v212 = v265[49];
      uint64_t v220 = v265[59];
      uint64_t v96 = v265[44];
      uint64_t v228 = v265[43];
      uint64_t v236 = v265[45];
      uint64_t v257 = v265[24];
      uint64_t v97 = v265[20];
      uint64_t v246 = v265[19];
      uint64_t v99 = v265[10];
      uint64_t v98 = v265[11];
      uint64_t v100 = v265[9];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v98, enum case for LocalizationUtility.Table.default(_:), v100);
      static LocalizationUtility.localizedString(key:table:)();
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
      sub_100044014(&qword_1003ECA98);
      uint64_t v101 = swift_allocObject();
      *(_OWORD *)(v101 + 16) = xmmword_1003677C0;
      *(void *)(v101 + 56) = &type metadata for String;
      unint64_t v102 = sub_10005D368();
      *(void *)(v101 + 32) = 0;
      *(void *)(v101 + 40) = 0xE000000000000000;
      *(void *)(v101 + 96) = &type metadata for String;
      *(void *)(v101 + 104) = v102;
      *(void *)(v101 + 64) = v102;
      *(void *)(v101 + 72) = v94;
      *(void *)(v101 + 80) = v220;
      *(void *)(v101 + 136) = &type metadata for String;
      *(void *)(v101 + 144) = v102;
      *(void *)(v101 + 112) = v95;
      *(void *)(v101 + 120) = v212;
      uint64_t v103 = String.init(format:arguments:)();
      uint64_t v197 = v104;
      uint64_t v200 = v103;
      swift_bridgeObjectRelease();
LABEL_40:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v236, v228);
      sub_10000A520(v262, &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v257, v246);
      goto LABEL_46;
    }
    return _assertionFailure(_:_:file:line:flags:)();
  }
  (*(void (**)(void, void, void))(v265[30] + 32))(v265[31], v265[28], v265[29]);
  sub_10019C390();
  uint64_t v61 = (void *)swift_task_alloc();
  v265[60] = v61;
  *uint64_t v61 = v265;
  v61[1] = sub_10017E570;
  return sub_10032E0BC(0);
}

uint64_t sub_10017E570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 216);
  uint64_t v5 = *(void *)(*v2 + 208);
  uint64_t v6 = *(void *)(*v2 + 200);
  *(void *)(v3 + 488) = a1;
  *(void *)(v3 + 496) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_10017E6D0, 0, 0);
}

uint64_t sub_10017E6D0()
{
  uint64_t v219 = v0;
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  uint64_t v2 = v0[61];
  uint64_t v1 = v0[62];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[6];
  uint64_t v7 = v3 + *(int *)(v0[23] + 48);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v0[5], v4);
  sub_10018112C(v6, v7);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  int v10 = v9(v3, v4);
  int v11 = enum case for Fence.TriggerPosition.inside(_:);
  uint64_t v216 = v7;
  if (v10 == enum case for Fence.TriggerPosition.inside(_:))
  {
    uint64_t v200 = v9;
    int v191 = v10;
    uint64_t v210 = v2;
    uint64_t v213 = v1;
    uint64_t v186 = v0[24];
    uint64_t v12 = v0[20];
    uint64_t v13 = (id *)v0[21];
    uint64_t v14 = v0[19];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8((uint64_t)v13, v186, v14);
    uint64_t v15 = *(void (**)(id *, uint64_t))(v12 + 96);
    v15(v13, v14);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v7, 1, v14) != 1)
    {
      uint64_t v16 = v7;
      uint64_t v17 = (void (*)(uint64_t, uint64_t))v15;
      uint64_t v19 = (id **)(v0 + 17);
      uint64_t v18 = v0[17];
      uint64_t v20 = v0[19];
      sub_10018112C(v16, v18);
      int v21 = v200(v18, v20);
      if (v21 == v191)
      {
        uint64_t v22 = v0[19];
        uint64_t v23 = v0[17];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v23;
LABEL_5:
        v17(v24, v22);
        uint64_t v25 = v0[24];
        uint64_t v26 = v0[19];
        uint64_t v27 = v0[20];

        sub_10000A520(v216, &qword_1003F0C38);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
        if (qword_1003EC060 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100044058(v28, (uint64_t)qword_10040B770);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v218 = swift_slowAlloc();
          *(_DWORD *)uint64_t v31 = 136446210;
          v0[2] = sub_100037004(0xD00000000000004DLL, 0x80000001003769F0, &v218);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s Trying to trigger scheduled fence with same placement twice", v31, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v33 = v0[44];
        uint64_t v32 = v0[45];
        uint64_t v34 = v0[43];
        uint64_t v35 = type metadata accessor for GenericError();
        sub_1001820CC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
        swift_allocError();
        *uint64_t v36 = 0xD00000000000003BLL;
        v36[1] = 0x80000001003769B0;
        (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v36, enum case for GenericError.error(_:), v35);
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v37 = (uint64_t (*)(void))v0[1];
        return v37();
      }
      if (v21 == enum case for Fence.TriggerPosition.outside(_:))
      {
        uint64_t v75 = v0[16];
        uint64_t v76 = (id *)v0[17];
        uint64_t v77 = v0[15];
        uint64_t v79 = v0[12];
        uint64_t v78 = v0[13];
        uint64_t v80 = v0[10];
        uint64_t v196 = v0[9];
        uint64_t v205 = v0[11];
        v17((uint64_t)v76, v0[19]);

        Fence.findee.getter();
        (*(void (**)(uint64_t, void, uint64_t))(v78 + 104))(v77, enum case for Fence.Participant.me(_:), v79);
        static Fence.Participant.== infix(_:_:)();
        uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
        v81(v77, v79);
        v81(v75, v79);
        (*(void (**)(uint64_t, void, uint64_t))(v80 + 104))(v205, enum case for LocalizationUtility.Table.default(_:), v196);
        uint64_t v82 = (void (**)(uint64_t, uint64_t))(v80 + 8);
        uint64_t v84 = v0[58];
        uint64_t v83 = v0[59];
        uint64_t v168 = v0[46];
        uint64_t v176 = v0[47];
        uint64_t v85 = v0[44];
        uint64_t v182 = v0[43];
        uint64_t v189 = v0[45];
        uint64_t v86 = v0[20];
        uint64_t v197 = v0[19];
        uint64_t v206 = v0[24];
        uint64_t v87 = v0[11];
        uint64_t v88 = v0[9];
LABEL_28:
        static LocalizationUtility.localizedString(key:table:)();
        (*v82)(v87, v88);
        sub_100044014(&qword_1003ECA98);
        uint64_t v122 = swift_allocObject();
        *(_OWORD *)(v122 + 16) = xmmword_1003677C0;
        *(void *)(v122 + 56) = &type metadata for String;
        unint64_t v123 = sub_10005D368();
        *(void *)(v122 + 32) = v210;
        *(void *)(v122 + 40) = v213;
        *(void *)(v122 + 96) = &type metadata for String;
        *(void *)(v122 + 104) = v123;
        *(void *)(v122 + 64) = v123;
        *(void *)(v122 + 72) = v84;
        *(void *)(v122 + 80) = v83;
        *(void *)(v122 + 136) = &type metadata for String;
        *(void *)(v122 + 144) = v123;
        *(void *)(v122 + 112) = v168;
        *(void *)(v122 + 120) = v176;
        uint64_t v124 = String.init(format:arguments:)();
        uint64_t v155 = v125;
        uint64_t v162 = v124;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v189, v182);
        sub_10000A520(v216, &qword_1003F0C38);
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v206, v197);
        goto LABEL_36;
      }
      (*(void (**)(void, void))(v0[20] + 8))(v0[17], v0[19]);
    }
    uint64_t v115 = v0[15];
    uint64_t v114 = v0[16];
    uint64_t v116 = v0[12];
    uint64_t v117 = v0[13];
    uint64_t v119 = v0[10];
    uint64_t v118 = v0[11];
    uint64_t v120 = v0[9];
    Fence.findee.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v117 + 104))(v115, enum case for Fence.Participant.me(_:), v116);
    static Fence.Participant.== infix(_:_:)();
    uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v121(v115, v116);
    v121(v114, v116);
    (*(void (**)(uint64_t, void, uint64_t))(v119 + 104))(v118, enum case for LocalizationUtility.Table.default(_:), v120);
    uint64_t v82 = (void (**)(uint64_t, uint64_t))(v119 + 8);
    uint64_t v84 = v0[58];
    uint64_t v83 = v0[59];
    uint64_t v168 = v0[46];
    uint64_t v176 = v0[47];
    uint64_t v85 = v0[44];
    uint64_t v182 = v0[43];
    uint64_t v189 = v0[45];
    uint64_t v86 = v0[20];
    uint64_t v197 = v0[19];
    uint64_t v206 = v0[24];
    uint64_t v87 = v0[11];
    uint64_t v88 = v0[9];
    goto LABEL_28;
  }
  if (v10 == enum case for Fence.TriggerPosition.outside(_:))
  {
    uint64_t v201 = v9;
    int v192 = v10;
    uint64_t v211 = v2;
    uint64_t v214 = v1;
    uint64_t v39 = (id *)v0[22];
    uint64_t v41 = v0[19];
    uint64_t v40 = v0[20];
    v8((uint64_t)v39, v0[24], v41);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v40 + 96);
    v17((uint64_t)v39, v41);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v7, 1, v41) == 1)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      uint64_t v159 = (void (*)(uint64_t, uint64_t))v0[50];
      uint64_t v43 = v0[38];
      uint64_t v42 = v0[39];
      uint64_t v44 = v0[36];
      uint64_t v193 = v0[33];
      uint64_t v202 = v0[32];
      uint64_t v45 = v0[24];
      uint64_t v47 = v0[19];
      uint64_t v46 = v0[20];
      uint64_t v48 = v0[13];
      uint64_t v179 = v0[34];
      uint64_t v187 = v0[12];
      uint64_t v49 = (unsigned char *)v0[8];
      uint64_t v173 = v0[7];
      uint64_t v152 = v0[14];
      sub_10000A520(v216, &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      Fence.Schedule.start.getter();
      Fence.Schedule.end.getter();
      char v50 = static Fence.TimeOfDay.== infix(_:_:)();
      v159(v43, v44);
      v159(v42, v44);
      Fence.findee.getter();
      Fence.Schedule.daysOfWeek.getter();
      uint64_t v51 = &v49[*(int *)(v173 + 48)];
      os_log_type_t v52 = &v49[*(int *)(v173 + 64)];
      *uint64_t v49 = v50 & 1;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v48 + 32))(v51, v152, v187);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v193 + 32))(v52, v179, v202);
      int v53 = (*(uint64_t (**)(unsigned char *, uint64_t))(v48 + 88))(v51, v187);
      if (v53 == enum case for Fence.Participant.me(_:))
      {
        uint64_t v217 = v51;
        uint64_t v54 = v52;
        uint64_t v55 = (void (*)(uint64_t, uint64_t))v0[56];
        uint64_t v56 = v0[35];
        uint64_t v57 = v0[32];
        uint64_t v58 = v0[10];
        uint64_t v59 = v0[11];
        uint64_t v60 = v0[9];
        if (v50)
        {
          swift_bridgeObjectRelease();
          static Fence.DaysOfWeek.all.getter();
          sub_1001820CC(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
          dispatch thunk of static Equatable.== infix(_:_:)();
          v55(v56, v57);
          (*(void (**)(uint64_t, void, uint64_t))(v58 + 104))(v59, enum case for LocalizationUtility.Table.default(_:), v60);
          uint64_t v166 = v0[55];
          uint64_t v153 = v0[59];
          uint64_t v160 = v0[54];
          uint64_t v147 = v0[58];
          uint64_t v149 = v0[49];
          uint64_t v145 = v0[48];
          uint64_t v61 = v0[44];
          uint64_t v174 = v0[43];
          uint64_t v180 = v0[45];
          uint64_t v188 = v0[32];
          uint64_t v62 = v0[13];
          uint64_t v194 = v0[12];
          uint64_t v203 = (void (*)(unsigned char *, uint64_t))v0[56];
          uint64_t v63 = v0[11];
          uint64_t v64 = v0[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v63, v64);
          sub_100044014(&qword_1003ECA98);
          uint64_t v137 = swift_allocObject();
          *(_OWORD *)(v137 + 16) = xmmword_100367790;
          *(void *)(v137 + 56) = &type metadata for String;
          unint64_t v138 = sub_10005D368();
          *(void *)(v137 + 32) = v211;
          *(void *)(v137 + 40) = v214;
          *(void *)(v137 + 96) = &type metadata for String;
          *(void *)(v137 + 104) = v138;
          *(void *)(v137 + 64) = v138;
          *(void *)(v137 + 72) = v147;
          *(void *)(v137 + 80) = v153;
          *(void *)(v137 + 136) = &type metadata for String;
          *(void *)(v137 + 144) = v138;
          *(void *)(v137 + 112) = v145;
          *(void *)(v137 + 120) = v149;
          *(void *)(v137 + 176) = &type metadata for String;
          *(void *)(v137 + 184) = v138;
          *(void *)(v137 + 152) = v160;
          *(void *)(v137 + 160) = v166;
        }
        else
        {
          static Fence.DaysOfWeek.all.getter();
          sub_1001820CC(&qword_1003ECAC0, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
          dispatch thunk of static Equatable.== infix(_:_:)();
          v55(v56, v57);
          (*(void (**)(uint64_t, void, uint64_t))(v58 + 104))(v59, enum case for LocalizationUtility.Table.default(_:), v60);
          uint64_t v203 = (void (*)(unsigned char *, uint64_t))v0[56];
          uint64_t v165 = v0[54];
          uint64_t v172 = v0[55];
          uint64_t v158 = v0[53];
          uint64_t v148 = v0[59];
          uint64_t v151 = v0[52];
          uint64_t v127 = v0[48];
          uint64_t v144 = v0[58];
          uint64_t v146 = v0[49];
          uint64_t v61 = v0[44];
          uint64_t v174 = v0[43];
          uint64_t v180 = v0[45];
          uint64_t v62 = v0[13];
          uint64_t v188 = v0[32];
          uint64_t v194 = v0[12];
          uint64_t v128 = v0[11];
          uint64_t v129 = v0[9];
          static LocalizationUtility.localizedString(key:table:)();
          (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v128, v129);
          sub_100044014(&qword_1003ECA98);
          uint64_t v139 = swift_allocObject();
          *(_OWORD *)(v139 + 16) = xmmword_1003677B0;
          *(void *)(v139 + 56) = &type metadata for String;
          unint64_t v140 = sub_10005D368();
          *(void *)(v139 + 32) = v211;
          *(void *)(v139 + 40) = v214;
          *(void *)(v139 + 96) = &type metadata for String;
          *(void *)(v139 + 104) = v140;
          *(void *)(v139 + 64) = v140;
          *(void *)(v139 + 72) = v144;
          *(void *)(v139 + 80) = v148;
          *(void *)(v139 + 136) = &type metadata for String;
          *(void *)(v139 + 144) = v140;
          *(void *)(v139 + 112) = v127;
          *(void *)(v139 + 120) = v146;
          *(void *)(v139 + 176) = &type metadata for String;
          *(void *)(v139 + 184) = v140;
          *(void *)(v139 + 152) = v151;
          *(void *)(v139 + 160) = v158;
          *(void *)(v139 + 216) = &type metadata for String;
          *(void *)(v139 + 224) = v140;
          *(void *)(v139 + 192) = v165;
          *(void *)(v139 + 200) = v172;
        }
        uint64_t v141 = String.init(format:arguments:)();
        uint64_t v155 = v142;
        uint64_t v162 = v141;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v180, v174);
        v203(v54, v188);
        (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v217, v194);
        goto LABEL_36;
      }
      if (v53 == enum case for Fence.Participant.other(_:))
      {
        uint64_t v157 = v0[58];
        uint64_t v164 = v0[59];
        uint64_t v209 = (void (*)(unsigned char *, uint64_t))v0[56];
        uint64_t v104 = v0[48];
        uint64_t v150 = v0[49];
        uint64_t v105 = v0[44];
        uint64_t v171 = v0[43];
        uint64_t v178 = v0[45];
        uint64_t v106 = v0[13];
        uint64_t v185 = v0[32];
        uint64_t v190 = v0[12];
        uint64_t v108 = v0[10];
        uint64_t v107 = v0[11];
        uint64_t v109 = v0[9];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v108 + 104))(v107, enum case for LocalizationUtility.Table.default(_:), v109);
        static LocalizationUtility.localizedString(key:table:)();
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v109);
        sub_100044014(&qword_1003ECA98);
        uint64_t v110 = swift_allocObject();
        *(_OWORD *)(v110 + 16) = xmmword_1003677C0;
        *(void *)(v110 + 56) = &type metadata for String;
        unint64_t v111 = sub_10005D368();
        *(void *)(v110 + 32) = v211;
        *(void *)(v110 + 40) = v214;
        *(void *)(v110 + 96) = &type metadata for String;
        *(void *)(v110 + 104) = v111;
        *(void *)(v110 + 64) = v111;
        *(void *)(v110 + 72) = v157;
        *(void *)(v110 + 80) = v164;
        *(void *)(v110 + 136) = &type metadata for String;
        *(void *)(v110 + 144) = v111;
        *(void *)(v110 + 112) = v104;
        *(void *)(v110 + 120) = v150;
        uint64_t v112 = String.init(format:arguments:)();
        uint64_t v155 = v113;
        uint64_t v162 = v112;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v178, v171);
        v209(v52, v185);
        (*(void (**)(unsigned char *, uint64_t))(v106 + 8))(v51, v190);
        goto LABEL_36;
      }
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v89 = v0[18];
    uint64_t v90 = v0[19];
    uint64_t v19 = (id **)(v0 + 18);
    sub_10018112C(v7, v89);
    int v91 = v201(v89, v90);
    if (v91 != v11)
    {
      if (v91 == v192)
      {
        uint64_t v126 = v0[18];
        uint64_t v22 = v0[19];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v126;
        goto LABEL_5;
      }
      if (v91 != enum case for Fence.TriggerPosition.undetermined(_:))
      {
        (*(void (**)(void, void))(v0[20] + 8))(v0[18], v0[19]);
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v134 = v0[19];
      uint64_t v135 = v0[20];
      uint64_t v136 = v0[18];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v134);
      goto LABEL_15;
    }
    uint64_t v92 = (id *)v0[18];
    uint64_t v93 = v0[15];
    uint64_t v183 = v0[16];
    uint64_t v94 = v0[12];
    uint64_t v95 = v0[13];
    uint64_t v96 = v0[10];
    uint64_t v198 = v0[9];
    uint64_t v207 = v0[11];
    uint64_t v169 = v0[19];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17((uint64_t)v92, v169);

    Fence.findee.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v95 + 104))(v93, enum case for Fence.Participant.me(_:), v94);
    static Fence.Participant.== infix(_:_:)();
    uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v97(v93, v94);
    v97(v183, v94);
    (*(void (**)(uint64_t, void, uint64_t))(v96 + 104))(v207, enum case for LocalizationUtility.Table.default(_:), v198);
    uint64_t v98 = (void (**)(uint64_t, uint64_t))(v96 + 8);
    uint64_t v99 = v0[58];
    uint64_t v156 = v0[59];
    uint64_t v163 = v0[46];
    uint64_t v100 = v0[44];
    uint64_t v184 = v0[45];
    uint64_t v170 = v0[47];
    uint64_t v177 = v0[43];
    uint64_t v101 = v0[20];
    uint64_t v199 = v0[19];
    uint64_t v208 = v0[24];
    uint64_t v102 = v0[11];
    uint64_t v103 = v0[9];
    static LocalizationUtility.localizedString(key:table:)();
    (*v98)(v102, v103);
    sub_100044014(&qword_1003ECA98);
    uint64_t v130 = swift_allocObject();
    *(_OWORD *)(v130 + 16) = xmmword_1003677C0;
    *(void *)(v130 + 56) = &type metadata for String;
    unint64_t v131 = sub_10005D368();
    *(void *)(v130 + 32) = v211;
    *(void *)(v130 + 40) = v214;
    *(void *)(v130 + 96) = &type metadata for String;
    *(void *)(v130 + 104) = v131;
    *(void *)(v130 + 64) = v131;
    *(void *)(v130 + 72) = v99;
    *(void *)(v130 + 80) = v156;
    *(void *)(v130 + 136) = &type metadata for String;
    *(void *)(v130 + 144) = v131;
    *(void *)(v130 + 112) = v163;
    *(void *)(v130 + 120) = v170;
    uint64_t v132 = String.init(format:arguments:)();
    uint64_t v155 = v133;
    uint64_t v162 = v132;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v184, v177);
    sub_10000A520(v216, &qword_1003F0C38);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v208, v199);
  }
  else
  {
    if (v10 != enum case for Fence.TriggerPosition.undetermined(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v167 = v0[49];
    uint64_t v175 = v0[59];
    uint64_t v154 = v0[48];
    uint64_t v161 = v0[58];
    uint64_t v65 = v0[44];
    uint64_t v195 = v0[45];
    uint64_t v181 = v0[43];
    uint64_t v212 = v0[24];
    uint64_t v66 = v0[20];
    uint64_t v204 = v0[19];
    uint64_t v215 = v1;
    uint64_t v67 = v2;
    uint64_t v69 = v0[10];
    uint64_t v68 = v0[11];
    uint64_t v70 = v0[9];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v69 + 104))(v68, enum case for LocalizationUtility.Table.default(_:), v70);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    sub_100044014(&qword_1003ECA98);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_1003677C0;
    *(void *)(v71 + 56) = &type metadata for String;
    unint64_t v72 = sub_10005D368();
    *(void *)(v71 + 32) = v67;
    *(void *)(v71 + 40) = v215;
    *(void *)(v71 + 96) = &type metadata for String;
    *(void *)(v71 + 104) = v72;
    *(void *)(v71 + 64) = v72;
    *(void *)(v71 + 72) = v161;
    *(void *)(v71 + 80) = v175;
    *(void *)(v71 + 136) = &type metadata for String;
    *(void *)(v71 + 144) = v72;
    *(void *)(v71 + 112) = v154;
    *(void *)(v71 + 120) = v167;
    uint64_t v73 = String.init(format:arguments:)();
    uint64_t v155 = v74;
    uint64_t v162 = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v195, v181);
    sub_10000A520(v7, &qword_1003F0C38);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v212, v204);
  }
LABEL_36:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v143(v162, v155);
}

uint64_t sub_10017FDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for Fence.Schedule();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.ID();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.TriggerPosition();
  v3[11] = v6;
  v3[12] = *(void *)(v6 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Variant();
  v3[15] = v7;
  v3[16] = *(void *)(v7 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_10017FFD4, 0, 0);
}

uint64_t sub_10017FFD4()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  Fence.variant.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for Fence.Variant.oneTime(_:))
  {
    uint64_t v6 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v7 = v0 + 20;
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[16];
  }
  else
  {
    if (v4 != enum case for Fence.Variant.recurring(_:))
    {
      if (v4 == enum case for Fence.Variant.scheduled(_:))
      {
        uint64_t v33 = v0[18];
        uint64_t v34 = v0[15];
        uint64_t v35 = v0[16];
        uint64_t v37 = v0[6];
        uint64_t v36 = v0[7];
        uint64_t v38 = v0[5];
        (*(void (**)(uint64_t, void, uint64_t))(v35 + 16))(v33, v0[21], v34);
        (*(void (**)(uint64_t, uint64_t))(v35 + 96))(v33, v34);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v36, v33, v38);
        uint64_t v39 = (void *)swift_task_alloc();
        v0[24] = v39;
        *uint64_t v39 = v0;
        v39[1] = sub_100180DC8;
        uint64_t v40 = v0[7];
        uint64_t v41 = v0[3];
        uint64_t v42 = v0[4];
        uint64_t v43 = v0[2];
        return sub_10017C4B8(v43, v40, v41, v42);
      }
LABEL_24:
      uint64_t v65 = v0[21];
      uint64_t v49 = v0[16];
      uint64_t v50 = v0[17];
      uint64_t v51 = v0[15];
      uint64_t v52 = type metadata accessor for GenericError();
      sub_1001820CC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
      swift_allocError();
      uint64_t v54 = v53;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      Fence.variant.getter();
      sub_1001820CC(&qword_1003F0C10, (void (*)(uint64_t))&type metadata accessor for Fence.Variant);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = v56;
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v58(v50, v51);
      v59._countAndFlagsBits = v55;
      v59._object = v57;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      *uint64_t v54 = 0xD00000000000001BLL;
      v54[1] = 0x8000000100376740;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v52 - 8) + 104))(v54, enum case for GenericError.error(_:), v52);
      swift_willThrow();
      v58(v65, v51);
      goto LABEL_25;
    }
    uint64_t v7 = v0 + 19;
    uint64_t v6 = v0[19];
    uint64_t v5 = v0[21];
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[16];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 96))(v6, v8);
  uint64_t v10 = type metadata accessor for Fence.Trigger();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v6, v10);
  if (v12 == enum case for Fence.Trigger.arriving(_:))
  {
    uint64_t v14 = v0[12];
    uint64_t v13 = v0[13];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[3];
    (*(void (**)(void, void))(v0[16] + 8))(v0[21], v0[15]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15);
    if (v17 != enum case for Fence.TriggerPosition.inside(_:) && v17 != enum case for Fence.TriggerPosition.outside(_:))
    {
      if (v17 == enum case for Fence.TriggerPosition.undetermined(_:))
      {
        uint64_t v18 = v0[10];
        uint64_t v20 = v0[8];
        uint64_t v19 = v0[9];
        (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
        uint64_t v21 = type metadata accessor for GenericError();
        sub_1001820CC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
        swift_allocError();
        uint64_t v23 = v22;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease();
        unint64_t v24 = 0xD00000000000002BLL;
        uint64_t v25 = "Arriving fences must have a valid location ";
LABEL_15:
        unint64_t v66 = v24;
        unint64_t v67 = (unint64_t)(v25 - 32) | 0x8000000000000000;
        Fence.id.getter();
        sub_1001820CC(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
        v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
        *uint64_t v23 = v66;
        v23[1] = v67;
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for GenericError.error(_:), v21);
        swift_willThrow();
LABEL_25:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v60 = (uint64_t (*)(void))v0[1];
        return v60();
      }
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v45 = (id *)v0[13];
    (*(void (**)(id *, void))(v0[12] + 96))(v45, v0[11]);

    uint64_t v46 = (void *)swift_task_alloc();
    v0[23] = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_100180BAC;
    uint64_t v48 = v0[2];
    uint64_t v47 = v0[3];
    return sub_10017B6F8(v48, v47);
  }
  if (v12 != enum case for Fence.Trigger.leaving(_:))
  {
    (*(void (**)(void, uint64_t))(v11 + 8))(*v7, v10);
    goto LABEL_24;
  }
  uint64_t v26 = v0[14];
  uint64_t v27 = v0[11];
  uint64_t v28 = v0[12];
  uint64_t v29 = v0[3];
  (*(void (**)(void, void))(v0[16] + 8))(v0[21], v0[15]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v29, v27);
  int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v26, v27);
  if (v30 != enum case for Fence.TriggerPosition.inside(_:) && v30 != enum case for Fence.TriggerPosition.outside(_:))
  {
    if (v30 == enum case for Fence.TriggerPosition.undetermined(_:))
    {
      uint64_t v19 = v0[9];
      uint64_t v18 = v0[10];
      uint64_t v20 = v0[8];
      (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
      uint64_t v21 = type metadata accessor for GenericError();
      sub_1001820CC((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
      swift_allocError();
      uint64_t v23 = v31;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      unint64_t v24 = 0xD00000000000002ALL;
      uint64_t v25 = "Leaving fences must have a valid location ";
      goto LABEL_15;
    }
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v61 = (id *)v0[14];
  (*(void (**)(id *, void))(v0[12] + 96))(v61, v0[11]);

  uint64_t v62 = (void *)swift_task_alloc();
  v0[22] = v62;
  *uint64_t v62 = v0;
  v62[1] = sub_100180990;
  uint64_t v64 = v0[2];
  uint64_t v63 = v0[3];
  return sub_10017A938(v64, v63);
}

uint64_t sub_100180990(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v3(a1, a2);
}

uint64_t sub_100180BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v3(a1, a2);
}

uint64_t sub_100180DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 200) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10018101C;
  }
  else
  {
    *(void *)(v6 + 208) = a2;
    *(void *)(v6 + 216) = a1;
    uint64_t v7 = sub_100180EFC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100180EFC()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = v0[26];
  uint64_t v7 = v0[27];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v5(v7, v4);
}

uint64_t sub_10018101C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10018112C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100181194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v132 = a2;
  uint64_t v4 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v118 = *(void *)(v4 - 8);
  uint64_t v119 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v116 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v117 = (char *)&v108 - v7;
  uint64_t v123 = type metadata accessor for Calendar();
  uint64_t v125 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v122 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Fence.TimeOfDay();
  uint64_t v9 = *(void *)(v115 - 8);
  uint64_t v10 = __chkstk_darwin(v115);
  uint64_t v114 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v108 - v12;
  uint64_t v14 = type metadata accessor for Fence.Schedule();
  uint64_t v124 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v120 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for Fence.Variant();
  uint64_t v133 = *(void *)(v130 - 8);
  uint64_t v16 = __chkstk_darwin(v130);
  uint64_t v113 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v108 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v108 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v108 - v24;
  uint64_t v26 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v131 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26);
  int v30 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = v30;
  uint64_t v129 = v27;
  if (a3)
  {
    uint64_t v31 = a3;
  }
  else
  {
    Swift::String v32 = *(void (**)(char *, void, uint64_t))(v131 + 104);
    uint64_t v121 = v14;
    uint64_t v33 = v20;
    uint64_t v34 = v131;
    uint64_t v35 = v13;
    uint64_t v36 = v9;
    uint64_t v37 = v28;
    v32(v30, enum case for LocalizationUtility.Table.default(_:), v28);
    uint64_t v132 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v39 = v38;
    uint64_t v40 = v34;
    uint64_t v20 = v33;
    uint64_t v41 = v37;
    uint64_t v9 = v36;
    uint64_t v13 = v35;
    uint64_t v14 = v121;
    uint64_t v31 = v39;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v41);
  }
  swift_bridgeObjectRetain();
  uint64_t v126 = sub_100179F38();
  uint64_t v127 = v42;
  Fence.variant.getter();
  uint64_t v43 = v130;
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v133 + 88))(v25, v130);
  if (v44 == enum case for Fence.Variant.oneTime(_:))
  {
    uint64_t v45 = v133;
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v23, v25, v43);
    (*(void (**)(char *, uint64_t))(v45 + 96))(v23, v43);
    uint64_t v46 = type metadata accessor for Fence.Trigger();
    uint64_t v47 = *(void *)(v46 - 8);
    int v48 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v23, v46);
    if (v48 == enum case for Fence.Trigger.arriving(_:) || v48 == enum case for Fence.Trigger.leaving(_:))
    {
LABEL_17:
      sub_100044014(&qword_1003EE3F0);
      uint64_t v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_1003677A0;
      *(void *)(v69 + 32) = v132;
      *(void *)(v69 + 40) = v31;
      uint64_t v73 = v127;
      *(void *)(v69 + 48) = v126;
      *(void *)(v69 + 56) = v73;
LABEL_24:
      (*(void (**)(char *, uint64_t))(v133 + 8))(v25, v43);
      uint64_t v103 = v131;
      uint64_t v105 = v128;
      uint64_t v104 = v129;
      (*(void (**)(char *, void, uint64_t))(v131 + 104))(v128, enum case for LocalizationUtility.Table.default(_:), v129);
      static LocalizationUtility.localizedString(key:table:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v104);
      sub_10017A4C4(v69);
      swift_bridgeObjectRelease();
      uint64_t v106 = String.init(format:arguments:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v106;
    }
    goto LABEL_26;
  }
  if (v44 == enum case for Fence.Variant.recurring(_:))
  {
    uint64_t v49 = v133;
    (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v20, v25, v43);
    (*(void (**)(char *, uint64_t))(v49 + 96))(v20, v43);
    uint64_t v46 = type metadata accessor for Fence.Trigger();
    uint64_t v47 = *(void *)(v46 - 8);
    int v50 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v20, v46);
    if (v50 == enum case for Fence.Trigger.arriving(_:) || v50 == enum case for Fence.Trigger.leaving(_:)) {
      goto LABEL_17;
    }
    uint64_t v23 = v20;
LABEL_26:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v46);
    goto LABEL_27;
  }
  uint64_t v109 = v9;
  uint64_t v112 = v31;
  if (v44 == enum case for Fence.Variant.scheduled(_:))
  {
    uint64_t v51 = v133;
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
    int v53 = v113;
    uint64_t v108 = v25;
    v52(v113, v25, v43);
    (*(void (**)(char *, uint64_t))(v51 + 96))(v53, v43);
    uint64_t v54 = v120;
    (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v120, v53, v14);
    Fence.Schedule.start.getter();
    uint64_t v55 = (uint64_t)v122;
    static Calendar.current.getter();
    uint64_t v110 = sub_10017A2E4(v55);
    uint64_t v111 = v56;
    uint64_t v57 = v125 + 8;
    uint64_t v113 = *(char **)(v125 + 8);
    ((void (*)(uint64_t, uint64_t))v113)(v55, v123);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v109 + 8);
    uint64_t v59 = v115;
    v58(v13, v115);
    Fence.Schedule.start.getter();
    uint64_t v60 = v114;
    uint64_t v61 = v54;
    Fence.Schedule.end.getter();
    LOBYTE(v54) = static Fence.TimeOfDay.== infix(_:_:)();
    v58(v60, v59);
    v58(v13, v59);
    uint64_t v121 = v14;
    uint64_t v125 = v57;
    if (v54)
    {
      uint64_t v62 = (void (*)(uint64_t, uint64_t))v113;
      uint64_t v63 = v117;
      Fence.Schedule.daysOfWeek.getter();
      uint64_t v64 = v116;
      static Fence.DaysOfWeek.all.getter();
      sub_1001820CC(&qword_1003F0C50, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
      uint64_t v65 = v119;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      int v66 = v135;
      int v67 = v134;
      uint64_t v68 = *(void (**)(char *, uint64_t))(v118 + 8);
      v68(v64, v65);
      v68(v63, v65);
      if (v66 == v67)
      {
        sub_100044014(&qword_1003EE3F0);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_1003677C0;
        uint64_t v70 = v112;
        *(void *)(v69 + 32) = v132;
        *(void *)(v69 + 40) = v70;
        uint64_t v71 = v127;
        *(void *)(v69 + 48) = v126;
        *(void *)(v69 + 56) = v71;
        uint64_t v72 = v111;
        *(void *)(v69 + 64) = v110;
        *(void *)(v69 + 72) = v72;
      }
      else
      {
        Fence.Schedule.daysOfWeek.getter();
        uint64_t v88 = (uint64_t)v122;
        static Calendar.current.getter();
        uint64_t v89 = sub_10005C18C(v88);
        uint64_t v91 = v90;
        v62(v88, v123);
        v68(v63, v65);
        sub_100044014(&qword_1003EE3F0);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_100367790;
        uint64_t v92 = v112;
        *(void *)(v69 + 32) = v132;
        *(void *)(v69 + 40) = v92;
        uint64_t v93 = v127;
        *(void *)(v69 + 48) = v126;
        *(void *)(v69 + 56) = v93;
        uint64_t v94 = v111;
        *(void *)(v69 + 64) = v110;
        *(void *)(v69 + 72) = v94;
        *(void *)(v69 + 80) = v89;
        *(void *)(v69 + 88) = v91;
      }
    }
    else
    {
      uint64_t v74 = v61;
      Fence.Schedule.end.getter();
      uint64_t v75 = (uint64_t)v122;
      static Calendar.current.getter();
      uint64_t v109 = sub_10017A2E4(v75);
      uint64_t v114 = v76;
      ((void (*)(uint64_t, uint64_t))v113)(v75, v123);
      v58(v13, v59);
      uint64_t v77 = v117;
      Fence.Schedule.daysOfWeek.getter();
      uint64_t v78 = v116;
      static Fence.DaysOfWeek.all.getter();
      sub_1001820CC(&qword_1003F0C50, (void (*)(uint64_t))&type metadata accessor for Fence.DaysOfWeek);
      uint64_t v79 = v119;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      int v80 = v137;
      int v81 = v136;
      uint64_t v82 = *(void (**)(char *, uint64_t))(v118 + 8);
      v82(v78, v79);
      v82(v77, v79);
      uint64_t v83 = (void (*)(uint64_t, uint64_t))v113;
      if (v80 == v81)
      {
        sub_100044014(&qword_1003EE3F0);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_100367790;
        uint64_t v84 = v112;
        *(void *)(v69 + 32) = v132;
        *(void *)(v69 + 40) = v84;
        uint64_t v85 = v127;
        *(void *)(v69 + 48) = v126;
        *(void *)(v69 + 56) = v85;
        uint64_t v86 = v111;
        *(void *)(v69 + 64) = v110;
        *(void *)(v69 + 72) = v86;
        uint64_t v87 = v114;
        *(void *)(v69 + 80) = v109;
        *(void *)(v69 + 88) = v87;
      }
      else
      {
        Fence.Schedule.daysOfWeek.getter();
        static Calendar.current.getter();
        uint64_t v95 = sub_10005C18C(v75);
        uint64_t v96 = v79;
        uint64_t v98 = v97;
        v83(v75, v123);
        v82(v77, v96);
        sub_100044014(&qword_1003EE3F0);
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_1003677B0;
        uint64_t v99 = v112;
        *(void *)(v69 + 32) = v132;
        *(void *)(v69 + 40) = v99;
        uint64_t v100 = v127;
        *(void *)(v69 + 48) = v126;
        *(void *)(v69 + 56) = v100;
        uint64_t v101 = v111;
        *(void *)(v69 + 64) = v110;
        *(void *)(v69 + 72) = v101;
        uint64_t v102 = v114;
        *(void *)(v69 + 80) = v109;
        *(void *)(v69 + 88) = v102;
        *(void *)(v69 + 96) = v95;
        *(void *)(v69 + 104) = v98;
      }
      uint64_t v61 = v74;
    }
    (*(void (**)(char *, uint64_t))(v124 + 8))(v61, v121);
    uint64_t v43 = v130;
    uint64_t v25 = v108;
    goto LABEL_24;
  }
LABEL_27:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001820CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100182114(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[6] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1001821AC;
  return sub_100190BF0(a2);
}

uint64_t sub_1001821AC()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[5];
    return _swift_task_switch(sub_100182450, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[8] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_10018231C;
    uint64_t v5 = v2[4];
    return sub_10019F294(v5);
  }
}

uint64_t sub_10018231C()
{
  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[5];
    return _swift_task_switch(sub_1001826C0, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100182450()
{
  uint64_t v10 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000030, 0x8000000100376EB0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1001826C0()
{
  uint64_t v10 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000030, 0x8000000100376EB0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100182930(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  sub_100044014(&qword_1003F0A30);
  v3[24] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.AcceptanceStatus();
  v3[25] = v4;
  v3[26] = *(void *)(v4 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = sub_100044014(&qword_1003F0C80);
  v3[30] = swift_task_alloc();
  sub_100044014(&qword_1003ECD30);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = sub_100044014(&qword_1003EEEB0);
  v3[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PersonHandle();
  v3[36] = v5;
  v3[37] = *(void *)(v5 - 8);
  v3[38] = swift_task_alloc();
  sub_100044014(&qword_1003F0380);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[41] = v6;
  v3[42] = *(void *)(v6 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Participant();
  v3[52] = v7;
  v3[53] = *(void *)(v7 - 8);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence();
  v3[56] = v8;
  v3[57] = *(void *)(v8 - 8);
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.MonitorRegion();
  v3[64] = v9;
  v3[65] = *(void *)(v9 - 8);
  v3[66] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.ID();
  v3[67] = v10;
  v3[68] = *(void *)(v10 - 8);
  v3[69] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v3[70] = swift_task_alloc();
  v3[71] = swift_task_alloc();
  v3[72] = swift_task_alloc();
  v3[73] = swift_task_alloc();
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v3[76] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100182ECC;
  return daemon.getter();
}

uint64_t sub_100182ECC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 616) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 624) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001830A8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001830A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  *(void *)(v3 + 632) = a1;
  *(void *)(v3 + 640) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100185C28;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1001831EC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001831EC()
{
  Fence.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[81] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100183294;
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[69];
  return sub_1001327B8(v2, v3);
}

uint64_t sub_100183294()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 552);
  uint64_t v3 = *(void *)(*v0 + 544);
  uint64_t v4 = *(void *)(*v0 + 536);
  uint64_t v5 = *(void *)(*v0 + 184);
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 656) = v6;
  *(void *)(v1 + 664) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v4);
  return _swift_task_switch(sub_100183418, v5, 0);
}

uint64_t sub_100183418()
{
  uint64_t v91 = v0;
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 512);
  Fence.region.getter();
  Fence.MonitorRegion.center.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (static Fence.isAllowed(at:)())
  {
    uint64_t v4 = *(void *)(v0 + 600);
    uint64_t v5 = *(void *)(v0 + 496);
    uint64_t v6 = *(void *)(v0 + 448);
    uint64_t v7 = *(void *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v10 = *(void *)(v0 + 416);
    uint64_t v11 = *(void *)(v0 + 424);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    *(void *)(v0 + 672) = v13;
    *(void *)(v0 + 680) = (v7 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    int v14 = v13(v4, 1, v6);
    *(_DWORD *)(v0 + 816) = v14;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    *(void *)(v0 + 688) = v15;
    *(void *)(v0 + 696) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v15(v5, v12, v6);
    Fence.finder.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v9, enum case for Fence.Participant.me(_:), v10);
    LOBYTE(v5) = static Fence.Participant.== infix(_:_:)();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v9, v10);
    v16(v8, v10);
    if (v5)
    {
      uint64_t v17 = *(void *)(v0 + 408);
      uint64_t v18 = *(void *)(v0 + 328);
      uint64_t v19 = *(void *)(v0 + 336);
      Fence.muteEndDate.getter();
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
      *(void *)(v0 + 704) = v20;
      *(void *)(v0 + 712) = (v19 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      int v21 = v20(v17, 1, v18);
      sub_10000A520(v17, (uint64_t *)&unk_1003EE800);
      if (v21 == 1 && v14 == 1)
      {
        uint64_t v22 = (void *)swift_task_alloc();
        *(void *)(v0 + 720) = v22;
        *uint64_t v22 = v0;
        v22[1] = sub_100184090;
        return sub_10012F108();
      }
    }
    uint64_t v39 = Fence.others.getter();
    if (*(void *)(v39 + 16))
    {
      (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 296) + 16))(*(void *)(v0 + 312), v39+ ((*(unsigned __int8 *)(*(void *)(v0 + 296) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 296) + 80)), *(void *)(v0 + 288));
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v40 = 1;
    }
    uint64_t v41 = *(void *)(v0 + 312);
    uint64_t v42 = *(void *)(v0 + 288);
    uint64_t v43 = *(void *)(v0 + 296);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v41, v40, 1, v42);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
    {
      sub_10000A520(*(void *)(v0 + 312), &qword_1003F0380);
LABEL_34:
      uint64_t v87 = (void *)swift_task_alloc();
      *(void *)(v0 + 752) = v87;
      *uint64_t v87 = v0;
      v87[1] = sub_100184D8C;
      uint64_t v88 = *(void *)(v0 + 496);
      uint64_t v89 = *(void *)(v0 + 480);
      return sub_10018B5D4(v89, v88);
    }
    int v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
    uint64_t v45 = *(void *)(v0 + 600);
    uint64_t v46 = *(void *)(v0 + 576);
    uint64_t v47 = *(void *)(v0 + 448);
    (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32))(*(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 288));
    sub_100013210(v45, v46, &qword_1003F0350);
    int v48 = v44(v46, 1, v47);
    uint64_t v49 = *(void *)(v0 + 576);
    if (v48 == 1)
    {
      uint64_t v50 = *(void *)(v0 + 384);
      uint64_t v51 = *(void *)(v0 + 328);
      uint64_t v52 = *(void *)(v0 + 336);
      sub_10000A520(*(void *)(v0 + 576), &qword_1003F0350);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, 1, 1, v51);
    }
    else
    {
      uint64_t v53 = *(void *)(v0 + 448);
      uint64_t v54 = *(void *)(v0 + 456);
      Fence.muteEndDate.getter();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v49, v53);
    }
    uint64_t v56 = *(void *)(v0 + 376);
    uint64_t v55 = *(void *)(v0 + 384);
    uint64_t v57 = *(void *)(v0 + 328);
    uint64_t v58 = *(void *)(v0 + 336);
    uint64_t v60 = *(void *)(v0 + 272);
    uint64_t v59 = *(void *)(v0 + 280);
    Fence.muteEndDate.getter();
    uint64_t v61 = v59 + *(int *)(v60 + 48);
    sub_100013210(v55, v59, (uint64_t *)&unk_1003EE800);
    sub_100013210(v56, v61, (uint64_t *)&unk_1003EE800);
    uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    int v63 = v62(v59, 1, v57);
    uint64_t v64 = *(void *)(v0 + 328);
    if (v63 == 1)
    {
      uint64_t v65 = *(void *)(v0 + 384);
      sub_10000A520(*(void *)(v0 + 376), (uint64_t *)&unk_1003EE800);
      sub_10000A520(v65, (uint64_t *)&unk_1003EE800);
      if (v62(v61, 1, v64) == 1)
      {
        sub_10000A520(*(void *)(v0 + 280), (uint64_t *)&unk_1003EE800);
LABEL_33:
        (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
        goto LABEL_34;
      }
    }
    else
    {
      sub_100013210(*(void *)(v0 + 280), *(void *)(v0 + 368), (uint64_t *)&unk_1003EE800);
      int v66 = v62(v61, 1, v64);
      uint64_t v68 = *(void *)(v0 + 376);
      uint64_t v67 = *(void *)(v0 + 384);
      uint64_t v69 = *(void *)(v0 + 368);
      if (v66 != 1)
      {
        uint64_t v82 = *(void *)(v0 + 336);
        uint64_t v81 = *(void *)(v0 + 344);
        uint64_t v83 = *(void *)(v0 + 328);
        uint64_t v84 = *(void *)(v0 + 280);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v81, v61, v83);
        sub_1000472C4(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
        char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
        v86(v81, v83);
        sub_10000A520(v68, (uint64_t *)&unk_1003EE800);
        sub_10000A520(v67, (uint64_t *)&unk_1003EE800);
        v86(v69, v83);
        sub_10000A520(v84, (uint64_t *)&unk_1003EE800);
        if (v85) {
          goto LABEL_33;
        }
        goto LABEL_29;
      }
      uint64_t v70 = *(void *)(v0 + 328);
      uint64_t v71 = *(void *)(v0 + 336);
      sub_10000A520(*(void *)(v0 + 376), (uint64_t *)&unk_1003EE800);
      sub_10000A520(v67, (uint64_t *)&unk_1003EE800);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
    }
    sub_10000A520(*(void *)(v0 + 280), &qword_1003EEEB0);
LABEL_29:
    uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
    uint64_t v73 = *(void *)(v0 + 568);
    uint64_t v74 = *(void *)(v0 + 496);
    uint64_t v75 = *(void *)(v0 + 448);
    uint64_t v76 = *(void *)(v0 + 456);
    Fence.muteEndDate.getter();
    v72(v73, v74, v75);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
    uint64_t v77 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v77;
    *uint64_t v77 = v0;
    v77[1] = sub_100184B64;
    uint64_t v78 = *(void *)(v0 + 568);
    uint64_t v79 = *(void *)(v0 + 360);
    uint64_t v80 = *(void *)(v0 + 304);
    return sub_10018AD68(v80, v79, v78);
  }
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677A0;
  *(unsigned char *)(inited + 32) = 0;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = 0xD000000000000011;
  *(void *)(inited + 48) = 0x8000000100376F20;
  *(unsigned char *)(inited + 80) = 11;
  *(void *)(inited + 112) = &type metadata for Bool;
  *(void *)(inited + 120) = &off_1003DDAA8;
  *(unsigned char *)(inited + 88) = 0;
  unint64_t v25 = sub_1001013D8(inited);
  uint64_t v26 = sub_100050320(2, v25);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v26, v28, v30);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100044058(v31, (uint64_t)qword_10040B770);
  Swift::String v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    v90[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446210;
    *(void *)(v0 + 144) = sub_100037004(0x6E65662865766173, 0xEC000000293A6563, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s: Fence's region is not allowed!", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v35 = *(void *)(v0 + 600);
  uint64_t v36 = type metadata accessor for GenericError();
  sub_1000472C4((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
  swift_allocError();
  *uint64_t v37 = 0xD00000000000001FLL;
  v37[1] = 0x8000000100376F40;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v37, enum case for GenericError.error(_:), v36);
  swift_willThrow();
  swift_release();
  sub_10000A520(v35, &qword_1003F0350);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_100184090(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001841A8, v2, 0);
}

uint64_t sub_1001841A8()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v6 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  uint64_t v115 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v116 = (void (**)(void, unint64_t, void))(v4 + 16);
  uint64_t v8 = (void (**)(void, void))(v3 + 8);
  uint64_t v112 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  uint64_t v110 = v4;
  uint64_t v111 = v2;
  uint64_t v108 = v8;
  uint64_t v109 = v5;
  uint64_t v114 = v0;
  while (1)
  {
    uint64_t v113 = v9;
    (*(void (**)(void, uint64_t, void))(v0 + 688))(*(void *)(v0 + 488), v5 + v9 * v112, *(void *)(v0 + 448));
    uint64_t v10 = Fence.others.getter();
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v9 = v113 + 1;
    (*v8)(*(void *)(v0 + 488), *(void *)(v0 + 448));
    if (v113 + 1 == v2)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      uint64_t v30 = 1;
      goto LABEL_22;
    }
  }
  unint64_t v117 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v12 = v10 + v117;
  swift_bridgeObjectRetain();
  uint64_t v118 = *(void *)(v4 + 72);
  while (1)
  {
    uint64_t v13 = PersonHandle.id.getter();
    uint64_t v15 = v14;
    uint64_t v16 = Fence.others.getter();
    if (*(void *)(v16 + 16))
    {
      (*v116)(*(void *)(v0 + 320), v16 + v117, *(void *)(v0 + 288));
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 1;
    }
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v19 = *(void *)(v0 + 288);
    (*v6)(v18, v17, 1, v19);
    swift_bridgeObjectRelease();
    int v20 = (*v7)(v18, 1, v19);
    uint64_t v21 = *(void *)(v0 + 320);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 320), &qword_1003F0380);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    uint64_t v22 = v0;
    uint64_t v23 = v7;
    uint64_t v24 = v6;
    uint64_t v25 = *(void *)(v22 + 288);
    uint64_t v26 = PersonHandle.id.getter();
    uint64_t v28 = v27;
    (*v115)(v21, v25);
    if (v13 == v26 && v15 == v28) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v24;
    uint64_t v7 = v23;
    uint64_t v0 = v114;
    if (v29) {
      goto LABEL_21;
    }
LABEL_6:
    v12 += v118;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v110;
      uint64_t v2 = v111;
      uint64_t v8 = v108;
      uint64_t v5 = v109;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v0 = v114;
LABEL_21:
  uint64_t v31 = *(void *)(v0 + 592);
  uint64_t v32 = *(void *)(v0 + 488);
  uint64_t v33 = *(void *)(v0 + 448);
  uint64_t v34 = *(void *)(v0 + 456);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v31, v32, v33);
  uint64_t v30 = 0;
LABEL_22:
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v36 = *(void *)(v0 + 592);
  uint64_t v37 = *(void *)(v0 + 584);
  uint64_t v38 = *(void *)(v0 + 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 456) + 56))(v36, v30, 1, v38);
  swift_bridgeObjectRelease();
  sub_100013210(v36, v37, &qword_1003F0350);
  if (v35(v37, 1, v38) == 1)
  {
    uint64_t v39 = *(void *)(v0 + 400);
    uint64_t v40 = *(void *)(v0 + 328);
    uint64_t v41 = *(void *)(v0 + 336);
    sub_10000A520(*(void *)(v0 + 584), &qword_1003F0350);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, 1, 1, v40);
    goto LABEL_25;
  }
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  uint64_t v43 = *(void *)(v0 + 584);
  uint64_t v44 = *(void *)(v0 + 448);
  uint64_t v45 = *(void *)(v0 + 456);
  uint64_t v46 = *(void *)(v0 + 400);
  uint64_t v47 = *(void *)(v0 + 328);
  Fence.muteEndDate.getter();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  if (v42(v46, 1, v47) == 1)
  {
LABEL_25:
    uint64_t v48 = *(void *)(v0 + 400);
    sub_10000A520(*(void *)(v0 + 592), &qword_1003F0350);
    uint64_t v49 = (uint64_t *)&unk_1003EE800;
    uint64_t v50 = v48;
  }
  else
  {
    uint64_t v51 = *(void *)(v0 + 592);
    uint64_t v52 = *(void *)(v0 + 392);
    uint64_t v53 = *(void *)(v0 + 352);
    uint64_t v54 = *(void *)(v0 + 328);
    uint64_t v55 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 32))(v53, *(void *)(v0 + 400), v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    Fence.update(muteEndDate:)();
    sub_10000A520(v52, (uint64_t *)&unk_1003EE800);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    uint64_t v49 = &qword_1003F0350;
    uint64_t v50 = v51;
  }
  sub_10000A520(v50, v49);
  uint64_t v56 = Fence.others.getter();
  if (*(void *)(v56 + 16))
  {
    (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 296) + 16))(*(void *)(v0 + 312), v56+ ((*(unsigned __int8 *)(*(void *)(v0 + 296) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 296) + 80)), *(void *)(v0 + 288));
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
  }
  uint64_t v58 = *(void *)(v0 + 312);
  uint64_t v59 = *(void *)(v0 + 288);
  uint64_t v60 = *(void *)(v0 + 296);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, v57, 1, v59);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59) == 1)
  {
    sub_10000A520(*(void *)(v0 + 312), &qword_1003F0380);
    goto LABEL_46;
  }
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v62 = *(void *)(v0 + 600);
  uint64_t v63 = *(void *)(v0 + 576);
  uint64_t v64 = *(void *)(v0 + 448);
  (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32))(*(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 288));
  sub_100013210(v62, v63, &qword_1003F0350);
  int v65 = v61(v63, 1, v64);
  uint64_t v66 = *(void *)(v0 + 576);
  if (v65 == 1)
  {
    uint64_t v67 = *(void *)(v0 + 384);
    uint64_t v68 = *(void *)(v0 + 328);
    uint64_t v69 = *(void *)(v0 + 336);
    sub_10000A520(*(void *)(v0 + 576), &qword_1003F0350);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v67, 1, 1, v68);
  }
  else
  {
    uint64_t v70 = *(void *)(v0 + 448);
    uint64_t v71 = *(void *)(v0 + 456);
    Fence.muteEndDate.getter();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v66, v70);
  }
  uint64_t v73 = *(void *)(v0 + 376);
  uint64_t v72 = *(void *)(v0 + 384);
  uint64_t v74 = *(void *)(v0 + 328);
  uint64_t v75 = *(void *)(v0 + 336);
  uint64_t v77 = *(void *)(v0 + 272);
  uint64_t v76 = *(void *)(v0 + 280);
  Fence.muteEndDate.getter();
  uint64_t v78 = v76 + *(int *)(v77 + 48);
  sub_100013210(v72, v76, (uint64_t *)&unk_1003EE800);
  sub_100013210(v73, v78, (uint64_t *)&unk_1003EE800);
  uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  int v80 = v79(v76, 1, v74);
  uint64_t v81 = *(void *)(v0 + 328);
  if (v80 != 1)
  {
    sub_100013210(*(void *)(v0 + 280), *(void *)(v0 + 368), (uint64_t *)&unk_1003EE800);
    int v83 = v79(v78, 1, v81);
    uint64_t v85 = *(void *)(v0 + 376);
    uint64_t v84 = *(void *)(v0 + 384);
    uint64_t v86 = *(void *)(v0 + 368);
    if (v83 != 1)
    {
      uint64_t v100 = *(void *)(v0 + 336);
      uint64_t v99 = *(void *)(v0 + 344);
      uint64_t v101 = *(void *)(v0 + 328);
      uint64_t v102 = *(void *)(v0 + 280);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32))(v99, v78, v101);
      sub_1000472C4(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
      char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v104(v99, v101);
      sub_10000A520(v85, (uint64_t *)&unk_1003EE800);
      sub_10000A520(v84, (uint64_t *)&unk_1003EE800);
      v104(v86, v101);
      sub_10000A520(v102, (uint64_t *)&unk_1003EE800);
      if (v103) {
        goto LABEL_45;
      }
      goto LABEL_41;
    }
    uint64_t v87 = *(void *)(v0 + 328);
    uint64_t v88 = *(void *)(v0 + 336);
    sub_10000A520(*(void *)(v0 + 376), (uint64_t *)&unk_1003EE800);
    sub_10000A520(v84, (uint64_t *)&unk_1003EE800);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
LABEL_40:
    sub_10000A520(*(void *)(v0 + 280), &qword_1003EEEB0);
LABEL_41:
    uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
    uint64_t v90 = *(void *)(v0 + 568);
    uint64_t v91 = *(void *)(v0 + 496);
    uint64_t v92 = *(void *)(v0 + 448);
    uint64_t v93 = *(void *)(v0 + 456);
    Fence.muteEndDate.getter();
    v89(v90, v91, v92);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
    uint64_t v94 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v94;
    *uint64_t v94 = v0;
    v94[1] = sub_100184B64;
    uint64_t v95 = *(void *)(v0 + 568);
    uint64_t v96 = *(void *)(v0 + 360);
    uint64_t v97 = *(void *)(v0 + 304);
    return sub_10018AD68(v97, v96, v95);
  }
  uint64_t v82 = *(void *)(v0 + 384);
  sub_10000A520(*(void *)(v0 + 376), (uint64_t *)&unk_1003EE800);
  sub_10000A520(v82, (uint64_t *)&unk_1003EE800);
  if (v79(v78, 1, v81) != 1) {
    goto LABEL_40;
  }
  sub_10000A520(*(void *)(v0 + 280), (uint64_t *)&unk_1003EE800);
LABEL_45:
  (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
LABEL_46:
  uint64_t v105 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v105;
  *uint64_t v105 = v0;
  v105[1] = sub_100184D8C;
  uint64_t v106 = *(void *)(v0 + 496);
  uint64_t v107 = *(void *)(v0 + 480);
  return sub_10018B5D4(v107, v106);
}

uint64_t sub_100184B64()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 744) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[71];
  uint64_t v4 = v2[45];
  uint64_t v5 = v2[23];
  sub_10000A520(v3, &qword_1003F0350);
  sub_10000A520(v4, (uint64_t *)&unk_1003EE800);
  if (v0) {
    uint64_t v6 = sub_100185E94;
  }
  else {
    uint64_t v6 = sub_100184CD8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100184CD8()
{
  (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[94] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100184D8C;
  uint64_t v2 = v0[62];
  uint64_t v3 = v0[60];
  return sub_10018B5D4(v3, v2);
}

uint64_t sub_100184D8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 760) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_1001861CC;
  }
  else {
    uint64_t v4 = sub_100184EB8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100184EB8()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v7 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  *(void *)(v0 + 768) = v8;
  *(void *)(v0 + 776) = (v6 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v8(v4, v5, v7);
  sub_100013210(v2, v3, &qword_1003F0350);
  int v9 = v1(v3, 1, v7);
  uint64_t v10 = *(void *)(v0 + 560);
  if (v9 == 1)
  {
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    sub_10000A520(*(void *)(v0 + 560), &qword_1003F0350);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v14(v11, 1, 1, v12);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 456);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 208);
    Fence.acceptanceStatus.getter();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v10, v15);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v14(v17, 0, 1, v18);
  }
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 232);
  uint64_t v23 = *(void *)(v0 + 240);
  uint64_t v24 = *(void *)(v0 + 200);
  uint64_t v25 = *(void *)(v0 + 208);
  unsigned int v85 = enum case for Fence.AcceptanceStatus.accepted(_:);
  uint64_t v84 = *(void (**)(uint64_t))(v25 + 104);
  v84(v21);
  v14(v21, 0, 1, v24);
  uint64_t v26 = v23 + *(int *)(v22 + 48);
  sub_100013210(v20, v23, &qword_1003ECD30);
  sub_100013210(v21, v26, &qword_1003ECD30);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v27(v23, 1, v24) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 200);
    sub_10000A520(*(void *)(v0 + 256), &qword_1003ECD30);
    sub_10000A520(v28, &qword_1003ECD30);
    if (v27(v26, 1, v29) == 1)
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
      uint64_t v31 = *(void *)(v0 + 504);
      uint64_t v32 = *(void *)(v0 + 472);
      uint64_t v33 = *(void *)(v0 + 448);
      sub_10000A520(*(void *)(v0 + 240), &qword_1003ECD30);
      v30(v32, v31, v33);
LABEL_11:
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 456) + 8);
      v51(*(void *)(v0 + 472), *(void *)(v0 + 448));
LABEL_16:
      uint64_t v65 = *(void *)(v0 + 504);
      if (*(_DWORD *)(v0 + 816) == 1) {
        uint64_t v66 = sub_100050AE4(v65, 0, 0);
      }
      else {
        uint64_t v66 = sub_100051B68(v65, 0, 0);
      }
      uint64_t v69 = v67;
      uint64_t v70 = v68;
      uint64_t v77 = v66;
      uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
      uint64_t v71 = *(void *)(v0 + 600);
      uint64_t v72 = *(void *)(v0 + 504);
      uint64_t v76 = *(void *)(v0 + 496);
      uint64_t v73 = *(void *)(v0 + 448);
      uint64_t v74 = *(void *)(v0 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v77, v69, v70);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      sub_10000A520(v71, &qword_1003F0350);
      v78(v74, v72, v73);
      v51(v76, v73);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v75 = *(uint64_t (**)(void))(v0 + 8);
      return v75();
    }
    goto LABEL_9;
  }
  uint64_t v34 = *(void *)(v0 + 200);
  sub_100013210(*(void *)(v0 + 240), *(void *)(v0 + 248), &qword_1003ECD30);
  if (v27(v26, 1, v34) == 1)
  {
    uint64_t v35 = *(void *)(v0 + 264);
    uint64_t v36 = *(void *)(v0 + 248);
    uint64_t v38 = *(void *)(v0 + 200);
    uint64_t v37 = *(void *)(v0 + 208);
    sub_10000A520(*(void *)(v0 + 256), &qword_1003ECD30);
    sub_10000A520(v35, &qword_1003ECD30);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_9:
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
    uint64_t v40 = *(void *)(v0 + 504);
    uint64_t v41 = *(void *)(v0 + 472);
    uint64_t v42 = *(void *)(v0 + 448);
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0C80);
    v39(v41, v40, v42);
    goto LABEL_12;
  }
  int v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
  uint64_t v81 = *(void *)(v0 + 448);
  uint64_t v82 = *(void *)(v0 + 504);
  uint64_t v44 = *(void *)(v0 + 256);
  uint64_t v43 = *(void *)(v0 + 264);
  uint64_t v45 = *(void *)(v0 + 248);
  uint64_t v79 = *(void *)(v0 + 240);
  uint64_t v80 = *(void *)(v0 + 472);
  uint64_t v46 = *(void *)(v0 + 224);
  uint64_t v48 = *(void *)(v0 + 200);
  uint64_t v47 = *(void *)(v0 + 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v46, v26, v48);
  sub_1000472C4(&qword_1003F0C90, (void (*)(uint64_t))&type metadata accessor for Fence.AcceptanceStatus);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v50(v46, v48);
  sub_10000A520(v44, &qword_1003ECD30);
  sub_10000A520(v43, &qword_1003ECD30);
  v50(v45, v48);
  sub_10000A520(v79, &qword_1003ECD30);
  v83(v80, v82, v81);
  if (v49) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v52 = *(void *)(v0 + 472);
  uint64_t v53 = *(void *)(v0 + 448);
  uint64_t v54 = *(void *)(v0 + 456);
  uint64_t v56 = *(void *)(v0 + 216);
  uint64_t v55 = *(void *)(v0 + 224);
  uint64_t v57 = *(void *)(v0 + 200);
  uint64_t v58 = *(void *)(v0 + 208);
  Fence.acceptanceStatus.getter();
  ((void (*)(uint64_t, void, uint64_t))v84)(v56, v85, v57);
  char v59 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v60(v56, v57);
  v60(v55, v57);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  *(void *)(v0 + 784) = v51;
  *(void *)(v0 + 792) = (v54 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v51(v52, v53);
  if ((v59 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v61 = (void *)swift_task_alloc();
  *(void *)(v0 + 800) = v61;
  *uint64_t v61 = v0;
  v61[1] = sub_10018570C;
  uint64_t v62 = *(void *)(v0 + 504);
  uint64_t v63 = *(void *)(v0 + 192);
  return sub_10019C438(v63, v62);
}

uint64_t sub_10018570C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_1001864EC;
  }
  else {
    uint64_t v4 = sub_100185838;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100185838()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = type metadata accessor for Fence.TriggerID();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10000A520(v1, &qword_1003F0A30);
  if (v3 != 1)
  {
    uint64_t v4 = sub_100051364(*(void *)(v0 + 504), 0, 0);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v4, v6, v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  uint64_t v9 = *(void *)(v0 + 504);
  if (*(_DWORD *)(v0 + 816) == 1) {
    uint64_t v10 = sub_100050AE4(v9, 0, 0);
  }
  else {
    uint64_t v10 = sub_100051B68(v9, 0, 0);
  }
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  uint64_t v22 = v10;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
  uint64_t v15 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 496);
  uint64_t v16 = *(void *)(v0 + 504);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v22, v13, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  sub_10000A520(v15, &qword_1003F0350);
  v23(v19, v16, v18);
  v24(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100185C28()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100185E94()
{
  (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
  uint64_t v1 = *(void *)(v0 + 744);
  int v2 = *(_DWORD *)(v0 + 816);
  swift_errorRetain();
  uint64_t v3 = *(void *)(v0 + 496);
  if (v2 == 1) {
    uint64_t v4 = sub_100050AE4(v3, v1, 1);
  }
  else {
    uint64_t v4 = sub_100051B68(v3, v1, 1);
  }
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)(v0 + 600);
  uint64_t v11 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 448);
  uint64_t v12 = *(void *)(v0 + 456);
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v8, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  sub_10000A520(v10, &qword_1003F0350);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1001861CC()
{
  uint64_t v1 = *(void *)(v0 + 760);
  int v2 = *(_DWORD *)(v0 + 816);
  swift_errorRetain();
  uint64_t v3 = *(void *)(v0 + 496);
  if (v2 == 1) {
    uint64_t v4 = sub_100050AE4(v3, v1, 1);
  }
  else {
    uint64_t v4 = sub_100051B68(v3, v1, 1);
  }
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)(v0 + 600);
  uint64_t v11 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 448);
  uint64_t v12 = *(void *)(v0 + 456);
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v8, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  sub_10000A520(v10, &qword_1003F0350);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1001864EC()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = *(void *)(v0 + 504);
  swift_errorRetain();
  uint64_t v3 = sub_100051364(v2, v1, 1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v3, v5, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
  uint64_t v9 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 464);
  uint64_t v11 = *(void *)(v0 + 448);
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B770);
  v8(v10, v9, v11);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  if (v15)
  {
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
    uint64_t v17 = *(void *)(v0 + 552);
    uint64_t v46 = v13;
    uint64_t v18 = *(void *)(v0 + 536);
    uint64_t v42 = *(void *)(v0 + 464);
    uint64_t v44 = *(void *)(v0 + 448);
    uint64_t v19 = swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446466;
    Fence.id.getter();
    sub_1000472C4(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    v43(v17, v18);
    *(void *)(v0 + 152) = sub_100037004(v20, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16(v42, v44);
    *(_WORD *)(v19 + 12) = 2114;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v45 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v14, "Got an error triggering accepted fence id: %{public}s, error: %{public}@", (uint8_t *)v19, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 464);
    uint64_t v25 = *(void *)(v0 + 448);
    swift_errorRelease();
    v16(v24, v25);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  uint64_t v26 = *(void *)(v0 + 504);
  if (*(_DWORD *)(v0 + 816) == 1) {
    uint64_t v27 = sub_100050AE4(v26, 0, 0);
  }
  else {
    uint64_t v27 = sub_100051B68(v26, 0, 0);
  }
  uint64_t v30 = v28;
  uint64_t v31 = v29;
  uint64_t v39 = v27;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
  uint64_t v32 = *(void *)(v0 + 600);
  uint64_t v34 = *(void *)(v0 + 496);
  uint64_t v33 = *(void *)(v0 + 504);
  uint64_t v35 = *(void *)(v0 + 448);
  uint64_t v36 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v39, v30, v31);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  sub_10000A520(v32, &qword_1003F0350);
  v40(v36, v33, v35);
  v41(v34, v35);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_100186B7C(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  v2[26] = *v1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Fence.Participant();
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.ID();
  v2[32] = v4;
  v2[33] = *(void *)(v4 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[38] = v6;
  v2[39] = *(void *)(v6 + 64);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v2[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v2[43] = v7;
  v2[44] = *(void *)(v7 - 8);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PersonHandle();
  v2[47] = v8;
  v2[48] = *(void *)(v8 - 8);
  v2[49] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v2[50] = v9;
  v2[51] = *(void *)(v9 - 8);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v2[58] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v2[59] = v10;
  void *v10 = v2;
  v10[1] = sub_100186FA8;
  return daemon.getter();
}

uint64_t sub_100186FA8(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[60] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[61] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[62] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[63] = v6;
  uint64_t v7 = sub_1000472C4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100187188;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100187188(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[25];
    return _swift_task_switch(sub_100189378, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[66] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100187300;
    return daemon.getter();
  }
}

uint64_t sub_100187300(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 536) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 544) = v5;
  uint64_t v6 = type metadata accessor for CommandManager();
  uint64_t v7 = sub_1000472C4(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v5 = v4;
  v5[1] = sub_1001874B4;
  uint64_t v8 = *(void *)(v2 + 504);
  uint64_t v9 = *(void *)(v2 + 496);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001874B4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[69] = a1;
  v3[70] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[25];
    return _swift_task_switch(sub_1001894E8, v4, 0);
  }
  else
  {
    swift_release();
    v3[71] = swift_allocBox();
    v3[72] = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    v3[73] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10018764C;
    uint64_t v7 = v3[58];
    uint64_t v8 = v3[24];
    return sub_1001327B8(v7, v8);
  }
}

uint64_t sub_10018764C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  swift_task_dealloc();
  return _swift_task_switch(sub_10018775C, v1, 0);
}

uint64_t sub_10018775C()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[51];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10000A520(v1, &qword_1003F0350);
    swift_deallocBox();
    sub_100044014(&qword_1003EC580);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003677A0;
    *(unsigned char *)(inited + 32) = 6;
    *(void *)(inited + 64) = &type metadata for String;
    *(void *)(inited + 72) = &off_1003DDA78;
    strcpy((char *)(inited + 40), "NoFenceFound");
    *(unsigned char *)(inited + 53) = 0;
    *(_WORD *)(inited + 54) = -5120;
    *(unsigned char *)(inited + 80) = 17;
    *(void *)(inited + 112) = &type metadata for Bool;
    *(void *)(inited + 120) = &off_1003DDAA8;
    *(unsigned char *)(inited + 88) = 0;
    unint64_t v5 = sub_1001013D8(inited);
    uint64_t v6 = sub_100050320(4, v5);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v6, v8, v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v11 = type metadata accessor for GenericError();
    sub_1000472C4((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v13 = v12;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    sub_1000472C4(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *uint64_t v13 = 0xD00000000000002ALL;
    v13[1] = 0x8000000100376FC0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for GenericError.error(_:), v11);
    swift_willThrow();
LABEL_3:
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  uint64_t v17 = v0[72];
  uint64_t v18 = v0[57];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v17, v1, v2);
  Fence.shouldDeleteFence.setter();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[74] = v19;
  v0[75] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v18, v17, v2);
  uint64_t v20 = Fence.others.getter();
  unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[76] = v21;
  v0[77] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v107 = v21;
  v21(v18, v2);
  uint64_t v22 = *(void *)(v20 + 16);
  if (v22)
  {
    uint64_t v104 = v19;
    uint64_t v23 = v0[48];
    uint64_t v24 = v0[44];
    uint64_t v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    uint64_t v26 = v23 + 16;
    uint64_t v25 = v27;
    unint64_t v28 = v20 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
    uint64_t v116 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
    uint64_t v118 = *(void *)(v26 + 56);
    uint64_t v112 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v110 = v24;
    uint64_t v29 = (void (**)(char *, char *, uint64_t))(v24 + 32);
    swift_bridgeObjectRetain();
    uint64_t v120 = (char *)_swiftEmptyArrayStorage;
    uint64_t v108 = v27;
    do
    {
      uint64_t v30 = v0[49];
      uint64_t v31 = v0[47];
      uint64_t v32 = v0[42];
      uint64_t v33 = v0[43];
      v25(v30, v28, v31);
      PersonHandle.id.getter();
      Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
      (*v116)(v32, 0, 1, v33);
      (*(void (**)(uint64_t, uint64_t))(v26 - 8))(v30, v31);
      if ((*v112)(v32, 1, v33) == 1)
      {
        sub_10000A520(v0[42], &qword_1003F3B30);
      }
      else
      {
        uint64_t v35 = (char *)v0[45];
        uint64_t v34 = (char *)v0[46];
        uint64_t v36 = v0[43];
        uint64_t v37 = *v29;
        (*v29)(v34, (char *)v0[42], v36);
        v37(v35, v34, v36);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v120 = (char *)sub_10013DC78(0, *((void *)v120 + 2) + 1, 1, (unint64_t)v120);
        }
        unint64_t v39 = *((void *)v120 + 2);
        unint64_t v38 = *((void *)v120 + 3);
        if (v39 >= v38 >> 1) {
          uint64_t v120 = (char *)sub_10013DC78(v38 > 1, v39 + 1, 1, (unint64_t)v120);
        }
        uint64_t v40 = (char *)v0[45];
        uint64_t v41 = v0[43];
        *((void *)v120 + 2) = v39 + 1;
        v37(&v120[((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))+ *(void *)(v110 + 72) * v39], v40, v41);
        uint64_t v25 = v108;
      }
      v28 += v118;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease_n();
    uint64_t v19 = v104;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v120 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v42 = v0[56];
  uint64_t v43 = v0[50];
  v19(v42, v0[72], v43);
  char v44 = sub_100164A9C();
  v107(v42, v43);
  if (v44)
  {
    uint64_t v45 = v0[55];
    uint64_t v46 = v0[50];
    uint64_t v48 = v0[37];
    uint64_t v47 = v0[38];
    uint64_t v49 = v0[36];
    v19(v45, v0[72], v46);
    Fence.ckRecordIdentifier.getter();
    v107(v45, v46);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v49, 1, v48);
    uint64_t v51 = v0[72];
    uint64_t v52 = v0[56];
    uint64_t v53 = v0[50];
    if (v50 == 1)
    {
      uint64_t v54 = v0[36];
      swift_bridgeObjectRelease();
      sub_10000A520(v54, &qword_1003ECFB8);
      v19(v52, v51, v53);
      uint64_t v55 = sub_100050CE0();
      uint64_t v57 = v56;
      uint64_t v59 = v58;
      v107(v52, v53);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v55, v57, v59);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v60 = type metadata accessor for GenericError();
      sub_1000472C4((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
      uint64_t v61 = swift_allocError();
      *uint64_t v62 = 0xD00000000000002BLL;
      v62[1] = 0x8000000100377010;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v60 - 8) + 104))(v62, enum case for GenericError.error(_:), v60);
      swift_willThrow();
      uint64_t v63 = (void (*)(uint64_t, uint64_t))v0[76];
      uint64_t v64 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
      uint64_t v65 = v0[72];
      uint64_t v66 = v0[56];
      uint64_t v67 = v0[50];
      swift_beginAccess();
      v64(v66, v65, v67);
      swift_errorRetain();
      uint64_t v68 = sub_100050FE4(v66, v61, 1);
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      swift_errorRelease();
      v63(v66, v67);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v68, v70, v72);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_willThrow();
      swift_release();
      goto LABEL_3;
    }
    uint64_t v73 = v0[35];
    uint64_t v74 = v0[33];
    uint64_t v106 = v0[32];
    uint64_t v103 = v0[31];
    uint64_t v75 = v0[29];
    uint64_t v109 = v0[30];
    unint64_t v117 = (void (**)(char *, uint64_t, uint64_t))(v0[38] + 32);
    uint64_t v119 = v0;
    uint64_t v113 = v0[28];
    uint64_t v115 = *v117;
    (*v117)((char *)v0[41], v0[36], v0[37]);
    v19(v52, v51, v53);
    Fence.id.getter();
    v107(v52, v53);
    uint64_t v102 = Fence.ID.uuidString.getter();
    uint64_t v111 = v76;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v106);
    uint64_t v105 = v19;
    v19(v52, v51, v53);
    Fence.createdBy.getter();
    v107(v52, v53);
    (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v109, enum case for Fence.Participant.other(_:), v113);
    LOBYTE(v73) = static Fence.Participant.== infix(_:_:)();
    uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v77(v109, v113);
    uint64_t v78 = v0;
    v77(v103, v113);
    uint64_t v80 = v0[40];
    uint64_t v79 = v0[41];
    uint64_t v82 = v0[38];
    uint64_t v81 = v0[39];
    uint64_t v83 = v78[37];
    uint64_t v84 = v78[27];
    uint64_t v114 = v78[26];
    if (v73)
    {
      uint64_t v85 = v78[69];
      uint64_t v86 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v84, 1, 1, v86);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v80, v79, v83);
      unint64_t v87 = (*(unsigned __int8 *)(v82 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      unint64_t v88 = (v81 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v89 = (char *)swift_allocObject();
      *((void *)v89 + 2) = 0;
      *((void *)v89 + 3) = 0;
      *((void *)v89 + 4) = v85;
      *((void *)v89 + 5) = v102;
      *((void *)v89 + 6) = v111;
      v115(&v89[v87], v80, v83);
      *(void *)&v89[v88] = v120;
      *(void *)&v89[(v88 + 15) & 0xFFFFFFFFFFFFFFF8] = v114;
      uint64_t v0 = v119;
      swift_retain();
      sub_10010405C(v84, (uint64_t)&unk_1003F0D10, (uint64_t)v89);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v79, v83);
    }
    else
    {
      uint64_t v90 = v78[71];
      uint64_t v91 = v119[25];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v92 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v84, 1, 1, v92);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v80, v79, v83);
      uint64_t v93 = sub_1000472C4(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
      uint64_t v121 = v79;
      unint64_t v94 = (*(unsigned __int8 *)(v82 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      uint64_t v95 = (char *)swift_allocObject();
      *((void *)v95 + 2) = v91;
      *((void *)v95 + 3) = v93;
      *((void *)v95 + 4) = v91;
      *((void *)v95 + 5) = v90;
      v115(&v95[v94], v80, v83);
      *(void *)&v95[(v81 + v94 + 7) & 0xFFFFFFFFFFFFFFF8] = v114;
      uint64_t v0 = v119;
      swift_retain_n();
      swift_retain();
      sub_10010405C(v84, (uint64_t)&unk_1003F0D00, (uint64_t)v95);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v121, v83);
    }
    uint64_t v19 = v105;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v96 = v0[72];
  uint64_t v97 = v0[53];
  uint64_t v98 = v0[50];
  swift_beginAccess();
  v19(v97, v96, v98);
  uint64_t v99 = (void *)swift_task_alloc();
  v0[78] = v99;
  *uint64_t v99 = v0;
  v99[1] = sub_1001885E0;
  uint64_t v101 = v0[53];
  uint64_t v100 = v0[54];
  return sub_10005F2A8(v100, v101);
}

uint64_t sub_1001885E0()
{
  uint64_t v2 = (void *)*v1;
  v2[79] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[76];
  if (v0)
  {
    uint64_t v4 = v2[25];
    v3(v2[53], v2[50]);
    unint64_t v5 = sub_100189664;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2[53];
    uint64_t v8 = v2[54];
    uint64_t v9 = v2[50];
    uint64_t v10 = v2[25];
    v3(v7, v9);
    v3(v8, v9);
    unint64_t v5 = sub_100188768;
    uint64_t v6 = v10;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100188768()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001887F8;
  return daemon.getter();
}

uint64_t sub_1001887F8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 648) = a1;
  swift_task_dealloc();
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 656) = v5;
  uint64_t v6 = type metadata accessor for LocalStorageService();
  uint64_t v7 = sub_1000472C4(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *unint64_t v5 = v4;
  v5[1] = sub_1001889AC;
  uint64_t v8 = *(void *)(v2 + 504);
  uint64_t v9 = *(void *)(v2 + 496);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001889AC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[83] = a1;
  v3[84] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[25];
    unint64_t v5 = sub_1001898A4;
  }
  else
  {
    uint64_t v6 = v3[25];
    swift_release();
    unint64_t v5 = sub_100188AD8;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100188AD8()
{
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 400);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 592))(v3, *(void *)(v0 + 576), v4);
  Fence.id.getter();
  v2(v3, v4);
  return _swift_task_switch(sub_100188B8C, v1, 0);
}

uint64_t sub_100188B8C()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[34];
  uint64_t v3 = sub_1000472C4(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[85] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  unint64_t v5 = (void *)swift_task_alloc();
  v0[86] = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_100188CBC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v1, v3, 0xD000000000000017, 0x8000000100376FF0, sub_100195924, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100188CBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 664);
    uint64_t v4 = sub_100189094;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 664);
    swift_task_dealloc();
    uint64_t v4 = sub_100188DE4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100188DE4()
{
  uint64_t v1 = v0[25];
  (*(void (**)(void, void))(v0[33] + 8))(v0[34], v0[32]);
  return _swift_task_switch(sub_100188E60, v1, 0);
}

uint64_t sub_100188E60()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[50];
  swift_release();
  v2(v4, v3, v5);
  uint64_t v6 = sub_100050FE4(v4, 0, 0);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  v1(v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100189094()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[25];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100189128, v4, 0);
}

uint64_t sub_100189128()
{
  swift_release();
  uint64_t v1 = v0[87];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[50];
  swift_beginAccess();
  v3(v5, v4, v6);
  swift_errorRetain();
  uint64_t v7 = sub_100050FE4(v5, v1, 1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_errorRelease();
  v2(v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100189378()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001894E8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100189664()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[50];
  swift_beginAccess();
  v3(v5, v4, v6);
  swift_errorRetain();
  uint64_t v7 = sub_100050FE4(v5, v1, 1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_errorRelease();
  v2(v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1001898A4()
{
  swift_release();
  uint64_t v1 = v0[84];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[50];
  swift_beginAccess();
  v3(v5, v4, v6);
  swift_errorRetain();
  uint64_t v7 = sub_100050FE4(v5, v1, 1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_errorRelease();
  v2(v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100189AF4(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  uint64_t v4 = type metadata accessor for Fence.AcceptanceStatus();
  v3[23] = v4;
  v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v3[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence();
  v3[28] = v5;
  v3[29] = *(void *)(v5 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[32] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100189C94;
  return daemon.getter();
}

uint64_t sub_100189C94(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 264) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 272) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100189E70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100189E70(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[22];
    return _swift_task_switch(sub_10018AB80, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[37] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10018A000;
    uint64_t v7 = v3[27];
    uint64_t v8 = v3[21];
    return sub_1001327B8(v7, v8);
  }
}

uint64_t sub_10018A000()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  return _swift_task_switch(sub_10018A110, v1, 0);
}

uint64_t sub_10018A110()
{
  uint64_t v49 = v0;
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003F0350);
    sub_100044014(&qword_1003EC580);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003677A0;
    *(unsigned char *)(inited + 32) = 27;
    *(void *)(inited + 64) = &type metadata for String;
    *(void *)(inited + 72) = &off_1003DDA78;
    strcpy((char *)(inited + 40), "NoFenceFound");
    *(unsigned char *)(inited + 53) = 0;
    *(_WORD *)(inited + 54) = -5120;
    *(unsigned char *)(inited + 80) = 28;
    *(void *)(inited + 112) = &type metadata for Bool;
    *(void *)(inited + 120) = &off_1003DDAA8;
    *(unsigned char *)(inited + 88) = 0;
    unint64_t v5 = sub_1001013D8(inited);
    uint64_t v6 = sub_100050320(1, v5);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v6, v8, v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v11 = type metadata accessor for GenericError();
    sub_1000472C4((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v13 = v12;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v48[0] = 0xD000000000000028;
    v48[1] = 0x8000000100377040;
    type metadata accessor for Fence.ID();
    sub_1000472C4(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *uint64_t v13 = 0xD000000000000028;
    v13[1] = 0x8000000100377040;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for GenericError.error(_:), v11);
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v15 = (uint64_t (*)(void))v0[1];
LABEL_9:
    return v15();
  }
  uint64_t v16 = v0[31];
  uint64_t v18 = v0[25];
  uint64_t v17 = v0[26];
  uint64_t v20 = v0[23];
  uint64_t v19 = v0[24];
  unint64_t v21 = *(void (**)(void, void, void))(v1 + 32);
  v0[38] = v21;
  v0[39] = (v1 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  uint64_t v45 = v21;
  v21(v16, v3, v2);
  Fence.acceptanceStatus.getter();
  unsigned int v22 = enum case for Fence.AcceptanceStatus.accepted(_:);
  uint64_t v23 = *(void (**)(uint64_t, void, uint64_t))(v19 + 104);
  v23(v18, enum case for Fence.AcceptanceStatus.accepted(_:), v20);
  char v24 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v25(v18, v20);
  v25(v17, v20);
  if (v24)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100044058(v26, (uint64_t)qword_10040B770);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446210;
      v0[19] = sub_100037004(0xD000000000000010, 0x8000000100377070, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: Fence is already accepted.", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();

    v45(v0[20], v0[31], v0[28]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v15 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  unsigned int v47 = v22;
  uint64_t v32 = v0[25];
  uint64_t v31 = v0[26];
  uint64_t v33 = v0[23];
  Fence.acceptanceStatus.getter();
  v23(v32, enum case for Fence.AcceptanceStatus.pendingHidden(_:), v33);
  char v34 = static Fence.AcceptanceStatus.== infix(_:_:)();
  v25(v32, v33);
  uint64_t v46 = v25;
  v25(v31, v33);
  uint64_t v35 = v23;
  if (v34)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100044058(v36, (uint64_t)qword_10040B770);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v39 = 136446210;
      v0[18] = sub_100037004(0xD000000000000010, 0x8000000100377070, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s: Accepting a hidden fence should not be done from UI", v39, 0xCu);
      swift_arrayDestroy();
      uint64_t v35 = v23;
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  uint64_t v40 = v0[26];
  uint64_t v41 = v0[23];
  v35(v40, v47, v41);
  Fence.update(acceptanceStatus:)();
  v46(v40, v41);
  uint64_t v42 = (void *)swift_task_alloc();
  v0[40] = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_10018A920;
  uint64_t v43 = v0[30];
  uint64_t v44 = v0[31];
  return sub_100182930(v43, v44);
}

uint64_t sub_10018A920()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0) {
    uint64_t v4 = sub_10018AC24;
  }
  else {
    uint64_t v4 = sub_10018AA4C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10018AA4C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  (*(void (**)(void, void, uint64_t))(v0 + 304))(*(void *)(v0 + 160), *(void *)(v0 + 240), v2);
  uint64_t v4 = sub_100050AD4(v1, 0, 0);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v4, v6, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10018AB80()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018AC24()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[29];
  swift_errorRetain();
  uint64_t v5 = sub_100050AD4(v2, v1, 1);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v5, v7, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10018AD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[7] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10018AE28;
  return daemon.getter();
}

uint64_t sub_10018AE28(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10018B004;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10018B004(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100174D60, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[12] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10018B18C;
    return sub_10012F108();
  }
}

uint64_t sub_10018B18C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10018B2A4, v2, 0);
}

uint64_t sub_10018B2A4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = sub_10012EAAC((void (*)(void))sub_100195DB0, v5, v1);
  *(void *)(v0 + 112) = v6;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_1000472C4(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  v7[2] = v6;
  v7[3] = v2;
  v7[4] = v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v8;
  void *v8 = v0;
  v8[1] = sub_10018B42C;
  return withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_10018B42C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_10018B55C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v4 = sub_100174CFC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10018B55C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018B5D4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = sub_100044014(&qword_1003F0CA0);
  v3[10] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.Participant();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  sub_100044014(&qword_1003EE290);
  v3[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FenceRecord();
  v3[19] = v6;
  v3[20] = *(void *)(v6 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence();
  v3[23] = v7;
  v3[24] = *(void *)(v7 - 8);
  v3[25] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v3[26] = v8;
  void *v8 = v3;
  v8[1] = sub_10018B8D4;
  return daemon.getter();
}

uint64_t sub_10018B8D4(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[27] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[28] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[29] = v4;
  uint64_t v5 = type metadata accessor for CommandManager();
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[30] = v6;
  uint64_t v7 = sub_1000472C4(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10018BAB4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10018BAB4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = sub_10018CD30;
  }
  else
  {
    uint64_t v6 = v3[4];
    swift_release();
    uint64_t v5 = sub_10018BBDC;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10018BBDC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[25], v0[3], v0[23]);
  sub_1001650EC(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v0[18], &qword_1003EE290);
LABEL_8:
    uint64_t v11 = (void *)swift_task_alloc();
    v0[45] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10018CAE4;
    uint64_t v12 = v0[25];
    uint64_t v13 = v0[2];
    return sub_10005F2A8(v13, v12);
  }
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[14];
  sub_1000B8CE4(v0[18], v0[22]);
  Fence.createdBy.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for Fence.Participant.me(_:), v7);
  char v8 = static Fence.Participant.== infix(_:_:)();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v7);
  v9(v4, v7);
  if ((v8 & 1) == 0)
  {
    sub_1000B8D48(v0[22]);
    goto LABEL_8;
  }
  uint64_t v10 = (void *)swift_task_alloc();
  v0[33] = v10;
  void *v10 = v0;
  v10[1] = sub_10018BDF0;
  return daemon.getter();
}

uint64_t sub_10018BDF0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 272) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 280) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1000472C4(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_10018BFA4;
  uint64_t v8 = *(void *)(v2 + 240);
  uint64_t v9 = *(void *)(v2 + 232);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10018BFA4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[36] = a1;
  v3[37] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v4 = v3[4];
    return _swift_task_switch(sub_10018CE2C, v4, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v3[38] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10018C144;
    uint64_t v6 = v3[21];
    uint64_t v7 = v3[22];
    return sub_10018D2D8(v6, v7);
  }
}

uint64_t sub_10018C144()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_10018CF50;
  }
  else {
    uint64_t v4 = sub_10018C270;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10018C270()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v1, v0[21], v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  Fence.ckRecordIdentifier.getter();
  uint64_t v7 = v3 + *(int *)(v4 + 48);
  sub_100013210(v1, v3, &qword_1003ECFB8);
  sub_100013210(v2, v7, &qword_1003ECFB8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v8(v3, 1, v5) == 1)
  {
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[6];
    sub_10000A520(v0[12], &qword_1003ECFB8);
    sub_10000A520(v9, &qword_1003ECFB8);
    if (v8(v7, 1, v10) == 1)
    {
      sub_10000A520(v0[10], &qword_1003ECFB8);
LABEL_8:
      uint64_t v24 = v0[21];
      sub_1000B8D48(v0[22]);
      swift_release();
      sub_1000B8D48(v24);
      uint64_t v25 = (void *)swift_task_alloc();
      v0[45] = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_10018CAE4;
      uint64_t v26 = v0[25];
      uint64_t v27 = v0[2];
      return sub_10005F2A8(v27, v26);
    }
    goto LABEL_6;
  }
  uint64_t v11 = v0[6];
  sub_100013210(v0[10], v0[11], &qword_1003ECFB8);
  unsigned int v12 = v8(v7, 1, v11);
  uint64_t v14 = v0[12];
  uint64_t v13 = v0[13];
  uint64_t v15 = v0[11];
  if (v12 == 1)
  {
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    sub_10000A520(v0[12], &qword_1003ECFB8);
    sub_10000A520(v13, &qword_1003ECFB8);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
LABEL_6:
    sub_10000A520(v0[10], &qword_1003F0CA0);
    goto LABEL_11;
  }
  uint64_t v18 = v0[10];
  uint64_t v20 = v0[7];
  uint64_t v19 = v0[8];
  uint64_t v21 = v0[6];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v7, v21);
  sub_1000472C4(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v23(v19, v21);
  sub_10000A520(v14, &qword_1003ECFB8);
  sub_10000A520(v13, &qword_1003ECFB8);
  v23(v15, v21);
  sub_10000A520(v18, &qword_1003ECFB8);
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v29 = (void *)swift_task_alloc();
  v0[40] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_10018C62C;
  return sub_1000EB274();
}

uint64_t sub_10018C62C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[41] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[4];
  if (v1)
  {
    uint64_t v6 = sub_10018D080;
  }
  else
  {
    v4[42] = a1;
    uint64_t v6 = sub_10018C768;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10018C768()
{
  uint64_t v1 = (void *)v0[42];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  id v7 = [v1 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Fence.update(ckRecordIdentifier:owner:)();
  swift_bridgeObjectRelease();
  sub_1000472C4(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[43] = v8;
  v8[2] = v6;
  v8[3] = v2;
  v8[4] = v3;
  v8[5] = v4;
  v8[6] = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[44] = v9;
  void *v9 = v0;
  v9[1] = sub_10018C900;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_10018C900()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10018CA2C, v1, 0);
}

uint64_t sub_10018CA2C()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  swift_release();
  sub_1000B8D48(v2);
  sub_1000B8D48(v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10018CAE4;
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[2];
  return sub_10005F2A8(v5, v4);
}

uint64_t sub_10018CAE4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_10018D1BC;
  }
  else {
    uint64_t v4 = sub_10018CC10;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10018CC10()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10018CD30()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018CE2C()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  swift_release();
  sub_1000B8D48(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10018CF50()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  swift_release();
  swift_release();
  sub_1000B8D48(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10018D080()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[21];
  swift_release();
  swift_release();
  sub_1000B8D48(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000B8D48(v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10018D1BC()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10018D2D8(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_100044014(&qword_1003EE290);
  v3[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FenceRecord();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[12] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10018D40C;
  return daemon.getter();
}

uint64_t sub_10018D40C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 104) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10018D5E8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10018D5E8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_10018E014;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10018D70C;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10018D70C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10018D7AC;
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  return sub_1000F62B0(v2, v3);
}

uint64_t sub_10018D7AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10018DA3C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v3 = sub_10018D8C8;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10018D8C8()
{
  uint64_t v1 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[9] + 48))(v1, 1, v0[8]) == 1)
  {
    sub_10000A520(v1, &qword_1003EE290);
LABEL_7:
    uint64_t v9 = (void *)swift_task_alloc();
    v0[19] = v9;
    void *v9 = v0;
    v9[1] = sub_10018DB6C;
    uint64_t v10 = v0[5];
    return sub_100190BF0(v10);
  }
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[5];
  sub_1000B8CE4(v1, v2);
  char v4 = sub_1000D01A8(v2, v3);
  sub_1000B8D48(v2);
  if ((v4 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  swift_release();
  sub_1000D0F7C(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10018DA3C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_errorRelease();
  return _swift_task_switch(sub_10018DAA8, v1, 0);
}

uint64_t sub_10018DAA8()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[7], 1, 1, v0[8]);
  sub_10000A520(v0[7], &qword_1003EE290);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10018DB6C;
  uint64_t v2 = v0[5];
  return sub_100190BF0(v2);
}

uint64_t sub_10018DB6C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_10018E09C;
  }
  else {
    uint64_t v3 = sub_10018DC94;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10018DC94()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (int *)v0[8];
  uint64_t v3 = v0[5];
  UUID.init()();
  uint64_t v4 = (uint64_t *)(v3 + v2[5]);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = *(void **)(v3 + v2[6]);
  uint64_t v8 = *(void *)(v3 + v2[7]);
  sub_100013210(v3 + v2[8], v1 + v2[8], &qword_1003EE810);
  sub_100013210(v3 + v2[9], v1 + v2[9], (uint64_t *)&unk_1003EE800);
  uint64_t v9 = (uint64_t *)(v3 + v2[10]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[11];
  unsigned int v12 = (void *)(v1 + v2[5]);
  long long v13 = *(_OWORD *)(v9 + 1);
  long long v14 = *(_OWORD *)(v9 + 3);
  long long v15 = *(_OWORD *)(v9 + 5);
  long long v16 = *(_OWORD *)(v9 + 7);
  long long v17 = *(_OWORD *)(v9 + 9);
  *unsigned int v12 = v6;
  v12[1] = v5;
  *(void *)(v1 + v2[6]) = v7;
  *(void *)(v1 + v2[7]) = v8;
  uint64_t v18 = v1 + v2[10];
  *(void *)uint64_t v18 = v10;
  *(_OWORD *)(v18 + 8) = v13;
  *(_OWORD *)(v18 + 24) = v14;
  *(_OWORD *)(v18 + 40) = v15;
  *(_OWORD *)(v18 + 56) = v16;
  *(_OWORD *)(v18 + 72) = v17;
  *(void *)(v18 + 88) = v11;
  swift_bridgeObjectRetain();
  id v19 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[21] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10018DE60;
  uint64_t v21 = v0[10];
  uint64_t v22 = v0[4];
  return sub_100193D8C(v22, v21);
}

uint64_t sub_10018DE60()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_10018E470;
  }
  else {
    uint64_t v3 = sub_10018DF88;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10018DF88()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_release();
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10018E014()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10018E09C()
{
  uint64_t v31 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD00000000000001ALL, 0x8000000100376F80, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[10];
  uint64_t v8 = (int *)v0[8];
  uint64_t v9 = v0[5];
  UUID.init()();
  uint64_t v10 = (uint64_t *)(v9 + v8[5]);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  long long v13 = *(void **)(v9 + v8[6]);
  uint64_t v14 = *(void *)(v9 + v8[7]);
  sub_100013210(v9 + v8[8], v7 + v8[8], &qword_1003EE810);
  sub_100013210(v9 + v8[9], v7 + v8[9], (uint64_t *)&unk_1003EE800);
  long long v15 = (uint64_t *)(v9 + v8[10]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[11];
  uint64_t v18 = (void *)(v7 + v8[5]);
  long long v19 = *(_OWORD *)(v15 + 1);
  long long v20 = *(_OWORD *)(v15 + 3);
  long long v21 = *(_OWORD *)(v15 + 5);
  long long v22 = *(_OWORD *)(v15 + 7);
  long long v23 = *(_OWORD *)(v15 + 9);
  *uint64_t v18 = v12;
  v18[1] = v11;
  *(void *)(v7 + v8[6]) = v13;
  *(void *)(v7 + v8[7]) = v14;
  uint64_t v24 = v7 + v8[10];
  *(void *)uint64_t v24 = v16;
  *(_OWORD *)(v24 + 8) = v19;
  *(_OWORD *)(v24 + 24) = v20;
  *(_OWORD *)(v24 + 40) = v21;
  *(_OWORD *)(v24 + 56) = v22;
  *(_OWORD *)(v24 + 72) = v23;
  *(void *)(v24 + 88) = v17;
  swift_bridgeObjectRetain();
  id v25 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)swift_task_alloc();
  v0[21] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_10018DE60;
  uint64_t v27 = v0[10];
  uint64_t v28 = v0[4];
  return sub_100193D8C(v28, v27);
}

uint64_t sub_10018E470()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_release();
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10018E504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v7[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[18] = v10;
  v7[19] = *(void *)(v10 + 64);
  v7[20] = swift_task_alloc();
  uint64_t v11 = *(void *)(type metadata accessor for FenceRecord() - 8);
  v7[21] = v11;
  v7[22] = *(void *)(v11 + 64);
  v7[23] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for PersonHandle();
  v7[24] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[25] = v13;
  v7[26] = *(void *)(v13 + 64);
  v7[27] = swift_task_alloc();
  return _swift_task_switch(sub_10018E6DC, a6, 0);
}

uint64_t sub_10018E6DC()
{
  uint64_t v1 = Fence.others.getter();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 16);
    v3 += 16;
    uint64_t v36 = v4;
    unint64_t v5 = (*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64);
    unint64_t v6 = v1 + v5;
    uint64_t v34 = *(void *)(v3 + 56);
    unint64_t v35 = v5;
    unint64_t v33 = (*(void *)(v0 + 208) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = *(void *)(v0 + 176) + 7;
    uint64_t v30 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v31 = *(void *)(v0 + 152) + 7;
    uint64_t v37 = *(void *)(v0 + 144);
    do
    {
      uint64_t v39 = v2;
      uint64_t v7 = *(void *)(v0 + 216);
      uint64_t v9 = *(void *)(v0 + 184);
      uint64_t v8 = *(void *)(v0 + 192);
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 136);
      uint64_t v40 = v11;
      uint64_t v41 = v10;
      uint64_t v44 = *(void *)(v0 + 128);
      uint64_t v45 = *(void *)(v0 + 120);
      uint64_t v12 = *(void *)(v0 + 96);
      uint64_t v42 = *(void *)(v0 + 104);
      uint64_t v43 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 80);
      uint64_t v14 = *(void *)(v0 + 88);
      unint64_t v46 = v6;
      v36(v7);
      sub_1000D0F7C(v12, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v10, v13, v11);
      unint64_t v15 = (v33 + 8 + *(unsigned __int8 *)(v38 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      unint64_t v16 = (v32 + v15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v17 = (*(unsigned __int8 *)(v37 + 80) + v16 + 8) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      (*v30)(v18 + v35, v7, v8);
      *(void *)(v18 + v33) = v14;
      sub_1000B8CE4(v9, v18 + v15);
      *(void *)(v18 + v16) = v42;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))(v18 + v17, v41, v40);
      *(void *)(v18 + ((v31 + v17) & 0xFFFFFFFFFFFFFFF8)) = v43;
      uint64_t v19 = type metadata accessor for TaskPriority();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v44, 1, 1, v19);
      sub_100179D88(v44, v45);
      LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v45, 1, v19);
      swift_retain();
      swift_retain();
      uint64_t v21 = *(void *)(v0 + 120);
      if (v15 == 1)
      {
        sub_10000A520(*(void *)(v0 + 120), (uint64_t *)&unk_1003F3C10);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v19);
      }
      if (*(void *)(v18 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v24 = v23;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v25 = **(void **)(v0 + 72);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = &unk_1003F0CD0;
      *(void *)(v26 + 24) = v18;
      uint64_t v27 = v24 | v22;
      if (v24 | v22)
      {
        uint64_t v27 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v22;
        *(void *)(v0 + 40) = v24;
      }
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v27;
      *(void *)(v0 + 64) = v25;
      swift_task_create();
      swift_release();
      unint64_t v6 = v46 + v34;
      uint64_t v2 = v39 - 1;
    }
    while (v39 != 1);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10018EB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[4] = a3;
  uint64_t v8 = type metadata accessor for URL();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Handle();
  v7[12] = v9;
  v7[13] = *(void *)(v9 - 8);
  v7[14] = swift_task_alloc();
  return _swift_task_switch(sub_10018EC88, 0, 0);
}

uint64_t sub_10018EC88()
{
  PersonHandle.id.getter();
  sub_10003BF98((uint64_t)_swiftEmptyArrayStorage);
  Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10018ED74;
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[6];
  return sub_1000F04D4(v3, v4, v2);
}

uint64_t sub_10018ED74(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  unint64_t v5 = (void *)*v2;
  v4[16] = a1;
  v4[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10018F13C, 0, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v4[18] = v6;
    *uint64_t v6 = v5;
    v6[1] = sub_10018EF00;
    uint64_t v7 = v4[14];
    uint64_t v8 = v4[11];
    uint64_t v9 = v4[6];
    return sub_100177388(a1, v7, v8, v9);
  }
}

uint64_t sub_10018EF00()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018F448;
  }
  else {
    uint64_t v2 = sub_10018F014;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018F014()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[13];
  uint64_t v14 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v7 = sub_100051354(v0[8], 0, 0);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10018F13C()
{
  unint64_t v17 = v0;
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[8];
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_errorRetain();
  uint64_t v3 = sub_100051354(v2, v1, 1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v3, v5, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    v0[2] = sub_100037004(0xD000000000000015, 0x8000000100376F60, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: Failed to share CK record: %{public}@", (uint8_t *)v11, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10018F448()
{
  uint64_t v20 = v0;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  swift_errorRetain();
  uint64_t v6 = sub_100051354(v5, v4, 1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000015, 0x8000000100376F60, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: Failed to share CK record: %{public}@", (uint8_t *)v14, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10018F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  os_log_type_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 232) = v13;
  *os_log_type_t v13 = v8;
  v13[1] = sub_10018F844;
  return sub_10007E358(a5, a6, a7, a8);
}

uint64_t sub_10018F844()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018FAA4;
  }
  else {
    uint64_t v2 = sub_10018F958;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018F958()
{
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 39;
  *(void *)(v0 + 192) = 0;
  *(unsigned char *)(v0 + 200) = 0;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v2 = sub_100050768(*(void *)(v0 + 216));
  uint64_t v4 = v3;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v4;
  unint64_t v5 = sub_1001013D8(inited);
  uint64_t v6 = sub_100050320(4, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10018FAA4()
{
  uint64_t v1 = *(void *)(v0 + 240);
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 39;
  *(void *)(v0 + 176) = v1;
  *(unsigned char *)(v0 + 184) = 1;
  swift_errorRetain();
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v3 = sub_100050768(*(void *)(v0 + 208));
  uint64_t v5 = v4;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 48) = v5;
  unint64_t v6 = sub_1001013D8(inited);
  uint64_t v7 = sub_100050320(4, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 224) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Task got error while sending CK share delete notification: %{public}@", v15, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_10018FDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[59] = a4;
  v6[60] = a6;
  uint64_t v8 = type metadata accessor for Fence.ID();
  v6[61] = v8;
  v6[62] = *(void *)(v8 - 8);
  v6[63] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v6[64] = v9;
  v6[65] = *(void *)(v9 - 8);
  v6[66] = swift_task_alloc();
  v6[67] = swift_projectBox();
  return _swift_task_switch(sub_10018FEE0, a4, 0);
}

uint64_t sub_10018FEE0()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[64];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  Fence.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[68] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10018FFF0;
  uint64_t v6 = v0[63];
  return sub_10019F294(v6);
}

uint64_t sub_10018FFF0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 504);
  uint64_t v4 = *(void *)(*v1 + 496);
  uint64_t v5 = *(void *)(*v1 + 488);
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 472);
  if (v0) {
    uint64_t v7 = sub_10019058C;
  }
  else {
    uint64_t v7 = sub_100190178;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100190178()
{
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 37;
  *(void *)(v0 + 360) = 0;
  *(unsigned char *)(v0 + 368) = 0;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v2 = sub_100050768(*(void *)(v0 + 456));
  uint64_t v4 = v3;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v4;
  unint64_t v5 = sub_1001013D8(inited);
  uint64_t v6 = sub_100050320(4, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100190300;
  uint64_t v12 = *(void *)(v0 + 480);
  return sub_100190BF0(v12);
}

uint64_t sub_100190300()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 472);
  if (v0) {
    uint64_t v4 = sub_1001908D4;
  }
  else {
    uint64_t v4 = sub_10019042C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019042C()
{
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 38;
  *(void *)(v0 + 392) = 0;
  *(unsigned char *)(v0 + 400) = 0;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v2 = sub_100050768(*(void *)(v0 + 424));
  uint64_t v4 = v3;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v4;
  unint64_t v5 = sub_1001013D8(inited);
  uint64_t v6 = sub_100050320(4, v5);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10019058C()
{
  uint64_t v1 = *(void *)(v0 + 552);
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 37;
  *(void *)(v0 + 408) = v1;
  *(unsigned char *)(v0 + 416) = 1;
  swift_errorRetain();
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v3 = sub_100050768(*(void *)(v0 + 448));
  uint64_t v5 = v4;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 48) = v5;
  unint64_t v6 = sub_1001013D8(inited);
  uint64_t v7 = sub_100050320(4, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 440) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Got an error while deleting fence trigger: %{public}@", v15, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100190300;
  uint64_t v19 = *(void *)(v0 + 480);
  return sub_100190BF0(v19);
}

uint64_t sub_1001908D4()
{
  uint64_t v1 = *(void *)(v0 + 568);
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(unsigned char *)(inited + 32) = 38;
  *(void *)(v0 + 376) = v1;
  *(unsigned char *)(v0 + 384) = 1;
  swift_errorRetain();
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v3 = sub_100050768(*(void *)(v0 + 432));
  uint64_t v5 = v4;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 48) = v5;
  unint64_t v6 = sub_1001013D8(inited);
  uint64_t v7 = sub_100050320(4, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 464) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Got an error while deleting CK share: %{public}@", v15, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100190BF0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudKitCoordinator.Database();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v2[12] = swift_task_alloc();
  sub_100044014(&qword_1003EE290);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FenceRecord();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  unint64_t v6 = (void *)swift_task_alloc();
  v2[17] = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_100190DF8;
  return daemon.getter();
}

uint64_t sub_100190DF8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 144) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 152) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100190FD4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100190FD4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[5];
    uint64_t v5 = sub_1001920D0;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1001910F8;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001910F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[22] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100191198;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[4];
  return sub_1000F62B0(v2, v3);
}

uint64_t sub_100191198()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100191614;
  }
  else {
    uint64_t v3 = sub_1001912C0;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1001912C0()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[15] + 48))(v1, 1, v0[14]) == 1)
  {
    sub_10000A520(v1, &qword_1003EE290);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[4];
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    uint64_t v5 = v0[6];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100044058(v6, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v11 = v0[7];
    uint64_t v10 = v0[8];
    uint64_t v12 = v0[6];
    if (v9)
    {
      uint64_t v21 = v0[6];
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      v0[2] = sub_100037004(0xD000000000000026, 0x8000000100376EF0, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      uint64_t v14 = UUID.uuidString.getter();
      v0[3] = sub_100037004(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v21);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: No fence with ckRecordIdentifier: %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  else
  {
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[16];
    sub_1000B8CE4(v1, v17);
    uint64_t v18 = swift_task_alloc();
    v0[24] = v18;
    *(void *)(v18 + 16) = v17;
    return _swift_task_switch(sub_1001916BC, v16, 0);
  }
}

uint64_t sub_100191614()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001916BC()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100191784;
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[12];
  return v5(v3, &unk_1003F0C70, v2);
}

uint64_t sub_100191784()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_100191B1C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_1001918AC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001918AC()
{
  uint64_t v1 = v0[20];
  (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for CloudKitCoordinator.Database.private(_:), v0[9]);
  return _swift_task_switch(sub_100191934, v1, 0);
}

uint64_t sub_100191934()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001919E4;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  return v5(v3, v2);
}

uint64_t sub_1001919E4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[20];
    uint64_t v4 = sub_100191ECC;
  }
  else
  {
    uint64_t v5 = v2[5];
    (*(void (**)(void, void))(v2[10] + 8))(v2[11], v2[9]);
    uint64_t v4 = sub_100191C3C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100191B1C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100191B88, v1, 0);
}

uint64_t sub_100191B88()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100191C3C()
{
  sub_100195184();
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 232) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v10;
  void *v10 = v0;
  v10[1] = sub_100191D84;
  return sub_1000EB6D4(v7, v9);
}

uint64_t sub_100191D84()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    Swift::String v4 = sub_100192178;
  }
  else {
    Swift::String v4 = sub_100192010;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100191ECC()
{
  uint64_t v1 = v0[5];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  return _swift_task_switch(sub_100191F48, v1, 0);
}

uint64_t sub_100191F48()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[12];
  swift_release();
  sub_10000A520(v2, &qword_1003EF468);
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100192010()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[12];
  swift_release();
  sub_10000A520(v2, &qword_1003EF468);
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001920D0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100192178()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[12];
  swift_release();
  sub_10000A520(v2, &qword_1003EF468);
  sub_1000B8D48(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100192240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v118 = a2;
  uint64_t v116 = a4;
  uint64_t v119 = a5;
  uint64_t v120 = a3;
  uint64_t v104 = type metadata accessor for Fence.ID();
  uint64_t v114 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v97 = (char *)v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100044014(&qword_1003F0D40);
  __chkstk_darwin(v102);
  uint64_t v109 = (uint64_t)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003ECD38);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v99 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v105 = (uint64_t)v96 - v12;
  __chkstk_darwin(v11);
  uint64_t v106 = (uint64_t)v96 - v13;
  uint64_t v14 = sub_100044014(&qword_1003F0350);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v103 = (uint64_t)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v127 = (uint64_t)v96 - v17;
  uint64_t v108 = type metadata accessor for Date();
  uint64_t v113 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v98 = (char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100044014(&qword_1003EEEB0);
  __chkstk_darwin(v107);
  uint64_t v115 = (uint64_t)v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v100 = (uint64_t)v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v112 = (uint64_t)v96 - v24;
  __chkstk_darwin(v23);
  uint64_t v122 = (uint64_t)v96 - v25;
  uint64_t v26 = type metadata accessor for PersonHandle();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (void (*)(char *, uint64_t))((char *)v96 - v31);
  uint64_t v33 = type metadata accessor for Fence();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v123 = (char *)v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v121 = (char *)v96 - v38;
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)v96 - v39;
  char v41 = sub_100165EB4();
  uint64_t v130 = v34;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  uint64_t v126 = a1;
  uint64_t v124 = v33;
  uint64_t v128 = v42;
  uint64_t v129 = v34 + 16;
  v42(v40, a1, v33);
  uint64_t v125 = v27;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v131 = v32;
  v43((char *)v32, v118, v26);
  unint64_t v117 = v40;
  if ((v41 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v44 = Fence.others.getter();
  uint64_t v45 = v44;
  uint64_t v118 = *(void *)(v44 + 16);
  if (!v118) {
    goto LABEL_5;
  }
  uint64_t v46 = v125;
  unint64_t v47 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
  v43(v30, v44 + v47, v26);
  uint64_t v111 = sub_1000472C4(&qword_1003F0390, (void (*)(uint64_t))&type metadata accessor for PersonHandle);
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v110 = *(void (**)(char *, uint64_t))(v46 + 8);
  v110(v30, v26);
  if (v48)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    int v49 = 1;
LABEL_7:
    uint64_t v51 = v126;
    uint64_t v50 = v127;
    uint64_t v52 = v124;
    uint64_t v54 = v121;
    uint64_t v53 = v122;
    (*(void (**)(void, uint64_t))(v125 + 8))(v131, v26);
    uint64_t v55 = v130 + 8;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v130 + 8);
    v56(v117, v52);
    v128(v54, v51, v52);
    sub_100013210(v120, v53, (uint64_t *)&unk_1003EE800);
    if (!v49)
    {
      sub_10000A520(v53, (uint64_t *)&unk_1003EE800);
      v56(v54, v52);
      uint64_t v64 = v123;
      uint64_t v65 = v116;
      goto LABEL_12;
    }
    uint64_t v125 = v55;
    uint64_t v131 = v56;
    uint64_t v57 = v112;
    uint64_t v58 = v53;
    Fence.muteEndDate.getter();
    uint64_t v59 = v115;
    uint64_t v60 = v115 + *(int *)(v107 + 48);
    sub_100013210(v57, v115, (uint64_t *)&unk_1003EE800);
    sub_100013210(v58, v60, (uint64_t *)&unk_1003EE800);
    uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
    uint64_t v62 = v108;
    if (v61(v59, 1, v108) == 1)
    {
      sub_10000A520(v57, (uint64_t *)&unk_1003EE800);
      sub_10000A520(v58, (uint64_t *)&unk_1003EE800);
      uint64_t v56 = v131;
      v131(v54, v52);
      int v63 = v61(v60, 1, v62);
      uint64_t v51 = v126;
      if (v63 == 1)
      {
        sub_10000A520(v115, (uint64_t *)&unk_1003EE800);
        uint64_t v50 = v127;
        uint64_t v64 = v123;
        uint64_t v65 = v116;
LABEL_12:
        v128(v64, v51, v52);
        sub_100013210(v65, v50, &qword_1003F0350);
        uint64_t v66 = v119;
LABEL_13:
        sub_10000A520(v50, &qword_1003F0350);
        v56(v64, v52);
LABEL_14:
        uint64_t v67 = 1;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v66, v67, 1, v52);
      }
    }
    else
    {
      uint64_t v68 = v100;
      sub_100013210(v59, v100, (uint64_t *)&unk_1003EE800);
      if (v61(v60, 1, v62) != 1)
      {
        uint64_t v70 = v113;
        uint64_t v71 = v98;
        (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v98, v60, v62);
        sub_1000472C4(&qword_1003EE820, (void (*)(uint64_t))&type metadata accessor for Date);
        LODWORD(v118) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v72 = *(void (**)(char *, uint64_t))(v70 + 8);
        v72(v71, v62);
        sub_10000A520(v112, (uint64_t *)&unk_1003EE800);
        sub_10000A520(v122, (uint64_t *)&unk_1003EE800);
        uint64_t v56 = v131;
        v131(v121, v52);
        v72((char *)v68, v62);
        sub_10000A520(v115, (uint64_t *)&unk_1003EE800);
        uint64_t v64 = v123;
        v128(v123, v126, v52);
        uint64_t v50 = v127;
        sub_100013210(v116, v127, &qword_1003F0350);
        uint64_t v66 = v119;
        uint64_t v69 = v104;
        if (v118) {
          goto LABEL_13;
        }
LABEL_19:
        uint64_t v73 = (void (*)(uint64_t, uint64_t))v56;
        uint64_t v74 = v106;
        Fence.id.getter();
        uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56);
        v75(v74, 0, 1, v69);
        uint64_t v76 = v103;
        sub_100013210(v127, v103, &qword_1003F0350);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v76, 1, v52) == 1)
        {
          sub_10000A520(v76, &qword_1003F0350);
          uint64_t v77 = 1;
          uint64_t v78 = v105;
        }
        else
        {
          uint64_t v78 = v105;
          Fence.id.getter();
          v73(v76, v52);
          uint64_t v77 = 0;
        }
        uint64_t v79 = v102;
        v75(v78, v77, 1, v69);
        uint64_t v80 = v109;
        uint64_t v81 = v109 + *(int *)(v79 + 48);
        sub_100013210(v74, v109, &qword_1003ECD38);
        sub_100013210(v78, v81, &qword_1003ECD38);
        uint64_t v82 = v69;
        uint64_t v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
        if (v83(v80, 1, v82) == 1)
        {
          sub_10000A520(v78, &qword_1003ECD38);
          sub_10000A520(v74, &qword_1003ECD38);
          sub_10000A520(v127, &qword_1003F0350);
          uint64_t v52 = v124;
          v73((uint64_t)v123, v124);
          if (v83(v81, 1, v82) == 1)
          {
            sub_10000A520(v109, &qword_1003ECD38);
            uint64_t v67 = 1;
            uint64_t v66 = v119;
            return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v66, v67, 1, v52);
          }
        }
        else
        {
          uint64_t v84 = (uint64_t)v99;
          sub_100013210(v80, (uint64_t)v99, &qword_1003ECD38);
          if (v83(v81, 1, v82) != 1)
          {
            uint64_t v91 = v114;
            uint64_t v92 = v97;
            (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v97, v81, v82);
            sub_1000472C4(&qword_1003F0D48, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
            LODWORD(v131) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v93 = *(void (**)(char *, uint64_t))(v91 + 8);
            v93(v92, v82);
            sub_10000A520(v105, &qword_1003ECD38);
            sub_10000A520(v106, &qword_1003ECD38);
            sub_10000A520(v127, &qword_1003F0350);
            uint64_t v94 = v124;
            v73((uint64_t)v123, v124);
            v93(v99, v82);
            uint64_t v95 = v80;
            uint64_t v52 = v94;
            sub_10000A520(v95, &qword_1003ECD38);
            uint64_t v66 = v119;
            uint64_t v85 = v126;
            if (v131) {
              goto LABEL_14;
            }
LABEL_28:
            v128(v66, v85, v52);
            Fence.update(muteEndDate:)();
            uint64_t v67 = 0;
            return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v66, v67, 1, v52);
          }
          sub_10000A520(v105, &qword_1003ECD38);
          sub_10000A520(v106, &qword_1003ECD38);
          sub_10000A520(v127, &qword_1003F0350);
          uint64_t v52 = v124;
          v73((uint64_t)v123, v124);
          (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v84, v82);
        }
        sub_10000A520(v109, &qword_1003F0D40);
        uint64_t v66 = v119;
        uint64_t v85 = v126;
        goto LABEL_28;
      }
      sub_10000A520(v112, (uint64_t *)&unk_1003EE800);
      sub_10000A520(v122, (uint64_t *)&unk_1003EE800);
      uint64_t v56 = v131;
      v131(v121, v52);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v68, v62);
      uint64_t v51 = v126;
    }
    sub_10000A520(v115, &qword_1003EEEB0);
    v128(v123, v51, v52);
    sub_100013210(v116, v127, &qword_1003F0350);
    uint64_t v69 = v104;
    goto LABEL_19;
  }
  if (v118 == 1)
  {
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_6:
    int v49 = 0;
    goto LABEL_7;
  }
  uint64_t v101 = *(void *)(v125 + 72);
  v96[1] = v45;
  unint64_t v87 = v45 + v101 + v47;
  uint64_t v88 = 1;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v43)(v30, v87, v26);
    uint64_t v89 = v88 + 1;
    if (__OFADD__(v88, 1)) {
      break;
    }
    char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
    v110(v30, v26);
    if (v90) {
      goto LABEL_37;
    }
    ++v88;
    v87 += v101;
    if (v89 == v118) {
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100193198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  uint64_t v7 = type metadata accessor for Fence();
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  v5[15] = *(void *)(v8 + 64);
  v5[16] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_1001932A8, a4, 0);
}

uint64_t sub_1001932A8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + ((v4 + 32) & ~v4);
    uint64_t v31 = *(void *)(v3 + 72);
    uint64_t v30 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v29 = (v4 + 40) & ~v4;
    unint64_t v28 = (*(void *)(v0 + 120) + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v6 = type metadata accessor for TaskPriority();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v25 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v24 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v33 = v2;
      uint64_t v9 = *(void *)(v0 + 136);
      uint64_t v10 = *(void *)(v0 + 144);
      uint64_t v11 = *(void *)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 104);
      uint64_t v34 = *(void *)(v0 + 96);
      uint64_t v13 = *(void *)(v0 + 88);
      v26(v10, 1, 1, v6);
      uint64_t v32 = v5;
      (*v30)(v11, v5, v12);
      uint64_t v14 = (void *)swift_allocObject();
      v14[2] = 0;
      uint64_t v15 = v14 + 2;
      v14[3] = 0;
      v14[4] = v13;
      (*v27)((char *)v14 + v29, v11, v12);
      *(void *)((char *)v14 + v28) = v34;
      sub_100013210(v10, v9, (uint64_t *)&unk_1003F3C10);
      LODWORD(v9) = (*v25)(v9, 1, v6);
      swift_retain();
      uint64_t v16 = *(void *)(v0 + 136);
      if (v9 == 1)
      {
        sub_10000A520(*(void *)(v0 + 136), (uint64_t *)&unk_1003F3C10);
        if (!*v15) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v24)(v16, v6);
        if (!*v15)
        {
LABEL_8:
          uint64_t v17 = 0;
          uint64_t v19 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v20 = **(void **)(v0 + 72);
      uint64_t v21 = v19 | v17;
      if (v19 | v17)
      {
        uint64_t v21 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v17;
        *(void *)(v0 + 40) = v19;
      }
      uint64_t v8 = *(void *)(v0 + 144);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v21;
      *(void *)(v0 + 64) = v20;
      swift_task_create();
      swift_release();
      sub_10000A520(v8, (uint64_t *)&unk_1003F3C10);
      uint64_t v5 = v32 + v31;
      uint64_t v2 = v33 - 1;
      if (v33 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100193614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a4;
  uint64_t v6 = type metadata accessor for Fence.ID();
  v4[5] = v6;
  v4[6] = *(void *)(v6 - 8);
  v4[7] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence();
  v4[8] = v7;
  v4[9] = *(void *)(v7 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  v4[11] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[12] = v9;
  void *v9 = v4;
  v9[1] = sub_10019378C;
  return sub_10018B5D4(v8, a4);
}

uint64_t sub_10019378C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100193998;
  }
  else
  {
    (*(void (**)(void, void))(v2[9] + 8))(v2[11], v2[8]);
    uint64_t v3 = sub_1001938B8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001938B8()
{
  uint64_t v1 = sub_100050FF4(*(void *)(v0 + 32), 0, 0);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v1, v3, v5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100193998()
{
  uint64_t v34 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[13];
  swift_errorRetain();
  uint64_t v3 = sub_100050FF4(v1, v2, 1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v3, v5, v7);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v9 = v0[9];
  uint64_t v8 = v0[10];
  uint64_t v10 = v0[8];
  uint64_t v11 = v0[4];
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v17 = v0[9];
  uint64_t v16 = v0[10];
  if (v15)
  {
    os_log_type_t type = v14;
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[7];
    uint64_t v20 = v0[5];
    uint64_t v29 = v0[8];
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446466;
    log = v13;
    Fence.id.getter();
    sub_1000472C4(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = v16;
    unint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    v0[2] = sub_100037004(v22, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v28, v29);
    *(_WORD *)(v21 + 12) = 2114;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v25;
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v13 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to mute fence with ID: %{public}s error: %{public}@", (uint8_t *)v21, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v17 + 8))(v0[10], v0[8]);
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_100193D8C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  type metadata accessor for FenceRecord();
  v3[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudKitCoordinator.Database();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v3[11] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v3[12] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100193EDC;
  return daemon.getter();
}

uint64_t sub_100193EDC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 104) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1000472C4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000472C4(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001940B8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001940B8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_10018E014;
  }
  else
  {
    uint64_t v6 = v3[6];
    swift_release();
    uint64_t v5 = sub_1001941E0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001941E0()
{
  sub_100195184();
  v1._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2._object = v3;
  v4._countAndFlagsBits = 0x2D65636E6546;
  v4._object = (void *)0xE600000000000000;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v4, v2).super.isa;
  id v6 = [(objc_class *)isa zoneName];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 136) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  void *v10 = v0;
  v10[1] = sub_100194328;
  return sub_1000F41BC(v7, v9);
}

uint64_t sub_100194328()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    Swift::String v4 = sub_100194DA0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_bridgeObjectRelease();
    Swift::String v4 = sub_100194450;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100194450()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[5];
  uint64_t v3 = swift_task_alloc();
  v0[20] = v3;
  *(void *)(v3 + 16) = v2;
  return _swift_task_switch(sub_1001944C8, v1, 0);
}

uint64_t sub_1001944C8()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[21] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100194590;
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[11];
  return v5(v3, &unk_1003F0CE8, v2);
}

uint64_t sub_100194590()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    Swift::String v4 = sub_100194928;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_task_dealloc();
    Swift::String v4 = sub_1001946B8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001946B8()
{
  uint64_t v1 = v0[15];
  (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for CloudKitCoordinator.Database.private(_:), v0[8]);
  return _swift_task_switch(sub_100194740, v1, 0);
}

uint64_t sub_100194740()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[23] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001947F0;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  return v5(v3, v2);
}

uint64_t sub_1001947F0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[15];
    Swift::String v4 = sub_1001949BC;
  }
  else
  {
    uint64_t v5 = v2[6];
    (*(void (**)(void, void))(v2[9] + 8))(v2[10], v2[8]);
    Swift::String v4 = sub_100194AD4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100194928()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001949BC()
{
  uint64_t v1 = v0[6];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  return _swift_task_switch(sub_100194A38, v1, 0);
}

uint64_t sub_100194A38()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  sub_10000A520(v1, &qword_1003EF468);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100194AD4()
{
  uint64_t v16 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B770);
  sub_1000D0F7C(v2, v1);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  uint64_t v8 = v0[7];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v15 = v10;
    v0[2] = sub_100037004(0xD000000000000012, 0x8000000100376FA0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2082;
    type metadata accessor for UUID();
    sub_1000472C4(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000B8D48(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s succeed with record: %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();

    sub_1000B8D48(v8);
  }
  sub_10000A520(v7, &qword_1003EF468);
  sub_1000D0F7C(v0[5], v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100194DA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100194E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FenceRecord();
  uint64_t v6 = sub_1000472C4(&qword_1003EF488, (void (*)(uint64_t))type metadata accessor for FenceRecord);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return CloudKitChangeSet.Adaptor.create<A>(record:)(a2, v5, v6);
}

uint64_t sub_100194F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FenceRecord();
  uint64_t v6 = sub_1000472C4(&qword_1003EF488, (void (*)(uint64_t))type metadata accessor for FenceRecord);
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return CloudKitChangeSet.Adaptor.delete<A>(record:)(a2, v5, v6);
}

uint64_t sub_10019501C(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000801A4;
  return v4();
}

uint64_t sub_1001950E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100018CD0;
  return sub_100194F28(a1, v4);
}

unint64_t sub_100195184()
{
  unint64_t result = qword_1003EE978;
  if (!qword_1003EE978)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003EE978);
  }
  return result;
}

uint64_t sub_1001951C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100018CD0;
  return sub_10018E504(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_10019529C()
{
  uint64_t v1 = type metadata accessor for PersonHandle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v21 + 32) & ~v21;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = (int *)type metadata accessor for FenceRecord();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v20 = *(void *)(*((void *)v5 - 1) + 64);
  uint64_t v22 = type metadata accessor for Fence();
  uint64_t v8 = *(void *)(v22 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = *(void *)(v8 + 64);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v7, v10);
  swift_bridgeObjectRelease();

  uint64_t v11 = v0 + v7 + v5[8];
  uint64_t v12 = type metadata accessor for Fence.Schedule();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = v0 + v7 + v5[9];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  unint64_t v17 = (((v20 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v17, v22);

  return _swift_deallocObject(v0, ((v19 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v21 | v6 | v9 | 7);
}

uint64_t sub_100195648()
{
  uint64_t v2 = *(void *)(type metadata accessor for PersonHandle() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for FenceRecord() - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for Fence() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v0 + 24);
  uint64_t v12 = *(void *)(v0 + v4);
  uint64_t v13 = *(void *)(v0 + v7);
  uint64_t v14 = v0 + v9;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_10004A274;
  return sub_10018EB64(v10, v11, v0 + v3, v12, v0 + v6, v13, v14);
}

uint64_t sub_100195850()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100195888(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_100194E34(a1, v4);
}

uint64_t sub_100195924(uint64_t a1)
{
  return sub_100229D28(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10019592C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100195A14(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10004A274;
  return sub_10018FDB0(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_100195B4C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100195C4C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  void *v8 = v1;
  v8[1] = sub_10004A274;
  uint64_t v9 = (void *)swift_task_alloc();
  v8[29] = v9;
  void *v9 = v8;
  v9[1] = sub_10018F844;
  return sub_10007E358(v4, v5, v6, v7);
}

uint64_t sub_100195DB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_100192240(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100195DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10004A274;
  return sub_100193198(a1, a2, v6, v7, v8);
}

uint64_t sub_100195E94()
{
  uint64_t v1 = type metadata accessor for Fence();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100195F74()
{
  uint64_t v2 = *(void *)(type metadata accessor for Fence() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_100193614(v3, v4, v5, v6);
}

void *sub_100196094(uint64_t a1)
{
  uint64_t v18 = type metadata accessor for Destination();
  uint64_t v3 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v16[0] = v1;
    unint64_t v23 = _swiftEmptyArrayStorage;
    sub_100245DE8(0, v6, 0);
    uint64_t v7 = v23;
    uint64_t v8 = *(void *)(type metadata accessor for PersonHandle() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v17 = *(void *)(v8 + 72);
    v16[1] = v3 + 32;
    do
    {
      uint64_t v21 = PersonHandle.id.getter();
      uint64_t v22 = v10;
      uint64_t v19 = 64;
      unint64_t v20 = 0xE100000000000000;
      sub_10004650C();
      uint64_t v11 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      PersonHandle.id.getter();
      if (v12 == 2) {
        Destination.init(email:)();
      }
      else {
        Destination.init(phoneNumber:)();
      }
      unint64_t v23 = v7;
      unint64_t v14 = v7[2];
      unint64_t v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        sub_100245DE8(v13 > 1, v14 + 1, 1);
        uint64_t v7 = v23;
      }
      v7[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v14, v5, v18);
      v9 += v17;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1001962F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  sub_100044014(&qword_1003F0D58);
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.TriggerPosition();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Schedule.Matcher();
  v4[29] = v7;
  v4[30] = *(void *)(v7 - 8);
  v4[31] = swift_task_alloc();
  sub_100044014(&qword_1003F0D60);
  v4[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DateInterval();
  v4[33] = v8;
  v4[34] = *(void *)(v8 - 8);
  v4[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.Variant();
  v4[36] = v9;
  v4[37] = *(void *)(v9 - 8);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.Schedule();
  v4[40] = v10;
  v4[41] = *(void *)(v10 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  sub_100044014(&qword_1003F0C38);
  v4[45] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.TriggerID();
  v4[46] = v11;
  v4[47] = *(void *)(v11 - 8);
  v4[48] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence.ID();
  v4[49] = v12;
  v4[50] = *(void *)(v12 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v4[56] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Fence();
  v4[57] = v13;
  v4[58] = *(void *)(v13 - 8);
  v4[59] = swift_task_alloc();
  unint64_t v14 = (void *)swift_task_alloc();
  v4[60] = v14;
  *unint64_t v14 = v4;
  v14[1] = sub_100196820;
  return daemon.getter();
}

uint64_t sub_100196820(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[61] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[62] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[63] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[64] = v6;
  uint64_t v7 = sub_10004730C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100196A00;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100196A00(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[65] = a1;
  v3[66] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[17];
    return _swift_task_switch(sub_100199614, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[67] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100196B94;
    uint64_t v7 = v3[56];
    uint64_t v8 = v3[14];
    return sub_1001327B8(v7, v8);
  }
}

uint64_t sub_100196B94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_100196CA4, v1, 0);
}

uint64_t sub_100196CA4()
{
  uint64_t v55 = v0;
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[56];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v3, &qword_1003F0350);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[50];
    uint64_t v4 = v0[51];
    uint64_t v6 = v0[49];
    uint64_t v7 = v0[14];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[50];
    uint64_t v12 = v0[51];
    uint64_t v14 = v0[49];
    if (v11)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      v0[2] = sub_100037004(0xD000000000000031, 0x8000000100377090, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_100037004(v16, v17, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Fence %{public}s trigger was received, but no fence is found!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[51], v0[49]);
    }

    uint64_t v42 = sub_1000511F8(v0[16]);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v42, v44, v46);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v47 = (uint64_t (*)(void))v0[1];
    return v47();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[59], v3, v1);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v18 = v0[14];
    uint64_t v19 = v0[55];
    uint64_t v20 = v0[49];
    uint64_t v21 = v0[50];
    uint64_t v22 = v0[47];
    uint64_t v53 = v0[48];
    uint64_t v23 = v0[46];
    uint64_t v24 = v0[15];
    uint64_t v25 = type metadata accessor for Logger();
    v0[68] = sub_100044058(v25, (uint64_t)qword_10040B770);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v0[69] = v26;
    v0[70] = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v26(v19, v18, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v53, v24, v23);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v0[55];
    uint64_t v32 = v0[49];
    uint64_t v31 = v0[50];
    uint64_t v34 = v0[47];
    uint64_t v33 = v0[48];
    uint64_t v35 = v0[46];
    if (v29)
    {
      uint64_t v51 = v0[46];
      uint64_t v50 = v0[48];
      uint64_t v36 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446722;
      os_log_type_t type = v28;
      v0[11] = sub_100037004(0xD000000000000031, 0x8000000100377090, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = sub_100037004(v37, v38, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v39(v30, v32);
      *(_WORD *)(v36 + 22) = 2082;
      sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = sub_100037004(v40, v41, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v50, v51);
      _os_log_impl((void *)&_mh_execute_header, v27, type, "%{public}s Fence %{public}s trigger was received (%{public}s)", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v39(v0[55], v0[49]);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
    v0[71] = v39;
    int v49 = (void *)swift_task_alloc();
    v0[72] = v49;
    *int v49 = v0;
    v49[1] = sub_1001974DC;
    return daemon.getter();
  }
}

uint64_t sub_1001974DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 584) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 592) = v5;
  uint64_t v6 = type metadata accessor for LocalStorageService();
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_100197690;
  uint64_t v8 = *(void *)(v2 + 512);
  uint64_t v9 = *(void *)(v2 + 504);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100197690(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[75] = a1;
  v3[76] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[17];
    uint64_t v5 = sub_1001997CC;
  }
  else
  {
    uint64_t v6 = v3[17];
    swift_release();
    uint64_t v5 = sub_1001977BC;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001977BC()
{
  uint64_t v67 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);
  Fence.variant.getter();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88);
  *(void *)(v0 + 616) = v4;
  *(void *)(v0 + 624) = (v3 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
  int v5 = v4(v1, v2);
  int v6 = enum case for Fence.Variant.oneTime(_:);
  *(_DWORD *)(v0 + 712) = enum case for Fence.Variant.oneTime(_:);
  int v7 = enum case for Fence.Variant.recurring(_:);
  *(_DWORD *)(v0 + 716) = enum case for Fence.Variant.recurring(_:);
  if (v5 == v6 || v5 == v7)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 288));
LABEL_10:
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 552);
    uint64_t v20 = *(void *)(v0 + 416);
    uint64_t v21 = *(void *)(v0 + 392);
    uint64_t v23 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 152);
    uint64_t v25 = *(void *)(v0 + 128);
    uint64_t v26 = *(void *)(v0 + 112);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v23 + 56))(*(void *)(v0 + 360), 1, 1, v24);
    v19(v20, v26, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 416);
    uint64_t v31 = *(void *)(v0 + 392);
    if (v29)
    {
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
      uint64_t v32 = *(void *)(v0 + 224);
      uint64_t v58 = *(void *)(v0 + 208);
      uint64_t v54 = *(void *)(v0 + 216);
      uint64_t v56 = *(void *)(v0 + 168);
      uint64_t v61 = *(void *)(v0 + 160);
      uint64_t v64 = *(void *)(v0 + 152);
      uint64_t v33 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136446722;
      *(void *)(v0 + 32) = sub_100037004(0xD000000000000031, 0x8000000100377090, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_100037004(v34, v35, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v53(v30, v31);
      *(_WORD *)(v33 + 22) = 2082;
      sub_10019A184(v32);
      uint64_t v36 = Date.localISO8601.getter();
      unint64_t v38 = v37;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v32, v58);
      *(void *)(v0 + 48) = sub_100037004(v36, v38, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v56, v64);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s Scheduled fence %{public}s is triggered for the first time in current schedule interval at: %{public}s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 160);
      uint64_t v39 = *(void *)(v0 + 168);
      uint64_t v41 = *(void *)(v0 + 152);
      (*(void (**)(void, void))(v0 + 568))(*(void *)(v0 + 416), *(void *)(v0 + 392));
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    }

    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 672) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_100198A58;
    uint64_t v43 = *(void *)(v0 + 472);
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 128);
    uint64_t v46 = *(void *)(v0 + 120);
    return sub_1001AC910(v43, v46, v45, v44);
  }
  if (v5 != enum case for Fence.Variant.scheduled(_:)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v63 = *(void *)(v0 + 272);
  *(void *)os_log_type_t type = *(void *)(v0 + 264);
  uint64_t v55 = *(void *)(v0 + 336);
  uint64_t v57 = *(void *)(v0 + 256);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v60 = *(void *)(v0 + 240);
  uint64_t v62 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 216);
  os_log_t log = *(os_log_t *)(v0 + 208);
  uint64_t v52 = *(void *)(v0 + 248);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 296) + 96))(v13, *(void *)(v0 + 288));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  v16(v10, v13, v12);
  v16(v9, v10, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v55, v9, v12);
  Fence.Schedule.Matcher.init(schedule:)();
  sub_10019A184(v14);
  Fence.Schedule.Matcher.interval(containingDate:)();
  unint64_t v17 = *(void (**)(uint64_t, os_log_t))(v15 + 8);
  *(void *)(v0 + 632) = v17;
  *(void *)(v0 + 640) = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v14, log);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v52, v62);
  if ((*(unsigned int (**)(uint64_t, uint64_t, os_log_type_t *))(v63 + 48))(v57, 1, *(os_log_type_t **)type) == 1)
  {
    uint64_t v18 = *(void *)(v0 + 256);
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 320));
    sub_10000A520(v18, &qword_1003F0D60);
    goto LABEL_10;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 272) + 32))(*(void *)(v0 + 280), *(void *)(v0 + 256), *(void *)(v0 + 264));
  Fence.id.getter();
  char v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 648) = v48;
  *char v48 = v0;
  v48[1] = sub_100197EC4;
  uint64_t v49 = *(void *)(v0 + 432);
  uint64_t v50 = *(void *)(v0 + 280);
  uint64_t v51 = *(void *)(v0 + 144);
  return sub_1002207C4(v51, v49, v50);
}

uint64_t sub_100197EC4()
{
  uint64_t v2 = (void *)*v1;
  v2[82] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[71];
  uint64_t v4 = v2[54];
  uint64_t v5 = v2[49];
  uint64_t v6 = v2[17];
  if (v0)
  {
    v3(v4, v5);
    int v7 = sub_100199A18;
  }
  else
  {
    v2[83] = (v2[50] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v3(v4, v5);
    int v7 = sub_10019806C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10019806C()
{
  uint64_t v102 = v0;
  uint64_t v1 = v0[18];
  uint64_t v2 = type metadata accessor for FenceTriggerRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = v0[44];
    uint64_t v4 = v0[40];
    uint64_t v5 = v0[41];
    uint64_t v7 = v0[34];
    uint64_t v6 = v0[35];
    uint64_t v8 = v0[33];
    sub_10000A520(v1, &qword_1003F0D58);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t))v0[69];
    uint64_t v10 = v0[52];
    uint64_t v11 = v0[49];
    uint64_t v13 = v0[20];
    uint64_t v12 = v0[21];
    uint64_t v14 = v0[19];
    uint64_t v15 = v0[16];
    uint64_t v16 = v0[14];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v13 + 56))(v0[45], 1, 1, v14);
    v9(v10, v16, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[52];
    uint64_t v21 = v0[49];
    if (v19)
    {
      uint64_t v22 = v0[28];
      uint64_t v83 = v0[26];
      uint64_t v77 = v0[27];
      uint64_t v80 = v0[21];
      uint64_t v90 = v0[20];
      uint64_t v97 = v0[19];
      os_log_t v75 = (os_log_t)v0[71];
      uint64_t v23 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446722;
      v0[4] = sub_100037004(0xD000000000000031, 0x8000000100377090, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_100037004(v24, v25, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v75)(v20, v21);
      *(_WORD *)(v23 + 22) = 2082;
      sub_10019A184(v22);
      uint64_t v26 = Date.localISO8601.getter();
      unint64_t v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v22, v83);
      v0[6] = sub_100037004(v26, v28, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v80, v97);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s Scheduled fence %{public}s is triggered for the first time in current schedule interval at: %{public}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v52 = v0[20];
      uint64_t v51 = v0[21];
      uint64_t v53 = v0[19];
      ((void (*)(void, void))v0[71])(v0[52], v0[49]);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    }
  }
  else
  {
    uint64_t v91 = (void (*)(uint64_t, uint64_t, os_log_t))v0[69];
    os_log_t log = (os_log_t)v0[49];
    uint64_t v29 = v0[45];
    uint64_t v31 = v0[24];
    uint64_t v30 = v0[25];
    uint64_t v81 = v0[53];
    uint64_t v84 = v0[23];
    uint64_t v94 = v0[22];
    uint64_t v33 = v0[19];
    uint64_t v32 = v0[20];
    uint64_t v78 = v0[16];
    uint64_t v34 = v0[14];
    unint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v35(v31, v1 + *(int *)(v2 + 24), v33);
    sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v30, v31, v33);
    v35(v29, v30, v33);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v33);
    v91(v81, v34, log);
    v35(v84, v78, v33);
    v35(v94, v30, v33);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v72 = (void (*)(uint64_t, uint64_t))v0[79];
      uint64_t v70 = (void (*)(uint64_t, uint64_t))v0[71];
      uint64_t v76 = v36;
      uint64_t v38 = v0[53];
      uint64_t v39 = v0[49];
      uint64_t v98 = v0[44];
      uint64_t v92 = v0[41];
      uint64_t v95 = v0[40];
      uint64_t v85 = v0[33];
      os_log_t loga = (os_log_t)v0[35];
      uint64_t v40 = v0[28];
      uint64_t v71 = v0[26];
      uint64_t v79 = v0[25];
      uint64_t v82 = v0[34];
      uint64_t v69 = v0[23];
      uint64_t v74 = v0[22];
      uint64_t v41 = v0[20];
      uint64_t v73 = v0[19];
      uint64_t v42 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446978;
      v0[7] = sub_100037004(0xD000000000000031, 0x8000000100377090, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100037004(v43, v44, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v70(v38, v39);
      *(_WORD *)(v42 + 22) = 2082;
      sub_10019A184(v40);
      uint64_t v45 = Date.localISO8601.getter();
      unint64_t v47 = v46;
      v72(v40, v71);
      v0[9] = sub_100037004(v45, v47, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      char v48 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v48(v69, v73);
      *(_WORD *)(v42 + 32) = 2082;
      sub_10004730C(&qword_1003EEA60, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerPosition);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[10] = sub_100037004(v49, v50, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48(v74, v73);
      _os_log_impl((void *)&_mh_execute_header, v76, v37, "%{public}s Scheduled fence %{public}s was triggered earlier in the current schedule interval at: %{public}s previousPosition: %{public}s", (uint8_t *)v42, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v48(v79, v73);
      (*(void (**)(os_log_t, uint64_t))(v82 + 8))(loga, v85);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v95);
    }
    else
    {
      uint64_t v86 = v0[53];
      os_log_t logb = (os_log_t)v0[71];
      uint64_t v54 = v0[49];
      uint64_t v100 = v0[44];
      uint64_t v55 = v0[41];
      uint64_t v56 = v0[34];
      uint64_t v96 = v0[35];
      uint64_t v99 = v0[40];
      uint64_t v93 = v0[33];
      uint64_t v57 = v0[25];
      uint64_t v58 = v0[22];
      uint64_t v59 = v0[23];
      uint64_t v60 = v0[19];
      uint64_t v61 = v0[20];

      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v62(v58, v60);
      v62(v59, v60);
      ((void (*)(uint64_t, uint64_t))logb)(v86, v54);
      v62(v57, v60);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v96, v93);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v100, v99);
    }
  }
  uint64_t v63 = (void *)swift_task_alloc();
  v0[84] = v63;
  void *v63 = v0;
  v63[1] = sub_100198A58;
  uint64_t v64 = v0[59];
  uint64_t v65 = v0[45];
  uint64_t v66 = v0[16];
  uint64_t v67 = v0[15];
  return sub_1001AC910(v64, v67, v66, v65);
}

uint64_t sub_100198A58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_100199CA4;
  }
  else {
    uint64_t v4 = sub_100198B84;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100198B84()
{
  int v1 = *(_DWORD *)(v0 + 712);
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 288);
  Fence.variant.getter();
  int v5 = v2(v3, v4);
  if (v5 == v1)
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100198F38;
    uint64_t v7 = *(void *)(v0 + 112);
    return sub_1001A82A8(v7);
  }
  else
  {
    int v9 = v5;
    int v10 = *(_DWORD *)(v0 + 716);
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
    if (v9 == v10 || v9 == enum case for Fence.Variant.scheduled(_:))
    {
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 704) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_1001992C0;
      uint64_t v22 = *(void *)(v0 + 128);
      uint64_t v24 = *(void *)(v0 + 112);
      uint64_t v23 = *(void *)(v0 + 120);
      return sub_1001A8F98(v24, v22, v23);
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 464);
      uint64_t v11 = *(void *)(v0 + 472);
      uint64_t v13 = *(void *)(v0 + 456);
      uint64_t v14 = *(void *)(v0 + 360);
      uint64_t v15 = sub_100051208(*(void *)(v0 + 128), 0, 0);
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v15, v17, v19);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_release();
      sub_10000A520(v14, &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
      return v20();
    }
  }
}

uint64_t sub_100198F38()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 696) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_100199F04;
  }
  else {
    uint64_t v4 = sub_100199064;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100199064()
{
  (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
  uint64_t v2 = v0[58];
  uint64_t v1 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[45];
  uint64_t v5 = sub_100051208(v0[16], 0, 0);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v5, v7, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  sub_10000A520(v4, &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1001992C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001993D0, v1, 0);
}

uint64_t sub_1001993D0()
{
  uint64_t v2 = v0[58];
  uint64_t v1 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[45];
  uint64_t v5 = sub_100051208(v0[16], 0, 0);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v5, v7, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
  sub_10000A520(v4, &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100199614()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001997CC()
{
  swift_release();
  uint64_t v1 = v0[76];
  uint64_t v3 = v0[58];
  uint64_t v2 = v0[59];
  uint64_t v4 = v0[57];
  uint64_t v5 = v0[16];
  swift_errorRetain();
  uint64_t v6 = sub_100051208(v5, v1, 1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100199A18()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  uint64_t v5 = v0[34];
  uint64_t v4 = v0[35];
  uint64_t v6 = v0[33];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v7 = v0[82];
  uint64_t v9 = v0[58];
  uint64_t v8 = v0[59];
  uint64_t v10 = v0[57];
  uint64_t v11 = v0[16];
  swift_errorRetain();
  uint64_t v12 = sub_100051208(v11, v7, 1);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v12, v14, v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100199CA4()
{
  uint64_t v1 = v0[45];
  swift_release();
  sub_10000A520(v1, &qword_1003F0C38);
  uint64_t v2 = v0[85];
  uint64_t v4 = v0[58];
  uint64_t v3 = v0[59];
  uint64_t v5 = v0[57];
  uint64_t v6 = v0[16];
  swift_errorRetain();
  uint64_t v7 = sub_100051208(v6, v2, 1);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100199F04()
{
  uint64_t v1 = v0[45];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  uint64_t v4 = v0[36];
  swift_release();
  sub_10000A520(v1, &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = v0[87];
  uint64_t v7 = v0[58];
  uint64_t v6 = v0[59];
  uint64_t v8 = v0[57];
  uint64_t v9 = v0[16];
  swift_errorRetain();
  uint64_t v10 = sub_100051208(v9, v5, 1);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v10, v12, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

void sub_10019A184(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void **)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for Fence.TriggerPosition.inside(_:) || v8 == enum case for Fence.TriggerPosition.outside(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = *v7;
    id v11 = [v10 timestamp];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else if (v8 == enum case for Fence.TriggerPosition.undetermined(_:))
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v7, v12);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_10019A3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for Fence.AcceptanceStatus();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  sub_100044014(&qword_1003F0A30);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.ID();
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v4[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[21] = v7;
  v4[22] = *(void *)(v7 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v4[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence();
  v4[26] = v8;
  v4[27] = *(void *)(v8 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[29] = v9;
  void *v9 = v4;
  v9[1] = sub_10019A688;
  return daemon.getter();
}

uint64_t sub_10019A688(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 240) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 248) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10019A864;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10019A864(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[8];
    return _swift_task_switch(sub_10019BD98, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[34] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10019A9F4;
    uint64_t v7 = v3[25];
    uint64_t v8 = v3[6];
    return sub_1001327B8(v7, v8);
  }
}

uint64_t sub_10019A9F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10019AB04, v1, 0);
}

uint64_t sub_10019AB04()
{
  uint64_t v79 = v0;
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003F0350);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[17];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[6];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v13 = v0[17];
    uint64_t v12 = v0[18];
    uint64_t v14 = v0[16];
    if (v11)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      v0[2] = sub_100037004(0xD00000000000001ALL, 0x8000000100377160, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2082;
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_100037004(v16, v17, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s cannot trigger a fence with ID %{public}s as no fence is found!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[18], v0[16]);
    }

    uint64_t v21 = v0[5];
    uint64_t v22 = sub_100051630(v0[7]);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v22, v24, v26);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v27 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v21, 1, 1, v27);
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v74 = (uint64_t (*)(void))v0[1];
    return v74();
  }
  uint64_t v18 = v0[21];
  uint64_t v19 = v0[22];
  uint64_t v20 = v0[20];
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[28], v3, v2);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) == 1)
  {
    sub_10000A520(v0[20], (uint64_t *)&unk_1003EE800);
  }
  else
  {
    uint64_t v28 = v0[23];
    uint64_t v30 = v0[21];
    uint64_t v29 = v0[22];
    (*(void (**)(void, void, uint64_t))(v29 + 32))(v0[24], v0[20], v30);
    static Date.now.getter();
    char v31 = static Date.< infix(_:_:)();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v32(v28, v30);
    if (v31)
    {
      uint64_t v76 = v32;
      if (qword_1003EC060 != -1) {
        swift_once();
      }
      uint64_t v33 = v0[19];
      uint64_t v34 = v0[16];
      uint64_t v35 = v0[17];
      uint64_t v36 = v0[6];
      uint64_t v37 = type metadata accessor for Logger();
      sub_100044058(v37, (uint64_t)qword_10040B770);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v33, v36, v34);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v0[19];
      uint64_t v42 = v0[16];
      uint64_t v43 = v0[17];
      if (v40)
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)unint64_t v44 = 136446210;
        sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[4] = sub_100037004(v45, v46, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fence %{public}s being triggered is muted", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v43 + 8))(v0[19], v0[16]);
      }

      uint64_t v65 = v0[27];
      uint64_t v64 = v0[28];
      uint64_t v75 = v0[26];
      uint64_t v66 = v0[24];
      uint64_t v67 = v0[21];
      uint64_t v77 = v0[5];
      uint64_t v68 = sub_100051374();
      uint64_t v70 = v69;
      uint64_t v72 = v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100145E90(v68, v70, v72);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      v76(v66, v67);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v75);
      uint64_t v73 = type metadata accessor for Fence.TriggerID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v77, 1, 1, v73);
      goto LABEL_30;
    }
    v32(v0[24], v0[21]);
  }
  uint64_t v48 = v0[10];
  uint64_t v47 = v0[11];
  uint64_t v49 = v0[9];
  Fence.acceptanceStatus.getter();
  int v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 88))(v47, v49);
  if (v50 == enum case for Fence.AcceptanceStatus.pendingHidden(_:))
  {
    uint64_t v51 = (void *)swift_task_alloc();
    v0[39] = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_10019BAB8;
    uint64_t v52 = v0[28];
    uint64_t v53 = v0[12];
    uint64_t v54 = v0[7];
    return sub_1001A2AFC(v53, v52, v54);
  }
  else if (v50 == enum case for Fence.AcceptanceStatus.pending(_:))
  {
    uint64_t v56 = (void *)swift_task_alloc();
    v0[37] = v56;
    *uint64_t v56 = v0;
    v56[1] = sub_10019B7D8;
    uint64_t v57 = v0[28];
    uint64_t v58 = v0[13];
    uint64_t v59 = v0[7];
    return sub_1001A23D4(v58, v57, v59);
  }
  else if (v50 == enum case for Fence.AcceptanceStatus.accepted(_:))
  {
    uint64_t v60 = (void *)swift_task_alloc();
    v0[35] = v60;
    *uint64_t v60 = v0;
    v60[1] = sub_10019B4FC;
    uint64_t v61 = v0[28];
    uint64_t v62 = v0[14];
    uint64_t v63 = v0[7];
    return sub_10019FA48(v62, v61, v63);
  }
  else
  {
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10019B4FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_10019BEA4;
  }
  else {
    uint64_t v4 = sub_10019B628;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019B628()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  sub_100013B50(v0[14], v4, &qword_1003F0A30);
  uint64_t v7 = sub_100051748(v1, v5, 0, 0);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100013B50(v4, v6, &qword_1003F0A30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10019B7D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_10019C048;
  }
  else {
    uint64_t v4 = sub_10019B904;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019B904()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  sub_100013B50(v0[13], v4, &qword_1003F0A30);
  uint64_t v7 = sub_100051748(v1, v5, 0, 0);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100013B50(v4, v6, &qword_1003F0A30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10019BAB8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_10019C1EC;
  }
  else {
    uint64_t v4 = sub_10019BBE4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019BBE4()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  sub_100013B50(v0[12], v4, &qword_1003F0A30);
  uint64_t v7 = sub_100051748(v1, v5, 0, 0);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v7, v9, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100013B50(v4, v6, &qword_1003F0A30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10019BD98()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019BEA4()
{
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[7];
  swift_errorRetain();
  uint64_t v6 = sub_100051748(v2, v5, v1, 1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10019C048()
{
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[7];
  swift_errorRetain();
  uint64_t v6 = sub_100051748(v2, v5, v1, 1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10019C1EC()
{
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[27];
  uint64_t v2 = v0[28];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[7];
  swift_errorRetain();
  uint64_t v6 = sub_100051748(v2, v5, v1, 1);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v6, v8, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10019C390()
{
  PersonHandle.id.getter();
  sub_10004650C();
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  PersonHandle.id.getter();
  if (v1 == 2) {
    return Destination.init(email:)();
  }
  else {
    return Destination.init(phoneNumber:)();
  }
}

uint64_t sub_10019C438(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  sub_100044014(&qword_1003F0A30);
  v3[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.TriggerPosition();
  v3[20] = v5;
  v3[21] = *(void *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = sub_100044014(&qword_1003F0D58);
  v3[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FenceTriggerRecord();
  v3[25] = v6;
  v3[26] = *(void *)(v6 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.AcceptanceStatus();
  v3[28] = v7;
  v3[29] = *(void *)(v7 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.ID();
  v3[32] = v8;
  v3[33] = *(void *)(v8 - 8);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v3[38] = v9;
  v3[39] = *(void *)(v9 - 8);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.Participant();
  v3[45] = v10;
  v3[46] = *(void *)(v10 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.Variant();
  v3[49] = v11;
  v3[50] = *(void *)(v11 - 8);
  v3[51] = swift_task_alloc();
  return _swift_task_switch(sub_10019C870, v2, 0);
}

uint64_t sub_10019C870()
{
  uint64_t v86 = v0;
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[49];
  Fence.variant.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Fence.Variant.oneTime(_:))
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[44];
    uint64_t v6 = v0[38];
    uint64_t v7 = v0[39];
    uint64_t v8 = v0[13];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[44];
    uint64_t v14 = v0[39];
    if (v12)
    {
      os_log_type_t type = v11;
      uint64_t v15 = v0[37];
      uint64_t v16 = v0[32];
      uint64_t v17 = v0[33];
      *(void *)uint64_t v82 = v0[38];
      uint64_t v18 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      v0[2] = sub_100037004(0xD000000000000027, 0x8000000100377110, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      v0[3] = sub_100037004(v19, v21, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_type_t *))(v14 + 8))(v13, *(os_log_type_t **)v82);
      _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s Trying to trigger fence %{public}s which is not recurring", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(v0[44], v0[38]);
    }

    uint64_t v37 = v0[50];
    uint64_t v36 = v0[51];
    uint64_t v38 = v0[49];
    uint64_t v39 = v0[12];
    uint64_t v40 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    goto LABEL_31;
  }
  if (v4 != enum case for Fence.Variant.recurring(_:) && v4 != enum case for Fence.Variant.scheduled(_:)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v23 = v0[48];
  uint64_t v25 = v0[46];
  uint64_t v24 = v0[47];
  uint64_t v26 = v0[45];
  (*(void (**)(void, void))(v0[50] + 8))(v0[51], v0[49]);
  Fence.findee.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v24, enum case for Fence.Participant.me(_:), v26);
  char v27 = static Fence.Participant.== infix(_:_:)();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28(v24, v26);
  v28(v23, v26);
  if ((v27 & 1) == 0)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v43 = v0[39];
    uint64_t v42 = v0[40];
    uint64_t v44 = v0[38];
    uint64_t v45 = v0[13];
    uint64_t v46 = type metadata accessor for Logger();
    sub_100044058(v46, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v45, v44);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v51 = v0[39];
    uint64_t v50 = v0[40];
    if (v49)
    {
      uint64_t v52 = v0[37];
      uint64_t v54 = v0[32];
      uint64_t v53 = v0[33];
      *(void *)typea = v0[38];
      uint64_t v55 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136446466;
      os_log_type_t v78 = v48;
      v0[4] = sub_100037004(0xD000000000000027, 0x8000000100377110, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v58 = v57;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      v0[5] = sub_100037004(v56, v58, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_type_t *))(v51 + 8))(v50, *(os_log_type_t **)typea);
      _os_log_impl((void *)&_mh_execute_header, v47, v78, "%{public}s Trying to trigger fence %{public}s which we are not the findee for", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v51 + 8))(v0[40], v0[38]);
    }

    goto LABEL_30;
  }
  uint64_t v30 = v0[30];
  uint64_t v29 = v0[31];
  uint64_t v31 = v0[28];
  uint64_t v32 = v0[29];
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v30, enum case for Fence.AcceptanceStatus.accepted(_:), v31);
  char v33 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v34(v30, v31);
  v34(v29, v31);
  if ((v33 & 1) == 0)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v59 = v0[41];
    uint64_t v60 = v0[38];
    uint64_t v61 = v0[39];
    uint64_t v62 = v0[13];
    uint64_t v63 = type metadata accessor for Logger();
    sub_100044058(v63, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v59, v62, v60);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    uint64_t v67 = v0[41];
    uint64_t v68 = v0[39];
    if (v66)
    {
      uint64_t v69 = v0[37];
      uint64_t v70 = v0[33];
      *(void *)typeb = v0[32];
      uint64_t v84 = v0[38];
      uint64_t v71 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136446466;
      os_log_type_t v83 = v65;
      v0[6] = sub_100037004(0xD000000000000027, 0x8000000100377110, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v71 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = v73;
      (*(void (**)(uint64_t, os_log_type_t *))(v70 + 8))(v69, *(os_log_type_t **)typeb);
      v0[7] = sub_100037004(v72, v74, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v84);
      _os_log_impl((void *)&_mh_execute_header, v64, v83, "%{public}s Trying to trigger fence %{public}s which we are not accepted", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v68 + 8))(v0[41], v0[38]);
    }

LABEL_30:
    uint64_t v75 = v0[12];
    uint64_t v76 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 1, 1, v76);
LABEL_31:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v77 = (uint64_t (*)(void))v0[1];
    return v77();
  }
  uint64_t v35 = (void *)swift_task_alloc();
  v0[52] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_10019D420;
  return daemon.getter();
}

uint64_t sub_10019D420(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 424) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 432) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10019D5FC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10019D5FC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[55] = a1;
  v3[56] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[14];
    uint64_t v5 = sub_10019EF5C;
  }
  else
  {
    uint64_t v6 = v3[14];
    swift_release();
    uint64_t v5 = sub_10019D724;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10019D724()
{
  uint64_t v1 = *(void *)(v0 + 440);
  Fence.id.getter();
  return _swift_task_switch(sub_10019D794, v1, 0);
}

uint64_t sub_10019D794()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[36];
  uint64_t v3 = sub_10004730C(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  v0[57] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[58] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[59] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019D8C4;
  uint64_t v7 = v0[23];
  uint64_t v6 = v0[24];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v1, v3, 0xD000000000000011, 0x8000000100377140, sub_1001B1100, v4, v7);
}

uint64_t sub_10019D8C4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[55];
    uint64_t v4 = sub_10019DF2C;
  }
  else
  {
    uint64_t v5 = v2[36];
    uint64_t v6 = v2[32];
    uint64_t v7 = v2[33];
    uint64_t v8 = v2[14];
    swift_task_dealloc();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v2[61] = v9;
    v2[62] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v6);
    uint64_t v4 = sub_10019DA28;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019DA28()
{
  char v33 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[24];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[26] + 48))(v2, 1, v1) == 1)
  {
    sub_10000A520(v2, &qword_1003F0D58);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[42];
    uint64_t v4 = v0[38];
    uint64_t v5 = v0[39];
    uint64_t v6 = v0[13];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[61];
      uint64_t v29 = v0[42];
      uint64_t v10 = v0[39];
      uint64_t v31 = v0[38];
      uint64_t v11 = v0[37];
      uint64_t v12 = v0[32];
      uint64_t v13 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      v0[8] = sub_100037004(0xD000000000000027, 0x8000000100377110, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v16 = v15;
      v30(v11, v12);
      v0[9] = sub_100037004(v14, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v29, v31);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Trying to trigger fence %{public}s but with no fenceTrigger info", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      uint64_t v22 = v0[42];
      uint64_t v23 = v0[38];
      uint64_t v24 = v0[39];
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }

    uint64_t v25 = v0[12];
    uint64_t v26 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  else
  {
    uint64_t v17 = v0[55];
    uint64_t v18 = v0[27];
    uint64_t v20 = v0[21];
    uint64_t v19 = v0[22];
    uint64_t v21 = v0[20];
    sub_1001B1108(v2, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18 + *(int *)(v1 + 24), v21);
    Fence.id.getter();
    return _swift_task_switch(sub_10019E13C, v17, 0);
  }
}

uint64_t sub_10019DF2C()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[14];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_10019DFC0, v4, 0);
}

uint64_t sub_10019DFC0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019E13C()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[35];
  uint64_t v4 = swift_task_alloc();
  v0[63] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[64] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019E238;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v2, v1, 0xD000000000000017, 0x8000000100376FF0, sub_1001B1458, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_10019E238()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 440);
    uint64_t v4 = sub_10019E9A4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 440);
    swift_task_dealloc();
    uint64_t v4 = sub_10019E360;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019E360()
{
  uint64_t v1 = *(void *)(v0 + 112);
  (*(void (**)(void, void))(v0 + 488))(*(void *)(v0 + 280), *(void *)(v0 + 256));
  return _swift_task_switch(sub_10019E3D4, v1, 0);
}

uint64_t sub_10019E3D4()
{
  uint64_t v46 = v0;
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  static Date.now.getter();
  sub_1000D4030(v2);
  Date.timeIntervalSince(_:)();
  double v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6 <= 3600.0)
  {
    Fence.id.getter();
    uint64_t v22 = (void *)swift_task_alloc();
    v0[66] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10019EBF4;
    uint64_t v23 = v0[34];
    uint64_t v24 = v0[22];
    uint64_t v25 = v0[15];
    return sub_10019A3A8(v25, v23, v24);
  }
  else
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[43];
    uint64_t v9 = v0[38];
    uint64_t v10 = v0[39];
    uint64_t v11 = v0[13];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v11, v9);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[61];
      uint64_t v37 = v0[43];
      uint64_t v38 = v0[39];
      uint64_t v15 = v0[37];
      uint64_t v40 = v0[38];
      uint64_t v16 = v0[32];
      uint64_t v43 = v0[22];
      uint64_t v44 = v0[27];
      uint64_t v41 = v0[21];
      uint64_t v42 = v0[20];
      uint64_t v17 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446466;
      v0[10] = sub_100037004(0xD000000000000027, 0x8000000100377110, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      v39(v15, v16);
      v0[11] = sub_100037004(v18, v20, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v40);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s Fence %{public}s should not trigger since it was accepted >1h after invitation.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
      uint64_t v21 = v44;
    }
    else
    {
      uint64_t v27 = v0[43];
      uint64_t v28 = v0[38];
      uint64_t v29 = v0[39];
      uint64_t v30 = v0[27];
      uint64_t v32 = v0[21];
      uint64_t v31 = v0[22];
      uint64_t v33 = v0[20];
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      uint64_t v21 = v30;
    }
    sub_1001B138C(v21, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
    uint64_t v34 = v0[12];
    uint64_t v35 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

uint64_t sub_10019E9A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[14];
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_10019EA38, v4, 0);
}

uint64_t sub_10019EA38()
{
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10019EBF4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 488);
  uint64_t v4 = *(void *)(*v1 + 272);
  uint64_t v5 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  v3(v4, v5);
  uint64_t v6 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v7 = sub_10019F0D8;
  }
  else {
    uint64_t v7 = sub_10019ED8C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10019ED8C()
{
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
  sub_100013B50(v5, v6, &qword_1003F0A30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10019EF5C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019F0D8()
{
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[20];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10019F294(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10019F328;
  return daemon.getter();
}

uint64_t sub_10019F328(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 40) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10019F504;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10019F504(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[7] = a1;
  v4[8] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[3];
    uint64_t v6 = sub_10019F9E4;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_10019F63C;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10019F63C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_10004730C(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[9] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019F76C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v1, v3, 0xD000000000000017, 0x8000000100376FF0, sub_100195924, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_10019F76C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_10019F914;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_task_dealloc();
    uint64_t v4 = sub_10019F894;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019F894()
{
  return _swift_task_switch(sub_10019F8B0, *(void *)(v0 + 24), 0);
}

uint64_t sub_10019F8B0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019F914()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_10019F980, v1, 0);
}

uint64_t sub_10019F980()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019F9E4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10019FA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Fence.Variant();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = sub_100044014(&qword_1003F0D58);
  v4[16] = swift_task_alloc();
  sub_100044014(&qword_1003F0C38);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.ID();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence();
  v4[23] = v7;
  v4[24] = *(void *)(v7 - 8);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.TriggerID();
  v4[27] = v8;
  v4[28] = *(void *)(v8 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_10019FCC0, v3, 0);
}

uint64_t sub_10019FCC0()
{
  Fence.TriggerID.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10019FD64;
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[9];
  return sub_1001A3FE4(v2, v4, v3);
}

uint64_t sub_10019FD64()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v4 = sub_1001A1B30;
  }
  else {
    uint64_t v4 = sub_10019FE90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10019FE90()
{
  uint64_t v25 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[9];
  uint64_t v5 = type metadata accessor for Logger();
  v0[33] = sub_100044058(v5, (uint64_t)qword_10040B770);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[34] = v6;
  v0[35] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[24];
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v12 = v0[22];
    uint64_t v13 = v0[18];
    uint64_t v14 = v0[19];
    uint64_t v23 = v0[23];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    v0[4] = sub_100037004(0xD000000000000021, 0x8000000100377180, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2082;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v0[5] = sub_100037004(v16, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v10, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s: About to trigger fence %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v0[26], v0[23]);
  }

  v0[36] = v19;
  unint64_t v20 = (void *)swift_task_alloc();
  v0[37] = v20;
  *unint64_t v20 = v0;
  v20[1] = sub_1001A01B4;
  return daemon.getter();
}

uint64_t sub_1001A01B4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 304) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 312) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001A0390;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001A0390(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 320) = a1;
  *(void *)(v4 + 328) = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void *)(v3 + 88);
  if (v1) {
    uint64_t v6 = sub_1001A2070;
  }
  else {
    uint64_t v6 = sub_1001A04E0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A04E0()
{
  uint64_t v1 = *(void *)(v0 + 320);
  Fence.id.getter();
  return _swift_task_switch(sub_1001A0550, v1, 0);
}

uint64_t sub_1001A0550()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[21];
  uint64_t v3 = sub_10004730C(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[42] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[43] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001A067C;
  uint64_t v7 = v0[15];
  uint64_t v6 = v0[16];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v1, v3, 0xD000000000000011, 0x8000000100377140, sub_1001B145C, v4, v7);
}

uint64_t sub_1001A067C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[40];
    uint64_t v4 = sub_1001A09E0;
  }
  else
  {
    uint64_t v5 = v2[21];
    uint64_t v6 = v2[18];
    uint64_t v7 = v2[19];
    uint64_t v8 = v2[11];
    swift_task_dealloc();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v2[45] = v9;
    v2[46] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v6);
    uint64_t v4 = sub_1001A07E0;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A07E0()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = type metadata accessor for FenceTriggerRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[17];
  if (v3 == 1)
  {
    sub_10000A520(v1, &qword_1003F0D58);
    uint64_t v5 = type metadata accessor for Fence.TriggerPosition();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    uint64_t v6 = v1 + *(int *)(v2 + 24);
    uint64_t v7 = type metadata accessor for Fence.TriggerPosition();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v4, v6, v7);
    sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[47] = v9;
  void *v9 = v0;
  v9[1] = sub_1001A0B80;
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[9];
  return sub_1001A5ADC(v12, v11, v10);
}

uint64_t sub_1001A09E0()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[11];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_1001A0A74, v4, 0);
}

uint64_t sub_1001A0A74()
{
  swift_release();
  (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001A0B80(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 384) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 88);
  if (v1)
  {
    uint64_t v6 = sub_1001A2174;
  }
  else
  {
    *(unsigned char *)(v4 + 424) = a1 & 1;
    uint64_t v6 = sub_1001A0CC0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A0CC0()
{
  uint64_t v30 = v0;
  if (*(unsigned char *)(v0 + 424) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1001A11B8;
    uint64_t v2 = *(void *)(v0 + 240);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 72);
    return sub_1001A6450(v5, v2, v4, v3);
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 272))(*(void *)(v0 + 200), *(void *)(v0 + 72), *(void *)(v0 + 184));
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
      uint64_t v25 = *(void *)(v0 + 200);
      uint64_t v9 = *(void *)(v0 + 176);
      uint64_t v27 = *(void *)(v0 + 184);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      uint64_t v10 = *(void *)(v0 + 144);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446466;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000021, 0x8000000100377180, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v14 = v13;
      v26(v9, v10);
      *(void *)(v0 + 24) = sub_100037004(v12, v14, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v28(v25, v27);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: NOT showing TransparencyNotification for fence %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 288))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    }

    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 96);
    Fence.variant.getter();
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17);
    if (v18 == enum case for Fence.Variant.oneTime(_:))
    {
      Fence.id.getter();
      unint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 400) = v19;
      *unint64_t v19 = v0;
      v19[1] = sub_1001A14F8;
      uint64_t v20 = *(void *)(v0 + 160);
      return sub_1001A82A8(v20);
    }
    else if (v18 == enum case for Fence.Variant.recurring(_:) || v18 == enum case for Fence.Variant.scheduled(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
      Fence.id.getter();
      Fence.TriggerID.init()();
      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 416) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_1001A1804;
      uint64_t v22 = *(void *)(v0 + 232);
      uint64_t v23 = *(void *)(v0 + 176);
      uint64_t v24 = *(void *)(v0 + 80);
      return sub_1001A8F98(v23, v24, v22);
    }
    else
    {
      return _assertionFailure(_:_:file:line:flags:)();
    }
  }
}

uint64_t sub_1001A11B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A12C8, v1, 0);
}

uint64_t sub_1001A12C8()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  Fence.variant.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Fence.Variant.oneTime(_:))
  {
    Fence.id.getter();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[50] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1001A14F8;
    uint64_t v6 = v0[20];
    return sub_1001A82A8(v6);
  }
  else if (v4 == enum case for Fence.Variant.recurring(_:) || v4 == enum case for Fence.Variant.scheduled(_:))
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    Fence.id.getter();
    Fence.TriggerID.init()();
    uint64_t v9 = (void *)swift_task_alloc();
    v0[52] = v9;
    void *v9 = v0;
    v9[1] = sub_1001A1804;
    uint64_t v10 = v0[29];
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[10];
    return sub_1001A8F98(v11, v12, v10);
  }
  else
  {
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_1001A14F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 360);
  uint64_t v4 = *(void *)(*v1 + 160);
  uint64_t v5 = *(void *)(*v1 + 144);
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc();
  v3(v4, v5);
  uint64_t v6 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v7 = sub_1001A2294;
  }
  else {
    uint64_t v7 = sub_1001A1690;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001A1690()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  swift_release();
  sub_10000A520(v1, &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[8];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 32))(v7, v0[30], v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001A1804()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 360);
  uint64_t v2 = *(void *)(*(void *)v0 + 232);
  uint64_t v3 = *(void *)(*(void *)v0 + 224);
  uint64_t v4 = *(void *)(*(void *)v0 + 216);
  uint64_t v5 = *(void *)(*(void *)v0 + 176);
  uint64_t v6 = *(void *)(*(void *)v0 + 144);
  uint64_t v7 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v1(v5, v6);
  return _swift_task_switch(sub_1001A19DC, v7, 0);
}

uint64_t sub_1001A19DC()
{
  uint64_t v1 = v0[17];
  swift_release();
  sub_10000A520(v1, &qword_1003F0C38);
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[8];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v4, v0[30], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001A1B30()
{
  uint64_t v33 = v0;
  uint64_t v1 = &qword_1003EC000;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B770);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = &loc_100367000;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v31 = v2;
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[6] = sub_100037004(0xD000000000000021, 0x8000000100377180, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Failed to send IDS message: %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    uint64_t v2 = v31;
    swift_slowDealloc();
    swift_arrayDestroy();
    uint64_t v5 = (void *)&loc_100367000;
    swift_slowDealloc();
    uint64_t v1 = &qword_1003EC000;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  if (v1[12] != -1) {
    swift_once();
  }
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[24];
  uint64_t v12 = v0[9];
  v0[33] = sub_100044058(v2, (uint64_t)qword_10040B770);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v0[34] = v13;
  v0[35] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v9, v12, v10);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[24];
  if (v16)
  {
    os_log_type_t type = v15;
    uint64_t v19 = v0[22];
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[19];
    uint64_t v30 = v0[23];
    uint64_t v22 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = v5[427];
    v0[4] = sub_100037004(0xD000000000000021, 0x8000000100377180, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2082;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    v0[5] = sub_100037004(v23, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v17, v30);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: About to trigger fence %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v26(v0[26], v0[23]);
  }

  v0[36] = v26;
  uint64_t v27 = (void *)swift_task_alloc();
  v0[37] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1001A01B4;
  return daemon.getter();
}

uint64_t sub_1001A2070()
{
  (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001A2174()
{
  uint64_t v1 = v0[17];
  swift_release();
  sub_10000A520(v1, &qword_1003F0C38);
  (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001A2294()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[17];
  swift_release();
  sub_10000A520(v4, &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001A23D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Fence.TriggerID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.ID();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001A2550, v3, 0);
}

uint64_t sub_1001A2550()
{
  uint64_t v26 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[15];
  uint64_t v9 = v0[16];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[13];
    uint64_t v13 = v0[11];
    uint64_t v24 = v0[14];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    v0[2] = sub_100037004(0xD000000000000020, 0x80000001003771B0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2082;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    v0[3] = sub_100037004(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v24);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s: Triggering fence %{public}s awaiting approval", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[16], v0[14]);
  }

  Fence.id.getter();
  Fence.TriggerID.init()();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[17] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1001A2884;
  uint64_t v19 = v0[13];
  uint64_t v20 = v0[10];
  uint64_t v21 = v0[6];
  return sub_1001A8F98(v19, v21, v20);
}

uint64_t sub_1001A2884()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  uint64_t v3 = *(void *)(*(void *)v0 + 88);
  uint64_t v4 = *(void *)(*(void *)v0 + 80);
  uint64_t v5 = *(void *)(*(void *)v0 + 72);
  uint64_t v6 = *(void *)(*(void *)v0 + 64);
  uint64_t v7 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001A2A54, v7, 0);
}

uint64_t sub_1001A2A54()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[4], 1, 1, v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001A2AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = *v3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v4[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.AcceptanceStatus();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.ID();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence();
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Variant();
  v4[25] = v8;
  v4[26] = *(void *)(v8 - 8);
  v4[27] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.TriggerID();
  v4[28] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[29] = v10;
  v4[30] = *(void *)(v10 + 64);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  return _swift_task_switch(sub_1001A2DE0, v3, 0);
}

uint64_t sub_1001A2DE0()
{
  uint64_t v95 = v0;
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  Fence.TriggerID.init()();
  Fence.variant.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Fence.Variant.oneTime(_:))
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[24];
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[6];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[32];
    uint64_t v14 = v0[28];
    uint64_t v15 = v0[29];
    uint64_t v16 = v0[24];
    uint64_t v18 = v0[17];
    uint64_t v17 = v0[18];
    if (v12)
    {
      os_log_type_t typea = v11;
      uint64_t v20 = v0[15];
      uint64_t v19 = v0[16];
      buf = (uint8_t *)v10;
      uint64_t v21 = v0[14];
      uint64_t v92 = v0[32];
      *(void *)uint64_t v82 = v0[17];
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t log = v14;
      unint64_t v25 = v24;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      v0[4] = sub_100037004(v23, v25, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_type_t *))(v17 + 8))(v16, *(os_log_type_t **)v82);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)buf, typea, "Trying to trigger a .pendingHidden one-time fence id %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, os_log_t))(v15 + 8))(v92, log);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      (*(void (**)(uint64_t, NSObject *))(v15 + 8))(v13, v14);
    }
    uint64_t v45 = v0[26];
    uint64_t v44 = v0[27];
    uint64_t v46 = v0[25];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[29] + 56))(v0[5], 1, 1, v0[28]);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = (uint64_t (*)(void))v0[1];
    return v47();
  }
  if (v4 == enum case for Fence.Variant.recurring(_:))
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v26 = v0[23];
    uint64_t v27 = v0[17];
    uint64_t v28 = v0[18];
    uint64_t v29 = v0[6];
    uint64_t v30 = type metadata accessor for Logger();
    sub_100044058(v30, (uint64_t)qword_10040B770);
    unint64_t type = (v28 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    v93(v26, v29, v27);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = v0[23];
    uint64_t v35 = v0[18];
    if (!v33)
    {
      uint64_t v43 = *(NSObject **)(v35 + 8);
      uint64_t v89 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      ((void (*)(uint64_t, void))v43)(v34, v0[17]);
      goto LABEL_22;
    }
    os_log_t loga = v31;
    uint64_t v37 = v0[15];
    uint64_t v36 = v0[16];
    uint64_t v38 = v0[14];
    os_log_type_t v83 = v32;
    uint64_t v80 = v0[17];
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136446210;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v42 = v41;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    v0[3] = sub_100037004(v40, v42, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(NSObject **)(v35 + 8);
    uint64_t v89 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    ((void (*)(uint64_t, uint64_t))v43)(v34, v80);
    uint64_t v31 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v83, "Triggering recurring fence (%{public}s) for the first time", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  else
  {
    if (v4 != enum case for Fence.Variant.scheduled(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v49 = v0[22];
    uint64_t v50 = v0[17];
    uint64_t v51 = v0[18];
    uint64_t v52 = v0[6];
    uint64_t v53 = type metadata accessor for Logger();
    sub_100044058(v53, (uint64_t)qword_10040B770);
    unint64_t type = (v51 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    v93(v49, v52, v50);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = v0[22];
    uint64_t v58 = v0[18];
    if (!v56)
    {
      uint64_t v43 = *(NSObject **)(v58 + 8);
      uint64_t v89 = (v58 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      ((void (*)(uint64_t, void))v43)(v57, v0[17]);

      goto LABEL_23;
    }
    uint64_t v81 = v0[17];
    os_log_t logb = v54;
    uint64_t v60 = v0[15];
    uint64_t v59 = v0[16];
    uint64_t v61 = v0[14];
    os_log_type_t v84 = v55;
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136446210;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    v0[2] = sub_100037004(v63, v65, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(NSObject **)(v58 + 8);
    uint64_t v89 = (v58 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    ((void (*)(uint64_t, uint64_t))v43)(v57, v81);
    uint64_t v31 = logb;
    _os_log_impl((void *)&_mh_execute_header, logb, v84, "Triggering scheduled fence (%{public}s) for the first time", v62, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  swift_slowDealloc();
LABEL_22:

LABEL_23:
  v0[33] = v43;
  v0[34] = v93;
  uint64_t v66 = v0[21];
  uint64_t v67 = v0[17];
  os_log_t logc = v43;
  uint64_t v69 = v0[12];
  uint64_t v68 = v0[13];
  uint64_t v70 = v0[11];
  uint64_t v71 = v0[6];
  (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
  uint64_t v72 = swift_allocBox();
  uint64_t v74 = v73;
  v0[35] = v72;
  v0[36] = v73;
  v0[37] = type;
  v93(v73, v71, v67);
  (*(void (**)(uint64_t, void, uint64_t))(v69 + 104))(v68, enum case for Fence.AcceptanceStatus.pending(_:), v70);
  Fence.update(acceptanceStatus:)();
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
  v93(v66, v74, v67);
  Fence.id.getter();
  v0[38] = v89;
  ((void (*)(uint64_t, uint64_t))logc)(v66, v67);
  uint64_t v75 = (void *)swift_task_alloc();
  v0[39] = v75;
  *uint64_t v75 = v0;
  v75[1] = sub_1001A3870;
  uint64_t v76 = v0[32];
  uint64_t v77 = v0[16];
  uint64_t v78 = v0[7];
  return sub_1001A8F98(v77, v78, v76);
}

uint64_t sub_1001A3870()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  uint64_t v3 = *(void *)(*(void *)v0 + 112);
  uint64_t v4 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001A39DC, v4, 0);
}

uint64_t sub_1001A39DC()
{
  (*(void (**)(void, void, void))(v0 + 272))(*(void *)(v0 + 152), *(void *)(v0 + 288), *(void *)(v0 + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001A3A88;
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  return sub_100182930(v2, v3);
}

uint64_t sub_1001A3A88()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 264);
  uint64_t v4 = *(void *)(*v1 + 152);
  uint64_t v5 = *(void *)(*v1 + 136);
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  v3(v4, v5);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 64);
    uint64_t v7 = sub_1001A3EBC;
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 64);
    (*(void (**)(void, void))(v2 + 264))(*(void *)(v2 + 160), *(void *)(v2 + 136));
    uint64_t v7 = sub_1001A3C28;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001A3C28()
{
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[10];
  uint64_t v17 = v7;
  uint64_t v18 = v2;
  uint64_t v8 = v0[8];
  uint64_t v19 = v0[9];
  uint64_t v20 = (char *)v0[5];
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v6);
  uint64_t v10 = sub_10004730C(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v12 = (v5 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = v8;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v1;
  *((void *)v13 + 5) = v8;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  v14(&v13[v11], v3, v6);
  *(void *)&v13[v12] = v19;
  swift_retain_n();
  swift_retain();
  sub_10012EDF8(v17, (uint64_t)&unk_1003F0DE0, (uint64_t)v13);
  swift_release();
  v14(v20, v18, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v20, 0, 1, v6);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001A3EBC()
{
  (*(void (**)(void, void))(v0[29] + 8))(v0[32], v0[28]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001A3FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MessagingOptions();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.TriggerPosition();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.TriggerID();
  v4[21] = v8;
  v4[22] = *(void *)(v8 - 8);
  v4[23] = swift_task_alloc();
  type metadata accessor for FenceTriggerEnvelopeV1();
  v4[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PersonHandle();
  v4[25] = v9;
  v4[26] = *(void *)(v9 - 8);
  v4[27] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.ID();
  v4[28] = v10;
  v4[29] = *(void *)(v10 - 8);
  v4[30] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence();
  v4[31] = v11;
  v4[32] = *(void *)(v11 - 8);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence.Participant();
  v4[37] = v12;
  v4[38] = *(void *)(v12 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  return _swift_task_switch(sub_1001A43C0, v3, 0);
}

uint64_t sub_1001A43C0()
{
  uint64_t v96 = v0;
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[38];
  Fence.findee.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for Fence.Participant.me(_:), v3);
  char v5 = static Fence.Participant.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if (v5)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[36];
    uint64_t v9 = v0[31];
    uint64_t v10 = v0[32];
    uint64_t v11 = v0[8];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B770);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v13(v8, v11, v9);
    uint64_t v88 = v13;
    v13(v7, v11, v9);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = v0[35];
    uint64_t v18 = v0[36];
    uint64_t v20 = v0[31];
    uint64_t v19 = v0[32];
    if (v16)
    {
      os_log_type_t v85 = v15;
      uint64_t v86 = v14;
      uint64_t v22 = v0[29];
      uint64_t v21 = v0[30];
      uint64_t v23 = v0[28];
      uint64_t v24 = swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446467;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      v0[4] = sub_100037004(v25, v27, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v83 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v83(v18, v20);
      os_log_type_t v84 = (uint8_t *)v24;
      *(_WORD *)(v24 + 12) = 2081;
      uint64_t v28 = Fence.others.getter();
      int64_t v29 = *(void *)(v28 + 16);
      if (v29)
      {
        uint64_t v30 = v0[26];
        uint64_t v95 = _swiftEmptyArrayStorage;
        sub_10003CB84(0, v29, 0);
        uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16);
        v30 += 16;
        unint64_t v32 = v28 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
        uint64_t v89 = *(void *)(v30 + 56);
        uint64_t v91 = v31;
        BOOL v33 = (void (**)(uint64_t, uint64_t))(v30 - 8);
        do
        {
          uint64_t v34 = v0[27];
          uint64_t v35 = v0[25];
          v91(v34, v32, v35);
          uint64_t v36 = PersonHandle.id.getter();
          uint64_t v38 = v37;
          (*v33)(v34, v35);
          uint64_t v39 = v95;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10003CB84(0, v39[2] + 1, 1);
            uint64_t v39 = v95;
          }
          unint64_t v41 = v39[2];
          unint64_t v40 = v39[3];
          if (v41 >= v40 >> 1)
          {
            sub_10003CB84(v40 > 1, v41 + 1, 1);
            uint64_t v39 = v95;
          }
          v39[2] = v41 + 1;
          unint64_t v42 = &v39[2 * v41];
          v42[4] = v36;
          v42[5] = v38;
          v32 += v89;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = _swiftEmptyArrayStorage;
      }
      uint64_t v63 = v0[35];
      uint64_t v64 = v0[31];
      v0[5] = v39;
      sub_100044014(&qword_1003ED230);
      sub_1000C129C();
      uint64_t v65 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v67 = v66;
      swift_bridgeObjectRelease();
      v0[6] = sub_100037004(v65, v67, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v83(v63, v64);
      _os_log_impl((void *)&_mh_execute_header, v86, v85, "Sending IDS trigger of fence %{public}s to %{private}s", v84, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v61(v0[36], v0[31]);
      v61(v17, v20);
    }
    uint64_t v68 = v0[34];
    uint64_t v69 = v0[23];
    uint64_t v93 = v0[24];
    uint64_t v70 = v0[21];
    uint64_t v71 = v0[22];
    uint64_t v72 = v0[19];
    uint64_t v73 = (char *)v0[20];
    uint64_t v74 = v0[18];
    uint64_t v75 = v0[9];
    uint64_t v76 = v0[7];
    v88(v68, v0[8], v0[31]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v69, v76, v70);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v73, v75, v74);
    sub_1001FBF80(v68, v69, v73, v93);
    uint64_t v78 = v0[14];
    uint64_t v79 = v0[11];
    uint64_t v80 = v0[12];
    uint64_t v81 = Fence.others.getter();
    sub_100196094(v81);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v78, 1, 1, v79);
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
    uint64_t v82 = (void *)swift_task_alloc();
    v0[41] = v82;
    *uint64_t v82 = v0;
    v82[1] = sub_1001A4E28;
    return daemon.getter();
  }
  else
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v44 = v0[32];
    uint64_t v43 = v0[33];
    uint64_t v45 = v0[31];
    uint64_t v46 = v0[8];
    uint64_t v47 = type metadata accessor for Logger();
    sub_100044058(v47, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
    os_log_type_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v0[32];
    uint64_t v52 = v0[33];
    if (v50)
    {
      uint64_t v53 = v0[29];
      uint64_t v54 = v0[30];
      uint64_t v55 = v0[28];
      os_log_type_t v92 = v49;
      uint64_t v90 = v0[31];
      BOOL v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v56 = 136446210;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      os_log_t log = v48;
      uint64_t v57 = v55;
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v60 = v59;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v57);
      v0[2] = sub_100037004(v58, v60, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v90);
      os_log_type_t v48 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v92, "Not sending IDS trigger of fence %{public}s since we are the finder", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v51 + 8))(v0[33], v0[31]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = (uint64_t (*)(void))v0[1];
    return v62();
  }
}

uint64_t sub_1001A4E28(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 336) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 344) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_1001A5004;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001A5004(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 352) = a1;
  *(void *)(v4 + 360) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_1001A5984;
  }
  else {
    uint64_t v6 = sub_1001A5154;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A5154()
{
  uint64_t v1 = v0[45];
  unint64_t v2 = sub_1001FC6C8();
  uint64_t v3 = v0[44];
  if (v1)
  {
    uint64_t v4 = v1;
    uint64_t v5 = v0[24];
    uint64_t v7 = v0[16];
    uint64_t v6 = v0[17];
    uint64_t v8 = v0[15];
    uint64_t v10 = v0[8];
    uint64_t v9 = v0[9];
    swift_errorRetain();
    uint64_t v11 = sub_100051340(v10, v9, v4, 1);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_errorRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100145E90(v11, v13, v15);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1001B138C(v5, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    v0[46] = sub_10032B354(v2);
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001A539C, v3, 0);
  }
}

uint64_t sub_1001A539C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[47] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001A5444;
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[13];
  return InternetMessaging.send(dictionary:messageOptions:)(v4, v2, v3);
}

uint64_t sub_1001A5444()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[44];
    uint64_t v4 = sub_1001A573C;
  }
  else
  {
    uint64_t v6 = v2[12];
    uint64_t v5 = v2[13];
    uint64_t v8 = v2 + 10;
    uint64_t v7 = v2[10];
    (*(void (**)(uint64_t, void))(v6 + 8))(v5, v8[1]);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1001A5584;
    uint64_t v3 = v7;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A5584()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  uint64_t v5 = sub_100051340(v0[8], v0[9], 0, 0);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v5, v7, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1001A573C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001A57A8, v1, 0);
}

uint64_t sub_1001A57A8()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  swift_errorRetain();
  uint64_t v8 = sub_100051340(v7, v6, v1, 1);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_errorRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100145E90(v8, v10, v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_willThrow();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1001B138C(v2, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001A5984()
{
  uint64_t v1 = v0[24];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1001A5ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for Fence.ID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Variant();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_1001A5C78, v3, 0);
}

uint64_t sub_1001A5C78()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  Fence.variant.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  BOOL v5 = v4 == enum case for Fence.Variant.oneTime(_:) || v4 == enum case for Fence.Variant.recurring(_:);
  uint64_t v6 = v5;
  if (!v5)
  {
    if (v4 == enum case for Fence.Variant.scheduled(_:))
    {
      uint64_t v7 = (void *)swift_task_alloc();
      v0[19] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1001A6194;
      uint64_t v8 = v0[6];
      uint64_t v10 = v0[4];
      uint64_t v9 = v0[5];
      return sub_1001AF3E8(v10, v9, v8);
    }
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v13 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v14 = v0[11];
    uint64_t v15 = v0[12];
    uint64_t v16 = v0[4];
    uint64_t v17 = type metadata accessor for Logger();
    sub_100044058(v17, (uint64_t)qword_10040B770);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v18(v12, v16, v14);
    v18(v13, v16, v14);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = v0[16];
      uint64_t v21 = v0[17];
      uint64_t v24 = v0[14];
      uint64_t v23 = v0[15];
      uint64_t v44 = v0[12];
      uint64_t v37 = v0[11];
      uint64_t v39 = v0[10];
      uint64_t v40 = v0[13];
      uint64_t v41 = v0[9];
      uint64_t v38 = v0[8];
      os_log_t log = v19;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      os_log_type_t type = v20;
      Fence.variant.getter();
      sub_10004730C(&qword_1003F0C10, (void (*)(uint64_t))&type metadata accessor for Fence.Variant);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      v0[2] = sub_100037004(v26, v28, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v36(v24, v37);
      *(_WORD *)(v25 + 12) = 2082;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v38);
      v0[3] = sub_100037004(v29, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36(v40, v37);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Unrecognized fence variant %{public}s for fence id %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v32 = v0[13];
      uint64_t v33 = v0[11];
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
      v34(v0[14], v33);
      v34(v32, v33);
    }
  }
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(uint64_t))v0[1];
  return v35(v6);
}

uint64_t sub_1001A6194(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 56);
  if (v1)
  {
    uint64_t v6 = sub_1001A6394;
  }
  else
  {
    *(unsigned char *)(v4 + 168) = a1 & 1;
    uint64_t v6 = sub_1001A62D4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001A62D4()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 168);
  (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001A6394()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1(0);
}

uint64_t sub_1001A6450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a3;
  v5[13] = v4;
  v5[10] = a1;
  v5[11] = a2;
  uint64_t v9 = type metadata accessor for Fence.ID();
  v5[14] = v9;
  v5[15] = *(void *)(v9 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  v5[17] = v10;
  v5[18] = *(void *)(v10 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence();
  v5[20] = v11;
  v5[21] = *(void *)(v11 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = type metadata accessor for FenceNotification();
  v5[24] = swift_task_alloc();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003F0C08 + dword_1003F0C08);
  uint64_t v12 = (void *)swift_task_alloc();
  v5[25] = v12;
  *uint64_t v12 = v5;
  v12[1] = sub_1001A6660;
  return v14(a1, a3, a4);
}

uint64_t sub_1001A6660(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void **)v3;
  *(void *)(*(void *)v3 + 208) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = v6[13];
    return _swift_task_switch(sub_1001A6998, v8, 0);
  }
  else
  {
    v6[27] = a2;
    uint64_t v9 = (void *)swift_task_alloc();
    v6[28] = v9;
    void *v9 = v7;
    v9[1] = sub_1001A6804;
    uint64_t v10 = v6[24];
    uint64_t v11 = v6[11];
    uint64_t v12 = v6[12];
    uint64_t v13 = v6[10];
    return sub_10032BAF8(v10, v13, v11, v12, a1, a2);
  }
}

uint64_t sub_1001A6804()
{
  uint64_t v2 = (void *)*v1;
  v2[29] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = v2[13];
    return _swift_task_switch(sub_1001A7430, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[30] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1001A6E50;
    return daemon.getter();
  }
}

uint64_t sub_1001A6998()
{
  uint64_t v41 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 10;
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v39 = v0;
  uint64_t v5 = v0[19];
  uint64_t v6 = v2[10];
  uint64_t v8 = v2[7];
  uint64_t v7 = v2[8];
  uint64_t v9 = v2[1];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100044058(v10, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v38 = v11;
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v15 = v2[11];
  uint64_t v14 = v2[12];
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[7];
  uint64_t v19 = v2[8];
  if (v13)
  {
    uint64_t v36 = v2[9];
    uint64_t v34 = v2[10];
    uint64_t v21 = v39[15];
    uint64_t v20 = v39[16];
    uint64_t v32 = v2[12];
    uint64_t v22 = v39[14];
    uint64_t v35 = v2[7];
    uint64_t v23 = swift_slowAlloc();
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = v19;
    unint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v39[7] = sub_100037004(v24, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v34);
    *(_WORD *)(v23 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v39[8] = sub_100037004(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
    *(_WORD *)(v23 + 22) = 2114;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    v39[9] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v12, "Failed to post transparency notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v23, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = (uint64_t (*)(void))v39[1];
  return v30();
}

uint64_t sub_1001A6E50(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 248) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 256) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for UserNotificationService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F0D88, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001A702C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001A702C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 104);
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 272) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    uint64_t v5 = sub_1001A78E8;
  }
  else {
    uint64_t v5 = sub_1001A717C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001A717C()
{
  uint64_t v1 = v0[24];
  v0[5] = v0[23];
  v0[6] = (uint64_t)&off_1003E5048;
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  sub_1001B13EC(v1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[35] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001A7254;
  return sub_10033121C((uint64_t)(v0 + 2));
}

uint64_t sub_1001A7254()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = sub_1001A7DBC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    sub_1000233E4(v2 + 16);
    uint64_t v4 = sub_1001A737C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A737C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_release();
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001A7430()
{
  uint64_t v41 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 10;
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v39 = v0;
  uint64_t v5 = v0[19];
  uint64_t v6 = v2[10];
  uint64_t v8 = v2[7];
  uint64_t v7 = v2[8];
  uint64_t v9 = v2[1];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100044058(v10, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v38 = v11;
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v15 = v2[11];
  uint64_t v14 = v2[12];
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[7];
  uint64_t v19 = v2[8];
  if (v13)
  {
    uint64_t v36 = v2[9];
    uint64_t v34 = v2[10];
    uint64_t v21 = v39[15];
    uint64_t v20 = v39[16];
    uint64_t v32 = v2[12];
    uint64_t v22 = v39[14];
    uint64_t v35 = v2[7];
    uint64_t v23 = swift_slowAlloc();
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = v19;
    unint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v39[7] = sub_100037004(v24, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v34);
    *(_WORD *)(v23 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v39[8] = sub_100037004(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
    *(_WORD *)(v23 + 22) = 2114;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    v39[9] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v12, "Failed to post transparency notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v23, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = (uint64_t (*)(void))v39[1];
  return v30();
}

uint64_t sub_1001A78E8()
{
  uint64_t v41 = v0;
  sub_1001B138C(v0[24], (uint64_t (*)(void))type metadata accessor for FenceNotification);
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 10;
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v39 = v0;
  uint64_t v5 = v0[19];
  uint64_t v6 = v2[10];
  uint64_t v8 = v2[7];
  uint64_t v7 = v2[8];
  uint64_t v9 = v2[1];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100044058(v10, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v38 = v11;
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v15 = v2[11];
  uint64_t v14 = v2[12];
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[7];
  uint64_t v19 = v2[8];
  if (v13)
  {
    uint64_t v36 = v2[9];
    uint64_t v34 = v2[10];
    uint64_t v21 = v39[15];
    uint64_t v20 = v39[16];
    uint64_t v32 = v2[12];
    uint64_t v22 = v39[14];
    uint64_t v35 = v2[7];
    uint64_t v23 = swift_slowAlloc();
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = v19;
    unint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v39[7] = sub_100037004(v24, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v34);
    *(_WORD *)(v23 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v39[8] = sub_100037004(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
    *(_WORD *)(v23 + 22) = 2114;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    v39[9] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v12, "Failed to post transparency notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v23, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = (uint64_t (*)(void))v39[1];
  return v30();
}

uint64_t sub_1001A7DBC()
{
  uint64_t v42 = v0;
  uint64_t v1 = v0[24];
  swift_release();
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  sub_1000233E4((uint64_t)(v0 + 2));
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 10;
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  uint64_t v40 = v0;
  uint64_t v6 = v0[19];
  uint64_t v7 = v3[10];
  uint64_t v9 = v3[7];
  uint64_t v8 = v3[8];
  uint64_t v10 = v3[1];
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v2, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v10, v9);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  uint64_t v39 = v12;
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = v3[11];
  uint64_t v15 = v3[12];
  uint64_t v17 = v3[9];
  uint64_t v18 = v3[10];
  uint64_t v19 = v3[7];
  uint64_t v20 = v3[8];
  if (v14)
  {
    uint64_t v37 = v3[9];
    uint64_t v35 = v3[10];
    uint64_t v22 = v40[15];
    uint64_t v21 = v40[16];
    uint64_t v33 = v3[12];
    uint64_t v23 = v40[14];
    uint64_t v36 = v3[7];
    uint64_t v24 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = v20;
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    v40[7] = sub_100037004(v25, v27, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v33, v35);
    *(_WORD *)(v24 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v40[8] = sub_100037004(v28, v29, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v37, v36);
    *(_WORD *)(v24 + 22) = 2114;
    swift_errorRetain();
    uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
    v40[9] = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v38 = v30;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v13, "Failed to post transparency notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v24, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v18);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v17, v19);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v31 = (uint64_t (*)(void))v40[1];
  return v31();
}

uint64_t sub_1001A82A8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[4] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001A836C;
  return daemon.getter();
}

uint64_t sub_1001A836C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[6] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[7] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[8] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[9] = v6;
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001A854C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001A854C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[3];
    return _swift_task_switch(sub_1001A8EB0, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[12] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_1001A86C0;
    return daemon.getter();
  }
}

uint64_t sub_1001A86C0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 104) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 112) = v5;
  uint64_t v6 = type metadata accessor for FenceService(0);
  uint64_t v7 = sub_10004730C(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001A8874;
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 64);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001A8874(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = sub_1001A8F20;
  }
  else
  {
    uint64_t v6 = v3[10];
    swift_release();
    uint64_t v5 = sub_1001A899C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001A899C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[2];
  uint64_t v3 = sub_10004730C(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[17] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001A8ACC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v1, v3, 0xD000000000000010, 0x80000001003770D0, sub_1001B10B0, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1001A8ACC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = sub_1001A8DCC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    swift_task_dealloc();
    uint64_t v4 = sub_1001A8BF4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A8BF4()
{
  return _swift_task_switch(sub_1001A8C10, *(void *)(v0 + 120), 0);
}

uint64_t sub_1001A8C10()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = sub_10004730C(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n();
  sub_10012EDF8(v3, (uint64_t)&unk_1003EF748, (uint64_t)v6);
  swift_release();
  return _swift_task_switch(sub_1001A8D50, v2, 0);
}

uint64_t sub_1001A8D50()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A8DCC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A8E38, v1, 0);
}

uint64_t sub_1001A8E38()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A8EB0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A8F20()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A8F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for FenceTriggerRecord();
  v4[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.ID();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001A908C, v3, 0);
}

uint64_t sub_1001A908C()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 4;
  uint64_t v2 = v0[4];
  uint64_t v5 = v0[11];
  uint64_t v4 = v1[12];
  uint64_t v6 = v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  v1[13] = sub_100044058(v7, (uint64_t)qword_10040B770);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v1[14] = v8;
  v1[15] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v4, v2, v6);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v1[11];
  uint64_t v12 = v1[12];
  uint64_t v14 = v1[10];
  if (v11)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v1[3] = sub_100037004(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "saveFenceTrigger: %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v13 + 8))(v3[8], v3[6]);
  }

  uint64_t v18 = (void *)swift_task_alloc();
  v1[16] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_1001A933C;
  return daemon.getter();
}

uint64_t sub_1001A933C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 136) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 144) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001A9518;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001A9518(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[7];
    uint64_t v5 = sub_1001A9CF8;
  }
  else
  {
    uint64_t v6 = v3[7];
    swift_release();
    uint64_t v5 = sub_1001A9640;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001A9640()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(v0 + 112))(v2, *(void *)(v0 + 32), *(void *)(v0 + 80));
  uint64_t v6 = v2 + *(int *)(v3 + 20);
  uint64_t v7 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, v4, v7);
  uint64_t v8 = v2 + *(int *)(v3 + 24);
  uint64_t v9 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, v5, v9);
  return _swift_task_switch(sub_1001A9758, v1, 0);
}

uint64_t sub_1001A9758()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[9];
  uint64_t v3 = sub_10004730C(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[21] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[22] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001A9888;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v1, v3, 0xD000000000000015, 0x80000001003770F0, sub_1001B10F8, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1001A9888()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 152);
    uint64_t v4 = sub_1001A9AA4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 152);
    swift_task_dealloc();
    uint64_t v4 = sub_1001A99B0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001A99B0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1001B138C(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
  return _swift_task_switch(sub_1001A9A30, v1, 0);
}

uint64_t sub_1001A9A30()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001A9AA4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc();
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceTriggerRecord);
  return _swift_task_switch(sub_1001A9B30, v2, 0);
}

uint64_t sub_1001A9B30()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "saveFenceTrigger: ERROR %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001A9CF8()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "saveFenceTrigger: ERROR %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001A9EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v8 = type metadata accessor for Fence();
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.ID();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock();
  v6[19] = v10;
  v6[20] = *(void *)(v10 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_projectBox();
  return _swift_task_switch(sub_1001AA068, a5, 0);
}

uint64_t sub_1001AA068()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003F0B58 + dword_1003F0B58);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001AA130;
  return v3(0x8AC7230489E80000, 0, 0, 0, 1);
}

uint64_t sub_1001AA130()
{
  os_log_type_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[21];
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[19];
  uint64_t v6 = v2[10];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_1001B1454;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_1001AA2DC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001AA2DC()
{
  uint64_t v25 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  swift_retain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[18];
    uint64_t v22 = v0[16];
    os_log_type_t type = v3;
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[13];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v4, v8);
    Fence.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v22);
    v0[8] = sub_100037004(v11, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "Posting trigger confirmation notification for fence: %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v14 = v0[22];
  uint64_t v16 = v0[13];
  uint64_t v15 = v0[14];
  uint64_t v17 = v0[12];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[24] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1001AA634;
  uint64_t v19 = v0[14];
  uint64_t v20 = v0[11];
  return sub_1001AA88C(v19, v20);
}

uint64_t sub_1001AA634()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  uint64_t v5 = *(void **)v1;
  v5[25] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = v5[10];
    return _swift_task_switch(sub_1001AA800, v6, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v5[1];
    return v7();
  }
}

uint64_t sub_1001AA800()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001AA88C(uint64_t a1, uint64_t a2)
{
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  v3[27] = type metadata accessor for FenceConfirmationNotification();
  v3[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Destination();
  v3[29] = v4;
  v3[30] = *(void *)(v4 - 8);
  v3[31] = swift_task_alloc();
  sub_100044014(&qword_1003F0380);
  v3[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PersonHandle();
  v3[33] = v5;
  v3[34] = *(void *)(v5 - 8);
  v3[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.ID();
  v3[36] = v6;
  v3[37] = *(void *)(v6 - 8);
  v3[38] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.TriggerID();
  v3[39] = v7;
  v3[40] = *(void *)(v7 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence();
  v3[45] = v8;
  v3[46] = *(void *)(v8 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  return _swift_task_switch(sub_1001AAB64, v2, 0);
}

uint64_t sub_1001AAB64()
{
  uint64_t v72 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[46];
  uint64_t v69 = v0[44];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[25];
  uint64_t v8 = type metadata accessor for Logger();
  v0[50] = sub_100044058(v8, (uint64_t)qword_10040B770);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[51] = v9;
  v0[52] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v1, v3);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[53] = v10;
  v0[54] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v69, v7, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[46];
  uint64_t v15 = v0[44];
  uint64_t v16 = v0[39];
  uint64_t v17 = v0[40];
  if (v13)
  {
    uint64_t v63 = v0[39];
    uint64_t v65 = v0[44];
    uint64_t v19 = v0[37];
    uint64_t v18 = v0[38];
    uint64_t v20 = v0[36];
    uint64_t v60 = v0[45];
    uint64_t v21 = v0[49];
    uint64_t v57 = v0[40];
    uint64_t v22 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446466;
    os_log_type_t type = v12;
    uint64_t v23 = v21;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_t log = v11;
    unint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v0[22] = sub_100037004(v24, v26, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v23, v60);
    *(_WORD *)(v22 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[23] = sub_100037004(v27, v28, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v29(v65, v63);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Will post confirmation notification for fence %{public}s with trigger %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v14 + 8))(v0[49], v0[45]);
    unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v29(v15, v16);
  }
  v0[55] = v29;
  uint64_t v30 = Fence.others.getter();
  if (*(void *)(v30 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[34] + 16))(v0[32], v30 + ((*(unsigned __int8 *)(v0[34] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[34] + 80)), v0[33]);
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = 1;
  }
  uint64_t v32 = v0[33];
  uint64_t v33 = v0[34];
  uint64_t v34 = v0[32];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v34, v31, 1, v32);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) == 1)
  {
    sub_10000A520(v0[32], &qword_1003F0380);
    uint64_t v35 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
    uint64_t v36 = v0[43];
    uint64_t v37 = v0[39];
    uint64_t v64 = v0[40];
    uint64_t v58 = v0[38];
    uint64_t v66 = v0[37];
    os_log_type_t typea = (void (*)(uint64_t, uint64_t))v0[55];
    uint64_t v70 = v0[36];
    uint64_t v39 = (int *)v0[27];
    uint64_t v38 = v0[28];
    uint64_t v40 = v0[25];
    uint64_t v41 = sub_100181194(v0[24], 0, 0);
    uint64_t v59 = v42;
    uint64_t v61 = v41;
    swift_bridgeObjectRelease();
    Fence.id.getter();
    v35(v36, v40, v37);
    uint64_t v43 = enum case for LocalUserNotificationCategory.geofenceConfirmation(_:);
    uint64_t v44 = type metadata accessor for LocalUserNotificationCategory();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v38, v43, v44);
    *(unsigned char *)(v38 + v39[5]) = 2;
    uint64_t v45 = (void *)(v38 + v39[8]);
    *uint64_t v45 = 0;
    v45[1] = 0xE000000000000000;
    uint64_t v46 = Fence.ID.uuidString.getter();
    uint64_t v48 = v47;
    os_log_type_t v49 = (uint64_t *)(v38 + v39[9]);
    *os_log_type_t v49 = v61;
    v49[1] = v59;
    BOOL v50 = (uint64_t *)(v38 + v39[7]);
    uint64_t *v50 = v46;
    v50[1] = v47;
    swift_bridgeObjectRetain();
    Fence.TriggerID.uuid.getter();
    sub_100044014(&qword_1003F4BE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100367D70;
    *(void *)(inited + 32) = 0x6E6F697461636F6CLL;
    *(void *)(inited + 40) = 0xEF64497472656C41;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v46;
    *(void *)(inited + 56) = v48;
    unint64_t v52 = sub_100101984(inited);
    v0[59] = (v64 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    typea(v36, v37);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v0[60] = v53;
    v0[61] = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v53(v58, v70);
    *(void *)(v38 + v39[10]) = v52;
    uint64_t v54 = (void *)swift_task_alloc();
    v0[62] = v54;
    *uint64_t v54 = v0;
    v54[1] = sub_1001AB6A8;
    return daemon.getter();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[34] + 32))(v0[35], v0[32], v0[33]);
    sub_10019C390();
    uint64_t v55 = (void *)swift_task_alloc();
    v0[56] = v55;
    *uint64_t v55 = v0;
    v55[1] = sub_1001AB288;
    return sub_10032E0BC(1);
  }
}

uint64_t sub_1001AB288(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 248);
  uint64_t v5 = *(void *)(*v2 + 240);
  uint64_t v6 = *(void *)(*v2 + 232);
  uint64_t v7 = *(void *)(*v2 + 208);
  *(void *)(v3 + 456) = a1;
  *(void *)(v3 + 464) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_1001AB3FC, v7, 0);
}

uint64_t sub_1001AB3FC()
{
  uint64_t v1 = v0[58];
  (*(void (**)(uint64_t, uint64_t))(v0[34] + 8))(v0[35], v0[33]);
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[53];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[39];
  uint64_t v26 = v0[40];
  uint64_t v23 = v0[38];
  uint64_t v27 = v0[37];
  unint64_t v28 = (void (*)(uint64_t, uint64_t))v0[55];
  uint64_t v29 = v0[36];
  uint64_t v6 = (int *)v0[27];
  uint64_t v5 = v0[28];
  uint64_t v7 = v0[25];
  uint64_t v8 = sub_100181194(v0[24], v0[57], v1);
  uint64_t v24 = v9;
  uint64_t v25 = v8;
  swift_bridgeObjectRelease();
  Fence.id.getter();
  v2(v3, v7, v4);
  uint64_t v10 = enum case for LocalUserNotificationCategory.geofenceConfirmation(_:);
  uint64_t v11 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v5, v10, v11);
  *(unsigned char *)(v5 + v6[5]) = 2;
  os_log_type_t v12 = (void *)(v5 + v6[8]);
  *os_log_type_t v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v13 = Fence.ID.uuidString.getter();
  uint64_t v15 = v14;
  uint64_t v16 = (uint64_t *)(v5 + v6[9]);
  *uint64_t v16 = v25;
  v16[1] = v24;
  uint64_t v17 = (uint64_t *)(v5 + v6[7]);
  *uint64_t v17 = v13;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  Fence.TriggerID.uuid.getter();
  sub_100044014(&qword_1003F4BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(void *)(inited + 32) = 0x6E6F697461636F6CLL;
  *(void *)(inited + 40) = 0xEF64497472656C41;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v15;
  unint64_t v19 = sub_100101984(inited);
  v0[59] = (v26 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v28(v3, v4);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v0[60] = (uint64_t)v20;
  v0[61] = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v23, v29);
  *(void *)(v5 + v6[10]) = v19;
  uint64_t v21 = (void *)swift_task_alloc();
  v0[62] = (uint64_t)v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1001AB6A8;
  return daemon.getter();
}

uint64_t sub_1001AB6A8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 504) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 512) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for UserNotificationService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F0D88, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001AB884;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001AB884(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 520) = a1;
  *(void *)(v4 + 528) = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void *)(v3 + 208);
  if (v1) {
    uint64_t v6 = sub_1001ABFD0;
  }
  else {
    uint64_t v6 = sub_1001AB9D8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001AB9D8()
{
  uint64_t v1 = v0[28];
  v0[15] = v0[27];
  v0[16] = (uint64_t)&off_1003E4FD8;
  uint64_t v2 = sub_10003E0F4(v0 + 12);
  sub_1001B13EC(v1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for FenceConfirmationNotification);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[67] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001ABAB0;
  return sub_10033121C((uint64_t)(v0 + 12));
}

uint64_t sub_1001ABAB0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 208);
    uint64_t v4 = sub_1001AC464;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 208);
    sub_1000233E4(v2 + 96);
    uint64_t v4 = sub_1001ABBD8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001ABBD8()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 200);
  (*(void (**)(void, void, void))(v0 + 408))(*(void *)(v0 + 384), *(void *)(v0 + 192), *(void *)(v0 + 360));
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 384);
    uint64_t v8 = *(void *)(v0 + 368);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v9 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 360);
    uint64_t v29 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v32 = *(void *)(v0 + 224);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    v27(v9, v10);
    *(void *)(v0 + 160) = sub_100037004(v12, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v28);
    *(_WORD *)(v11 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_100037004(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v31(v30, v29);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Confirmation notification posted for fence %{public}s with trigger %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v17 = v32;
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v22 = *(void *)(v0 + 336);
    uint64_t v23 = *(void *)(v0 + 312);
    uint64_t v24 = *(void *)(v0 + 224);
    swift_release();

    v18(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    uint64_t v17 = v24;
  }
  sub_1001B138C(v17, (uint64_t (*)(void))type metadata accessor for FenceConfirmationNotification);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_1001ABFD0()
{
  uint64_t v35 = v0;
  sub_1001B138C(*(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for FenceConfirmationNotification);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 200);
  (*(void (**)(void, void, void))(v0 + 408))(*(void *)(v0 + 376), *(void *)(v0 + 192), *(void *)(v0 + 360));
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v8 = *(void *)(v0 + 376);
    uint64_t v29 = *(void *)(v0 + 328);
    uint64_t v27 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 312);
    os_log_t log = v5;
    uint64_t v9 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446722;
    os_log_type_t type = v6;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    v26(v9, v10);
    *(void *)(v0 + 152) = sub_100037004(v12, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v27);
    *(_WORD *)(v11 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_100037004(v15, v16, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v32(v29, v28);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post confirmation notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v11, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v20 = *(void *)(v0 + 368);
    uint64_t v19 = *(void *)(v0 + 376);
    uint64_t v21 = *(void *)(v0 + 360);
    uint64_t v22 = *(void *)(v0 + 328);
    uint64_t v23 = *(void *)(v0 + 312);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v18(v22, v23);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1001AC464()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void *)(v0 + 224);
  swift_release();
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceConfirmationNotification);
  sub_1000233E4(v0 + 96);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 200);
  (*(void (**)(void, void, void))(v0 + 408))(*(void *)(v0 + 376), *(void *)(v0 + 192), *(void *)(v0 + 360));
  v2(v3, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v8 = *(void *)(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 376);
    uint64_t v30 = *(void *)(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 360);
    uint64_t v29 = *(void *)(v0 + 312);
    os_log_t log = v6;
    uint64_t v10 = *(void *)(v0 + 304);
    uint64_t v11 = *(void *)(v0 + 288);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    os_log_type_t type = v7;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    v27(v10, v11);
    *(void *)(v0 + 152) = sub_100037004(v13, v15, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v28);
    *(_WORD *)(v12 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_100037004(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v30, v29);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post confirmation notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v12, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 376);
    uint64_t v22 = *(void *)(v0 + 360);
    uint64_t v23 = *(void *)(v0 + 328);
    uint64_t v24 = *(void *)(v0 + 312);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v19(v23, v24);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_1001AC910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  v5[21] = type metadata accessor for FenceNotification();
  v5[22] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.ID();
  v5[23] = v9;
  v5[24] = *(void *)(v9 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  v5[26] = v10;
  v5[27] = *(void *)(v10 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence();
  v5[32] = v11;
  v5[33] = *(void *)(v11 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  uint64_t v12 = (void *)swift_task_alloc();
  v5[38] = v12;
  *uint64_t v12 = v5;
  v12[1] = sub_1001ACB64;
  return sub_1001A5ADC(a1, a3, a4);
}

uint64_t sub_1001ACB64(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 160);
    *(unsigned char *)(v4 + 464) = a1 & 1;
    return _swift_task_switch(sub_1001ACD3C, v8, 0);
  }
}

uint64_t sub_1001ACD3C()
{
  uint64_t v78 = v0;
  if (*(unsigned char *)(v0 + 464) == 1)
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 128);
    uint64_t v2 = *(void *)(v0 + 296);
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v75 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v8 = type metadata accessor for Logger();
    *(void *)(v0 + 312) = sub_100044058(v8, (uint64_t)qword_10040B770);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(void *)(v0 + 320) = v9;
    *(void *)(v0 + 328) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v9(v2, v1, v3);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(void *)(v0 + 336) = v10;
    *(void *)(v0 + 344) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v10(v75, v7, v6);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 264);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 216);
    if (v13)
    {
      uint64_t v65 = *(void *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 256);
      uint64_t v19 = *(void *)(v0 + 192);
      uint64_t v18 = *(void *)(v0 + 200);
      uint64_t v72 = *(void *)(v0 + 248);
      uint64_t v20 = *(void *)(v0 + 184);
      uint64_t v21 = *(void *)(v0 + 296);
      uint64_t v71 = *(void *)(v0 + 208);
      uint64_t v22 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446466;
      os_log_type_t type = v12;
      uint64_t v23 = v21;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t log = v11;
      unint64_t v26 = v25;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      *(void *)(v0 + 112) = sub_100037004(v24, v26, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v27(v23, v67);
      *(_WORD *)(v22 + 12) = 2082;
      sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 120) = sub_100037004(v28, v29, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v30(v72, v71);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Should post confirmation notification for fence %{public}s with trigger %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v27(*(void *)(v0 + 296), *(void *)(v0 + 256));
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v30(v15, v16);
    }
    *(void *)(v0 + 352) = v30;
    *(void *)(v0 + 360) = v27;
    uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003F0C08 + dword_1003F0C08);
    uint64_t v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v57;
    *uint64_t v57 = v0;
    v57[1] = sub_1001AD51C;
    uint64_t v58 = *(void *)(v0 + 144);
    uint64_t v59 = *(void *)(v0 + 152);
    uint64_t v60 = *(void *)(v0 + 128);
    return v76(v60, v58, v59);
  }
  else
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v31 = *(void *)(v0 + 280);
    uint64_t v32 = *(void *)(v0 + 256);
    uint64_t v33 = *(void *)(v0 + 264);
    uint64_t v34 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v38 = *(void *)(v0 + 128);
    uint64_t v37 = *(void *)(v0 + 136);
    uint64_t v39 = type metadata accessor for Logger();
    sub_100044058(v39, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v38, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v34, v37, v35);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    BOOL v42 = os_log_type_enabled(v40, v41);
    uint64_t v43 = *(void *)(v0 + 280);
    uint64_t v44 = *(void *)(v0 + 264);
    uint64_t v45 = *(void *)(v0 + 232);
    uint64_t v47 = *(void *)(v0 + 208);
    uint64_t v46 = *(void *)(v0 + 216);
    if (v42)
    {
      uint64_t v66 = *(void *)(v0 + 256);
      uint64_t v49 = *(void *)(v0 + 192);
      uint64_t v48 = *(void *)(v0 + 200);
      os_log_type_t typea = v41;
      uint64_t v50 = *(void *)(v0 + 184);
      uint64_t v68 = *(void *)(v0 + 208);
      uint64_t v51 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136446466;
      os_log_t loga = v40;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = v45;
      unint64_t v54 = v53;
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      *(void *)(v0 + 88) = sub_100037004(v52, v54, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v66);
      *(_WORD *)(v51 + 12) = 2082;
      sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_100037004(v55, v56, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v64, v68);
      uint64_t v40 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Should not post trigger received notification for fence %{public}s with trigger %{public}s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v44 + 8))(*(void *)(v0 + 280), *(void *)(v0 + 256));
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v63 = *(unsigned __int8 *)(v0 + 464);
    return v62(v63);
  }
}

uint64_t sub_1001AD51C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void **)v3;
  *(void *)(*(void *)v3 + 376) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = v6[20];
    return _swift_task_switch(sub_1001AD854, v8, 0);
  }
  else
  {
    v6[48] = a2;
    uint64_t v9 = (void *)swift_task_alloc();
    v6[49] = v9;
    void *v9 = v7;
    v9[1] = sub_1001AD6C0;
    uint64_t v10 = v6[22];
    uint64_t v11 = v6[17];
    uint64_t v12 = v6[18];
    uint64_t v13 = v6[16];
    return sub_10032AE98(v10, v13, v11, v12, a1, a2);
  }
}

uint64_t sub_1001AD6C0()
{
  uint64_t v2 = (void *)*v1;
  v2[50] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = v2[20];
    return _swift_task_switch(sub_1001AE60C, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[51] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1001ADCD8;
    return daemon.getter();
  }
}

uint64_t sub_1001AD854()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 272), *(void *)(v0 + 128), *(void *)(v0 + 256));
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  os_log_t log = v5;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 256);
    unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 224);
    os_log_type_t type = v6;
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(void *)(v0 + 64) = sub_100037004(v13, v15, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v7, v28);
    *(_WORD *)(v12 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_100037004(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v30, v8);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post trigger received notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v12, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 208);
    swift_errorRelease();
    v19(v21, v22);
    v20(v23, v24);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v26 = *(unsigned __int8 *)(v0 + 464);
  return v25(v26);
}

uint64_t sub_1001ADCD8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 416) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 424) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for UserNotificationService();
  uint64_t v6 = sub_10004730C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004730C(&qword_1003F0D88, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001ADEB4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001ADEB4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 432) = a1;
  *(void *)(v4 + 440) = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void *)(v3 + 160);
  if (v1) {
    uint64_t v6 = sub_1001AEA90;
  }
  else {
    uint64_t v6 = sub_1001AE004;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001AE004()
{
  uint64_t v1 = v0[22];
  v0[5] = v0[21];
  v0[6] = (uint64_t)&off_1003E5048;
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  sub_1001B13EC(v1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[56] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001AE0DC;
  return sub_10033121C((uint64_t)(v0 + 2));
}

uint64_t sub_1001AE0DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_1001AEF30;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 160);
    sub_1000233E4(v2 + 16);
    uint64_t v4 = sub_1001AE204;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001AE204()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 288), *(void *)(v0 + 128), *(void *)(v0 + 256));
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v27 = *(void *)(v0 + 256);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    *(void *)(v0 + 96) = sub_100037004(v12, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v28(v7, v27);
    *(_WORD *)(v11 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 104) = sub_100037004(v15, v16, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v31(v30, v29);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Trigger received notification for fence %{public}s with trigger %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v17 = v32;
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 288);
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 208);
    uint64_t v23 = *(void *)(v0 + 176);
    swift_release();

    v18(v21, v22);
    v33(v19, v20);
    uint64_t v17 = v23;
  }
  sub_1001B138C(v17, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v25 = *(unsigned __int8 *)(v0 + 464);
  return v24(v25);
}

uint64_t sub_1001AE60C()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 272), *(void *)(v0 + 128), *(void *)(v0 + 256));
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  os_log_t log = v5;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 256);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 224);
    os_log_type_t type = v6;
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(void *)(v0 + 64) = sub_100037004(v13, v15, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v7, v28);
    *(_WORD *)(v12 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_100037004(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v30, v8);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post trigger received notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v12, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 208);
    swift_errorRelease();
    v19(v21, v22);
    v20(v23, v24);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v26 = *(unsigned __int8 *)(v0 + 464);
  return v25(v26);
}

uint64_t sub_1001AEA90()
{
  uint64_t v36 = v0;
  sub_1001B138C(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for FenceNotification);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 272), *(void *)(v0 + 128), *(void *)(v0 + 256));
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  os_log_t log = v5;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 256);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 224);
    os_log_type_t type = v6;
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(void *)(v0 + 64) = sub_100037004(v13, v15, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v7, v28);
    *(_WORD *)(v12 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_100037004(v16, v17, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v30, v8);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v18;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post trigger received notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v12, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 208);
    swift_errorRelease();
    v19(v21, v22);
    v20(v23, v24);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v26 = *(unsigned __int8 *)(v0 + 464);
  return v25(v26);
}

uint64_t sub_1001AEF30()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  swift_release();
  sub_1001B138C(v1, (uint64_t (*)(void))type metadata accessor for FenceNotification);
  sub_1000233E4(v0 + 16);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 272), *(void *)(v0 + 128), *(void *)(v0 + 256));
  v2(v3, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  os_log_t log = v6;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v31 = *(void *)(v0 + 224);
    os_log_type_t type = v7;
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    Fence.id.getter();
    sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    *(void *)(v0 + 64) = sub_100037004(v14, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v30(v8, v29);
    *(_WORD *)(v13 + 12) = 2082;
    sub_10004730C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_100037004(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v31, v9);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to post trigger received notification for fence %{public}s with trigger %{public}s: %{public}@", (uint8_t *)v13, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 208);
    swift_errorRelease();
    v20(v22, v23);
    v21(v24, v25);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v27 = *(unsigned __int8 *)(v0 + 464);
  return v26(v27);
}

uint64_t sub_1001AF3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a2;
  v4[8] = a3;
  v4[6] = a1;
  v4[9] = sub_100044014(&qword_1003F0C40);
  v4[10] = swift_task_alloc();
  sub_100044014(&qword_1003F0C38);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  sub_100044014(&qword_1003F0D60);
  v4[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DateInterval();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.Schedule.Matcher();
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Variant();
  v4[22] = v7;
  v4[23] = *(void *)(v7 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Schedule();
  v4[25] = v8;
  v4[26] = *(void *)(v8 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.ID();
  v4[30] = v9;
  v4[31] = *(void *)(v9 - 8);
  v4[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence();
  v4[33] = v10;
  v4[34] = *(void *)(v10 - 8);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.Participant();
  v4[38] = v11;
  v4[39] = *(void *)(v11 - 8);
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence.TriggerPosition();
  v4[42] = v12;
  v4[43] = *(void *)(v12 - 8);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Date();
  v4[48] = v13;
  v4[49] = *(void *)(v13 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  return _swift_task_switch(sub_1001AF8D4, v3, 0);
}

uint64_t sub_1001AF8D4()
{
  v296 = v0;
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[42];
  uint64_t v3 = (void *)v0[43];
  uint64_t v4 = v0[7];
  sub_10019A184(v0[52]);
  v280 = (void (*)(void))v3[2];
  ((void (*)(uint64_t, uint64_t, uint64_t))v280)(v1, v4, v2);
  uint64_t v261 = (uint64_t (*)(uint64_t, uint64_t))v3[11];
  LODWORD(v4) = v261(v1, v2);
  int v5 = enum case for Fence.TriggerPosition.undetermined(_:);
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v3[1];
  v6(v1, v2);
  int v251 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = v0[40];
    uint64_t v7 = v0[41];
    uint64_t v9 = v0[38];
    uint64_t v10 = v0[39];
    Fence.findee.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v8, enum case for Fence.Participant.me(_:), v9);
    char v11 = static Fence.Participant.== infix(_:_:)();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v12(v8, v9);
    v12(v7, v9);
    if (v11)
    {
      if (qword_1003EC060 != -1) {
        swift_once();
      }
      uint64_t v13 = v0[37];
      uint64_t v14 = v0[33];
      uint64_t v15 = v0[34];
      uint64_t v16 = v0[6];
      uint64_t v17 = type metadata accessor for Logger();
      sub_100044058(v17, (uint64_t)qword_10040B770);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v16, v14);
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = v0[52];
      uint64_t v23 = v0[48];
      uint64_t v22 = v0[49];
      uint64_t v24 = v0[37];
      uint64_t v26 = v0[33];
      uint64_t v25 = v0[34];
      if (v20)
      {
        uint64_t v281 = v0[48];
        uint64_t v262 = v18;
        uint64_t v28 = v0[31];
        uint64_t v27 = v0[32];
        *(void *)uint64_t v216 = v0[30];
        uint64_t v272 = v0[52];
        uint64_t v240 = v0[33];
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v295 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136446210;
        Fence.id.getter();
        sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        os_log_type_t type = v19;
        unint64_t v32 = v31;
        (*(void (**)(uint64_t, os_log_type_t *))(v28 + 8))(v27, *(os_log_type_t **)v216);
        v0[5] = sub_100037004(v30, v32, &v295);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v240);
        _os_log_impl((void *)&_mh_execute_header, v262, type, "Fence with undetermined location on me should not post transparency notification: %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v272, v281);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      }
      goto LABEL_39;
    }
  }
  uint64_t v34 = v0[23];
  uint64_t v33 = v0[24];
  uint64_t v35 = v0[22];
  Fence.variant.getter();
  int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 88))(v33, v35);
  if (v36 == enum case for Fence.Variant.oneTime(_:) || v36 == enum case for Fence.Variant.recurring(_:))
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v39 = v0[34];
    uint64_t v38 = v0[35];
    uint64_t v40 = v0[33];
    uint64_t v41 = v0[6];
    uint64_t v42 = type metadata accessor for Logger();
    sub_100044058(v42, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.fault.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = v0[52];
    uint64_t v47 = v0[48];
    uint64_t v48 = v0[49];
    uint64_t v49 = v0[34];
    uint64_t v50 = v0[35];
    uint64_t v51 = v0[33];
    if (v45)
    {
      uint64_t v292 = v0[48];
      uint64_t v273 = v0[33];
      uint64_t v53 = v0[31];
      uint64_t v52 = v0[32];
      uint64_t v222 = v43;
      uint64_t v54 = v0[30];
      uint64_t v282 = v0[52];
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v295 = swift_slowAlloc();
      buf = v55;
      *(_DWORD *)uint64_t v55 = 136446210;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_type_t v217 = v44;
      unint64_t v58 = v57;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      v0[2] = sub_100037004(v56, v58, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v273);
      _os_log_impl((void *)&_mh_execute_header, v222, v217, "Scheduled fence with no schedule FenceID: %{public}s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v282, v292);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    }
    goto LABEL_39;
  }
  if (v36 != enum case for Fence.Variant.scheduled(_:)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v60 = v0[28];
  uint64_t v59 = v0[29];
  uint64_t v61 = v0[26];
  uint64_t v63 = v0[24];
  uint64_t v62 = v0[25];
  uint64_t v212 = v6;
  uint64_t v64 = v0[17];
  uint64_t v223 = v0[16];
  *(void *)uint64_t v218 = v0[27];
  uint64_t v220 = v0[15];
  (*(void (**)(uint64_t, void))(v0[23] + 96))(v63, v0[22]);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
  v65(v60, v63, v62);
  v65(v59, v60, v62);
  (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v61 + 16))(*(os_log_type_t **)v218, v59, v62);
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v220, 1, v223) == 1)
  {
    sub_10000A520(v0[15], &qword_1003F0D60);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v66 = v0[52];
    uint64_t v68 = v0[49];
    uint64_t v67 = v0[50];
    uint64_t v69 = v0[48];
    uint64_t v70 = v0[36];
    uint64_t v71 = v0[33];
    uint64_t v72 = v0[34];
    uint64_t v73 = v0[6];
    uint64_t v74 = type metadata accessor for Logger();
    sub_100044058(v74, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v70, v73, v71);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v67, v66, v69);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v0[49];
    uint64_t v263 = v0[50];
    uint64_t v274 = v0[48];
    uint64_t v283 = v0[52];
    uint64_t v79 = v0[36];
    uint64_t v80 = v0[34];
    uint64_t v252 = v0[33];
    if (v77)
    {
      os_log_type_t v211 = v76;
      uint64_t v82 = v0[31];
      uint64_t v81 = v0[32];
      uint64_t v83 = v0[30];
      uint64_t v224 = v0[25];
      bufa = (uint8_t *)v0[29];
      *(void *)uint64_t v219 = v0[21];
      uint64_t v221 = v0[26];
      uint64_t v213 = v0[20];
      *(void *)os_log_type_t typea = v0[19];
      uint64_t v84 = swift_slowAlloc();
      uint64_t v295 = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136446466;
      os_log_t log = v75;
      Fence.id.getter();
      sub_10004730C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v87 = v86;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
      v0[3] = sub_100037004(v85, v87, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v252);
      *(_WORD *)(v84 + 12) = 2082;
      uint64_t v88 = Date.localISO8601.getter();
      v0[4] = sub_100037004(v88, v89, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v90(v263, v274);
      _os_log_impl((void *)&_mh_execute_header, log, v211, "Fence id %{public}s schedule is not active for %{public}s", (uint8_t *)v84, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(os_log_type_t *, os_log_type_t *))(v213 + 8))(*(os_log_type_t **)v219, *(os_log_type_t **)typea);
      (*(void (**)(uint8_t *, uint64_t))(v221 + 8))(bufa, v224);
      v90(v283, v274);
    }
    else
    {
      uint64_t v293 = v0[29];
      uint64_t v103 = v0[26];
      uint64_t v241 = v0[25];
      uint64_t v105 = v0[20];
      uint64_t v104 = v0[21];
      uint64_t v106 = v0[19];

      uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v107(v263, v274);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v252);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v293, v241);
      v107(v283, v274);
    }
    goto LABEL_39;
  }
  uint64_t v92 = v0[42];
  uint64_t v93 = v0[43];
  uint64_t v95 = v0[13];
  uint64_t v94 = v0[14];
  uint64_t v96 = v0[8];
  (*(void (**)(void, void, void))(v0[17] + 32))(v0[18], v0[15], v0[16]);
  sub_10018112C(v96, v94);
  sub_10018112C(v96, v95);
  uint64_t v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v97(v95, 1, v92) == 1)
  {
    uint64_t v98 = v0[42];
    uint64_t v99 = v0[43];
    uint64_t v101 = v0[13];
    uint64_t v100 = v0[14];
    sub_10000A520(v100, &qword_1003F0C38);
    sub_10000A520(v101, &qword_1003F0C38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v100, 1, 1, v98);
    uint64_t v102 = v212;
  }
  else
  {
    uint64_t v108 = v0[51];
    uint64_t v109 = v0[48];
    uint64_t v110 = v0[49];
    uint64_t v111 = v0[14];
    int v242 = *(void (**)(void, void, void))(v0[43] + 32);
    v242(v0[46], v0[13], v0[42]);
    sub_10019A184(v108);
    char v112 = DateInterval.contains(_:)();
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v109);
    sub_10000A520(v111, &qword_1003F0C38);
    if (v112)
    {
      v242(v0[12], v0[46], v0[42]);
      uint64_t v113 = 0;
      uint64_t v102 = v212;
    }
    else
    {
      uint64_t v102 = v212;
      v212(v0[46], v0[42]);
      uint64_t v113 = 1;
    }
    uint64_t v114 = v0[14];
    uint64_t v115 = v0[12];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[43] + 56))(v115, v113, 1, v0[42]);
    sub_100013B50(v115, v114, &qword_1003F0C38);
  }
  uint64_t v116 = v0[42];
  uint64_t v117 = v0[14];
  uint64_t v118 = v0[10] + *(int *)(v0[9] + 48);
  v280();
  sub_10018112C(v117, v118);
  uint64_t v294 = v118;
  if (v97(v118, 1, v116) == 1)
  {
    uint64_t v264 = v0[52];
    uint64_t v119 = v0[49];
    uint64_t v253 = v0[48];
    uint64_t v284 = v0[42];
    uint64_t v121 = v0[25];
    uint64_t v120 = v0[26];
    uint64_t v122 = v0[20];
    uint64_t v123 = v0[21];
    uint64_t v125 = v0[18];
    uint64_t v124 = v0[19];
    uint64_t v126 = v0[16];
    uint64_t v127 = v0[17];
    bufb = (uint8_t *)v0[29];
    uint64_t v243 = v0[10];
    sub_10000A520(v0[14], &qword_1003F0C38);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v125, v126);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v124);
    (*(void (**)(uint8_t *, uint64_t))(v120 + 8))(bufb, v121);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v264, v253);
    sub_10000A520(v294, &qword_1003F0C38);
    v212(v243, v284);
LABEL_59:
    unsigned int v209 = 1;
    goto LABEL_40;
  }
  uint64_t v128 = v0[42];
  uint64_t v129 = v0[10];
  sub_10018112C(v118, v0[11]);
  int v130 = v261(v129, v128);
  int v131 = v130;
  int v132 = enum case for Fence.TriggerPosition.inside(_:);
  if (v130 != enum case for Fence.TriggerPosition.inside(_:))
  {
    int v151 = enum case for Fence.TriggerPosition.outside(_:);
    if (v130 != enum case for Fence.TriggerPosition.outside(_:))
    {
      if (v130 == v251)
      {
        int v173 = v261(v0[11], v0[42]);
        if (v173 == v132 || v173 == v151)
        {
          uint64_t v271 = v0[52];
          uint64_t v200 = v0[49];
          uint64_t v260 = v0[48];
          uint64_t v201 = v0[43];
          uint64_t v279 = v0[42];
          uint64_t v202 = v0[26];
          bufunint64_t i = (uint8_t *)v0[25];
          uint64_t v250 = v0[29];
          uint64_t v203 = v0[20];
          uint64_t v229 = v0[21];
          uint64_t v205 = v0[18];
          uint64_t v204 = v0[19];
          uint64_t v206 = v0[16];
          uint64_t v207 = v0[17];
          uint64_t v208 = (id *)v0[11];
          uint64_t v291 = v0[10];
          sub_10000A520(v0[14], &qword_1003F0C38);
          (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v205, v206);
          (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v229, v204);
          (*(void (**)(uint64_t, uint8_t *))(v202 + 8))(v250, bufi);
          (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v271, v260);
          (*(void (**)(id *, uint64_t))(v201 + 96))(v208, v279);

          sub_10000A520(v294, &qword_1003F0C38);
          v212(v291, v279);
          goto LABEL_39;
        }
        if (v173 == v251)
        {
          uint64_t v268 = v0[52];
          uint64_t v174 = v0[49];
          uint64_t v257 = v0[48];
          uint64_t v288 = v0[42];
          uint64_t v176 = v0[25];
          uint64_t v175 = v0[26];
          uint64_t v177 = v0[20];
          uint64_t v178 = v0[21];
          uint64_t v180 = v0[18];
          uint64_t v179 = v0[19];
          uint64_t v181 = v0[16];
          uint64_t v182 = v0[17];
          buff = (uint8_t *)v0[29];
          uint64_t v247 = v0[11];
          sub_10000A520(v0[14], &qword_1003F0C38);
          (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v180, v181);
          uint64_t v147 = v212;
          (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v179);
          (*(void (**)(uint8_t *, uint64_t))(v175 + 8))(buff, v176);
          (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v268, v257);
          v212(v247, v288);
          goto LABEL_38;
        }
      }
LABEL_60:
      v102(v0[11], v0[42]);
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v152 = v0[43];
    uint64_t v153 = (id *)v0[44];
    uint64_t v154 = v0[42];
    uint64_t v155 = v0[11];
    ((void (*)(id *, void, uint64_t))v280)(v153, v0[10], v154);
    uint64_t v156 = *(void (**)(id *, uint64_t))(v152 + 96);
    v156(v153, v154);

    int v138 = v261(v155, v154);
    if (v138 == v132)
    {
      uint64_t v276 = v0[52];
      uint64_t v157 = v0[49];
      uint64_t v255 = v0[48];
      uint64_t v286 = v0[42];
      uint64_t v158 = v0[26];
      bufd = (uint8_t *)v0[25];
      uint64_t v245 = v0[29];
      uint64_t v226 = v0[21];
      uint64_t v266 = v156;
      uint64_t v160 = v0[19];
      uint64_t v159 = v0[20];
      uint64_t v161 = v0[17];
      uint64_t v162 = v0[18];
      uint64_t v163 = v0[16];
      uint64_t v164 = (id *)v0[11];
      sub_10000A520(v0[14], &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v163);
      uint64_t v165 = v212;
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v226, v160);
      (*(void (**)(uint64_t, uint8_t *))(v158 + 8))(v245, bufd);
      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v276, v255);
      v266(v164, v286);
LABEL_48:

LABEL_58:
      uint64_t v198 = v0[42];
      uint64_t v199 = v0[10];
      sub_10000A520(v294, &qword_1003F0C38);
      v165(v199, v198);
      goto LABEL_59;
    }
    if (v138 == v131)
    {
      uint64_t v183 = v0[49];
      uint64_t v269 = v0[48];
      uint64_t v278 = v0[52];
      uint64_t v289 = v0[42];
      uint64_t v184 = v0[26];
      uint64_t v248 = v0[25];
      uint64_t v258 = v0[29];
      uint64_t v185 = v0[20];
      uint64_t v186 = v0[18];
      uint64_t v228 = v0[19];
      bufg = (uint8_t *)v0[21];
      uint64_t v187 = v0[16];
      uint64_t v188 = v0[17];
      uint64_t v146 = (id *)v0[11];
      sub_10000A520(v0[14], &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v186, v187);
      uint64_t v147 = v212;
      (*(void (**)(uint8_t *, uint64_t))(v185 + 8))(bufg, v228);
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v258, v248);
      (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v278, v269);
      v156(v146, v289);
      goto LABEL_37;
    }
LABEL_56:
    if (v138 == v251)
    {
      uint64_t v270 = v0[52];
      uint64_t v189 = v0[49];
      uint64_t v259 = v0[48];
      uint64_t v290 = v0[42];
      uint64_t v191 = v0[25];
      uint64_t v190 = v0[26];
      uint64_t v192 = v0[20];
      uint64_t v193 = v0[21];
      uint64_t v195 = v0[18];
      uint64_t v194 = v0[19];
      uint64_t v196 = v0[16];
      uint64_t v197 = v0[17];
      bufh = (uint8_t *)v0[29];
      uint64_t v249 = v0[11];
      sub_10000A520(v0[14], &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v195, v196);
      uint64_t v165 = v212;
      (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v193, v194);
      (*(void (**)(uint8_t *, uint64_t))(v190 + 8))(bufh, v191);
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v270, v259);
      v212(v249, v290);
      goto LABEL_58;
    }
    goto LABEL_60;
  }
  uint64_t v133 = (id *)v0[45];
  uint64_t v135 = v0[42];
  uint64_t v134 = v0[43];
  uint64_t v136 = v0[11];
  ((void (*)(id *, void, uint64_t))v280)(v133, v0[10], v135);
  unsigned __int8 v137 = *(void (**)(id *, uint64_t))(v134 + 96);
  v137(v133, v135);

  int v138 = v261(v136, v135);
  if (v138 != v131)
  {
    if (v138 == enum case for Fence.TriggerPosition.outside(_:))
    {
      uint64_t v267 = v0[52];
      uint64_t v166 = v0[49];
      uint64_t v256 = v0[48];
      uint64_t v277 = v0[42];
      uint64_t v167 = v0[26];
      bufe = (uint8_t *)v0[25];
      uint64_t v246 = v0[29];
      uint64_t v168 = v0[20];
      uint64_t v227 = v0[21];
      v287 = v137;
      uint64_t v170 = v0[18];
      uint64_t v169 = v0[19];
      uint64_t v171 = v0[16];
      uint64_t v172 = v0[17];
      uint64_t v164 = (id *)v0[11];
      sub_10000A520(v0[14], &qword_1003F0C38);
      (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v170, v171);
      uint64_t v165 = v212;
      (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v227, v169);
      (*(void (**)(uint64_t, uint8_t *))(v167 + 8))(v246, bufe);
      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v267, v256);
      v287(v164, v277);
      goto LABEL_48;
    }
    goto LABEL_56;
  }
  uint64_t v265 = v0[52];
  uint64_t v139 = v0[49];
  uint64_t v254 = v0[48];
  uint64_t v275 = v0[42];
  uint64_t v140 = v0[26];
  bufc = (uint8_t *)v0[25];
  uint64_t v244 = v0[29];
  uint64_t v141 = v0[20];
  uint64_t v225 = v0[21];
  v285 = v137;
  uint64_t v143 = v0[18];
  uint64_t v142 = v0[19];
  uint64_t v144 = v0[16];
  uint64_t v145 = v0[17];
  uint64_t v146 = (id *)v0[11];
  sub_10000A520(v0[14], &qword_1003F0C38);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v143, v144);
  uint64_t v147 = v212;
  (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v225, v142);
  (*(void (**)(uint64_t, uint8_t *))(v140 + 8))(v244, bufc);
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v265, v254);
  v285(v146, v275);
LABEL_37:

LABEL_38:
  uint64_t v148 = v0[42];
  uint64_t v149 = v0[10];
  sub_10000A520(v294, &qword_1003F0C38);
  v147(v149, v148);
LABEL_39:
  unsigned int v209 = 0;
LABEL_40:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v150 = (uint64_t (*)(void))v0[1];
  return v150(v209);
}

uint64_t sub_1001B10B0(uint64_t a1)
{
  return sub_100227BA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B10B8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001B10F8(uint64_t a1)
{
  return sub_1002299D4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B1100(uint64_t a1)
{
  return sub_1002295F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B1108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceTriggerRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B116C()
{
  uint64_t v1 = type metadata accessor for Fence.TriggerID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001B1254(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Fence.TriggerID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100018CD0;
  return sub_1001A9EC0(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1001B138C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001B13EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int sub_1001B1460()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001B1504()
{
  return Hasher._finalize()();
}

void *sub_1001B15E0(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10003CB84(0, v2, 0);
    unint64_t result = _swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    unint64_t v5 = 0x8000000100372DF0;
    do
    {
      int v7 = *v4++;
      int v6 = v7;
      BOOL v8 = v7 == 1;
      if (v7 == 1) {
        unint64_t v9 = 0xD00000000000002FLL;
      }
      else {
        unint64_t v9 = 0xD00000000000002ELL;
      }
      if (v8) {
        unint64_t v10 = 0x8000000100372E30;
      }
      else {
        unint64_t v10 = 0x8000000100372E60;
      }
      if (v6) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = 0xD000000000000031;
      }
      if (v6) {
        unint64_t v12 = v10;
      }
      else {
        unint64_t v12 = v5;
      }
      uint64_t v17 = result;
      unint64_t v14 = result[2];
      unint64_t v13 = result[3];
      if (v14 >= v13 >> 1)
      {
        unint64_t v16 = v5;
        sub_10003CB84(v13 > 1, v14 + 1, 1);
        unint64_t v5 = v16;
        unint64_t result = v17;
      }
      result[2] = v14 + 1;
      uint64_t v15 = &result[2 * v14];
      v15[4] = v11;
      v15[5] = v12;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1001B1714()
{
  v1[20] = v0;
  v1[21] = *v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[22] = swift_task_alloc();
  int64_t v2 = (void *)swift_task_alloc();
  v1[23] = v2;
  *int64_t v2 = v1;
  v2[1] = sub_1001B1814;
  v2[2] = v0;
  return _swift_task_switch(sub_1001B4DFC, v0, 0);
}

uint64_t sub_1001B1814()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B1924, v1, 0);
}

uint64_t sub_1001B1924()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[17] = My;
  v0[18] = sub_1001CAAE0(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  int64_t v2 = sub_10003E0F4(v0 + 14);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.fencesMigration(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 14));
  if (My)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[24] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001B1A90;
    return daemon.getter();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001B1A90(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_1001CAAE0(&qword_1003F0E30, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001B1BE8, v3, v2);
}

uint64_t sub_1001B1BE8()
{
  uint64_t v1 = *(void *)(v0 + 160);
  *(void *)(v0 + 208) = Daemon.xpcAlarmEventHandler.getter();
  swift_release();
  return _swift_task_switch(sub_1001B1C60, v1, 0);
}

uint64_t sub_1001B1C60()
{
  uint64_t v1 = v0[26];
  if (v1)
  {
    uint64_t v2 = v0[21];
    uint64_t v3 = v0[22];
    uint64_t v4 = v0[20];
    uint64_t v5 = type metadata accessor for TaskPriority();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    v6(v3, 1, 1, v5);
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    BOOL v8 = (void *)swift_allocObject();
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v7;
    v8[5] = v1;
    v8[6] = v2;
    swift_retain();
    *(void *)(v4 + OBJC_IVAR____TtC13findmylocated12FenceService_xpcAlarmHandlerTask) = sub_10010405C(v3, (uint64_t)&unk_1003F0E40, (uint64_t)v8);
    swift_release();
    v6(v3, 1, 1, v5);
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    unint64_t v10 = (void *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v9;
    *(void *)(v4 + OBJC_IVAR____TtC13findmylocated12FenceService_darwinSignificantTimeChangeTask) = sub_10010405C(v3, (uint64_t)&unk_1003F0E50, (uint64_t)v10);
    swift_release();
    id v11 = [self defaultCenter];
    v0[27] = v11;
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    v0[6] = sub_1001CA0C0;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001C8564;
    v0[5] = &unk_1003E1530;
    unint64_t v13 = _Block_copy(v0 + 2);
    swift_release();
    id v14 = [v11 addObserverForName:NSSystemClockDidChangeNotification object:0 queue:0 usingBlock:v13];
    _Block_release(v13);
    *(void *)(v4 + OBJC_IVAR____TtC13findmylocated12FenceService_systemClockDidChangeObserver) = v14;
    swift_unknownObjectRelease();
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    v0[12] = sub_1001CA110;
    v0[13] = v15;
    v0[8] = _NSConcreteStackBlock;
    v0[9] = 1107296256;
    v0[10] = sub_1001C8564;
    v0[11] = &unk_1003E1558;
    unint64_t v16 = _Block_copy(v0 + 8);
    swift_release();
    id v17 = [v11 addObserverForName:NSSystemTimeZoneDidChangeNotification object:0 queue:0 usingBlock:v16];
    _Block_release(v16);
    *(void *)(v4 + OBJC_IVAR____TtC13findmylocated12FenceService_systemTimeZoneDidChangeObserver) = v17;
    swift_unknownObjectRelease();
    unint64_t v18 = sub_1001B15E0((uint64_t)&off_1003DD468);
    v0[28] = v18;
    uint64_t v26 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                           + async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:));
    os_log_type_t v19 = (void *)swift_task_alloc();
    v0[29] = v19;
    *os_log_type_t v19 = v0;
    v19[1] = sub_1001B21B4;
    return v26(v18);
  }
  else
  {
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040B770);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Missing XPC alarm event handler", v24, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_1001B21B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001B22E0, v1, 0);
}

uint64_t sub_1001B22E0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001B2350(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for XPCAlarm.Criteria.Options();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  type metadata accessor for XPCAlarm.Criteria();
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCAlarm();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.Schedule.Matcher();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence.Variant();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Schedule();
  v2[19] = v7;
  v2[20] = *(void *)(v7 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v2[23] = v8;
  v2[24] = *(void *)(v8 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_1001B26B0, v1, 0);
}

uint64_t sub_1001B26B0()
{
  uint64_t v96 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Updating scheduler timer", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[34];
  uint64_t v8 = v0[23];
  uint64_t v7 = v0[24];

  uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v75(v6, 1, 1, v8);
  static Date.now.getter();
  uint64_t v9 = *(void *)(v5 + 16);
  if (v9)
  {
    uint64_t v10 = v0[24];
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[17];
    uint64_t v13 = v0[14];
    uint64_t v14 = v0[4];
    uint64_t v15 = *(void *)(type metadata accessor for Fence() - 8);
    uint64_t v16 = v14 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v94 = (unsigned int (**)(uint64_t, uint64_t))(v12 + 88);
    uint64_t v82 = (void (**)(uint64_t, void))(v12 + 96);
    uint64_t v83 = (void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v80 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    uint64_t v81 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    int v18 = enum case for Fence.Variant.scheduled(_:);
    uint64_t v85 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    unint64_t v86 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v78 = (void (**)(uint64_t, uint64_t))(v13 + 8);
    os_log_type_t v76 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    BOOL v77 = (void (**)(uint64_t, uint64_t))(v11 + 8);
    swift_bridgeObjectRetain();
    uint64_t v84 = v17;
    int v79 = v18;
    while (1)
    {
      uint64_t v22 = v0[18];
      uint64_t v23 = v0[16];
      Fence.variant.getter();
      if ((*v94)(v22, v23) != v18)
      {
        uint64_t v34 = v0[18];
        uint64_t v35 = v0[16];
        int v36 = v83;
LABEL_17:
        (*v36)(v34, v35);
        goto LABEL_8;
      }
      uint64_t v24 = v0[33];
      uint64_t v89 = v0[34];
      uint64_t v25 = v0[22];
      uint64_t v92 = v0[23];
      uint64_t v26 = v0[21];
      uint64_t v28 = v0[18];
      uint64_t v27 = v0[19];
      (*v82)(v28, v0[16]);
      (*v81)(v25, v28, v27);
      (*v80)(v26, v25, v27);
      Fence.Schedule.Matcher.init(schedule:)();
      Fence.Schedule.Matcher.nextStartOrEndDate(from:)();
      sub_1000E2224(v89, v24);
      uint64_t v29 = *v86;
      int v30 = (*v86)(v24, 1, v92);
      uint64_t v31 = v0[33];
      if (v30 == 1)
      {
        uint64_t v32 = v0[22];
        uint64_t v33 = v0[19];
        (*v78)(v0[15], v0[13]);
        (*v77)(v32, v33);
        sub_10000A520(v31, (uint64_t *)&unk_1003EE800);
        uint64_t v17 = v84;
      }
      else
      {
        uint64_t v37 = v0[28];
        uint64_t v38 = v0[23];
        uint64_t v90 = v0[19];
        uint64_t v93 = v0[22];
        uint64_t v39 = v0[15];
        uint64_t v40 = v0[13];
        unint64_t v87 = *v85;
        (*v85)(v37, v31, v38);
        char v41 = static Date.< infix(_:_:)();
        (*v76)(v37, v38);
        (*v78)(v39, v40);
        (*v77)(v93, v90);
        uint64_t v17 = v84;
        if (v41)
        {
          uint64_t v42 = v0[34];
          uint64_t v43 = v0[29];
          uint64_t v44 = v0[23];
          sub_10000A520(v42, (uint64_t *)&unk_1003EE800);
          v87(v42, v43, v44);
          v75(v42, 0, 1, v44);
          int v18 = v79;
          goto LABEL_8;
        }
      }
      uint64_t v45 = v0[32];
      uint64_t v46 = v0[23];
      sub_1000E2224(v0[34], v45);
      LODWORD(v46) = v29(v45, 1, v46);
      sub_10000A520(v45, (uint64_t *)&unk_1003EE800);
      int v18 = v79;
      if (v46 != 1)
      {
        uint64_t v34 = v0[29];
        uint64_t v35 = v0[23];
        int v36 = v76;
        goto LABEL_17;
      }
      uint64_t v19 = v0[34];
      uint64_t v20 = v0[29];
      uint64_t v21 = v0[23];
      sub_10000A520(v19, (uint64_t *)&unk_1003EE800);
      (*v85)(v19, v20, v21);
      v75(v19, 0, 1, v21);
LABEL_8:
      v16 += v17;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v47 = v0[31];
  uint64_t v48 = v0[23];
  uint64_t v49 = v0[24];
  sub_1000E2224(v0[34], v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
  {
    uint64_t v50 = v0[34];
    uint64_t v51 = v0[31];
    (*(void (**)(void, void))(v0[24] + 8))(v0[30], v0[23]);
    sub_10000A520(v50, (uint64_t *)&unk_1003EE800);
    sub_10000A520(v51, (uint64_t *)&unk_1003EE800);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = (uint64_t (*)(void))v0[1];
    return v52();
  }
  else
  {
    uint64_t v54 = v0[26];
    uint64_t v55 = v0[27];
    uint64_t v56 = v0[23];
    uint64_t v57 = v0[24];
    (*(void (**)(uint64_t, void, uint64_t))(v57 + 32))(v55, v0[31], v56);
    unint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
    v58(v54, v55, v56);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    BOOL v61 = os_log_type_enabled(v59, v60);
    uint64_t v62 = v0[26];
    uint64_t v63 = v0[24];
    if (v61)
    {
      uint64_t v88 = v0[23];
      uint64_t v91 = v59;
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136446210;
      uint64_t v65 = Date.localISO8601.getter();
      v0[3] = sub_100037004(v65, v66, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v69 = *(void (**)(void, void))(v63 + 8);
      uint64_t v68 = v63 + 8;
      uint64_t v67 = v69;
      v69(v62, v88);
      _os_log_impl((void *)&_mh_execute_header, v91, v60, "Updating scheduler timer with nextTriggerDate: %{public}s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v70 = *(void (**)(void, void))(v63 + 8);
      uint64_t v68 = v63 + 8;
      uint64_t v67 = v70;
      v70(v0[26], v0[23]);
    }
    v0[35] = v68;
    v0[36] = v67;
    v58(v0[25], v0[27], v0[23]);
    sub_100044014(&qword_1003F0DF8);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_100367D70;
    static XPCAlarm.Criteria.Options.userVisible.getter();
    v0[2] = v71;
    sub_1001CAAE0(&qword_1003F0E00, (void (*)(uint64_t))&type metadata accessor for XPCAlarm.Criteria.Options);
    sub_100044014(&qword_1003F0E08);
    sub_100014FFC(&qword_1003F0E10, &qword_1003F0E08);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    XPCAlarm.Criteria.init(date:options:)();
    uint64_t v72 = (void *)swift_task_alloc();
    v0[37] = v72;
    *uint64_t v72 = v0;
    v72[1] = sub_1001B30B8;
    uint64_t v73 = v0[12];
    uint64_t v74 = v0[9];
    return XPCAlarm.init(identifier:criteria:)(v73, 0xD000000000000031, 0x8000000100372DF0, v74);
  }
}

uint64_t sub_1001B30B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001B3224, v4, 0);
}

uint64_t sub_1001B3224()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[36];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[23];
  v1(v0[27], v4);
  v1(v3, v4);
  sub_10000A520(v2, (uint64_t *)&unk_1003EE800);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001B33A8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for XPCAlarm.Criteria.Options();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  type metadata accessor for XPCAlarm.Criteria();
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCAlarm();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.ID();
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Calendar.SearchDirection();
  v2[23] = v7;
  v2[24] = *(void *)(v7 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Schedule.Matcher();
  v2[26] = v8;
  v2[27] = *(void *)(v8 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.Variant();
  v2[29] = v9;
  v2[30] = *(void *)(v9 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.Schedule();
  v2[32] = v10;
  v2[33] = *(void *)(v10 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v2[37] = v11;
  v2[38] = *(void *)(v11 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence.Participant();
  v2[44] = v12;
  v2[45] = *(void *)(v12 - 8);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Fence.AcceptanceStatus();
  v2[48] = v13;
  v2[49] = *(void *)(v13 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Fence();
  v2[52] = v14;
  v2[53] = *(void *)(v14 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  sub_100044014(&qword_1003F0350);
  v2[56] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  return _swift_task_switch(sub_1001B399C, v1, 0);
}

uint64_t sub_1001B399C()
{
  uint64_t v150 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[53];
  int v132 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[38] + 56);
  v132(v0[61], 1, 1, v0[37]);
  uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v109(v2, 1, 1, v3);
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    uint64_t v6 = v0[53];
    uint64_t v7 = v0[49];
    uint64_t v8 = v0[45];
    uint64_t v9 = v0[38];
    uint64_t v10 = v0[33];
    uint64_t v11 = v0[30];
    uint64_t v12 = v0[24];
    uint64_t v13 = *(void (**)(void, unint64_t, void))(v6 + 16);
    v6 += 16;
    uint64_t v147 = v13;
    unint64_t v14 = v0[8] + ((*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64));
    unsigned int v145 = enum case for Fence.AcceptanceStatus.pendingHidden(_:);
    uint64_t v143 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v144 = (void (**)(uint64_t, void, uint64_t))(v7 + 104);
    uint64_t v139 = (void (**)(void))(v6 - 8);
    unsigned int v137 = enum case for Fence.Participant.me(_:);
    uint64_t v135 = (void (**)(uint64_t, void, uint64_t))(v8 + 104);
    uint64_t v134 = (void (**)(uint64_t, uint64_t))(v8 + 8);
    int v131 = (uint64_t (**)(uint64_t, uint64_t))(v11 + 88);
    int v130 = enum case for Fence.Variant.oneTime(_:);
    int v122 = enum case for Fence.Variant.recurring(_:);
    int v120 = enum case for Fence.Variant.scheduled(_:);
    uint64_t v117 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    uint64_t v118 = (void (**)(uint64_t, void))(v11 + 96);
    uint64_t v116 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    unsigned int v115 = enum case for Calendar.SearchDirection.forward(_:);
    uint64_t v113 = (void (**)(uint64_t, uint64_t))(v12 + 8);
    uint64_t v114 = (void (**)(uint64_t, void, uint64_t))(v12 + 104);
    uint64_t v121 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    uint64_t v111 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    char v112 = (void (**)(uint64_t, uint64_t))(v0[27] + 8);
    uint64_t v129 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v15 = (void (**)(uint64_t, void, uint64_t))(v9 + 32);
    uint64_t v108 = (void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v119 = (void (**)(void, void))(v11 + 8);
    uint64_t v142 = *(void *)(v6 + 56);
    swift_bridgeObjectRetain();
    uint64_t v110 = v15;
    while (1)
    {
      uint64_t v16 = v0[51];
      uint64_t v17 = v0[50];
      uint64_t v18 = v0[48];
      v147(v0[55], v14, v0[52]);
      Fence.acceptanceStatus.getter();
      (*v144)(v17, v145, v18);
      char v19 = static Fence.AcceptanceStatus.== infix(_:_:)();
      uint64_t v20 = *v143;
      (*v143)(v17, v18);
      v20(v16, v18);
      if ((v19 & 1) == 0) {
        goto LABEL_3;
      }
      uint64_t v22 = v0[46];
      uint64_t v21 = v0[47];
      uint64_t v23 = v0[44];
      Fence.findee.getter();
      (*v135)(v22, v137, v23);
      char v24 = static Fence.Participant.== infix(_:_:)();
      uint64_t v25 = *v134;
      (*v134)(v22, v23);
      v25(v21, v23);
      if (v24)
      {
        uint64_t v26 = v0[31];
        uint64_t v27 = v0[29];
        Fence.variant.getter();
        int v28 = (*v131)(v26, v27);
        if (v28 == v130 || v28 == v122)
        {
          uint64_t v41 = v0[60];
          uint64_t v42 = v0[37];
          (*v119)(v0[31], v0[29]);
          v132(v41, 1, 1, v42);
        }
        else
        {
          if (v28 != v120) {
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v126 = v0[60];
          uint64_t v125 = v0[42];
          uint64_t v128 = v0[37];
          uint64_t v29 = v0[35];
          uint64_t v133 = v0[36];
          uint64_t v30 = v0[34];
          uint64_t v32 = v0[31];
          uint64_t v31 = v0[32];
          uint64_t v33 = v0[25];
          uint64_t v127 = v0[26];
          uint64_t v123 = v0[28];
          uint64_t v124 = v0[23];
          (*v118)(v32, v0[29]);
          uint64_t v34 = *v117;
          (*v117)(v29, v32, v31);
          v34(v133, v29, v31);
          (*v116)(v30, v133, v31);
          Fence.Schedule.Matcher.init(schedule:)();
          Fence.updatedAt.getter();
          (*v114)(v33, v115, v124);
          Fence.Schedule.Matcher.nextStartDate(from:direction:)();
          (*v113)(v33, v124);
          uint64_t v35 = *v121;
          (*v121)(v125, v128);
          (*v112)(v123, v127);
          (*v111)(v133, v31);
          v132(v126, 0, 1, v128);
          int v36 = *v129;
          if ((*v129)(v126, 1, v128) != 1)
          {
            uint64_t v37 = v0[61];
            uint64_t v38 = v0[59];
            uint64_t v39 = v0[37];
            uint64_t v40 = *v110;
            (*v110)(v0[43], v0[60], v39);
            sub_1000E2224(v37, v38);
            if (v36(v38, 1, v39) == 1)
            {
              sub_10000A520(v0[59], (uint64_t *)&unk_1003EE800);
LABEL_16:
              uint64_t v47 = v0[58];
              uint64_t v48 = v0[37];
              sub_1000E2224(v0[61], v47);
              LODWORD(v48) = v36(v47, 1, v48);
              sub_10000A520(v47, (uint64_t *)&unk_1003EE800);
              if (v48 != 1)
              {
                uint64_t v55 = v0[55];
                uint64_t v56 = v0[52];
                v35(v0[43], v0[37]);
                ((void (*)(uint64_t, uint64_t))*v139)(v55, v56);
                goto LABEL_4;
              }
            }
            else
            {
              uint64_t v44 = v0[41];
              uint64_t v45 = v0[37];
              v40(v44, v0[59], v45);
              char v46 = static Date.< infix(_:_:)();
              v35(v44, v45);
              if ((v46 & 1) == 0) {
                goto LABEL_16;
              }
            }
            uint64_t v49 = v0[61];
            uint64_t v51 = v0[55];
            uint64_t v50 = v0[56];
            uint64_t v52 = v0[52];
            uint64_t v53 = v0[43];
            uint64_t v54 = v0[37];
            sub_10000A520(v49, (uint64_t *)&unk_1003EE800);
            v40(v49, v53, v54);
            v132(v49, 0, 1, v54);
            sub_10000A520(v50, &qword_1003F0350);
            (*v108)(v50, v51, v52);
            v109(v50, 0, 1, v52);
            goto LABEL_4;
          }
        }
        uint64_t v43 = v0[60];
        ((void (*)(void, void))*v139)(v0[55], v0[52]);
        sub_10000A520(v43, (uint64_t *)&unk_1003EE800);
      }
      else
      {
LABEL_3:
        (*v139)();
      }
LABEL_4:
      v14 += v142;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v57 = v0[57];
  uint64_t v58 = v0[37];
  uint64_t v59 = v0[38];
  sub_1000E2224(v0[61], v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
  {
    sub_10000A520(v0[57], (uint64_t *)&unk_1003EE800);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    sub_100044058(v0[20], (uint64_t)qword_10040B770);
    os_log_type_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v63 = v0[61];
    uint64_t v64 = v0[56];
    if (v62)
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "No fence to set invite timer for", v65, 2u);
      swift_slowDealloc();
    }

    sub_10000A520(v63, (uint64_t *)&unk_1003EE800);
    sub_10000A520(v64, &qword_1003F0350);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v66 = (uint64_t (*)(void))v0[1];
    return v66();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[38] + 32))(v0[40], v0[57], v0[37]);
    if (qword_1003EC060 != -1) {
      swift_once();
    }
    uint64_t v68 = v0[39];
    uint64_t v69 = v0[40];
    uint64_t v70 = v0[37];
    uint64_t v71 = v0[38];
    uint64_t v73 = v0[21];
    uint64_t v72 = v0[22];
    uint64_t v74 = v0[20];
    uint64_t v75 = sub_100044058(v74, (uint64_t)qword_10040B770);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v72, v75, v74);
    os_log_type_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v76(v68, v69, v70);
    BOOL v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      os_log_type_t v146 = v78;
      uint64_t v148 = v76;
      uint64_t v79 = v0[56];
      uint64_t v81 = v0[52];
      uint64_t v80 = v0[53];
      uint64_t v82 = swift_slowAlloc();
      v149[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136446466;
      swift_beginAccess();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v79, 1, v81))
      {
        unint64_t v83 = 0xE300000000000000;
        uint64_t v84 = 7104878;
      }
      else
      {
        uint64_t v93 = v0[53];
        uint64_t v92 = v0[54];
        uint64_t v94 = v0[52];
        uint64_t v95 = v0[18];
        uint64_t v96 = v0[19];
        uint64_t v140 = v0[17];
        (*(void (**)(uint64_t, void, uint64_t))(v93 + 16))(v92, v0[56], v94);
        Fence.id.getter();
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
        uint64_t v84 = Fence.ID.uuidString.getter();
        unint64_t v83 = v97;
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v140);
      }
      uint64_t v99 = v0[38];
      uint64_t v98 = v0[39];
      uint64_t v100 = v0[21];
      uint64_t v141 = v0[22];
      uint64_t v136 = v0[37];
      uint64_t v138 = v0[20];
      v0[6] = sub_100037004(v84, v83, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 12) = 2082;
      uint64_t v101 = Date.localISO8601.getter();
      v0[7] = sub_100037004(v101, v102, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v103 = *(void (**)(void, void))(v99 + 8);
      uint64_t v89 = v99 + 8;
      uint64_t v90 = v103;
      v103(v98, v136);
      _os_log_impl((void *)&_mh_execute_header, v77, v146, "Setting invite timer for fence %{public}s at %{public}s", (uint8_t *)v82, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v141, v138);
      os_log_type_t v76 = v148;
    }
    else
    {
      uint64_t v85 = v0[38];
      uint64_t v87 = v0[21];
      uint64_t v86 = v0[22];
      uint64_t v88 = v0[20];
      uint64_t v91 = *(void (**)(void, void))(v85 + 8);
      uint64_t v89 = v85 + 8;
      uint64_t v90 = v91;
      v91(v0[39], v0[37]);

      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    }
    v0[62] = v89;
    v0[63] = v90;
    v76(v0[42], v0[40], v0[37]);
    sub_100044014(&qword_1003F0DF8);
    uint64_t v104 = swift_allocObject();
    *(_OWORD *)(v104 + 16) = xmmword_100367D70;
    static XPCAlarm.Criteria.Options.userVisible.getter();
    v0[5] = v104;
    sub_1001CAAE0(&qword_1003F0E00, (void (*)(uint64_t))&type metadata accessor for XPCAlarm.Criteria.Options);
    sub_100044014(&qword_1003F0E08);
    sub_100014FFC(&qword_1003F0E10, &qword_1003F0E08);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    XPCAlarm.Criteria.init(date:options:)();
    uint64_t v105 = (void *)swift_task_alloc();
    v0[64] = v105;
    *uint64_t v105 = v0;
    v105[1] = sub_1001B4974;
    uint64_t v106 = v0[16];
    uint64_t v107 = v0[13];
    return XPCAlarm.init(identifier:criteria:)(v106, 0xD00000000000002FLL, 0x8000000100372E30, v107);
  }
}

uint64_t sub_1001B4974()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  uint64_t v3 = *(void *)(*(void *)v0 + 112);
  uint64_t v4 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001B4AE0, v4, 0);
}

uint64_t sub_1001B4AE0()
{
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = *(void *)(v0 + 448);
  (*(void (**)(void, void))(v0 + 504))(*(void *)(v0 + 320), *(void *)(v0 + 296));
  sub_10000A520(v1, (uint64_t *)&unk_1003EE800);
  sub_10000A520(v2, &qword_1003F0350);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

unint64_t sub_1001B4CF4(char a1)
{
  if (!a1) {
    return 0xD000000000000031;
  }
  if (a1 == 1) {
    return 0xD00000000000002FLL;
  }
  return 0xD00000000000002ELL;
}

uint64_t sub_1001B4D4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001034BC(*a1, *a2);
}

unint64_t sub_1001B4D58@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001CAD1C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001B4D88@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001B4CF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1001B4DB4(void *a1@<X8>)
{
  *a1 = &off_1003DD520;
}

Swift::Int sub_1001B4DC4()
{
  return sub_1001B1460();
}

uint64_t sub_1001B4DCC()
{
  return sub_100103814();
}

Swift::Int sub_1001B4DD4()
{
  return sub_1001038A0();
}

uint64_t sub_1001B4DDC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1001B4DFC, v0, 0);
}

uint64_t sub_1001B4DFC()
{
  static XPCAlarm.unregister(identifier:)();
  swift_bridgeObjectRelease();
  static XPCAlarm.unregister(identifier:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  static XPCAlarm.unregister(identifier:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = OBJC_IVAR____TtC13findmylocated12FenceService_significantTimeChangeDebounceTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC13findmylocated12FenceService_significantTimeChangeDebounceTask))
  {
    swift_retain();
    sub_100044014(&qword_1003F4B30);
    Task.cancel()();
    swift_release();
  }
  uint64_t v3 = *(void *)(v0 + 16);
  *(void *)(v1 + v2) = 0;
  swift_release();
  uint64_t v4 = OBJC_IVAR____TtC13findmylocated12FenceService_darwinSignificantTimeChangeTask;
  if (*(void *)(v3 + OBJC_IVAR____TtC13findmylocated12FenceService_darwinSignificantTimeChangeTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v5 = *(void *)(v0 + 16);
  *(void *)(v3 + v4) = 0;
  swift_release();
  uint64_t v6 = OBJC_IVAR____TtC13findmylocated12FenceService_xpcAlarmHandlerTask;
  if (*(void *)(v5 + OBJC_IVAR____TtC13findmylocated12FenceService_xpcAlarmHandlerTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t v7 = *(void *)(v0 + 16);
  *(void *)(v5 + v6) = 0;
  swift_release();
  id v8 = [self defaultCenter];
  uint64_t v9 = v8;
  uint64_t v10 = OBJC_IVAR____TtC13findmylocated12FenceService_systemClockDidChangeObserver;
  if (*(void *)(v7 + OBJC_IVAR____TtC13findmylocated12FenceService_systemClockDidChangeObserver))
  {
    [v8 removeObserver:];
    *(void *)(v7 + v10) = 0;
    swift_unknownObjectRelease();
  }
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = OBJC_IVAR____TtC13findmylocated12FenceService_systemTimeZoneDidChangeObserver;
  uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC13findmylocated12FenceService_systemTimeZoneDidChangeObserver);
  if (v13)
  {
    swift_unknownObjectRetain();
    [v9 removeObserver:v13];

    swift_unknownObjectRelease();
    *(void *)(v11 + v12) = 0;
    swift_unknownObjectRelease();
  }
  else
  {
  }
  unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1001B5108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  uint64_t v6[2] = a4;
  return _swift_task_switch(sub_1001B512C, 0, 0);
}

uint64_t sub_1001B512C()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Creating XPC alarm streams", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 32);
  long long v9 = *(_OWORD *)(v0 + 16);

  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 40) = v6;
  *(_OWORD *)(v6 + 16) = v9;
  *(void *)(v6 + 32) = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001B52D0;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_1001B52D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100178850, 0, 0);
}

uint64_t sub_1001B53E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  v5[25] = a2;
  v5[26] = a3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  return _swift_task_switch(sub_1001B5490, 0, 0);
}

uint64_t sub_1001B5490()
{
  sub_100044014(&qword_1003F0EC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  uint64_t v2 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &unk_1003F0ED0;
  *(void *)(v3 + 24) = v2;
  *(unsigned char *)(inited + 32) = 0;
  *(void *)(inited + 40) = &unk_1003F0EE0;
  *(void *)(inited + 48) = v3;
  uint64_t v4 = swift_allocObject();
  swift_weakLoadStrong();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &unk_1003F0EF0;
  *(void *)(v5 + 24) = v4;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = &unk_1003F0EF8;
  *(void *)(inited + 72) = v5;
  uint64_t v6 = swift_allocObject();
  swift_weakLoadStrong();
  swift_retain();
  swift_release();
  swift_release();
  swift_weakInit();
  swift_retain();
  swift_release();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &unk_1003F0F08;
  *(void *)(v7 + 24) = v6;
  *(unsigned char *)(inited + 80) = 2;
  *(void *)(inited + 88) = &unk_1003F0F10;
  *(void *)(inited + 96) = v7;
  swift_release();
  swift_release();
  uint64_t result = sub_100101C28(inited);
  int64_t v9 = 0;
  uint64_t v38 = result + 64;
  uint64_t v40 = result;
  uint64_t v10 = -1;
  uint64_t v11 = -1 << *(unsigned char *)(result + 32);
  if (-v11 < 64) {
    uint64_t v10 = ~(-1 << -(char)v11);
  }
  unint64_t v12 = v10 & *(void *)(result + 64);
  int64_t v39 = (unint64_t)(63 - v11) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v41 = v9;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_21;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return result;
    }
    if (v15 >= v39) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v38 + 8 * v15);
    int64_t v17 = v9 + 1;
    if (!v16)
    {
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v39) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v38 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v9 + 3;
        if (v9 + 3 >= v39) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v38 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v16 - 1) & v16;
    int64_t v41 = v17;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_21:
    uint64_t v19 = *(void *)(v0 + 232);
    uint64_t v20 = *(void *)(v0 + 240);
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v40 + 56);
    char v24 = *(unsigned char *)(*(void *)(v40 + 48) + v14);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = *(_OWORD *)(v23 + 16 * v14);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 0;
    uint64_t v27 = (void *)(v26 + 16);
    *(void *)(v26 + 24) = 0;
    *(void *)(v26 + 32) = v21;
    *(unsigned char *)(v26 + 40) = v24;
    *(void *)(v26 + 48) = &unk_1003F0F20;
    *(void *)(v26 + 56) = v25;
    *(void *)(v26 + 64) = v22;
    uint64_t v28 = type metadata accessor for TaskPriority();
    uint64_t v29 = *(void *)(v28 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v20, 1, 1, v28);
    sub_100179D88(v20, v19);
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v19, 1, v28);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v30 = *(void *)(v0 + 232);
    if (v19 == 1)
    {
      sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003F3C10);
      if (*v27) {
        goto LABEL_23;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
      if (*v27)
      {
LABEL_23:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v31 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v33 = v32;
        swift_unknownObjectRelease();
        goto LABEL_26;
      }
    }
    uint64_t v31 = 0;
    uint64_t v33 = 0;
LABEL_26:
    uint64_t v34 = **(void **)(v0 + 200);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = &unk_1003F0F30;
    *(void *)(v35 + 24) = v26;
    uint64_t v36 = v33 | v31;
    if (v33 | v31)
    {
      uint64_t v36 = v0 + 120;
      *(void *)(v0 + 120) = 0;
      *(void *)(v0 + 128) = 0;
      *(void *)(v0 + 136) = v31;
      *(void *)(v0 + 144) = v33;
    }
    *(void *)(v0 + 176) = 1;
    *(void *)(v0 + 184) = v36;
    *(void *)(v0 + 192) = v34;
    swift_task_create();
    swift_release();
    uint64_t result = swift_release();
    int64_t v9 = v41;
  }
  uint64_t v18 = v9 + 4;
  if (v9 + 4 < v39)
  {
    unint64_t v16 = *(void *)(v38 + 8 * v18);
    if (!v16)
    {
      while (1)
      {
        int64_t v17 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_32;
        }
        if (v17 >= v39) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v38 + 8 * v17);
        ++v18;
        if (v16) {
          goto LABEL_20;
        }
      }
    }
    int64_t v17 = v9 + 4;
    goto LABEL_20;
  }
LABEL_28:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_1001B5AA4(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_1001B5AC4, 0, 0);
}

uint64_t sub_1001B5AC4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001B5BB0;
    return sub_1001B5CEC();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001B5BB0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001CAD84, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1001B5CEC()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Fence.TriggerID();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Fence.TriggerPosition();
  v1[13] = v3;
  v1[14] = *(void *)(v3 - 8);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.ID();
  v1[18] = v4;
  v1[19] = *(void *)(v4 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = sub_100044014(&qword_1003F0D58);
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FenceTriggerRecord();
  v1[27] = v5;
  v1[28] = *(void *)(v5 - 8);
  v1[29] = swift_task_alloc();
  sub_100044014(&qword_1003F0D60);
  v1[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DateInterval();
  v1[31] = v6;
  v1[32] = *(void *)(v6 - 8);
  v1[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v1[34] = v7;
  v1[35] = *(void *)(v7 - 8);
  v1[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Schedule.Matcher();
  v1[37] = v8;
  v1[38] = *(void *)(v8 - 8);
  v1[39] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v1[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.Participant();
  v1[41] = v9;
  v1[42] = *(void *)(v9 - 8);
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.AcceptanceStatus();
  v1[45] = v10;
  v1[46] = *(void *)(v10 - 8);
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.Variant();
  v1[49] = v11;
  v1[50] = *(void *)(v11 - 8);
  v1[51] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence.Schedule();
  v1[52] = v12;
  v1[53] = *(void *)(v12 - 8);
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Fence();
  v1[56] = v13;
  v1[57] = *(void *)(v13 - 8);
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Date();
  v1[64] = v14;
  v1[65] = *(void *)(v14 - 8);
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  return _swift_task_switch(sub_1001B63A4, v0, 0);
}

uint64_t sub_1001B63A4()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  v0[72] = sub_100044058(v0[34], (uint64_t)qword_10040B770);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Scheduler timer fired", v3, 2u);
    swift_slowDealloc();
  }

  static Date.now.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[73] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001B64FC;
  return daemon.getter();
}

uint64_t sub_1001B64FC(uint64_t a1)
{
  os_log_type_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[74] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[75] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[76] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  v2[77] = v5;
  uint64_t v6 = sub_1001CAAE0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[78] = v6;
  uint64_t v7 = sub_1001CAAE0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  v2[79] = v7;
  *uint64_t v3 = v9;
  v3[1] = sub_1001B66E4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001B66E4(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 640) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[8];
    return _swift_task_switch(sub_1001B7344, v6, 0);
  }
  else
  {
    swift_release();
    v4[81] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[82] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001B6870;
    return sub_10012F108();
  }
}

uint64_t sub_1001B6870(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 664) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B6988, v2, 0);
}

uint64_t sub_1001B6988()
{
  uint64_t v107 = v0;
  uint64_t v1 = *(void *)(v0 + 664);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 672) = v2;
  if (!v2)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v89 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v89;
    *uint64_t v89 = v0;
    v89[1] = sub_1001BBC64;
    return sub_1001C99B8();
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 456);
  *(_DWORD *)(v0 + 968) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 972) = enum case for Fence.Variant.scheduled(_:);
  *(_DWORD *)(v0 + 976) = enum case for Fence.AcceptanceStatus.accepted(_:);
  *(_DWORD *)(v0 + 980) = enum case for Fence.Participant.me(_:);
  *(_DWORD *)(v0 + 984) = enum case for Fence.TriggerPosition.inside(_:);
  *(_DWORD *)(v0 + 988) = enum case for Fence.TriggerPosition.outside(_:);
  *(_DWORD *)(v0 + 992) = enum case for Fence.TriggerPosition.undetermined(_:);
  *(void *)(v0 + 680) = *(void *)(v4 + 72);
  *(void *)(v0 + 688) = *(void *)(v4 + 16);
  while (1)
  {
    *(void *)(v0 + 696) = v3;
    uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
    int v6 = *(_DWORD *)(v0 + 972);
    uint64_t v7 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 448);
    uint64_t v10 = *(void *)(v0 + 400);
    uint64_t v9 = *(void *)(v0 + 408);
    uint64_t v11 = *(void *)(v0 + 392);
    unint64_t v12 = *(void *)(v0 + 664)
        + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
        + *(void *)(v0 + 680) * v3;
    *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v5(v7, v12, v8);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == v6) {
      break;
    }
    uint64_t v33 = *(void *)(v0 + 504);
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v35 = *(void *)(v0 + 456);
    uint64_t v37 = *(void *)(v0 + 400);
    uint64_t v36 = *(void *)(v0 + 408);
    uint64_t v38 = *(void *)(v0 + 392);
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_14:
    uint64_t v3 = *(void *)(v0 + 696) + 1;
    if (v3 == *(void *)(v0 + 672)) {
      goto LABEL_23;
    }
  }
  unsigned int v102 = *(_DWORD *)(v0 + 976);
  uint64_t v13 = *(void *)(v0 + 440);
  uint64_t v14 = *(void *)(v0 + 416);
  uint64_t v15 = *(void *)(v0 + 424);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v20 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v16, *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v16, v14);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v19, v102, v20);
  char v21 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v22(v19, v20);
  v22(v17, v20);
  if ((v21 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v23 = *(unsigned int *)(v0 + 980);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v27 = *(void *)(v0 + 336);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104))(v25, v23, v26);
  char v28 = static Fence.Participant.== infix(_:_:)();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v29(v25, v26);
  v29(v24, v26);
  if ((v28 & 1) == 0)
  {
LABEL_12:
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v38 = *(void *)(v0 + 448);
    uint64_t v37 = *(void *)(v0 + 456);
    uint64_t v33 = *(void *)(v0 + 440);
    uint64_t v34 = *(void *)(v0 + 416);
    uint64_t v35 = *(void *)(v0 + 424);
    goto LABEL_13;
  }
  uint64_t v30 = *(void *)(v0 + 520);
  uint64_t v31 = *(void *)(v0 + 512);
  uint64_t v32 = *(void *)(v0 + 320);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) != 1)
  {
    uint64_t v39 = *(void *)(v0 + 560);
    uint64_t v40 = *(void *)(v0 + 520);
    uint64_t v41 = *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v40 + 32))(v39, *(void *)(v0 + 320), v41);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    if (v42) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
LABEL_10:
  uint64_t v43 = *(void *)(v0 + 568);
  uint64_t v44 = *(void *)(v0 + 552);
  os_log_t log = *(os_log_t *)(v0 + 576);
  uint64_t v98 = *(void *)(v0 + 544);
  uint64_t v100 = *(void *)(v0 + 536);
  uint64_t v103 = *(void *)(v0 + 528);
  uint64_t v45 = *(void *)(v0 + 520);
  uint64_t v46 = *(void *)(v0 + 512);
  uint64_t v47 = *(void *)(v0 + 304);
  uint64_t v48 = *(void *)(v0 + 312);
  uint64_t v49 = *(void *)(v0 + 296);
  uint64_t v50 = *(void *)(v0 + 280);
  uint64_t v94 = *(void *)(v0 + 288);
  uint64_t v95 = *(void *)(v0 + 272);
  uint64_t v93 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
  v93(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousStartDate(from:)();
  uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v92(v48, v49);
  (*(void (**)(uint64_t, os_log_t, uint64_t))(v50 + 16))(v94, log, v95);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
  v51(v98, v44, v46);
  v51(v100, v43, v46);
  v51(v103, v44, v46);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v55 = *(void *)(v0 + 544);
  uint64_t v56 = *(void *)(v0 + 536);
  uint64_t v57 = *(void *)(v0 + 528);
  uint64_t v58 = *(void *)(v0 + 512);
  uint64_t v59 = *(void *)(v0 + 288);
  uint64_t v60 = *(void *)(v0 + 272);
  uint64_t v104 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
  os_log_type_t v61 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
  if (v54)
  {
    os_log_t loga = v52;
    uint64_t v62 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136446466;
    uint64_t v63 = Date.localISO8601.getter();
    uint64_t v99 = v59;
    *(void *)(v62 + 4) = sub_100037004(v63, v64, &v106);
    swift_bridgeObjectRelease();
    os_log_type_t v65 = v53;
    unint64_t v66 = *v61;
    (*v61)(v55, v58);
    *(_WORD *)(v62 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v62 + 14) = v67;
    v66(v56, v58);
    v66(v57, v58);
    _os_log_impl((void *)&_mh_execute_header, loga, v65, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v104)(v99, v60);
  }
  else
  {
    unint64_t v66 = *v61;
    (*v61)(v55, v58);
    v66(v56, v58);
    v66(v57, v58);

    (*v104)(v59, v60);
  }
  *(void *)(v0 + 712) = v66;
  Date.timeIntervalSince(_:)();
  if (v68 > 300.0)
  {
    uint64_t v69 = *(void *)(v0 + 504);
    uint64_t v70 = *(void *)(v0 + 448);
    uint64_t v71 = *(void *)(v0 + 456);
    uint64_t v72 = *(void *)(v0 + 440);
    uint64_t v73 = *(void *)(v0 + 416);
    uint64_t v74 = *(void *)(v0 + 424);
    v66(*(void *)(v0 + 552), *(void *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
    goto LABEL_14;
  }
  uint64_t v75 = *(void *)(v0 + 312);
  uint64_t v76 = *(void *)(v0 + 296);
  uint64_t v77 = *(void *)(v0 + 248);
  uint64_t v78 = *(void *)(v0 + 256);
  uint64_t v79 = *(void *)(v0 + 240);
  v93(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v92(v75, v76);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v79, 1, v77) == 1)
  {
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "No valid interval for startDate", v82, 2u);
      swift_slowDealloc();
    }
    uint64_t v83 = *(void *)(v0 + 552);
    uint64_t v84 = *(void *)(v0 + 512);
    uint64_t v105 = *(void *)(v0 + 504);
    uint64_t v85 = *(void *)(v0 + 456);
    uint64_t v101 = *(void *)(v0 + 448);
    uint64_t v86 = *(void *)(v0 + 440);
    uint64_t v88 = *(void *)(v0 + 416);
    uint64_t v87 = *(void *)(v0 + 424);

    v66(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v105, v101);
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
  uint64_t v91 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v91;
  void *v91 = v0;
  v91[1] = sub_1001B75D0;
  return daemon.getter();
}

uint64_t sub_1001B7344()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[64];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001B75D0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 728) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 736) = v5;
  uint64_t v6 = type metadata accessor for LocalStorageService();
  uint64_t v7 = sub_1001CAAE0(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001B7784;
  uint64_t v8 = *(void *)(v2 + 624);
  uint64_t v9 = *(void *)(v2 + 608);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001B7784(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[93] = a1;
  v3[94] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[8];
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = sub_1001BC890;
  }
  else
  {
    uint64_t v4 = v3[8];
    swift_release();
    uint64_t v5 = sub_1001B78E0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001B78E0()
{
  uint64_t v1 = *(void *)(v0 + 744);
  Fence.id.getter();
  return _swift_task_switch(sub_1001B7950, v1, 0);
}

uint64_t sub_1001B7950()
{
  uint64_t v1 = v0[93];
  uint64_t v2 = v0[23];
  uint64_t v3 = sub_1001CAAE0(&qword_1003F0330, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v4 = swift_task_alloc();
  v0[95] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[96] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001B7A80;
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[24];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, v1, v3, 0xD000000000000011, 0x8000000100377140, sub_1001B1100, v4, v7);
}

uint64_t sub_1001B7A80()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 776) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[93];
    uint64_t v4 = sub_1001B8954;
  }
  else
  {
    uint64_t v5 = v2[23];
    uint64_t v6 = v2[18];
    uint64_t v7 = v2[19];
    uint64_t v8 = v2[8];
    swift_task_dealloc();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v2[98] = v9;
    v2[99] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v6);
    uint64_t v4 = sub_1001B7BE8;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001B7BE8()
{
  uint64_t v153 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 800) = v4;
  *(void *)(v0 + 808) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v1) == 1)
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
    uint64_t v6 = *(void *)(v0 + 504);
    uint64_t v7 = *(void *)(v0 + 472);
    uint64_t v8 = *(void *)(v0 + 448);
    sub_10000A520(v3, &qword_1003F0D58);
    v5(v7, v6, v8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v119 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
      uint64_t v138 = *(void *)(v0 + 552);
      uint64_t v142 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v131 = *(void *)(v0 + 512);
      uint64_t v146 = *(void *)(v0 + 504);
      uint64_t v118 = *(void *)(v0 + 472);
      uint64_t v120 = *(void *)(v0 + 456);
      uint64_t v121 = *(void *)(v0 + 448);
      uint64_t v134 = *(void *)(v0 + 440);
      uint64_t v127 = *(void *)(v0 + 424);
      uint64_t v128 = *(void *)(v0 + 416);
      uint64_t v122 = *(void *)(v0 + 256);
      uint64_t v123 = *(void *)(v0 + 248);
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v124 = *(void *)(v0 + 264);
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v152[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v16 = v15;
      v119(v11, v12);
      *(void *)(v0 + 16) = sub_100037004(v14, v16, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
      v17(v118, v121);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not triggering fence (no previousTrigger): %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v123);
      v142(v138, v131);
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v134, v128);
      v17(v146, v121);
    }
    else
    {
      uint64_t v139 = *(void *)(v0 + 552);
      uint64_t v143 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v147 = *(void *)(v0 + 504);
      uint64_t v23 = *(void *)(v0 + 472);
      uint64_t v24 = *(void *)(v0 + 448);
      uint64_t v25 = *(void *)(v0 + 456);
      uint64_t v132 = *(void *)(v0 + 512);
      uint64_t v135 = *(void *)(v0 + 440);
      uint64_t v26 = *(void *)(v0 + 424);
      uint64_t v129 = *(void *)(v0 + 416);
      uint64_t v27 = *(void *)(v0 + 256);
      uint64_t v28 = *(void *)(v0 + 264);
      uint64_t v29 = *(void *)(v0 + 248);
      swift_release();

      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v30(v23, v24);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
      v143(v139, v132);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v135, v129);
      v30(v147, v24);
    }
    uint64_t v31 = *(void *)(v0 + 696) + 1;
    if (v31 == *(void *)(v0 + 672))
    {
LABEL_9:
      swift_bridgeObjectRelease();
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 896) = v32;
      *uint64_t v32 = v0;
      v32[1] = sub_1001BBC64;
      return sub_1001C99B8();
    }
    while (1)
    {
      *(void *)(v0 + 696) = v31;
      uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
      int v34 = *(_DWORD *)(v0 + 972);
      uint64_t v35 = *(void *)(v0 + 504);
      uint64_t v36 = *(void *)(v0 + 448);
      uint64_t v38 = *(void *)(v0 + 400);
      uint64_t v37 = *(void *)(v0 + 408);
      uint64_t v39 = *(void *)(v0 + 392);
      unint64_t v40 = *(void *)(v0 + 664)
          + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
          + *(void *)(v0 + 680) * v31;
      *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v33(v35, v40, v36);
      Fence.variant.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v38 + 88))(v37, v39) != v34) {
        break;
      }
      unsigned int v148 = *(_DWORD *)(v0 + 976);
      uint64_t v41 = *(void *)(v0 + 440);
      uint64_t v42 = *(void *)(v0 + 416);
      uint64_t v43 = *(void *)(v0 + 424);
      uint64_t v44 = *(void *)(v0 + 408);
      uint64_t v45 = *(void *)(v0 + 384);
      uint64_t v46 = *(void *)(v0 + 368);
      uint64_t v47 = *(void *)(v0 + 376);
      uint64_t v48 = *(void *)(v0 + 360);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v44, *(void *)(v0 + 392));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v41, v44, v42);
      Fence.acceptanceStatus.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v47, v148, v48);
      char v49 = static Fence.AcceptanceStatus.== infix(_:_:)();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v50(v47, v48);
      v50(v45, v48);
      if ((v49 & 1) == 0) {
        goto LABEL_21;
      }
      uint64_t v51 = *(unsigned int *)(v0 + 980);
      uint64_t v53 = *(void *)(v0 + 344);
      uint64_t v52 = *(void *)(v0 + 352);
      uint64_t v54 = *(void *)(v0 + 328);
      uint64_t v55 = *(void *)(v0 + 336);
      Fence.finder.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 104))(v53, v51, v54);
      char v56 = static Fence.Participant.== infix(_:_:)();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v57(v53, v54);
      v57(v52, v54);
      if ((v56 & 1) == 0)
      {
LABEL_21:
        uint64_t v64 = *(void *)(v0 + 504);
        uint64_t v66 = *(void *)(v0 + 448);
        uint64_t v65 = *(void *)(v0 + 456);
        uint64_t v61 = *(void *)(v0 + 440);
        uint64_t v62 = *(void *)(v0 + 416);
        uint64_t v63 = *(void *)(v0 + 424);
        goto LABEL_22;
      }
      uint64_t v58 = *(void *)(v0 + 520);
      uint64_t v59 = *(void *)(v0 + 512);
      uint64_t v60 = *(void *)(v0 + 320);
      Fence.muteEndDate.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v60, 1, v59) == 1)
      {
        sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
      }
      else
      {
        uint64_t v67 = *(void *)(v0 + 560);
        uint64_t v68 = *(void *)(v0 + 520);
        uint64_t v69 = *(void *)(v0 + 512);
        (*(void (**)(uint64_t, void, uint64_t))(v68 + 32))(v67, *(void *)(v0 + 320), v69);
        sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
        char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
        if ((v70 & 1) == 0) {
          goto LABEL_21;
        }
      }
      uint64_t v71 = *(void *)(v0 + 568);
      uint64_t v72 = *(void *)(v0 + 552);
      uint64_t v136 = *(void *)(v0 + 576);
      uint64_t v140 = *(void *)(v0 + 544);
      uint64_t v144 = *(void *)(v0 + 536);
      uint64_t v149 = *(void *)(v0 + 528);
      uint64_t v73 = *(void *)(v0 + 520);
      uint64_t v74 = *(void *)(v0 + 512);
      uint64_t v75 = *(void *)(v0 + 304);
      uint64_t v76 = *(void *)(v0 + 312);
      uint64_t v77 = *(void *)(v0 + 296);
      uint64_t v130 = *(void *)(v0 + 288);
      uint64_t v78 = *(void *)(v0 + 280);
      uint64_t v133 = *(void *)(v0 + 272);
      uint64_t v126 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
      v126(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
      Fence.Schedule.Matcher.init(schedule:)();
      Fence.Schedule.Matcher.previousStartDate(from:)();
      uint64_t v125 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v125(v76, v77);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v130, v136, v133);
      uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
      v79(v140, v72, v74);
      v79(v144, v71, v74);
      v79(v149, v72, v74);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.default.getter();
      BOOL v82 = os_log_type_enabled(v80, v81);
      uint64_t v83 = *(void *)(v0 + 544);
      uint64_t v84 = *(void *)(v0 + 536);
      uint64_t v85 = *(void *)(v0 + 528);
      uint64_t v86 = *(void *)(v0 + 512);
      uint64_t v87 = *(void *)(v0 + 288);
      uint64_t v88 = *(void *)(v0 + 272);
      uint64_t v150 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
      uint64_t v89 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
      if (v82)
      {
        unsigned int v137 = v80;
        uint64_t v90 = swift_slowAlloc();
        v152[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v90 = 136446466;
        uint64_t v91 = Date.localISO8601.getter();
        uint64_t v141 = v87;
        *(void *)(v90 + 4) = sub_100037004(v91, v92, v152);
        swift_bridgeObjectRelease();
        os_log_type_t v93 = v81;
        uint64_t v94 = *v89;
        (*v89)(v83, v86);
        *(_WORD *)(v90 + 12) = 2050;
        Date.timeIntervalSince(_:)();
        *(void *)(v90 + 14) = v95;
        v94(v84, v86);
        v94(v85, v86);
        _os_log_impl((void *)&_mh_execute_header, v137, v93, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v90, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v150)(v141, v88);
      }
      else
      {
        uint64_t v94 = *v89;
        (*v89)(v83, v86);
        v94(v84, v86);
        v94(v85, v86);

        (*v150)(v87, v88);
      }
      *(void *)(v0 + 712) = v94;
      Date.timeIntervalSince(_:)();
      if (v96 <= 300.0)
      {
        uint64_t v103 = *(void *)(v0 + 312);
        uint64_t v104 = *(void *)(v0 + 296);
        uint64_t v105 = *(void *)(v0 + 248);
        uint64_t v106 = *(void *)(v0 + 256);
        uint64_t v107 = *(void *)(v0 + 240);
        v126(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
        Fence.Schedule.Matcher.init(schedule:)();
        Fence.Schedule.Matcher.interval(containingDate:)();
        v125(v103, v104);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105) != 1)
        {
          (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
          uint64_t v117 = (void *)swift_task_alloc();
          *(void *)(v0 + 720) = v117;
          *uint64_t v117 = v0;
          v117[1] = sub_1001B75D0;
          return daemon.getter();
        }
        sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
        uint64_t v108 = Logger.logObject.getter();
        os_log_type_t v109 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v108, v109))
        {
          uint64_t v110 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v110 = 0;
          _os_log_impl((void *)&_mh_execute_header, v108, v109, "No valid interval for startDate", v110, 2u);
          swift_slowDealloc();
        }
        uint64_t v111 = *(void *)(v0 + 552);
        uint64_t v112 = *(void *)(v0 + 512);
        uint64_t v113 = *(void *)(v0 + 456);
        uint64_t v145 = *(void *)(v0 + 448);
        uint64_t v151 = *(void *)(v0 + 504);
        uint64_t v114 = *(void *)(v0 + 440);
        uint64_t v116 = *(void *)(v0 + 416);
        uint64_t v115 = *(void *)(v0 + 424);

        v94(v111, v112);
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v151, v145);
      }
      else
      {
        uint64_t v97 = *(void *)(v0 + 504);
        uint64_t v98 = *(void *)(v0 + 448);
        uint64_t v99 = *(void *)(v0 + 456);
        uint64_t v100 = *(void *)(v0 + 440);
        uint64_t v101 = *(void *)(v0 + 416);
        uint64_t v102 = *(void *)(v0 + 424);
        v94(*(void *)(v0 + 552), *(void *)(v0 + 512));
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v97, v98);
      }
LABEL_23:
      uint64_t v31 = *(void *)(v0 + 696) + 1;
      if (v31 == *(void *)(v0 + 672)) {
        goto LABEL_9;
      }
    }
    uint64_t v61 = *(void *)(v0 + 504);
    uint64_t v62 = *(void *)(v0 + 448);
    uint64_t v63 = *(void *)(v0 + 456);
    uint64_t v65 = *(void *)(v0 + 400);
    uint64_t v64 = *(void *)(v0 + 408);
    uint64_t v66 = *(void *)(v0 + 392);
LABEL_22:
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    goto LABEL_23;
  }
  sub_1001B1108(v3, *(void *)(v0 + 232));
  Fence.id.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 816) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1001B8D08;
  uint64_t v19 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 176);
  return sub_1002207C4(v20, v21, v19);
}

uint64_t sub_1001B8954()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[8];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001B89FC, v4, 0);
}

uint64_t sub_1001B89FC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[64];
  uint64_t v14 = v0[63];
  uint64_t v15 = v0[71];
  uint64_t v3 = v0[57];
  uint64_t v13 = v0[56];
  uint64_t v11 = v0[69];
  uint64_t v12 = v0[55];
  uint64_t v5 = v0[52];
  uint64_t v4 = v0[53];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v1(v11, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v13);
  v1(v15, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001B8D08()
{
  uint64_t v2 = (void *)*v1;
  v2[103] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[98];
  if (v0)
  {
    uint64_t v4 = v2[22];
    uint64_t v5 = v2[18];
    uint64_t v6 = v2[8];
    v3(v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1001BCB88;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v9 = v2[8];
    v3(v2[22], v2[18]);
    uint64_t v7 = sub_1001B8E84;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_1001B8E84()
{
  uint64_t v232 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0 + 800))(v1, 1, *(void *)(v0 + 216));
  sub_10000A520(v1, &qword_1003F0D58);
  if (v2 == 1)
  {
    int v3 = *(_DWORD *)(v0 + 984);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 112);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v4, *(void *)(v0 + 232) + *(int *)(*(void *)(v0 + 216) + 24), v5);
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5);
    if (v7 == v3)
    {
      uint64_t v8 = *(unsigned int *)(v0 + 984);
      os_log_type_t v10 = *(void **)(v0 + 128);
      uint64_t v9 = *(void **)(v0 + 136);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v12 = *(void *)(v0 + 112);
      (*(void (**)(void *, uint64_t))(v12 + 96))(v9, v11);
      *(void *)(v0 + 832) = *v9;
      id v13 = sub_1001C986C();
      *(void *)(v0 + 840) = v13;
      Fence.id.getter();
      void *v10 = v13;
      (*(void (**)(void *, uint64_t, uint64_t))(v12 + 104))(v10, v8, v11);
      id v14 = v13;
      Fence.TriggerID.init()();
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 848) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_1001BA3C4;
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v17 = *(void *)(v0 + 128);
      uint64_t v18 = *(void *)(v0 + 96);
      return sub_1001A8F98(v16, v17, v18);
    }
    if (v7 == *(_DWORD *)(v0 + 988))
    {
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
      uint64_t v32 = *(void *)(v0 + 504);
      uint64_t v33 = *(void *)(v0 + 488);
      uint64_t v34 = *(void *)(v0 + 448);
      uint64_t v35 = *(void **)(v0 + 136);
      (*(void (**)(void *, void))(*(void *)(v0 + 112) + 96))(v35, *(void *)(v0 + 104));
      *(void *)(v0 + 856) = *v35;
      id v36 = sub_1001C986C();
      *(void *)(v0 + 864) = v36;
      v31(v33, v32, v34);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v187 = *(void *)(v0 + 488);
        uint64_t v190 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
        id v218 = v36;
        uint64_t v39 = *(void *)(v0 + 456);
        uint64_t v211 = *(void *)(v0 + 448);
        uint64_t v40 = *(void *)(v0 + 168);
        uint64_t v41 = *(void *)(v0 + 144);
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        v231[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136446210;
        Fence.id.getter();
        sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v45 = v44;
        v190(v40, v41);
        *(void *)(v0 + 48) = sub_100037004(v43, v45, v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v46(v187, v211);
        id v36 = v218;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Schedule Timer about to trigger fence: %{public}s", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 456) + 8);
        v46(*(void *)(v0 + 488), *(void *)(v0 + 448));
      }

      *(void *)(v0 + 872) = v46;
      uint64_t v64 = *(unsigned int *)(v0 + 988);
      uint64_t v66 = *(void *)(v0 + 112);
      uint64_t v65 = *(void **)(v0 + 120);
      uint64_t v67 = *(void *)(v0 + 104);
      Fence.id.getter();
      Fence.TriggerID.init()();
      *uint64_t v65 = v36;
      (*(void (**)(void *, uint64_t, uint64_t))(v66 + 104))(v65, v64, v67);
      id v68 = v36;
      uint64_t v69 = (void *)swift_task_alloc();
      *(void *)(v0 + 880) = v69;
      *uint64_t v69 = v0;
      v69[1] = sub_1001BB008;
      uint64_t v70 = *(void *)(v0 + 160);
      uint64_t v71 = *(void *)(v0 + 120);
      uint64_t v72 = *(void *)(v0 + 88);
      return sub_1001962F8(v70, v72, v71);
    }
    if (v7 != *(_DWORD *)(v0 + 992)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    (*(void (**)(void, void, void))(v0 + 688))(*(void *)(v0 + 480), *(void *)(v0 + 504), *(void *)(v0 + 448));
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v171 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
      uint64_t v213 = *(void *)(v0 + 552);
      uint64_t v220 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v201 = *(void *)(v0 + 512);
      uint64_t v225 = *(void *)(v0 + 504);
      uint64_t v169 = *(void *)(v0 + 480);
      uint64_t v174 = *(void *)(v0 + 456);
      uint64_t v177 = *(void *)(v0 + 448);
      uint64_t v206 = *(void *)(v0 + 440);
      uint64_t v192 = *(void *)(v0 + 424);
      uint64_t v196 = *(void *)(v0 + 416);
      uint64_t v182 = *(void *)(v0 + 248);
      uint64_t v179 = *(void *)(v0 + 232);
      uint64_t v180 = *(void *)(v0 + 256);
      uint64_t v57 = *(void *)(v0 + 168);
      uint64_t v188 = *(void *)(v0 + 264);
      uint64_t v58 = *(void *)(v0 + 144);
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v231[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136446210;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v62 = v61;
      v171(v57, v58);
      *(void *)(v0 + 24) = sub_100037004(v60, v62, v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v174 + 8);
      v63(v169, v177);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "TriggerPosition is .undetermined for fence: %{public}s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_1001CAB28(v179);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v188, v182);
      v220(v213, v201);
      (*(void (**)(uint64_t, uint64_t))(v192 + 8))(v206, v196);
      v63(v225, v177);
    }
    else
    {
      uint64_t v214 = *(void *)(v0 + 552);
      uint64_t v221 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v226 = *(void *)(v0 + 504);
      uint64_t v73 = *(void *)(v0 + 480);
      uint64_t v75 = *(void *)(v0 + 448);
      uint64_t v74 = *(void *)(v0 + 456);
      uint64_t v202 = *(void *)(v0 + 512);
      uint64_t v207 = *(void *)(v0 + 440);
      uint64_t v76 = *(void *)(v0 + 424);
      uint64_t v197 = *(void *)(v0 + 416);
      uint64_t v193 = *(void *)(v0 + 264);
      uint64_t v77 = v55;
      uint64_t v79 = *(void *)(v0 + 248);
      uint64_t v78 = *(void *)(v0 + 256);
      uint64_t v80 = *(void *)(v0 + 232);
      swift_release();

      os_log_type_t v81 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
      v81(v73, v75);
      sub_1001CAB28(v80);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v193, v79);
      v221(v214, v202);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v207, v197);
      v81(v226, v75);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 104));
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 688))(*(void *)(v0 + 496), *(void *)(v0 + 504), *(void *)(v0 + 448));
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v170 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
      uint64_t v204 = *(void *)(v0 + 552);
      uint64_t v210 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v194 = *(void *)(v0 + 512);
      uint64_t v22 = *(void *)(v0 + 496);
      uint64_t v217 = *(void *)(v0 + 504);
      uint64_t v173 = *(void *)(v0 + 456);
      uint64_t v175 = *(void *)(v0 + 448);
      uint64_t v199 = *(void *)(v0 + 440);
      uint64_t v186 = *(void *)(v0 + 424);
      uint64_t v189 = *(void *)(v0 + 416);
      uint64_t v181 = *(void *)(v0 + 248);
      uint64_t v176 = *(void *)(v0 + 232);
      uint64_t v178 = *(void *)(v0 + 256);
      uint64_t v23 = *(void *)(v0 + 168);
      uint64_t v184 = *(void *)(v0 + 264);
      uint64_t v24 = *(void *)(v0 + 144);
      os_log_t log = v20;
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v231[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446210;
      uint64_t v26 = v22;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v28;
      v170(v23, v24);
      *(void *)(v0 + 56) = sub_100037004(v27, v29, v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v173 + 8);
      v30(v26, v175);
      _os_log_impl((void *)&_mh_execute_header, log, v21, "Not triggering fence (fence already triggered in current scheduleInterval): %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_1001CAB28(v176);
      (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v184, v181);
      v210(v204, v194);
      (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v199, v189);
      v30(v217, v175);
    }
    else
    {
      uint64_t v212 = *(void *)(v0 + 552);
      uint64_t v219 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v47 = *(void *)(v0 + 496);
      uint64_t v224 = *(void *)(v0 + 504);
      uint64_t v49 = *(void *)(v0 + 448);
      uint64_t v48 = *(void *)(v0 + 456);
      uint64_t v200 = *(void *)(v0 + 512);
      uint64_t v205 = *(void *)(v0 + 440);
      uint64_t v50 = *(void *)(v0 + 424);
      uint64_t v195 = *(void *)(v0 + 416);
      uint64_t v51 = *(void *)(v0 + 256);
      uint64_t v191 = *(void *)(v0 + 264);
      uint64_t v52 = *(void *)(v0 + 248);
      uint64_t v53 = *(void *)(v0 + 232);
      swift_release();

      uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v54(v47, v49);
      sub_1001CAB28(v53);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v191, v52);
      v219(v212, v200);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v205, v195);
      v54(v224, v49);
    }
  }
  uint64_t v82 = *(void *)(v0 + 696) + 1;
  if (v82 == *(void *)(v0 + 672))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v83 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v83;
    *uint64_t v83 = v0;
    v83[1] = sub_1001BBC64;
    return sub_1001C99B8();
  }
  while (1)
  {
    *(void *)(v0 + 696) = v82;
    uint64_t v84 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
    int v85 = *(_DWORD *)(v0 + 972);
    uint64_t v86 = *(void *)(v0 + 504);
    uint64_t v87 = *(void *)(v0 + 448);
    uint64_t v89 = *(void *)(v0 + 400);
    uint64_t v88 = *(void *)(v0 + 408);
    uint64_t v90 = *(void *)(v0 + 392);
    unint64_t v91 = *(void *)(v0 + 664)
        + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
        + *(void *)(v0 + 680) * v82;
    *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v84(v86, v91, v87);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v89 + 88))(v88, v90) == v85) {
      break;
    }
    uint64_t v112 = *(void *)(v0 + 504);
    uint64_t v113 = *(void *)(v0 + 448);
    uint64_t v114 = *(void *)(v0 + 456);
    uint64_t v116 = *(void *)(v0 + 400);
    uint64_t v115 = *(void *)(v0 + 408);
    uint64_t v117 = *(void *)(v0 + 392);
LABEL_36:
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v113);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
LABEL_37:
    uint64_t v82 = *(void *)(v0 + 696) + 1;
    if (v82 == *(void *)(v0 + 672)) {
      goto LABEL_23;
    }
  }
  unsigned int v227 = *(_DWORD *)(v0 + 976);
  uint64_t v92 = *(void *)(v0 + 440);
  uint64_t v93 = *(void *)(v0 + 416);
  uint64_t v94 = *(void *)(v0 + 424);
  uint64_t v95 = *(void *)(v0 + 408);
  uint64_t v96 = *(void *)(v0 + 384);
  uint64_t v97 = *(void *)(v0 + 368);
  uint64_t v98 = *(void *)(v0 + 376);
  uint64_t v99 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v95, *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32))(v92, v95, v93);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v97 + 104))(v98, v227, v99);
  char v100 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v101(v98, v99);
  v101(v96, v99);
  if ((v100 & 1) == 0) {
    goto LABEL_35;
  }
  uint64_t v102 = *(unsigned int *)(v0 + 980);
  uint64_t v104 = *(void *)(v0 + 344);
  uint64_t v103 = *(void *)(v0 + 352);
  uint64_t v105 = *(void *)(v0 + 328);
  uint64_t v106 = *(void *)(v0 + 336);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 104))(v104, v102, v105);
  char v107 = static Fence.Participant.== infix(_:_:)();
  uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
  v108(v104, v105);
  v108(v103, v105);
  if ((v107 & 1) == 0)
  {
LABEL_35:
    uint64_t v115 = *(void *)(v0 + 504);
    uint64_t v117 = *(void *)(v0 + 448);
    uint64_t v116 = *(void *)(v0 + 456);
    uint64_t v112 = *(void *)(v0 + 440);
    uint64_t v113 = *(void *)(v0 + 416);
    uint64_t v114 = *(void *)(v0 + 424);
    goto LABEL_36;
  }
  uint64_t v109 = *(void *)(v0 + 520);
  uint64_t v110 = *(void *)(v0 + 512);
  uint64_t v111 = *(void *)(v0 + 320);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v111, 1, v110) != 1)
  {
    uint64_t v118 = *(void *)(v0 + 560);
    uint64_t v119 = *(void *)(v0 + 520);
    uint64_t v120 = *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v119 + 32))(v118, *(void *)(v0 + 320), v120);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v121 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
    if (v121) {
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
LABEL_33:
  uint64_t v122 = *(void *)(v0 + 568);
  uint64_t v123 = *(void *)(v0 + 552);
  uint64_t v208 = *(void *)(v0 + 576);
  uint64_t v215 = *(void *)(v0 + 544);
  uint64_t v222 = *(void *)(v0 + 536);
  uint64_t v228 = *(void *)(v0 + 528);
  uint64_t v124 = *(void *)(v0 + 520);
  uint64_t v125 = *(void *)(v0 + 512);
  uint64_t v126 = *(void *)(v0 + 304);
  uint64_t v127 = *(void *)(v0 + 312);
  uint64_t v128 = *(void *)(v0 + 296);
  uint64_t v129 = *(void *)(v0 + 280);
  uint64_t v198 = *(void *)(v0 + 288);
  uint64_t v203 = *(void *)(v0 + 272);
  uint64_t v185 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
  v185(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousStartDate(from:)();
  uint64_t v183 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
  v183(v127, v128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v198, v208, v203);
  uint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16);
  v130(v215, v123, v125);
  v130(v222, v122, v125);
  v130(v228, v123, v125);
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.default.getter();
  BOOL v133 = os_log_type_enabled(v131, v132);
  uint64_t v134 = *(void *)(v0 + 544);
  uint64_t v135 = *(void *)(v0 + 536);
  uint64_t v136 = *(void *)(v0 + 528);
  uint64_t v137 = *(void *)(v0 + 512);
  uint64_t v138 = *(void *)(v0 + 288);
  uint64_t v139 = *(void *)(v0 + 272);
  uint64_t v229 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
  uint64_t v140 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
  if (v133)
  {
    unsigned int v209 = v131;
    uint64_t v141 = swift_slowAlloc();
    v231[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v141 = 136446466;
    uint64_t v142 = Date.localISO8601.getter();
    uint64_t v216 = v138;
    *(void *)(v141 + 4) = sub_100037004(v142, v143, v231);
    swift_bridgeObjectRelease();
    os_log_type_t v144 = v132;
    uint64_t v145 = *v140;
    (*v140)(v134, v137);
    *(_WORD *)(v141 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v141 + 14) = v146;
    v145(v135, v137);
    v145(v136, v137);
    _os_log_impl((void *)&_mh_execute_header, v209, v144, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v141, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v229)(v216, v139);
  }
  else
  {
    uint64_t v145 = *v140;
    (*v140)(v134, v137);
    v145(v135, v137);
    v145(v136, v137);

    (*v229)(v138, v139);
  }
  *(void *)(v0 + 712) = v145;
  Date.timeIntervalSince(_:)();
  if (v147 > 300.0)
  {
    uint64_t v148 = *(void *)(v0 + 504);
    uint64_t v149 = *(void *)(v0 + 448);
    uint64_t v150 = *(void *)(v0 + 456);
    uint64_t v151 = *(void *)(v0 + 440);
    uint64_t v152 = *(void *)(v0 + 416);
    uint64_t v153 = *(void *)(v0 + 424);
    v145(*(void *)(v0 + 552), *(void *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v151, v152);
    (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v148, v149);
    goto LABEL_37;
  }
  uint64_t v154 = *(void *)(v0 + 312);
  uint64_t v155 = *(void *)(v0 + 296);
  uint64_t v156 = *(void *)(v0 + 248);
  uint64_t v157 = *(void *)(v0 + 256);
  uint64_t v158 = *(void *)(v0 + 240);
  v185(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v183(v154, v155);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v158, 1, v156) == 1)
  {
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
    uint64_t v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v161 = 0;
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "No valid interval for startDate", v161, 2u);
      swift_slowDealloc();
    }
    uint64_t v162 = *(void *)(v0 + 552);
    uint64_t v163 = *(void *)(v0 + 512);
    uint64_t v164 = *(void *)(v0 + 456);
    uint64_t v223 = *(void *)(v0 + 448);
    uint64_t v230 = *(void *)(v0 + 504);
    uint64_t v165 = *(void *)(v0 + 440);
    uint64_t v167 = *(void *)(v0 + 416);
    uint64_t v166 = *(void *)(v0 + 424);

    v145(v162, v163);
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v165, v167);
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v230, v223);
    goto LABEL_37;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
  uint64_t v168 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v168;
  *uint64_t v168 = v0;
  v168[1] = sub_1001B75D0;
  return daemon.getter();
}

uint64_t sub_1001BA3C4()
{
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 784);
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  uint64_t v2 = *(void *)(*(void *)v0 + 144);
  uint64_t v3 = *(void *)(*(void *)v0 + 128);
  uint64_t v4 = *(void *)(*(void *)v0 + 112);
  uint64_t v5 = *(void *)(*(void *)v0 + 104);
  uint64_t v6 = *(void *)(*(void *)v0 + 96);
  uint64_t v7 = *(void *)(*(void *)v0 + 80);
  uint64_t v8 = *(void *)(*(void *)v0 + 72);
  uint64_t v9 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v11(v1, v2);
  return _swift_task_switch(sub_1001BA604, v9, 0);
}

uint64_t sub_1001BA604()
{
  uint64_t v119 = v0;
  uint64_t v1 = *(void **)(v0 + 840);
  uint64_t v2 = *(void **)(v0 + 832);
  char v107 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v102 = *(void *)(v0 + 552);
  uint64_t v99 = *(void *)(v0 + 512);
  uint64_t v113 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v110 = *(void *)(v0 + 448);
  os_log_t log = *(os_log_t *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 424);
  uint64_t v100 = *(void *)(v0 + 416);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 232);
  swift_release();

  sub_1001CAB28(v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v107(v102, v99);
  (*(void (**)(os_log_t, uint64_t))(v4 + 8))(log, v100);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v113, v110);
  uint64_t v9 = *(void *)(v0 + 696) + 1;
  if (v9 == *(void *)(v0 + 672))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    os_log_type_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v10;
    void *v10 = v0;
    v10[1] = sub_1001BBC64;
    return sub_1001C99B8();
  }
  while (1)
  {
    *(void *)(v0 + 696) = v9;
    uint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
    int v13 = *(_DWORD *)(v0 + 972);
    uint64_t v14 = *(void *)(v0 + 504);
    uint64_t v15 = *(void *)(v0 + 448);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v16 = *(void *)(v0 + 408);
    uint64_t v18 = *(void *)(v0 + 392);
    unint64_t v19 = *(void *)(v0 + 664)
        + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
        + *(void *)(v0 + 680) * v9;
    *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v12(v14, v19, v15);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == v13) {
      break;
    }
    uint64_t v40 = *(void *)(v0 + 504);
    uint64_t v41 = *(void *)(v0 + 448);
    uint64_t v42 = *(void *)(v0 + 456);
    uint64_t v44 = *(void *)(v0 + 400);
    uint64_t v43 = *(void *)(v0 + 408);
    uint64_t v45 = *(void *)(v0 + 392);
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
LABEL_16:
    uint64_t v9 = *(void *)(v0 + 696) + 1;
    if (v9 == *(void *)(v0 + 672)) {
      goto LABEL_2;
    }
  }
  unsigned int v114 = *(_DWORD *)(v0 + 976);
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v21 = *(void *)(v0 + 416);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(void *)(v0 + 384);
  uint64_t v25 = *(void *)(v0 + 368);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v23, *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v20, v23, v21);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v26, v114, v27);
  char v28 = static Fence.AcceptanceStatus.== infix(_:_:)();
  unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v29(v26, v27);
  v29(v24, v27);
  if ((v28 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v30 = *(unsigned int *)(v0 + 980);
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v34 = *(void *)(v0 + 336);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104))(v32, v30, v33);
  char v35 = static Fence.Participant.== infix(_:_:)();
  id v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v36(v32, v33);
  v36(v31, v33);
  if ((v35 & 1) == 0)
  {
LABEL_14:
    uint64_t v43 = *(void *)(v0 + 504);
    uint64_t v45 = *(void *)(v0 + 448);
    uint64_t v44 = *(void *)(v0 + 456);
    uint64_t v40 = *(void *)(v0 + 440);
    uint64_t v41 = *(void *)(v0 + 416);
    uint64_t v42 = *(void *)(v0 + 424);
    goto LABEL_15;
  }
  uint64_t v37 = *(void *)(v0 + 520);
  uint64_t v38 = *(void *)(v0 + 512);
  uint64_t v39 = *(void *)(v0 + 320);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) != 1)
  {
    uint64_t v46 = *(void *)(v0 + 560);
    uint64_t v47 = *(void *)(v0 + 520);
    uint64_t v48 = *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v47 + 32))(v46, *(void *)(v0 + 320), v48);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    if (v49) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
LABEL_12:
  uint64_t v50 = *(void *)(v0 + 568);
  uint64_t v51 = *(void *)(v0 + 552);
  os_log_t loga = *(os_log_t *)(v0 + 576);
  uint64_t v108 = *(void *)(v0 + 544);
  uint64_t v111 = *(void *)(v0 + 536);
  uint64_t v115 = *(void *)(v0 + 528);
  uint64_t v52 = *(void *)(v0 + 520);
  uint64_t v53 = *(void *)(v0 + 512);
  uint64_t v54 = *(void *)(v0 + 304);
  uint64_t v55 = *(void *)(v0 + 312);
  uint64_t v56 = *(void *)(v0 + 296);
  uint64_t v57 = *(void *)(v0 + 280);
  uint64_t v101 = *(void *)(v0 + 288);
  uint64_t v103 = *(void *)(v0 + 272);
  uint64_t v98 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
  v98(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousStartDate(from:)();
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v97(v55, v56);
  (*(void (**)(uint64_t, os_log_t, uint64_t))(v57 + 16))(v101, loga, v103);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
  v58(v108, v51, v53);
  v58(v111, v50, v53);
  v58(v115, v51, v53);
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.default.getter();
  BOOL v61 = os_log_type_enabled(v59, v60);
  uint64_t v62 = *(void *)(v0 + 544);
  uint64_t v63 = *(void *)(v0 + 536);
  uint64_t v64 = *(void *)(v0 + 528);
  uint64_t v65 = *(void *)(v0 + 512);
  uint64_t v66 = *(void *)(v0 + 288);
  uint64_t v67 = *(void *)(v0 + 272);
  uint64_t v116 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
  id v68 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
  if (v61)
  {
    os_log_t logb = v59;
    uint64_t v69 = swift_slowAlloc();
    uint64_t v118 = swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 136446466;
    uint64_t v70 = Date.localISO8601.getter();
    uint64_t v109 = v66;
    *(void *)(v69 + 4) = sub_100037004(v70, v71, &v118);
    swift_bridgeObjectRelease();
    os_log_type_t v72 = v60;
    uint64_t v73 = *v68;
    (*v68)(v62, v65);
    *(_WORD *)(v69 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v69 + 14) = v74;
    v73(v63, v65);
    v73(v64, v65);
    _os_log_impl((void *)&_mh_execute_header, logb, v72, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v69, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v116)(v109, v67);
  }
  else
  {
    uint64_t v73 = *v68;
    (*v68)(v62, v65);
    v73(v63, v65);
    v73(v64, v65);

    (*v116)(v66, v67);
  }
  *(void *)(v0 + 712) = v73;
  Date.timeIntervalSince(_:)();
  if (v75 > 300.0)
  {
    uint64_t v76 = *(void *)(v0 + 504);
    uint64_t v77 = *(void *)(v0 + 448);
    uint64_t v78 = *(void *)(v0 + 456);
    uint64_t v79 = *(void *)(v0 + 440);
    uint64_t v80 = *(void *)(v0 + 416);
    uint64_t v81 = *(void *)(v0 + 424);
    v73(*(void *)(v0 + 552), *(void *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v80);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
    goto LABEL_16;
  }
  uint64_t v82 = *(void *)(v0 + 312);
  uint64_t v83 = *(void *)(v0 + 296);
  uint64_t v84 = *(void *)(v0 + 248);
  uint64_t v85 = *(void *)(v0 + 256);
  uint64_t v86 = *(void *)(v0 + 240);
  v98(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v97(v82, v83);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v86, 1, v84) == 1)
  {
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "No valid interval for startDate", v89, 2u);
      swift_slowDealloc();
    }
    uint64_t v90 = *(void *)(v0 + 552);
    uint64_t v91 = *(void *)(v0 + 512);
    uint64_t v117 = *(void *)(v0 + 504);
    uint64_t v92 = *(void *)(v0 + 456);
    uint64_t v112 = *(void *)(v0 + 448);
    uint64_t v93 = *(void *)(v0 + 440);
    uint64_t v95 = *(void *)(v0 + 416);
    uint64_t v94 = *(void *)(v0 + 424);

    v73(v90, v91);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v117, v112);
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
  uint64_t v96 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v96;
  *uint64_t v96 = v0;
  v96[1] = sub_1001B75D0;
  return daemon.getter();
}

uint64_t sub_1001BB008()
{
  uint64_t v2 = *v1;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*v1 + 784);
  uint64_t v13 = *(void *)(*v1 + 160);
  uint64_t v12 = *(void *)(*v1 + 144);
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v6 = *(void *)(*v1 + 88);
  uint64_t v7 = *(void *)(*v1 + 80);
  uint64_t v8 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 888) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v14(v13, v12);
  uint64_t v9 = *(void *)(v2 + 64);
  if (v0) {
    os_log_type_t v10 = sub_1001BCEA4;
  }
  else {
    os_log_type_t v10 = sub_1001BB264;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_1001BB264()
{
  uint64_t v119 = v0;
  uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
  uint64_t v1 = *(void **)(v0 + 864);
  uint64_t v2 = *(void **)(v0 + 856);
  uint64_t v110 = *(void *)(v0 + 504);
  os_log_t log = *(os_log_t *)(v0 + 712);
  uint64_t v107 = *(void *)(v0 + 448);
  uint64_t v100 = *(void *)(v0 + 552);
  uint64_t v102 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v98 = *(void *)(v0 + 512);
  uint64_t v99 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);
  swift_release();

  sub_1001CAB28(v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  ((void (*)(uint64_t, uint64_t))log)(v100, v98);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v102, v99);
  v113(v110, v107);
  uint64_t v8 = *(void *)(v0 + 696) + 1;
  if (v8 == *(void *)(v0 + 672))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v9;
    void *v9 = v0;
    v9[1] = sub_1001BBC64;
    return sub_1001C99B8();
  }
  while (1)
  {
    *(void *)(v0 + 696) = v8;
    uint64_t v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
    int v12 = *(_DWORD *)(v0 + 972);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v15 = *(void *)(v0 + 408);
    uint64_t v17 = *(void *)(v0 + 392);
    unint64_t v18 = *(void *)(v0 + 664)
        + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
        + *(void *)(v0 + 680) * v8;
    *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v13, v18, v14);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17) == v12) {
      break;
    }
    uint64_t v39 = *(void *)(v0 + 504);
    uint64_t v40 = *(void *)(v0 + 448);
    uint64_t v41 = *(void *)(v0 + 456);
    uint64_t v43 = *(void *)(v0 + 400);
    uint64_t v42 = *(void *)(v0 + 408);
    uint64_t v44 = *(void *)(v0 + 392);
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_16:
    uint64_t v8 = *(void *)(v0 + 696) + 1;
    if (v8 == *(void *)(v0 + 672)) {
      goto LABEL_2;
    }
  }
  unsigned int v114 = *(_DWORD *)(v0 + 976);
  uint64_t v19 = *(void *)(v0 + 440);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 408);
  uint64_t v23 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 368);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v26 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v22, *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v19, v22, v20);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v25, v114, v26);
  char v27 = static Fence.AcceptanceStatus.== infix(_:_:)();
  char v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v28(v25, v26);
  v28(v23, v26);
  if ((v27 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v29 = *(unsigned int *)(v0 + 980);
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v30 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 328);
  uint64_t v33 = *(void *)(v0 + 336);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v31, v29, v32);
  char v34 = static Fence.Participant.== infix(_:_:)();
  char v35 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v35(v31, v32);
  v35(v30, v32);
  if ((v34 & 1) == 0)
  {
LABEL_14:
    uint64_t v42 = *(void *)(v0 + 504);
    uint64_t v44 = *(void *)(v0 + 448);
    uint64_t v43 = *(void *)(v0 + 456);
    uint64_t v39 = *(void *)(v0 + 440);
    uint64_t v40 = *(void *)(v0 + 416);
    uint64_t v41 = *(void *)(v0 + 424);
    goto LABEL_15;
  }
  uint64_t v36 = *(void *)(v0 + 520);
  uint64_t v37 = *(void *)(v0 + 512);
  uint64_t v38 = *(void *)(v0 + 320);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v37) != 1)
  {
    uint64_t v45 = *(void *)(v0 + 560);
    uint64_t v46 = *(void *)(v0 + 520);
    uint64_t v47 = *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v46 + 32))(v45, *(void *)(v0 + 320), v47);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    if (v48) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
LABEL_12:
  uint64_t v49 = *(void *)(v0 + 568);
  uint64_t v50 = *(void *)(v0 + 552);
  os_log_t loga = *(os_log_t *)(v0 + 576);
  uint64_t v108 = *(void *)(v0 + 544);
  uint64_t v111 = *(void *)(v0 + 536);
  uint64_t v115 = *(void *)(v0 + 528);
  uint64_t v51 = *(void *)(v0 + 520);
  uint64_t v52 = *(void *)(v0 + 512);
  uint64_t v53 = *(void *)(v0 + 304);
  uint64_t v54 = *(void *)(v0 + 312);
  uint64_t v55 = *(void *)(v0 + 296);
  uint64_t v56 = *(void *)(v0 + 280);
  uint64_t v101 = *(void *)(v0 + 288);
  uint64_t v103 = *(void *)(v0 + 272);
  uint64_t v97 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
  v97(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousStartDate(from:)();
  uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v96(v54, v55);
  (*(void (**)(uint64_t, os_log_t, uint64_t))(v56 + 16))(v101, loga, v103);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  v57(v108, v50, v52);
  v57(v111, v49, v52);
  v57(v115, v50, v52);
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  BOOL v60 = os_log_type_enabled(v58, v59);
  uint64_t v61 = *(void *)(v0 + 544);
  uint64_t v62 = *(void *)(v0 + 536);
  uint64_t v63 = *(void *)(v0 + 528);
  uint64_t v64 = *(void *)(v0 + 512);
  uint64_t v65 = *(void *)(v0 + 288);
  uint64_t v66 = *(void *)(v0 + 272);
  uint64_t v116 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
  uint64_t v67 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
  if (v60)
  {
    os_log_t logb = v58;
    uint64_t v68 = swift_slowAlloc();
    uint64_t v118 = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136446466;
    uint64_t v69 = Date.localISO8601.getter();
    uint64_t v109 = v65;
    *(void *)(v68 + 4) = sub_100037004(v69, v70, &v118);
    swift_bridgeObjectRelease();
    os_log_type_t v71 = v59;
    os_log_type_t v72 = *v67;
    (*v67)(v61, v64);
    *(_WORD *)(v68 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v68 + 14) = v73;
    v72(v62, v64);
    v72(v63, v64);
    _os_log_impl((void *)&_mh_execute_header, logb, v71, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v116)(v109, v66);
  }
  else
  {
    os_log_type_t v72 = *v67;
    (*v67)(v61, v64);
    v72(v62, v64);
    v72(v63, v64);

    (*v116)(v65, v66);
  }
  *(void *)(v0 + 712) = v72;
  Date.timeIntervalSince(_:)();
  if (v74 > 300.0)
  {
    uint64_t v75 = *(void *)(v0 + 504);
    uint64_t v76 = *(void *)(v0 + 448);
    uint64_t v77 = *(void *)(v0 + 456);
    uint64_t v78 = *(void *)(v0 + 440);
    uint64_t v79 = *(void *)(v0 + 416);
    uint64_t v80 = *(void *)(v0 + 424);
    v72(*(void *)(v0 + 552), *(void *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
    goto LABEL_16;
  }
  uint64_t v81 = *(void *)(v0 + 312);
  uint64_t v82 = *(void *)(v0 + 296);
  uint64_t v83 = *(void *)(v0 + 248);
  uint64_t v84 = *(void *)(v0 + 256);
  uint64_t v85 = *(void *)(v0 + 240);
  v97(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v96(v81, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v83) == 1)
  {
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      os_log_type_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "No valid interval for startDate", v88, 2u);
      swift_slowDealloc();
    }
    uint64_t v89 = *(void *)(v0 + 552);
    uint64_t v90 = *(void *)(v0 + 512);
    uint64_t v117 = *(void *)(v0 + 504);
    uint64_t v91 = *(void *)(v0 + 456);
    uint64_t v112 = *(void *)(v0 + 448);
    uint64_t v92 = *(void *)(v0 + 440);
    uint64_t v94 = *(void *)(v0 + 416);
    uint64_t v93 = *(void *)(v0 + 424);

    v72(v89, v90);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v117, v112);
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_1001B75D0;
  return daemon.getter();
}

uint64_t sub_1001BBC64()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 904) = v2;
  *uint64_t v2 = v4;
  v2[1] = sub_1001BBD90;
  return daemon.getter();
}

uint64_t sub_1001BBD90(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[114] = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[115] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001BBF1C;
  uint64_t v5 = v2[79];
  uint64_t v6 = v2[78];
  uint64_t v7 = v2[77];
  uint64_t v8 = v2[76];
  return ActorServiceDaemon.getService<A>()(v8, v7, v6, v5);
}

uint64_t sub_1001BBF1C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 928) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[8];
    return _swift_task_switch(sub_1001BC604, v6, 0);
  }
  else
  {
    swift_release();
    v4[117] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[118] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001BC0A8;
    return sub_10012F108();
  }
}

uint64_t sub_1001BC0A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 952) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BC1C0, v2, 0);
}

uint64_t sub_1001BC1C0()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001BC260;
  uint64_t v2 = *(void *)(v0 + 952);
  return sub_1001B2350(v2);
}

uint64_t sub_1001BC260()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001BC38C, v1, 0);
}

uint64_t sub_1001BC38C()
{
  (*(void (**)(void, void))(v0[65] + 8))(v0[71], v0[64]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001BC604()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[64];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001BC890()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[64];
  uint64_t v11 = v0[63];
  uint64_t v12 = v0[71];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[57];
  uint64_t v6 = v0[55];
  uint64_t v8 = v0[52];
  uint64_t v7 = v0[53];
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  v1(v12, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001BCB88()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[89];
  uint64_t v2 = v0[64];
  uint64_t v15 = v0[63];
  uint64_t v16 = v0[71];
  uint64_t v3 = v0[57];
  uint64_t v14 = v0[56];
  uint64_t v12 = v0[69];
  uint64_t v13 = v0[55];
  uint64_t v4 = v0[53];
  uint64_t v11 = v0[52];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[31];
  uint64_t v8 = v0[29];
  swift_release();
  sub_1001CAB28(v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v1(v12, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v13, v11);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v15, v14);
  v1(v16, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001BCEA4()
{
  uint64_t v148 = v0;
  (*(void (**)(void, void, void))(v0 + 688))(*(void *)(v0 + 464), *(void *)(v0 + 504), *(void *)(v0 + 448));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  uint64_t v142 = v1;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
    uint64_t v112 = *(void **)(v0 + 864);
    uint64_t v108 = *(void **)(v0 + 856);
    uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v124 = *(void *)(v0 + 552);
    uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v120 = *(void *)(v0 + 512);
    uint64_t v130 = *(void *)(v0 + 504);
    uint64_t v105 = *(void *)(v0 + 464);
    uint64_t v134 = *(void *)(v0 + 448);
    uint64_t v122 = *(void *)(v0 + 440);
    uint64_t v114 = *(void *)(v0 + 424);
    uint64_t v117 = *(void *)(v0 + 416);
    uint64_t v109 = *(void *)(v0 + 256);
    uint64_t v110 = *(void *)(v0 + 248);
    uint64_t v111 = *(void *)(v0 + 264);
    uint64_t v107 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    v147[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    Fence.id.getter();
    sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    v106(v3, v4);
    *(void *)(v0 + 32) = sub_100037004(v7, v9, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v138(v105, v134);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v142, v2, "Failed to trigger fence %{public}s, error: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    sub_1001CAB28(v107);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v111, v110);
    v127(v124, v120);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v122, v117);
    v138(v130, v134);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
    char v121 = *(void **)(v0 + 864);
    uint64_t v12 = *(void **)(v0 + 856);
    uint64_t v131 = *(void *)(v0 + 552);
    uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v139 = *(void *)(v0 + 504);
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v125 = *(void *)(v0 + 512);
    uint64_t v128 = *(void *)(v0 + 440);
    uint64_t v15 = *(void *)(v0 + 424);
    uint64_t v123 = *(void *)(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 256);
    uint64_t v115 = *(void *)(v0 + 248);
    uint64_t v118 = *(void *)(v0 + 264);
    uint64_t v113 = *(void *)(v0 + 232);
    swift_release();

    swift_errorRelease();
    swift_errorRelease();
    v11(v13, v14);
    swift_errorRelease();

    sub_1001CAB28(v113);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v118, v115);
    v135(v131, v125);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v128, v123);
    v11(v139, v14);
  }
  uint64_t v17 = *(void *)(v0 + 696) + 1;
  if (v17 == *(void *)(v0 + 672))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    unint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_1001BBC64;
    return sub_1001C99B8();
  }
  while (1)
  {
    *(void *)(v0 + 696) = v17;
    uint64_t v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 688);
    int v21 = *(_DWORD *)(v0 + 972);
    uint64_t v22 = *(void *)(v0 + 504);
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v25 = *(void *)(v0 + 400);
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 392);
    unint64_t v27 = *(void *)(v0 + 664)
        + ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))
        + *(void *)(v0 + 680) * v17;
    *(void *)(v0 + 704) = (*(void *)(v0 + 456) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v20(v22, v27, v23);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v24, v26) == v21) {
      break;
    }
    uint64_t v48 = *(void *)(v0 + 504);
    uint64_t v49 = *(void *)(v0 + 448);
    uint64_t v50 = *(void *)(v0 + 456);
    uint64_t v52 = *(void *)(v0 + 400);
    uint64_t v51 = *(void *)(v0 + 408);
    uint64_t v53 = *(void *)(v0 + 392);
LABEL_18:
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
LABEL_19:
    uint64_t v17 = *(void *)(v0 + 696) + 1;
    if (v17 == *(void *)(v0 + 672)) {
      goto LABEL_5;
    }
  }
  unsigned int v143 = *(_DWORD *)(v0 + 976);
  uint64_t v28 = *(void *)(v0 + 440);
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v30 = *(void *)(v0 + 424);
  uint64_t v31 = *(void *)(v0 + 408);
  uint64_t v32 = *(void *)(v0 + 384);
  uint64_t v33 = *(void *)(v0 + 368);
  uint64_t v34 = *(void *)(v0 + 376);
  uint64_t v35 = *(void *)(v0 + 360);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 400) + 96))(v31, *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v28, v31, v29);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v34, v143, v35);
  char v36 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(v34, v35);
  v37(v32, v35);
  if ((v36 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v38 = *(unsigned int *)(v0 + 980);
  uint64_t v40 = *(void *)(v0 + 344);
  uint64_t v39 = *(void *)(v0 + 352);
  uint64_t v41 = *(void *)(v0 + 328);
  uint64_t v42 = *(void *)(v0 + 336);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 104))(v40, v38, v41);
  char v43 = static Fence.Participant.== infix(_:_:)();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v44(v40, v41);
  v44(v39, v41);
  if ((v43 & 1) == 0)
  {
LABEL_17:
    uint64_t v51 = *(void *)(v0 + 504);
    uint64_t v53 = *(void *)(v0 + 448);
    uint64_t v52 = *(void *)(v0 + 456);
    uint64_t v48 = *(void *)(v0 + 440);
    uint64_t v49 = *(void *)(v0 + 416);
    uint64_t v50 = *(void *)(v0 + 424);
    goto LABEL_18;
  }
  uint64_t v45 = *(void *)(v0 + 520);
  uint64_t v46 = *(void *)(v0 + 512);
  uint64_t v47 = *(void *)(v0 + 320);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v47, 1, v46) != 1)
  {
    uint64_t v54 = *(void *)(v0 + 560);
    uint64_t v55 = *(void *)(v0 + 520);
    uint64_t v56 = *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 32))(v54, *(void *)(v0 + 320), v56);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    if (v57) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  sub_10000A520(*(void *)(v0 + 320), (uint64_t *)&unk_1003EE800);
LABEL_15:
  uint64_t v58 = *(void *)(v0 + 568);
  uint64_t v59 = *(void *)(v0 + 552);
  uint64_t v132 = *(void *)(v0 + 576);
  uint64_t v136 = *(void *)(v0 + 544);
  uint64_t v140 = *(void *)(v0 + 536);
  uint64_t v144 = *(void *)(v0 + 528);
  uint64_t v60 = *(void *)(v0 + 520);
  uint64_t v61 = *(void *)(v0 + 512);
  uint64_t v62 = *(void *)(v0 + 304);
  uint64_t v63 = *(void *)(v0 + 312);
  uint64_t v64 = *(void *)(v0 + 296);
  uint64_t v65 = *(void *)(v0 + 280);
  uint64_t v126 = *(void *)(v0 + 288);
  uint64_t v129 = *(void *)(v0 + 272);
  uint64_t v119 = *(void (**)(void, void, void))(*(void *)(v0 + 424) + 16);
  v119(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousStartDate(from:)();
  uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  v116(v63, v64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v126, v132, v129);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v66(v136, v59, v61);
  v66(v140, v58, v61);
  v66(v144, v59, v61);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = *(void *)(v0 + 544);
  uint64_t v71 = *(void *)(v0 + 536);
  uint64_t v72 = *(void *)(v0 + 528);
  uint64_t v73 = *(void *)(v0 + 512);
  uint64_t v74 = *(void *)(v0 + 288);
  uint64_t v75 = *(void *)(v0 + 272);
  uint64_t v145 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 280) + 8);
  uint64_t v76 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 520) + 8);
  if (v69)
  {
    BOOL v133 = v67;
    uint64_t v77 = swift_slowAlloc();
    v147[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 136446466;
    uint64_t v78 = Date.localISO8601.getter();
    uint64_t v137 = v74;
    *(void *)(v77 + 4) = sub_100037004(v78, v79, v147);
    swift_bridgeObjectRelease();
    os_log_type_t v80 = v68;
    uint64_t v81 = *v76;
    (*v76)(v70, v73);
    *(_WORD *)(v77 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v77 + 14) = v82;
    v81(v71, v73);
    v81(v72, v73);
    _os_log_impl((void *)&_mh_execute_header, v133, v80, "schedulerTimerFired: startDate: %{public}s timeDelta: %{public}f", (uint8_t *)v77, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v145)(v137, v75);
  }
  else
  {
    uint64_t v81 = *v76;
    (*v76)(v70, v73);
    v81(v71, v73);
    v81(v72, v73);

    (*v145)(v74, v75);
  }
  *(void *)(v0 + 712) = v81;
  Date.timeIntervalSince(_:)();
  if (v83 > 300.0)
  {
    uint64_t v84 = *(void *)(v0 + 504);
    uint64_t v85 = *(void *)(v0 + 448);
    uint64_t v86 = *(void *)(v0 + 456);
    uint64_t v87 = *(void *)(v0 + 440);
    uint64_t v88 = *(void *)(v0 + 416);
    uint64_t v89 = *(void *)(v0 + 424);
    v81(*(void *)(v0 + 552), *(void *)(v0 + 512));
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v84, v85);
    goto LABEL_19;
  }
  uint64_t v90 = *(void *)(v0 + 312);
  uint64_t v91 = *(void *)(v0 + 296);
  uint64_t v92 = *(void *)(v0 + 248);
  uint64_t v93 = *(void *)(v0 + 256);
  uint64_t v94 = *(void *)(v0 + 240);
  v119(*(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 416));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v116(v90, v91);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v94, 1, v92) == 1)
  {
    sub_10000A520(*(void *)(v0 + 240), &qword_1003F0D60);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "No valid interval for startDate", v97, 2u);
      swift_slowDealloc();
    }
    uint64_t v98 = *(void *)(v0 + 552);
    uint64_t v99 = *(void *)(v0 + 512);
    uint64_t v100 = *(void *)(v0 + 456);
    uint64_t v141 = *(void *)(v0 + 448);
    uint64_t v146 = *(void *)(v0 + 504);
    uint64_t v101 = *(void *)(v0 + 440);
    uint64_t v103 = *(void *)(v0 + 416);
    uint64_t v102 = *(void *)(v0 + 424);

    v81(v98, v99);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v146, v141);
    goto LABEL_19;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_1001B75D0;
  return daemon.getter();
}

uint64_t sub_1001BDC3C(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100018CD0;
  return v5();
}

uint64_t sub_1001BDD08(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_1001BDD28, 0, 0);
}

uint64_t sub_1001BDD28()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001BDE14;
    return sub_1001BDFB4();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001BDE14()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001BDF50, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1001BDF50()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001BDFB4()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Fence.TriggerPosition();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Fence.ID();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  sub_100044014(&qword_1003F0A30);
  v1[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.Participant();
  v1[13] = v4;
  v1[14] = *(void *)(v4 - 8);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence.AcceptanceStatus();
  v1[17] = v5;
  v1[18] = *(void *)(v5 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Calendar.SearchDirection();
  v1[21] = v6;
  v1[22] = *(void *)(v6 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Schedule.Matcher();
  v1[24] = v7;
  v1[25] = *(void *)(v7 - 8);
  v1[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Variant();
  v1[27] = v8;
  v1[28] = *(void *)(v8 - 8);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.Schedule();
  v1[31] = v9;
  v1[32] = *(void *)(v9 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v1[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence();
  v1[38] = v10;
  v1[39] = *(void *)(v10 - 8);
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v1[42] = v11;
  v1[43] = *(void *)(v11 - 8);
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  return _swift_task_switch(sub_1001BE4A4, v0, 0);
}

uint64_t sub_1001BE4A4()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 376) = sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Invite timer fired", v4, 2u);
    swift_slowDealloc();
  }

  static Date.now.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001BE600;
  return daemon.getter();
}

uint64_t sub_1001BE600(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[49] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[50] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[51] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  v2[52] = v5;
  uint64_t v6 = sub_1001CAAE0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[53] = v6;
  uint64_t v7 = sub_1001CAAE0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  v2[54] = v7;
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001BE7E8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001BE7E8(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 440) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[4];
    return _swift_task_switch(sub_1001BF360, v6, 0);
  }
  else
  {
    swift_release();
    v4[56] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[57] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001BE974;
    return sub_10012F108();
  }
}

uint64_t sub_1001BE974(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001BEA8C, v2, 0);
}

uint64_t sub_1001BEA8C()
{
  uint64_t v1 = *(void *)(v0 + 464);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 472) = v2;
  if (!v2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v72 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v72;
    *uint64_t v72 = v0;
    v72[1] = sub_1001BFFA0;
    return daemon.getter();
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 312);
  *(_DWORD *)(v0 + 640) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 644) = enum case for Fence.Variant.oneTime(_:);
  *(_DWORD *)(v0 + 648) = enum case for Fence.Variant.recurring(_:);
  *(_DWORD *)(v0 + 652) = enum case for Fence.Variant.scheduled(_:);
  *(_DWORD *)(v0 + 656) = enum case for Calendar.SearchDirection.forward(_:);
  *(_DWORD *)(v0 + 660) = enum case for Fence.AcceptanceStatus.pendingHidden(_:);
  *(_DWORD *)(v0 + 664) = enum case for Fence.Participant.me(_:);
  *(_DWORD *)(v0 + 668) = enum case for Fence.TriggerPosition.undetermined(_:);
  *(void *)(v0 + 480) = *(void *)(v4 + 72);
  *(void *)(v0 + 488) = *(void *)(v4 + 16);
  while (1)
  {
    uint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 488);
    int v10 = *(_DWORD *)(v0 + 648);
    int v11 = *(_DWORD *)(v0 + 644);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 224);
    unint64_t v17 = *(void *)(v0 + 464)
        + ((*(unsigned __int8 *)(v0 + 640) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 640))
        + *(void *)(v0 + 480) * v3;
    unint64_t v18 = (*(void *)(v0 + 312) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    *(void *)(v0 + 496) = v3;
    *(void *)(v0 + 504) = v18;
    v9(v12, v17, v13);
    Fence.variant.getter();
    uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t))(v16 + 88);
    unsigned int v20 = v19(v14, v15);
    if (v20 != v11 && v20 != v10) {
      break;
    }
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 216));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v5);
LABEL_4:
    uint64_t v8 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 304));
    sub_10000A520(v8, (uint64_t *)&unk_1003EE800);
LABEL_5:
    uint64_t v3 = *(void *)(v0 + 496) + 1;
    if (v3 == *(void *)(v0 + 472)) {
      goto LABEL_22;
    }
  }
  if (v20 != *(_DWORD *)(v0 + 652)) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v88 = v19;
  unsigned int v93 = *(_DWORD *)(v0 + 656);
  uint64_t v92 = *(void *)(v0 + 352);
  uint64_t v95 = *(void *)(v0 + 344);
  uint64_t v97 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 280);
  uint64_t v98 = *(void *)(v0 + 288);
  uint64_t v99 = *(void *)(v0 + 296);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v24 = *(void **)(v0 + 256);
  uint64_t v25 = *(void *)(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 200);
  uint64_t v89 = *(void *)(v0 + 272);
  uint64_t v90 = *(void *)(v0 + 208);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v96 = *(void *)(v0 + 192);
  uint64_t v28 = *(void *)(v0 + 176);
  uint64_t v91 = *(void *)(v0 + 168);
  uint64_t v87 = *(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 96);
  v87(v25, *(void *)(v0 + 216));
  uint64_t v29 = (void (*)(uint64_t, uint64_t, uint64_t))v24[4];
  v29(v22, v25, v23);
  uint64_t v86 = v29;
  v29(v98, v22, v23);
  uint64_t v85 = (void (*)(uint64_t, uint64_t, uint64_t))v24[2];
  v85(v89, v98, v23);
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.updatedAt.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v27, v93, v91);
  Fence.Schedule.Matcher.nextStartDate(from:direction:)();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v91);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  *(void *)(v0 + 512) = v30;
  *(void *)(v0 + 520) = (v95 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v30(v92, v97);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v31(v90, v96);
  uint64_t v32 = (void (*)(void, void))v24[1];
  *(void *)(v0 + 528) = v32;
  *(void *)(v0 + 536) = (unint64_t)(v24 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v94 = v32;
  v32(v98, v23);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v99, 0, 1, v97);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v99, 1, v97) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 344) + 32))(*(void *)(v0 + 360), *(void *)(v0 + 296), *(void *)(v0 + 336));
  if ((static Date.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v63 = *(void *)(v0 + 328);
    uint64_t v64 = *(void *)(v0 + 304);
    uint64_t v65 = *(void *)(v0 + 312);
    v30(*(void *)(v0 + 360), *(void *)(v0 + 336));
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    goto LABEL_5;
  }
  uint64_t v100 = v31;
  uint64_t v33 = v30;
  uint64_t v34 = *(unsigned int *)(v0 + 660);
  uint64_t v36 = *(void *)(v0 + 152);
  uint64_t v35 = *(void *)(v0 + 160);
  uint64_t v37 = *(void *)(v0 + 136);
  uint64_t v38 = *(void *)(v0 + 144);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 104))(v36, v34, v37);
  char v39 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v40(v36, v37);
  v40(v35, v37);
  if ((v39 & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v41 = *(unsigned int *)(v0 + 664);
  uint64_t v43 = *(void *)(v0 + 120);
  uint64_t v42 = *(void *)(v0 + 128);
  uint64_t v44 = *(void *)(v0 + 104);
  uint64_t v45 = *(void *)(v0 + 112);
  Fence.findee.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 104))(v43, v41, v44);
  char v46 = static Fence.Participant.== infix(_:_:)();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v47(v43, v44);
  v47(v42, v44);
  if ((v46 & 1) == 0)
  {
LABEL_19:
    uint64_t v63 = *(void *)(v0 + 328);
    uint64_t v64 = *(void *)(v0 + 304);
    uint64_t v65 = *(void *)(v0 + 312);
    v33(*(void *)(v0 + 360), *(void *)(v0 + 336));
    goto LABEL_20;
  }
  int v48 = *(_DWORD *)(v0 + 652);
  uint64_t v49 = *(void *)(v0 + 232);
  uint64_t v50 = *(void *)(v0 + 216);
  Fence.variant.getter();
  if (v88(v49, v50) != v48)
  {
    uint64_t v66 = *(void *)(v0 + 328);
    uint64_t v67 = *(void *)(v0 + 304);
    uint64_t v68 = *(void *)(v0 + 312);
    uint64_t v70 = *(void *)(v0 + 224);
    uint64_t v69 = *(void *)(v0 + 232);
    uint64_t v71 = *(void *)(v0 + 216);
    v33(*(void *)(v0 + 360), *(void *)(v0 + 336));
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
    goto LABEL_5;
  }
  uint64_t v52 = *(void *)(v0 + 264);
  uint64_t v51 = *(void *)(v0 + 272);
  uint64_t v53 = *(void *)(v0 + 248);
  uint64_t v54 = *(void *)(v0 + 232);
  uint64_t v55 = *(void *)(v0 + 208);
  uint64_t v56 = *(void *)(v0 + 192);
  v87(v54, *(void *)(v0 + 216));
  v86(v52, v54, v53);
  v85(v51, v52, v53);
  Fence.Schedule.Matcher.init(schedule:)();
  char v57 = Fence.Schedule.Matcher.doesMatchSchedule(_:)();
  v100(v55, v56);
  if ((v57 & 1) == 0)
  {
    uint64_t v58 = *(void *)(v0 + 360);
    uint64_t v60 = *(void *)(v0 + 328);
    uint64_t v59 = *(void *)(v0 + 336);
    uint64_t v61 = *(void *)(v0 + 304);
    uint64_t v62 = *(void *)(v0 + 312);
    v94(*(void *)(v0 + 264), *(void *)(v0 + 248));
    v33(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
    goto LABEL_5;
  }
  uint64_t v73 = *(unsigned int *)(v0 + 668);
  uint64_t v74 = *(void *)(v0 + 368);
  uint64_t v75 = *(void *)(v0 + 336);
  uint64_t v76 = *(void *)(v0 + 344);
  uint64_t v78 = *(void *)(v0 + 48);
  uint64_t v77 = *(void *)(v0 + 56);
  uint64_t v79 = *(void *)(v0 + 40);
  Fence.id.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v77, v74, v75);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 104))(v77, v73, v79);
  os_log_type_t v80 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v80;
  *os_log_type_t v80 = v0;
  v80[1] = sub_1001BF518;
  uint64_t v82 = *(void *)(v0 + 88);
  uint64_t v81 = *(void *)(v0 + 96);
  uint64_t v83 = *(void *)(v0 + 56);
  return sub_10019A3A8(v81, v82, v83);
}

uint64_t sub_1001BF360()
{
  swift_release();
  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001BF518()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 72);
  uint64_t v5 = *(void *)(*(void *)v1 + 64);
  uint64_t v6 = *(void *)(*(void *)v1 + 56);
  uint64_t v7 = *(void *)(*(void *)v1 + 48);
  uint64_t v8 = *(void *)(*(void *)v1 + 40);
  v2[69] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[70] = v9;
  v2[71] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v3, v5);
  if (v0)
  {
    uint64_t v10 = v2[4];
    int v11 = sub_1001C08FC;
  }
  else
  {
    uint64_t v12 = v2[4];
    sub_10000A520(v2[12], &qword_1003F0A30);
    int v11 = sub_1001BF728;
    uint64_t v10 = v12;
  }
  return _swift_task_switch(v11, v10, 0);
}

uint64_t sub_1001BF728()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 264), *(void *)(v0 + 248));
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 496) + 1;
    if (v11 == *(void *)(v0 + 472)) {
      break;
    }
    uint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 488);
    int v13 = *(_DWORD *)(v0 + 648);
    int v14 = *(_DWORD *)(v0 + 644);
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v16 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 224);
    unint64_t v20 = *(void *)(v0 + 464)
        + ((*(unsigned __int8 *)(v0 + 640) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 640))
        + *(void *)(v0 + 480) * v11;
    unint64_t v21 = (*(void *)(v0 + 312) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    *(void *)(v0 + 496) = v11;
    *(void *)(v0 + 504) = v21;
    v12(v15, v20, v16);
    Fence.variant.getter();
    uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t))(v19 + 88);
    unsigned int v23 = v22(v17, v18);
    if (v23 == v14 || v23 == v13)
    {
      uint64_t v7 = *(void *)(v0 + 336);
      uint64_t v8 = *(void *)(v0 + 344);
      uint64_t v9 = *(void *)(v0 + 296);
      (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 216));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, 1, 1, v7);
      goto LABEL_3;
    }
    if (v23 != *(_DWORD *)(v0 + 652)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v91 = v22;
    unsigned int v96 = *(_DWORD *)(v0 + 656);
    uint64_t v95 = *(void *)(v0 + 352);
    uint64_t v98 = *(void *)(v0 + 344);
    uint64_t v100 = *(void *)(v0 + 336);
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v101 = *(void *)(v0 + 288);
    uint64_t v102 = *(void *)(v0 + 296);
    uint64_t v26 = *(void *)(v0 + 248);
    uint64_t v27 = *(void **)(v0 + 256);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v92 = *(void *)(v0 + 272);
    uint64_t v93 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v99 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v94 = *(void *)(v0 + 168);
    uint64_t v90 = *(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 96);
    v90(v28, *(void *)(v0 + 216));
    uint64_t v32 = (void (*)(uint64_t, uint64_t, uint64_t))v27[4];
    v32(v25, v28, v26);
    uint64_t v89 = v32;
    v32(v101, v25, v26);
    uint64_t v88 = (void (*)(uint64_t, uint64_t, uint64_t))v27[2];
    v88(v92, v101, v26);
    Fence.Schedule.Matcher.init(schedule:)();
    Fence.updatedAt.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v30, v96, v94);
    Fence.Schedule.Matcher.nextStartDate(from:direction:)();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v94);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    *(void *)(v0 + 512) = v33;
    *(void *)(v0 + 520) = (v98 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v33(v95, v100);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v34(v93, v99);
    uint64_t v35 = (void (*)(void, void))v27[1];
    *(void *)(v0 + 528) = v35;
    *(void *)(v0 + 536) = (unint64_t)(v27 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v97 = v35;
    v35(v101, v26);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v102, 0, 1, v100);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v102, 1, v100) == 1)
    {
LABEL_3:
      uint64_t v10 = *(void *)(v0 + 296);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 304));
      sub_10000A520(v10, (uint64_t *)&unk_1003EE800);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 344) + 32))(*(void *)(v0 + 360), *(void *)(v0 + 296), *(void *)(v0 + 336));
      if ((static Date.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v66 = *(void *)(v0 + 328);
        uint64_t v67 = *(void *)(v0 + 304);
        uint64_t v68 = *(void *)(v0 + 312);
        v33(*(void *)(v0 + 360), *(void *)(v0 + 336));
        goto LABEL_19;
      }
      uint64_t v103 = v34;
      uint64_t v36 = v33;
      uint64_t v37 = *(unsigned int *)(v0 + 660);
      uint64_t v39 = *(void *)(v0 + 152);
      uint64_t v38 = *(void *)(v0 + 160);
      uint64_t v40 = *(void *)(v0 + 136);
      uint64_t v41 = *(void *)(v0 + 144);
      Fence.acceptanceStatus.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 104))(v39, v37, v40);
      char v42 = static Fence.AcceptanceStatus.== infix(_:_:)();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v43(v39, v40);
      v43(v38, v40);
      if ((v42 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v44 = *(unsigned int *)(v0 + 664);
      uint64_t v46 = *(void *)(v0 + 120);
      uint64_t v45 = *(void *)(v0 + 128);
      uint64_t v47 = *(void *)(v0 + 104);
      uint64_t v48 = *(void *)(v0 + 112);
      Fence.findee.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 104))(v46, v44, v47);
      char v49 = static Fence.Participant.== infix(_:_:)();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v50(v46, v47);
      v50(v45, v47);
      if (v49)
      {
        int v51 = *(_DWORD *)(v0 + 652);
        uint64_t v52 = *(void *)(v0 + 232);
        uint64_t v53 = *(void *)(v0 + 216);
        Fence.variant.getter();
        if (v91(v52, v53) == v51)
        {
          uint64_t v55 = *(void *)(v0 + 264);
          uint64_t v54 = *(void *)(v0 + 272);
          uint64_t v56 = *(void *)(v0 + 248);
          uint64_t v57 = *(void *)(v0 + 232);
          uint64_t v58 = *(void *)(v0 + 208);
          uint64_t v59 = *(void *)(v0 + 192);
          v90(v57, *(void *)(v0 + 216));
          v89(v55, v57, v56);
          v88(v54, v55, v56);
          Fence.Schedule.Matcher.init(schedule:)();
          char v60 = Fence.Schedule.Matcher.doesMatchSchedule(_:)();
          v103(v58, v59);
          if (v60)
          {
            uint64_t v76 = *(unsigned int *)(v0 + 668);
            uint64_t v77 = *(void *)(v0 + 368);
            uint64_t v78 = *(void *)(v0 + 336);
            uint64_t v79 = *(void *)(v0 + 344);
            uint64_t v81 = *(void *)(v0 + 48);
            uint64_t v80 = *(void *)(v0 + 56);
            uint64_t v82 = *(void *)(v0 + 40);
            Fence.id.getter();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v80, v77, v78);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 104))(v80, v76, v82);
            uint64_t v83 = (void *)swift_task_alloc();
            *(void *)(v0 + 544) = v83;
            *uint64_t v83 = v0;
            v83[1] = sub_1001BF518;
            uint64_t v85 = *(void *)(v0 + 88);
            uint64_t v84 = *(void *)(v0 + 96);
            uint64_t v86 = *(void *)(v0 + 56);
            return sub_10019A3A8(v84, v85, v86);
          }
          uint64_t v61 = *(void *)(v0 + 360);
          uint64_t v63 = *(void *)(v0 + 328);
          uint64_t v62 = *(void *)(v0 + 336);
          uint64_t v64 = *(void *)(v0 + 304);
          uint64_t v65 = *(void *)(v0 + 312);
          v97(*(void *)(v0 + 264), *(void *)(v0 + 248));
          v36(v61, v62);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
        }
        else
        {
          uint64_t v69 = *(void *)(v0 + 328);
          uint64_t v70 = *(void *)(v0 + 304);
          uint64_t v71 = *(void *)(v0 + 312);
          uint64_t v73 = *(void *)(v0 + 224);
          uint64_t v72 = *(void *)(v0 + 232);
          uint64_t v74 = *(void *)(v0 + 216);
          v36(*(void *)(v0 + 360), *(void *)(v0 + 336));
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
        }
      }
      else
      {
LABEL_18:
        uint64_t v66 = *(void *)(v0 + 328);
        uint64_t v67 = *(void *)(v0 + 304);
        uint64_t v68 = *(void *)(v0 + 312);
        v36(*(void *)(v0 + 360), *(void *)(v0 + 336));
LABEL_19:
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v75 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v75;
  *uint64_t v75 = v0;
  v75[1] = sub_1001BFFA0;
  return daemon.getter();
}

uint64_t sub_1001BFFA0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[73] = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[74] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001C012C;
  uint64_t v5 = v2[54];
  uint64_t v6 = v2[53];
  uint64_t v7 = v2[52];
  uint64_t v8 = v2[51];
  return ActorServiceDaemon.getService<A>()(v8, v7, v6, v5);
}

uint64_t sub_1001C012C(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 600) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[4];
    return _swift_task_switch(sub_1001C0744, v6, 0);
  }
  else
  {
    swift_release();
    v4[76] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[77] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001C02B8;
    return sub_10012F108();
  }
}

uint64_t sub_1001C02B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 624) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C03D0, v2, 0);
}

uint64_t sub_1001C03D0()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C0470;
  uint64_t v2 = *(void *)(v0 + 624);
  return sub_1001B33A8(v2);
}

uint64_t sub_1001C0470()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001C059C, v1, 0);
}

uint64_t sub_1001C059C()
{
  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001C0744()
{
  swift_release();
  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001C08FC()
{
  uint64_t v133 = v0;
  (*(void (**)(void, void, void))(v0 + 488))(*(void *)(v0 + 320), *(void *)(v0 + 328), *(void *)(v0 + 304));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v113 = *(void *)(v0 + 336);
    uint64_t v114 = *(void *)(v0 + 360);
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v119 = *(void *)(v0 + 328);
    uint64_t v126 = *(void *)(v0 + 304);
    uint64_t v129 = *(void *)(v0 + 312);
    uint64_t v109 = *(void *)(v0 + 248);
    uint64_t v111 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v105 = (void *)swift_slowAlloc();
    uint64_t v132 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    Fence.id.getter();
    sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    v104(v4, v5);
    *(void *)(v0 + 16) = sub_100037004(v7, v9, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
    v107(v3, v126);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v105 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to make fence %{public}s pending: %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v116(v111, v109);
    v122(v114, v113);
    v107(v119, v126);
  }
  else
  {
    uint64_t v120 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v124 = *(void *)(v0 + 328);
    int v13 = v1;
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v15 = *(void *)(v0 + 320);
    uint64_t v16 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 248);

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v15, v16);
    swift_errorRelease();
    v120(v17, v18);
    v127(v11, v12);
    v19(v124, v16);
  }
  while (1)
  {
    uint64_t v24 = *(void *)(v0 + 496) + 1;
    if (v24 == *(void *)(v0 + 472)) {
      break;
    }
    uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 488);
    int v26 = *(_DWORD *)(v0 + 648);
    int v27 = *(_DWORD *)(v0 + 644);
    uint64_t v28 = *(void *)(v0 + 328);
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v31 = *(void *)(v0 + 216);
    uint64_t v32 = *(void *)(v0 + 224);
    unint64_t v33 = *(void *)(v0 + 464)
        + ((*(unsigned __int8 *)(v0 + 640) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 640))
        + *(void *)(v0 + 480) * v24;
    unint64_t v34 = (*(void *)(v0 + 312) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    *(void *)(v0 + 496) = v24;
    *(void *)(v0 + 504) = v34;
    v25(v28, v33, v29);
    Fence.variant.getter();
    uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t))(v32 + 88);
    unsigned int v36 = v35(v30, v31);
    if (v36 == v27 || v36 == v26)
    {
      uint64_t v20 = *(void *)(v0 + 336);
      uint64_t v21 = *(void *)(v0 + 344);
      uint64_t v22 = *(void *)(v0 + 296);
      (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 216));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v22, 1, 1, v20);
      goto LABEL_5;
    }
    if (v36 != *(_DWORD *)(v0 + 652)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v106 = v35;
    unsigned int v117 = *(_DWORD *)(v0 + 656);
    uint64_t v115 = *(void *)(v0 + 352);
    uint64_t v121 = *(void *)(v0 + 344);
    uint64_t v125 = *(void *)(v0 + 336);
    uint64_t v38 = *(void *)(v0 + 280);
    uint64_t v128 = *(void *)(v0 + 288);
    uint64_t v130 = *(void *)(v0 + 296);
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v40 = *(void **)(v0 + 256);
    uint64_t v41 = *(void *)(v0 + 240);
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v108 = *(void *)(v0 + 272);
    uint64_t v110 = *(void *)(v0 + 208);
    uint64_t v43 = *(void *)(v0 + 184);
    uint64_t v123 = *(void *)(v0 + 192);
    uint64_t v44 = *(void *)(v0 + 176);
    uint64_t v112 = *(void *)(v0 + 168);
    uint64_t v103 = *(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 96);
    v103(v41, *(void *)(v0 + 216));
    uint64_t v45 = (void (*)(uint64_t, uint64_t, uint64_t))v40[4];
    v45(v38, v41, v39);
    uint64_t v102 = v45;
    v45(v128, v38, v39);
    uint64_t v101 = (void (*)(uint64_t, uint64_t, uint64_t))v40[2];
    v101(v108, v128, v39);
    Fence.Schedule.Matcher.init(schedule:)();
    Fence.updatedAt.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v43, v117, v112);
    Fence.Schedule.Matcher.nextStartDate(from:direction:)();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v112);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    *(void *)(v0 + 512) = v46;
    *(void *)(v0 + 520) = (v121 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v46(v115, v125);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v47(v110, v123);
    uint64_t v48 = (void (*)(void, void))v40[1];
    *(void *)(v0 + 528) = v48;
    *(void *)(v0 + 536) = (unint64_t)(v40 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v118 = v48;
    v48(v128, v39);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v121 + 56))(v130, 0, 1, v125);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v130, 1, v125) == 1)
    {
LABEL_5:
      uint64_t v23 = *(void *)(v0 + 296);
      (*(void (**)(void, void))(*(void *)(v0 + 312) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 304));
      sub_10000A520(v23, (uint64_t *)&unk_1003EE800);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 344) + 32))(*(void *)(v0 + 360), *(void *)(v0 + 296), *(void *)(v0 + 336));
      if ((static Date.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v79 = *(void *)(v0 + 328);
        uint64_t v80 = *(void *)(v0 + 304);
        uint64_t v81 = *(void *)(v0 + 312);
        v46(*(void *)(v0 + 360), *(void *)(v0 + 336));
        goto LABEL_21;
      }
      uint64_t v131 = v47;
      char v49 = v46;
      uint64_t v50 = *(unsigned int *)(v0 + 660);
      uint64_t v52 = *(void *)(v0 + 152);
      uint64_t v51 = *(void *)(v0 + 160);
      uint64_t v53 = *(void *)(v0 + 136);
      uint64_t v54 = *(void *)(v0 + 144);
      Fence.acceptanceStatus.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 104))(v52, v50, v53);
      char v55 = static Fence.AcceptanceStatus.== infix(_:_:)();
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v56(v52, v53);
      v56(v51, v53);
      if ((v55 & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v57 = *(unsigned int *)(v0 + 664);
      uint64_t v59 = *(void *)(v0 + 120);
      uint64_t v58 = *(void *)(v0 + 128);
      uint64_t v60 = *(void *)(v0 + 104);
      uint64_t v61 = *(void *)(v0 + 112);
      Fence.findee.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 104))(v59, v57, v60);
      char v62 = static Fence.Participant.== infix(_:_:)();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v63(v59, v60);
      v63(v58, v60);
      if (v62)
      {
        int v64 = *(_DWORD *)(v0 + 652);
        uint64_t v65 = *(void *)(v0 + 232);
        uint64_t v66 = *(void *)(v0 + 216);
        Fence.variant.getter();
        if (v106(v65, v66) == v64)
        {
          uint64_t v68 = *(void *)(v0 + 264);
          uint64_t v67 = *(void *)(v0 + 272);
          uint64_t v69 = *(void *)(v0 + 248);
          uint64_t v70 = *(void *)(v0 + 232);
          uint64_t v71 = *(void *)(v0 + 208);
          uint64_t v72 = *(void *)(v0 + 192);
          v103(v70, *(void *)(v0 + 216));
          v102(v68, v70, v69);
          v101(v67, v68, v69);
          Fence.Schedule.Matcher.init(schedule:)();
          char v73 = Fence.Schedule.Matcher.doesMatchSchedule(_:)();
          v131(v71, v72);
          if (v73)
          {
            uint64_t v89 = *(unsigned int *)(v0 + 668);
            uint64_t v90 = *(void *)(v0 + 368);
            uint64_t v91 = *(void *)(v0 + 336);
            uint64_t v92 = *(void *)(v0 + 344);
            uint64_t v94 = *(void *)(v0 + 48);
            uint64_t v93 = *(void *)(v0 + 56);
            uint64_t v95 = *(void *)(v0 + 40);
            Fence.id.getter();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v93, v90, v91);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 104))(v93, v89, v95);
            unsigned int v96 = (void *)swift_task_alloc();
            *(void *)(v0 + 544) = v96;
            *unsigned int v96 = v0;
            v96[1] = sub_1001BF518;
            uint64_t v98 = *(void *)(v0 + 88);
            uint64_t v97 = *(void *)(v0 + 96);
            uint64_t v99 = *(void *)(v0 + 56);
            return sub_10019A3A8(v97, v98, v99);
          }
          uint64_t v74 = *(void *)(v0 + 360);
          uint64_t v76 = *(void *)(v0 + 328);
          uint64_t v75 = *(void *)(v0 + 336);
          uint64_t v77 = *(void *)(v0 + 304);
          uint64_t v78 = *(void *)(v0 + 312);
          v118(*(void *)(v0 + 264), *(void *)(v0 + 248));
          v49(v74, v75);
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
        }
        else
        {
          uint64_t v82 = *(void *)(v0 + 328);
          uint64_t v83 = *(void *)(v0 + 304);
          uint64_t v84 = *(void *)(v0 + 312);
          uint64_t v86 = *(void *)(v0 + 224);
          uint64_t v85 = *(void *)(v0 + 232);
          uint64_t v87 = *(void *)(v0 + 216);
          v49(*(void *)(v0 + 360), *(void *)(v0 + 336));
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v87);
        }
      }
      else
      {
LABEL_20:
        uint64_t v79 = *(void *)(v0 + 328);
        uint64_t v80 = *(void *)(v0 + 304);
        uint64_t v81 = *(void *)(v0 + 312);
        v49(*(void *)(v0 + 360), *(void *)(v0 + 336));
LABEL_21:
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v80);
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v88 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v88;
  *uint64_t v88 = v0;
  v88[1] = sub_1001BFFA0;
  return daemon.getter();
}

uint64_t sub_1001C14A0(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_1001C14C0, 0, 0);
}

uint64_t sub_1001C14C0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_1001B5BB0;
    return sub_1001C15AC();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1001C15AC()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Fence.TriggerPosition();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Fence.TriggerID();
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  v1[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Fence.ID();
  v1[13] = v4;
  v1[14] = *(void *)(v4 - 8);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  sub_100044014(&qword_1003F0D58);
  v1[18] = swift_task_alloc();
  sub_100044014(&qword_1003F0D60);
  v1[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DateInterval();
  v1[20] = v5;
  v1[21] = *(void *)(v5 - 8);
  v1[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[23] = v6;
  v1[24] = *(void *)(v6 - 8);
  v1[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Fence.Schedule.Matcher();
  v1[26] = v7;
  v1[27] = *(void *)(v7 - 8);
  v1[28] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v1[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.Participant();
  v1[30] = v8;
  v1[31] = *(void *)(v8 - 8);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.AcceptanceStatus();
  v1[34] = v9;
  v1[35] = *(void *)(v9 - 8);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Fence.Variant();
  v1[38] = v10;
  v1[39] = *(void *)(v10 - 8);
  v1[40] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.Schedule();
  v1[41] = v11;
  v1[42] = *(void *)(v11 - 8);
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Fence();
  v1[45] = v12;
  v1[46] = *(void *)(v12 - 8);
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Date();
  v1[51] = v13;
  v1[52] = *(void *)(v13 - 8);
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  return _swift_task_switch(sub_1001C1BA4, v0, 0);
}

uint64_t sub_1001C1BA4()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  v0[59] = sub_100044058(v0[23], (uint64_t)qword_10040B770);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Schedule Grace Timer fired", v3, 2u);
    swift_slowDealloc();
  }

  static Date.now.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[60] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001C1CFC;
  return daemon.getter();
}

uint64_t sub_1001C1CFC(uint64_t a1)
{
  os_log_type_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[61] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[62] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[63] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1001CAAE0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[64] = v6;
  uint64_t v7 = sub_1001CAAE0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1001C1EDC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001C1EDC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 520) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[6];
    return _swift_task_switch(sub_1001C2E34, v6, 0);
  }
  else
  {
    swift_release();
    v4[66] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[67] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001C2068;
    return sub_10012F108();
  }
}

uint64_t sub_1001C2068(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 544) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C2180, v2, 0);
}

uint64_t sub_1001C2180()
{
  uint64_t v127 = v0;
  uint64_t v1 = *(void *)(v0 + 544);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 552) = v2;
  if (!v2)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 408));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v102 = *(uint64_t (**)(void))(v0 + 8);
    return v102();
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 368);
  *(_DWORD *)(v0 + 712) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 716) = enum case for Fence.Variant.scheduled(_:);
  *(_DWORD *)(v0 + 720) = enum case for Fence.AcceptanceStatus.accepted(_:);
  *(_DWORD *)(v0 + 724) = enum case for Fence.Participant.me(_:);
  *(_DWORD *)(v0 + 728) = enum case for Fence.TriggerPosition.undetermined(_:);
  *(void *)(v0 + 560) = *(void *)(v4 + 72);
  *(void *)(v0 + 568) = *(void *)(v4 + 16);
  while (1)
  {
    *(void *)(v0 + 576) = v3;
    uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 568);
    int v6 = *(_DWORD *)(v0 + 716);
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 304);
    unint64_t v12 = *(void *)(v0 + 544)
        + ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))
        + *(void *)(v0 + 560) * v3;
    *(void *)(v0 + 584) = (*(void *)(v0 + 368) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v5(v7, v12, v8);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == v6) {
      break;
    }
    uint64_t v33 = *(void *)(v0 + 400);
    uint64_t v34 = *(void *)(v0 + 360);
    uint64_t v35 = *(void *)(v0 + 368);
    uint64_t v37 = *(void *)(v0 + 312);
    uint64_t v36 = *(void *)(v0 + 320);
    uint64_t v38 = *(void *)(v0 + 304);
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_14:
    uint64_t v3 = *(void *)(v0 + 576) + 1;
    if (v3 == *(void *)(v0 + 552)) {
      goto LABEL_23;
    }
  }
  unsigned int v122 = *(_DWORD *)(v0 + 720);
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 280);
  uint64_t v19 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 312) + 96))(v16, *(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v16, v14);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v19, v122, v20);
  char v21 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v22(v19, v20);
  v22(v17, v20);
  if ((v21 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v23 = *(unsigned int *)(v0 + 724);
  uint64_t v25 = *(void *)(v0 + 256);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 248);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104))(v25, v23, v26);
  char v28 = static Fence.Participant.== infix(_:_:)();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v29(v25, v26);
  v29(v24, v26);
  if ((v28 & 1) == 0)
  {
LABEL_12:
    uint64_t v36 = *(void *)(v0 + 400);
    uint64_t v38 = *(void *)(v0 + 360);
    uint64_t v37 = *(void *)(v0 + 368);
    uint64_t v33 = *(void *)(v0 + 352);
    uint64_t v34 = *(void *)(v0 + 328);
    uint64_t v35 = *(void *)(v0 + 336);
    goto LABEL_13;
  }
  uint64_t v30 = *(void *)(v0 + 408);
  uint64_t v31 = *(void *)(v0 + 416);
  uint64_t v32 = *(void *)(v0 + 232);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) != 1)
  {
    uint64_t v39 = *(void *)(v0 + 456);
    uint64_t v40 = *(void *)(v0 + 408);
    uint64_t v41 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 32))(v39, *(void *)(v0 + 232), v40);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    if (v42) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003EE800);
LABEL_10:
  uint64_t v43 = *(void *)(v0 + 464);
  uint64_t v44 = *(void *)(v0 + 448);
  uint64_t v113 = *(void *)(v0 + 472);
  uint64_t v116 = *(void *)(v0 + 440);
  uint64_t v119 = *(void *)(v0 + 432);
  uint64_t v45 = *(void *)(v0 + 416);
  uint64_t v123 = *(void *)(v0 + 424);
  uint64_t v46 = *(void *)(v0 + 408);
  uint64_t v48 = *(void *)(v0 + 216);
  uint64_t v47 = *(void *)(v0 + 224);
  uint64_t v49 = *(void *)(v0 + 208);
  uint64_t v50 = *(void *)(v0 + 192);
  uint64_t v110 = *(void *)(v0 + 200);
  uint64_t v111 = *(void *)(v0 + 184);
  uint64_t v107 = *(void (**)(void, void, void))(*(void *)(v0 + 336) + 16);
  v107(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousEndDate(from:)();
  uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v106(v47, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v110, v113, v111);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
  *(void *)(v0 + 592) = v51;
  *(void *)(v0 + 600) = (v45 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v51(v116, v44, v46);
  v51(v119, v43, v46);
  v51(v123, v44, v46);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v56 = *(void *)(v0 + 432);
  uint64_t v55 = *(void *)(v0 + 440);
  uint64_t v57 = *(void *)(v0 + 424);
  uint64_t v58 = *(void *)(v0 + 408);
  uint64_t v59 = *(void *)(v0 + 200);
  uint64_t v60 = *(void *)(v0 + 184);
  uint64_t v124 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8);
  uint64_t v61 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 416) + 8);
  if (v54)
  {
    uint64_t v114 = v52;
    uint64_t v62 = swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136446466;
    uint64_t v63 = Date.localISO8601.getter();
    uint64_t v117 = v60;
    *(void *)(v62 + 4) = sub_100037004(v63, v64, v126);
    swift_bridgeObjectRelease();
    os_log_type_t v65 = v53;
    uint64_t v66 = *v61;
    (*v61)(v55, v58);
    *(_WORD *)(v62 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v62 + 14) = v67;
    v66(v56, v58);
    v66(v57, v58);
    _os_log_impl((void *)&_mh_execute_header, v114, v65, "scheduleGraceTimerFired: endDate: %{public}s timeDelta: %{public}f", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v124)(v59, v117);
  }
  else
  {
    uint64_t v66 = *v61;
    (*v61)(v55, v58);
    v66(v56, v58);
    v66(v57, v58);

    (*v124)(v59, v60);
  }
  *(void *)(v0 + 608) = v66;
  Date.timeIntervalSince(_:)();
  if (v68 > 300.0)
  {
    uint64_t v69 = *(void *)(v0 + 400);
    uint64_t v70 = *(void *)(v0 + 360);
    uint64_t v71 = *(void *)(v0 + 368);
    uint64_t v72 = *(void *)(v0 + 352);
    uint64_t v73 = *(void *)(v0 + 328);
    uint64_t v74 = *(void *)(v0 + 336);
    v66(*(void *)(v0 + 448), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
    goto LABEL_14;
  }
  uint64_t v75 = *(void *)(v0 + 224);
  uint64_t v76 = *(void *)(v0 + 208);
  uint64_t v77 = *(void *)(v0 + 160);
  uint64_t v78 = *(void *)(v0 + 168);
  uint64_t v79 = *(void *)(v0 + 152);
  v107(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v106(v75, v76);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v79, 1, v77) == 1)
  {
    uint64_t v125 = v66;
    uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v81 = *(void *)(v0 + 400);
    uint64_t v82 = *(void *)(v0 + 384);
    uint64_t v83 = *(void *)(v0 + 360);
    sub_10000A520(*(void *)(v0 + 152), &qword_1003F0D60);
    v80(v82, v81, v83);
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.error.getter();
    BOOL v85 = os_log_type_enabled(v84, v118);
    uint64_t v86 = *(void *)(v0 + 448);
    uint64_t v87 = *(void *)(v0 + 400);
    uint64_t v88 = *(void *)(v0 + 384);
    uint64_t v89 = *(void *)(v0 + 360);
    uint64_t v90 = *(void *)(v0 + 368);
    uint64_t v91 = *(void *)(v0 + 352);
    uint64_t v92 = *(void *)(v0 + 336);
    uint64_t v120 = *(void *)(v0 + 408);
    uint64_t v121 = *(void *)(v0 + 328);
    if (v85)
    {
      os_log_t log = v84;
      uint64_t v93 = *(void *)(v0 + 128);
      uint64_t v112 = *(void *)(v0 + 352);
      uint64_t v115 = *(void *)(v0 + 400);
      uint64_t v94 = *(void *)(v0 + 104);
      uint64_t v95 = *(void *)(v0 + 112);
      uint64_t v109 = *(void *)(v0 + 448);
      unsigned int v96 = (uint8_t *)swift_slowAlloc();
      v126[0] = swift_slowAlloc();
      *(_DWORD *)unsigned int v96 = 136446210;
      uint64_t v105 = v88;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v99 = v98;
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v93, v94);
      *(void *)(v0 + 16) = sub_100037004(v97, v99, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v100(v105, v89);
      _os_log_impl((void *)&_mh_execute_header, log, v118, "No valid interval for endDate, fence id: %{public}s", v96, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v125(v109, v120);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v112, v121);
      v100(v115, v89);
    }
    else
    {

      uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
      v101(v88, v89);
      v125(v86, v120);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v121);
      v101(v87, v89);
    }
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_1001C3040;
  return daemon.getter();
}

uint64_t sub_1001C2E34()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[52];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001C3040(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 624) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 632) = v5;
  uint64_t v6 = type metadata accessor for LocalStorageService();
  uint64_t v7 = sub_1001CAAE0(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001C31F4;
  uint64_t v8 = *(void *)(v2 + 512);
  uint64_t v9 = *(void *)(v2 + 504);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001C31F4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[80] = a1;
  v3[81] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = sub_1001C54C0;
  }
  else
  {
    uint64_t v4 = v3[6];
    swift_release();
    uint64_t v5 = sub_1001C3350;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001C3350()
{
  Fence.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[82] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C33F8;
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  return sub_1002207C4(v3, v4, v2);
}

uint64_t sub_1001C33F8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[17];
  uint64_t v4 = v2[13];
  uint64_t v5 = v2[14];
  if (v0)
  {
    uint64_t v6 = v2[6];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1001C573C;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v9 = v2[6];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[84] = v10;
    v2[85] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v10(v3, v4);
    uint64_t v7 = sub_1001C3568;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_1001C3568()
{
  uint64_t v162 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = type metadata accessor for FenceTriggerRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 568))(*(void *)(v0 + 392), *(void *)(v0 + 400), *(void *)(v0 + 360));
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v136 = *(void *)(v0 + 392);
      uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
      uint64_t v5 = *(void *)(v0 + 368);
      uint64_t v154 = *(void *)(v0 + 360);
      uint64_t v6 = *(void *)(v0 + 128);
      uint64_t v7 = *(void *)(v0 + 104);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v161[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v11 = v10;
      v138(v6, v7);
      *(void *)(v0 + 40) = sub_100037004(v9, v11, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v12(v136, v154);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Schedule Grace Timer about to trigger fence: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8);
      v12(*(void *)(v0 + 392), *(void *)(v0 + 360));
    }

    *(void *)(v0 + 688) = v12;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
    unsigned int v156 = *(_DWORD *)(v0 + 728);
    uint64_t v24 = *(void *)(v0 + 448);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 72);
    uint64_t v28 = *(void *)(v0 + 56);
    Fence.id.getter();
    Fence.TriggerID.init()();
    v23(v27, v24, v25);
    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v27, v156, v28);
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 696) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1001C4568;
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v31 = *(void *)(v0 + 96);
    uint64_t v32 = *(void *)(v0 + 72);
    return sub_1001962F8(v30, v31, v32);
  }
  uint64_t v13 = *(void *)(v0 + 408);
  uint64_t v155 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 368);
  uint64_t v149 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
  uint64_t v152 = *(void *)(v0 + 360);
  uint64_t v141 = *(void *)(v0 + 448);
  uint64_t v145 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 160);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  v149(v141, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v145, v16);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v155, v152);
  sub_10000A520(v1, &qword_1003F0D58);
  uint64_t v20 = *(void *)(v0 + 576) + 1;
  if (v20 == *(void *)(v0 + 552))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 408));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  while (1)
  {
    *(void *)(v0 + 576) = v20;
    uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 568);
    int v34 = *(_DWORD *)(v0 + 716);
    uint64_t v35 = *(void *)(v0 + 400);
    uint64_t v36 = *(void *)(v0 + 360);
    uint64_t v38 = *(void *)(v0 + 312);
    uint64_t v37 = *(void *)(v0 + 320);
    uint64_t v39 = *(void *)(v0 + 304);
    unint64_t v40 = *(void *)(v0 + 544)
        + ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))
        + *(void *)(v0 + 560) * v20;
    *(void *)(v0 + 584) = (*(void *)(v0 + 368) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v33(v35, v40, v36);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v38 + 88))(v37, v39) == v34) {
      break;
    }
    uint64_t v61 = *(void *)(v0 + 400);
    uint64_t v62 = *(void *)(v0 + 360);
    uint64_t v63 = *(void *)(v0 + 368);
    uint64_t v65 = *(void *)(v0 + 312);
    uint64_t v64 = *(void *)(v0 + 320);
    uint64_t v66 = *(void *)(v0 + 304);
LABEL_22:
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
LABEL_23:
    uint64_t v20 = *(void *)(v0 + 576) + 1;
    if (v20 == *(void *)(v0 + 552)) {
      goto LABEL_5;
    }
  }
  unsigned int v157 = *(_DWORD *)(v0 + 720);
  uint64_t v41 = *(void *)(v0 + 352);
  uint64_t v42 = *(void *)(v0 + 328);
  uint64_t v43 = *(void *)(v0 + 336);
  uint64_t v44 = *(void *)(v0 + 320);
  uint64_t v45 = *(void *)(v0 + 296);
  uint64_t v46 = *(void *)(v0 + 280);
  uint64_t v47 = *(void *)(v0 + 288);
  uint64_t v48 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 312) + 96))(v44, *(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v41, v44, v42);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v47, v157, v48);
  char v49 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v50(v47, v48);
  v50(v45, v48);
  if ((v49 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v51 = *(unsigned int *)(v0 + 724);
  uint64_t v53 = *(void *)(v0 + 256);
  uint64_t v52 = *(void *)(v0 + 264);
  uint64_t v54 = *(void *)(v0 + 240);
  uint64_t v55 = *(void *)(v0 + 248);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 104))(v53, v51, v54);
  char v56 = static Fence.Participant.== infix(_:_:)();
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v57(v53, v54);
  v57(v52, v54);
  if ((v56 & 1) == 0)
  {
LABEL_21:
    uint64_t v64 = *(void *)(v0 + 400);
    uint64_t v66 = *(void *)(v0 + 360);
    uint64_t v65 = *(void *)(v0 + 368);
    uint64_t v61 = *(void *)(v0 + 352);
    uint64_t v62 = *(void *)(v0 + 328);
    uint64_t v63 = *(void *)(v0 + 336);
    goto LABEL_22;
  }
  uint64_t v58 = *(void *)(v0 + 408);
  uint64_t v59 = *(void *)(v0 + 416);
  uint64_t v60 = *(void *)(v0 + 232);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58) != 1)
  {
    uint64_t v67 = *(void *)(v0 + 456);
    uint64_t v68 = *(void *)(v0 + 408);
    uint64_t v69 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v69 + 32))(v67, *(void *)(v0 + 232), v68);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
    if (v70) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003EE800);
LABEL_19:
  uint64_t v71 = *(void *)(v0 + 464);
  uint64_t v72 = *(void *)(v0 + 448);
  uint64_t v142 = *(void *)(v0 + 472);
  uint64_t v146 = *(void *)(v0 + 440);
  uint64_t v150 = *(void *)(v0 + 432);
  uint64_t v73 = *(void *)(v0 + 416);
  uint64_t v158 = *(void *)(v0 + 424);
  uint64_t v74 = *(void *)(v0 + 408);
  uint64_t v76 = *(void *)(v0 + 216);
  uint64_t v75 = *(void *)(v0 + 224);
  uint64_t v77 = *(void *)(v0 + 208);
  uint64_t v78 = *(void *)(v0 + 192);
  uint64_t v137 = *(void *)(v0 + 200);
  uint64_t v139 = *(void *)(v0 + 184);
  uint64_t v133 = *(void (**)(void, void, void))(*(void *)(v0 + 336) + 16);
  v133(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousEndDate(from:)();
  uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
  v132(v75, v77);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v137, v142, v139);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  *(void *)(v0 + 592) = v79;
  *(void *)(v0 + 600) = (v73 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v79(v146, v72, v74);
  v79(v150, v71, v74);
  v79(v158, v72, v74);
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.default.getter();
  BOOL v82 = os_log_type_enabled(v80, v81);
  uint64_t v84 = *(void *)(v0 + 432);
  uint64_t v83 = *(void *)(v0 + 440);
  uint64_t v85 = *(void *)(v0 + 424);
  uint64_t v86 = *(void *)(v0 + 408);
  uint64_t v87 = *(void *)(v0 + 200);
  uint64_t v88 = *(void *)(v0 + 184);
  uint64_t v159 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8);
  uint64_t v89 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 416) + 8);
  if (v82)
  {
    unsigned int v143 = v80;
    uint64_t v90 = swift_slowAlloc();
    v161[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v90 = 136446466;
    uint64_t v91 = Date.localISO8601.getter();
    uint64_t v147 = v88;
    *(void *)(v90 + 4) = sub_100037004(v91, v92, v161);
    swift_bridgeObjectRelease();
    os_log_type_t v93 = v81;
    uint64_t v94 = *v89;
    (*v89)(v83, v86);
    *(_WORD *)(v90 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v90 + 14) = v95;
    v94(v84, v86);
    v94(v85, v86);
    _os_log_impl((void *)&_mh_execute_header, v143, v93, "scheduleGraceTimerFired: endDate: %{public}s timeDelta: %{public}f", (uint8_t *)v90, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v159)(v87, v147);
  }
  else
  {
    uint64_t v94 = *v89;
    (*v89)(v83, v86);
    v94(v84, v86);
    v94(v85, v86);

    (*v159)(v87, v88);
  }
  *(void *)(v0 + 608) = v94;
  Date.timeIntervalSince(_:)();
  if (v96 > 300.0)
  {
    uint64_t v97 = *(void *)(v0 + 400);
    uint64_t v98 = *(void *)(v0 + 360);
    uint64_t v99 = *(void *)(v0 + 368);
    uint64_t v100 = *(void *)(v0 + 352);
    uint64_t v101 = *(void *)(v0 + 328);
    uint64_t v102 = *(void *)(v0 + 336);
    v94(*(void *)(v0 + 448), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v97, v98);
    goto LABEL_23;
  }
  uint64_t v103 = *(void *)(v0 + 224);
  uint64_t v104 = *(void *)(v0 + 208);
  uint64_t v105 = *(void *)(v0 + 160);
  uint64_t v106 = *(void *)(v0 + 168);
  uint64_t v107 = *(void *)(v0 + 152);
  v133(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v132(v103, v104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105) == 1)
  {
    os_log_type_t v160 = v94;
    uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v109 = *(void *)(v0 + 400);
    uint64_t v110 = *(void *)(v0 + 384);
    uint64_t v111 = *(void *)(v0 + 360);
    sub_10000A520(*(void *)(v0 + 152), &qword_1003F0D60);
    v108(v110, v109, v111);
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.error.getter();
    BOOL v113 = os_log_type_enabled(v112, v148);
    uint64_t v114 = *(void *)(v0 + 448);
    uint64_t v115 = *(void *)(v0 + 400);
    uint64_t v116 = *(void *)(v0 + 384);
    uint64_t v117 = *(void *)(v0 + 360);
    uint64_t v118 = *(void *)(v0 + 368);
    uint64_t v119 = *(void *)(v0 + 352);
    uint64_t v120 = *(void *)(v0 + 336);
    uint64_t v151 = *(void *)(v0 + 408);
    uint64_t v153 = *(void *)(v0 + 328);
    if (v113)
    {
      os_log_t log = v112;
      uint64_t v121 = *(void *)(v0 + 128);
      uint64_t v140 = *(void *)(v0 + 352);
      uint64_t v144 = *(void *)(v0 + 400);
      uint64_t v122 = *(void *)(v0 + 104);
      uint64_t v123 = *(void *)(v0 + 112);
      uint64_t v135 = *(void *)(v0 + 448);
      uint64_t v124 = (uint8_t *)swift_slowAlloc();
      v161[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v124 = 136446210;
      uint64_t v131 = v116;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v127 = v126;
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v121, v122);
      *(void *)(v0 + 16) = sub_100037004(v125, v127, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v128 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
      v128(v131, v117);
      _os_log_impl((void *)&_mh_execute_header, log, v148, "No valid interval for endDate, fence id: %{public}s", v124, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v160(v135, v151);
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v140, v153);
      v128(v144, v117);
    }
    else
    {

      uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
      v129(v116, v117);
      v160(v114, v151);
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v153);
      v129(v115, v117);
    }
    goto LABEL_23;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
  uint64_t v130 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v130;
  *uint64_t v130 = v0;
  v130[1] = sub_1001C3040;
  return daemon.getter();
}

uint64_t sub_1001C4568()
{
  uint64_t v2 = *v1;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*v1 + 672);
  uint64_t v13 = *(void *)(*v1 + 120);
  uint64_t v12 = *(void *)(*v1 + 104);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(*v1 + 72);
  uint64_t v7 = *(void *)(*v1 + 64);
  uint64_t v8 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v14(v13, v12);
  uint64_t v9 = *(void *)(v2 + 48);
  if (v0) {
    unint64_t v10 = sub_1001C59D0;
  }
  else {
    unint64_t v10 = sub_1001C47C4;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_1001C47C4()
{
  uint64_t v136 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v128 = *(void *)(v0 + 400);
  uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
  uint64_t v125 = *(void *)(v0 + 360);
  uint64_t v117 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v121(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v117, v3);
  v130(v128, v125);
  sub_10000A520(*(void *)(v0 + 144), &qword_1003F0D58);
  uint64_t v8 = *(void *)(v0 + 576) + 1;
  if (v8 == *(void *)(v0 + 552))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 408));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  while (1)
  {
    *(void *)(v0 + 576) = v8;
    unint64_t v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 568);
    int v12 = *(_DWORD *)(v0 + 716);
    uint64_t v13 = *(void *)(v0 + 400);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v16 = *(void *)(v0 + 312);
    uint64_t v15 = *(void *)(v0 + 320);
    uint64_t v17 = *(void *)(v0 + 304);
    unint64_t v18 = *(void *)(v0 + 544)
        + ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))
        + *(void *)(v0 + 560) * v8;
    *(void *)(v0 + 584) = (*(void *)(v0 + 368) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v13, v18, v14);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 88))(v15, v17) == v12) {
      break;
    }
    uint64_t v39 = *(void *)(v0 + 400);
    uint64_t v40 = *(void *)(v0 + 360);
    uint64_t v41 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 312);
    uint64_t v42 = *(void *)(v0 + 320);
    uint64_t v44 = *(void *)(v0 + 304);
LABEL_15:
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_16:
    uint64_t v8 = *(void *)(v0 + 576) + 1;
    if (v8 == *(void *)(v0 + 552)) {
      goto LABEL_2;
    }
  }
  unsigned int v131 = *(_DWORD *)(v0 + 720);
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v20 = *(void *)(v0 + 328);
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 280);
  uint64_t v25 = *(void *)(v0 + 288);
  uint64_t v26 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 312) + 96))(v22, *(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v19, v22, v20);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v25, v131, v26);
  char v27 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v28(v25, v26);
  v28(v23, v26);
  if ((v27 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v29 = *(unsigned int *)(v0 + 724);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v32 = *(void *)(v0 + 240);
  uint64_t v33 = *(void *)(v0 + 248);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v31, v29, v32);
  char v34 = static Fence.Participant.== infix(_:_:)();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v35(v31, v32);
  v35(v30, v32);
  if ((v34 & 1) == 0)
  {
LABEL_14:
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v44 = *(void *)(v0 + 360);
    uint64_t v43 = *(void *)(v0 + 368);
    uint64_t v39 = *(void *)(v0 + 352);
    uint64_t v40 = *(void *)(v0 + 328);
    uint64_t v41 = *(void *)(v0 + 336);
    goto LABEL_15;
  }
  uint64_t v36 = *(void *)(v0 + 408);
  uint64_t v37 = *(void *)(v0 + 416);
  uint64_t v38 = *(void *)(v0 + 232);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v36) != 1)
  {
    uint64_t v45 = *(void *)(v0 + 456);
    uint64_t v46 = *(void *)(v0 + 408);
    uint64_t v47 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v47 + 32))(v45, *(void *)(v0 + 232), v46);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    if (v48) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003EE800);
LABEL_12:
  uint64_t v49 = *(void *)(v0 + 464);
  uint64_t v50 = *(void *)(v0 + 448);
  uint64_t v118 = *(void *)(v0 + 472);
  uint64_t v122 = *(void *)(v0 + 440);
  uint64_t v126 = *(void *)(v0 + 432);
  uint64_t v51 = *(void *)(v0 + 416);
  uint64_t v132 = *(void *)(v0 + 424);
  uint64_t v52 = *(void *)(v0 + 408);
  uint64_t v54 = *(void *)(v0 + 216);
  uint64_t v53 = *(void *)(v0 + 224);
  uint64_t v55 = *(void *)(v0 + 208);
  uint64_t v56 = *(void *)(v0 + 192);
  uint64_t v114 = *(void *)(v0 + 200);
  uint64_t v115 = *(void *)(v0 + 184);
  uint64_t v111 = *(void (**)(void, void, void))(*(void *)(v0 + 336) + 16);
  v111(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousEndDate(from:)();
  uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v110(v53, v55);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v114, v118, v115);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  *(void *)(v0 + 592) = v57;
  *(void *)(v0 + 600) = (v51 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v57(v122, v50, v52);
  v57(v126, v49, v52);
  v57(v132, v50, v52);
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  BOOL v60 = os_log_type_enabled(v58, v59);
  uint64_t v62 = *(void *)(v0 + 432);
  uint64_t v61 = *(void *)(v0 + 440);
  uint64_t v63 = *(void *)(v0 + 424);
  uint64_t v64 = *(void *)(v0 + 408);
  uint64_t v65 = *(void *)(v0 + 200);
  uint64_t v66 = *(void *)(v0 + 184);
  uint64_t v133 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8);
  uint64_t v67 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 416) + 8);
  if (v60)
  {
    uint64_t v119 = v58;
    uint64_t v68 = swift_slowAlloc();
    v135[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136446466;
    uint64_t v69 = Date.localISO8601.getter();
    uint64_t v123 = v66;
    *(void *)(v68 + 4) = sub_100037004(v69, v70, v135);
    swift_bridgeObjectRelease();
    os_log_type_t v71 = v59;
    uint64_t v72 = *v67;
    (*v67)(v61, v64);
    *(_WORD *)(v68 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v68 + 14) = v73;
    v72(v62, v64);
    v72(v63, v64);
    _os_log_impl((void *)&_mh_execute_header, v119, v71, "scheduleGraceTimerFired: endDate: %{public}s timeDelta: %{public}f", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v133)(v65, v123);
  }
  else
  {
    uint64_t v72 = *v67;
    (*v67)(v61, v64);
    v72(v62, v64);
    v72(v63, v64);

    (*v133)(v65, v66);
  }
  *(void *)(v0 + 608) = v72;
  Date.timeIntervalSince(_:)();
  if (v74 > 300.0)
  {
    uint64_t v75 = *(void *)(v0 + 400);
    uint64_t v76 = *(void *)(v0 + 360);
    uint64_t v77 = *(void *)(v0 + 368);
    uint64_t v78 = *(void *)(v0 + 352);
    uint64_t v79 = *(void *)(v0 + 328);
    uint64_t v80 = *(void *)(v0 + 336);
    v72(*(void *)(v0 + 448), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
    goto LABEL_16;
  }
  uint64_t v81 = *(void *)(v0 + 224);
  uint64_t v82 = *(void *)(v0 + 208);
  uint64_t v83 = *(void *)(v0 + 160);
  uint64_t v84 = *(void *)(v0 + 168);
  uint64_t v85 = *(void *)(v0 + 152);
  v111(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v110(v81, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v83) == 1)
  {
    uint64_t v134 = v72;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v87 = *(void *)(v0 + 400);
    uint64_t v88 = *(void *)(v0 + 384);
    uint64_t v89 = *(void *)(v0 + 360);
    sub_10000A520(*(void *)(v0 + 152), &qword_1003F0D60);
    v86(v88, v87, v89);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    BOOL v91 = os_log_type_enabled(v90, v124);
    uint64_t v92 = *(void *)(v0 + 448);
    uint64_t v93 = *(void *)(v0 + 400);
    uint64_t v94 = *(void *)(v0 + 384);
    uint64_t v95 = *(void *)(v0 + 360);
    uint64_t v96 = *(void *)(v0 + 368);
    uint64_t v97 = *(void *)(v0 + 352);
    uint64_t v98 = *(void *)(v0 + 336);
    uint64_t v127 = *(void *)(v0 + 408);
    uint64_t v129 = *(void *)(v0 + 328);
    if (v91)
    {
      os_log_t log = v90;
      uint64_t v99 = *(void *)(v0 + 128);
      uint64_t v116 = *(void *)(v0 + 352);
      uint64_t v120 = *(void *)(v0 + 400);
      uint64_t v100 = *(void *)(v0 + 104);
      uint64_t v101 = *(void *)(v0 + 112);
      uint64_t v113 = *(void *)(v0 + 448);
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v102 = 136446210;
      uint64_t v109 = v94;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v105 = v104;
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v99, v100);
      *(void *)(v0 + 16) = sub_100037004(v103, v105, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      v106(v109, v95);
      _os_log_impl((void *)&_mh_execute_header, log, v124, "No valid interval for endDate, fence id: %{public}s", v102, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v134(v113, v127);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v116, v129);
      v106(v120, v95);
    }
    else
    {

      uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      v107(v94, v95);
      v134(v92, v127);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v129);
      v107(v93, v95);
    }
    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
  uint64_t v108 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v108;
  *uint64_t v108 = v0;
  v108[1] = sub_1001C3040;
  return daemon.getter();
}

uint64_t sub_1001C54C0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[51];
  uint64_t v11 = v0[50];
  uint64_t v12 = v0[58];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v7 = v0[42];
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  v1(v12, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001C573C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[76];
  uint64_t v15 = v0[58];
  uint64_t v11 = v0[56];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[46];
  uint64_t v13 = v0[45];
  uint64_t v14 = v0[50];
  uint64_t v12 = v0[44];
  uint64_t v5 = v0[41];
  uint64_t v4 = v0[42];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[22];
  uint64_t v8 = v0[20];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v1(v11, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v13);
  v1(v15, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001C59D0()
{
  uint64_t v162 = v0;
  (*(void (**)(void, void, void))(v0 + 568))(*(void *)(v0 + 376), *(void *)(v0 + 400), *(void *)(v0 + 360));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  unsigned int v156 = v1;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v153 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v135 = *(void *)(v0 + 448);
    uint64_t v129 = *(void *)(v0 + 408);
    uint64_t v144 = *(void *)(v0 + 400);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v149 = *(void *)(v0 + 360);
    uint64_t v132 = *(void *)(v0 + 352);
    uint64_t v125 = *(void *)(v0 + 336);
    os_log_t log = *(os_log_t *)(v0 + 328);
    uint64_t v123 = *(void *)(v0 + 176);
    uint64_t v121 = *(void *)(v0 + 168);
    uint64_t v122 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v119 = (void *)swift_slowAlloc();
    v161[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    Fence.id.getter();
    sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    v118(v4, v5);
    *(void *)(v0 + 24) = sub_100037004(v7, v9, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v153(v3, v149);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v119 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v156, v2, "Failed to trigger fence %{public}s, error: %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v123, v122);
    v139(v135, v129);
    (*(void (**)(uint64_t, os_log_t))(v125 + 8))(v132, log);
    v153(v144, v149);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v145 = *(void *)(v0 + 448);
    uint64_t v150 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v136 = *(void *)(v0 + 408);
    uint64_t v154 = *(void *)(v0 + 400);
    uint64_t v12 = *(void *)(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v140 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 168);
    uint64_t v130 = *(void *)(v0 + 176);
    uint64_t v133 = *(void *)(v0 + 328);
    uint64_t v16 = *(void *)(v0 + 160);
    swift_release();

    swift_errorRelease();
    swift_errorRelease();
    v11(v12, v13);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v130, v16);
    v150(v145, v136);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v140, v133);
    v11(v154, v13);
  }
  sub_10000A520(*(void *)(v0 + 144), &qword_1003F0D58);
  uint64_t v17 = *(void *)(v0 + 576) + 1;
  if (v17 == *(void *)(v0 + 552))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(*(void *)(v0 + 416) + 8))(*(void *)(v0 + 464), *(void *)(v0 + 408));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  while (1)
  {
    *(void *)(v0 + 576) = v17;
    uint64_t v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 568);
    int v21 = *(_DWORD *)(v0 + 716);
    uint64_t v22 = *(void *)(v0 + 400);
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 312);
    uint64_t v24 = *(void *)(v0 + 320);
    uint64_t v26 = *(void *)(v0 + 304);
    unint64_t v27 = *(void *)(v0 + 544)
        + ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))
        + *(void *)(v0 + 560) * v17;
    *(void *)(v0 + 584) = (*(void *)(v0 + 368) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v20(v22, v27, v23);
    Fence.variant.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v24, v26) == v21) {
      break;
    }
    uint64_t v48 = *(void *)(v0 + 400);
    uint64_t v49 = *(void *)(v0 + 360);
    uint64_t v50 = *(void *)(v0 + 368);
    uint64_t v52 = *(void *)(v0 + 312);
    uint64_t v51 = *(void *)(v0 + 320);
    uint64_t v53 = *(void *)(v0 + 304);
LABEL_18:
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
LABEL_19:
    uint64_t v17 = *(void *)(v0 + 576) + 1;
    if (v17 == *(void *)(v0 + 552)) {
      goto LABEL_5;
    }
  }
  unsigned int v157 = *(_DWORD *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 352);
  uint64_t v29 = *(void *)(v0 + 328);
  uint64_t v30 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 320);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v33 = *(void *)(v0 + 280);
  uint64_t v34 = *(void *)(v0 + 288);
  uint64_t v35 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 312) + 96))(v31, *(void *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v28, v31, v29);
  Fence.acceptanceStatus.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v34, v157, v35);
  char v36 = static Fence.AcceptanceStatus.== infix(_:_:)();
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(v34, v35);
  v37(v32, v35);
  if ((v36 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v38 = *(unsigned int *)(v0 + 724);
  uint64_t v40 = *(void *)(v0 + 256);
  uint64_t v39 = *(void *)(v0 + 264);
  uint64_t v41 = *(void *)(v0 + 240);
  uint64_t v42 = *(void *)(v0 + 248);
  Fence.finder.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 104))(v40, v38, v41);
  char v43 = static Fence.Participant.== infix(_:_:)();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v44(v40, v41);
  v44(v39, v41);
  if ((v43 & 1) == 0)
  {
LABEL_17:
    uint64_t v51 = *(void *)(v0 + 400);
    uint64_t v53 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 368);
    uint64_t v48 = *(void *)(v0 + 352);
    uint64_t v49 = *(void *)(v0 + 328);
    uint64_t v50 = *(void *)(v0 + 336);
    goto LABEL_18;
  }
  uint64_t v45 = *(void *)(v0 + 408);
  uint64_t v46 = *(void *)(v0 + 416);
  uint64_t v47 = *(void *)(v0 + 232);
  Fence.muteEndDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1, v45) != 1)
  {
    uint64_t v54 = *(void *)(v0 + 456);
    uint64_t v55 = *(void *)(v0 + 408);
    uint64_t v56 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v56 + 32))(v54, *(void *)(v0 + 232), v55);
    sub_1001CAAE0(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
    char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
    if (v57) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003EE800);
LABEL_15:
  uint64_t v58 = *(void *)(v0 + 464);
  uint64_t v59 = *(void *)(v0 + 448);
  uint64_t v141 = *(void *)(v0 + 472);
  uint64_t v146 = *(void *)(v0 + 440);
  uint64_t v151 = *(void *)(v0 + 432);
  uint64_t v60 = *(void *)(v0 + 416);
  uint64_t v158 = *(void *)(v0 + 424);
  uint64_t v61 = *(void *)(v0 + 408);
  uint64_t v63 = *(void *)(v0 + 216);
  uint64_t v62 = *(void *)(v0 + 224);
  uint64_t v64 = *(void *)(v0 + 208);
  uint64_t v65 = *(void *)(v0 + 192);
  uint64_t v134 = *(void *)(v0 + 200);
  uint64_t v137 = *(void *)(v0 + 184);
  uint64_t v126 = *(void (**)(void, void, void))(*(void *)(v0 + 336) + 16);
  v126(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.previousEndDate(from:)();
  os_log_type_t v124 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v124(v62, v64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v134, v141, v137);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  *(void *)(v0 + 592) = v66;
  *(void *)(v0 + 600) = (v60 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v66(v146, v59, v61);
  v66(v151, v58, v61);
  v66(v158, v59, v61);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v71 = *(void *)(v0 + 432);
  uint64_t v70 = *(void *)(v0 + 440);
  uint64_t v72 = *(void *)(v0 + 424);
  uint64_t v73 = *(void *)(v0 + 408);
  uint64_t v74 = *(void *)(v0 + 200);
  uint64_t v75 = *(void *)(v0 + 184);
  uint64_t v159 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8);
  uint64_t v76 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 416) + 8);
  if (v69)
  {
    uint64_t v142 = v67;
    uint64_t v77 = swift_slowAlloc();
    v161[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 136446466;
    uint64_t v78 = Date.localISO8601.getter();
    uint64_t v147 = v75;
    *(void *)(v77 + 4) = sub_100037004(v78, v79, v161);
    swift_bridgeObjectRelease();
    os_log_type_t v80 = v68;
    uint64_t v81 = *v76;
    (*v76)(v70, v73);
    *(_WORD *)(v77 + 12) = 2050;
    Date.timeIntervalSince(_:)();
    *(void *)(v77 + 14) = v82;
    v81(v71, v73);
    v81(v72, v73);
    _os_log_impl((void *)&_mh_execute_header, v142, v80, "scheduleGraceTimerFired: endDate: %{public}s timeDelta: %{public}f", (uint8_t *)v77, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v159)(v74, v147);
  }
  else
  {
    uint64_t v81 = *v76;
    (*v76)(v70, v73);
    v81(v71, v73);
    v81(v72, v73);

    (*v159)(v74, v75);
  }
  *(void *)(v0 + 608) = v81;
  Date.timeIntervalSince(_:)();
  if (v83 > 300.0)
  {
    uint64_t v84 = *(void *)(v0 + 400);
    uint64_t v85 = *(void *)(v0 + 360);
    uint64_t v86 = *(void *)(v0 + 368);
    uint64_t v87 = *(void *)(v0 + 352);
    uint64_t v88 = *(void *)(v0 + 328);
    uint64_t v89 = *(void *)(v0 + 336);
    v81(*(void *)(v0 + 448), *(void *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v84, v85);
    goto LABEL_19;
  }
  uint64_t v90 = *(void *)(v0 + 224);
  uint64_t v91 = *(void *)(v0 + 208);
  uint64_t v92 = *(void *)(v0 + 160);
  uint64_t v93 = *(void *)(v0 + 168);
  uint64_t v94 = *(void *)(v0 + 152);
  v126(*(void *)(v0 + 344), *(void *)(v0 + 352), *(void *)(v0 + 328));
  Fence.Schedule.Matcher.init(schedule:)();
  Fence.Schedule.Matcher.interval(containingDate:)();
  v124(v90, v91);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v94, 1, v92) == 1)
  {
    os_log_type_t v160 = v81;
    uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v96 = *(void *)(v0 + 400);
    uint64_t v97 = *(void *)(v0 + 384);
    uint64_t v98 = *(void *)(v0 + 360);
    sub_10000A520(*(void *)(v0 + 152), &qword_1003F0D60);
    v95(v97, v96, v98);
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.error.getter();
    BOOL v100 = os_log_type_enabled(v99, v148);
    uint64_t v101 = *(void *)(v0 + 448);
    uint64_t v102 = *(void *)(v0 + 400);
    uint64_t v103 = *(void *)(v0 + 384);
    uint64_t v104 = *(void *)(v0 + 360);
    uint64_t v105 = *(void *)(v0 + 368);
    uint64_t v106 = *(void *)(v0 + 352);
    uint64_t v107 = *(void *)(v0 + 336);
    uint64_t v152 = *(void *)(v0 + 408);
    uint64_t v155 = *(void *)(v0 + 328);
    if (v100)
    {
      os_log_t loga = v99;
      uint64_t v108 = *(void *)(v0 + 128);
      uint64_t v138 = *(void *)(v0 + 352);
      uint64_t v143 = *(void *)(v0 + 400);
      uint64_t v109 = *(void *)(v0 + 104);
      uint64_t v110 = *(void *)(v0 + 112);
      uint64_t v131 = *(void *)(v0 + 448);
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      v161[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v111 = 136446210;
      uint64_t v120 = v103;
      Fence.id.getter();
      sub_1001CAAE0(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
      uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v114 = v113;
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v109);
      *(void *)(v0 + 16) = sub_100037004(v112, v114, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v115 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
      v115(v120, v104);
      _os_log_impl((void *)&_mh_execute_header, loga, v148, "No valid interval for endDate, fence id: %{public}s", v111, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v160(v131, v152);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v138, v155);
      v115(v143, v104);
    }
    else
    {

      uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
      v116(v103, v104);
      v160(v101, v152);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v155);
      v116(v102, v104);
    }
    goto LABEL_19;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
  uint64_t v117 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v117;
  *uint64_t v117 = v0;
  v117[1] = sub_1001C3040;
  return daemon.getter();
}

uint64_t sub_1001C6A54(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  os_log_type_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *os_log_type_t v2 = v1;
  v2[1] = sub_10004A274;
  return v4();
}

uint64_t sub_1001C6B20(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = a6;
  *(unsigned char *)(v6 + 184) = a4;
  uint64_t v8 = sub_100044014(&qword_1003F0F38);
  *(void *)(v6 + 72) = v8;
  *(void *)(v6 + 80) = *(void *)(v8 - 8);
  *(void *)(v6 + 88) = swift_task_alloc();
  uint64_t v9 = sub_100044014(&qword_1003F0F40);
  *(void *)(v6 + 96) = v9;
  *(void *)(v6 + 104) = *(void *)(v9 - 8);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v6 + 112) = v10;
  int v11 = a4;
  if (a4)
  {
    if (a4 == 1) {
      unint64_t v12 = 0xD00000000000002FLL;
    }
    else {
      unint64_t v12 = 0xD00000000000002ELL;
    }
    if (v11 == 1) {
      unint64_t v13 = 0x8000000100372E30;
    }
    else {
      unint64_t v13 = 0x8000000100372E60;
    }
  }
  else
  {
    unint64_t v12 = 0xD000000000000031;
    unint64_t v13 = 0x8000000100372DF0;
  }
  *(void *)(v6 + 120) = v13;
  uint64_t v16 = (uint64_t (*)(uint64_t, unint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:)
                                                                            + async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v6 + 128) = v14;
  *uint64_t v14 = v6;
  v14[1] = sub_1001C6D08;
  return v16(v10, v12, v13);
}

uint64_t sub_1001C6D08()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001C6E20, 0, 0);
}

uint64_t sub_1001C6E20()
{
  uint64_t v14 = v0;
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 136) = sub_100044058(v1, (uint64_t)qword_10040B770);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 184);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    unint64_t v6 = 0x8000000100372E30;
    if (v4 == 1) {
      unint64_t v7 = 0xD00000000000002FLL;
    }
    else {
      unint64_t v7 = 0xD00000000000002ELL;
    }
    if (v4 != 1) {
      unint64_t v6 = 0x8000000100372E60;
    }
    if (v4) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0xD000000000000031;
    }
    if (v4) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0x8000000100372DF0;
    }
    *(void *)(v0 + 48) = sub_100037004(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "XPC event stream created for %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  AsyncStream.makeAsyncIterator()();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  void *v10 = v0;
  v10[1] = sub_1001C7078;
  uint64_t v11 = *(void *)(v0 + 72);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v11);
}

uint64_t sub_1001C7078()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C7174, 0, 0);
}

uint64_t sub_1001C7174()
{
  uint64_t v29 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 152) = v2;
  *(void *)(v0 + 160) = v1;
  if (!v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    goto LABEL_5;
  }
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    swift_bridgeObjectRelease();
LABEL_5:
    char v3 = static Task<>.isCancelled.getter();
    if (v3) {
      uint64_t v4 = 0x656C6C65636E6163;
    }
    else {
      uint64_t v4 = 0x63206D6165727473;
    }
    if (v3) {
      unint64_t v5 = 0xE900000000000064;
    }
    else {
      unint64_t v5 = 0xED00006465736F6CLL;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v26 = v4;
      int v8 = *(unsigned __int8 *)(v0 + 184);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      unint64_t v10 = 0x8000000100372E30;
      if (v8 == 1) {
        unint64_t v11 = 0xD00000000000002FLL;
      }
      else {
        unint64_t v11 = 0xD00000000000002ELL;
      }
      if (v8 != 1) {
        unint64_t v10 = 0x8000000100372E60;
      }
      if (v8) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0xD000000000000031;
      }
      if (v8) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = 0x8000000100372DF0;
      }
      uint64_t v14 = *(void *)(v0 + 104);
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v25 = *(void *)(v0 + 112);
      *(void *)(v0 + 32) = sub_100037004(v12, v13, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_100037004(v26, v5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "XPC alarm event handler ended for %{public}s: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v25, v24);
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 104);
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v17 = *(void *)(v0 + 96);

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v22 + 4) = sub_100037004(v2, v1, &v28);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "XPC alarm fired for %{public}s", (uint8_t *)v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v27 = (uint64_t (*)(void))(*(void *)(v0 + 56) + **(int **)(v0 + 56));
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1001C7634;
  return v27();
}

uint64_t sub_1001C7634()
{
  uint64_t v2 = (void *)*v1;
  v2[22] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001C77D0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    char v3 = (void *)swift_task_alloc();
    v2[18] = v3;
    *char v3 = v2;
    v3[1] = sub_1001C7078;
    uint64_t v4 = v2[9];
    return AsyncStream.Iterator.next(isolation:)(v2 + 2, 0, 0, v4);
  }
}

uint64_t sub_1001C77D0()
{
  unint64_t v13 = v0;
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[20];
  if (v3)
  {
    uint64_t v5 = v0[19];
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v6 + 4) = sub_100037004(v5, v4, &v12);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v6 + 14) = v8;
    *os_log_type_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "XPC alarm event handler for %{public}s failed with %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  void *v9 = v0;
  v9[1] = sub_1001C7078;
  uint64_t v10 = v0[9];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v10);
}

uint64_t sub_1001C7A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v4[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  v4[13] = *(void *)(v6 + 64);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  sub_100044014(&qword_1003F0E88);
  v4[16] = swift_task_alloc();
  uint64_t v7 = sub_100044014(&qword_1003F0E90);
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F0E98);
  v4[20] = v8;
  v4[21] = *(void *)(v8 - 8);
  v4[22] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[23] = v9;
  void *v9 = v4;
  v9[1] = sub_1001C7C6C;
  return daemon.getter();
}

uint64_t sub_1001C7C6C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_1001CAAE0(&qword_1003F0E30, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001C7DC4, v3, v2);
}

uint64_t sub_1001C7DC4()
{
  *(void *)(v0 + 200) = Daemon.darwinNotificationHandler.getter();
  swift_release();
  type metadata accessor for DarwinNotificationHandler();
  sub_1001CAAE0(&qword_1003F0EA0, (void (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001C7E9C, v2, v1);
}

uint64_t sub_1001C7E9C()
{
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_1001C7F28, 0, 0);
}

uint64_t sub_1001C7F28()
{
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[26] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C8000;
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_1001C8000()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C80FC, 0, 0);
}

uint64_t sub_1001C80FC()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = type metadata accessor for DarwinNotification();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[21];
    uint64_t v3 = v0[22];
    uint64_t v5 = v0[20];
    (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v9 = Strong;
      uint64_t v10 = v0[14];
      uint64_t v11 = v0[15];
      uint64_t v12 = v0[12];
      uint64_t v13 = v0[10];
      uint64_t v14 = v0[11];
      uint64_t v30 = v13;
      static ContinuousClock.now.getter();
      ContinuousClock.Instant.advanced(by:)();
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v31(v10, v14);
      uint64_t v15 = type metadata accessor for TaskPriority();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v13, 1, 1, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v11, v14);
      uint64_t v17 = v9;
      unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v19 = (char *)swift_allocObject();
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
      *((void *)v19 + 4) = v17;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v19[v18], v10, v14);
      LODWORD(v17) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v30, 1, v15);
      swift_retain();
      uint64_t v20 = v0[10];
      if (v17 == 1)
      {
        sub_10000A520(v0[10], (uint64_t *)&unk_1003F3C10);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
      }
      if (*((void *)v19 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v23 = v22;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = &unk_1003F0EA8;
      *(void *)(v24 + 24) = v19;
      if (v23 | v21)
      {
        v0[2] = 0;
        v0[3] = 0;
        v0[4] = v21;
        v0[5] = v23;
      }
      uint64_t v25 = v0[15];
      uint64_t v26 = v0[11];
      swift_task_create();
      swift_release();
      v31(v25, v26);
      swift_release();
    }
    sub_10000A520(v0[16], &qword_1003F0E88);
    unint64_t v27 = (void *)swift_task_alloc();
    v0[26] = v27;
    *unint64_t v27 = v0;
    v27[1] = sub_1001C8000;
    uint64_t v28 = v0[16];
    uint64_t v29 = v0[17];
    return AsyncStream.Iterator.next(isolation:)(v28, 0, 0, v29);
  }
}

uint64_t sub_1001C8564(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001C8658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    static ContinuousClock.now.getter();
    ContinuousClock.Instant.advanced(by:)();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v12, v8);
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = a4;
    uint64_t v19 = (v18 + 40) & ~v18;
    uint64_t v20 = (char *)swift_allocObject();
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 3) = 0;
    *((void *)v20 + 4) = v16;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v19], v12, v8);
    swift_retain();
    sub_10010405C((uint64_t)v7, v22, (uint64_t)v20);
    swift_release();
    v23(v14, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001C88D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10004A274;
  return sub_1001C8970(a5);
}

uint64_t sub_1001C8970(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  uint64_t v3 = type metadata accessor for ContinuousClock.Instant();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_1001C8A90, v1, 0);
}

uint64_t sub_1001C8A90()
{
  uint64_t v1 = v0[3];
  uint64_t v17 = OBJC_IVAR____TtC13findmylocated12FenceService_significantTimeChangeDebounceTask;
  uint64_t v18 = v1;
  if (*(void *)(v1 + OBJC_IVAR____TtC13findmylocated12FenceService_significantTimeChangeDebounceTask))
  {
    swift_retain();
    sub_100044014(&qword_1003F4B30);
    Task.cancel()();
    swift_release();
    uint64_t v1 = v0[3];
  }
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v15 = v3;
  uint64_t v16 = v0[4];
  uint64_t v7 = v0[2];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v2, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v7, v6);
  uint64_t v9 = sub_1001CAAE0(&qword_1003EF740, (void (*)(uint64_t))type metadata accessor for FenceService);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v10, v15, v6);
  *(void *)(v12 + v11) = v1;
  *(void *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_retain_n();
  *(void *)(v18 + v17) = sub_10012EDF8(v2, (uint64_t)&unk_1003F0E78, v12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001C8CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_1001C8D8C, a5, 0);
}

uint64_t sub_1001C8D8C()
{
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  ContinuousClock.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = sub_1001CAAE0(&qword_1003F0B90, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  *uint64_t v1 = v0;
  v1[1] = sub_1001C8E84;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v5, v0 + 16, v3, v4, v2);
}

uint64_t sub_1001C8E84()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v7 = sub_1001C9808;
  }
  else {
    uint64_t v7 = sub_1001C9000;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001C9000()
{
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B770);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Significant time change", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001C914C;
  return daemon.getter();
}

uint64_t sub_1001C914C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 104) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1001CAAE0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1001CAAE0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001C9328;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001C9328(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[6];
    return _swift_task_switch(sub_1001C979C, v6, 0);
  }
  else
  {
    swift_release();
    v4[16] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[17] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001C94B4;
    return sub_10012F108();
  }
}

uint64_t sub_1001C94B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C95CC, v2, 0);
}

uint64_t sub_1001C95CC()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001C966C;
  uint64_t v2 = *(void *)(v0 + 144);
  return sub_1001B2350(v2);
}

uint64_t sub_1001C966C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001C979C()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C9808()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_1001C986C()
{
  [v0 coordinate];
  double v22 = v1;
  double v3 = v2;
  [v0 altitude];
  double v5 = v4;
  [v0 horizontalAccuracy];
  double v7 = v6;
  [v0 verticalAccuracy];
  double v9 = v8;
  [v0 course];
  double v11 = v10;
  [v0 courseAccuracy];
  double v13 = v12;
  [v0 speed];
  double v15 = v14;
  [v0 speedAccuracy];
  uint64_t v17 = v16;
  id v18 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v20 = [v18 initWithCoordinate:isa v22 v3 v5 v7 v9 v11 v13 v15 v17];

  return v20;
}

uint64_t sub_1001C99B8()
{
  v1[2] = v0;
  type metadata accessor for XPCAlarm.Criteria.Options();
  v1[3] = swift_task_alloc();
  type metadata accessor for XPCAlarm.Criteria();
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for XPCAlarm();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_1001C9B3C, v0, 0);
}

uint64_t sub_1001C9B3C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[12] = v5;
  v0[13] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  static XPCAlarm.Criteria.Options.userVisible.getter();
  XPCAlarm.Criteria.init(date:options:)();
  double v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  *double v6 = v0;
  v6[1] = sub_1001C9C84;
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[4];
  return XPCAlarm.init(identifier:criteria:)(v7, 0xD00000000000002ELL, 0x8000000100372E60, v8);
}

uint64_t sub_1001C9C84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  uint64_t v3 = *(void *)(*(void *)v0 + 40);
  uint64_t v4 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001C9DF0, v4, 0);
}

uint64_t sub_1001C9DF0()
{
  (*(void (**)(void, void))(v0 + 96))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C9E98()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C9ED0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001C9F18()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1001B512C, 0, 0);
}

uint64_t sub_1001C9FCC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001CA00C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100018CD0;
  return sub_1001C7A44(a1, v4, v5, v6);
}

uint64_t sub_1001CA0C0(uint64_t a1)
{
  return sub_1001C8658(a1, v1, (uint64_t)&unk_1003E15E0, (uint64_t)&unk_1003F0E80);
}

uint64_t sub_1001CA0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001CA108()
{
  return swift_release();
}

uint64_t sub_1001CA110(uint64_t a1)
{
  return sub_1001C8658(a1, v1, (uint64_t)&unk_1003E1590, (uint64_t)&unk_1003F0E60);
}

uint64_t sub_1001CA14C()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10004A274;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10004A274;
  return sub_1001C8970(v3);
}

uint64_t sub_1001CA26C()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001CA35C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10004A274;
  return sub_1001C8CC8(a1, v6, v7, v8, v9);
}

uint64_t sub_1001CA498()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CA56C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CA5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10004A274;
  return sub_1001B53E8(a1, a2, v6, v7, v8);
}

uint64_t sub_1001CA668()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  v2[5] = v0;
  return _swift_task_switch(sub_1001B5AC4, 0, 0);
}

uint64_t sub_1001CA710(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003F0ED8 + dword_1003F0ED8);
  return v6(a1, v4);
}

uint64_t sub_1001CA7C8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100018CD0;
  v2[5] = v0;
  return _swift_task_switch(sub_1001BDD28, 0, 0);
}

uint64_t sub_1001CA870()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  v2[5] = v0;
  return _swift_task_switch(sub_1001C14C0, 0, 0);
}

uint64_t sub_1001CA918()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  uint64_t v4 = (uint64_t (*)(int *))((char *)&dword_1003F0F18 + dword_1003F0F18);
  return v4(v2);
}

uint64_t sub_1001CA9C4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001CAA0C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  unsigned __int8 v7 = *(unsigned char *)(v0 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  void *v8 = v1;
  v8[1] = sub_10004A274;
  return sub_1001C6B20(v2, v3, v4, v7, v5, v6);
}

uint64_t sub_1001CAAE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001CAB28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FenceTriggerRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *_s14descr1003DC189V15AlarmIdentifierOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CAC50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14descr1003DC189V15AlarmIdentifierOMa()
{
  return &_s14descr1003DC189V15AlarmIdentifierON;
}

unint64_t sub_1001CAC8C()
{
  unint64_t result = qword_1003F0F70;
  if (!qword_1003F0F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F0F70);
  }
  return result;
}

uint64_t sub_1001CACE0()
{
  return sub_100014FFC(&qword_1003F0F78, &qword_1003F0F80);
}

unint64_t sub_1001CAD1C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD4B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001CAD88()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B7C8);
  sub_100044058(v0, (uint64_t)qword_10040B7C8);
  return Logger.init(subsystem:category:)();
}

Swift::Int sub_1001CAE0C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001CAE68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = type metadata accessor for FriendshipServiceClient();
  uint64_t v6 = sub_10004CAA0(&qword_1003F1250, v5, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);

  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_1001CAEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return _swift_task_switch(sub_1001CAF14, 0, 0);
}

uint64_t sub_1001CAF14()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = (void *)swift_allocObject();
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  swift_retain();
  swift_retain();
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001CB02C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001CB02C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CB148;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001D6458;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CB148()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  v0[2] = v1;
  OnceCheckedContinuation.resume(throwing:)();
  if (qword_1003EC070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7C8);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD00000000000001ALL, 0x8000000100377340, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CB3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return _swift_task_switch(sub_1001CB3EC, 0, 0);
}

uint64_t sub_1001CB3EC()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
                                                                                 + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CB4C8;
  uint64_t v2 = *(void *)(v0 + 80);
  return v4(v0 + 64, sub_1001D4AA8, v2);
}

uint64_t sub_1001CB4C8()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100174860;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001CB5E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CB5E4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[8];
  uint64_t v3 = NINearbyObject.dataRepresentation.getter();
  if (!v1)
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = v0[10];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001D4AC4;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001CB748;
    v0[5] = &unk_1003E1890;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v2 didDiscoverWithNearbyObject:isa completion:v10];
    _Block_release(v10);

    sub_100044090(v6, v7);
  }
  swift_unknownObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void sub_1001CB748(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1001CB7B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  double v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  swift_retain();
  swift_retain();
  id v14 = a3;
  sub_10010405C((uint64_t)v11, a5, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1001CB8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return _swift_task_switch(sub_1001CB8EC, 0, 0);
}

uint64_t sub_1001CB8EC()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void *)v0[7];
  uint64_t v3 = v0[5];
  id v4 = (void *)swift_allocObject();
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  swift_retain();
  swift_retain();
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[9] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001CBA04;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001CBA04()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CBB20;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001D6458;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CBB20()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  v0[2] = v1;
  OnceCheckedContinuation.resume(throwing:)();
  if (qword_1003EC070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7C8);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD000000000000018, 0x8000000100377300, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CBDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return _swift_task_switch(sub_1001CBDC4, 0, 0);
}

uint64_t sub_1001CBDC4()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
                                                                                 + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CBEA0;
  uint64_t v2 = *(void *)(v0 + 80);
  return v4(v0 + 64, sub_1001D4AA8, v2);
}

uint64_t sub_1001CBEA0()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D643C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001CBFBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CBFBC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[8];
  uint64_t v3 = NINearbyObject.dataRepresentation.getter();
  if (!v1)
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = v0[10];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001D4AC4;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001CB748;
    v0[5] = &unk_1003E1818;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v2 didUpdateWithNearbyObject:isa completion:v10];
    _Block_release(v10);

    sub_100044090(v6, v7);
  }
  swift_unknownObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001CC120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a2;
  v10[5] = a1;
  v10[6] = a3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10010405C((uint64_t)v8, (uint64_t)&unk_1003F12A0, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1001CC244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return _swift_task_switch(sub_1001CC268, 0, 0);
}

uint64_t sub_1001CC268()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[5];
  unint64_t v4 = (void *)swift_allocObject();
  v0[8] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001CC384;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001CC384()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CC4A0;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001D6458;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CC4A0()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[10];
  swift_release();
  v0[2] = v1;
  OnceCheckedContinuation.resume(throwing:)();
  if (qword_1003EC400 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C278);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD000000000000011, 0x8000000100377360, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CC720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  return _swift_task_switch(sub_1001CC744, 0, 0);
}

uint64_t sub_1001CC744()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t), uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
                                                                                 + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CC820;
  uint64_t v2 = *(void *)(v0 + 88);
  return v4(v0 + 64, sub_1001D4AA8, v2);
}

uint64_t sub_1001CC820()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CCB04;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001CC93C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CC93C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[9] = v2;
  sub_100044014(&qword_1003EFF18);
  sub_1001D4EF0();
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v7 = v4;
    unint64_t v8 = v5;
    uint64_t v9 = v0[11];
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001D4AC4;
    v0[7] = v9;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001CB748;
    v0[5] = &unk_1003E1908;
    uint64_t v11 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v3 updateFriends:isa completion:v11];
    _Block_release(v11);

    sub_100044090(v7, v8);
  }
  swift_unknownObjectRelease();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1001CCB04()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CCB68(uint64_t a1)
{
  if (qword_1003EC070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7C8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136446210;
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
    id v7 = [v6 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    sub_100037004(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FrienshipServiceClient proxy error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v12 = a1;
  return OnceCheckedContinuation.resume(throwing:)();
}

uint64_t sub_1001CCD74(uint64_t a1)
{
  if (!a1) {
    return OnceCheckedContinuation.resume<>()();
  }
  swift_errorRetain();
  OnceCheckedContinuation.resume(throwing:)();
  return swift_errorRelease();
}

uint64_t sub_1001CCDC4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1001CCDE4, v1, 0);
}

uint64_t sub_1001CCDE4()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001CCECC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000011, 0x8000000100377360, sub_1001D4CE8, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001CCECC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_1001D6454;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_1001D6460;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001CCFF0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1001CD010, v1, 0);
}

uint64_t sub_1001CD010()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001CD0F8;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD00000000000001ALL, 0x8000000100377340, sub_1001D4AF8, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001CD0F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_1001CD234;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_1001CD21C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001CD21C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CD234()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CD298(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1001CD2B8, v1, 0);
}

uint64_t sub_1001CD2B8()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001CCECC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000018, 0x8000000100377300, sub_1001D2AFC, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001CD3A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B7E0);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B7E0);
  if (qword_1003EC070 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B7C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001CD468()
{
  uint64_t v2 = v0;
  v1[2] = v0;
  type metadata accessor for UUID();
  v1[3] = swift_task_alloc();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0xD000000000000011;
  *(void *)(v0 + 120) = 0x800000010036E4E0;
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  uint64_t v4 = type metadata accessor for XPCServiceDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline) = 0;
  uint64_t v5 = OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool;
  sub_100044014(&qword_1003F12D8);
  *(void *)(v2 + v5) = XPCClientConnectionPool.__allocating_init()();
  uint64_t v6 = OBJC_IVAR____TtC13findmylocated17FriendshipService_friendUpdateQueue;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v2 + v6) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated17FriendshipService_task) = 0;
  type metadata accessor for XPCSessionManager();
  uint64_t v7 = (void *)swift_task_alloc();
  v1[4] = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_1001CD63C;
  return XPCSessionManager.__allocating_init(name:)(0xD000000000000011, 0x800000010036E4E0);
}

uint64_t sub_1001CD63C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated17FriendshipService_xpcSessionManager) = a1;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  return v5(v6);
}

uint64_t sub_1001CD77C()
{
  v1[18] = v0;
  v1[19] = *v0;
  sub_100044014(&qword_1003F0A50);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MachServiceName();
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_1001CD8CC, v0, 0);
}

uint64_t sub_1001CD8CC()
{
  os_log_type_t v68 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = (objc_super *)(v0 + 10);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FriendshipService startup()", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v7 = v0[26];
  uint64_t v6 = v0[27];
  uint64_t v8 = v0[23];
  uint64_t v9 = v0[24];

  MachServiceName.init(_:)();
  id v63 = self;
  id v66 = [v63 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate20FriendshipXPCService_];
  v0[28] = (uint64_t)v66;
  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v65(v7, v6, v8);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[26];
  uint64_t v14 = v0[24];
  if (v12)
  {
    uint64_t v62 = v0[23];
    double v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)double v15 = 136315138;
    uint64_t v16 = MachServiceName.description.getter();
    v0[17] = sub_100037004(v16, v17, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18(v13, v62);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Service Name: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (objc_super *)(v0 + 10);
    swift_slowDealloc();
  }
  else
  {
    id v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18(v13, v0[23]);
  }

  v0[29] = (uint64_t)v18;
  uint64_t v19 = sub_100044014(&qword_1003F13A8);
  uint64_t v20 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_weakAssign();
  v0[10] = v20;
  v0[11] = v19;
  uint64_t v21 = [(objc_super *)v1 init];
  v0[30] = (uint64_t)v21;
  swift_release();
  id v64 = [v63 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate26FriendshipServiceClientXPC_];
  v0[31] = (uint64_t)v64;
  double v22 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v26 = v22;
    id v27 = [(objc_super *)v22 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    double v22 = v26;
    v0[16] = sub_100037004(v28, v30, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Trampoline: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = v0[18];
  if (v33)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    v0[14] = v34;
    type metadata accessor for FriendshipService();
    sub_10004CAA0(&qword_1003F11E8, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[15] = sub_100037004(v36, v37, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Self: %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v38 = v0[22];
  uint64_t v39 = v0[21];
  uint64_t v40 = v0[18];
  v65(v0[25], v0[27], v0[23]);
  uint64_t v41 = type metadata accessor for ServiceEntitlements();
  v0[5] = v41;
  v0[6] = sub_10004CAA0(&qword_1003F0A58, 255, (void (*)(uint64_t))&type metadata accessor for ServiceEntitlements);
  uint64_t v42 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v42, enum case for ServiceEntitlements.friendshipService(_:), v41);
  swift_retain();
  char v43 = v22;
  id v44 = v66;
  id v45 = v64;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)();
  uint64_t v46 = type metadata accessor for XPCServiceDescription();
  v0[32] = v46;
  uint64_t v47 = *(void *)(v46 - 8);
  v0[33] = v47;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v38, 0, 1, v46);
  sub_100013B50(v38, v39, &qword_1003F0A50);
  uint64_t v48 = OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  v0[34] = OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription;
  uint64_t v49 = v40 + v48;
  swift_beginAccess();
  sub_100171EAC(v39, v49);
  swift_endAccess();
  swift_retain_n();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v53 = v0[18];
  if (v52)
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    v0[12] = v53;
    type metadata accessor for FriendshipService();
    sub_10004CAA0(&qword_1003F11E8, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_100037004(v55, v56, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Service description: %s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v57 = v0[18];
  *(void *)(v57 + OBJC_IVAR____TtC13findmylocated17FriendshipService_trampoline) = v43;
  uint64_t v58 = v43;
  swift_release();
  v0[35] = *(void *)(v57 + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  sub_100044014(&qword_1003F12D8);
  sub_100014FFC(&qword_1003F12E0, &qword_1003F12D8);
  uint64_t v60 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[36] = v60;
  v0[37] = v59;
  return _swift_task_switch(sub_1001CE308, v60, v59);
}

uint64_t sub_1001CE308()
{
  uint64_t v1 = *(void *)(v0 + 144);
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)();
  return _swift_task_switch(sub_1001CE38C, v1, 0);
}

uint64_t sub_1001CE38C()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = swift_allocObject();
  v0[38] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v5 = v0[36];
  uint64_t v4 = v0[37];
  swift_retain();
  return _swift_task_switch(sub_1001CE424, v5, v4);
}

uint64_t sub_1001CE424()
{
  uint64_t v1 = *(void *)(v0 + 144);
  dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)();
  swift_release();
  return _swift_task_switch(sub_1001CE4BC, v1, 0);
}

uint64_t sub_1001CE4BC()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = v4 + v0[34];
  v0[39] = *(void *)(v4 + OBJC_IVAR____TtC13findmylocated17FriendshipService_xpcSessionManager);
  sub_100013210(v5, v3, &qword_1003F0A50);
  uint64_t v6 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2);
  if (v6 == 1)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for XPCSessionManager();
    sub_10004CAA0(&qword_1003F0A70, 255, (void (*)(uint64_t))&type metadata accessor for XPCSessionManager);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v11 = v10;
    uint64_t v6 = sub_1001CE5D8;
    uint64_t v7 = v9;
    uint64_t v8 = v11;
  }
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001CE5D8()
{
  dispatch thunk of XPCSessionManager.register(service:)();
  v0[40] = 0;
  uint64_t v1 = v0[18];
  (*(void (**)(void, void))(v0[33] + 8))(v0[20], v0[32]);
  return _swift_task_switch(sub_1001CE68C, v1, 0);
}

uint64_t sub_1001CE68C()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void **)(v0 + 224);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 184);

  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001CE77C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void **)(v0 + 240);
  uint64_t v4 = *(void **)(v0 + 224);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 160);

  v5(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001CE888(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1001CE91C, 0, 0);
}

uint64_t sub_1001CE91C()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "FriendshipService stop Processing", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];

  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  swift_retain();
  sub_10010405C(v5, (uint64_t)&unk_1003F13E0, (uint64_t)v8);
  swift_release();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001CEAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10004A274;
  v6[4] = a4;
  return _swift_task_switch(sub_1001CEE48, a4, 0);
}

uint64_t sub_1001CEB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  void *v8 = v5;
  v8[1] = sub_10004A274;
  v8[3] = a5;
  v8[4] = a4;
  return _swift_task_switch(sub_10004CD10, a4, 0);
}

uint64_t sub_1001CEC24(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_10004CD10, v1, 0);
}

uint64_t sub_1001CEC44()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error adding connection: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001CEE28()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_1001CEE48, v0, 0);
}

uint64_t sub_1001CEE48()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 40) = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All client connections have been terminated. Invalidating...", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001CEF98;
  return sub_1001D6470();
}

uint64_t sub_1001CEF98()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_1001CF0CC, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1001CF0CC()
{
  uint64_t v11 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[7];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v10 = v5;
    v0[2] = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to stop ranging due to %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CF2B0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for UUID();
  __chkstk_darwin(v4 - 8);
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v1;
  v5[3] = a1;
  v5[4] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1001CF3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001CF41C, 0, 0);
}

uint64_t sub_1001CF41C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 40) = v2;
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001CF530;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001CF530()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CF64C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001CD21C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CF64C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CF6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  return _swift_task_switch(sub_1001CF6D4, 0, 0);
}

uint64_t sub_1001CF6D4()
{
  *(void *)(v0 + 72) = *(void *)(*(void *)(v0 + 48)
                                   + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  sub_100044014(&qword_1003F12D8);
  sub_100014FFC(&qword_1003F12E0, &qword_1003F12D8);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001CF79C, v2, v1);
}

uint64_t sub_1001CF79C()
{
  uint64_t v1 = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  v0[10] = v1;
  v0[2] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  uint64_t v3 = sub_100044014(&qword_1003F1368);
  uint64_t v4 = type metadata accessor for UUID();
  v0[12] = v4;
  uint64_t v5 = sub_100014FFC(&qword_1003F1370, &qword_1003F1368);
  *uint64_t v2 = v0;
  v2[1] = sub_1001CF8C0;
  return Sequence.asyncMap<A>(_:)(&unk_1003F1360, 0, v3, v4, v5);
}

uint64_t sub_1001CF8C0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CF9C0, 0, 0);
}

uint64_t sub_1001CF9C0()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218498;
    os_log_type_t v20 = v3;
    os_log_t log = v2;
    if ((v4 & 0xC000000000000001) != 0) {
      uint64_t v6 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v6 = *(void *)(v0[10] + 16);
    }
    uint64_t v7 = v0[7];
    swift_bridgeObjectRelease();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[4] = sub_100037004(v8, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2048;
    uint64_t v11 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    v0[5] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v20, "Send friends update to clients[%ld]: %{public}s updates count:%ld", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = v0[13];
  uint64_t v13 = v0[10];
  uint64_t v15 = v0[7];
  uint64_t v14 = v0[8];
  uint64_t v16 = (void *)swift_task_alloc();
  v0[14] = v16;
  void v16[2] = v15;
  v16[3] = v13;
  v16[4] = v12;
  v16[5] = v14;
  unint64_t v17 = (void *)swift_task_alloc();
  v0[15] = v17;
  *unint64_t v17 = v0;
  v17[1] = sub_1001CFD54;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1001CFD54()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001CD21C, 0, 0);
}

uint64_t sub_1001CFEAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1001CFED0, 0, 0);
}

uint64_t sub_1001CFED0()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                       + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001CFF80;
  uint64_t v2 = *(void *)(v0 + 16);
  return v4(v2);
}

uint64_t sub_1001CFF80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001D0078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for HandleType();
  v6[29] = v7;
  v6[30] = *(void *)(v7 - 8);
  v6[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v6[32] = v8;
  v6[33] = *(void *)(v8 - 8);
  v6[34] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FriendshipAction();
  v6[35] = v9;
  v6[36] = *(void *)(v9 - 8);
  v6[37] = swift_task_alloc();
  v6[38] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Friend();
  v6[39] = v10;
  v6[40] = *(void *)(v10 - 8);
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  sub_100044014(&qword_1003EFEA0);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  return _swift_task_switch(sub_1001D0300, 0, 0);
}

uint64_t sub_1001D0300()
{
  uint64_t v138 = v0;
  uint64_t v1 = v0;
  BOOL v100 = v0 + 7;
  uint64_t v98 = v0 + 14;
  uint64_t v97 = v0 + 15;
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[23];
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v99 = v4 + 64;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & v5;
  os_log_type_t v124 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v125 = (void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v119 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  uint64_t v120 = (void (**)(void))(v2 + 32);
  uint64_t v106 = v0[36];
  uint64_t v118 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v107 = v0[40];
  uint64_t v123 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  unint64_t v104 = v0[24] & 0xC000000000000001;
  uint64_t v108 = v0[24];
  uint64_t v102 = (void (**)(uint64_t, uint64_t))(v0[30] + 8);
  uint64_t v103 = (void (**)(uint64_t, uint64_t))(v0[33] + 8);
  uint64_t v121 = (uint64_t **)(v0 + 22);
  int64_t v101 = (unint64_t)(63 - v7) >> 6;
  uint64_t v105 = v0[23];
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v122 = 0;
  uint64_t v136 = v0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      uint64_t v18 = (v8 - 1) & v8;
      unint64_t v19 = v17 | (v122 << 6);
LABEL_8:
      uint64_t v20 = v1[44];
      uint64_t v21 = v1[35];
      (*(void (**)(uint64_t, unint64_t, void))(v107 + 16))(v20, *(void *)(v105 + 48) + *(void *)(v107 + 72) * v19, v1[39]);
      unint64_t v22 = *(void *)(v105 + 56) + *(void *)(v106 + 72) * v19;
      uint64_t v23 = sub_100044014(&qword_1003EEBF0);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v106 + 16))(v20 + *(int *)(v23 + 48), v22, v21);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 0, 1, v23);
      goto LABEL_27;
    }
    int64_t v24 = v122 + 1;
    if (__OFADD__(v122, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      return result;
    }
    if (v24 < v101)
    {
      unint64_t v25 = *(void *)(v99 + 8 * v24);
      if (v25) {
        goto LABEL_12;
      }
      int64_t v26 = v122 + 2;
      ++v122;
      if (v24 + 1 < v101)
      {
        unint64_t v25 = *(void *)(v99 + 8 * v26);
        if (v25) {
          goto LABEL_15;
        }
        int64_t v122 = v24 + 1;
        if (v24 + 2 < v101)
        {
          unint64_t v25 = *(void *)(v99 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_12;
          }
          int64_t v26 = v24 + 3;
          int64_t v122 = v24 + 2;
          if (v24 + 3 < v101)
          {
            unint64_t v25 = *(void *)(v99 + 8 * v26);
            if (v25)
            {
LABEL_15:
              int64_t v24 = v26;
LABEL_12:
              uint64_t v18 = (v25 - 1) & v25;
              unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
              int64_t v122 = v24;
              goto LABEL_8;
            }
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_76;
              }
              if (v24 >= v101) {
                break;
              }
              unint64_t v25 = *(void *)(v99 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_12;
              }
            }
            int64_t v122 = v101 - 1;
          }
        }
      }
    }
    uint64_t v27 = v1[44];
    uint64_t v28 = sub_100044014(&qword_1003EEBF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
    uint64_t v18 = 0;
LABEL_27:
    uint64_t v29 = v1[45];
    sub_100013B50(v1[44], v29, &qword_1003EFEA0);
    uint64_t v30 = sub_100044014(&qword_1003EEBF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30) == 1) {
      break;
    }
    unint64_t v134 = v18;
    uint64_t v31 = v1[38];
    uint64_t v32 = v1[35];
    uint64_t v33 = v1[45] + *(int *)(v30 + 48);
    (*v120)(v1[43]);
    (*v119)(v31, v33, v32);
    if (qword_1003EC078 != -1) {
      swift_once();
    }
    uint64_t v34 = v1[42];
    uint64_t v35 = v1[43];
    uint64_t v36 = v1[41];
    uint64_t v37 = v1[39];
    uint64_t v38 = v1[37];
    uint64_t v39 = v1[35];
    uint64_t v127 = v1[38];
    uint64_t v40 = type metadata accessor for Logger();
    sub_100044058(v40, (uint64_t)qword_10040B7E0);
    uint64_t v41 = *v125;
    (*v125)(v34, v35, v37);
    v41(v36, v35, v37);
    (*v124)(v38, v127, v39);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      v137[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 134219267;
      os_log_type_t v132 = v43;
      uint64_t v117 = v42;
      if (v104) {
        uint64_t v45 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v45 = *(void *)(v108 + 16);
      }
      uint64_t v46 = v136[42];
      uint64_t v128 = v136[43];
      uint64_t v112 = v136[41];
      uint64_t v47 = v136[39];
      uint64_t v114 = v136[37];
      uint64_t v115 = v136[35];
      uint64_t v116 = v136[38];
      uint64_t v48 = v136[34];
      uint64_t v110 = v136[32];
      uint64_t v49 = v136[31];
      uint64_t v113 = v136[29];
      swift_bridgeObjectRelease();
      v136[16] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2082;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v50 = Array.description.getter();
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
      v136[17] = sub_100037004(v50, v52, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2160;
      v136[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 32) = 2081;
      Friend.handle.getter();
      uint64_t v53 = Handle.identifier.getter();
      unint64_t v55 = v54;
      uint64_t v56 = v48;
      uint64_t v1 = v136;
      (*v103)(v56, v110);
      v136[19] = sub_100037004(v53, v55, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v111 = *v123;
      (*v123)(v46, v47);
      *(_WORD *)(v44 + 42) = 2082;
      Friend.type.getter();
      sub_10004CAA0(&qword_1003EFEB0, 255, (void (*)(uint64_t))&type metadata accessor for HandleType);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v59 = v58;
      (*v102)(v49, v113);
      v136[20] = sub_100037004(v57, v59, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v111(v112, v47);
      *(_WORD *)(v44 + 52) = 2082;
      sub_10004CAA0(&qword_1003EFEA8, 255, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      v136[21] = sub_100037004(v60, v61, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = *v118;
      (*v118)(v114, v115);
      _os_log_impl((void *)&_mh_execute_header, v117, v132, "Send friends update to all clients:\nclients[%ld]: %{public}s\nhandle: %{private,mask.hash}s\ntype: %{public}s\nby: %{public}s", (uint8_t *)v44, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v62(v116, v115);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v111)(v128, v47);
    }
    else
    {
      uint64_t v10 = v1[42];
      uint64_t v11 = v1[41];
      uint64_t v12 = v1[39];
      uint64_t v130 = v1[38];
      unint64_t v131 = v1[43];
      uint64_t v13 = v1[37];
      uint64_t v14 = v1[35];

      swift_bridgeObjectRelease();
      uint64_t v15 = *v118;
      (*v118)(v13, v14);
      uint64_t v16 = *v123;
      (*v123)(v11, v12);
      v16(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v15(v130, v14);
      uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v16)(v131, v12);
    }
    unint64_t v8 = v134;
  }
  swift_release();
  uint64_t v63 = v1[24];
  if (v104)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for FriendshipServiceClient();
    sub_10004CAA0((unint64_t *)&unk_1003F1240, v64, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v65 = v1[2];
    uint64_t v129 = v1[3];
    uint64_t v66 = v1[4];
    uint64_t v67 = v1[5];
    unint64_t v68 = v1[6];
  }
  else
  {
    uint64_t v69 = -1 << *(unsigned char *)(v63 + 32);
    uint64_t v129 = v63 + 56;
    uint64_t v70 = ~v69;
    uint64_t v71 = -v69;
    if (v71 < 64) {
      uint64_t v72 = ~(-1 << v71);
    }
    else {
      uint64_t v72 = -1;
    }
    unint64_t v68 = v72 & *(void *)(v63 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v66 = v70;
    uint64_t v67 = 0;
    uint64_t v65 = v108;
  }
  int64_t v126 = (unint64_t)(v66 + 64) >> 6;
  uint64_t v109 = v65;
  while (v65 < 0)
  {
    uint64_t v77 = __CocoaSet.Iterator.next()();
    if (!v77) {
      goto LABEL_71;
    }
    *uint64_t v97 = v77;
    type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v78 = *v98;
    swift_unknownObjectRelease();
    uint64_t v76 = v67;
    uint64_t v74 = v68;
    if (!v78) {
      goto LABEL_71;
    }
LABEL_64:
    unint64_t v133 = v74;
    uint64_t v135 = v76;
    uint64_t v83 = v1[27];
    uint64_t v82 = v1[28];
    uint64_t v84 = v136[26];
    uint64_t v85 = v136[23];
    uint64_t v86 = type metadata accessor for TaskPriority();
    uint64_t v87 = *(void *)(v86 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v82, 1, 1, v86);
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = 0;
    uint64_t v89 = v88 + 2;
    v88[3] = 0;
    v88[4] = v78;
    v88[5] = v85;
    v88[6] = v84;
    uint64_t v1 = v136;
    sub_100013210(v82, v83, (uint64_t *)&unk_1003F3C10);
    LODWORD(v83) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v83, 1, v86);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v90 = v136[27];
    if (v83 == 1)
    {
      sub_10000A520(v136[27], (uint64_t *)&unk_1003F3C10);
      if (*v89) {
        goto LABEL_66;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v90, v86);
      if (*v89)
      {
LABEL_66:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v91 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v93 = v92;
        swift_unknownObjectRelease();
        goto LABEL_69;
      }
    }
    uint64_t v91 = 0;
    uint64_t v93 = 0;
LABEL_69:
    uint64_t v94 = **v121;
    uint64_t v95 = (void *)(v93 | v91);
    if (v93 | v91)
    {
      uint64_t v95 = v100;
      *BOOL v100 = 0;
      v100[1] = 0;
      v136[9] = v91;
      v136[10] = v93;
    }
    uint64_t v73 = v136[28];
    v136[11] = 1;
    v136[12] = v95;
    v136[13] = v94;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = sub_10000A520(v73, (uint64_t *)&unk_1003F3C10);
    unint64_t v68 = v133;
    uint64_t v67 = v135;
    uint64_t v65 = v109;
  }
  if (v68)
  {
    uint64_t v74 = (v68 - 1) & v68;
    unint64_t v75 = __clz(__rbit64(v68)) | (v67 << 6);
    uint64_t v76 = v67;
    goto LABEL_63;
  }
  int64_t v79 = v67 + 1;
  if (__OFADD__(v67, 1)) {
    goto LABEL_75;
  }
  if (v79 >= v126) {
    goto LABEL_71;
  }
  unint64_t v80 = *(void *)(v129 + 8 * v79);
  uint64_t v76 = v67 + 1;
  if (v80) {
    goto LABEL_62;
  }
  uint64_t v76 = v67 + 2;
  if (v67 + 2 >= v126) {
    goto LABEL_71;
  }
  unint64_t v80 = *(void *)(v129 + 8 * v76);
  if (v80) {
    goto LABEL_62;
  }
  uint64_t v76 = v67 + 3;
  if (v67 + 3 >= v126) {
    goto LABEL_71;
  }
  unint64_t v80 = *(void *)(v129 + 8 * v76);
  if (v80) {
    goto LABEL_62;
  }
  uint64_t v76 = v67 + 4;
  if (v67 + 4 >= v126) {
    goto LABEL_71;
  }
  unint64_t v80 = *(void *)(v129 + 8 * v76);
  if (v80)
  {
LABEL_62:
    uint64_t v74 = (v80 - 1) & v80;
    unint64_t v75 = __clz(__rbit64(v80)) + (v76 << 6);
LABEL_63:
    uint64_t v78 = *(void *)(*(void *)(v65 + 48) + 8 * v75);
    swift_retain();
    if (!v78) {
      goto LABEL_71;
    }
    goto LABEL_64;
  }
  uint64_t v81 = v67 + 5;
  while (v126 != v81)
  {
    unint64_t v80 = *(void *)(v129 + 8 * v81++);
    if (v80)
    {
      uint64_t v76 = v81 - 1;
      uint64_t v65 = v109;
      goto LABEL_62;
    }
  }
LABEL_71:
  sub_1001491B4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v96 = (uint64_t (*)(void))v1[1];
  return v96();
}

uint64_t sub_1001D1264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[8] = v8;
  v6[9] = *(void *)(v8 + 64);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001D134C, 0, 0);
}

uint64_t sub_1001D134C()
{
  static Task<>.checkCancellation()();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                       + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001D1464;
  uint64_t v2 = *(void *)(v0 + 96);
  return v4(v2);
}

uint64_t sub_1001D1464()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D1560, 0, 0);
}

uint64_t sub_1001D1560()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[14] = v7;
  v0[15] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v2, v1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  v0[16] = v11;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v8, v2, v5);
  *(void *)(v11 + v9) = v6;
  *(void *)(v11 + v10) = v14;
  *(void *)(v11 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)) = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[17] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1001D1704;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001D1704()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D18B0;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001D1820;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001D1820()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[12], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001D18B0()
{
  unint64_t v25 = v0;
  swift_release();
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B7E0);
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v8)
  {
    uint64_t v23 = v0[12];
    uint64_t v13 = swift_slowAlloc();
    unint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    sub_10004CAA0(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v22 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Error from client %{public}s error: %{public}@", (uint8_t *)v13, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v16(v23, v11);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v10, v11);
    swift_errorRelease();
    v18(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1001D1C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_1001D1CFC, 0, 0);
}

uint64_t sub_1001D1CFC()
{
  uint64_t v20 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  v0[11] = sub_100044058(v5, (uint64_t)qword_10040B7E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v0[13] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_10004CAA0(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending friends update to client %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[14] = v16;
  uint64_t v17 = v0[5];
  return _swift_task_switch(sub_1001D1F7C, v17, 0);
}

uint64_t sub_1001D1F7C()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001D2060;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000011, 0x8000000100377360, sub_1001D646C, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D2060()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_1001D23C4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_1001D2188;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D2188()
{
  return _swift_task_switch(sub_1001D21A4, 0, 0);
}

uint64_t sub_1001D21A4()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0 + 96))(*(void *)(v0 + 72), *(void *)(v0 + 32), *(void *)(v0 + 56));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_10004CAA0(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent friends update to client %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  }

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001D23C4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D243C()
{
  swift_bridgeObjectRelease();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated17FriendshipService_serviceDescription, &qword_1003F0A50);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1001D24CC()
{
  sub_1001D243C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001D24F8()
{
  return type metadata accessor for FriendshipService();
}

uint64_t type metadata accessor for FriendshipService()
{
  uint64_t result = qword_1003F1090;
  if (!qword_1003F1090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001D254C()
{
  sub_10016926C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1001D260C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FriendshipService();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_1001D26B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for FriendshipService();
  void *v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_1001D2780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FriendshipService();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_1001D282C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1001CD77C();
}

uint64_t sub_1001D28B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FriendshipService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.run()(v5, a2);
}

uint64_t sub_1001D2964()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_1001D29D4()
{
  return sub_10004CAA0(&qword_1003F11E8, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
}

uint64_t sub_1001D2A20()
{
  return sub_10004CAA0(qword_1003F11F0, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
}

uint64_t sub_1001D2A6C(uint64_t a1, uint64_t a2)
{
  return sub_10004CAA0(&qword_1003F1238, a2, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
}

uint64_t sub_1001D2AB4(uint64_t a1, uint64_t a2)
{
  return sub_10004CAA0((unint64_t *)&unk_1003F1240, a2, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
}

uint64_t sub_1001D2AFC(uint64_t a1)
{
  return sub_1001CB7B4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)&unk_1003E17D8, (uint64_t)&unk_1003F1260);
}

uint64_t sub_1001D2B38()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return _swift_task_switch(sub_1001CB8EC, 0, 0);
}

uint64_t sub_1001D2BF0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v4;
  return _swift_task_switch(sub_1001CBDC4, 0, 0);
}

uint64_t sub_1001D2CA4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return _swift_task_switch(sub_1001D2CEC, v1, 0);
}

uint64_t sub_1001D2CEC()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7E0);
  id v3 = v1;
  long long v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[3];
  if (v6)
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 138412290;
    v0[2] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FriendshipService: didDiscover %@", v8, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v0[6] = *(void *)(v0[4] + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  sub_100044014(&qword_1003F12D8);
  sub_100014FFC(&qword_1003F12E0, &qword_1003F12D8);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001D2F24, v11, v10);
}

uint64_t sub_1001D2F24()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 56) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return _swift_task_switch(sub_1001D2F94, v1, 0);
}

uint64_t sub_1001D2F94()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = sub_10004CAA0(qword_1003F11F0, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
  BOOL v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001D30D0;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v2, v5, &unk_1003F1318, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D30D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100178850, v1, 0);
}

uint64_t sub_1001D3220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001D32C8, 0, 0);
}

uint64_t sub_1001D32C8()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for FriendshipServiceClient();
    sub_10004CAA0((unint64_t *)&unk_1003F1240, v2, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v35 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v35 = v1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v34 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v36 = v1;
  while (v1 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_37;
    }
    *(void *)(v0 + 120) = v14;
    type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 112);
    swift_unknownObjectRelease();
    uint64_t v13 = v5;
    uint64_t v11 = v6;
    if (!v15) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v37 = v11;
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v21 = type metadata accessor for TaskPriority();
    uint64_t v22 = *(void *)(v21 - 8);
    long long v38 = *(_OWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v19, 1, 1, v21);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = 0;
    uint64_t v24 = (void *)(v23 + 16);
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = v15;
    *(_OWORD *)(v23 + 40) = v38;
    sub_100013210(v19, v20, (uint64_t *)&unk_1003F3C10);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
    swift_retain();
    id v25 = (id)v38;
    uint64_t v26 = *(void *)(v0 + 160);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 160), (uint64_t *)&unk_1003F3C10);
      if (*v24) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v21);
      if (*v24)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
LABEL_35:
    uint64_t v30 = **(void **)(v0 + 128);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &unk_1003F1328;
    *(void *)(v31 + 24) = v23;
    uint64_t v32 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v32 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v27;
      *(void *)(v0 + 80) = v29;
    }
    uint64_t v10 = *(void *)(v0 + 168);
    *(void *)(v0 + 88) = 1;
    *(void *)(v0 + 96) = v32;
    *(void *)(v0 + 104) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = sub_10000A520(v10, (uint64_t *)&unk_1003F3C10);
    uint64_t v5 = v13;
    unint64_t v6 = v37;
    uint64_t v1 = v36;
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v13 = v5;
    goto LABEL_29;
  }
  int64_t v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v16);
  uint64_t v13 = v5 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 2;
  if (v5 + 2 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 3;
  if (v5 + 3 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 4;
  if (v5 + 4 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v5 + 5;
  while (v34 != v18)
  {
    unint64_t v17 = *(void *)(v35 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  sub_1001491B4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

uint64_t sub_1001D3820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_1001D3840, a4, 0);
}

uint64_t sub_1001D3840()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001D3924;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD00000000000001ALL, 0x8000000100377340, sub_1001D6468, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D3924()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_1001D3A4C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_100178850;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D3A4C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D3AB4, 0, 0);
}

uint64_t sub_1001D3AB4()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "didDiscover error: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001D3C98(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return _swift_task_switch(sub_1001D3CE0, v1, 0);
}

uint64_t sub_1001D3CE0()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7E0);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[3];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[2] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FriendshipService: didUpdate %@", v8, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v0[6] = *(void *)(v0[4] + OBJC_IVAR____TtC13findmylocated17FriendshipService_connectionPool);
  sub_100044014(&qword_1003F12D8);
  sub_100014FFC(&qword_1003F12E0, &qword_1003F12D8);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001D3F18, v11, v10);
}

uint64_t sub_1001D3F18()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 56) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return _swift_task_switch(sub_1001D3F88, v1, 0);
}

uint64_t sub_1001D3F88()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = sub_10004CAA0(qword_1003F11F0, 255, (void (*)(uint64_t))type metadata accessor for FriendshipService);
  BOOL v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001D40C4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, v2, v5, &unk_1003F12F0, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D40C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D6458, v1, 0);
}

uint64_t sub_1001D4214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001D42BC, 0, 0);
}

uint64_t sub_1001D42BC()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for FriendshipServiceClient();
    sub_10004CAA0((unint64_t *)&unk_1003F1240, v2, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v35 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v35 = v1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v34 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v36 = v1;
  while (v1 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_37;
    }
    *(void *)(v0 + 120) = v14;
    type metadata accessor for FriendshipServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 112);
    swift_unknownObjectRelease();
    uint64_t v13 = v5;
    uint64_t v11 = v6;
    if (!v15) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v37 = v11;
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v21 = type metadata accessor for TaskPriority();
    uint64_t v22 = *(void *)(v21 - 8);
    long long v38 = *(_OWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v19, 1, 1, v21);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = 0;
    uint64_t v24 = (void *)(v23 + 16);
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = v15;
    *(_OWORD *)(v23 + 40) = v38;
    sub_100013210(v19, v20, (uint64_t *)&unk_1003F3C10);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
    swift_retain();
    id v25 = (id)v38;
    uint64_t v26 = *(void *)(v0 + 160);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 160), (uint64_t *)&unk_1003F3C10);
      if (*v24) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v21);
      if (*v24)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
LABEL_35:
    uint64_t v30 = **(void **)(v0 + 128);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &unk_1003F1300;
    *(void *)(v31 + 24) = v23;
    uint64_t v32 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v32 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v27;
      *(void *)(v0 + 80) = v29;
    }
    uint64_t v10 = *(void *)(v0 + 168);
    *(void *)(v0 + 88) = 1;
    *(void *)(v0 + 96) = v32;
    *(void *)(v0 + 104) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = sub_10000A520(v10, (uint64_t *)&unk_1003F3C10);
    uint64_t v5 = v13;
    unint64_t v6 = v37;
    uint64_t v1 = v36;
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v13 = v5;
    goto LABEL_29;
  }
  int64_t v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v16);
  uint64_t v13 = v5 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 2;
  if (v5 + 2 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 3;
  if (v5 + 3 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 4;
  if (v5 + 4 >= v34) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v35 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v5 + 5;
  while (v34 != v18)
  {
    unint64_t v17 = *(void *)(v35 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  sub_1001491B4();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

uint64_t sub_1001D4814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_1001D4834, a4, 0);
}

uint64_t sub_1001D4834()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001D4918;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000018, 0x8000000100377300, sub_1001D6464, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D4918()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_1001D4A40;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_1001D6458;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D4A40()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D645C, 0, 0);
}

uint64_t sub_1001D4AA8(uint64_t a1)
{
  return sub_1001CCB68(a1);
}

uint64_t sub_1001D4AC4(uint64_t a1)
{
  return sub_1001CCD74(a1);
}

uint64_t sub_1001D4AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D4AF0()
{
  return swift_release();
}

uint64_t sub_1001D4AF8(uint64_t a1)
{
  return sub_1001CB7B4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)&unk_1003E1850, (uint64_t)&unk_1003F1280);
}

uint64_t sub_1001D4B34()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return _swift_task_switch(sub_1001CAF14, 0, 0);
}

uint64_t sub_1001D4BEC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D4C34()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 88) = v2;
  *(_OWORD *)(v3 + 72) = v4;
  return _swift_task_switch(sub_1001CB3EC, 0, 0);
}

uint64_t sub_1001D4CE8(uint64_t a1)
{
  return sub_1001CC120(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001D4CF0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D4D40()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v4;
  return _swift_task_switch(sub_1001CC268, 0, 0);
}

uint64_t sub_1001D4DF4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D4E3C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v4;
  return _swift_task_switch(sub_1001CC744, 0, 0);
}

unint64_t sub_1001D4EF0()
{
  unint64_t result = qword_1003F12B8;
  if (!qword_1003F12B8)
  {
    sub_10004AE58(&qword_1003EFF18);
    sub_10004CAA0(&qword_1003F12C0, 255, (void (*)(uint64_t))&type metadata accessor for Friend);
    sub_10004CAA0(&qword_1003F12C8, 255, (void (*)(uint64_t))&type metadata accessor for FriendshipAction);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F12B8);
  }
  return result;
}

uint64_t sub_1001D4FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10004A274;
  return sub_1001D4214(a1, a2, v6, v7, v8);
}

uint64_t sub_1001D5098()
{
  return sub_1001D61B4(56);
}

uint64_t sub_1001D50A0()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10004A274;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1001D4834, v3, 0);
}

uint64_t sub_1001D514C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D5184(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100018CD0;
  return sub_1001D3220(a1, a2, v6, v7, v8);
}

uint64_t sub_1001D5248()
{
  return sub_1001D61B4(56);
}

uint64_t sub_1001D5250()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10004A274;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1001D3840, v3, 0);
}

uint64_t sub_1001D52FC(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003ECFA0 + dword_1003ECFA0);
  return v6(a1, v4);
}

uint64_t sub_1001D53B8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100018CD0;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1001CF41C, 0, 0);
}

uint64_t sub_1001D546C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(sub_1001D548C, 0, 0);
}

uint64_t sub_1001D548C()
{
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                         + async function pointer to dispatch thunk of FM.XPCSession.connection.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001D5534;
  return v3();
}

uint64_t sub_1001D5534(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D5634, 0, 0);
}

uint64_t sub_1001D5634()
{
  unint64_t v17 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7E0);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = v7;
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    v0[2] = sub_100037004(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Friendship Service: removed connection: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1001D584C(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1001D5870, 0, 0);
}

uint64_t sub_1001D5870()
{
  uint64_t v12 = v0;
  if (*(unsigned char *)(v0 + 32))
  {
    swift_errorRetain();
    if (qword_1003EC078 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040B7E0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 24);
    if (v4)
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000017, 0x8000000100377380, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2114;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      sub_1001D5B10(v5, 1);
      sub_1001D5B10(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v6, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D5B10(v5, 1);
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 24), 1);
      sub_1001D5B10(v5, 1);
      swift_errorRelease();
    }
  }
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001D5B10(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1001D5B20()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D5B60()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  return _swift_task_switch(sub_1001CF6D4, 0, 0);
}

uint64_t sub_1001D5C14(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  id v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_10004A274;
  return sub_1001D0078(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1001D5CDC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D5D24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10004A274;
  return sub_1001D1264(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001D5DEC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001D5EB0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  id v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10004A274;
  return sub_1001D1C28(a1, v7, v8, v9);
}

uint64_t sub_1001D5FE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D6020()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1001CE888(v2);
}

uint64_t sub_1001D60B8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D60F8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_1001CEAC8(a1, v4, v5, v6);
}

uint64_t sub_1001D61AC()
{
  return sub_1001D61B4(48);
}

uint64_t sub_1001D61B4(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1001D6208(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10004A274;
  return sub_1001CEB74(a1, v4, v5, v7, v6);
}

ValueMetadata *type metadata accessor for FriendshipServiceError()
{
  return &type metadata for FriendshipServiceError;
}

unsigned char *_s13findmylocated22FriendshipServiceErrorV8CategoryOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D63ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServiceError.Category()
{
  return &type metadata for FriendshipServiceError.Category;
}

unint64_t sub_1001D63E8()
{
  unint64_t result = qword_1003F1400[0];
  if (!qword_1003F1400[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1003F1400);
  }
  return result;
}

uint64_t sub_1001D6470()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_1001D6490, v0, 0);
}

uint64_t sub_1001D6490()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unsigned int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unsigned int v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0x676E6152706F7473, 0xED00002928676E69, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001D6680;
  return daemon.getter();
}

uint64_t sub_1001D6680(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 40) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NIRangingService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001D685C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001D685C(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[7] = a1;
  v3[8] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[3];
    return _swift_task_switch(sub_10019F9E4, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[9] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001D69E4;
    return sub_10029E3DC();
  }
}

uint64_t sub_1001D69E4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1001D6B10;
  }
  else {
    uint64_t v4 = sub_10019F8B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D6B10()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D6B74(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_1001D6B94, v1, 0);
}

uint64_t sub_1001D6B94()
{
  uint64_t v11 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0x2873646E65697266, 0xEE00293A68746977, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    type metadata accessor for HandleType();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s with types: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  void *v8 = v0;
  v8[1] = sub_1001D6E28;
  return daemon.getter();
}

uint64_t sub_1001D6E28(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001D7004;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001D7004(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[5];
    return _swift_task_switch(sub_1001D731C, v6, 0);
  }
  else
  {
    swift_release();
    v4[10] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[11] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001D719C;
    uint64_t v8 = v4[4];
    return sub_100021584(v8, 1);
  }
}

uint64_t sub_1001D719C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D72B4, v2, 0);
}

uint64_t sub_1001D72B4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

uint64_t sub_1001D731C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D7380(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for ClientOrigin();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for RequestOrigin();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GroupID();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  v3[19] = v7;
  v3[20] = *(void *)(v7 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FollowerState();
  v3[25] = v8;
  v3[26] = *(void *)(v8 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FollowingState();
  v3[31] = v9;
  v3[32] = *(void *)(v9 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Handle();
  v3[36] = v10;
  v3[37] = *(void *)(v10 - 8);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v3[42] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_1001D77A0;
  return daemon.getter();
}

uint64_t sub_1001D77A0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[43] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[44] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[45] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[46] = v6;
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1001D7980;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001D7980(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[47] = a1;
  v3[48] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[4];
    uint64_t v5 = sub_1001D8FAC;
  }
  else
  {
    uint64_t v6 = v3[4];
    swift_release();
    uint64_t v5 = sub_1001D7AA8;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001D7AA8()
{
  FriendshipCanShareLocationRequest.handle.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001D7B44;
  return daemon.getter();
}

uint64_t sub_1001D7B44(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 400) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 408) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_100047354(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001D7CF8;
  uint64_t v8 = *(void *)(v2 + 368);
  uint64_t v9 = *(void *)(v2 + 360);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001D7CF8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = v3[4];
    return _swift_task_switch(sub_1001D9150, v5, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v3[54] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001D7EA0;
    return sub_1000EF550();
  }
}

uint64_t sub_1001D7EA0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(unsigned char *)(*(void *)v1 + 532) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001D7FB8, v2, 0);
}

uint64_t sub_1001D7FB8()
{
  *(void *)(v0 + 440) = sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  *(void *)(v0 + 448) = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)(v0 + 456) = *(void *)(v2 + 72);
  int v3 = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 528) = v3;
  unint64_t v4 = (v3 + 32) & ~(unint64_t)v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 464) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  uint64_t v6 = enum case for HandleType.following(_:);
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 104);
  *(void *)(v0 + 472) = v7;
  *(void *)(v0 + 480) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v5 + v4, v6, v1);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v8;
  void *v8 = v0;
  v8[1] = sub_1001D8134;
  return sub_100021584(v5, 1);
}

uint64_t sub_1001D8134(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 496) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001D8268, v2, 0);
}

uint64_t sub_1001D8268()
{
  uint64_t v1 = *(void (**)(unint64_t, void, uint64_t))(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 448);
  unint64_t v3 = (*(unsigned __int8 *)(v0 + 528) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 528);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 504) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  v1(v4 + v3, enum case for HandleType.follower(_:), v2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001D8360;
  return sub_100021584(v4, 1);
}

uint64_t sub_1001D8360(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 520) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001D8494, v2, 0);
}

uint64_t sub_1001D8494()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 296) + 8);
    uint64_t v114 = *(void *)(v4 + 56);
    uint64_t v116 = v5;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = *(void *)(v0 + 320);
      uint64_t v9 = *(void *)(v0 + 288);
      v116(*(void *)(v0 + 184), v6, *(void *)(v0 + 152));
      Friend.handle.getter();
      char v10 = static Handle.== infix(_:_:)();
      (*v7)(v8, v9);
      if (v10) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(*(void *)(v0 + 184), *(void *)(v0 + 152));
      v6 += v114;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v15 = *(void *)(v0 + 144);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v12, v13);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v11(v15, 0, 1, v13);
  }
  else
  {
LABEL_6:
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 160) + 56);
    v11(*(void *)(v0 + 144), 1, 1, *(void *)(v0 + 152));
  }
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(unsigned int (**)(void, void, void))(v17 + 48);
  if (v19(v18, 1, v16) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 32))(*(void *)(v0 + 192), *(void *)(v0 + 144), *(void *)(v0 + 152));
    if ((FriendshipCanShareLocationRequest.isFromGroup.getter() & 1) == 0)
    {
      uint64_t v26 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 200);
      uint64_t v28 = *(void *)(v0 + 208);
      (*(void (**)(void, void))(*(void *)(v0 + 160) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 152));
      (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v26, enum case for FollowerState.shared(_:), v27);
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v0 + 112);
    uint64_t v30 = *(void *)(v0 + 64);
    uint64_t v31 = *(void *)(v0 + 40);
    uint64_t v32 = *(void *)(v0 + 48);
    FriendshipCanShareLocationRequest.origin.getter();
    RequestOrigin.origin.getter();
    int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 88))(v30, v31);
    int64_t v34 = *(void (**)(uint64_t, void, uint64_t))(v29 + 104);
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v36 = *(void *)(v0 + 104);
    uint64_t v112 = v19;
    if (v33 == enum case for ClientOrigin.messagesApp(_:))
    {
      v34(v35, enum case for GroupID.group(_:), v36);
    }
    else
    {
      uint64_t v37 = *(void *)(v0 + 64);
      uint64_t v38 = *(void *)(v0 + 40);
      uint64_t v39 = *(void *)(v0 + 48);
      v34(v35, enum case for GroupID.oneToOne(_:), v36);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }
    uint64_t v40 = *(void *)(v0 + 312);
    uint64_t v41 = *(void *)(v0 + 288);
    uint64_t v42 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    Friend.handle.getter();
    uint64_t v43 = Handle.expiresByGroupId.getter();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    uint64_t v44 = *(void *)(v0 + 192);
    uint64_t v45 = *(void *)(v0 + 152);
    uint64_t v46 = *(void *)(v0 + 160);
    uint64_t v47 = *(void *)(v0 + 128);
    uint64_t v48 = *(void *)(v0 + 104);
    uint64_t v49 = *(void *)(v0 + 112);
    if (*(void *)(v43 + 16))
    {
      sub_100122358(*(void *)(v0 + 128));
      char v51 = v50;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
      if (v51)
      {
        (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 104))(*(void *)(v0 + 232), enum case for FollowerState.shared(_:), *(void *)(v0 + 200));
        uint64_t v19 = v112;
LABEL_25:
        (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 240), *(void *)(v0 + 232), *(void *)(v0 + 200));
        goto LABEL_26;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
    }
    uint64_t v19 = v112;
    if (*(unsigned char *)(v0 + 532) == 1) {
      unint64_t v52 = (unsigned int *)&enum case for FollowerState.notShared(_:);
    }
    else {
      unint64_t v52 = (unsigned int *)&enum case for FollowerState.notEligible(_:);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 104))(*(void *)(v0 + 232), *v52, *(void *)(v0 + 200));
    goto LABEL_25;
  }
  int v20 = *(unsigned __int8 *)(v0 + 532);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 208);
  sub_10000A520(*(void *)(v0 + 144), &qword_1003ECFE8);
  id v25 = (unsigned int *)&enum case for FollowerState.notShared(_:);
  if (!v20) {
    id v25 = (unsigned int *)&enum case for FollowerState.notEligible(_:);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v22, *v25, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v21, v22, v23);
LABEL_26:
  uint64_t v53 = *(void *)(v0 + 496);
  uint64_t v54 = *(void *)(v53 + 16);
  if (v54)
  {
    uint64_t v113 = v19;
    uint64_t v55 = *(void *)(v0 + 160);
    uint64_t v57 = *(void (**)(void, uint64_t, void))(v55 + 16);
    uint64_t v56 = v55 + 16;
    uint64_t v58 = v53 + ((*(unsigned __int8 *)(v56 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 64));
    unint64_t v59 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 296) + 8);
    uint64_t v115 = *(void *)(v56 + 56);
    uint64_t v117 = v57;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v60 = *(void *)(v0 + 320);
      uint64_t v61 = *(void *)(v0 + 288);
      v117(*(void *)(v0 + 168), v58, *(void *)(v0 + 152));
      Friend.handle.getter();
      char v62 = static Handle.== infix(_:_:)();
      (*v59)(v60, v61);
      if (v62) {
        break;
      }
      (*(void (**)(void, void))(v56 - 8))(*(void *)(v0 + 168), *(void *)(v0 + 152));
      v58 += v115;
      if (!--v54)
      {
        swift_bridgeObjectRelease();
        uint64_t v63 = 1;
        goto LABEL_33;
      }
    }
    uint64_t v65 = *(void *)(v0 + 160);
    uint64_t v64 = *(void *)(v0 + 168);
    uint64_t v66 = *(void *)(v0 + 152);
    uint64_t v67 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v67, v64, v66);
    uint64_t v63 = 0;
LABEL_33:
    uint64_t v19 = v113;
  }
  else
  {
    uint64_t v63 = 1;
  }
  uint64_t v68 = *(void *)(v0 + 152);
  uint64_t v69 = *(void *)(v0 + 136);
  v11(v69, v63, 1, v68);
  swift_bridgeObjectRelease();
  if (v19(v69, 1, v68) == 1)
  {
    uint64_t v70 = *(void *)(v0 + 280);
    uint64_t v71 = *(void *)(v0 + 248);
    uint64_t v72 = *(void *)(v0 + 256);
    sub_10000A520(*(void *)(v0 + 136), &qword_1003ECFE8);
    uint64_t v73 = (unsigned int *)&enum case for FollowingState.notShared(_:);
LABEL_38:
    (*(void (**)(uint64_t, void, uint64_t))(v72 + 104))(v70, *v73, v71);
    goto LABEL_51;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 136), *(void *)(v0 + 152));
  char CanShareLocation = FriendshipCanShareLocationRequest.isFromGroup.getter();
  if (CanShareLocation == 2)
  {
    uint64_t v70 = *(void *)(v0 + 280);
    uint64_t v71 = *(void *)(v0 + 248);
    uint64_t v72 = *(void *)(v0 + 256);
    (*(void (**)(void, void))(*(void *)(v0 + 160) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 152));
    uint64_t v73 = (unsigned int *)&enum case for FollowingState.shared(_:);
    goto LABEL_38;
  }
  char v75 = CanShareLocation;
  uint64_t v77 = *(void *)(v0 + 48);
  uint64_t v76 = *(void *)(v0 + 56);
  uint64_t v78 = *(void *)(v0 + 40);
  FriendshipCanShareLocationRequest.origin.getter();
  RequestOrigin.origin.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v77 + 88))(v76, v78) == enum case for ClientOrigin.messagesApp(_:))
  {
    if (v75) {
      int64_t v79 = (unsigned int *)&enum case for GroupID.group(_:);
    }
    else {
      int64_t v79 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 112) + 104))(*(void *)(v0 + 120), *v79, *(void *)(v0 + 104));
  }
  else
  {
    uint64_t v81 = *(void *)(v0 + 48);
    uint64_t v80 = *(void *)(v0 + 56);
    uint64_t v82 = *(void *)(v0 + 40);
    (*(void (**)(void, void, void))(*(void *)(v0 + 112) + 104))(*(void *)(v0 + 120), enum case for GroupID.oneToOne(_:), *(void *)(v0 + 104));
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
  }
  uint64_t v84 = *(void *)(v0 + 296);
  uint64_t v83 = *(void *)(v0 + 304);
  uint64_t v85 = *(void *)(v0 + 288);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  Friend.handle.getter();
  uint64_t v86 = Handle.expiresByGroupId.getter();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
  uint64_t v87 = *(void *)(v0 + 176);
  uint64_t v88 = *(void *)(v0 + 152);
  uint64_t v89 = *(void *)(v0 + 160);
  uint64_t v91 = *(void *)(v0 + 112);
  uint64_t v90 = *(void *)(v0 + 120);
  uint64_t v92 = *(void *)(v0 + 104);
  if (!*(void *)(v86 + 16))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
    goto LABEL_49;
  }
  sub_100122358(*(void *)(v0 + 120));
  char v94 = v93;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
  if ((v94 & 1) == 0)
  {
LABEL_49:
    uint64_t v95 = (unsigned int *)&enum case for FollowingState.notShared(_:);
    goto LABEL_50;
  }
  uint64_t v95 = (unsigned int *)&enum case for FollowingState.shared(_:);
LABEL_50:
  uint64_t v96 = *(void *)(v0 + 272);
  uint64_t v97 = *(void *)(v0 + 280);
  uint64_t v98 = *(void *)(v0 + 248);
  uint64_t v99 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v96, *v95, v98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 32))(v97, v96, v98);
LABEL_51:
  uint64_t v111 = *(void *)(v0 + 328);
  uint64_t v100 = *(void *)(v0 + 280);
  uint64_t v109 = *(void *)(v0 + 296);
  uint64_t v110 = *(void *)(v0 + 288);
  uint64_t v101 = *(void *)(v0 + 264);
  uint64_t v102 = *(void *)(v0 + 248);
  uint64_t v103 = *(void *)(v0 + 256);
  uint64_t v104 = *(void *)(v0 + 240);
  uint64_t v106 = *(void *)(v0 + 200);
  uint64_t v105 = *(void *)(v0 + 208);
  (*(void (**)(void, uint64_t, uint64_t))(v105 + 16))(*(void *)(v0 + 216), v104, v106);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))(v101, v100, v102);
  FriendshipState.init(followerState:followingState:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v100, v102);
  (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v111, v110);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v107 = *(uint64_t (**)(void))(v0 + 8);
  return v107();
}

uint64_t sub_1001D8FAC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D9150()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001D9314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Handle();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_100044014(&qword_1003F1568);
  v5[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GroupID();
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[21] = v9;
  void *v9 = v5;
  v9[1] = sub_1001D9554;
  return daemon.getter();
}

uint64_t sub_1001D9554(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 176) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 184) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1001D9730;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001D9730(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[24] = a1;
  v3[25] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_1001DA100;
  }
  else
  {
    uint64_t v6 = v3[6];
    swift_release();
    uint64_t v5 = sub_1001D9858;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001D9858()
{
  if (!v0[5])
  {
    uint64_t v2 = v0[18];
    uint64_t v1 = v0[19];
    uint64_t v3 = v0[17];
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for GroupID.oneToOne(_:), v3);
    GroupID.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  }
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[16];
  swift_bridgeObjectRetain();
  GroupID.init(rawValue:)();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[16];
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v8, enum case for GroupID.defaultId(_:), v9);
    sub_10000A520(v11, &qword_1003F1568);
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 32))(v8, v0[16], v9);
  }
  uint64_t v12 = v0[24];
  return _swift_task_switch(sub_1001D99CC, v12, 0);
}

uint64_t sub_1001D99CC()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 208) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.follower(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001D9B28;
  return sub_100021584(v4, 1);
}

uint64_t sub_1001D9B28(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001D9C5C, v2, 0);
}

uint64_t sub_1001D9C5C()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[13];
    uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[8] + 8);
    uint64_t v43 = *(void *)(v4 + 56);
    uint64_t v44 = v5;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = v0[10];
      uint64_t v9 = v0[7];
      v44(v0[14], v6, v0[12]);
      Friend.handle.getter();
      char v10 = static Handle.== infix(_:_:)();
      (*v7)(v8, v9);
      if (v10) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[14], v0[12]);
      v6 += v43;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v13 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v15 = v0[11];
    uint64_t v14 = v0[12];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v15, v12, v14);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  uint64_t v16 = v0[12];
  uint64_t v17 = v0[13];
  uint64_t v18 = v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v11, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    uint64_t v19 = v0[20];
    uint64_t v20 = v0[17];
    uint64_t v21 = v0[18];
    sub_10000A520(v0[11], &qword_1003ECFE8);
    sub_1000724B8();
    swift_allocError();
    *uint64_t v22 = 14;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v25 = v0[8];
    uint64_t v24 = v0[9];
    uint64_t v26 = v0[7];
    (*(void (**)(void, void, void))(v0[13] + 32))(v0[15], v0[11], v0[12]);
    Friend.handle.getter();
    uint64_t v27 = Handle.expiresByGroupId.getter();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    if (*(void *)(v27 + 16) && (unint64_t v28 = sub_100122358(v0[20]), (v29 & 1) != 0))
    {
      unint64_t v30 = v28;
      uint64_t v31 = v0[2];
      uint64_t v32 = *(void *)(v27 + 56);
      uint64_t v33 = type metadata accessor for Date();
      uint64_t v34 = *(void *)(v33 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v31, v32 + *(void *)(v34 + 72) * v30, v33);
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v33 = type metadata accessor for Date();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = 1;
    }
    uint64_t v36 = v0[20];
    uint64_t v37 = v0[17];
    uint64_t v38 = v0[18];
    uint64_t v39 = v0[15];
    uint64_t v40 = v0[13];
    uint64_t v41 = v0[12];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v34 + 56))(v0[2], v35, 1, v33);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
  }
  return v23();
}

uint64_t sub_1001DA100()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DA1CC(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v3[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FriendshipRequestResult();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001DA2C0, v2, 0);
}

uint64_t sub_1001DA2C0()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[5] = sub_100037004(0xD000000000000017, 0x8000000100377670, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending %{public}s to server", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DA4AC;
  return daemon.getter();
}

uint64_t sub_1001DA4AC(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[15] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[16] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[17] = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[18] = v6;
  uint64_t v7 = sub_100047354(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DA68C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DA68C(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[8];
    return _swift_task_switch(sub_1001DB340, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[21] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DA814;
    return sub_1000EF550();
  }
}

uint64_t sub_1001DA814(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(unsigned char *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DA92C, v2, 0);
}

uint64_t sub_1001DA92C()
{
  uint64_t v9 = v0;
  if (*(unsigned char *)(v0 + 232) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1001DAB6C;
    return daemon.getter();
  }
  else
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000017, 0x8000000100377670, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Manatee is not available!", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000724B8();
    swift_allocError();
    *uint64_t v5 = 15;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1001DAB6C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 184) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 192) = v5;
  uint64_t v6 = type metadata accessor for CommandManager();
  uint64_t v7 = sub_100047354(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v5 = v4;
  v5[1] = sub_1001DAD20;
  uint64_t v8 = *(void *)(v2 + 144);
  uint64_t v9 = *(void *)(v2 + 136);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001DAD20(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[8];
    return _swift_task_switch(sub_1001DB3B8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[27] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DAEAC;
    uint64_t v7 = v3[6];
    uint64_t v8 = v3[7];
    return sub_1000628C0(v7, v8);
  }
}

uint64_t sub_1001DAEAC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1001DB43C;
  }
  else {
    uint64_t v4 = sub_1001DAFD8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DAFD8()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[6], v0[10]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[12];
    uint64_t v15 = v0[11];
    uint64_t v4 = v0[10];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD000000000000017, 0x8000000100377670, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    sub_100047354(&qword_1003ECDE8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s result %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  }

  if (FriendshipRequest.shouldShowAlertIfThisDeviceIsNotBeingUsedToShareLocation.getter())
  {
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
    uint64_t v11 = sub_100047354(qword_1003F11F0, (void (*)(uint64_t))type metadata accessor for FriendshipService);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v9;
    v12[3] = v11;
    v12[4] = v9;
    swift_retain_n();
    sub_10010405C(v8, (uint64_t)&unk_1003F1558, (uint64_t)v12);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1001DB340()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DB3B8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DB43C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DB4C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1001E7C48();
}

uint64_t sub_1001DB550(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for FriendshipRequestResult();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1001DB614, v2, 0);
}

uint64_t sub_1001DB614()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[11] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[4] = sub_100037004(0xD000000000000018, 0x8000000100377650, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending %{public}s to server", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DB800;
  return daemon.getter();
}

uint64_t sub_1001DB800(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 104) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CommandManager();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DB9DC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DB9DC(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[7];
    return _swift_task_switch(sub_1001DBF00, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[17] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DBB68;
    uint64_t v7 = v3[5];
    uint64_t v8 = v3[6];
    return sub_1000628C0(v7, v8);
  }
}

uint64_t sub_1001DBB68()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_1001DBF70;
  }
  else {
    uint64_t v4 = sub_1001DBC94;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DBC94()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0[9] + 16))(v0[10], v0[5], v0[8]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[10];
    uint64_t v10 = v0[9];
    uint64_t v4 = v0[8];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[2] = sub_100037004(0xD000000000000018, 0x8000000100377650, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    sub_100047354(&qword_1003ECDE8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s result %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  }
  swift_release();

  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001DBF00()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DBF70()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DBFE0(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_1001DC004, v2, 0);
}

uint64_t sub_1001DC004()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[7] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD00000000000001ALL, 0x8000000100377690, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending %{public}s to server", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DC1F0;
  return daemon.getter();
}

uint64_t sub_1001DC1F0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[9] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[10] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[11] = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[12] = v6;
  uint64_t v7 = sub_100047354(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DC3D0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DC3D0(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[6];
    return _swift_task_switch(sub_1001DCD78, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[15] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DC558;
    return sub_1000EF550();
  }
}

uint64_t sub_1001DC558(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(unsigned char *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC670, v2, 0);
}

uint64_t sub_1001DC670()
{
  uint64_t v9 = v0;
  if (*(unsigned char *)(v0 + 184) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1001DC89C;
    return daemon.getter();
  }
  else
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD00000000000001ALL, 0x8000000100377690, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Manatee is not available!", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000724B8();
    swift_allocError();
    *uint64_t v5 = 15;
    swift_willThrow();
    swift_release();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1001DC89C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 136) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 144) = v5;
  uint64_t v6 = type metadata accessor for CommandManager();
  uint64_t v7 = sub_100047354(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v5 = v4;
  v5[1] = sub_1001DCA50;
  uint64_t v8 = *(void *)(v2 + 96);
  uint64_t v9 = *(void *)(v2 + 88);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001DCA50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[6];
    return _swift_task_switch(sub_1001DCDDC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[21] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DCBDC;
    uint64_t v7 = v3[4];
    uint64_t v8 = v3[5];
    return sub_100065A90(v7, v8);
  }
}

uint64_t sub_1001DCBDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1001DCE4C;
  }
  else {
    uint64_t v4 = sub_1001DCD08;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DCD08()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DCD78()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DCDDC()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DCE4C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DCEBC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1001DCEE0, v2, 0);
}

uint64_t sub_1001DCEE0()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000019, 0x8000000100377630, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending %{public}s to server", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DD0C8;
  return daemon.getter();
}

uint64_t sub_1001DD0C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CommandManager();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DD2A4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DD2A4(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_1001D6B10, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DD430;
    uint64_t v7 = v3[3];
    uint64_t v8 = v3[4];
    return sub_10006B4B8(v7, v8);
  }
}

uint64_t sub_1001DD430()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_1001DD5C0;
  }
  else {
    uint64_t v4 = sub_1001DD55C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DD55C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DD5C0()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DD624(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Handle();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Friend();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001DD79C, v1, 0);
}

uint64_t sub_1001DD79C()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[5] = sub_100037004(0xD000000000000015, 0x8000000100377610, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DD988;
  return daemon.getter();
}

uint64_t sub_1001DD988(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[20] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[21] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[22] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[23] = v6;
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DDB68;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DDB68(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[24] = a1;
  v4[25] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = sub_1001DE9F4;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_1001DDCA0;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001DDCA0()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 208) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DDDFC;
  return sub_100021584(v4, 1);
}

uint64_t sub_1001DDDFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001DDF30, v2, 0);
}

uint64_t sub_1001DDF30()
{
  uint64_t v39 = v0;
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[15];
    uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[9] + 8);
    uint64_t v35 = *(void *)(v4 + 56);
    uint64_t v36 = v5;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = v0[12];
      uint64_t v9 = v0[8];
      v36(v0[16], v6, v0[14]);
      Friend.handle.getter();
      char v10 = static Handle.== infix(_:_:)();
      (*v7)(v8, v9);
      if (v10) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[16], v0[14]);
      v6 += v35;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v13 = v0[15];
    uint64_t v12 = v0[16];
    uint64_t v15 = v0[13];
    uint64_t v14 = v0[14];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v15, v12, v14);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  uint64_t v16 = v0[14];
  uint64_t v17 = v0[15];
  uint64_t v18 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v11, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    uint64_t v20 = v0[9];
    uint64_t v19 = v0[10];
    uint64_t v21 = v0[8];
    uint64_t v22 = v0[6];
    sub_10000A520(v0[13], &qword_1003ECFE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v27 = v0[9];
    uint64_t v26 = v0[10];
    if (v25)
    {
      uint64_t v37 = v0[8];
      uint64_t v28 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446723;
      v0[2] = sub_100037004(0xD000000000000015, 0x8000000100377610, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2160;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 22) = 2081;
      uint64_t v29 = Handle.identifier.getter();
      v0[4] = sub_100037004(v29, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v37);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s missing following serverID for %{private,mask.hash}s!", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v27 + 8))(v0[10], v0[8]);
    }

    sub_1000724B8();
    swift_allocError();
    *uint64_t v32 = 7;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(void))v0[1];
    return v33();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[15] + 32))(v0[17], v0[13], v0[14]);
    uint64_t v31 = (void *)swift_task_alloc();
    v0[29] = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_1001DE3E8;
    return daemon.getter();
  }
}

uint64_t sub_1001DE3E8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 240) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 248) = v5;
  uint64_t v6 = type metadata accessor for NIRangingService();
  uint64_t v7 = sub_100047354(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *uint64_t v5 = v4;
  v5[1] = sub_1001DE59C;
  uint64_t v8 = *(void *)(v2 + 184);
  uint64_t v9 = *(void *)(v2 + 176);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001DE59C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 256) = a1;
  *(void *)(v4 + 264) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_1001DEAA0;
  }
  else {
    uint64_t v6 = sub_1001DE6EC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001DE6EC()
{
  Friend.handle.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001DE790;
  uint64_t v2 = *(void *)(v0 + 88);
  return sub_10029A35C(v2);
}

uint64_t sub_1001DE790()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[11];
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_1001DEB6C;
  }
  else {
    uint64_t v7 = sub_1001DE90C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001DE90C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001DE9F4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DEAA0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001DEB6C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001DEC44()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_1001DEC64, v0, 0);
}

uint64_t sub_1001DEC64()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000013, 0x80000001003775F0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DEE4C;
  return daemon.getter();
}

uint64_t sub_1001DEE4C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 40) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NIRangingService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DF028;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DF028(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[7] = a1;
  v3[8] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[3];
    return _swift_task_switch(sub_1001E7C40, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[9] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001DF1B0;
    return sub_10029B790();
  }
}

uint64_t sub_1001DF1B0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1001E7C44;
  }
  else {
    uint64_t v4 = sub_1001E7C30;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DF2DC()
{
  return _swift_task_switch(sub_1001DF2F8, v0, 0);
}

uint64_t sub_1001DF2F8()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD00000000000001ALL, 0x8000000100377550, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s NOT stopping config ranging session. App needs to stop calling this", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001DF4AC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_1001DF4F4, v0, 0);
}

uint64_t sub_1001DF4F4()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000014, 0x80000001003775D0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001DF6DC;
  return daemon.getter();
}

uint64_t sub_1001DF6DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 48) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001DF8B8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001DF8B8(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[3];
    uint64_t v5 = sub_1001DFF54;
  }
  else
  {
    uint64_t v6 = v3[3];
    swift_release();
    uint64_t v5 = sub_1001DF9E0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001DF9E0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = swift_allocObject();
  v0[10] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001DFAE0;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001DFAE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_1001DFFB8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_release();
    uint64_t v4 = sub_1001DFC08;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DFC08()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001DFCB0;
  return sub_1000EB6D4(0xD00000000000001ELL, 0x80000001003775B0);
}

uint64_t sub_1001DFCB0()
{
  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_1001E0024, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[15] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1001DFE28;
    return sub_1000F2DA4((uint64_t)&off_1003DD548);
  }
}

uint64_t sub_1001DFE28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1001E0088;
  }
  else {
    uint64_t v4 = sub_100128D64;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001DFF54()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001DFFB8()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E0024()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E0088()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E00EC(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001E01AC, 0, 0);
}

uint64_t sub_1001E01AC()
{
  uint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000014, 0x80000001003775D0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Waiting for CloudKit to be available", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_1001E038C, v5, 0);
}

uint64_t sub_1001E038C()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E043C;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_1001E043C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E0570;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_1001E05E8;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E0570()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  return _swift_task_switch(sub_1001E7C38, 0, 0);
}

uint64_t sub_1001E05E8()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000014, 0x80000001003775D0, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s CloudKit is available.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001E0760(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  v2[18] = *v1;
  uint64_t v3 = type metadata accessor for CloudKitCoordinator.Database();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v2[22] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FriendSharedSecretsRecord();
  v2[24] = v4;
  v2[25] = *(void *)(v4 - 8);
  v2[26] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[28] = v5;
  v2[29] = *(void *)(v5 - 8);
  v2[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  v2[31] = v6;
  v2[32] = *(void *)(v6 - 8);
  v2[33] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v2[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v2[35] = v7;
  v2[36] = *(void *)(v7 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  return _swift_task_switch(sub_1001E0AB8, v1, 0);
}

uint64_t sub_1001E0AB8()
{
  uint64_t v21 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[36];
  uint64_t v5 = type metadata accessor for Logger();
  v0[43] = sub_100044058(v5, (uint64_t)qword_10040B7E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[44] = v6;
  v0[45] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[42];
  uint64_t v11 = v0[36];
  if (v9)
  {
    uint64_t v18 = v0[35];
    os_log_type_t type = v8;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[13] = sub_100037004(0xD000000000000015, 0x8000000100377590, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[14] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    uint64_t v13 = Handle.identifier.getter();
    v0[15] = sub_100037004(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v0[35]);
  }

  v0[46] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[47] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1001E0D90;
  return daemon.getter();
}

uint64_t sub_1001E0D90(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[48] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[49] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[50] = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[51] = v6;
  uint64_t v7 = sub_100047354(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001E0F70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E0F70(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[17];
    uint64_t v5 = sub_1001E3240;
  }
  else
  {
    uint64_t v6 = v3[17];
    swift_release();
    uint64_t v5 = sub_1001E1098;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001E1098()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[18];
  uint64_t v3 = swift_allocObject();
  v0[54] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[55] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001E1198;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1001E1198()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = sub_1001E3364;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_release();
    uint64_t v4 = sub_1001E12C0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E12C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E1350;
  return daemon.getter();
}

uint64_t sub_1001E1350(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 464) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 472) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v5 = v4;
  v5[1] = sub_1001E1504;
  uint64_t v8 = *(void *)(v2 + 408);
  uint64_t v9 = *(void *)(v2 + 400);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001E1504(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[60] = a1;
  v3[61] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[17];
    uint64_t v5 = sub_1001E3494;
  }
  else
  {
    uint64_t v6 = v3[17];
    swift_release();
    uint64_t v5 = sub_1001E162C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001E162C()
{
  (*(void (**)(void, void, void))(v0[32] + 104))(v0[33], enum case for HandleType.following(_:), v0[31]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[62] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E16F0;
  uint64_t v3 = v0[33];
  uint64_t v2 = v0[34];
  uint64_t v4 = v0[16];
  return sub_100110598(v2, v4, v3, 0);
}

uint64_t sub_1001E16F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264);
  uint64_t v2 = *(void *)(*(void *)v0 + 256);
  uint64_t v3 = *(void *)(*(void *)v0 + 248);
  uint64_t v4 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1001E185C, v4, 0);
}

uint64_t sub_1001E185C()
{
  uint64_t v40 = v0;
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
    uint64_t v5 = v0[37];
    uint64_t v6 = v0[16];
    sub_10000A520(v3, &qword_1003F3B30);
    v4(v5, v6, v2);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[37];
    if (v9)
    {
      uint64_t v35 = v0[35];
      uint64_t v36 = (void (*)(uint64_t, uint64_t))v0[46];
      uint64_t v11 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      v0[2] = sub_100037004(0xD000000000000015, 0x8000000100377590, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = Handle.identifier.getter();
      v0[4] = sub_100037004(v12, v13, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36(v10, v35);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing serverID for handle: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[46])(v0[37], v0[35]);
    }

    sub_1000724B8();
    swift_allocError();
    *uint64_t v28 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = (uint64_t (*)(void))v0[1];
    return v33();
  }
  uint64_t v15 = v0[28];
  uint64_t v14 = v0[29];
  uint64_t v16 = v0[27];
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[41], v3, v2);
  Handle.peerID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15) == 1)
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
    uint64_t v18 = v0[38];
    uint64_t v19 = v0[35];
    uint64_t v20 = v0[16];
    sub_10000A520(v0[27], &qword_1003ECFB8);
    v17(v18, v20, v19);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = v0[38];
    if (v23)
    {
      uint64_t v37 = v0[35];
      uint64_t v38 = (void (*)(uint64_t, uint64_t))v0[46];
      uint64_t v25 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446723;
      v0[5] = sub_100037004(0xD000000000000015, 0x8000000100377590, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2160;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2081;
      uint64_t v26 = Handle.identifier.getter();
      v0[7] = sub_100037004(v26, v27, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v38(v24, v37);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s Missing peerID for handle: %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[46])(v0[38], v0[35]);
    }

    uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v30 = v0[41];
    uint64_t v31 = v0[35];
    sub_1000724B8();
    swift_allocError();
    *uint64_t v32 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    v29(v30, v31);
    goto LABEL_14;
  }
  (*(void (**)(void, void, void))(v0[29] + 32))(v0[30], v0[27], v0[28]);
  return _swift_task_switch(sub_1001E1EC0, 0, 0);
}

uint64_t sub_1001E1EC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[63] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E1F60;
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[23];
  return sub_1000F6B40(v3, v2);
}

uint64_t sub_1001E1F60()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_1001E24A4;
  }
  else {
    uint64_t v4 = sub_1001E208C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E208C()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[25] + 48))(v1, 1, v0[24]) == 1)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
    uint64_t v3 = v0[39];
    uint64_t v4 = v0[35];
    uint64_t v5 = v0[16];
    sub_10000A520(v1, &qword_1003EEEB8);
    v2(v3, v5, v4);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[39];
    if (v8)
    {
      uint64_t v24 = v0[35];
      uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[46];
      uint64_t v10 = swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446723;
      v0[8] = sub_100037004(0xD000000000000015, 0x8000000100377590, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2160;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2081;
      uint64_t v11 = Handle.identifier.getter();
      v0[10] = sub_100037004(v11, v12, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v9, v24);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing friendSharedSecretsRecord for handle: %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[46])(v0[39], v0[35]);
    }

    uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v16 = v0[41];
    uint64_t v17 = v0[35];
    uint64_t v18 = v0[29];
    uint64_t v19 = v0[30];
    uint64_t v20 = v0[28];
    sub_1000724B8();
    swift_allocError();
    *uint64_t v21 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    v25(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v13 = v0[52];
    uint64_t v14 = v0[26];
    sub_1000E21C0(v1, v14);
    uint64_t v15 = swift_task_alloc();
    v0[65] = v15;
    *(void *)(v15 + 16) = v14;
    return _swift_task_switch(sub_1001E2618, v13, 0);
  }
}

uint64_t sub_1001E24A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[35];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[28];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1001E2618()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[66] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E26E0;
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[22];
  return v5(v3, &unk_1003F14D0, v2);
}

uint64_t sub_1001E26E0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 416);
    uint64_t v4 = sub_1001E2A78;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    swift_task_dealloc();
    uint64_t v4 = sub_1001E2808;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E2808()
{
  uint64_t v1 = v0[52];
  (*(void (**)(void, void, void))(v0[20] + 104))(v0[21], enum case for CloudKitCoordinator.Database.private(_:), v0[19]);
  return _swift_task_switch(sub_1001E2890, v1, 0);
}

uint64_t sub_1001E2890()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[68] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E2940;
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  return v5(v3, v2);
}

uint64_t sub_1001E2940()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[52];
    uint64_t v4 = sub_1001E2C78;
  }
  else
  {
    uint64_t v5 = v2[17];
    (*(void (**)(void, void))(v2[20] + 8))(v2[21], v2[19]);
    uint64_t v4 = sub_1001E2EA4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E2A78()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001E2AE4, v1, 0);
}

uint64_t sub_1001E2AE4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[35];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[26];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  sub_1001E7AB0(v7, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001E2C78()
{
  uint64_t v1 = v0[17];
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  return _swift_task_switch(sub_1001E2CF4, v1, 0);
}

uint64_t sub_1001E2CF4()
{
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[46];
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[35];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[22];
  swift_release();
  swift_release();
  sub_10000A520(v7, &qword_1003EF468);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v10(v1, v2);
  sub_1001E7AB0(v6, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001E2EA4()
{
  uint64_t v26 = v0;
  (*(void (**)(void, void, void))(v0 + 352))(*(void *)(v0 + 320), *(void *)(v0 + 128), *(void *)(v0 + 280));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 328);
    uint64_t v19 = *(void *)(v0 + 232);
    uint64_t v20 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 88) = 1752392040;
    uint64_t v25 = v5;
    *(_DWORD *)uint64_t v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v6 = Handle.identifier.getter();
    *(void *)(v0 + 96) = sub_100037004(v6, v7, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v17(v3, v16);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully removed peer token for handle: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
    sub_10000A520(v18, &qword_1003EF468);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
    v17(v23, v16);
  }
  else
  {
    BOOL v8 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v24 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 176);
    swift_release();

    v8(v9, v10);
    swift_release();
    sub_10000A520(v13, &qword_1003EF468);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v12);
    v8(v24, v10);
  }
  sub_1001E7AB0(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1001E3240()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E3364()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E3494()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E35C4(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001E3684, 0, 0);
}

uint64_t sub_1001E3684()
{
  BOOL v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000015, 0x8000000100377590, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Waiting for CloudKit to be available", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_1001E3864, v5, 0);
}

uint64_t sub_1001E3864()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E3914;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_1001E3914()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E3A48;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_1001E3B24;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E3A48()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  return _swift_task_switch(sub_1001E3AC0, 0, 0);
}

uint64_t sub_1001E3AC0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E3B24()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000015, 0x8000000100377590, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s CloudKit is available.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001E3C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v6 = sub_100047354(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return CloudKitChangeSet.Adaptor.delete<A>(record:)(a2, v5, v6);
}

uint64_t sub_1001E3D90(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(unsigned char *)(v2 + 84) = a1;
  return _swift_task_switch(sub_1001E3DB4, v1, 0);
}

uint64_t sub_1001E3DB4()
{
  uint64_t v9 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 84);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000019, 0x8000000100377570, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 80) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s force? %{BOOL}d", (uint8_t *)v5, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001E3FC8;
  return daemon.getter();
}

uint64_t sub_1001E3FC8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 40) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003F14A8, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001E41A4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E41A4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    return _swift_task_switch(sub_1001CF64C, v6, 0);
  }
  else
  {
    swift_release();
    *(void *)(v4 + 64) = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v4 + 72) = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1001E4338;
    char v8 = *(unsigned char *)(v4 + 84);
    return sub_1002CA9A0(v8);
  }
}

uint64_t sub_1001E4338()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100128D64, v1, 0);
}

uint64_t sub_1001E4448(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = sub_100044014(&qword_1003F1530);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Friend();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Handle();
  v2[27] = v5;
  v2[28] = *(void *)(v5 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_1001E4690, v1, 0);
}

uint64_t sub_1001E4690()
{
  uint64_t v21 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v5 = type metadata accessor for Logger();
  v0[34] = sub_100044058(v5, (uint64_t)qword_10040B7E0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[35] = v6;
  v0[36] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[28];
  if (v9)
  {
    uint64_t v18 = v0[27];
    os_log_type_t type = v8;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[9] = sub_100037004(0x656B6F5472656570, 0xEF293A726F66286ELL, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[10] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    uint64_t v13 = Handle.identifier.getter();
    v0[11] = sub_100037004(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for handle: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v0[27]);
  }

  v0[37] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[38] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1001E4970;
  return daemon.getter();
}

uint64_t sub_1001E4970(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[39] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[40] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[41] = v4;
  uint64_t v5 = type metadata accessor for NITokenService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[42] = v6;
  uint64_t v7 = sub_100047354(&qword_1003F1518, (void (*)(uint64_t))type metadata accessor for NITokenService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001E4B50;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E4B50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[13];
    return _swift_task_switch(sub_1001E5E24, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[45] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_1001E4CC4;
    return daemon.getter();
  }
}

uint64_t sub_1001E4CC4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 368) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 376) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100047354(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v5 = v4;
  v5[1] = sub_1001E4E78;
  uint64_t v8 = *(void *)(v2 + 336);
  uint64_t v9 = *(void *)(v2 + 328);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1001E4E78(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[48] = a1;
  v4[49] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[13];
    uint64_t v6 = sub_1001E5F38;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_1001E4FB0;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001E4FB0()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 400) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001E510C;
  return sub_100021584(v4, 1);
}

uint64_t sub_1001E510C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001E5240, v2, 0);
}

uint64_t sub_1001E5240()
{
  uint64_t v42 = v0;
  uint64_t v1 = v0[52];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[24];
    uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v39 = v5;
    uint64_t v37 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v8 = v0[32];
      uint64_t v9 = v0[27];
      v39(v0[25], v6, v0[23]);
      Friend.handle.getter();
      char v10 = static Handle.== infix(_:_:)();
      v7(v8, v9);
      if (v10) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[25], v0[23]);
      v6 += v37;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v13 = v0[24];
    uint64_t v12 = v0[25];
    uint64_t v15 = v0[22];
    uint64_t v14 = v0[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v15, v12, v14);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  uint64_t v16 = v0[23];
  uint64_t v17 = v0[24];
  uint64_t v18 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v11, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v20 = v0[29];
    uint64_t v21 = v0[27];
    uint64_t v22 = v0[12];
    sub_10000A520(v0[22], &qword_1003ECFE8);
    v19(v20, v22, v21);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = v0[29];
    if (v25)
    {
      uint64_t v38 = v0[27];
      uint64_t v40 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v27 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446723;
      v0[2] = sub_100037004(0x656B6F5472656570, 0xEF293A726F66286ELL, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2160;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2081;
      uint64_t v28 = Handle.identifier.getter();
      v0[4] = sub_100037004(v28, v29, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v40(v26, v38);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s missing following serverID for %{private,mask.hash}s!", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[37])(v0[29], v0[27]);
    }

    sub_1000724B8();
    swift_allocError();
    *uint64_t v35 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[26], v0[22], v0[23]);
    Friend.handle.getter();
    static ReferenceClock.now.getter();
    uint64_t v30 = (void *)swift_task_alloc();
    v0[53] = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1001E5798;
    uint64_t v31 = v0[31];
    uint64_t v32 = v0[21];
    uint64_t v33 = v0[16];
    return sub_1002DB10C(v32, v31, v33);
  }
}

uint64_t sub_1001E5798()
{
  uint64_t v2 = (void *)*v1;
  v2[54] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[37];
  uint64_t v4 = v2[31];
  uint64_t v5 = v2[28];
  uint64_t v6 = v2[27];
  uint64_t v7 = v2[13];
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
  if (v0)
  {
    v3(v4, v6);
    uint64_t v8 = sub_1001E6058;
  }
  else
  {
    v2[55] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v3(v4, v6);
    uint64_t v8 = sub_1001E59AC;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1001E59AC()
{
  uint64_t v35 = v0;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(void, void, void))(v0 + 280))(*(void *)(v0 + 240), *(void *)(v0 + 96), *(void *)(v0 + 216));
  sub_1001E79E0(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v32 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 184);
    uint64_t v27 = *(void *)(v0 + 152);
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(void *)(v0 + 40) = 1752392040;
    uint64_t v34 = v29;
    *(_DWORD *)uint64_t v6 = 141558787;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    uint64_t v7 = Handle.identifier.getter();
    *(void *)(v0 + 48) = sub_100037004(v7, v8, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26(v5, v25);
    *(_WORD *)(v6 + 22) = 2160;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 32) = 2081;
    sub_1001E79E0(v28, v27);
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = sub_100037004(v9, v10, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000A520(v28, &qword_1003F1530);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{private,mask.hash}s token: %{private,mask.hash}s", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v15 = v3;
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 160);
    swift_release();
    swift_release();

    sub_10000A520(v18, &qword_1003F1530);
    v11(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
  }
  uint64_t v19 = *(void *)(v0 + 144);
  sub_1001E7A48(*(void *)(v0 + 168), v19);
  uint64_t v20 = type metadata accessor for DiscoveryToken(0);
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20);
  uint64_t v22 = *(id **)(v0 + 144);
  if (v21 == 1)
  {
    sub_10000A520(*(void *)(v0 + 144), &qword_1003F1530);
    id v33 = 0;
  }
  else
  {
    id v33 = *v22;
    sub_1001E7AB0((uint64_t)v22, type metadata accessor for DiscoveryToken);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(id))(v0 + 8);
  return v23(v33);
}

uint64_t sub_1001E5E24()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E5F38()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E6058()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001E6198()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1001E6258, v0, 0);
}

uint64_t sub_1001E6258()
{
  unint64_t v8 = v0;
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[5] = sub_100037004(0x6B6F5472656E776FLL, 0xEC00000029286E65, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001E6448;
  return daemon.getter();
}

uint64_t sub_1001E6448(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 96) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 104) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NITokenService();
  uint64_t v6 = sub_100047354(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047354(&qword_1003F1518, (void (*)(uint64_t))type metadata accessor for NITokenService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1001E6624;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E6624(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_1001E6B74;
  }
  else
  {
    uint64_t v6 = v3[6];
    swift_release();
    uint64_t v5 = sub_1001E674C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001E674C()
{
  static ReferenceClock.now.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001E67EC;
  return sub_1002DB264();
}

uint64_t sub_1001E67EC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 72);
  uint64_t v6 = *(void *)(*v2 + 64);
  uint64_t v7 = *(void *)(*v2 + 56);
  *(void *)(v4 + 136) = a1;
  *(void *)(v4 + 144) = v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = *(void *)(v3 + 48);
  if (v1) {
    uint64_t v9 = sub_1001E6BE4;
  }
  else {
    uint64_t v9 = sub_1001E697C;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_1001E697C()
{
  uint64_t v13 = v0;
  id v1 = *(id *)(v0 + 136);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    *(void *)(v0 + 24) = v4;
    id v6 = v1;
    sub_100044014(&qword_1003F1520);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 32) = sub_100037004(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Owner token: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_release();

  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v10 = *(void *)(v0 + 136);
  return v9(v10);
}

uint64_t sub_1001E6B74()
{
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E6BE4()
{
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E6C54(uint64_t a1, uint64_t a2)
{
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = sub_10004A274;
  v6[5] = a2;
  v6[6] = v2;
  v6[4] = a1;
  return _swift_task_switch(sub_1001DC004, v2, 0);
}

uint64_t sub_1001E6D10(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001E7C34;
  v4[4] = a1;
  v4[5] = v1;
  return _swift_task_switch(sub_1001D6B94, v1, 0);
}

uint64_t sub_1001E6DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1001D7380(a1, a2);
}

uint64_t sub_1001E6E64(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1001E6E84, v1, 0);
}

uint64_t sub_1001E6E84()
{
  uint64_t v1 = *(void *)(v0 + 16);
  static Date.now.getter();
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001E6F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10004A274;
  return sub_1001D9314(a1, a2, a3, a4);
}

uint64_t sub_1001E6FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1001DA1CC(a1, a2);
}

uint64_t sub_1001E7094(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1001DB550(a1, a2);
}

uint64_t sub_1001E713C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100018CD0;
  v6[4] = a2;
  v6[5] = v2;
  v6[3] = a1;
  return _swift_task_switch(sub_1001DCEE0, v2, 0);
}

uint64_t sub_1001E71F8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001E7C34;
  return sub_1001E4448(a1);
}

uint64_t sub_1001E728C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000CF3B8;
  return sub_1001E6198();
}

uint64_t sub_1001E7318(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1001DD624(a1);
}

uint64_t sub_1001E73AC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  v2[3] = v0;
  return _swift_task_switch(sub_1001DEC64, v0, 0);
}

uint64_t sub_1001E7454()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  v2[3] = v0;
  return _swift_task_switch(sub_1001D6490, v0, 0);
}

uint64_t sub_1001E74FC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  v2[3] = v0;
  v2[4] = *v0;
  return _swift_task_switch(sub_1001DF4F4, v0, 0);
}

uint64_t sub_1001E75CC(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1001E0760(a1);
}

uint64_t sub_1001E7660(char a1)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10004A274;
  *(void *)(v4 + 24) = v1;
  *(unsigned char *)(v4 + 84) = a1;
  return _swift_task_switch(sub_1001E3DB4, v1, 0);
}

uint64_t sub_1001E7710()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  return _swift_task_switch(sub_1001DF2F8, v0, 0);
}

uint64_t sub_1001E77B4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E77EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1001E35C4(a1, v4);
}

uint64_t sub_1001E7898(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100018CD0;
  return sub_1001E3C9C(a1, v4);
}

uint64_t sub_1001E7934(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1001E00EC(a1, v4);
}

uint64_t sub_1001E79E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F1530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E7A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F1530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E7AB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001E7B10()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001E7B50()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100018CD0;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  return sub_1001E7C48();
}

uint64_t sub_1001E7C24(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001E7C48()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Device();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  sub_100044014(&qword_1003EFCD0);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1001E7D48, v0, 0);
}

uint64_t sub_1001E7D48()
{
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10] = sub_100044058(v1, (uint64_t)qword_10040B7E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SwitchMeDeviceAlert: Checking if user should be prompted.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[11] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001E7EA0;
  uint64_t v6 = v0[9];
  return sub_1001E87C0(v6);
}

uint64_t sub_1001E7EA0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1001E83C8;
  }
  else {
    uint64_t v4 = sub_1001E7FCC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E7FCC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_1001EAE4C(v0[9], v1);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[8];
  if (v4 == 1)
  {
    sub_1001604E8(v0[8]);
LABEL_3:
    uint64_t v6 = (void *)swift_task_alloc();
    v0[13] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1001E8220;
    uint64_t v7 = v0[9];
    return sub_1001E924C(v7);
  }
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  char v12 = Device.isThisDevice.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v5, v11);
  uint64_t v14 = v0[7];
  uint64_t v13 = v0[8];
  uint64_t v15 = v0[5];
  uint64_t v16 = v0[6];
  if (v12)
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v17(v0[7], v0[5]);
    v17(v13, v15);
  }
  else
  {
    char v18 = Device.isCompanion.getter();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v19(v14, v15);
    v19(v13, v15);
    if ((v18 & 1) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "SwitchMeDeviceAlert: This device is already used to share location.", v22, 2u);
    swift_slowDealloc();
  }

  sub_1001604E8(v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1001E8220()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    int v4 = sub_1001E85C0;
  }
  else {
    int v4 = sub_1001E834C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E834C()
{
  sub_1001604E8(*(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E83C8()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[12];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)int v4 = 136446210;
    uint64_t v10 = v5;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SwitchMeDeviceAlert: error occurred while getting the current device: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001E85C0()
{
  uint64_t v11 = v0;
  sub_1001604E8(v0[9]);
  uint64_t v1 = v0[14];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)int v4 = 136446210;
    uint64_t v10 = v5;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SwitchMeDeviceAlert: error occurred while getting the current device: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001E87C0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_100044014(&qword_1003EFCD0);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Device();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  int v4 = (void *)swift_task_alloc();
  v2[8] = v4;
  *int v4 = v2;
  v4[1] = sub_1001E88E0;
  return daemon.getter();
}

uint64_t sub_1001E88E0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 72) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for SettingsService();
  uint64_t v6 = sub_10004739C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004739C(&qword_1003F15A8, (void (*)(uint64_t))type metadata accessor for SettingsService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001E8ABC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E8ABC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[11] = a1;
  v3[12] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[3];
    return _swift_task_switch(sub_1001E90C0, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[13] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001E8C4C;
    uint64_t v7 = v3[4];
    return sub_1001EA970(v7, 1);
  }
}

uint64_t sub_1001E8C4C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_1001E9144;
  }
  else {
    uint64_t v3 = sub_1001E8D74;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1001E8D74()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1001604E8(v3);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[15] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001E8F1C;
    uint64_t v5 = v0[2];
    return sub_1001EA970(v5, 0);
  }
  else
  {
    uint64_t v7 = v0[7];
    uint64_t v8 = v0[2];
    swift_release();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v9(v7, v3, v1);
    v9(v8, v7, v1);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v8, 0, 1, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1001E8F1C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1001E91C8;
  }
  else {
    uint64_t v4 = sub_1001E9048;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E9048()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E90C0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E9144()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E91C8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001E924C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  sub_100044014(&qword_1003EFCD0);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001E930C, v1, 0);
}

uint64_t sub_1001E930C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1001EAE4C(*(void *)(v0 + 40), v1);
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 56);
  if (v4 == 1)
  {
    sub_1001604E8(*(void *)(v0 + 56));
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = Device.deviceName.getter();
    unint64_t v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v9 = sub_1001EAEB4(v6, v7);
  *(void *)(v0 + 64) = v9;
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_16:
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)(v0 + 16);
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v0 + 72) = sub_100044058(v11, (uint64_t)qword_10040B7E0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SwitchMeDeviceAlert: Waiting for user response", v14, 2u);
    swift_slowDealloc();
  }

  void *v10 = 0;
  SInt32 v15 = CFUserNotificationReceiveResponse(v9, 0.0, (CFOptionFlags *)(v0 + 16));
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    char v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v18 = 67240192;
    *(_DWORD *)(v0 + 96) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SwitchMeDeviceAlert: User result received: %{public}d", v18, 8u);
    swift_slowDealloc();
  }

  if (v15)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v20))
    {
LABEL_15:

      goto LABEL_16;
    }
    os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v21 = 0;
    uint64_t v22 = "SwitchMeDeviceAlert: Unexpected result";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
    uint64_t v23 = v9;
    swift_slowDealloc();
    uint64_t v9 = (__CFUserNotification *)v19;
    uint64_t v19 = v23;
    goto LABEL_15;
  }
  if (*v10 == 2)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_15;
    }
    os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v21 = 0;
    uint64_t v22 = "SwitchMeDeviceAlert: User chose not to switch my device";
    goto LABEL_14;
  }
  if (*v10)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_15;
    }
    os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v21 = 0;
    uint64_t v22 = "SwitchMeDeviceAlert: Unexpected response";
    goto LABEL_14;
  }
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1001E97A4;
  return sub_1001E9C40();
}

uint64_t sub_1001E97A4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    int v4 = sub_1001E9A14;
  }
  else {
    int v4 = sub_1001E98FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001E98FC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  int v4 = *(void **)(v0 + 64);
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SwitchMeDeviceAlert: Switched me device to this device", v5, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001E9A14()
{
  uint64_t v12 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 88);
    int v4 = *(void **)(v0 + 64);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v11 = v6;
    *(void *)(v0 + 24) = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 32) = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SwitchMeDeviceAlert: Failed to change me device: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1001E9C40()
{
  v1[4] = v0;
  sub_100044014(&qword_1003EFCD0);
  v1[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DeviceWithCompanion();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Device();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  int v4 = (void *)swift_task_alloc();
  v1[12] = v4;
  *int v4 = v1;
  v4[1] = sub_1001E9DBC;
  return daemon.getter();
}

uint64_t sub_1001E9DBC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 104) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for SettingsService();
  uint64_t v6 = sub_10004739C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004739C(&qword_1003F15A8, (void (*)(uint64_t))type metadata accessor for SettingsService);
  *uint64_t v3 = v9;
  v3[1] = sub_1001E9F98;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1001E9F98(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[4];
    return _swift_task_switch(sub_1001EA7AC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[17] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1001EA124;
    uint64_t v7 = v3[8];
    return sub_10033E708(v7);
  }
}

uint64_t sub_1001EA124()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v4 = sub_1001EA838;
  }
  else {
    uint64_t v4 = sub_1001EA250;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001EA250()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  DeviceWithCompanion.thisDevice.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    sub_1001604E8(v0[5]);
    sub_1000715BC();
    swift_allocError();
    *uint64_t v7 = 9;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 32))(v0[11], v0[5], v0[9]);
    uint64_t v10 = Device.identifier.getter();
    unint64_t v12 = v11;
    v0[19] = v11;
    if (qword_1003EC078 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100044058(v13, (uint64_t)qword_10040B7E0);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      swift_bridgeObjectRetain();
      v0[3] = sub_100037004(v10, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Set activeLocationSharingDevice to: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    os_log_type_t v17 = (void *)swift_task_alloc();
    v0[20] = v17;
    *os_log_type_t v17 = v0;
    v17[1] = sub_1001EA5B4;
    return sub_10033EE60(v10, v12);
  }
}

uint64_t sub_1001EA5B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_1001EA8C4;
  }
  else {
    uint64_t v4 = sub_1001EA6FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001EA6FC()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001EA7AC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001EA838()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001EA8C4()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001EA970(uint64_t a1, char a2)
{
  v2[3] = a1;
  uint64_t v5 = type metadata accessor for PreferenceError();
  v2[4] = v5;
  v2[5] = *(void *)(v5 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v2[9] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1001EAA98;
  return sub_10033D6AC(a1, a2);
}

uint64_t sub_1001EAA98()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001EAC68;
  }
  else {
    uint64_t v2 = sub_1001EABAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EABAC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Device();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001EAC68()
{
  v0[2] = v0[10];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (!swift_dynamicCast()) {
    goto LABEL_4;
  }
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[4];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v1, v0[8], v4);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for PreferenceError.missingMeDevice(_:), v4);
  char v5 = static PreferenceError.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v2, v4);
  v6(v1, v4);
  if (v5)
  {
    uint64_t v7 = v0[3];
    swift_errorRelease();
    uint64_t v8 = type metadata accessor for Device();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  else
  {
LABEL_4:
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

uint64_t sub_1001EAE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003EFCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

CFUserNotificationRef sub_1001EAEB4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EC078 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_100044058(v8, (uint64_t)qword_10040B7E0);
  swift_bridgeObjectRetain_n();
  uint64_t v42 = v9;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v44 = a1;
  if (v12)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v48[0] = v45;
    uint64_t v46 = v5;
    *(_DWORD *)uint64_t v13 = 136446210;
    if (a2) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = 0x3E6C696E3CLL;
    }
    if (a2) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)error = sub_100037004(v14, v15, v48);
    uint64_t v5 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Create User Notification to switch me-device (%{public}s)", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v16 = enum case for LocalizationUtility.Table.default(_:);
  os_log_type_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v17(v7, enum case for LocalizationUtility.Table.default(_:), v4);
  uint64_t v46 = static LocalizationUtility.localizedString(key:table:)();
  uint64_t v45 = v18;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  if (a2)
  {
    sub_100044014(&qword_1003EE3F0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_100367D70;
    *(void *)(v20 + 32) = v44;
    *(void *)(v20 + 40) = a2;
    v17(v7, v16, v4);
    swift_bridgeObjectRetain();
    uint64_t v44 = static LocalizationUtility.localizedString(key:table:_:)();
    uint64_t v43 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    v17(v7, v16, v4);
    uint64_t v44 = static LocalizationUtility.localizedString(key:table:)();
    uint64_t v43 = v22;
  }
  v19(v7, v4);
  v17(v7, v16, v4);
  uint64_t v23 = static LocalizationUtility.localizedString(key:table:)();
  uint64_t v25 = v24;
  v19(v7, v4);
  v17(v7, v16, v4);
  uint64_t v26 = static LocalizationUtility.localizedString(key:table:)();
  uint64_t v28 = v27;
  v19(v7, v4);
  error[0] = 0;
  sub_100044014(&qword_1003EE620);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367790;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_25;
  }
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v30;
  uint64_t v31 = v45;
  *(void *)(inited + 48) = v46;
  *(void *)(inited + 56) = v31;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v32;
  uint64_t v33 = v43;
  *(void *)(inited + 80) = v44;
  *(void *)(inited + 88) = v33;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v34;
  *(void *)(inited + 112) = v23;
  *(void *)(inited + 120) = v25;
  if (!kCFUserNotificationAlternateButtonTitleKey) {
    goto LABEL_27;
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v35;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 152) = v28;
  sub_10000F0C0(inited);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFUserNotificationRef v37 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, error, isa);

  if (!v37)
  {
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 67109120;
      swift_beginAccess();
      error[3] = error[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to create CFUserNotification. Error code: %d", v40, 8u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v37;
}

uint64_t sub_1001EB574()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001EB5C0()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1001EB5C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1001EB634, v1, 0);
}

uint64_t sub_1001EB634()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.friendshipService(_:), v0[7]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_1001F5C8C, 0, 0);
}

uint64_t sub_1001EB78C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001EB7B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v5[10] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001EB914, 0, 0);
}

uint64_t sub_1001EB914()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100044014(&qword_1003F1788);
  sub_1001F5A0C();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v0[17] = 0;
  uint64_t v1 = v0[7];
  swift_release();
  v0[18] = v0[2];
  return _swift_task_switch(sub_1001EBA20, v1, 0);
}

uint64_t sub_1001EBA20()
{
  *(void *)(v0 + 152) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001EBA90, 0, 0);
}

uint64_t sub_1001EBA90()
{
  if (v0[19])
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[20] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001EBCA4;
    uint64_t v5 = v0[18];
    return dispatch thunk of FriendshipProtocol.friends(with:)(v5, v2, v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = v0[17];
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    v0[4] = 0;
    sub_100044014(&qword_1003F1798);
    sub_1001F5AB0();
    uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v0[23] = v6;
      uint64_t v9 = v0[7];
      return _swift_task_switch(sub_1001EBFB0, v9, 0);
    }
    else
    {
      uint64_t v10 = v7;
      unint64_t v11 = v8;
      BOOL v12 = (void (*)(uint64_t, unint64_t, void))v0[8];
      swift_bridgeObjectRelease();
      swift_release();
      sub_100022C64(v10, v11);
      v12(v10, v11, 0);
      sub_100044090(v10, v11);
      sub_100044090(v10, v11);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = (uint64_t (*)(void))v0[1];
      return v13();
    }
  }
}

uint64_t sub_1001EBCA4(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v4[23] = v1;
    uint64_t v5 = v4[7];
    uint64_t v6 = sub_1001EBFB0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v4[22] = a1;
    uint64_t v6 = sub_1001EBE28;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001EBE28()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[4] = v1;
  sub_100044014(&qword_1003F1798);
  sub_1001F5AB0();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v0[23] = v2;
    uint64_t v5 = v0[7];
    return _swift_task_switch(sub_1001EBFB0, v5, 0);
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[8];
    swift_bridgeObjectRelease();
    swift_release();
    sub_100022C64(v6, v7);
    v8(v6, v7, 0);
    sub_100044090(v6, v7);
    sub_100044090(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1001EBFB0()
{
  v0[3] = v0[23];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_errorRetain();
    uint64_t v1 = v0[23];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientSessionError.Category.friendshipService(_:), v0[11]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[24] = v1;
  return _swift_task_switch(sub_1001EC108, 0, 0);
}

uint64_t sub_1001EC108()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[8];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001EC1B8(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2288, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001EB78C);
}

uint64_t sub_1001EC1EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001EC218(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = sub_100044014(&qword_1003F1758);
  v5[16] = swift_task_alloc();
  uint64_t CanShareLocationRequest = type metadata accessor for FriendshipCanShareLocationRequest();
  v5[17] = CanShareLocationRequest;
  v5[18] = *(void *)(CanShareLocationRequest - 8);
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1001EC404, 0, 0);
}

uint64_t sub_1001EC404()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003F1760, (void (*)(uint64_t))&type metadata accessor for FriendshipCanShareLocationRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  *(void *)(v0 + 160) = 0;
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001EC52C, v1, 0);
}

uint64_t sub_1001EC52C()
{
  *(void *)(v0 + 168) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001EC59C, 0, 0);
}

uint64_t sub_1001EC59C()
{
  if (v0[21])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    unint64_t v4 = (void *)swift_task_alloc();
    v0[22] = v4;
    *unint64_t v4 = v0;
    v4[1] = sub_1001EC860;
    uint64_t v5 = v0[19];
    uint64_t v6 = v0[16];
    return dispatch thunk of FriendshipProtocol.friendshipState(_:)(v6, v5, v2, v3);
  }
  else
  {
    uint64_t v7 = v0[16];
    uint64_t v8 = type metadata accessor for FriendshipState();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    uint64_t v9 = v0[20];
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_1001F5860();
    uint64_t v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v13 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[17];
    if (v9)
    {
      swift_release();
      sub_10000A520(v14, &qword_1003F1758);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
      v0[24] = v9;
      uint64_t v16 = v0[5];
      return _swift_task_switch(sub_1001ECBB8, v16, 0);
    }
    else
    {
      uint64_t v17 = v10;
      unint64_t v18 = v11;
      uint64_t v19 = (void (*)(uint64_t, unint64_t, void))v0[6];
      swift_release();
      sub_100022C64(v17, v18);
      v19(v17, v18, 0);
      sub_100044090(v17, v18);
      sub_100044090(v17, v18);
      sub_10000A520(v14, &qword_1003F1758);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void))v0[1];
      return v20();
    }
  }
}

uint64_t sub_1001EC860()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001ECDD8;
  }
  else {
    uint64_t v2 = sub_1001EC994;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EC994()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = type metadata accessor for FriendshipState();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = v0[23];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001F5860();
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v7 = v0[18];
  uint64_t v6 = v0[19];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[17];
  if (v3)
  {
    swift_release();
    sub_10000A520(v8, &qword_1003F1758);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v9);
    v0[24] = v3;
    uint64_t v10 = v0[5];
    return _swift_task_switch(sub_1001ECBB8, v10, 0);
  }
  else
  {
    uint64_t v11 = v4;
    unint64_t v12 = v5;
    uint64_t v13 = (void (*)(uint64_t, unint64_t, void))v0[6];
    swift_release();
    sub_100022C64(v11, v12);
    v13(v11, v12, 0);
    sub_100044090(v11, v12);
    sub_100044090(v11, v12);
    sub_10000A520(v8, &qword_1003F1758);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001ECBB8()
{
  v0[2] = v0[24];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[24];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.friendshipService(_:), v0[9]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[25] = v1;
  return _swift_task_switch(sub_1001ECD10, 0, 0);
}

uint64_t sub_1001ECD10()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[6];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001ECDD8()
{
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  v0[24] = v0[23];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001ECBB8, v1, 0);
}

uint64_t sub_1001ECE58(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2260, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001EC1EC);
}

uint64_t sub_1001ECE8C(int a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a3;
  swift_retain();
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v10;
  a7(v12, v14, a6, v15);
  swift_release();
  sub_100044090(v12, v14);

  return swift_release();
}

uint64_t sub_1001ECF60(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for Transaction();
  unint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = v6;
  v13[7] = a5;
  v13[8] = a6;
  sub_100022C64(a1, a2);
  sub_100022C64(a3, a4);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1001ED054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  v7[10] = swift_isaMask & *a5;
  uint64_t v8 = type metadata accessor for ClientSessionError.Category();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ClientSessionError();
  v7[14] = v9;
  v7[15] = *(void *)(v9 - 8);
  v7[16] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Handle();
  v7[19] = v10;
  v7[20] = *(void *)(v10 - 8);
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  return _swift_task_switch(sub_1001ED260, 0, 0);
}

uint64_t sub_1001ED260()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  swift_allocObject();
  PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  return _swift_task_switch(sub_1001ED404, v1, 0);
}

uint64_t sub_1001ED404()
{
  *(void *)(v0 + 184) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001ED474, 0, 0);
}

uint64_t sub_1001ED474()
{
  if (*(void *)(v0 + 184))
  {
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001ED650;
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 144);
    return dispatch thunk of FriendshipProtocol.offerExpiration(for:fromHandle:)(v7, v5, v6, v2, v3);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void))(v0 + 64))(v14, 0);
    sub_10000A520(v14, (uint64_t *)&unk_1003EE800);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v15(v11, v12);
    v15(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1001ED650()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001EDB0C;
  }
  else {
    uint64_t v2 = sub_1001ED784;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001ED784()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 144);
  (*(void (**)(uint64_t, void))(v0 + 64))(v5, 0);
  sub_10000A520(v5, (uint64_t *)&unk_1003EE800);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001ED884()
{
  v0[2] = v0[26];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_errorRetain();
    uint64_t v1 = v0[26];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientSessionError.Category.friendshipService(_:), v0[11]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[27] = v1;
  return _swift_task_switch(sub_1001ED9DC, 0, 0);
}

uint64_t sub_1001ED9DC()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[8];
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  swift_errorRetain();
  v3(v2, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  sub_10000A520(v2, (uint64_t *)&unk_1003EE800);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001EDB0C()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[19];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
  v3(v0[21], v2);
  v3(v1, v2);
  v0[26] = v0[25];
  uint64_t v4 = v0[7];
  return _swift_task_switch(sub_1001ED884, v4, 0);
}

uint64_t sub_1001EDBAC(int a1, int a2, void *a3, void *a4, void *aBlock)
{
  uint64_t v7 = _Block_copy(aBlock);
  id v8 = a3;
  id v9 = a4;
  swift_retain();
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  sub_1001ECF60(v10, v12, v13, v15, (uint64_t)sub_1001F5C84, v16);
  swift_release();
  sub_100044090(v13, v15);
  sub_100044090(v10, v12);

  return swift_release();
}

void sub_1001EDCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E2224(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  if (a2) {
    unint64_t v12 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    unint64_t v12 = 0;
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v12);
}

uint64_t sub_1001EDE00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for Transaction();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = v6;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a6;
  sub_100022C64(a1, a2);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1001EDEF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  v7[10] = swift_isaMask & *a3;
  uint64_t v8 = type metadata accessor for ClientSessionError.Category();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ClientSessionError();
  v7[14] = v9;
  v7[15] = *(void *)(v9 - 8);
  v7[16] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Handle();
  v7[19] = v10;
  v7[20] = *(void *)(v10 - 8);
  v7[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001EE0EC, 0, 0);
}

uint64_t sub_1001EE0EC()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001EE210, v1, 0);
}

uint64_t sub_1001EE210()
{
  *(void *)(v0 + 176) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001EE280, 0, 0);
}

uint64_t sub_1001EE280()
{
  if (*(void *)(v0 + 176))
  {
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001EE43C;
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    return dispatch thunk of FriendshipProtocol.offerExpiration(for:groupId:)(v6, v5, v7, v8, v2, v3);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    uint64_t v12 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v14 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 152);
    (*(void (**)(uint64_t, void))(v0 + 64))(v14, 0);
    sub_10000A520(v14, (uint64_t *)&unk_1003EE800);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_1001EE43C()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001EE8D0;
  }
  else {
    uint64_t v2 = sub_1001EE570;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EE570()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t, void))(v0 + 64))(v4, 0);
  sub_10000A520(v4, (uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001EE650()
{
  v0[2] = v0[25];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_errorRetain();
    uint64_t v1 = v0[25];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientSessionError.Category.friendshipService(_:), v0[11]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[26] = v1;
  return _swift_task_switch(sub_1001EE7A8, 0, 0);
}

uint64_t sub_1001EE7A8()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[8];
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  swift_errorRetain();
  v3(v2, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  sub_10000A520(v2, (uint64_t *)&unk_1003EE800);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001EE8D0()
{
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  v0[25] = v0[24];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001EE650, v1, 0);
}

uint64_t sub_1001EE950(int a1, int a2, void *a3, void *a4, void *aBlock)
{
  uint64_t v7 = _Block_copy(aBlock);
  id v8 = a3;
  swift_retain();
  id v9 = a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  if (v9)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v7;
  sub_1001EDE00(v10, v12, v13, v15, (uint64_t)sub_1001F5C4C, v16);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100044090(v10, v12);

  return swift_release();
}

uint64_t sub_1001EEA64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001EEA90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  sub_100044014(&qword_1003F16E0);
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendshipRequestResult();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FriendshipRequest();
  v5[19] = v9;
  v5[20] = *(void *)(v9 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001EECD4, 0, 0);
}

uint64_t sub_1001EECD4()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003F16E8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001EEDF8, v1, 0);
}

uint64_t sub_1001EEDF8()
{
  *(void *)(v0 + 176) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001EEE68, 0, 0);
}

uint64_t sub_1001EEE68()
{
  if (v0[22])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001EF030;
    uint64_t v5 = v0[21];
    uint64_t v6 = v0[15];
    return dispatch thunk of FriendshipProtocol.sendFriendshipOffer(_:)(v6, v5, v2, v3);
  }
  else
  {
    uint64_t v8 = v0[20];
    uint64_t v7 = v0[21];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    uint64_t v11 = (void (*)(void, unint64_t, uint64_t))v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[17] + 56))(v10, 1, 1, v0[16]);
    sub_10000A520(v10, &qword_1003F16E0);
    sub_1000724B8();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 0;
    v11(0, 0xF000000000000000, v12);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001EF030()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001EF6B8;
  }
  else {
    uint64_t v2 = sub_1001EF164;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EF164()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001F5BC8(&qword_1003F16F0, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    uint64_t v9 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[17];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v0[25] = v1;
    uint64_t v14 = v0[5];
    return _swift_task_switch(sub_1001EF490, v14, 0);
  }
  else
  {
    uint64_t v15 = v6;
    unint64_t v16 = v7;
    swift_release();
    if (qword_1003EC078 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100044058(v17, (uint64_t)qword_10040B7E0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "FriendshipService+Trampoline sendFriendshipOffer result back to framework", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = v0[20];
    uint64_t v22 = v0[18];
    uint64_t v28 = v0[19];
    uint64_t v29 = v0[21];
    uint64_t v24 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v25 = (void (*)(uint64_t, unint64_t, void))v0[6];

    sub_100022C64(v15, v16);
    v25(v15, v16, 0);
    sub_100044090(v15, v16);
    sub_100044090(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v29, v28);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_1001EF490()
{
  v0[2] = v0[25];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[25];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.friendshipService(_:), v0[9]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[26] = v1;
  return _swift_task_switch(sub_1001EF5E8, 0, 0);
}

uint64_t sub_1001EF5E8()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[6];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001EF6B8()
{
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  v0[25] = v0[24];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001EF490, v1, 0);
}

uint64_t sub_1001EF738(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E21E8, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001EEA64);
}

uint64_t sub_1001EF76C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001EF798(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  sub_100044014(&qword_1003F16E0);
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendshipRequestResult();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FriendshipRequest();
  v5[19] = v9;
  v5[20] = *(void *)(v9 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001EF9DC, 0, 0);
}

uint64_t sub_1001EF9DC()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003F16E8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001EFB00, v1, 0);
}

uint64_t sub_1001EFB00()
{
  *(void *)(v0 + 176) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001EFB70, 0, 0);
}

uint64_t sub_1001EFB70()
{
  if (v0[22])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001EFD38;
    uint64_t v5 = v0[21];
    uint64_t v6 = v0[15];
    return dispatch thunk of FriendshipProtocol.sendFriendshipInvite(_:)(v6, v5, v2, v3);
  }
  else
  {
    uint64_t v8 = v0[20];
    uint64_t v7 = v0[21];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    uint64_t v11 = (void (*)(void, unint64_t, uint64_t))v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[17] + 56))(v10, 1, 1, v0[16]);
    sub_10000A520(v10, &qword_1003F16E0);
    sub_1000724B8();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 0;
    v11(0, 0xF000000000000000, v12);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001EFD38()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001F02F0;
  }
  else {
    uint64_t v2 = sub_1001EFE6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EFE6C()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001F5BC8(&qword_1003F16F0, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    uint64_t v9 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[17];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v0[25] = v1;
    uint64_t v14 = v0[5];
    return _swift_task_switch(sub_1001F0198, v14, 0);
  }
  else
  {
    uint64_t v15 = v6;
    unint64_t v16 = v7;
    swift_release();
    if (qword_1003EC078 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100044058(v17, (uint64_t)qword_10040B7E0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "FriendshipService+Trampoline sendFriendshipInvite result back to framework", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = v0[20];
    uint64_t v22 = v0[18];
    uint64_t v28 = v0[19];
    uint64_t v29 = v0[21];
    uint64_t v24 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v25 = (void (*)(uint64_t, unint64_t, void))v0[6];

    sub_100022C64(v15, v16);
    v25(v15, v16, 0);
    sub_100044090(v15, v16);
    sub_100044090(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v29, v28);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_1001F0198()
{
  v0[2] = v0[25];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[25];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.friendshipService(_:), v0[9]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[26] = v1;
  return _swift_task_switch(sub_1001F5C88, 0, 0);
}

uint64_t sub_1001F02F0()
{
  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  v0[25] = v0[24];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001F0198, v1, 0);
}

uint64_t sub_1001F0370(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E21C0, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001EF76C);
}

uint64_t sub_1001F03A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001F03D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  sub_100044014(&qword_1003F16E0);
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendshipRequestResult();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FriendshipRequest();
  v5[19] = v9;
  v5[20] = *(void *)(v9 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001F0614, 0, 0);
}

uint64_t sub_1001F0614()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003F16E8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001F0738, v1, 0);
}

uint64_t sub_1001F0738()
{
  *(void *)(v0 + 176) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F07A8, 0, 0);
}

uint64_t sub_1001F07A8()
{
  if (v0[22])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F0970;
    uint64_t v5 = v0[21];
    uint64_t v6 = v0[15];
    return dispatch thunk of FriendshipProtocol.respondToInviteRequest(_:)(v6, v5, v2, v3);
  }
  else
  {
    uint64_t v8 = v0[20];
    uint64_t v7 = v0[21];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    uint64_t v11 = (void (*)(void, unint64_t, uint64_t))v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[17] + 56))(v10, 1, 1, v0[16]);
    sub_10000A520(v10, &qword_1003F16E0);
    sub_1000724B8();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 0;
    v11(0, 0xF000000000000000, v12);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001F0970()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001F02F0;
  }
  else {
    uint64_t v2 = sub_1001F0AA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F0AA4()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v5);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001F5BC8(&qword_1003F16F0, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
  uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[18];
  uint64_t v19 = v0[19];
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[17];
  if (v1)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v19);
    v0[25] = v1;
    uint64_t v13 = v0[5];
    return _swift_task_switch(sub_1001F0198, v13, 0);
  }
  else
  {
    uint64_t v14 = v6;
    unint64_t v15 = v7;
    uint64_t v16 = (void (*)(uint64_t, unint64_t, void))v0[6];
    swift_release();
    sub_100022C64(v14, v15);
    v16(v14, v15, 0);
    sub_100044090(v14, v15);
    sub_100044090(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1001F0D18(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2198, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001F03A4);
}

uint64_t sub_1001F0D4C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001F0D78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  sub_100044014(&qword_1003F16E0);
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendshipRequestResult();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FriendshipRequest();
  v5[19] = v9;
  v5[20] = *(void *)(v9 - 8);
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_1001F0FBC, 0, 0);
}

uint64_t sub_1001F0FBC()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003F16E8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001F10E0, v1, 0);
}

uint64_t sub_1001F10E0()
{
  *(void *)(v0 + 176) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F1150, 0, 0);
}

uint64_t sub_1001F1150()
{
  if (v0[22])
  {
    uint64_t v1 = v0[8];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F0970;
    uint64_t v5 = v0[21];
    uint64_t v6 = v0[15];
    return dispatch thunk of FriendshipProtocol.stopSharingMyLocation(_:)(v6, v5, v2, v3);
  }
  else
  {
    uint64_t v8 = v0[20];
    uint64_t v7 = v0[21];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    uint64_t v11 = (void (*)(void, unint64_t, uint64_t))v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[17] + 56))(v10, 1, 1, v0[16]);
    sub_10000A520(v10, &qword_1003F16E0);
    sub_1000724B8();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 0;
    v11(0, 0xF000000000000000, v12);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001F1318(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2170, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001F0D4C);
}

uint64_t sub_1001F134C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001F1378(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001F1530, 0, 0);
}

uint64_t sub_1001F1530()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001F1654, v1, 0);
}

uint64_t sub_1001F1654()
{
  *(void *)(v0 + 144) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F16C4, 0, 0);
}

uint64_t sub_1001F16C4()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F1808;
    uint64_t v5 = *(void *)(v0 + 136);
    return dispatch thunk of FriendshipProtocol.peerToken(for:)(v5, v2, v3);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 120);
    (*(void (**)(void, unint64_t, void))(v0 + 48))(0, 0xF000000000000000, 0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1001F1808(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1001F1D0C;
  }
  else {
    uint64_t v4 = sub_1001F1944;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001F1944()
{
  uint64_t v1 = (void *)v0[20];
  if (v1)
  {
    uint64_t v2 = v0[21];
    uint64_t v3 = NIDiscoveryToken.dataRepresentation.getter();
    uint64_t v6 = v0[16];
    uint64_t v5 = v0[17];
    uint64_t v7 = v0[15];
    if (v2)
    {
      (*(void (**)(void, void))(v6 + 8))(v0[17], v0[15]);

      v0[22] = v2;
      uint64_t v8 = v0[5];
      return _swift_task_switch(sub_1001F1AF8, v8, 0);
    }
    uint64_t v12 = v3;
    unint64_t v13 = v4;
    uint64_t v14 = (void (*)(uint64_t, unint64_t, void))v0[6];
    sub_100022C64(v3, v4);
    v14(v12, v13, 0);
    sub_100044090(v12, v13);

    sub_100044090(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    uint64_t v10 = v0[16];
    uint64_t v9 = v0[17];
    uint64_t v11 = v0[15];
    ((void (*)(void, unint64_t, void))v0[6])(0, 0xF000000000000000, 0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001F1AF8()
{
  v0[2] = v0[22];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[22];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.friendshipService(_:), v0[9]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[23] = v1;
  return _swift_task_switch(sub_1001F1C50, 0, 0);
}

uint64_t sub_1001F1C50()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[6];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F1D0C()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  v0[22] = v0[21];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001F1AF8, v1, 0);
}

uint64_t sub_1001F1D8C(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2148, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001F134C);
}

uint64_t sub_1001F1DC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001F1DEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for Handle();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_1001F1EEC, 0, 0);
}

uint64_t sub_1001F1EEC()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 32);
  return _swift_task_switch(sub_1001F2050, v1, 0);
}

uint64_t sub_1001F2050()
{
  *(void *)(v0 + 88) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F20C0, 0, 0);
}

uint64_t sub_1001F20C0()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    unint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v4;
    *unint64_t v4 = v0;
    v4[1] = sub_1001F21E4;
    uint64_t v5 = *(void *)(v0 + 80);
    return dispatch thunk of FriendshipProtocol.removePeerToken(for:)(v5, v2, v3);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    (*(void (**)(void))(v0 + 40))(0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1001F21E4()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001F23AC;
  }
  else {
    uint64_t v2 = sub_1001F2314;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F2314()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  (*(void (**)(void))(v0 + 40))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001F23AC()
{
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  uint64_t v1 = v0[13];
  uint64_t v2 = (void (*)(uint64_t))v0[5];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F2458(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E2120, (uint64_t)sub_10004B288, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001F1DC0);
}

uint64_t sub_1001F248C(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Transaction();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1001F2548(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(unsigned char *)(v4 + 72) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 40) = swift_isaMask & *a1;
  return _swift_task_switch(sub_1001F25AC, a1, 0);
}

uint64_t sub_1001F25AC()
{
  *(void *)(v0 + 48) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F261C, 0, 0);
}

uint64_t sub_1001F261C()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F271C;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 72);
    return dispatch thunk of FriendshipProtocol.requestOwnerToken(force:)(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 24))(0);
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1001F271C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001F28A0;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_1001F2838;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F2838()
{
  (*(void (**)(void))(v0 + 24))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001F28A0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  swift_unknownObjectRelease();
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F2934(int a1, int a2, char a3, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  swift_retain();
  sub_1001F248C(a3, (uint64_t)sub_10004B288, v6);
  swift_release();

  return swift_release();
}

uint64_t sub_1001F29CC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_1001F29F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_1001F2BB0, 0, 0);
}

uint64_t sub_1001F2BB0()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001F5BC8(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_1001F2CD4, v1, 0);
}

uint64_t sub_1001F2CD4()
{
  *(void *)(v0 + 144) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F2D44, 0, 0);
}

uint64_t sub_1001F2D44()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F2E80;
    uint64_t v5 = *(void *)(v0 + 136);
    return dispatch thunk of FriendshipProtocol.startRanging(handle:)(v5, v2, v3);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 120);
    (*(void (**)(void))(v0 + 48))(0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1001F2E80()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001F3270;
  }
  else {
    uint64_t v2 = sub_1001F2FB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F2FB4()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  (*(void (**)(void))(v0 + 48))(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001F3064()
{
  v0[2] = v0[21];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[21];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.friendshipService(_:), v0[9]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[22] = v1;
  return _swift_task_switch(sub_1001F31BC, 0, 0);
}

uint64_t sub_1001F31BC()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = (void (*)(uint64_t))v0[6];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F3270()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  v0[21] = v0[20];
  uint64_t v1 = v0[5];
  return _swift_task_switch(sub_1001F3064, v1, 0);
}

uint64_t sub_1001F32F0(int a1, int a2, void *a3, void *a4)
{
  return sub_1001ECE8C(a1, a2, a3, a4, (uint64_t)&unk_1003E20D0, (uint64_t)sub_10004B288, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1001F29CC);
}

uint64_t sub_1001F3324(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_1001F3350(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001F34AC, a1, 0);
}

uint64_t sub_1001F34AC()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F351C, 0, 0);
}

uint64_t sub_1001F351C()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F3628;
    return dispatch thunk of FriendshipProtocol.stopRanging()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001F3628()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001F3744;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_10000A330;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F3744()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1001F37B0, v1, 0);
}

uint64_t sub_1001F37B0()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.friendshipService(_:), v0[7]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_1001F3908, 0, 0);
}

uint64_t sub_1001F3908()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void (*)(uint64_t))v0[4];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F39B0(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E20A8, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t))sub_1001F3324);
}

uint64_t sub_1001F39E4(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_1001F3A10(void *a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = swift_isaMask & *a1;
  return _swift_task_switch(sub_1001F3A70, a1, 0);
}

uint64_t sub_1001F3A70()
{
  *(void *)(v0 + 48) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F3AE0, 0, 0);
}

uint64_t sub_1001F3AE0()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F271C;
    return dispatch thunk of FriendshipProtocol.stopConfigRangingSession()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 24))(0);
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001F3BD8(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E2080, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t))sub_1001F39E4);
}

uint64_t sub_1001F3C0C(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_1001F3C38(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001F3D94, a1, 0);
}

uint64_t sub_1001F3D94()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F3E04, 0, 0);
}

uint64_t sub_1001F3E04()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100006A38;
    return dispatch thunk of FriendshipProtocol.resetTokenDatabase()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001F3F10(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E2058, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t))sub_1001F3C0C);
}

uint64_t sub_1001F3F44(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_1001F3F70(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001F40CC, a1, 0);
}

uint64_t sub_1001F40CC()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F413C, 0, 0);
}

uint64_t sub_1001F413C()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F4250;
    return dispatch thunk of FriendshipProtocol.ownerToken()(v2, v3);
  }
  else
  {
    (*(void (**)(void, unint64_t, void))(v0 + 32))(0, 0xF000000000000000, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001F4250(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1001F46AC;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v4 = sub_1001F436C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001F436C()
{
  uint64_t v1 = (void *)v0[15];
  if (v1)
  {
    uint64_t v2 = v0[16];
    uint64_t v3 = NIDiscoveryToken.dataRepresentation.getter();
    if (v2)
    {

      v0[17] = v2;
      uint64_t v5 = v0[3];
      return _swift_task_switch(sub_1001F44A4, v5, 0);
    }
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[4];
    sub_100022C64(v3, v4);
    v8(v6, v7, 0);
    sub_100044090(v6, v7);
    sub_100044090(v6, v7);
  }
  else
  {
    ((void (*)(void, unint64_t, void))v0[4])(0, 0xF000000000000000, 0);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001F44A4()
{
  v0[2] = v0[17];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[17];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.friendshipService(_:), v0[7]);
    sub_1001F5BC8(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[18] = v1;
  return _swift_task_switch(sub_1001F45FC, 0, 0);
}

uint64_t sub_1001F45FC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[4];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001F46AC()
{
  swift_unknownObjectRelease();
  v0[17] = v0[16];
  uint64_t v1 = v0[3];
  return _swift_task_switch(sub_1001F44A4, v1, 0);
}

uint64_t sub_1001F471C(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E2030, (uint64_t)sub_100171AE0, (void (*)(uint64_t, uint64_t))sub_1001F3F44);
}

uint64_t sub_1001F4750(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_1001F477C(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001F48D8, a1, 0);
}

uint64_t sub_1001F48D8()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1001F4948, 0, 0);
}

uint64_t sub_1001F4948()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    unint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *unint64_t v4 = v0;
    v4[1] = sub_100006A38;
    return dispatch thunk of FriendshipProtocol.startOwnerRanging()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1001F4A54(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E2008, (uint64_t)sub_10004B28C, (void (*)(uint64_t, uint64_t))sub_1001F4750);
}

void sub_1001F4A88()
{
}

void sub_1001F4AC0()
{
}

uint64_t sub_1001F4AD8()
{
  swift_unknownObjectWeakDestroy();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t _s10TrampolineCMa()
{
  return sub_1001F5C54();
}

uint64_t sub_1001F4B28()
{
  return sub_100054E34();
}

uint64_t sub_1001F4B48()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1001F477C(v2, v3, v4);
}

uint64_t sub_1001F4BF4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1001F3F70(v2, v3, v4);
}

uint64_t sub_1001F4CA0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1001F3C38(v2, v3, v4);
}

uint64_t sub_1001F4D4C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10004A274;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(void *)(v3 + 40) = swift_isaMask & *(void *)v4;
  return _swift_task_switch(sub_1001F3A70, v4, 0);
}

uint64_t sub_1001F4E3C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1001F3350(v2, v3, v4);
}

uint64_t sub_1001F4EE8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001F29F8(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F4FA4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F4FE4()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10004A274;
  *(_OWORD *)(v4 + 24) = v5;
  *(unsigned char *)(v4 + 72) = v3;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 40) = swift_isaMask & *v2;
  return _swift_task_switch(sub_1001F25AC, v2, 0);
}

uint64_t sub_1001F50E4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001F1DEC(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F51A4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001F1378(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F5264()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001F0D78(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F5324()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001F03D0(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F53E4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001EF798(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F54A4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100018CD0;
  return sub_1001EEA90(v2, v3, v4, v5, v6);
}

uint64_t sub_1001F5560()
{
  sub_100044090(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001F55B0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_10004A274;
  return sub_1001EDEF0(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001F5680()
{
  sub_100044090(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_100044090(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001F56D0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_10004A274;
  return sub_1001ED054(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001F57A4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001EC218(v2, v3, v4, v5, v6);
}

unint64_t sub_1001F5860()
{
  unint64_t result = qword_1003F1768;
  if (!qword_1003F1768)
  {
    sub_10004AE58(&qword_1003F1758);
    sub_1001F5BC8(&qword_1003F1770, (void (*)(uint64_t))&type metadata accessor for FriendshipState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1768);
  }
  return result;
}

uint64_t sub_1001F5908()
{
  sub_100044090(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001F5950()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1001EB7B8(v2, v3, v4, v5, v6);
}

unint64_t sub_1001F5A0C()
{
  unint64_t result = qword_1003F1790;
  if (!qword_1003F1790)
  {
    sub_10004AE58(&qword_1003F1788);
    sub_1001F5BC8(&qword_1003EEAC0, (void (*)(uint64_t))&type metadata accessor for HandleType);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1790);
  }
  return result;
}

unint64_t sub_1001F5AB0()
{
  unint64_t result = qword_1003F17A0;
  if (!qword_1003F17A0)
  {
    sub_10004AE58(&qword_1003F1798);
    sub_1001F5B24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F17A0);
  }
  return result;
}

unint64_t sub_1001F5B24()
{
  unint64_t result = qword_1003F17A8;
  if (!qword_1003F17A8)
  {
    sub_10004AE58(&qword_1003F0530);
    sub_1001F5BC8(&qword_1003F12C0, (void (*)(uint64_t))&type metadata accessor for Friend);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F17A8);
  }
  return result;
}

uint64_t sub_1001F5BC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F5C14()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001F5C4C(uint64_t a1, uint64_t a2)
{
  sub_1001EDCB4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001F5C54()
{
  return swift_getGenericMetadata();
}

Swift::Int sub_1001F5CD8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F5D30()
{
  return String.hash(into:)();
}

Swift::Int sub_1001F5D4C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F5DA0@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD578, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1001F5DF4(void *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000100372B30;
}

uint64_t sub_1001F5E14(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || (unint64_t v2 = sub_10003B888(0xD000000000000015, 0x8000000100372B30), (v3 & 1) == 0))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1000370D8(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_7:
    sub_1001F5FD0((uint64_t)&v12);
    goto LABEL_8;
  }
  sub_100044014(&qword_1003ECF00);
  if (swift_dynamicCast()) {
    return v11;
  }
LABEL_8:
  uint64_t v5 = type metadata accessor for GenericError();
  sub_1001F6030();
  swift_allocError();
  uint64_t v7 = v6;
  *(void *)&long long v12 = 0;
  *((void *)&v12 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v8._countAndFlagsBits = 0xD000000000000028;
  v8._object = (void *)0x8000000100377A20;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 39;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v10 = *((void *)&v12 + 1);
  *uint64_t v7 = v12;
  v7[1] = v10;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, enum case for GenericError.error(_:), v5);
  return swift_willThrow();
}

uint64_t sub_1001F5FD0(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F17C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001F6030()
{
  unint64_t result = qword_1003ECD00;
  if (!qword_1003ECD00)
  {
    type metadata accessor for GenericError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD00);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnyFMFServicePayload.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001F6124);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyFMFServicePayload.CodingKeys()
{
  return &type metadata for AnyFMFServicePayload.CodingKeys;
}

unint64_t sub_1001F6160()
{
  unint64_t result = qword_1003F17C8;
  if (!qword_1003F17C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F17C8);
  }
  return result;
}

uint64_t sub_1001F61B4(char a1)
{
  _StringGuts.grow(_:)(23);
  sub_1001F6A48();
  uint64_t v2 = CustomStringConvertible.typeDescription.getter();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000100377A50;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  if (a1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1001F628C()
{
  return 0xD000000000000010;
}

uint64_t sub_1001F62A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001F6D38(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001F62D4(uint64_t a1)
{
  unint64_t v2 = sub_1001F69F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F6310(uint64_t a1)
{
  unint64_t v2 = sub_1001F69F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F634C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003F17E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1001F69F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_1000233E4((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_1001F64AC(void *a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F17F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1001F69F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001F65E0()
{
  return sub_1001F61B4(*v0);
}

uint64_t sub_1001F65E8()
{
  return 0;
}

uint64_t sub_1001F65F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1001F6624(uint64_t a1)
{
  unint64_t v2 = sub_1001F69A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F6660(uint64_t a1)
{
  unint64_t v2 = sub_1001F69A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F669C(uint64_t a1)
{
  return sub_1000233E4(a1);
}

uint64_t sub_1001F66C4(void *a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F17D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1001F69A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001F67D4()
{
  return CustomStringConvertible.typeDescription.getter();
}

uint64_t getEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F6958);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityEnvelopeV1()
{
  return &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityRequestEnvelopeV1()
{
  return &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1;
}

unint64_t sub_1001F69A0()
{
  unint64_t result = qword_1003F17D8;
  if (!qword_1003F17D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F17D8);
  }
  return result;
}

unint64_t sub_1001F69F4()
{
  unint64_t result = qword_1003F17E8;
  if (!qword_1003F17E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F17E8);
  }
  return result;
}

unint64_t sub_1001F6A48()
{
  unint64_t result = qword_1003F17F8;
  if (!qword_1003F17F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F17F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001F6B38);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys()
{
  return &type metadata for CompanionPeopleFindingCapabilityEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for CompanionPeopleFindingCapabilityRequestEnvelopeV1.CodingKeys;
}

unint64_t sub_1001F6B84()
{
  unint64_t result = qword_1003F1800;
  if (!qword_1003F1800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1800);
  }
  return result;
}

unint64_t sub_1001F6BDC()
{
  unint64_t result = qword_1003F1808;
  if (!qword_1003F1808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1808);
  }
  return result;
}

unint64_t sub_1001F6C34()
{
  unint64_t result = qword_1003F1810;
  if (!qword_1003F1810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1810);
  }
  return result;
}

unint64_t sub_1001F6C8C()
{
  unint64_t result = qword_1003F1818;
  if (!qword_1003F1818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1818);
  }
  return result;
}

unint64_t sub_1001F6CE4()
{
  unint64_t result = qword_1003F1820;
  if (!qword_1003F1820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1820);
  }
  return result;
}

uint64_t sub_1001F6D38(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100377A70)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1001F6DC0()
{
  sub_100044014(&qword_1003F4BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  long long v2 = v0[1];
  long long v6 = *v0;
  *(_OWORD *)(inited + 48) = v6;
  *(void *)(inited + 32) = 0x444965636E6566;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000015;
  *(void *)(inited + 88) = 0x8000000100372B30;
  *(_OWORD *)(inited + 96) = v2;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0x64726F6365526B63;
  *(void *)(inited + 136) = 0xEA00000000004449;
  long long v4 = v0[2];
  long long v5 = v2;
  *(void *)(inited + 168) = &type metadata for Data;
  *(_OWORD *)(inited + 144) = v0[2];
  sub_100033EAC((uint64_t)&v6);
  sub_100033EAC((uint64_t)&v5);
  sub_1001F7DFC((uint64_t)&v4);
  return sub_100101984(inited);
}

void sub_1001F6EB4(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v2 - 8);
  long long v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EE608);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  unint64_t v6 = sub_1001F7AA4();
  *(void *)(v5 + 56) = sub_100044014(&qword_1003F1830);
  *(void *)(v5 + 32) = v6;
  id v7 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v7 initWithArray:isa];

  id v31 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)();

  if (!v31) {
    goto LABEL_6;
  }
  uint64_t v10 = self;
  Class v11 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v12 = Data._bridgeToObjectiveC()().super.isa;
  id v31 = 0;
  id v13 = [v10 _strictlyUnarchivedObjectOfClasses:v11 fromData:v12 error:&v31];

  if (!v13)
  {
    id v29 = v31;
    _convertNSErrorToError(_:)();

    goto LABEL_8;
  }
  id v14 = v31;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    uint64_t v27 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    *uint64_t v28 = 0xD000000000000023;
    v28[1] = 0x8000000100377AB0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v28, enum case for GenericError.error(_:), v27);
LABEL_8:
    swift_willThrow();
    return;
  }
  id v15 = v30;
  id v16 = [v30 recordName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  UUID.init(uuidString:)();
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v4, 1, v20) == 1)
  {
    sub_10000A520((uint64_t)v4, &qword_1003ECFB8);
    uint64_t v22 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v24 = v23;
    id v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    id v31 = (id)0xD00000000000001ELL;
    unint64_t v32 = 0x8000000100377AE0;
    v25._countAndFlagsBits = v17;
    v25._object = v19;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    unint64_t v26 = v32;
    *uint64_t v24 = v31;
    v24[1] = v26;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, enum case for GenericError.error(_:), v22);
    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v4, v20);
  }
}

uint64_t sub_1001F7338(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003F1860);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1001F8470();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 32);
    v10[15] = 2;
    sub_10008FC1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001F74D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100102C70(*a1, *a2);
}

Swift::Int sub_1001F74E4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001F7590()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F7628()
{
  return Hasher._finalize()();
}

unint64_t sub_1001F76D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001F84C4(*a1);
  *a2 = result;
  return result;
}

void sub_1001F7700(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0x8000000100372B30;
  unint64_t v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    unint64_t v5 = 0x64726F6365526B63;
    unint64_t v4 = 0xEA00000000004449;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x444965636E6566;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1001F7768()
{
  unint64_t v1 = 0xD000000000000015;
  if (*v0 != 1) {
    unint64_t v1 = 0x64726F6365526B63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x444965636E6566;
  }
}

unint64_t sub_1001F77CC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001F84C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F77F4(uint64_t a1)
{
  unint64_t v2 = sub_1001F8470();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F7830(uint64_t a1)
{
  unint64_t v2 = sub_1001F8470();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001F786C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001F8510(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1001F78B0(void *a1)
{
  return sub_1001F7338(a1);
}

uint64_t sub_1001F78C8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v19 = 0x3A444965636E6566;
  unint64_t v20 = 0xE900000000000020;
  uint64_t v5 = *v0;
  BOOL v6 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x64616F6C7961700ALL;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  uint64_t v9 = v0[2];
  uint64_t v10 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x8000000100377A90;
  v12._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v12);
  sub_1001F6EB4((uint64_t)v4);
  uint64_t v13 = UUID.uuidString.getter();
  id v15 = v14;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_1001F7AA4()
{
  unint64_t result = qword_1003F1828;
  if (!qword_1003F1828)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F1828);
  }
  return result;
}

uint64_t sub_1001F7AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + 16)
    || (unint64_t v4 = sub_10003B888(0x444965636E6566, 0xE700000000000000), (v5 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v16),
        sub_100044014(&qword_1003ECF00),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v10 = v9;
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    *(void *)&long long v16 = 0xD000000000000028;
    *((void *)&v16 + 1) = 0x8000000100377B00;
LABEL_8:
    sub_1001F7DA8();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = *((void *)&v16 + 1);
    void *v10 = v16;
    v10[1] = v12;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, enum case for GenericError.error(_:), v8);
    return swift_willThrow();
  }
  if (*(void *)(a1 + 16) && (unint64_t v6 = sub_10003B888(0x64726F6365526B63, 0xEA00000000004449), (v7 & 1) != 0))
  {
    sub_1000370D8(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)&v16, &qword_1003F17C0);
LABEL_15:
    uint64_t v8 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v10 = v14;
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    *(void *)&long long v16 = 0xD000000000000028;
    *((void *)&v16 + 1) = 0x8000000100377B00;
    goto LABEL_8;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  *(_OWORD *)a2 = v15;
  *(void *)(a2 + 16) = 0xD000000000000017;
  *(void *)(a2 + 24) = 0x8000000100372B10;
  *(_OWORD *)(a2 + 32) = v15;
  return result;
}

unint64_t sub_1001F7DA8()
{
  unint64_t result = qword_1003F1838;
  if (!qword_1003F1838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1838);
  }
  return result;
}

uint64_t sub_1001F7DFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F7E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_bridgeObjectRetain();
  UUID.uuidString.getter();
  id v8 = objc_allocWithZone((Class)CKRecordID);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithRecordName:v9];

  id v20 = 0;
  id v11 = [self archivedDataWithRootObject:v10 requiringSecureCoding:1 error:&v20];
  id v12 = v20;
  if (v11)
  {
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a3, v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100022C64(v13, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = sub_100044090(v13, v15);
    *a4 = a1;
    a4[1] = a2;
    a4[2] = 0xD000000000000017;
    a4[3] = 0x8000000100372B10;
    a4[4] = v13;
    a4[5] = v15;
  }
  else
  {
    uint64_t v18 = v12;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a3, v19);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FenceDeleteEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F8148);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceDeleteEnvelopeV1.CodingKeys()
{
  return &type metadata for FenceDeleteEnvelopeV1.CodingKeys;
}

uint64_t destroy for FenceDeleteEnvelopeV1(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);

  return sub_100044090(v2, v3);
}

void *initializeWithCopy for FenceDeleteEnvelopeV1(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  unint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100022C64(v5, v6);
  a1[4] = v5;
  a1[5] = v6;
  return a1;
}

void *assignWithCopy for FenceDeleteEnvelopeV1(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  unint64_t v4 = a2[5];
  sub_100022C64(v5, v4);
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  a1[4] = v5;
  a1[5] = v4;
  sub_100044090(v6, v7);
  return a1;
}

__n128 initializeWithTake for FenceDeleteEnvelopeV1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for FenceDeleteEnvelopeV1(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100044090(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FenceDeleteEnvelopeV1(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FenceDeleteEnvelopeV1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceDeleteEnvelopeV1()
{
  return &type metadata for FenceDeleteEnvelopeV1;
}

unint64_t sub_1001F83C0()
{
  unint64_t result = qword_1003F1840;
  if (!qword_1003F1840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1840);
  }
  return result;
}

unint64_t sub_1001F841C()
{
  unint64_t result = qword_1003F1848;
  if (!qword_1003F1848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1848);
  }
  return result;
}

unint64_t sub_1001F8470()
{
  unint64_t result = qword_1003F1850;
  if (!qword_1003F1850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1850);
  }
  return result;
}

unint64_t sub_1001F84C4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD5B0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001F8510@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003F1858);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1001F8470();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  LOBYTE(v23) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v25 = 2;
  sub_10008FB64();
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v23;
  unint64_t v16 = v24;
  swift_bridgeObjectRetain();
  uint64_t v17 = v21;
  swift_bridgeObjectRetain();
  sub_100022C64(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100044090(v15, v16);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v15;
  a2[5] = v16;
  return result;
}

uint64_t sub_1001F87E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100044014(&qword_1003F1868);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)
    || (unint64_t v11 = sub_10003B888(12400, 0xE200000000000000), (v12 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v56),
        sub_100044014(&qword_1003ECF00),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for GenericError();
    sub_1001FA948((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v17 = v16;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD00000000000002DLL;
    *((void *)&v56 + 1) = 0x8000000100377B50;
    LOBYTE(v54) = 0;
LABEL_10:
    sub_1001F9E1C();
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = *((void *)&v56 + 1);
    *uint64_t v17 = v56;
    v17[1] = v19;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, enum case for GenericError.error(_:), v15);
    return swift_willThrow();
  }
  if (!*(void *)(a1 + 16)
    || (v53 = v54, v58 = v55, unint64_t v13 = sub_10003B888(12656, 0xE200000000000000), (v14 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v13, (uint64_t)&v56), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)v6, &qword_1003F1868);
LABEL_12:
    uint64_t v15 = type metadata accessor for GenericError();
    sub_1001FA948((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v17 = v21;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD00000000000002DLL;
    *((void *)&v56 + 1) = 0x8000000100377B50;
    LOBYTE(v54) = 1;
    goto LABEL_10;
  }
  uint64_t v22 = v6;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v23(v10, v22, v7);
  if (!*(void *)(a1 + 16)
    || (unint64_t v24 = sub_10003B888(0xD000000000000015, 0x8000000100372B30), (v25 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v24, (uint64_t)&v56), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for GenericError();
    sub_1001FA948((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v33 = v32;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD00000000000002DLL;
    *((void *)&v56 + 1) = 0x8000000100377B50;
    char v34 = 2;
LABEL_24:
    LOBYTE(v54) = v34;
    sub_1001F9E1C();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = *((void *)&v56 + 1);
    *uint64_t v33 = v56;
    v33[1] = v36;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, enum case for GenericError.error(_:), v31);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v52 = v55;
  if (!*(void *)(a1 + 16)
    || (v51 = v54, unint64_t v26 = sub_10003B888(118, 0xE100000000000000), (v27 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v26, (uint64_t)&v56), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for GenericError();
    sub_1001FA948((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v33 = v37;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD00000000000002DLL;
    *((void *)&v56 + 1) = 0x8000000100377B50;
    char v34 = 3;
    goto LABEL_24;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v49 = v54;
  uint64_t v50 = v55;
  if (v28 && (unint64_t v29 = sub_10003B888(0x64726F6365526B63, 0xEC000000656D614ELL), (v30 & 1) != 0))
  {
    sub_1000370D8(*(void *)(a1 + 56) + 32 * v29, (uint64_t)&v56);
  }
  else
  {
    long long v56 = 0u;
    long long v57 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)&v56, &qword_1003F17C0);
LABEL_33:
    uint64_t v31 = type metadata accessor for GenericError();
    sub_1001FA948((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v33 = v47;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD00000000000002DLL;
    *((void *)&v56 + 1) = 0x8000000100377B50;
    char v34 = 4;
    goto LABEL_24;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v38 = v54;
  uint64_t v39 = v55;
  uint64_t v40 = v58;
  *a2 = v53;
  a2[1] = v40;
  uint64_t v41 = (int *)type metadata accessor for FenceShareInviteEnvelopeV1();
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v23)((char *)a2 + v41[5], v10, v7);
  uint64_t v42 = (void *)((char *)a2 + v41[6]);
  uint64_t v43 = v52;
  *uint64_t v42 = v51;
  v42[1] = v43;
  uint64_t v44 = (void *)((char *)a2 + v41[7]);
  uint64_t v45 = v50;
  *uint64_t v44 = v49;
  v44[1] = v45;
  uint64_t v46 = (void *)((char *)a2 + v41[8]);
  *uint64_t v46 = v38;
  v46[1] = v39;
  return result;
}

unint64_t sub_1001F90A0()
{
  uint64_t v1 = v0;
  sub_100044014(&qword_1003F4BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677B0;
  *(void *)(inited + 32) = 12400;
  *(void *)(inited + 40) = 0xE200000000000000;
  uint64_t v3 = v0[1];
  *(void *)(inited + 48) = *v0;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 12656;
  *(void *)(inited + 88) = 0xE200000000000000;
  uint64_t v4 = (int *)type metadata accessor for FenceShareInviteEnvelopeV1();
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = URL.absoluteString.getter();
  *(void *)(inited + 104) = v5;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000015;
  *(void *)(inited + 136) = 0x8000000100372B30;
  uint64_t v6 = (void *)((char *)v0 + v4[6]);
  uint64_t v7 = v6[1];
  *(void *)(inited + 144) = *v6;
  *(void *)(inited + 152) = v7;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 118;
  *(void *)(inited + 184) = 0xE100000000000000;
  uint64_t v8 = (void *)((char *)v0 + v4[7]);
  uint64_t v9 = v8[1];
  *(void *)(inited + 192) = *v8;
  *(void *)(inited + 200) = v9;
  *(void *)(inited + 216) = &type metadata for String;
  strcpy((char *)(inited + 224), "ckRecordName");
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  uint64_t v10 = (void *)((char *)v1 + v4[8]);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 240) = v11;
  *(void *)(inited + 248) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_100101984(inited);
}

uint64_t sub_1001F91F4(char *a1, char *a2)
{
  return sub_100101E80(*a1, *a2);
}

Swift::Int sub_1001F9200()
{
  return sub_1001B1504();
}

uint64_t sub_1001F9208()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F92CC()
{
  return sub_100103BC8();
}

unint64_t sub_1001F92D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FA83C(*a1);
  *a2 = result;
  return result;
}

void sub_1001F9304(uint64_t a1@<X8>)
{
  uint64_t v2 = 12400;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 12656;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000015;
      *(void *)(a1 + 8) = 0x8000000100372B30;
      break;
    case 3:
      *(void *)a1 = 118;
      *(void *)(a1 + 8) = 0xE100000000000000;
      break;
    case 4:
      strcpy((char *)a1, "ckRecordName");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE200000000000000;
      break;
  }
}

unint64_t sub_1001F93A4()
{
  unint64_t result = 12400;
  switch(*v0)
  {
    case 1:
      unint64_t result = 12656;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 118;
      break;
    case 4:
      unint64_t result = 0x64726F6365526B63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001F9434@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FA83C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001F945C(uint64_t a1)
{
  unint64_t v2 = sub_1001FA7E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F9498(uint64_t a1)
{
  unint64_t v2 = sub_1001FA7E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F94D4(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F1940);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1001FA7E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for FenceShareInviteEnvelopeV1();
    v8[14] = 1;
    type metadata accessor for URL();
    sub_1001FA948(&qword_1003F1948, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001F9720@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100044014(&qword_1003F1930);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for FenceShareInviteEnvelopeV1();
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100042524(a1, a1[3]);
  sub_1001FA7E8();
  char v34 = v7;
  uint64_t v11 = (uint64_t)v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return sub_1000233E4((uint64_t)a1);
  }
  Swift::String v35 = a1;
  uint64_t v12 = v10;
  uint64_t v14 = v32;
  uint64_t v13 = v33;
  char v40 = 0;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v15;
  char v39 = 1;
  sub_1001FA948(&qword_1003F1938, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))((char *)v12 + v8[5], v5, v3);
  char v38 = 2;
  v29[1] = 0;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = (uint64_t *)((char *)v12 + v8[6]);
  *uint64_t v17 = v16;
  v17[1] = v18;
  char v37 = 3;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t)v12;
  uint64_t v21 = (uint64_t *)((char *)v12 + v8[7]);
  *uint64_t v21 = v19;
  v21[1] = v22;
  char v36 = 4;
  uint64_t v23 = v8;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v13);
  char v27 = (uint64_t *)(v20 + v23[8]);
  *char v27 = v24;
  v27[1] = v26;
  sub_1001FA888(v20, v30);
  sub_1000233E4((uint64_t)v35);
  return sub_1001FA8EC(v20);
}

uint64_t sub_1001F9BE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F9720(a1, a2);
}

uint64_t sub_1001F9C00(void *a1)
{
  return sub_1001F94D4(a1);
}

uint64_t sub_1001F9C18()
{
  _StringGuts.grow(_:)(62);
  v1._countAndFlagsBits = 540684400;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A31700ALL;
  v5._object = (void *)0xE500000000000000;
  String.append(_:)(v5);
  uint64_t v6 = (int *)type metadata accessor for FenceShareInviteEnvelopeV1();
  v7._countAndFlagsBits = URL.absoluteString.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100377B30;
  v8._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v8);
  uint64_t v9 = (uint64_t *)((char *)v0 + v6[6]);
  uint64_t v10 = *v9;
  uint64_t v11 = (void *)v9[1];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x726F6365526B630ALL;
  v13._object = (void *)0xEF203A656D614E64;
  String.append(_:)(v13);
  uint64_t v14 = (uint64_t *)((char *)v0 + v6[8]);
  uint64_t v15 = *v14;
  uint64_t v16 = (void *)v14[1];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 540702218;
  v18._object = (void *)0xE400000000000000;
  String.append(_:)(v18);
  uint64_t v19 = (uint64_t *)((char *)v0 + v6[7]);
  uint64_t v20 = *v19;
  uint64_t v21 = (void *)v19[1];
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for FenceShareInviteEnvelopeV1()
{
  uint64_t result = qword_1003F18D0;
  if (!qword_1003F18D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001F9E1C()
{
  unint64_t result = qword_1003F1870;
  if (!qword_1003F1870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1870);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FenceShareInviteEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F9F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceShareInviteEnvelopeV1.CodingKeys()
{
  return &type metadata for FenceShareInviteEnvelopeV1.CodingKeys;
}

uint64_t *sub_1001F9F74(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    Swift::String v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    Swift::String v18 = (uint64_t *)((char *)v4 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *Swift::String v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    Swift::String v22 = (uint64_t *)((char *)v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *Swift::String v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001FA0B8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1001FA168(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  Swift::String v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  Swift::String v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001FA25C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  Swift::String v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1001FA384(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1001FA430(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  Swift::String v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  Swift::String v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *Swift::String v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FA518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FA52C);
}

uint64_t sub_1001FA52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001FA5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FA5F0);
}

uint64_t sub_1001FA5F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001FA698()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1001FA738()
{
  unint64_t result = qword_1003F1918;
  if (!qword_1003F1918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1918);
  }
  return result;
}

unint64_t sub_1001FA794()
{
  unint64_t result = qword_1003F1920;
  if (!qword_1003F1920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1920);
  }
  return result;
}

unint64_t sub_1001FA7E8()
{
  unint64_t result = qword_1003F1928;
  if (!qword_1003F1928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1928);
  }
  return result;
}

unint64_t sub_1001FA83C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD618, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001FA888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceShareInviteEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FA8EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FenceShareInviteEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001FA948(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001FA990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003ECFB8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v128 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void **)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v136 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v128 - v16;
  __chkstk_darwin(v15);
  uint64_t v137 = (char *)&v128 - v18;
  uint64_t v19 = sub_1001FBCB4(a1);
  swift_bridgeObjectRelease();
  if (*(void *)(v19 + 16))
  {
    sub_100044014(&qword_1003EFFB0);
    uint64_t v20 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v20 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v140 = v20;
  sub_1001FD3F8(v19, 1, &v140);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    __break(1u);
    JUMPOUT(0x1001FBCA0);
  }
  swift_bridgeObjectRelease();
  uint64_t v21 = v140;
  if (!*(void *)(v140 + 16)
    || (unint64_t v22 = sub_100122178(2u), (v23 & 1) == 0)
    || (sub_1000370D8(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v140),
        uint64_t v24 = sub_100044014(&qword_1003ECF00),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
    goto LABEL_11;
  }
  uint64_t v135 = v24;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  unint64_t v134 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
  if (v134(v10, 1, v11) == 1)
  {
    swift_release();
    sub_10000A520((uint64_t)v10, &qword_1003ECFB8);
LABEL_11:
    uint64_t v25 = type metadata accessor for GenericError();
    sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    char v27 = v26;
    *(void *)&long long v140 = 0;
    *((void *)&v140 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v28._object = (void *)0x8000000100377B80;
    v28._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v28);
    LOBYTE(v138) = 2;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v29 = *((void *)&v140 + 1);
    *char v27 = v140;
    v27[1] = v29;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, enum case for GenericError.error(_:), v25);
    return swift_willThrow();
  }
  uint64_t v128 = 0;
  uint64_t v31 = v137;
  uint64_t v129 = (void (*)(char *, char *, uint64_t))v12[4];
  uint64_t v130 = v12 + 4;
  v129(v137, v10, v11);
  unint64_t v131 = v12;
  uint64_t v32 = (void (*)(char *, char *, uint64_t))v12[2];
  uint64_t v133 = v11;
  v32(v17, v31, v11);
  uint64_t v132 = a2;
  Fence.ID.init(id:)();
  if (!*(void *)(v21 + 16)
    || (unint64_t v33 = sub_100122178(1u), (v34 & 1) == 0)
    || (sub_1000370D8(*(void *)(v21 + 56) + 32 * v33, (uint64_t)&v140), (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
LABEL_19:
    uint64_t v36 = type metadata accessor for GenericError();
    sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    char v38 = v37;
    *(void *)&long long v140 = 0;
    *((void *)&v140 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v39._object = (void *)0x8000000100377B80;
    v39._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v39);
    LOBYTE(v138) = 1;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v40 = *((void *)&v140 + 1);
    *char v38 = v140;
    v38[1] = v40;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for GenericError.error(_:), v36);
    swift_willThrow();
    ((void (*)(char *, uint64_t))v131[1])(v137, v133);
    int v41 = 0;
    int v42 = 0;
LABEL_20:
    uint64_t v43 = v132;
    goto LABEL_21;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = v133;
  if (v134(v8, 1, v133) == 1)
  {
    swift_release();
    sub_10000A520((uint64_t)v8, &qword_1003ECFB8);
    goto LABEL_19;
  }
  uint64_t v49 = v136;
  v129(v136, v8, v35);
  v32(v17, v49, v35);
  uint64_t v50 = (int *)type metadata accessor for FenceTriggerEnvelopeV1();
  uint64_t v43 = v132;
  Fence.TriggerID.init(id:)();
  if (!*(void *)(v21 + 16)
    || (uint64_t v51 = v35, v52 = sub_100122178(5u), (v53 & 1) == 0)
    || (sub_1000370D8(*(void *)(v21 + 56) + 32 * v52, (uint64_t)&v140), (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
    uint64_t v67 = type metadata accessor for GenericError();
    sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v69 = v68;
    *(void *)&long long v140 = 0;
    *((void *)&v140 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v70._object = (void *)0x8000000100377B80;
    v70._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v70);
    LOBYTE(v138) = 5;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v71 = *((void *)&v140 + 1);
    *uint64_t v69 = v140;
    v69[1] = v71;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v67 - 8) + 104))(v69, enum case for GenericError.error(_:), v67);
    int v42 = 0;
LABEL_34:
    uint64_t v51 = v133;
    goto LABEL_35;
  }
  uint64_t v54 = v43 + v50[7];
  Date.init(timeIntervalSince1970:)();
  if (!*(void *)(v21 + 16)
    || (unint64_t v55 = sub_100122178(3u), (v56 & 1) == 0)
    || (sub_1000370D8(*(void *)(v21 + 56) + 32 * v55, (uint64_t)&v140), (swift_dynamicCast() & 1) == 0))
  {
    swift_release();
    uint64_t v73 = type metadata accessor for GenericError();
    sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    char v75 = v74;
    *(void *)&long long v140 = 0;
    *((void *)&v140 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v76._object = (void *)0x8000000100377B80;
    v76._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v76);
    LOBYTE(v138) = 3;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v77 = *((void *)&v140 + 1);
    *char v75 = v140;
    v75[1] = v77;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v73 - 8) + 104))(v75, enum case for GenericError.error(_:), v73);
    int v42 = 1;
    goto LABEL_34;
  }
  uint64_t v57 = v138;
  uint64_t v58 = v139;
  swift_bridgeObjectRetain();
  unint64_t v134 = (unsigned int (*)(char *, uint64_t, uint64_t))v57;
  v142._countAndFlagsBits = v57;
  v142._object = v58;
  char v59 = sub_1001FD6B8(v142);
  if (v59 == 5)
  {
    swift_release();
    uint64_t v60 = type metadata accessor for GenericError();
    sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    char v62 = v61;
    *(void *)&long long v140 = 0;
    *((void *)&v140 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v63._countAndFlagsBits = 0xD000000000000033;
    v63._object = (void *)0x8000000100377BB0;
    String.append(_:)(v63);
    LOBYTE(v138) = 3;
    _print_unlocked<A, B>(_:_:)();
    v64._countAndFlagsBits = 8250;
    v64._object = (void *)0xE200000000000000;
    String.append(_:)(v64);
    v65._countAndFlagsBits = (uint64_t)v134;
    v65._object = v58;
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    uint64_t v66 = *((void *)&v140 + 1);
    *char v62 = v140;
    v62[1] = v66;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v60 - 8) + 104))(v62, enum case for GenericError.error(_:), v60);
    int v42 = 1;
    uint64_t v49 = v136;
LABEL_35:
    swift_willThrow();
    uint64_t v72 = (void (*)(char *, uint64_t))v131[1];
    v72(v49, v51);
    v72(v137, v51);
    int v41 = 1;
LABEL_21:
    uint64_t v44 = type metadata accessor for Fence.ID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
    if (v41)
    {
      uint64_t v45 = v43 + *(int *)(type metadata accessor for FenceTriggerEnvelopeV1() + 20);
      uint64_t v46 = type metadata accessor for Fence.TriggerID();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
    }
    if (v42)
    {
      uint64_t v47 = v43 + *(int *)(type metadata accessor for FenceTriggerEnvelopeV1() + 28);
      uint64_t v48 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
    }
    return result;
  }
  char v78 = v59;
  swift_bridgeObjectRelease();
  uint64_t v79 = v50[8];
  *(unsigned char *)(v43 + v79) = v78;
  switch((int)v79)
  {
    case 1:
    case 3:
      if (*(void *)(v21 + 16) && (unint64_t v82 = sub_100122178(6u), (v83 & 1) != 0))
      {
        sub_1000370D8(*(void *)(v21 + 56) + 32 * v82, (uint64_t)&v140);
      }
      else
      {
        long long v140 = 0u;
        long long v141 = 0u;
      }
      swift_release();
      if (!*((void *)&v141 + 1)) {
        goto LABEL_58;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_62;
      }
      uint64_t v85 = v138;
      unint64_t v84 = (unint64_t)v139;
      sub_100044014(&qword_1003EE608);
      uint64_t v102 = swift_allocObject();
      *(_OWORD *)(v102 + 16) = xmmword_100367D70;
      uint64_t v103 = sub_10005A548(0, &qword_1003EE970);
      *(void *)(v102 + 56) = sub_100044014(&qword_1003F1958);
      *(void *)(v102 + 32) = v103;
      id v104 = objc_allocWithZone((Class)NSSet);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v106 = [v104 initWithArray:isa];

      *(void *)&long long v140 = 0;
      static Set._conditionallyBridgeFromObjectiveC(_:result:)();

      if (!(void)v140) {
        goto LABEL_61;
      }
      uint64_t v107 = self;
      Class v108 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v109 = Data._bridgeToObjectiveC()().super.isa;
      *(void *)&long long v140 = 0;
      id v110 = [v107 _strictlyUnarchivedObjectOfClasses:v108 fromData:v109 error:&v140];

      uint64_t v95 = (void *)v140;
      if (!v110) {
        goto LABEL_64;
      }
      id v111 = (id)v140;
      _bridgeAnyObjectToAny(_:)();
      sub_100044090(v85, v84);
      swift_unknownObjectRelease();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_62;
      }
      uint64_t v112 = v138;
      uint64_t v113 = (void (*)(char *, uint64_t))v131[1];
      uint64_t v114 = v133;
      v113(v136, v133);
      v113(v137, v114);
      uint64_t v100 = (uint64_t *)(v132 + v50[6]);
      *uint64_t v100 = v112;
      uint64_t v101 = (unsigned int *)&enum case for Fence.TriggerPosition.outside(_:);
      goto LABEL_60;
    case 4:
      swift_release();
      uint64_t v115 = (void (*)(char *, uint64_t))v131[1];
      uint64_t v116 = v133;
      v115(v136, v133);
      v115(v137, v116);
      uint64_t v100 = (uint64_t *)(v132 + v50[6]);
      uint64_t v117 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v117 - 8) + 16))(v100, v54, v117);
      uint64_t v101 = (unsigned int *)&enum case for Fence.TriggerPosition.undetermined(_:);
      goto LABEL_60;
    default:
      if (*(void *)(v21 + 16) && (unint64_t v80 = sub_100122178(6u), (v81 & 1) != 0))
      {
        sub_1000370D8(*(void *)(v21 + 56) + 32 * v80, (uint64_t)&v140);
      }
      else
      {
        long long v140 = 0u;
        long long v141 = 0u;
      }
      swift_release();
      if (!*((void *)&v141 + 1))
      {
LABEL_58:
        sub_10000A520((uint64_t)&v140, &qword_1003F17C0);
        goto LABEL_62;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_62;
      }
      uint64_t v85 = v138;
      unint64_t v84 = (unint64_t)v139;
      sub_100044014(&qword_1003EE608);
      uint64_t v86 = swift_allocObject();
      *(_OWORD *)(v86 + 16) = xmmword_100367D70;
      uint64_t v87 = sub_10005A548(0, &qword_1003EE970);
      *(void *)(v86 + 56) = sub_100044014(&qword_1003F1958);
      *(void *)(v86 + 32) = v87;
      id v88 = objc_allocWithZone((Class)NSSet);
      Class v89 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v90 = [v88 initWithArray:v89];

      *(void *)&long long v140 = 0;
      static Set._conditionallyBridgeFromObjectiveC(_:result:)();

      if (!(void)v140)
      {
LABEL_61:
        sub_100044090(v85, v84);
        goto LABEL_62;
      }
      uint64_t v91 = self;
      Class v92 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v93 = Data._bridgeToObjectiveC()().super.isa;
      *(void *)&long long v140 = 0;
      id v94 = [v91 _strictlyUnarchivedObjectOfClasses:v92 fromData:v93 error:&v140];

      uint64_t v95 = (void *)v140;
      if (!v94)
      {
LABEL_64:
        id v127 = v95;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100044090(v85, v84);
        goto LABEL_63;
      }
      id v96 = (id)v140;
      _bridgeAnyObjectToAny(_:)();
      sub_100044090(v85, v84);
      swift_unknownObjectRelease();
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_62:
        uint64_t v120 = type metadata accessor for GenericError();
        sub_1001FD76C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
        swift_allocError();
        int64_t v122 = v121;
        *(void *)&long long v140 = 0;
        *((void *)&v140 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        v123._object = (void *)0x8000000100377B80;
        v123._countAndFlagsBits = 0xD000000000000029;
        String.append(_:)(v123);
        LOBYTE(v138) = 6;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v124 = *((void *)&v140 + 1);
        *int64_t v122 = v140;
        v122[1] = v124;
        (*(void (**)(void *, void, uint64_t))(*(void *)(v120 - 8) + 104))(v122, enum case for GenericError.error(_:), v120);
        swift_willThrow();
LABEL_63:
        uint64_t v125 = (void (*)(char *, uint64_t))v131[1];
        uint64_t v126 = v133;
        v125(v136, v133);
        v125(v137, v126);
        int v41 = 1;
        int v42 = 1;
        goto LABEL_20;
      }
      uint64_t v97 = v138;
      uint64_t v98 = (void (*)(char *, uint64_t))v131[1];
      uint64_t v99 = v133;
      v98(v136, v133);
      v98(v137, v99);
      uint64_t v100 = (uint64_t *)(v132 + v50[6]);
      *uint64_t v100 = v97;
      uint64_t v101 = (unsigned int *)&enum case for Fence.TriggerPosition.inside(_:);
LABEL_60:
      uint64_t v118 = *v101;
      uint64_t v119 = type metadata accessor for Fence.TriggerPosition();
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v119 - 8) + 104))(v100, v118, v119);
  }
}

uint64_t sub_1001FBCB4(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t v33 = v30;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v5) {
    goto LABEL_31;
  }
LABEL_6:
  int64_t v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v6)
    {
      unint64_t v11 = *(void *)(v2 + 8 * v10);
      ++v8;
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 2;
      if (v10 + 2 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 3;
      if (v10 + 3 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        unint64_t v5 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v8 << 6); ; unint64_t i = v22 | (v8 << 6))
        {
          uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
          uint64_t v16 = *v14;
          uint64_t v15 = (void *)v14[1];
          sub_1000370D8(*(void *)(a1 + 56) + 32 * i, (uint64_t)v32);
          v31._countAndFlagsBits = v16;
          v31._object = v15;
          Swift::String v29 = v31;
          v30[0] = v32[0];
          v30[1] = v32[1];
          Swift::String v17 = v31;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v18 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCCF0, v17);
          swift_bridgeObjectRelease();
          if (v18 > 6)
          {
            uint64_t v28 = 0;
            long long v26 = 0u;
            long long v27 = 0u;
          }
          else
          {
            LOBYTE(v26) = v18;
            sub_1000370D8((uint64_t)v33, (uint64_t)&v26 + 8);
          }
          sub_10000A520((uint64_t)&v29, &qword_1003F1960);
          if (v28)
          {
            long long v23 = v26;
            long long v24 = v27;
            uint64_t v25 = v28;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_10013E088(0, v9[2] + 1, 1, v9);
              uint64_t v9 = (void *)result;
            }
            unint64_t v20 = v9[2];
            unint64_t v19 = v9[3];
            if (v20 >= v19 >> 1)
            {
              uint64_t result = (uint64_t)sub_10013E088((void *)(v19 > 1), v20 + 1, 1, v9);
              uint64_t v9 = (void *)result;
            }
            v9[2] = v20 + 1;
            uint64_t v21 = &v9[5 * v20];
            v21[8] = v25;
            *((_OWORD *)v21 + 2) = v23;
            *((_OWORD *)v21 + 3) = v24;
            if (!v5) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t result = sub_10000A520((uint64_t)&v26, &qword_1003F1968);
            if (!v5) {
              goto LABEL_6;
            }
          }
LABEL_31:
          unint64_t v22 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
          int64_t v8 = v12;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v8 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_34;
          }
          if (v8 >= v6) {
            break;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v8);
          ++v12;
          if (v11) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_32:
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1001FBF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v59 = type metadata accessor for Fence.Variant();
  uint64_t v62 = *(void *)(v59 - 8);
  uint64_t v7 = __chkstk_darwin(v59);
  uint64_t v57 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v53 - v9;
  uint64_t v10 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v66 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a1;
  Fence.id.getter();
  uint64_t v13 = (int *)type metadata accessor for FenceTriggerEnvelopeV1();
  uint64_t v14 = a4 + v13[5];
  uint64_t v15 = type metadata accessor for Fence.TriggerID();
  uint64_t v16 = *(void *)(v15 - 8);
  Swift::String v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v56 = v14;
  uint64_t v63 = a2;
  v17(v14, a2, v15);
  uint64_t v18 = v11;
  unint64_t v19 = *(void (**)(void))(v11 + 16);
  uint64_t v54 = a4 + v13[6];
  unint64_t v20 = v61;
  v19();
  uint64_t v60 = v13;
  uint64_t v21 = v13[7];
  uint64_t v65 = a4;
  unint64_t v22 = v20;
  uint64_t v55 = a4 + v21;
  sub_10019A184(a4 + v21);
  long long v23 = v66;
  ((void (*)(char *, char *, uint64_t))v19)(v66, v22, v10);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v23, v10);
  if (v24 == enum case for Fence.TriggerPosition.inside(_:))
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
    v25(v23, v10);
    long long v26 = v58;
    uint64_t v27 = v64;
    Fence.variant.getter();
    v25(v22, v10);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v63, v15);
    uint64_t v28 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
    uint64_t v29 = v62;
    uint64_t v30 = v59;
    LODWORD(v27) = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v26, v59);
    LODWORD(v25) = enum case for Fence.Variant.scheduled(_:);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v26, v30);
    uint64_t v32 = v60[8];
    if (v27 == v25)
    {
      *(unsigned char *)(v65 + v32) = 0;
      return result;
    }
    char v41 = 2;
    goto LABEL_11;
  }
  uint64_t v58 = (char *)v15;
  uint64_t v33 = v62;
  if (v24 == enum case for Fence.TriggerPosition.outside(_:))
  {
    char v34 = *(void (**)(char *, uint64_t))(v18 + 8);
    v34(v66, v10);
    uint64_t v35 = v57;
    uint64_t v36 = v64;
    Fence.variant.getter();
    v34(v22, v10);
    (*(void (**)(uint64_t, char *))(v16 + 8))(v63, v58);
    uint64_t v37 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
    uint64_t v38 = v33;
    Swift::String v39 = *(uint64_t (**)(char *, uint64_t))(v33 + 88);
    uint64_t v40 = v59;
    LODWORD(v36) = v39(v35, v59);
    LODWORD(v34) = enum case for Fence.Variant.scheduled(_:);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v35, v40);
    uint64_t v32 = v60[8];
    if (v36 == v34) {
      char v41 = 1;
    }
    else {
      char v41 = 3;
    }
LABEL_11:
    *(unsigned char *)(v65 + v32) = v41;
    return result;
  }
  uint64_t v42 = v16;
  if (v24 == enum case for Fence.TriggerPosition.undetermined(_:))
  {
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v43((uint64_t)v22, v10);
    (*(void (**)(uint64_t, char *))(v16 + 8))(v63, v58);
    uint64_t v44 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v64, v44);
    *(unsigned char *)(v65 + v60[8]) = 4;
    return ((uint64_t (*)(char *, uint64_t))v43)(v66, v10);
  }
  else
  {
    uint64_t v62 = type metadata accessor for Session.FenceError();
    sub_1001FD76C(&qword_1003F1978, (void (*)(uint64_t))&type metadata accessor for Session.FenceError);
    swift_allocError();
    uint64_t v46 = v45;
    ((void (*)(uint64_t, char *, uint64_t))v19)(v45, v22, v10);
    (*(void (**)(uint64_t, void))(*(void *)(v62 - 8) + 104))(v46, enum case for Session.FenceError.unrecognizedTriggerPosition(_:));
    swift_willThrow();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v47((uint64_t)v22, v10);
    uint64_t v48 = *(void (**)(uint64_t, char *))(v42 + 8);
    uint64_t v49 = v58;
    v48(v63, v58);
    uint64_t v50 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v64, v50);
    v47((uint64_t)v66, v10);
    uint64_t v51 = type metadata accessor for Fence.ID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v65, v51);
    v48(v56, v49);
    v47(v54, v10);
    uint64_t v52 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v55, v52);
  }
}

unint64_t sub_1001FC6C8()
{
  uint64_t v1 = v0;
  uint64_t v27 = type metadata accessor for Fence.TriggerPosition();
  uint64_t v2 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v4 = (void **)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100044014(&qword_1003F1970);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367F20;
  *(void *)(inited + 32) = 0xD000000000000015;
  *(void *)(inited + 40) = 0x8000000100372B30;
  strcpy((char *)(inited + 48), "fenceTrigger");
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 62) = -5120;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 118;
  *(void *)(inited + 88) = 0xE100000000000000;
  *(void *)(inited + 96) = 49;
  *(void *)(inited + 104) = 0xE100000000000000;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 1684632949;
  unint64_t v6 = 0xE400000000000000;
  *(void *)(inited + 136) = 0xE400000000000000;
  uint64_t v7 = type metadata accessor for FenceTriggerEnvelopeV1();
  *(void *)(inited + 144) = Fence.TriggerID.uuidString.getter();
  *(void *)(inited + 152) = v8;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0x444965636E6566;
  *(void *)(inited + 184) = 0xE700000000000000;
  *(void *)(inited + 192) = Fence.ID.uuidString.getter();
  *(void *)(inited + 200) = v9;
  *(void *)(inited + 216) = &type metadata for String;
  strcpy((char *)(inited + 224), "triggerStatus");
  *(_WORD *)(inited + 238) = -4864;
  uint64_t v10 = 1953069157;
  switch(*(unsigned char *)(v0 + *(int *)(v7 + 32)))
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v10 = 7632239;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v10 = 0x7265746E65;
      break;
    case 3:
      break;
    case 4:
      unint64_t v6 = 0xEC00000064656E69;
      uint64_t v10 = 0x6D72657465646E75;
      break;
    default:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v10 = 28265;
      break;
  }
  *(void *)(inited + 240) = v10;
  *(void *)(inited + 248) = v6;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = 1702125924;
  *(void *)(inited + 280) = 0xE400000000000000;
  Date.timeIntervalSince1970.getter();
  id v12 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v11];
  *(void *)(inited + 312) = sub_10005A548(0, &qword_1003ECA88);
  *(void *)(inited + 288) = v12;
  unint64_t v13 = sub_1001019AC(inited);
  uint64_t v14 = v27;
  (*(void (**)(void **, uint64_t, uint64_t))(v2 + 16))(v4, v1 + *(int *)(v7 + 24), v27);
  int v15 = (*(uint64_t (**)(void **, uint64_t))(v2 + 88))(v4, v14);
  if (v15 == enum case for Fence.TriggerPosition.inside(_:) || v15 == enum case for Fence.TriggerPosition.outside(_:))
  {
    (*(void (**)(void **, uint64_t))(v2 + 96))(v4, v14);
    uint64_t v16 = *v4;
    Swift::String v17 = self;
    *(void *)&long long v30 = 0;
    id v18 = [v17 archivedDataWithRootObject:v16 requiringSecureCoding:1 error:&v30];
    id v19 = (id)v30;
    if (v18)
    {
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      Swift::String v31 = &type metadata for Data;
      *(void *)&long long v30 = v20;
      *((void *)&v30 + 1) = v22;
      sub_100023434(&v30, v29);
      sub_100022C64(v20, v22);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v28 = v13;
      sub_100142DB8(v29, 0x6E6F697461636F6CLL, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
      unint64_t v13 = v28;

      swift_bridgeObjectRelease();
      sub_100044090(v20, v22);
    }
    else
    {
      uint64_t v25 = v19;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    if (v15 != enum case for Fence.TriggerPosition.undetermined(_:))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1001FCBC8);
    }
    (*(void (**)(void **, uint64_t))(v2 + 8))(v4, v14);
  }
  return v13;
}

unint64_t sub_1001FCBDC(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 1684632949;
      break;
    case 2:
      unint64_t result = 0x444965636E6566;
      break;
    case 3:
      unint64_t result = 0x5372656767697274;
      break;
    case 4:
      unint64_t result = 118;
      break;
    case 5:
      unint64_t result = 1702125924;
      break;
    case 6:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001FCCB8(char *a1, char *a2)
{
  return sub_100102928(*a1, *a2);
}

Swift::Int sub_1001FCCC4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001FCDA4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001FCE6C()
{
  return Hasher._finalize()();
}

unint64_t sub_1001FCF48@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FD6B8(*a1);
  *a2 = result;
  return result;
}

void sub_1001FCF78(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 28265;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 7632239;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7265746E65;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      *(void *)a1 = 1953069157;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 4:
      strcpy((char *)a1, "undetermined");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1001FD01C(unsigned __int8 *a1, char *a2)
{
  return sub_100102700(*a1, *a2);
}

unint64_t sub_1001FD028@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001FD3AC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001FD058@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001FCBDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_1001FD084()
{
  return sub_100103AA8();
}

uint64_t sub_1001FD090()
{
  return sub_1001035AC();
}

Swift::Int sub_1001FD098()
{
  return sub_100103AA8();
}

uint64_t sub_1001FD0A0()
{
  BYTE8(v12) = 0;
  _StringGuts.grow(_:)(52);
  v1._countAndFlagsBits = 0x3A444965636E6566;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  type metadata accessor for Fence.ID();
  sub_1001FD76C(&qword_1003EEA50, (void (*)(uint64_t))&type metadata accessor for Fence.ID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x726567676972740ALL;
  v3._object = (void *)0xEC000000203A4449;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for FenceTriggerEnvelopeV1();
  type metadata accessor for Fence.TriggerID();
  sub_1001FD76C(&qword_1003EEA58, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6F697469736F700ALL;
  v6._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v6);
  type metadata accessor for Fence.TriggerPosition();
  sub_1001FD76C(&qword_1003EEA60, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerPosition);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 10272;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  *(void *)&long long v12 = *(unsigned __int8 *)(v0 + *(int *)(v4 + 32));
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A657461640A29;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  type metadata accessor for Date();
  sub_1001FD76C(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return *(void *)((char *)&v12 + 1);
}

uint64_t type metadata accessor for FenceTriggerEnvelopeV1()
{
  uint64_t result = qword_1003F19D8;
  if (!qword_1003F19D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001FD3AC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCCF0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001FD3F8(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result + 32;
    uint64_t v44 = result;
    swift_bridgeObjectRetain();
    sub_1001FD704(v6, (uint64_t)v42);
    unsigned __int8 v7 = v42[0];
    sub_100023434(v43, v41);
    Swift::String v8 = (void *)*a3;
    unint64_t v10 = sub_100122178(v7);
    uint64_t v11 = v8[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    char v14 = v9;
    if (v8[3] < v13)
    {
      sub_10013F6B0(v13, a2 & 1);
      unint64_t v15 = sub_100122178(v7);
      if ((v14 & 1) != (v16 & 1))
      {
LABEL_28:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v10 = v15;
      if ((v14 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      Swift::String v17 = (void *)*a3;
      sub_100023434(v41, v40);
      id v18 = (_OWORD *)(v17[7] + 32 * v10);
      sub_1000233E4((uint64_t)v18);
      sub_100023434(v40, v18);
      uint64_t v19 = v3 - 1;
      if (!v19) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = v44 + 72; ; i += 40)
      {
        sub_1001FD704(i, (uint64_t)v42);
        unsigned __int8 v27 = v42[0];
        sub_100023434(v43, v41);
        unint64_t v28 = (void *)*a3;
        unint64_t v30 = sub_100122178(v27);
        uint64_t v31 = v28[2];
        BOOL v32 = (v29 & 1) == 0;
        uint64_t v33 = v31 + v32;
        if (__OFADD__(v31, v32)) {
          break;
        }
        char v34 = v29;
        if (v28[3] < v33)
        {
          sub_10013F6B0(v33, 1);
          unint64_t v35 = sub_100122178(v27);
          if ((v34 & 1) != (v36 & 1)) {
            goto LABEL_28;
          }
          unint64_t v30 = v35;
        }
        if (v34)
        {
          uint64_t v25 = (void *)*a3;
          sub_100023434(v41, v40);
          uint64_t v26 = (_OWORD *)(v25[7] + 32 * v30);
          sub_1000233E4((uint64_t)v26);
          sub_100023434(v40, v26);
        }
        else
        {
          uint64_t v37 = (void *)*a3;
          *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
          *(unsigned char *)(v37[6] + v30) = v27;
          sub_100023434(v41, (_OWORD *)(v37[7] + 32 * v30));
          uint64_t v38 = v37[2];
          BOOL v22 = __OFADD__(v38, 1);
          uint64_t v39 = v38 + 1;
          if (v22) {
            goto LABEL_27;
          }
          v37[2] = v39;
        }
        if (!--v19) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      if (v9) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1001260DC();
      if (v14) {
        goto LABEL_9;
      }
    }
LABEL_12:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(unsigned char *)(v20[6] + v10) = v7;
    sub_100023434(v41, (_OWORD *)(v20[7] + 32 * v10));
    uint64_t v21 = v20[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v20[2] = v23;
    uint64_t v19 = v3 - 1;
    if (!v19) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

unint64_t sub_1001FD6B8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCDB8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001FD704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F03E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FD76C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FenceTriggerEnvelopeV1.DictionaryKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FD880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceTriggerEnvelopeV1.DictionaryKey()
{
  return &type metadata for FenceTriggerEnvelopeV1.DictionaryKey;
}

unsigned char *storeEnumTagSinglePayload for FenceTriggerEnvelopeV1.EnvelopeTriggerStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FD984);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FenceTriggerEnvelopeV1.EnvelopeTriggerStatus()
{
  return &type metadata for FenceTriggerEnvelopeV1.EnvelopeTriggerStatus;
}

void *sub_1001FD9BC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Fence.ID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    char v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    char v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Fence.TriggerPosition();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    Swift::String v17 = (char *)a1 + v16;
    id v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1001FDB68(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t sub_1001FDC98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1001FDDF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1001FDF50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1001FE0AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1001FE208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FE21C);
}

uint64_t sub_1001FE21C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Fence.ID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Fence.TriggerID();
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      uint64_t v14 = type metadata accessor for Fence.TriggerPosition();
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
      {
        uint64_t v8 = v14;
        uint64_t v12 = *(void *)(v14 - 8);
        uint64_t v13 = a3[6];
      }
      else
      {
        uint64_t v15 = type metadata accessor for Date();
        if (*(_DWORD *)(*(void *)(v15 - 8) + 84) != a2)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + a3[8]);
          if (v17 >= 5) {
            return v17 - 4;
          }
          else {
            return 0;
          }
        }
        uint64_t v8 = v15;
        uint64_t v12 = *(void *)(v15 - 8);
        uint64_t v13 = a3[7];
      }
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1001FE3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FE3D8);
}

uint64_t sub_1001FE3D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Fence.ID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for Fence.TriggerID();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = type metadata accessor for Fence.TriggerPosition();
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = type metadata accessor for Date();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(unsigned char *)(a1 + a4[8]) = a2 + 4;
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1001FE580()
{
  uint64_t result = type metadata accessor for Fence.ID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Fence.TriggerID();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Fence.TriggerPosition();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Date();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1001FE6CC()
{
  unint64_t result = qword_1003F1A20;
  if (!qword_1003F1A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1A20);
  }
  return result;
}

unint64_t sub_1001FE724()
{
  unint64_t result = qword_1003F1A28;
  if (!qword_1003F1A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1A28);
  }
  return result;
}

unint64_t sub_1001FE778()
{
  uint64_t v1 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  unint64_t v14 = 0xD000000000000024;
  unint64_t v15 = 0x8000000100377BF0;
  long long v13 = *v0;
  sub_10004F4EC();
  v4._countAndFlagsBits = DataProtocol.hexString.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6B6F54726565700ALL;
  v5._object = (void *)0xEC000000203A6E65;
  String.append(_:)(v5);
  uint64_t v6 = *((void *)v0 + 2);
  unint64_t v7 = *((void *)v0 + 3);
  sub_100022C64(v6, v7);
  v8._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_100044090(v6, v7);
  v9._countAndFlagsBits = 0x6148796C7065720ALL;
  v9._object = (void *)0xEE00203A656C646ELL;
  String.append(_:)(v9);
  uint64_t v10 = type metadata accessor for FindingConfigEnvelopeV1(0);
  sub_1001FE948((uint64_t)v0 + *(int *)(v10 + 24), (uint64_t)v3);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t type metadata accessor for FindingConfigEnvelopeV1(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003F1B18);
}

uint64_t sub_1001FE948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F3B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FE9B0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003F1B68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1002007FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_10008FC1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for FindingConfigEnvelopeV1(0);
    LOBYTE(v12) = 2;
    type metadata accessor for Handle();
    sub_1002008B8(&qword_1003EEAB0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001FEBAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003F1B58);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FindingConfigEnvelopeV1(0);
  __chkstk_darwin(v10);
  long long v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1002007FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  uint64_t v18 = v10;
  uint64_t v19 = v6;
  long long v13 = v12;
  uint64_t v14 = v21;
  char v24 = 0;
  sub_10008FB64();
  uint64_t v15 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *long long v13 = v23;
  char v24 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13[1] = v23;
  type metadata accessor for Handle();
  LOBYTE(v23) = 2;
  sub_1002008B8(&qword_1003EEAE8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  sub_100200850((uint64_t)v19, (uint64_t)v13 + *(int *)(v18 + 24));
  sub_100200950((uint64_t)v13, v20, type metadata accessor for FindingConfigEnvelopeV1);
  sub_1000233E4((uint64_t)a1);
  return sub_1002009B8((uint64_t)v13, type metadata accessor for FindingConfigEnvelopeV1);
}

uint64_t sub_1001FEF08()
{
  uint64_t v1 = 0x656B6F5472656570;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6148796C706572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x61446769666E6F63;
  }
}

uint64_t sub_1001FEF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100200E30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FEF9C(uint64_t a1)
{
  unint64_t v2 = sub_1002007FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FEFD8(uint64_t a1)
{
  unint64_t v2 = sub_1002007FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FF014@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FEBAC(a1, a2);
}

uint64_t sub_1001FF02C(void *a1)
{
  return sub_1001FE9B0(a1);
}

unint64_t sub_1001FF048()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_100022C64(*v0, v2);
  v3._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_100044090(v1, v2);
  v4._countAndFlagsBits = 0x6E6148726565700ALL;
  v4._object = (void *)0xED0000203A656C64;
  String.append(_:)(v4);
  type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  type metadata accessor for Handle();
  sub_1002008B8(&qword_1003F00F0);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0xD00000000000002ELL;
}

uint64_t type metadata accessor for FindingConfigSessionStopEnvelopeV1(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003F1A88);
}

uint64_t sub_1001FF19C(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003F1B80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1002008FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_10008FC1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
    LOBYTE(v11) = 1;
    type metadata accessor for Handle();
    sub_1002008B8(&qword_1003EEAB0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001FF358@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for Handle();
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100044014(&qword_1003F1B70);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1002008FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  uint64_t v16 = v8;
  uint64_t v12 = v19;
  uint64_t v11 = v20;
  long long v13 = v10;
  char v23 = 0;
  sub_10008FB64();
  uint64_t v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)long long v13 = v22;
  LOBYTE(v22) = 1;
  sub_1002008B8(&qword_1003EEAE8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v13[*(int *)(v16 + 20)], v5, v11);
  sub_100200950((uint64_t)v13, v18, type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  sub_1000233E4((uint64_t)a1);
  return sub_1002009B8((uint64_t)v13, type metadata accessor for FindingConfigSessionStopEnvelopeV1);
}

uint64_t sub_1001FF680()
{
  if (*v0) {
    return 0x646E614872656570;
  }
  else {
    return 0x656B6F5472656570;
  }
}

uint64_t sub_1001FF6C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100200FB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FF6EC(uint64_t a1)
{
  unint64_t v2 = sub_1002008FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FF728(uint64_t a1)
{
  unint64_t v2 = sub_1002008FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FF764@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FF358(a1, a2);
}

uint64_t sub_1001FF77C(void *a1)
{
  return sub_1001FF19C(a1);
}

uint64_t *sub_1001FF798(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100022C64(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Handle();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1001FF880(uint64_t a1, uint64_t a2)
{
  sub_100044090(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Handle();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1001FF8FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100022C64(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Handle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1001FF994(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100022C64(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100044090(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Handle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1001FFA34(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Handle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1001FFAB0(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100044090(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Handle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001FFB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FFB54);
}

uint64_t sub_1001FFB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Handle();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001FFC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FFC24);
}

void *sub_1001FFC24(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Handle();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001FFCD4()
{
  uint64_t result = type metadata accessor for Handle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001FFD6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100022C64(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100022C64(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Handle();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100044014(&qword_1003F3B30);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t sub_1001FFEF8(uint64_t a1, uint64_t a2)
{
  sub_100044090(*(void *)a1, *(void *)(a1 + 8));
  sub_100044090(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Handle();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t *sub_1001FFFD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100022C64(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100022C64(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Handle();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100044014(&qword_1003F3B30);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t *sub_100200110(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100022C64(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100044090(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100022C64(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100044090(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Handle();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v11) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v11)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_100044014(&qword_1003F3B30);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

_OWORD *sub_1002002C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Handle();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_100044014(&qword_1003F3B30);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t *sub_1002003D4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100044090(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100044090(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Handle();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100044014(&qword_1003F3B30);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_100200570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100200584);
}

uint64_t sub_100200584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100044014(&qword_1003F3B30);
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100200644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100200658);
}

void *sub_100200658(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_100044014(&qword_1003F3B30);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10020070C()
{
  sub_1002007A4();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1002007A4()
{
  if (!qword_1003F3BA0)
  {
    type metadata accessor for Handle();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003F3BA0);
    }
  }
}

unint64_t sub_1002007FC()
{
  unint64_t result = qword_1003F1B60;
  if (!qword_1003F1B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1B60);
  }
  return result;
}

uint64_t sub_100200850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F3B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002008B8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Handle();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002008FC()
{
  unint64_t result = qword_1003F1B78;
  if (!qword_1003F1B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1B78);
  }
  return result;
}

uint64_t sub_100200950(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002009B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for FindingConfigSessionStopEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100200AE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingConfigSessionStopEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingConfigSessionStopEnvelopeV1.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for FindingConfigEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100200BE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingConfigEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingConfigEnvelopeV1.CodingKeys;
}

unint64_t sub_100200C24()
{
  unint64_t result = qword_1003F1B88;
  if (!qword_1003F1B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1B88);
  }
  return result;
}

unint64_t sub_100200C7C()
{
  unint64_t result = qword_1003F1B90;
  if (!qword_1003F1B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1B90);
  }
  return result;
}

unint64_t sub_100200CD4()
{
  unint64_t result = qword_1003F1B98;
  if (!qword_1003F1B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1B98);
  }
  return result;
}

unint64_t sub_100200D2C()
{
  unint64_t result = qword_1003F1BA0;
  if (!qword_1003F1BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1BA0);
  }
  return result;
}

unint64_t sub_100200D84()
{
  unint64_t result = qword_1003F1BA8;
  if (!qword_1003F1BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1BA8);
  }
  return result;
}

unint64_t sub_100200DDC()
{
  unint64_t result = qword_1003F1BB0;
  if (!qword_1003F1BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1BB0);
  }
  return result;
}

uint64_t sub_100200E30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61446769666E6F63 && a2 == 0xEA00000000006174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656B6F5472656570 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6148796C706572 && a2 == 0xEB00000000656C64)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100200FB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656B6F5472656570 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E614872656570 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002010C4()
{
  uint64_t v1 = type metadata accessor for HashAlgorithm();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  uint64_t v5 = type metadata accessor for FindingTokenEnvelopeV1();
  sub_100202C20(&qword_1003F1BB8, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
  v6._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x8000000100377C50;
  v7._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  uint64_t v8 = *v0;
  uint64_t v9 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x7461446573616220;
  v11._object = (void *)0xEB00000000203A65;
  String.append(_:)(v11);
  type metadata accessor for Date();
  sub_100202C20(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x5364657261687320;
  v13._object = (void *)0xEF203A7465726365;
  String.append(_:)(v13);
  uint64_t v14 = (uint64_t *)((char *)v0 + *(int *)(v5 + 24));
  unint64_t v16 = v14[1];
  uint64_t v25 = *v14;
  uint64_t v15 = v25;
  unint64_t v26 = v16;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for HashAlgorithm.sha256(_:), v1);
  sub_100022C64(v15, v16);
  sub_10004F4EC();
  uint64_t v17 = DataProtocol.hash(algorithm:)();
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100044090(v25, v26);
  uint64_t v25 = v17;
  unint64_t v26 = v19;
  uint64_t v20 = DataProtocol.hexString.getter();
  long long v22 = v21;
  sub_100044090(v17, v19);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t type metadata accessor for FindingTokenEnvelopeV1()
{
  uint64_t result = qword_1003F1C28;
  if (!qword_1003F1C28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100201400(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003F1CA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_100202B0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FindingTokenEnvelopeV1();
    LOBYTE(v12) = 1;
    type metadata accessor for Date();
    sub_100202C20(&qword_1003EEAA8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    sub_10008FC1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100201600@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F1C98);
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FindingTokenEnvelopeV1();
  __chkstk_darwin(v9);
  Swift::String v11 = (void *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100042524(a1, a1[3]);
  sub_100202B0C();
  long long v22 = v8;
  uint64_t v12 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return sub_1000233E4((uint64_t)a1);
  }
  uint64_t v23 = v9;
  uint64_t v14 = v20;
  uint64_t v13 = v21;
  LOBYTE(v24) = 0;
  *Swift::String v11 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[1] = v15;
  LOBYTE(v24) = 1;
  sub_100202C20(&qword_1003EEAE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))((char *)v11 + *(int *)(v23 + 20), v5, v3);
  char v25 = 2;
  sub_10008FB64();
  v17[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
  *(_OWORD *)((char *)v11 + *(int *)(v23 + 24)) = v24;
  sub_100202B60((uint64_t)v11, v18);
  sub_1000233E4((uint64_t)a1);
  return sub_100202BC4((uint64_t)v11);
}

uint64_t sub_1002019CC()
{
  uint64_t v1 = 0x6574614465736162;
  if (*v0 != 1) {
    uint64_t v1 = 0x6553646572616873;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6449726576726573;
  }
}

uint64_t sub_100201A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100203170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100201A58(uint64_t a1)
{
  unint64_t v2 = sub_100202B0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201A94(uint64_t a1)
{
  unint64_t v2 = sub_100202B0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100201AD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100201600(a1, a2);
}

uint64_t sub_100201AE8(void *a1)
{
  return sub_100201400(a1);
}

uint64_t sub_100201B0C()
{
  return 0x6449726576726573;
}

uint64_t sub_100201B28(uint64_t a1)
{
  unint64_t v2 = sub_100202A64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201B64(uint64_t a1)
{
  unint64_t v2 = sub_100202A64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100201BA0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100201EC0(a1, &qword_1003F1C68, (void (*)(void))sub_100202A64, a2);
}

uint64_t sub_100201BDC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100202084(a1, a2, a3, &qword_1003F1C78, (void (*)(void))sub_100202A64);
}

uint64_t sub_100201C18()
{
  return sub_100201CA4(*(void *)v0, *(void **)(v0 + 8), (void (*)(uint64_t, uint64_t))sub_100201C50);
}

unint64_t sub_100201C50()
{
  unint64_t result = qword_1003F1BC0;
  if (!qword_1003F1BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1BC0);
  }
  return result;
}

uint64_t sub_100201CA4(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t))
{
  _StringGuts.grow(_:)(22);
  a3(v6, v7);
  uint64_t v8 = CustomStringConvertible.typeDescription.getter();
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000100377C50;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100201D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6449726576726573 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100201E0C(uint64_t a1)
{
  unint64_t v2 = sub_100202AB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100201E48(uint64_t a1)
{
  unint64_t v2 = sub_100202AB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100201E84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100201EC0(a1, &qword_1003F1C80, (void (*)(void))sub_100202AB8, a2);
}

uint64_t sub_100201EC0@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = sub_100044014(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return sub_1000233E4((uint64_t)a1);
  }
  uint64_t v10 = v17;
  Swift::String v11 = v18;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  uint64_t result = sub_1000233E4((uint64_t)a1);
  *Swift::String v11 = v12;
  v11[1] = v14;
  return result;
}

uint64_t sub_100202048(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100202084(a1, a2, a3, &qword_1003F1C90, (void (*)(void))sub_100202AB8);
}

uint64_t sub_100202084(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v13 = a5;
  uint64_t v7 = sub_100044014(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  sub_100042524(a1, a1[3]);
  v13();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1002021CC()
{
  return sub_100201CA4(*(void *)v0, *(void **)(v0 + 8), (void (*)(uint64_t, uint64_t))sub_100202204);
}

unint64_t sub_100202204()
{
  unint64_t result = qword_1003F1BC8;
  if (!qword_1003F1BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1BC8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for FindingTokenRevokeEnvelopeV1(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FindingTokenRevokeEnvelopeV1()
{
  return swift_bridgeObjectRelease();
}

__n128 initializeWithTake for SharedSecretKey(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for FindingTokenRevokeEnvelopeV1(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FindingTokenRevokeEnvelopeV1()
{
  return &type metadata for FindingTokenRevokeEnvelopeV1;
}

uint64_t *sub_1002022EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_100022C64(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
  }
  return v4;
}

uint64_t sub_100202404(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100044090(v7, v8);
}

void *sub_100202494(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100022C64(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  return a1;
}

void *sub_10020255C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_100022C64(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100044090(v15, v16);
  return a1;
}

_OWORD *sub_100202628(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1002026C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)((char *)a1 + v11);
  unint64_t v13 = *(void *)((char *)a1 + v11 + 8);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  sub_100044090(v12, v13);
  return a1;
}

uint64_t sub_10020276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100202780);
}

uint64_t sub_100202780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100202830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100202844);
}

uint64_t sub_100202844(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002028EC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *_s13findmylocated28FindingTokenRevokeEnvelopeV1Vwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13findmylocated28FindingTokenRevokeEnvelopeV1Vwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100202A18(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenRequestEnvelopeV1()
{
  return &type metadata for FindingTokenRequestEnvelopeV1;
}

unint64_t sub_100202A64()
{
  unint64_t result = qword_1003F1C70;
  if (!qword_1003F1C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1C70);
  }
  return result;
}

unint64_t sub_100202AB8()
{
  unint64_t result = qword_1003F1C88;
  if (!qword_1003F1C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1C88);
  }
  return result;
}

unint64_t sub_100202B0C()
{
  unint64_t result = qword_1003F1CA0;
  if (!qword_1003F1CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CA0);
  }
  return result;
}

uint64_t sub_100202B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FindingTokenEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100202BC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FindingTokenEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100202C20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FindingTokenEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100202D34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for FindingTokenRevokeEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenRevokeEnvelopeV1.CodingKeys;
}

unsigned char *_s13findmylocated28FindingTokenRevokeEnvelopeV1V10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100202E20);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindingTokenRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for FindingTokenRequestEnvelopeV1.CodingKeys;
}

unint64_t sub_100202E5C()
{
  unint64_t result = qword_1003F1CB0;
  if (!qword_1003F1CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CB0);
  }
  return result;
}

unint64_t sub_100202EB4()
{
  unint64_t result = qword_1003F1CB8;
  if (!qword_1003F1CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CB8);
  }
  return result;
}

unint64_t sub_100202F0C()
{
  unint64_t result = qword_1003F1CC0;
  if (!qword_1003F1CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CC0);
  }
  return result;
}

unint64_t sub_100202F64()
{
  unint64_t result = qword_1003F1CC8;
  if (!qword_1003F1CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CC8);
  }
  return result;
}

unint64_t sub_100202FBC()
{
  unint64_t result = qword_1003F1CD0;
  if (!qword_1003F1CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CD0);
  }
  return result;
}

unint64_t sub_100203014()
{
  unint64_t result = qword_1003F1CD8;
  if (!qword_1003F1CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CD8);
  }
  return result;
}

unint64_t sub_10020306C()
{
  unint64_t result = qword_1003F1CE0;
  if (!qword_1003F1CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CE0);
  }
  return result;
}

unint64_t sub_1002030C4()
{
  unint64_t result = qword_1003F1CE8;
  if (!qword_1003F1CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CE8);
  }
  return result;
}

unint64_t sub_10020311C()
{
  unint64_t result = qword_1003F1CF0;
  if (!qword_1003F1CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1CF0);
  }
  return result;
}

uint64_t sub_100203170(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449726576726573 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002032F0()
{
  type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[4] = v2;
  v0[5] = v1;
  return _swift_task_switch(sub_100203384, v2, v1);
}

uint64_t sub_100203384()
{
  *(void *)(v0 + 48) = type metadata accessor for Daemon();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100203478;
  return Daemon.__allocating_init(identifier:profile:registerAlarmEvent:services:)(0xD00000000000001ELL, 0x80000001003730F0, 0x6F6C796D646E6966, 0xED00006465746163, 1, &unk_1003F1D10, 0);
}

uint64_t sub_100203478(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[4];
    uint64_t v6 = v3[5];
    return _swift_task_switch(sub_1002037DC, v5, v6);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v3[10] = v7;
    uint64_t v8 = sub_1000473E4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
    *uint64_t v7 = v4;
    v7[1] = sub_100203634;
    uint64_t v9 = v3[6];
    return ActorServiceDaemon.run()(v9, v8);
  }
}

uint64_t sub_100203634()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v5 = sub_1002039DC;
  }
  else {
    uint64_t v5 = sub_100203770;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100203770()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002037DC()
{
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error creating Daemon instance: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1002039DC()
{
  swift_release();
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error creating Daemon instance: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100203BE4()
{
  os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1003F1D18 + dword_1003F1D18);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10020633C;
  return v3();
}

uint64_t sub_100203C84()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B7F8);
  sub_100044058(v0, (uint64_t)qword_10040B7F8);
  return Logger.init(subsystem:category:)();
}

int main(int argc, const char **argv, const char **envp)
{
  swift_task_create();
  swift_task_getMainExecutor();
  swift_job_run();
  int result = swift_task_asyncMainDrainQueue();
  __break(1u);
  return result;
}

uint64_t sub_100203D58()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100203DFC;
  return sub_1002032F0();
}

uint64_t sub_100203DFC()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100203F38, v1, v0);
}

void sub_100203F38()
{
}

uint64_t sub_100203F70()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004CAE8;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1003F1D18 + dword_1003F1D18);
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10020633C;
  return v4();
}

uint64_t sub_100204054()
{
  type metadata accessor for UUID();
  *(void *)(v0 + 32) = swift_task_alloc();
  type metadata accessor for CloudStorageService();
  swift_allocObject();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100204124;
  return sub_1000EA8D0();
}

uint64_t sub_100204124(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100205DB8;
  }
  else {
    uint64_t v4 = sub_100204238;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100204238()
{
  uint64_t v1 = sub_10013E1E0(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = sub_1000473E4(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  v0[8] = v1;
  type metadata accessor for LocalStorageService();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100204378;
  return sub_100220E50();
}

uint64_t sub_100204378(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 88) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100205FF4;
  }
  else {
    uint64_t v4 = sub_10020448C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10020448C()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = (void *)v0[8];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_10013E1E0(0, v2[2] + 1, 1, (void *)v0[8]);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_10013E1E0((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  uint64_t v5 = v0[10];
  uint64_t v6 = sub_1000473E4(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  v2[2] = v4 + 1;
  uint64_t v7 = &v2[2 * v4];
  v7[4] = v5;
  v7[5] = v6;
  type metadata accessor for FirstUnlockService();
  uint64_t Unlock = FirstUnlockService.__allocating_init()();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = sub_10013E1E0(0, v2[2] + 1, 1, v2);
  }
  unint64_t v10 = v2[2];
  unint64_t v9 = v2[3];
  if (v10 >= v9 >> 1) {
    unint64_t v2 = sub_10013E1E0((void *)(v9 > 1), v10 + 1, 1, v2);
  }
  v0[12] = v2;
  uint64_t v11 = sub_1000473E4(&qword_1003EF448, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  v2[2] = v10 + 1;
  uint64_t v12 = &v2[2 * v10];
  v12[4] = Unlock;
  v12[5] = v11;
  type metadata accessor for IDSTransportServiceFMF();
  unint64_t v13 = (void *)swift_allocObject();
  v0[13] = v13;
  swift_defaultActor_initialize();
  v13[14] = 0xD000000000000016;
  v13[15] = 0x8000000100377CC0;
  v13[18] = _swiftEmptyDictionarySingleton;
  v13[19] = _swiftEmptyDictionarySingleton;
  sub_100044014(&qword_1003F1D20);
  unint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_1002046F0;
  return InternetMessaging.__allocating_init(serviceName:crossAccount:)(0xD00000000000001BLL, 0x8000000100377CE0, 1);
}

uint64_t sub_1002046F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  swift_task_dealloc();
  *(void *)(v3 + 128) = a1;
  type metadata accessor for QueryController();
  *(void *)(v3 + 136) = QueryController.__allocating_init(serviceName:)();
  return _swift_task_switch(sub_100204834, 0, 0);
}

uint64_t sub_100204834()
{
  uint64_t v1 = (void *)v0[12];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[12]);
  }
  v0[15] = v1;
  uint64_t v4 = v0[13];
  uint64_t v5 = sub_1000473E4(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for LocalMessagingService();
  uint64_t v7 = (void *)swift_allocObject();
  v0[16] = v7;
  swift_defaultActor_initialize();
  v7[14] = 0xD000000000000015;
  v7[15] = 0x8000000100377D00;
  v7[17] = _swiftEmptyDictionarySingleton;
  v7[18] = _swiftEmptyDictionarySingleton;
  sub_100044014(&qword_1003F1D28);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[17] = v8;
  void *v8 = v0;
  v8[1] = sub_1002049B8;
  return LocalMessaging.__allocating_init(serviceName:)(0xD000000000000021, 0x8000000100377D20);
}

uint64_t sub_1002049B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 128);
  swift_task_dealloc();
  *(void *)(v3 + 128) = a1;
  return _swift_task_switch(sub_100204AD0, 0, 0);
}

uint64_t sub_100204AD0()
{
  uint64_t v1 = (void *)v0[15];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[15]);
  }
  uint64_t v4 = v0[16];
  uint64_t v5 = sub_1000473E4(&qword_1003F1D30, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for CommandManager();
  uint64_t v7 = swift_allocObject();
  swift_defaultActor_initialize();
  strcpy((char *)(v7 + 112), "CommandManager");
  *(unsigned char *)(v7 + 127) = -18;
  static Date.now.getter();
  uint64_t v8 = v7 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  uint64_t v9 = enum case for LocatePriority.shallow(_:);
  uint64_t Priority = type metadata accessor for LocatePriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Priority - 8) + 104))(v8, v9, Priority);
  uint64_t v11 = v7 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  uint64_t v12 = enum case for LegacyRefreshSchedule.notScheduled(_:);
  uint64_t refreshed = type metadata accessor for LegacyRefreshSchedule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 104))(v11, v12, refreshed);
  *(void *)(v7 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands) = _swiftEmptyArrayStorage;
  uint64_t v14 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalesceTaskList;
  v0[18] = type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v7 + v14) = WorkItemQueue.__allocating_init(identifier:)();
  unint64_t v16 = v1[2];
  unint64_t v15 = v1[3];
  if (v16 >= v15 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v15 > 1), v16 + 1, 1, v1);
  }
  v0[19] = v1;
  uint64_t v17 = sub_1000473E4(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  v1[2] = v16 + 1;
  uint64_t v18 = &v1[2 * v16];
  v18[4] = v7;
  v18[5] = v17;
  type metadata accessor for AccountService(0);
  swift_allocObject();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[20] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100204DC4;
  return sub_10034C3AC();
}

uint64_t sub_100204DC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100204EC4, 0, 0);
}

uint64_t sub_100204EC4()
{
  uint64_t v1 = (void *)v0[19];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[19]);
  }
  v0[22] = v1;
  uint64_t v4 = v0[21];
  uint64_t v5 = sub_1000473E4(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for SettingsService();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100204FEC;
  return sub_100334AD0();
}

uint64_t sub_100204FEC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002050EC, 0, 0);
}

uint64_t sub_1002050EC()
{
  unint64_t v16 = v0;
  uint64_t v1 = (void *)v0[22];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[22]);
  }
  uint64_t v4 = v0[24];
  uint64_t v5 = sub_1000473E4(&qword_1003F15A8, (void (*)(uint64_t))type metadata accessor for SettingsService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for DataManager(0);
  memset(v14, 0, sizeof(v14));
  uint64_t v15 = 0;
  swift_allocObject();
  uint64_t v7 = sub_10010633C(0, 0, (uint64_t)v14);
  unint64_t v9 = v1[2];
  unint64_t v8 = v1[3];
  if (v9 >= v8 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v8 > 1), v9 + 1, 1, v1);
  }
  v0[25] = v1;
  uint64_t v10 = sub_1000473E4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  v1[2] = v9 + 1;
  uint64_t v11 = &v1[2 * v9];
  v11[4] = v7;
  v11[5] = v10;
  type metadata accessor for FriendshipService();
  swift_allocObject();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[26] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1002052C4;
  return sub_1001CD468();
}

uint64_t sub_1002052C4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002053C4, 0, 0);
}

uint64_t sub_1002053C4()
{
  uint64_t v1 = (void *)v0[25];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[25]);
  }
  v0[28] = v1;
  uint64_t v4 = v0[27];
  uint64_t v5 = sub_1000473E4(&qword_1003F0480, (void (*)(uint64_t))type metadata accessor for FriendshipService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for LocationService();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[29] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002054EC;
  return sub_10024E00C();
}

uint64_t sub_1002054EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002055EC, 0, 0);
}

uint64_t sub_1002055EC()
{
  uint64_t v1 = (void *)v0[28];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[28]);
  }
  uint64_t v4 = v0[30];
  uint64_t v5 = sub_1000473E4(&qword_1003ED030, (void (*)(uint64_t))type metadata accessor for LocationService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for UserNotificationService();
  uint64_t v7 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v7 + 112) = 0xD000000000000017;
  *(void *)(v7 + 120) = 0x8000000100377D50;
  unint64_t v9 = v1[2];
  unint64_t v8 = v1[3];
  if (v9 >= v8 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v8 > 1), v9 + 1, 1, v1);
  }
  uint64_t v10 = sub_1000473E4(&qword_1003F0D88, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  v1[2] = v9 + 1;
  uint64_t v11 = &v1[2 * v9];
  v11[4] = v7;
  v11[5] = v10;
  type metadata accessor for LocationMonitor();
  uint64_t v12 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v12 + 112) = 0x6E6F697461636F4CLL;
  *(void *)(v12 + 120) = 0xEF726F74696E6F4DLL;
  *(void *)(v12 + 128) = _swiftEmptyDictionarySingleton;
  *(unsigned char *)(v12 + 136) = 2;
  unint64_t v14 = v1[2];
  unint64_t v13 = v1[3];
  if (v14 >= v13 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v13 > 1), v14 + 1, 1, v1);
  }
  uint64_t v15 = sub_1000473E4(&qword_1003F1D38, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
  v1[2] = v14 + 1;
  unint64_t v16 = &v1[2 * v14];
  v16[4] = v12;
  v16[5] = v15;
  type metadata accessor for AppDeletionService();
  uint64_t v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v17 + 112) = 0xD000000000000012;
  *(void *)(v17 + 120) = 0x8000000100377D70;
  *(void *)(v17 + 128) = _swiftEmptyDictionarySingleton;
  *(_WORD *)(v17 + 136) = 2;
  unint64_t v19 = v1[2];
  unint64_t v18 = v1[3];
  if (v19 >= v18 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v18 > 1), v19 + 1, 1, v1);
  }
  v0[31] = v1;
  uint64_t v20 = sub_1000473E4(&qword_1003F1D40, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  v1[2] = v19 + 1;
  uint64_t v21 = &v1[2 * v19];
  v21[4] = v17;
  v21[5] = v20;
  type metadata accessor for FenceService(0);
  swift_allocObject();
  long long v22 = (void *)swift_task_alloc();
  v0[32] = v22;
  *long long v22 = v0;
  v22[1] = sub_100205940;
  return sub_10016695C();
}

uint64_t sub_100205940(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100205A40, 0, 0);
}

uint64_t sub_100205A40()
{
  uint64_t v1 = (void *)v0[31];
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v2 > 1), v3 + 1, 1, (void *)v0[31]);
  }
  uint64_t v4 = v0[33];
  uint64_t v5 = sub_1000473E4(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  v1[2] = v3 + 1;
  uint64_t v6 = &v1[2 * v3];
  v6[4] = v4;
  v6[5] = v5;
  type metadata accessor for NITokenService();
  swift_allocObject();
  uint64_t v7 = sub_1002C1E1C();
  unint64_t v9 = v1[2];
  unint64_t v8 = v1[3];
  if (v9 >= v8 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v8 > 1), v9 + 1, 1, v1);
  }
  uint64_t v10 = sub_1000473E4(&qword_1003F1518, (void (*)(uint64_t))type metadata accessor for NITokenService);
  v1[2] = v9 + 1;
  uint64_t v11 = &v1[2 * v9];
  v11[4] = v7;
  v11[5] = v10;
  type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v12 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v12[14] = 0xD00000000000001DLL;
  v12[15] = 0x8000000100377D90;
  UUID.init()();
  v12[16] = WorkItemQueue.__allocating_init(identifier:)();
  unint64_t v14 = v1[2];
  unint64_t v13 = v1[3];
  if (v14 >= v13 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v13 > 1), v14 + 1, 1, v1);
  }
  uint64_t v15 = sub_1000473E4(&qword_1003F14A8, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  v1[2] = v14 + 1;
  unint64_t v16 = &v1[2 * v14];
  v16[4] = v12;
  v16[5] = v15;
  type metadata accessor for NIRangingService();
  uint64_t v17 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v17 + 14) = 0xD000000000000010;
  *((void *)v17 + 15) = 0x8000000100377DB0;
  *((void *)v17 + 16) = 0;
  unint64_t v18 = &v17[OBJC_IVAR____TtC13findmylocated16NIRangingService_discoverContinuation];
  uint64_t v19 = sub_100044014(&qword_1003F1D48);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  v20(&v17[OBJC_IVAR____TtC13findmylocated16NIRangingService_updateContinuation], 1, 1, v19);
  unint64_t v22 = v1[2];
  unint64_t v21 = v1[3];
  if (v22 >= v21 >> 1) {
    uint64_t v1 = sub_10013E1E0((void *)(v21 > 1), v22 + 1, 1, v1);
  }
  uint64_t v23 = sub_1000473E4(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  v1[2] = v22 + 1;
  uint64_t v24 = &v1[2 * v22];
  v24[4] = v17;
  v24[5] = v23;
  swift_task_dealloc();
  char v25 = (uint64_t (*)(void *))v0[1];
  return v25(v1);
}

uint64_t sub_100205DB8()
{
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error creating CloudStorageService: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[8] = _swiftEmptyArrayStorage;
  type metadata accessor for LocalStorageService();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100204378;
  return sub_100220E50();
}

uint64_t sub_100205FF4()
{
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B7F8);
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error creating LocalStorageService: %@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (void *)v0[8];
  type metadata accessor for FirstUnlockService();
  uint64_t Unlock = FirstUnlockService.__allocating_init()();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = sub_10013E1E0(0, v7[2] + 1, 1, v7);
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1) {
    uint64_t v7 = sub_10013E1E0((void *)(v9 > 1), v10 + 1, 1, v7);
  }
  v0[12] = v7;
  uint64_t v11 = sub_1000473E4(&qword_1003EF448, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  v7[2] = v10 + 1;
  uint64_t v12 = &v7[2 * v10];
  v12[4] = Unlock;
  v12[5] = v11;
  type metadata accessor for IDSTransportServiceFMF();
  unint64_t v13 = (void *)swift_allocObject();
  v0[13] = v13;
  swift_defaultActor_initialize();
  v13[14] = 0xD000000000000016;
  v13[15] = 0x8000000100377CC0;
  v13[18] = _swiftEmptyDictionarySingleton;
  v13[19] = _swiftEmptyDictionarySingleton;
  sub_100044014(&qword_1003F1D20);
  unint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_1002046F0;
  return InternetMessaging.__allocating_init(serviceName:crossAccount:)(0xD00000000000001BLL, 0x8000000100377CE0, 1);
}

unint64_t sub_100206340()
{
  sub_100044014(&qword_1003F4BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  long long v2 = v0[1];
  long long v6 = *v0;
  *(_OWORD *)(inited + 48) = v6;
  *(void *)(inited + 32) = 112;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000015;
  *(void *)(inited + 88) = 0x8000000100372B30;
  *(_OWORD *)(inited + 96) = v2;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 118;
  *(void *)(inited + 136) = 0xE100000000000000;
  long long v4 = v0[2];
  long long v5 = v2;
  *(void *)(inited + 168) = &type metadata for String;
  *(_OWORD *)(inited + 144) = v0[2];
  sub_100033EAC((uint64_t)&v6);
  sub_100033EAC((uint64_t)&v5);
  sub_100033EAC((uint64_t)&v4);
  return sub_100101984(inited);
}

uint64_t sub_10020640C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100102D94(*a1, *a2);
}

Swift::Int sub_100206418()
{
  return Hasher._finalize()();
}

uint64_t sub_1002064A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100206524()
{
  return Hasher._finalize()();
}

unint64_t sub_1002065B0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100206DF0(*a1);
  *a2 = result;
  return result;
}

void sub_1002065E0(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  unint64_t v4 = 0x8000000100372B30;
  unint64_t v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    unint64_t v5 = 118;
    unint64_t v4 = 0xE100000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 112;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10020662C()
{
  unint64_t v1 = 0xD000000000000015;
  if (*v0 != 1) {
    unint64_t v1 = 118;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 112;
  }
}

unint64_t sub_100206674@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100206DF0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10020669C(uint64_t a1)
{
  unint64_t v2 = sub_100206D9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002066D8(uint64_t a1)
{
  unint64_t v2 = sub_100206D9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100206714()
{
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000100377B30;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  uint64_t v5 = v0[2];
  BOOL v6 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 540702218;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  uint64_t v10 = v0[4];
  unint64_t v9 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 2112112;
}

uint64_t sub_100206814@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 16)
    || (unint64_t v4 = sub_10003B888(112, 0xE100000000000000), (v5 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v20),
        sub_100044014(&qword_1003ECF00),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v12 = v11;
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(void *)&long long v20 = 0xD000000000000024;
    *((void *)&v20 + 1) = 0x8000000100377DD0;
LABEL_11:
    sub_100206B90();
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = *((void *)&v20 + 1);
    *uint64_t v12 = v20;
    v12[1] = v14;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, enum case for GenericError.error(_:), v10);
    return swift_willThrow();
  }
  if (!*(void *)(a1 + 16)
    || (unint64_t v6 = sub_10003B888(0xD000000000000015, 0x8000000100372B30), (v7 & 1) == 0)
    || (sub_1000370D8(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v20), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v12 = v16;
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(void *)&long long v20 = 0xD000000000000024;
    *((void *)&v20 + 1) = 0x8000000100377DD0;
    goto LABEL_11;
  }
  if (*(void *)(a1 + 16) && (unint64_t v8 = sub_10003B888(118, 0xE100000000000000), (v9 & 1) != 0))
  {
    sub_1000370D8(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v20);
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001F5FD0((uint64_t)&v20);
LABEL_19:
    uint64_t v10 = type metadata accessor for GenericError();
    sub_1001F6030();
    swift_allocError();
    uint64_t v12 = v17;
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(void *)&long long v20 = 0xD000000000000024;
    *((void *)&v20 + 1) = 0x8000000100377DD0;
    goto LABEL_11;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v18;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v19;
  return result;
}

unint64_t sub_100206B90()
{
  unint64_t result = qword_1003F1D50;
  if (!qword_1003F1D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1D50);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MappingEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100206CB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MappingEnvelopeV1.CodingKeys()
{
  return &type metadata for MappingEnvelopeV1.CodingKeys;
}

unint64_t sub_100206CEC()
{
  unint64_t result = qword_1003F1D58;
  if (!qword_1003F1D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1D58);
  }
  return result;
}

unint64_t sub_100206D48()
{
  unint64_t result = qword_1003F1D60;
  if (!qword_1003F1D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1D60);
  }
  return result;
}

unint64_t sub_100206D9C()
{
  unint64_t result = qword_1003F1D68;
  if (!qword_1003F1D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1D68);
  }
  return result;
}

unint64_t sub_100206DF0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DD6B0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_100206E3C()
{
  uint64_t v1 = type metadata accessor for HashAlgorithm();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  unint64_t v23 = 0xD00000000000001FLL;
  unint64_t v24 = 0x8000000100377E00;
  uint64_t v5 = type metadata accessor for OwnerTokenEnvelopeV1();
  type metadata accessor for Date();
  sub_100208658(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x7954657261687320;
  v7._object = (void *)0xEC000000203A6570;
  String.append(_:)(v7);
  LOBYTE(v21) = *(unsigned char *)(v0 + *(int *)(v5 + 20));
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x5364657261687320;
  v9._object = (void *)0xEF203A7465726365;
  String.append(_:)(v9);
  uint64_t v10 = (uint64_t *)(v0 + *(int *)(v5 + 28));
  unint64_t v12 = v10[1];
  uint64_t v21 = *v10;
  uint64_t v11 = v21;
  unint64_t v22 = v12;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for HashAlgorithm.sha256(_:), v1);
  sub_100022C64(v11, v12);
  sub_10004F4EC();
  uint64_t v13 = DataProtocol.hash(algorithm:)();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100044090(v21, v22);
  uint64_t v21 = v13;
  unint64_t v22 = v15;
  uint64_t v16 = DataProtocol.hexString.getter();
  uint64_t v18 = v17;
  sub_100044090(v13, v15);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1002070EC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003F1E18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1002084F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_100208658(&qword_1003EEF88, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for OwnerTokenEnvelopeV1();
    LOBYTE(v11) = *(unsigned char *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    sub_1000E418C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for Date();
    sub_100208658(&qword_1003EEAA8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + *(int *)(v9 + 28));
    char v12 = 3;
    sub_10008FC1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100207378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v26 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100044014(&qword_1003F1E08);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for OwnerTokenEnvelopeV1();
  __chkstk_darwin(v10);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1002084F0();
  uint64_t v27 = v9;
  uint64_t v13 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)a1);
  }
  unint64_t v14 = v5;
  unint64_t v28 = a1;
  uint64_t v15 = (uint64_t)v12;
  uint64_t v16 = v23;
  uint64_t v17 = v24;
  LOBYTE(v29) = 0;
  sub_100208658(&qword_1003EEF68, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v15, v26, v6);
  char v30 = 1;
  sub_1000E4024();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v6;
  *(unsigned char *)(v15 + v10[5]) = v29;
  LOBYTE(v29) = 2;
  sub_100208658(&qword_1003EEAE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v15 + v10[6], v14, v17);
  char v30 = 3;
  sub_10008FB64();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v25);
  *(_OWORD *)(v15 + v10[7]) = v29;
  sub_100208544(v15, v20);
  sub_1000233E4((uint64_t)v28);
  return sub_1002085A8(v15);
}

uint64_t sub_1002078A8()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7079546572616873;
      break;
    case 2:
      uint64_t result = 0x6574614465736162;
      break;
    case 3:
      uint64_t result = 0x6553646572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100207948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10020896C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100207970(uint64_t a1)
{
  unint64_t v2 = sub_1002084F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002079AC(uint64_t a1)
{
  unint64_t v2 = sub_1002084F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002079E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100207378(a1, a2);
}

uint64_t sub_100207A00(void *a1)
{
  return sub_1002070EC(a1);
}

uint64_t sub_100207A1C(uint64_t a1)
{
  unint64_t v2 = sub_100208604();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100207A58(uint64_t a1)
{
  unint64_t v2 = sub_100208604();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100207A94(void *a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F1E20);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100208604();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_100207BA4()
{
  return 0xD00000000000001BLL;
}

ValueMetadata *type metadata accessor for OwnerTokenEnvelopeRequestV1()
{
  return &type metadata for OwnerTokenEnvelopeRequestV1;
}

void *sub_100207BD0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = (void *)((char *)a1 + v12);
    unint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    sub_100022C64(*v14, v16);
    *uint64_t v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_100207D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_100044090(v8, v9);
}

uint64_t sub_100207DC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_100022C64(*v13, v15);
  *uint64_t v12 = v14;
  v12[1] = v15;
  return a1;
}

uint64_t sub_100207EB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_100022C64(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_100044090(v16, v17);
  return a1;
}

uint64_t sub_100207FA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100208078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_100044090(v12, v13);
  return a1;
}

uint64_t sub_100208158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020816C);
}

uint64_t sub_10020816C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100208290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002082A4);
}

uint64_t sub_1002082A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for OwnerTokenEnvelopeV1()
{
  uint64_t result = qword_1003F1DC8;
  if (!qword_1003F1DC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100208418()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1002084F0()
{
  unint64_t result = qword_1003F1E10;
  if (!qword_1003F1E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1E10);
  }
  return result;
}

uint64_t sub_100208544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerTokenEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002085A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnerTokenEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100208604()
{
  unint64_t result = qword_1003F1E28;
  if (!qword_1003F1E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F1E28);
  }
  return result;
}

uint64_t sub_100208658(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerTokenEnvelopeRequestV1.CodingKeys()
{
  return &type metadata for OwnerTokenEnvelopeRequestV1.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for OwnerTokenEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10020877CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}