uint64_t sub_1002CA650(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v5;

  v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10004A274;
  return sub_1002C250C(a1);
}

uint64_t sub_1002CA6EC()
{
  v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100018CD0();
}

uint64_t getEnumTagSinglePayload for NITokenService.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFE6 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483623);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 24;
  if (v4 >= 0x1A) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NITokenService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFE7)
  {
    *(void *)result = 0;
    *(_DWORD *)result = a2 - 2147483623;
    if (a3 >= 0x7FFFFFE7) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFE7) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)result = a2 + 24;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NITokenService.Error()
{
  return &type metadata for NITokenService.Error;
}

unint64_t sub_1002CA834(unint64_t result)
{
  if (result >= 0x19) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_1002CA844(unint64_t result)
{
  if (result >= 0x19) {
    return swift_errorRelease();
  }
  return result;
}

void *sub_1002CA868(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10003CB84(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = UUID.uuidString.getter();
      uint64_t v8 = v7;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10003CB84(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002CA9A0(char a1)
{
  *(void *)(v2 + 40) = v1;
  *(unsigned char *)(v2 + 128) = a1;
  sub_100044014(&qword_1003F4318);
  *(void *)(v2 + 48) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Device();
  *(void *)(v2 + 56) = v3;
  *(void *)(v2 + 64) = *(void *)(v3 - 8);
  *(void *)(v2 + 72) = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1002CAAC4;
  return daemon.getter();
}

uint64_t sub_1002CAAC4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 88) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 96) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalMessagingService();
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002CACA8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002CACA8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[13] = a1;
  v4[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[5];
    uint64_t v6 = sub_1002CB184;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_1002CADE0;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002CADE0()
{
  *(void *)(v0 + 120) = *(void *)(*(void *)(v0 + 104) + 128);
  sub_100044014(&qword_1003F1D28);
  sub_100014FFC(&qword_1003F22F0, &qword_1003F1D28);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002CAEA0, v2, v1);
}

uint64_t sub_1002CAEA0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  dispatch thunk of LocalMessaging.connectedDevice.getter();
  return _swift_task_switch(sub_1002CAF0C, v1, 0);
}

uint64_t sub_1002CAF0C()
{
  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v3, &qword_1003F4318);
    if (qword_1003EC460 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C380);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      *(void *)(v0 + 32) = sub_100037004(0xD000000000000027, 0x8000000100379900, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s no connected device!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 72);
    int v9 = *(unsigned __int8 *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v3, v1);
    sub_1002CF150(v8, v9);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1002CB184()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C380);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000027, 0x8000000100379900, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002CB420()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C380);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C380);
  if (qword_1003EC488 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C3B0);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002CB4E8()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_100052FAC(v0, qword_1003F4138);
  sub_100044058(v0, (uint64_t)qword_1003F4138);
  return PrefixedDefaults.init(prefix:)();
}

uint64_t sub_1002CB54C()
{
  uint64_t v0 = type metadata accessor for PrefixedDefaults();
  sub_100052FAC(v0, qword_10040C398);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C398);
  if (qword_1003EC468 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_1003F4138);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002CB614(uint64_t a1)
{
  return sub_1002CB65C(a1, qword_1003F4150);
}

uint64_t sub_1002CB638(uint64_t a1)
{
  return sub_1002CB65C(a1, qword_1003F4168);
}

uint64_t sub_1002CB65C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for PrefixedDefaults();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003F4370);
  sub_100052FAC(v7, a2);
  sub_100044058(v7, (uint64_t)a2);
  if (qword_1003EC470 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100044058(v3, (uint64_t)qword_10040C398);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  sub_100044014(&qword_1003ED230);
  sub_1002D9144();
  return ManagedDefault.init(prefixedDefaults:key:)();
}

uint64_t sub_1002CB7CC(uint64_t a1)
{
  if (!a1) {
    return 0x6E776F6E6B6E752ELL;
  }
  strcpy((char *)v4, ".underlying(");
  BYTE5(v4[1]) = 0;
  HIWORD(v4[1]) = -5120;
  swift_errorRetain();
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_errorRelease();
  return v4[0];
}

uint64_t sub_1002CB894()
{
  return sub_1002CB7CC(*v0);
}

uint64_t sub_1002CB89C()
{
  v1[99] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[100] = v2;
  v1[101] = *(void *)(v2 - 8);
  v1[102] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[103] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1002CB98C;
  return daemon.getter();
}

uint64_t sub_1002CB98C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 832) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 840) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalMessagingService();
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002CBB70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002CBB70(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[106] = a1;
  v3[107] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[99];
    uint64_t v5 = sub_1002CC020;
  }
  else
  {
    uint64_t v6 = v3[99];
    swift_release();
    uint64_t v5 = sub_1002CBC9C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002CBC9C()
{
  uint64_t v1 = v0[99];
  v0[90] = type metadata accessor for NITokenService_LocalMessaging();
  v0[91] = sub_1002D939C(&qword_1003F0458, v2, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  v0[87] = v1;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[108] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002CBD98;
  uint64_t v4 = v0[102];
  return sub_10021051C(v4, (uint64_t)(v0 + 87));
}

uint64_t sub_1002CBD98()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 872) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[99];
    uint64_t v4 = sub_1002CC090;
  }
  else
  {
    uint64_t v5 = (uint64_t)(v2 + 87);
    uint64_t v6 = v2[102];
    uint64_t v7 = v2[101];
    uint64_t v8 = v2[100];
    uint64_t v9 = v2[99];
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1000233E4(v5);
    uint64_t v4 = sub_1002CBEE0;
    uint64_t v3 = v9;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002CBEE0()
{
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 16, v1, sub_1002CBF78, v0 + 656);
}

uint64_t sub_1002CBF78(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_1002CBF94, v2 + 736);
}

uint64_t sub_1002CBF94()
{
  return _swift_task_switch(sub_1002CBFB0, *(void *)(v0 + 792), 0);
}

uint64_t sub_1002CBFB0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002CC020()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002CC090()
{
  uint64_t v12 = v0;
  sub_1000233E4((uint64_t)(v0 + 87));
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C380);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[109];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[97] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    v0[98] = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalMessagingService subscription up error: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 2, v9, sub_1002CBF78, v0 + 82);
}

uint64_t sub_1002CC300()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000801A4;
  return sub_1002CC390();
}

uint64_t sub_1002CC390()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for DarwinNotification();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  sub_100044014(&qword_1003F0E88);
  v1[8] = swift_task_alloc();
  uint64_t v3 = sub_100044014(&qword_1003F0E98);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003F0E90);
  v1[12] = v4;
  v1[13] = *(void *)(v4 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_1002CC550, v0, 0);
}

uint64_t sub_1002CC550()
{
  unint64_t v8 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[15] = sub_100044058(v1, (uint64_t)qword_10040C380);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[2] = sub_100037004(0xD000000000000026, 0x80000001003799D0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for Darwin notification: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1002CC73C;
  return daemon.getter();
}

uint64_t sub_1002CC73C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_1002D939C(&qword_1003F0E30, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002CC898, v3, v2);
}

uint64_t sub_1002CC898()
{
  *(void *)(v0 + 144) = Daemon.darwinNotificationHandler.getter();
  swift_release();
  type metadata accessor for DarwinNotificationHandler();
  sub_1002D939C(&qword_1003F0EA0, 255, (void (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002CC974, v2, v1);
}

uint64_t sub_1002CC974()
{
  uint64_t v1 = *(void *)(v0 + 24);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_1002CCA04, v1, 0);
}

uint64_t sub_1002CCA04()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_1002D939C(qword_1003F42E0, v4, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  v0[19] = v5;
  uint64_t v6 = v0[3];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[20] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002CCB20;
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[8];
  return AsyncStream.Iterator.next(isolation:)(v9, v6, v5, v8);
}

uint64_t sub_1002CCB20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002CCC30, v1, 0);
}

uint64_t sub_1002CCC30()
{
  v29 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v7 = v0[6];
    uint64_t v6 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v2);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[6];
    uint64_t v12 = v0[4];
    uint64_t v13 = (void (**)(uint64_t, uint64_t))(v0[5] + 8);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_1002D939C(&qword_1003F39E0, 255, (void (*)(uint64_t))&type metadata accessor for DarwinNotification);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 4) = sub_100037004(v15, v16, &v28);
      swift_bridgeObjectRelease();
      v17 = *v13;
      (*v13)(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Process NanoRegistryDeviceDidUnpair event: %s", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v17 = *v13;
      (*v13)(v0[6], v0[4]);
    }

    v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Clearing paired devices.", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = v0[7];
    uint64_t v22 = v0[4];

    sub_1002D8E48();
    v17(v21, v22);
    uint64_t v23 = v0[19];
    uint64_t v24 = v0[3];
    v25 = (void *)swift_task_alloc();
    v0[20] = v25;
    void *v25 = v0;
    v25[1] = sub_1002CCB20;
    uint64_t v26 = v0[12];
    uint64_t v27 = v0[8];
    return AsyncStream.Iterator.next(isolation:)(v27, v24, v23, v26);
  }
}

uint64_t sub_1002CCFDC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NITokenService_LocalMessaging()
{
  return self;
}

unint64_t sub_1002CD044()
{
  unint64_t result = qword_1003F4290;
  if (!qword_1003F4290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4290);
  }
  return result;
}

uint64_t sub_1002CD098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for NITokenService_LocalMessaging();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_1002CD140()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100018CD0;
  return sub_1002CB89C();
}

uint64_t sub_1002CD1CC()
{
  type metadata accessor for NITokenService_LocalMessaging();
  sub_1002D939C(&qword_1003F14A8, v0, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_1002CD234(uint64_t a1, uint64_t a2)
{
  return sub_1002D939C(&qword_1003F42D8, a2, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
}

uint64_t sub_1002CD27C(uint64_t a1, uint64_t a2)
{
  return sub_1002D939C(qword_1003F42E0, a2, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
}

uint64_t sub_1002CD2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a2;
  v4[8] = a3;
  v4[6] = a1;
  uint64_t v5 = type metadata accessor for Destination();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[15] = v7;
  v4[16] = *(void *)(v7 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002CD450, v3, 0);
}

uint64_t sub_1002CD450()
{
  v45 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[13];
  uint64_t v36 = v0[12];
  uint64_t v38 = v0[14];
  uint64_t v6 = v0[10];
  uint64_t v43 = v0[11];
  uint64_t v7 = v0[7];
  uint64_t v40 = v0[8];
  *(void *)type = v0[9];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C380);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v35(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v38, v7, v36);
  (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v6 + 16))(v43, v40, *(os_log_type_t **)type);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[18];
  if (v11)
  {
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[17];
    os_log_type_t typea = v10;
    uint64_t v15 = v0[15];
    uint64_t v32 = v0[14];
    uint64_t v31 = v0[12];
    uint64_t v37 = v0[11];
    uint64_t v39 = v0[10];
    uint64_t v33 = v0[13];
    uint64_t v34 = v0[9];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446978;
    v0[2] = sub_100037004(0xD00000000000002CLL, 0x8000000100373B20, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    v35(v14, v12, v15);
    uint64_t v17 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v17, v18, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
    *(_WORD *)(v16 + 22) = 2080;
    sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v19, v20, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v31);
    *(_WORD *)(v16 + 32) = 2080;
    sub_1002D939C(&qword_1003ECEF8, 255, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_100037004(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v34);
    _os_log_impl((void *)&_mh_execute_header, v9, typea, "Local IDS %{public}s %s id %s from: %s", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v23 = v0[13];
    uint64_t v24 = v0[14];
    uint64_t v26 = v0[11];
    uint64_t v25 = v0[12];
    uint64_t v27 = v0[9];
    uint64_t v28 = v0[10];
    (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_1002CD90C(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for Destination();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  sub_100044014(&qword_1003F4318);
  v2[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Device();
  v2[24] = v5;
  v2[25] = *(void *)(v5 - 8);
  v2[26] = swift_task_alloc();
  return _swift_task_switch(sub_1002CDAE4, v1, 0);
}

uint64_t sub_1002CDAE4()
{
  uint64_t v13 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[27] = sub_100044058(v1, (uint64_t)qword_10040C380);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    sub_1002D93E4();
    uint64_t v5 = CustomStringConvertible.typeDescription.getter();
    v0[13] = sub_100037004(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Extracted CompanionPeopleFindingCapabilityRequestEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    v0[11] = sub_100037004(0xD000000000000039, 0x8000000100379AC0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Watch requested companion finding capability. Sending now.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  os_log_type_t v10 = (void *)swift_task_alloc();
  v0[28] = v10;
  *os_log_type_t v10 = v0;
  v10[1] = sub_1002CDE00;
  return daemon.getter();
}

uint64_t sub_1002CDE00(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 232) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 240) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalMessagingService();
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1002CDFE4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002CDFE4(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[15];
    uint64_t v5 = sub_1002CE76C;
  }
  else
  {
    uint64_t v6 = v3[15];
    swift_release();
    uint64_t v5 = sub_1002CE10C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002CE10C()
{
  uint64_t v1 = v0[31];
  v0[33] = Destination.destination.getter();
  v0[34] = v2;
  return _swift_task_switch(sub_1002CE17C, v1, 0);
}

uint64_t sub_1002CE17C()
{
  *(void *)(v0 + 280) = *(void *)(*(void *)(v0 + 248) + 128);
  sub_100044014(&qword_1003F1D28);
  sub_100014FFC(&qword_1003F22F0, &qword_1003F1D28);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002CE23C, v2, v1);
}

uint64_t sub_1002CE23C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  dispatch thunk of LocalMessaging.device(fromID:)();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002CE2C4, v1, 0);
}

uint64_t sub_1002CE2C4()
{
  uint64_t v34 = v0;
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v5 = v0[17];
    uint64_t v4 = v0[18];
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[14];
    sub_10000A520(v3, &qword_1003F4318);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[17];
    uint64_t v11 = v0[18];
    uint64_t v13 = v0[16];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[10] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_1002D939C(&qword_1003ECEF8, 255, (void (*)(uint64_t))&type metadata accessor for Destination);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_100037004(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No IDSDevice for %{private,mask.hash}s!", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
  }
  else
  {
    uint64_t v17 = v0[22];
    uint64_t v18 = v0[19];
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[26], v3, v2);
    Device.uniqueIDOverride.getter();
    uint64_t v19 = String.utf8Data.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    v0[5] = v19;
    v0[6] = v21;
    sub_10004F4EC();
    DataProtocol.stableUUID.getter();
    sub_100044090(v19, v21);
    uint64_t v33 = (uint64_t)sub_1002D8930(&qword_1003EC480, (uint64_t)qword_1003F4168);
    sub_1000DB6A4(v17, v18);
    sub_10000A520(v18, &qword_1003ECFB8);
    unint64_t v22 = sub_100158F40(v33);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_1002CA868((uint64_t)v22);
    swift_release();
    if (qword_1003EC480 != -1) {
      swift_once();
    }
    uint64_t v25 = v0[25];
    uint64_t v24 = v0[26];
    uint64_t v26 = v0[21];
    uint64_t v31 = v0[22];
    uint64_t v32 = v0[24];
    uint64_t v27 = v0[20];
    uint64_t v28 = sub_100044014(&qword_1003F4370);
    sub_100044058(v28, (uint64_t)qword_1003F4168);
    v0[9] = v23;
    swift_beginAccess();
    ManagedDefault.wrappedValue.setter();
    swift_endAccess();
    sub_1002D2CE8(v24);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v32);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_1002CE76C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002CE814(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1002CE834, v1, 0);
}

uint64_t sub_1002CE834()
{
  uint64_t v11 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C380);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    *(void *)(v0 + 16) = sub_100037004(0xD00000000000001ALL, 0x8000000100379A50, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    type metadata accessor for Account();
    sub_1002D939C(&qword_1003ECEB8, 255, (void (*)(uint64_t))&type metadata accessor for Account);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Local IDS %{public}s. Accounts: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1002CEAC8(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1002CEAE8, v1, 0);
}

uint64_t sub_1002CEAE8()
{
  uint64_t v13 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C380);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446722;
    v0[2] = sub_100037004(0xD000000000000018, 0x8000000100379A30, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2048;
    v0[2] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    type metadata accessor for Device();
    sub_1002D939C(&qword_1003ECEA0, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    swift_bridgeObjectRetain();
    uint64_t v7 = Set.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[2] = sub_100037004(v7, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Local IDS %{public}s. Devices[%ld]: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002CED9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100044014(&qword_1003F4318);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Device();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040C380);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = v10;
    uint64_t v15 = v14;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v26 = v22;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v16 = sub_100037004(0xD000000000000021, 0x8000000100379A00, &v26);
    uint64_t v24 = v2;
    uint64_t v25 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v21 = v15 + 14;
    sub_1002D939C(&qword_1003ECEA0, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    swift_bridgeObjectRetain();
    uint64_t v17 = Set.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_100037004(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Local IDS %{public}s. Connected devices: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v23;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10024AF58(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000A520((uint64_t)v6, &qword_1003F4318);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_1002CF150((uint64_t)v10, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1002CF150(uint64_t a1, int a2)
{
  uint64_t v36 = *v2;
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5 - 8);
  uint64_t v35 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Device();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v33 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - v11;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  int v37 = a2;
  uint64_t v13 = type metadata accessor for Logger();
  sub_100044058(v13, (uint64_t)qword_10040C380);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v34 = a1;
  v14(v12, a1, v7);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v39 = v31;
    *(_DWORD *)uint64_t v18 = 136446722;
    int v30 = v17;
    uint64_t v38 = sub_100037004(0xD000000000000021, 0x8000000100379930, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2080;
    v29[1] = v18 + 14;
    sub_1002D939C(&qword_1003F4338, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100037004(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    *(_WORD *)(v18 + 22) = 1024;
    LODWORD(v38) = v37 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v30, "%{public}s to: %s. Force? %{BOOL}d", (uint8_t *)v18, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  uint64_t v21 = v32;
  uint64_t v31 = *(void *)(v32 + 128);
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v22 = v33;
  v14(v33, v34, v7);
  unint64_t v23 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = v7;
  uint64_t v25 = v23 + v9;
  unint64_t v26 = (v23 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v27 + v23, v22, v24);
  *(unsigned char *)(v27 + v25) = v37 & 1;
  *(void *)(v26 + v27 + 8) = v21;
  *(void *)(v27 + ((v26 + 23) & 0xFFFFFFFFFFFFFFF8)) = v36;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1002CF614(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 104) = a2;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = type metadata accessor for Device();
  *(void *)(v4 + 48) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 + 64);
  *(void *)(v4 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_1002CF6E4, 0, 0);
}

uint64_t sub_1002CF6E4()
{
  uint64_t v19 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C380);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000021, 0x8000000100379930, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s entered queue.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v17 = *(void *)(v0 + 40);
  char v16 = *(unsigned char *)(v0 + 104);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v5, *(void *)(v0 + 24), v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v10 + v6;
  unint64_t v12 = (v10 + v6) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v0 + 80) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v13 + v10, v5, v7);
  *(unsigned char *)(v13 + v11) = v16;
  *(void *)(v12 + v13 + 8) = v9;
  *(void *)(v13 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)) = v17;
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_1002CF9B8;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1002CF9B8()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002CFB38;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1002CFAD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002CFAD4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002CFB38()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002CFBA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 561) = a3;
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = a4;
  sub_100044014(&qword_1003ECFB8);
  *(void *)(v4 + 128) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MessagingOptions();
  *(void *)(v4 + 136) = v5;
  *(void *)(v4 + 144) = *(void *)(v5 - 8);
  *(void *)(v4 + 152) = swift_task_alloc();
  uint64_t v6 = sub_100044014(&qword_1003F23C8);
  *(void *)(v4 + 160) = v6;
  *(void *)(v4 + 168) = *(void *)(v6 - 8);
  *(void *)(v4 + 176) = swift_task_alloc();
  *(void *)(v4 + 184) = type metadata accessor for OwnerTokenEnvelopeV1();
  *(void *)(v4 + 192) = swift_task_alloc();
  *(void *)(v4 + 200) = swift_task_alloc();
  *(void *)(v4 + 208) = swift_task_alloc();
  sub_100044014(&qword_1003F29E0);
  *(void *)(v4 + 216) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharedSecretsRecord();
  *(void *)(v4 + 224) = v7;
  *(void *)(v4 + 232) = *(void *)(v7 - 8);
  *(void *)(v4 + 240) = swift_task_alloc();
  *(void *)(v4 + 248) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Device();
  *(void *)(v4 + 256) = v8;
  *(void *)(v4 + 264) = *(void *)(v8 - 8);
  *(void *)(v4 + 272) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v4 + 280) = v9;
  *(void *)(v4 + 288) = *(void *)(v9 - 8);
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = swift_task_alloc();
  *(void *)(v4 + 312) = swift_task_alloc();
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 336) = swift_task_alloc();
  *(void *)(v4 + 344) = swift_task_alloc();
  *(void *)(v4 + 352) = swift_task_alloc();
  return _swift_task_switch(sub_1002CFEF0, 0, 0);
}

uint64_t sub_1002CFEF0()
{
  uint64_t v52 = v0;
  Device.uniqueIDOverride.getter();
  uint64_t v1 = String.utf8Data.getter();
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v3;
  sub_10004F4EC();
  DataProtocol.stableUUID.getter();
  sub_100044090(v1, v3);
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = sub_100044058(v8, (uint64_t)qword_10040C380);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  *(void *)(v0 + 368) = v9;
  *(void *)(v0 + 376) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v4, v5, v6);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 288);
  if (v12)
  {
    uint64_t v48 = *(void *)(v0 + 344);
    v50 = v9;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    os_log_type_t type = v11;
    *(void *)(v0 + 96) = sub_100037004(0xD000000000000021, 0x8000000100379930, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2082;
    sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 104) = sub_100037004(v16, v17, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v48, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s to device: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v50;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(*(void *)(v0 + 344), v14);
  }

  *(void *)(v0 + 384) = v18;
  if (*(unsigned char *)(v0 + 561))
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v21 = *(void *)(v0 + 328);
    uint64_t v22 = *(void *)(v0 + 280);
    (*(void (**)(void, void, void))(*(void *)(v0 + 264) + 16))(*(void *)(v0 + 272), *(void *)(v0 + 112), *(void *)(v0 + 256));
    v19(v21, v20, v22);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 280);
    uint64_t v30 = *(void *)(v0 + 264);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v31 = *(void *)(v0 + 256);
    if (v25)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      sub_1002D939C(&qword_1003F4338, 255, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_100037004(v33, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      *(_WORD *)(v32 + 12) = 2082;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 64) = sub_100037004(v35, v36, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v27, v28);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Connected device: %s ID: %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v30 + 8))(*(void *)(v0 + 272), *(void *)(v0 + 256));
      v26(v27, v28);
    }

    v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v45;
    void *v45 = v0;
    v45[1] = sub_1002D0DA0;
    return daemon.getter();
  }
  else
  {
    v9(*(void *)(v0 + 336), *(void *)(v0 + 352), *(void *)(v0 + 280));
    int v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 336);
    uint64_t v41 = *(void *)(v0 + 280);
    if (v39)
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446466;
      *(void *)(v0 + 80) = sub_100037004(0xD000000000000021, 0x8000000100379930, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2082;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 88) = sub_100037004(v43, v44, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v18(v40, v41);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s Checking if we should send to %{public}s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v18(*(void *)(v0 + 336), *(void *)(v0 + 280));
    }

    uint64_t v46 = *(void *)(v0 + 120);
    return _swift_task_switch(sub_1002D06EC, v46, 0);
  }
}

uint64_t sub_1002D06EC()
{
  *(void *)(v0 + 392) = sub_1002D8930(&qword_1003EC478, (uint64_t)qword_1003F4150);
  return _swift_task_switch(sub_1002D0774, 0, 0);
}

uint64_t sub_1002D0774()
{
  uint64_t v35 = v0;
  char v1 = sub_100012DDC(v0[44], v0[49]);
  swift_bridgeObjectRelease();
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[35];
  if (v1)
  {
    v2(v0[37], v0[44], v0[35]);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[48];
    uint64_t v9 = v0[44];
    uint64_t v10 = v0[37];
    uint64_t v11 = v0[35];
    if (v7)
    {
      uint64_t v33 = (void (*)(uint64_t, uint64_t))v0[48];
      BOOL v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)BOOL v12 = 136446210;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_100037004(v13, v14, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v33(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Already sent owner token to %{public}s.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v33(v9, v11);
    }
    else
    {

      v8(v10, v11);
      v8(v9, v11);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
  else
  {
    uint64_t v15 = v0[41];
    (*(void (**)(void, void, void))(v0[33] + 16))(v0[34], v0[14], v0[32]);
    v2(v15, v3, v4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[48];
    uint64_t v20 = v0[41];
    uint64_t v21 = v0[35];
    uint64_t v23 = v0[33];
    uint64_t v22 = v0[34];
    uint64_t v24 = v0[32];
    if (v18)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      sub_1002D939C(&qword_1003F4338, 255, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_100037004(v26, v27, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      *(_WORD *)(v25 + 12) = 2082;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100037004(v28, v29, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v19(v20, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Connected device: %s ID: %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v23 + 8))(v0[34], v0[32]);
      v19(v20, v21);
    }

    uint64_t v32 = (void *)swift_task_alloc();
    v0[50] = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1002D0DA0;
    return daemon.getter();
  }
}

uint64_t sub_1002D0DA0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[51] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[52] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[53] = v4;
  uint64_t v5 = type metadata accessor for NITokenService();
  v2[54] = v5;
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[55] = v6;
  uint64_t v7 = sub_1002D939C(&qword_1003F1518, 255, (void (*)(uint64_t))type metadata accessor for NITokenService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002D0F8C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002D0F8C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[56] = a1;
  v3[57] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    return _swift_task_switch(sub_1002D2980, 0, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v3[58] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1002D1130;
    uint64_t v6 = v3[27];
    return sub_100312680(v6);
  }
}

uint64_t sub_1002D1130()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002D122C, 0, 0);
}

uint64_t sub_1002D122C()
{
  uint64_t v55 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 232) + 48))(v1, 1, *(void *)(v0 + 224)) == 1)
  {
    sub_10000A520(v1, &qword_1003F29E0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 280);
    if (v4)
    {
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v54[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      *(void *)(v0 + 32) = sub_100037004(0xD000000000000021, 0x8000000100379930, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s No owner token record!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      v51(v6, v7);
    }
    else
    {
      swift_release();

      v5(v6, v7);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v12 = *(void *)(v0 + 280);
  sub_1002D8D18(v1, *(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  v9(v11, v10, v12);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v0 + 280);
  if (v15)
  {
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 136446210;
    sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 48) = sub_100037004(v19, v20, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v52(v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sending owner shared secret to local device %{public}s over IDS.", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v0 + 384))(v16, v17);
  }

  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v25 = *(int **)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 200);
  uint64_t v26 = *(void *)(v0 + 208);
  uint64_t v28 = *(int **)(v0 + 184);
  uint64_t v50 = *(void *)(v0 + 192);
  uint64_t v53 = *(void *)(v0 + 456);
  sub_1002D8D80(*(void *)(v0 + 248), v24, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  v22(v27, v24, v23);
  *(unsigned char *)(v27 + v28[5]) = *(unsigned char *)(v24 + v25[5]);
  uint64_t v29 = v24 + v25[7];
  uint64_t v30 = v27 + v28[6];
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v30, v29, v31);
  uint64_t v32 = (uint64_t *)(v24 + v25[6]);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_100022C64(*v32, v34);
  sub_1002D8DE8(v24, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  uint64_t v35 = (uint64_t *)(v27 + v28[7]);
  *uint64_t v35 = v33;
  v35[1] = v34;
  sub_1002D8D18(v27, v26, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
  *(unsigned char *)(v0 + 560) = 0;
  sub_1002D8D80(v26, v50, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
  sub_1002CD044();
  sub_1002D939C(&qword_1003F4358, 255, (void (*)(uint64_t))type metadata accessor for OwnerTokenEnvelopeV1);
  sub_1002D939C(&qword_1003F4360, 255, (void (*)(uint64_t))type metadata accessor for OwnerTokenEnvelopeV1);
  Message.init<A>(type:version:payload:)();
  if (v53)
  {
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    uint64_t v37 = *(void *)(v0 + 352);
    uint64_t v38 = *(void *)(v0 + 280);
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v40 = *(void *)(v0 + 208);
    swift_release();
    sub_1002D8DE8(v40, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
    sub_1002D8DE8(v39, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    v36(v37, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v21();
  }
  uint64_t v42 = *(void *)(v0 + 280);
  uint64_t v43 = *(void *)(v0 + 288);
  uint64_t v44 = *(void *)(v0 + 128);
  sub_100044014(&qword_1003ECFC0);
  type metadata accessor for Destination();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
  Device.destination.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v42);
  sub_100044014(&qword_1003F4368);
  uint64_t v45 = type metadata accessor for MessagingCapability();
  uint64_t v46 = *(void *)(v45 - 8);
  unint64_t v47 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v46 + 104))(v48 + v47, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v45);
  sub_100179698(v48);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
  v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v49;
  void *v49 = v0;
  v49[1] = sub_1002D1C34;
  return daemon.getter();
}

uint64_t sub_1002D1C34(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 480) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 488) = v5;
  uint64_t v6 = type metadata accessor for LocalMessagingService();
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002D1DEC;
  uint64_t v8 = *(void *)(v2 + 440);
  uint64_t v9 = *(void *)(v2 + 424);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002D1DEC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 496) = a1;
  *(void *)(v4 + 504) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_1002D2AF0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = sub_1002D1F30;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1002D1F30()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[64] = v1;
  void *v1 = v0;
  v1[1] = sub_1002D1FD8;
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  return LocalMessaging.send(message:messageOptions:)(v2, v3, v4);
}

uint64_t sub_1002D1FD8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002D2114;
  }
  else
  {
    uint64_t v4 = v2[39];
    uint64_t v5 = v2[35];
    uint64_t v6 = v2[36];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[66] = v7;
    v2[67] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    uint64_t v3 = sub_1002D231C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002D2114()
{
  uint64_t v1 = v0[36];
  uint64_t v12 = v0[35];
  uint64_t v13 = v0[44];
  uint64_t v11 = v0[31];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  sub_1002D8DE8(v2, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
  sub_1002D8DE8(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002D231C()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0 + 368))(*(void *)(v0 + 304), *(void *)(v0 + 352), *(void *)(v0 + 280));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 40) = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent owner shared secret over local IDS to device: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 304), *(void *)(v0 + 280));
  }

  uint64_t v8 = *(void *)(v0 + 120);
  return _swift_task_switch(sub_1002D251C, v8, 0);
}

uint64_t sub_1002D251C()
{
  sub_1002D96A0(*(void *)(v0 + 352), &qword_1003EC478, (uint64_t)qword_1003F4150);
  return _swift_task_switch(sub_1002D25A4, 0, 0);
}

uint64_t sub_1002D25A4()
{
  unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 544) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 552) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002D2668;
  return sub_1002D99E0(0xD00000000000003DLL, 0x8000000100373200, 0, v1);
}

uint64_t sub_1002D2668()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002D2780, 0, 0);
}

uint64_t sub_1002D2780()
{
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[66];
  uint64_t v11 = v0[35];
  uint64_t v12 = v0[44];
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  sub_1002D8DE8(v2, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
  sub_1002D8DE8(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  v13(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002D2980()
{
  (*(void (**)(void, void))(v0 + 384))(*(void *)(v0 + 352), *(void *)(v0 + 280));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002D2AF0()
{
  uint64_t v1 = v0[36];
  uint64_t v12 = v0[35];
  uint64_t v13 = v0[44];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[22];
  uint64_t v7 = v0[19];
  uint64_t v6 = v0[20];
  uint64_t v9 = v0[17];
  uint64_t v8 = v0[18];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  sub_1002D8DE8(v3, (uint64_t (*)(void))type metadata accessor for OwnerTokenEnvelopeV1);
  sub_1002D8DE8(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002D2CE8(uint64_t a1)
{
  uint64_t v29 = *v1;
  uint64_t v30 = v1;
  uint64_t v3 = type metadata accessor for UUID();
  __chkstk_darwin(v3 - 8);
  uint64_t v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Device();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v27 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040C380);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v26(v10, a1, v5);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v31 = sub_100037004(0xD000000000000023, 0x8000000100379B00, &v32);
    uint64_t v25 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v23 = v14 + 14;
    sub_1002D939C(&qword_1003F4338, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_100037004(v15, v16, &v32);
    a1 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s to: %s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  uint64_t v17 = v30;
  type metadata accessor for WorkItemQueue.WorkItem();
  BOOL v18 = v27;
  v26(v27, a1, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v21 + v19, v18, v5);
  *(void *)(v21 + v20) = v17;
  *(void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1002D3158(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  v2[13] = a2;
  sub_100044014(&qword_1003ECFB8);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MessagingOptions();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003F23C8);
  v2[18] = v4;
  v2[19] = *(void *)(v4 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Device();
  v2[21] = v5;
  v2[22] = *(void *)(v5 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[24] = v6;
  v2[25] = *(void *)(v6 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return _swift_task_switch(sub_1002D33A0, 0, 0);
}

uint64_t sub_1002D33A0()
{
  uint64_t v1 = v0[13];
  Device.uniqueIDOverride.getter();
  uint64_t v2 = String.utf8Data.getter();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v0[2] = v2;
  v0[3] = v4;
  sub_10004F4EC();
  DataProtocol.stableUUID.getter();
  sub_100044090(v2, v4);
  return _swift_task_switch(sub_1002D3464, v1, 0);
}

uint64_t sub_1002D3464()
{
  *(void *)(v0 + 256) = sub_1002D8930(&qword_1003EC480, (uint64_t)qword_1003F4168);
  return _swift_task_switch(sub_1002D34EC, 0, 0);
}

uint64_t sub_1002D34EC()
{
  v71 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 9;
  unint64_t v3 = v0 + 10;
  char v4 = sub_100012DDC(v0[31], v0[32]);
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (qword_1003EC460 != -1) {
      swift_once();
    }
    uint64_t v5 = v1[31];
    uint64_t v7 = v1[25];
    uint64_t v6 = v1[26];
    uint64_t v8 = v1[24];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040C380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v1[31];
    uint64_t v15 = v1[25];
    uint64_t v14 = v1[26];
    uint64_t v16 = v1[24];
    if (v12)
    {
      uint64_t v68 = v1[31];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *uint64_t v2 = sub_100037004(v18, v19, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Already sent finding capability to %{public}s.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v20(v68, v16);
    }
    else
    {

      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v43(v14, v16);
      v43(v13, v16);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v61 = (uint64_t (*)(void))v1[1];
    return v61();
  }
  else
  {
    v69 = v3;
    if (qword_1003EC460 != -1) {
      swift_once();
    }
    uint64_t v21 = v1[12];
    uint64_t v22 = v1[30];
    uint64_t v67 = v1[31];
    uint64_t v23 = v1[24];
    uint64_t v24 = v1[25];
    uint64_t v26 = v1[22];
    uint64_t v25 = v1[23];
    uint64_t v27 = v1[21];
    uint64_t v28 = type metadata accessor for Logger();
    v1[33] = sub_100044058(v28, (uint64_t)qword_10040C380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v21, v27);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
    v1[34] = v29;
    v1[35] = (v24 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v29(v22, v67, v23);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = v1[25];
    uint64_t v65 = v1[24];
    uint64_t v66 = v1[30];
    uint64_t v35 = v1[22];
    uint64_t v34 = v1[23];
    uint64_t v36 = v1[21];
    if (v32)
    {
      v64 = v29;
      uint64_t v37 = swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315394;
      sub_1002D939C(&qword_1003F4338, 255, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_type_t type = v31;
      v1[11] = sub_100037004(v38, v39, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      *(_WORD *)(v37 + 12) = 2082;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v1[8] = sub_100037004(v40, v41, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v42(v66, v65);
      _os_log_impl((void *)&_mh_execute_header, v30, type, "Connected device: %s ID: %{public}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v29 = v64;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v35 + 8))(v1[23], v1[21]);
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v42(v66, v65);
    }
    v29(v1[29], v1[31], v1[24]);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v1[29];
    uint64_t v48 = v1[24];
    if (v46)
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v70[0] = swift_slowAlloc();
      *(_DWORD *)v49 = 136446210;
      sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t *v69 = sub_100037004(v50, v51, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42(v47, v48);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Sending finding capability to local device %{public}s over IDS.", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v42(v1[29], v1[24]);
    }

    char v52 = sub_1002C890C();
    *((unsigned char *)v1 + 360) = 2;
    *((unsigned char *)v1 + 361) = v52 & 1;
    sub_1002CD044();
    sub_1002D95F8();
    sub_1002D964C();
    Message.init<A>(type:version:payload:)();
    uint64_t v53 = v1[24];
    uint64_t v54 = v1[25];
    uint64_t v55 = v1[14];
    sub_100044014(&qword_1003ECFC0);
    type metadata accessor for Destination();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
    Device.destination.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v55, 1, 1, v53);
    sub_100044014(&qword_1003F4368);
    uint64_t v56 = type metadata accessor for MessagingCapability();
    uint64_t v57 = *(void *)(v56 - 8);
    unint64_t v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_100367D70;
    (*(void (**)(unint64_t, void, uint64_t))(v57 + 104))(v59 + v58, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v56);
    sub_100179698(v59);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
    v60 = (void *)swift_task_alloc();
    v1[36] = v60;
    void *v60 = v1;
    v60[1] = sub_1002D4120;
    return daemon.getter();
  }
}

uint64_t sub_1002D4120(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 296) = a1;
  swift_task_dealloc();
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 304) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalMessagingService();
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *unint64_t v3 = v9;
  v3[1] = sub_1002D4304;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002D4304(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 312) = a1;
  *(void *)(v4 + 320) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_1002D4CE4;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = sub_1002D4448;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1002D4448()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[41] = v1;
  void *v1 = v0;
  v1[1] = sub_1002D44F0;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[17];
  return LocalMessaging.send(message:messageOptions:)(v2, v3, v4);
}

uint64_t sub_1002D44F0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002D4628;
  }
  else
  {
    uint64_t v4 = v2[28];
    uint64_t v5 = v2[24];
    uint64_t v6 = v2[25];
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[43] = v7;
    v2[44] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v5);
    uint64_t v3 = sub_1002D4914;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002D4628()
{
  unint64_t v19 = v0;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v7 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v10 = v0[42];
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    v0[6] = sub_100037004(0xD000000000000023, 0x8000000100379B00, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    v0[7] = v10;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v14 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s error: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1002D4914()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0 + 272))(*(void *)(v0 + 216), *(void *)(v0 + 248), *(void *)(v0 + 192));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_1002D939C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 40) = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent finding capability over local IDS to device: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 216), *(void *)(v0 + 192));
  }

  uint64_t v8 = *(void *)(v0 + 104);
  return _swift_task_switch(sub_1002D4B14, v8, 0);
}

uint64_t sub_1002D4B14()
{
  sub_1002D96A0(*(void *)(v0 + 248), &qword_1003EC480, (uint64_t)qword_1003F4168);
  return _swift_task_switch(sub_1002D4B9C, 0, 0);
}

uint64_t sub_1002D4B9C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v7 = v0[17];
  uint64_t v6 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1002D4CE4()
{
  uint64_t v16 = v0;
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v6 = v0[18];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v7 = v0[40];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    v0[6] = sub_100037004(0xD000000000000023, 0x8000000100379B00, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2082;
    v0[7] = v7;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v11 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s error: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002D4FC0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C3B0);
  sub_100044058(v0, (uint64_t)qword_10040C3B0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002D5044(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MessagingCapability();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1002D939C(&qword_1003F0BB8, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      uint64_t v19 = *(void *)(v10 + 48);
      unint64_t v20 = v32 * v13;
      uint64_t v21 = v14;
      v14(v9, v19 + v32 * v13, v6);
      sub_1002D939C(&qword_1003F0BC0, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      uint64_t v10 = v18;
      uint64_t v14 = v21;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002D5370((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1002D5370(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for MessagingCapability();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 <= v10)
  {
    if (a3) {
      sub_1002D5C90();
    }
    else {
      sub_1002D58C4();
    }
    uint64_t v12 = *v3;
    sub_1002D939C(&qword_1003F0BB8, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
    uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
    a2 = v13 & ~v14;
    uint64_t v30 = v12;
    uint64_t v15 = v12 + 56;
    if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v16 = ~v14;
      uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      uint64_t v18 = v7 + 16;
      uint64_t v17 = v19;
      uint64_t v20 = *(void *)(v18 + 56);
      do
      {
        v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
        sub_1002D939C(&qword_1003F0BC0, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
        if (v21) {
          goto LABEL_14;
        }
        a2 = (a2 + 1) & v16;
      }
      while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
  else if ((a3 & 1) == 0)
  {
    sub_1002D5610();
  }
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_14:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1002D5610()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MessagingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003F0BB0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  uint64_t v23 = v6 + 56;
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v24) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19)
        {
          int64_t v11 = v18 + 3;
          if (v18 + 3 >= v24) {
            goto LABEL_26;
          }
          unint64_t v19 = *(void *)(v23 + 8 * v11);
          if (!v19)
          {
            int64_t v11 = v18 + 4;
            if (v18 + 4 >= v24)
            {
LABEL_26:
              uint64_t result = (void *)swift_release();
              uint64_t v1 = v22;
              goto LABEL_28;
            }
            unint64_t v19 = *(void *)(v23 + 8 * v11);
            int64_t v20 = v18 + 4;
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1002D58C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MessagingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F0BB0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_36:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_25;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v20 >= v36) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21)
        {
          int64_t v16 = v20 + 3;
          if (v20 + 3 >= v36) {
            goto LABEL_34;
          }
          unint64_t v21 = *(void *)(v35 + 8 * v16);
          if (!v21)
          {
            int64_t v16 = v20 + 4;
            if (v20 + 4 >= v36)
            {
LABEL_34:
              uint64_t result = swift_release_n();
              uint64_t v1 = v34;
              goto LABEL_36;
            }
            unint64_t v21 = *(void *)(v35 + 8 * v16);
            int64_t v22 = v20 + 4;
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_25:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1002D939C(&qword_1003F0BB8, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1002D5C90()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for MessagingCapability();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F0BB0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v38 = (void *)(v4 + 56);
    uint64_t v39 = v2;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    int64_t v36 = v0;
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v37) {
          goto LABEL_34;
        }
        unint64_t v20 = v38[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v37) {
            goto LABEL_34;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v37) {
              goto LABEL_34;
            }
            unint64_t v20 = v38[v21];
            if (!v20)
            {
              int64_t v21 = v13 + 4;
              if (v13 + 4 >= v37) {
                goto LABEL_34;
              }
              unint64_t v20 = v38[v21];
              if (!v20)
              {
                int64_t v21 = v13 + 5;
                if (v13 + 5 >= v37)
                {
LABEL_34:
                  swift_release();
                  uint64_t v1 = v36;
                  uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                  if (v34 >= 64) {
                    bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  }
                  else {
                    *uint64_t v38 = -1 << v34;
                  }
                  *(void *)(v4 + 16) = 0;
                  break;
                }
                unint64_t v20 = v38[v21];
                for (uint64_t i = v13 + 5; !v20; ++i)
                {
                  int64_t v21 = i + 1;
                  if (__OFADD__(i, 1)) {
                    goto LABEL_40;
                  }
                  if (v21 >= v37) {
                    goto LABEL_34;
                  }
                  unint64_t v20 = v38[v21];
                }
              }
            }
          }
        }
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      sub_1002D939C(&qword_1003F0BB8, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_1002D60A0()
{
  uint64_t v2 = *(void *)(type metadata accessor for Device() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  char v5 = *(unsigned char *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  uint64_t v8 = *(void *)(v0 + (((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100018CD0;
  return sub_1002CF614(v6, v5, v7, v8);
}

uint64_t sub_1002D61BC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 25) = a2;
  *(void *)(v2 + 48) = a1;
  return _swift_task_switch(sub_1002D61E0, 0, 0);
}

uint64_t sub_1002D61E0()
{
  uint64_t v22 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 25) & 1;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040C380);
  sub_10028170C(v1, v2);
  sub_10028170C(v1, v2);
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  char v7 = *(unsigned char *)(v0 + 25);
  uint64_t v8 = *(void *)(v0 + 48);
  if (v6)
  {
    char v9 = v7 & 1;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v0 + 32) = sub_100037004(0xD000000000000021, 0x8000000100379930, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2082;
    *(void *)(v0 + 16) = v8;
    *(unsigned char *)(v0 + 24) = v9;
    sub_10028170C(v8, v9);
    sub_100044014(&qword_1003EC590);
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_100037004(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D5B10(v8, v9);
    sub_1001D5B10(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s completed with %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    char v13 = v7 & 1;
    sub_1001D5B10(*(void *)(v0 + 48), v7 & 1);
    sub_1001D5B10(v8, v13);
  }

  if (*(unsigned char *)(v0 + 25))
  {
    uint64_t v16 = *(void *)(v0 + 48);
    type metadata accessor for NITokenService();
    sub_1002D6714();
    uint64_t v17 = swift_allocError();
    *(void *)(v0 + 56) = v17;
    void *v18 = v16;
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v19 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 64) = v19;
    unint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v20;
    void *v20 = v0;
    v20[1] = sub_1002D657C;
    return sub_1002D99E0(0xD00000000000003DLL, 0x8000000100373200, v17, v19);
  }
  else
  {
    unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_1002D657C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1002D66B0, 0, 0);
}

uint64_t sub_1002D66B0()
{
  sub_1001D5B10(*(void *)(v0 + 48), 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_1002D6714()
{
  unint64_t result = qword_1003F4340;
  if (!qword_1003F4340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F4340);
  }
  return result;
}

uint64_t sub_1002D676C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Device() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  char v7 = *(unsigned char *)(v1 + v6);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10004A274;
  return sub_1002CFBA4(a1, v8, v7, v9);
}

uint64_t sub_1002D689C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessagingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_1002D939C(&qword_1003F0BB8, 255, (void (*)(uint64_t))&type metadata accessor for MessagingCapability);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    char v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_1002D5044((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1002D6A3C(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for Destination();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  sub_100044014(&qword_1003F4318);
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Device();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1002D6B88, v1, 0);
}

uint64_t sub_1002D6B88()
{
  uint64_t v16 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[22] = sub_100044058(v1, (uint64_t)qword_10040C380);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    v0[11] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    v0[12] = sub_100037004(0xD00000000000001BLL, 0x8000000100379AA0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Extracted OwnerTokenEnvelopeRequestV1: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1002D939C(&qword_1003ECEC8, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v6 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v6, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  if (My)
  {
    if (v9)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[10] = sub_100037004(0xD000000000000029, 0x8000000100379A70, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Watch requested owner token. Sending now.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v11 = (void *)swift_task_alloc();
    v0[23] = v11;
    void *v11 = v0;
    v11[1] = sub_1002D7088;
    return daemon.getter();
  }
  else
  {
    if (v9)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      v0[7] = sub_100037004(0xD000000000000029, 0x8000000100379A70, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Feature.FindMy.redStripe FF disabled.", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1002D7088(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 192) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 200) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalMessagingService();
  uint64_t v6 = sub_1002D939C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002D939C(&qword_1003F1D30, 255, (void (*)(uint64_t))type metadata accessor for LocalMessagingService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1002D726C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002D726C(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[14];
    uint64_t v5 = sub_1002D7854;
  }
  else
  {
    uint64_t v6 = v3[14];
    swift_release();
    uint64_t v5 = sub_1002D7394;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002D7394()
{
  uint64_t v1 = v0[26];
  v0[28] = Destination.destination.getter();
  v0[29] = v2;
  return _swift_task_switch(sub_1002D7404, v1, 0);
}

uint64_t sub_1002D7404()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 208) + 128);
  sub_100044014(&qword_1003F1D28);
  sub_100014FFC(&qword_1003F22F0, &qword_1003F1D28);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002D74C4, v2, v1);
}

uint64_t sub_1002D74C4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  dispatch thunk of LocalMessaging.device(fromID:)();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002D754C, v1, 0);
}

uint64_t sub_1002D754C()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v5 = v0[16];
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[13];
    sub_10000A520(v3, &qword_1003F4318);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[16];
    uint64_t v11 = v0[17];
    uint64_t v13 = v0[15];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_1002D939C(&qword_1003ECEF8, 255, (void (*)(uint64_t))&type metadata accessor for Destination);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_100037004(v15, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No IDSDevice for %{private,mask.hash}s!", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
  }
  else
  {
    uint64_t v17 = v0[21];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v17, v3, v1);
    sub_1002CF150(v17, 1);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1002D7854()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002D78E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = sub_100044014(&qword_1003F23C8);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Destination();
  v4[17] = v6;
  v4[18] = *(void *)(v6 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1002D7A70, v3, 0);
}

uint64_t sub_1002D7A70()
{
  uint64_t v50 = v0;
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v40 = *(void *)(v0 + 136);
  uint64_t v42 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v47 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 88);
  os_log_t log = *(os_log_t *)(v0 + 96);
  uint64_t v46 = *(void *)(v0 + 112);
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v0 + 192) = sub_100044058(v8, (uint64_t)qword_10040C380);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v39(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v42, v7, v40);
  (*(void (**)(uint64_t, os_log_t, uint64_t))(v6 + 16))(v47, log, v46);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 184);
  if (v11)
  {
    os_log_type_t v48 = v10;
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v35 = *(void *)(v0 + 136);
    uint64_t v36 = *(void *)(v0 + 152);
    uint64_t v41 = *(void *)(v0 + 128);
    uint64_t v43 = *(void *)(v0 + 120);
    uint64_t v37 = *(void *)(v0 + 144);
    uint64_t v38 = *(void *)(v0 + 112);
    loga = v9;
    uint64_t v16 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136447747;
    *(void *)(v0 + 32) = sub_100037004(0xD00000000000003ELL, 0x8000000100373AE0, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2160;
    *(void *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    v39(v13, v12, v15);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 16) = sub_100037004(v17, v18, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    *(_WORD *)(v16 + 32) = 2160;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 2081;
    sub_1002D939C(&qword_1003ECEF8, 255, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_100037004(v19, v20, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v35);
    *(_WORD *)(v16 + 52) = 2160;
    *(void *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 62) = 2081;
    sub_100014FFC(&qword_1003F43E0, &qword_1003F23C8);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 48) = sub_100037004(v21, v22, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v38);
    _os_log_impl((void *)&_mh_execute_header, loga, v48, "Local IDS %{public}s\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v16, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 144);
    uint64_t v23 = *(void *)(v0 + 152);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8))(v12, *(void *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  Message.type.getter();
  switch(*(unsigned char *)(v0 + 232))
  {
    case 1:
      sub_1002D92F4();
      sub_1002D9348();
      Message.extract<A>()();
      unint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v29;
      void *v29 = v0;
      v29[1] = sub_1002D82A8;
      uint64_t v30 = *(void *)(v0 + 88);
      uint64_t result = sub_1002D6A3C(v30);
      break;
    case 3:
      sub_1002D924C();
      sub_1002D92A0();
      Message.extract<A>()();
      uint64_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_1002D8630;
      uint64_t v34 = *(void *)(v0 + 88);
      uint64_t result = sub_1002CD90C(v34);
      break;
    default:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      BOOL v32 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v32();
      break;
  }
  return result;
}

uint64_t sub_1002D82A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_1002D845C;
  }
  else {
    uint64_t v4 = sub_1002D83D4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002D83D4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002D845C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "messageReceived handler error: %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1002D8630()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_1002D875C;
  }
  else {
    uint64_t v4 = sub_1002D99D8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002D875C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "messageReceived handler error: %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void *sub_1002D8930(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  BOOL v32 = (char *)&v30 - v11;
  uint64_t v12 = sub_100044014(&qword_1003F4370);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100044058(v12, a2);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v17 = v34;
  if (!v34) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v18 = *(void *)(v34 + 16);
  if (v18)
  {
    uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    unint64_t v20 = (void (**)(char *, char *, uint64_t))(v33 + 32);
    swift_bridgeObjectRetain();
    uint64_t v30 = v17;
    uint64_t v21 = v17 + 40;
    unint64_t v22 = _swiftEmptyArrayStorage;
    unint64_t v31 = v10;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v19)(v6, 1, v7) == 1)
      {
        sub_10000A520((uint64_t)v6, &qword_1003ECFB8);
      }
      else
      {
        uint64_t v23 = *v20;
        uint64_t v24 = v32;
        (*v20)(v32, v6, v7);
        v23(v10, v24, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v22 = (void *)sub_10013E1AC(0, v22[2] + 1, 1, (unint64_t)v22);
        }
        unint64_t v26 = v22[2];
        unint64_t v25 = v22[3];
        if (v26 >= v25 >> 1) {
          unint64_t v22 = (void *)sub_10013E1AC(v25 > 1, v26 + 1, 1, (unint64_t)v22);
        }
        v22[2] = v26 + 1;
        unint64_t v27 = (unint64_t)v22
            + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
            + *(void *)(v33 + 72) * v26;
        os_log_type_t v10 = v31;
        v23((char *)v27, v31, v7);
      }
      v21 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v22 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_100246774((uint64_t)v22);
  swift_bridgeObjectRelease();
  return (void *)v28;
}

uint64_t sub_1002D8D18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002D8D80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002D8DE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002D8E48()
{
  if (qword_1003EC460 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100044058(v0, (uint64_t)qword_10040C380);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    uint64_t v11 = sub_100037004(0xD000000000000014, 0x8000000100379980, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1002D8930(&qword_1003EC478, (uint64_t)qword_1003F4150);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_100158F40((uint64_t)&_swiftEmptySetSingleton);
  uint64_t v5 = sub_1002CA868((uint64_t)v4);
  swift_release();
  if (qword_1003EC478 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100044014(&qword_1003F4370);
  sub_100044058(v6, (uint64_t)qword_1003F4150);
  uint64_t v11 = (uint64_t)v5;
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  swift_endAccess();
  sub_1002D8930(&qword_1003EC480, (uint64_t)qword_1003F4168);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100158F40((uint64_t)&_swiftEmptySetSingleton);
  uint64_t v8 = sub_1002CA868((uint64_t)v7);
  swift_release();
  if (qword_1003EC480 != -1) {
    swift_once();
  }
  sub_100044058(v6, (uint64_t)qword_1003F4168);
  uint64_t v11 = (uint64_t)v8;
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  return swift_endAccess();
}

unint64_t sub_1002D9144()
{
  unint64_t result = qword_1003F4378;
  if (!qword_1003F4378)
  {
    sub_10004AE58(&qword_1003ED230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F4378);
  }
  return result;
}

uint64_t sub_1002D91B0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1002CC300();
}

unint64_t sub_1002D924C()
{
  unint64_t result = qword_1003F43B0;
  if (!qword_1003F43B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F43B0);
  }
  return result;
}

unint64_t sub_1002D92A0()
{
  unint64_t result = qword_1003F43B8;
  if (!qword_1003F43B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F43B8);
  }
  return result;
}

unint64_t sub_1002D92F4()
{
  unint64_t result = qword_1003F43C8;
  if (!qword_1003F43C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F43C8);
  }
  return result;
}

unint64_t sub_1002D9348()
{
  unint64_t result = qword_1003F43D0;
  if (!qword_1003F43D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F43D0);
  }
  return result;
}

uint64_t sub_1002D939C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002D93E4()
{
  unint64_t result = qword_1003F43E8;
  if (!qword_1003F43E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F43E8);
  }
  return result;
}

uint64_t sub_1002D9438()
{
  uint64_t v1 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002D94E4()
{
  uint64_t v2 = *(void *)(type metadata accessor for Device() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_1002D3158(v4, v5);
}

unint64_t sub_1002D95F8()
{
  unint64_t result = qword_1003F4408;
  if (!qword_1003F4408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4408);
  }
  return result;
}

unint64_t sub_1002D964C()
{
  unint64_t result = qword_1003F4410;
  if (!qword_1003F4410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F4410);
  }
  return result;
}

uint64_t sub_1002D96A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v18 = sub_1002D8930(a2, a3);
  sub_100154694((uint64_t)v12, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v13 = sub_100158F40((uint64_t)v18);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_1002CA868((uint64_t)v13);
  swift_release();
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100044014(&qword_1003F4370);
  sub_100044058(v15, a3);
  v17[4] = v14;
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  return swift_endAccess();
}

void *initializeBufferWithCopyOfBuffer for NITokenService_LocalMessaging.Error(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  return a1;
}

uint64_t destroy for NITokenService_LocalMessaging.Error()
{
  return swift_errorRelease();
}

void *assignWithCopy for NITokenService_LocalMessaging.Error(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_errorRetain();
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

void *assignWithTake for NITokenService_LocalMessaging.Error(void *a1, void *a2)
{
  *a1 = *a2;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NITokenService_LocalMessaging.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NITokenService_LocalMessaging.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NITokenService_LocalMessaging.Error()
{
  return &type metadata for NITokenService_LocalMessaging.Error;
}

uint64_t sub_1002D99E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_1002D9A7C, 0, 0);
}

uint64_t sub_1002D9A7C()
{
  uint64_t v20 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v16 = *(void *)(v0 + 48);
    unint64_t v4 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446722;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000030, 0x8000000100379B30, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_100037004(v16, v4, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 22) = 2080;
    *(void *)(v0 + 32) = v17;
    swift_errorRetain();
    sub_100044014(&qword_1003F31D8);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_100037004(v6, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %{public}s %s", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)(v0 + 48);
  uint64_t v12 = type metadata accessor for TaskPriority();
  long long v18 = *(_OWORD *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = v11;
  *(void *)(v13 + 40) = v9;
  *(void *)(v13 + 48) = v10;
  *(_OWORD *)(v13 + 56) = v18;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10010405C(v8, (uint64_t)&unk_1003F4430, v13);
  swift_release();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_1002D9E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  return _swift_task_switch(sub_1002D9E40, 0, 0);
}

uint64_t sub_1002D9E40()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  type metadata accessor for AnalyticsEvent();
  unint64_t v4 = (char *)swift_allocObject();
  *(void *)(v0 + 112) = v4;
  swift_bridgeObjectRetain();
  swift_defaultActor_initialize();
  *((void *)v4 + 14) = sub_100101640((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v5 = &v4[OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime();
  unint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v4[OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime], 1, 1, v6);
  *((void *)v4 + 15) = v3;
  *((void *)v4 + 16) = v1;
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 96);
    swift_errorRetain();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1002DA130;
    return sub_10005499C(v8);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 104);
    *(unsigned char *)(v0 + 16) = 1;
    *(_WORD *)(v0 + 56) = 0;
    if (*(void *)(v11 + 16))
    {
      uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003ECA38 + dword_1003ECA38);
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_1002DA398;
      uint64_t v13 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 112);
      return v17(v14, v13);
    }
    else
    {
      uint64_t v15 = swift_task_alloc();
      *(void *)(v0 + 144) = v15;
      *(void *)(v15 + 16) = v0 + 16;
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_1002DA84C;
      return sub_100053328((uint64_t)&unk_1003F4440, v15);
    }
  }
}

uint64_t sub_1002DA130()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002DA22C, 0, 0);
}

uint64_t sub_1002DA22C()
{
  swift_errorRelease();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = *(void *)(v0 + 104);
  *(_WORD *)(v0 + 56) = 0;
  if (*(void *)(v1 + 16))
  {
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003ECA38 + dword_1003ECA38);
    swift_bridgeObjectRetain();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002DA398;
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112);
    return v8(v4, v3);
  }
  else
  {
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 144) = v6;
    *(void *)(v6 + 16) = v0 + 16;
    unint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v7;
    *unint64_t v7 = v0;
    v7[1] = sub_1002DA84C;
    return sub_100053328((uint64_t)&unk_1003F4440, v6);
  }
}

uint64_t sub_1002DA398()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1002DA588;
  }
  else {
    uint64_t v2 = sub_1002DA4C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002DA4C8()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *(void *)(v1 + 16) = v0 + 16;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1002DA84C;
  return sub_100053328((uint64_t)&unk_1003F4440, v1);
}

uint64_t sub_1002DA588()
{
  uint64_t v13 = v0;
  swift_release();
  sub_100058DFC((uint64_t)(v0 + 2));
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[11];
  if (v4)
  {
    uint64_t v11 = v0[10];
    uint64_t v6 = swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    v0[8] = sub_100037004(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to publish %{public}s. Error %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002DA84C()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002DABB4;
  }
  else {
    uint64_t v2 = sub_1002DA97C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002DA97C()
{
  type metadata accessor for AnalyticsPublisher();
  v0[21] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[22] = v1;
  void *v1 = v0;
  v1[1] = sub_1002DAA30;
  uint64_t v2 = v0[14];
  return sub_100055520(v2);
}

uint64_t sub_1002DAA30()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002DAB48, 0, 0);
}

uint64_t sub_1002DAB48()
{
  swift_release();
  sub_100058DFC(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002DABB4()
{
  uint64_t v13 = v0;
  swift_release();
  sub_100058DFC((uint64_t)(v0 + 2));
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[11];
  if (v4)
  {
    uint64_t v11 = v0[10];
    uint64_t v6 = swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    v0[8] = sub_100037004(v11, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to publish %{public}s. Error %{public}@", (uint8_t *)v6, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002DAE78()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002DAEC8()
{
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100018CD0;
  *(void *)(v4 + 96) = v2;
  *(void *)(v4 + 104) = v3;
  *(_OWORD *)(v4 + 80) = v6;
  return _swift_task_switch(sub_1002D9E40, 0, 0);
}

uint64_t sub_1002DAF8C(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return _swift_task_switch(sub_1002DAFAC, 0, 0);
}

uint64_t sub_1002DAFAC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_100044014(&qword_1003F4448);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  sub_100058CC4(v1, inited + 48);
  unint64_t v3 = sub_100101D3C(inited);
  uint64_t v4 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1002DB060()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10004CAE8;
  v3[14] = v2;
  return _swift_task_switch(sub_1002DAFAC, 0, 0);
}

uint64_t sub_1002DB10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  return _swift_task_switch(sub_1002DB158, 0, 0);
}

uint64_t sub_1002DB158()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  *(void *)(v3 + 40) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  uint64_t v6 = sub_100044014(&qword_1003F1530);
  *uint64_t v5 = v0;
  v5[1] = sub_1002204A0;
  uint64_t v7 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD000000000000015, 0x8000000100379B90, sub_1002F217C, v3, v6);
}

uint64_t sub_1002DB264()
{
  v1[14] = v0;
  v1[15] = *v0;
  sub_100044014(&qword_1003F29E0);
  v1[16] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OwnerSharedSecretsRecord();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_1002DB3CC, v0, 0);
}

uint64_t sub_1002DB3CC()
{
  uint64_t v14 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1002F32A8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if ((My & 1) == 0)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C330);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_15;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    v0[7] = sub_100037004(0xD000000000000011, 0x8000000100379B70, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Feature.FindMy.redStripe FF disabled.", v7, 0xCu);
    swift_arrayDestroy();
    goto LABEL_14;
  }
  if (sub_1002C890C())
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[22] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002DB840;
    return daemon.getter();
  }
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    v0[8] = sub_100037004(0xD000000000000011, 0x8000000100379B70, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v9, "%{public}s isFindingCapable == false.", v10, 0xCu);
    swift_arrayDestroy();
LABEL_14:
    swift_slowDealloc();
    swift_slowDealloc();
  }
LABEL_15:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11(0);
}

uint64_t sub_1002DB840(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 184) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 192) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002F32A8(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002DBA44;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002DBA44(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[14];
    return _swift_task_switch(sub_1002DC8CC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[27] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1002DBC24;
    uint64_t v7 = v3[16];
    return sub_100223900(v7);
  }
}

uint64_t sub_1002DBC24()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v4 = sub_1002DC998;
  }
  else {
    uint64_t v4 = sub_1002DBD7C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002DBD7C()
{
  uint64_t v37 = v0;
  uint64_t v1 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[18] + 48))(v1, 1, v0[17]) == 1)
  {
    sub_10000A520(v1, &qword_1003F29E0);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No OwnerSharedSecretRecord!", v5, 2u);
      swift_slowDealloc();
    }

    v0[32] = sub_1002ACC80();
    uint64_t v6 = swift_allocError();
    v0[33] = v6;
    *uint64_t v7 = 17;
    unint64_t v8 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    v0[34] = v8;
    uint64_t v9 = (void *)swift_task_alloc();
    v0[35] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1002DC65C;
    uint64_t v10 = v6;
    uint64_t v11 = v8;
  }
  else
  {
    sub_1002F2E64(v1, v0[21], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v13 = v0[20];
    uint64_t v12 = v0[21];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100044058(v14, (uint64_t)qword_10040C330);
    sub_1002F31E0(v12, v13, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[20];
    if (v17)
    {
      uint64_t v19 = v0[19];
      uint64_t v20 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446466;
      v0[12] = sub_100037004(0xD000000000000011, 0x8000000100379B70, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      sub_1002F31E0(v18, v19, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
      uint64_t v21 = String.init<A>(describing:)();
      v0[13] = sub_100037004(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002F3248(v18, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s found existing owner record: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002F3248(v0[20], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    }

    uint64_t v23 = (uint64_t *)(v0[21] + *(int *)(v0[17] + 24));
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_100022C64(*v23, v25);
    id v26 = sub_1003095E8(v24, v25, 0, 1);
    v0[29] = v26;
    sub_100044090(v24, v25);
    unint64_t v27 = v26;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      unint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 141558275;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2113;
      if (v26)
      {
        v0[11] = v27;
        BOOL v32 = v27;
      }
      else
      {
        v0[10] = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v31 = v26;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "ownerToken: %{private,mask.hash}@.", (uint8_t *)v30, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v28 = v27;
    }

    unint64_t v33 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    v0[30] = v33;
    uint64_t v34 = (void *)swift_task_alloc();
    v0[31] = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_1002DC40C;
    uint64_t v10 = 0;
    uint64_t v11 = v33;
  }
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373240, v10, v11);
}

uint64_t sub_1002DC40C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002DC56C, v1, 0);
}

uint64_t sub_1002DC56C()
{
  uint64_t v1 = v0[21];
  swift_release();
  sub_1002F3248(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  uint64_t v2 = v0[29];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_1002DC65C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1002DC7D8, v1, 0);
}

uint64_t sub_1002DC7D8()
{
  swift_allocError();
  void *v1 = 17;
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002DC8CC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002DC998()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002DCA64(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v29 = *v1;
  uint64_t v3 = type metadata accessor for UUID();
  __chkstk_darwin(v3 - 8);
  unint64_t v31 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Friend();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v27 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v30 = v1[16];
  id v26 = v1;
  uint64_t v28 = type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v24(v10, a1, v5);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  v23[1] = v11 | 7;
  uint64_t v13 = v7 + 7;
  unint64_t v14 = (v7 + 7 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  os_log_type_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  uint64_t v17 = v5;
  v23[0] = v5;
  v16(v15 + v12, v10, v5);
  uint64_t v18 = v29;
  *(void *)(v15 + v14) = v29;
  uint64_t v19 = v27;
  v24(v27, v25, v17);
  uint64_t v20 = (v11 + 16) & ~v11;
  uint64_t v21 = swift_allocObject();
  v16(v21 + v20, v19, v23[0]);
  *(void *)(v21 + ((v13 + v20) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1002DCD20()
{
  v1[3] = v0;
  sub_100044014(&qword_1003EFCD0);
  v1[4] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v1[5] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1002DCDE4;
  return daemon.getter();
}

uint64_t sub_1002DCDE4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 48) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002F32A8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1002DCFC0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002DCFC0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[8] = a1;
  v3[9] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[3];
    return _swift_task_switch(sub_1002DD744, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[10] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1002DD14C;
    uint64_t v7 = v3[4];
    return sub_100007CFC(v7);
  }
}

uint64_t sub_1002DD14C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002DD25C, v1, 0);
}

uint64_t sub_1002DD25C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 24);
  if (v4 == 1)
  {
    sub_10000A520(v1, &qword_1003EFCD0);
    uint64_t v6 = sub_1002DD570;
  }
  else
  {
    *(unsigned char *)(v0 + 88) = Device.isThisDevice.getter() & 1;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    uint64_t v6 = sub_1002DD384;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002DD384()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 88);
  if (v1 == 1)
  {
    swift_release();
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000019, 0x8000000100379C40, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s not Me device.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v1);
}

uint64_t sub_1002DD570()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000019, 0x8000000100379C40, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s not Me device.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_release();

  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5(0);
}

uint64_t sub_1002DD744()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1002DD7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[35] = a2;
  v3[36] = a3;
  v3[34] = a1;
  uint64_t v4 = type metadata accessor for MessagingOptions();
  v3[37] = v4;
  v3[38] = *(void *)(v4 - 8);
  v3[39] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003ECF50);
  v3[40] = v5;
  v3[41] = *(void *)(v5 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = type metadata accessor for FindingTokenEnvelopeV1();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v3[46] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FriendSharedSecretsRecord();
  v3[47] = v6;
  v3[48] = *(void *)(v6 - 8);
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  v3[52] = v7;
  v3[53] = *(void *)(v7 - 8);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v3[63] = v8;
  v3[64] = *(void *)(v8 - 8);
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[70] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Account();
  v3[71] = v9;
  v3[72] = *(void *)(v9 - 8);
  v3[73] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v3[76] = v10;
  v3[77] = *(void *)(v10 - 8);
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Handle();
  v3[81] = v11;
  v3[82] = *(void *)(v11 - 8);
  v3[83] = swift_task_alloc();
  v3[84] = swift_task_alloc();
  v3[85] = swift_task_alloc();
  v3[86] = swift_task_alloc();
  v3[87] = swift_task_alloc();
  v3[88] = swift_task_alloc();
  v3[89] = swift_task_alloc();
  return _swift_task_switch(sub_1002DDD28, 0, 0);
}

uint64_t sub_1002DDD28()
{
  unint64_t v14 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1002F32A8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if ((My & 1) == 0)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040C330);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    v0[7] = sub_100037004(0xD000000000000010, 0x8000000100379C20, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Feature.FindMy.redStripe FF disabled.", v8, 0xCu);
    swift_arrayDestroy();
    goto LABEL_14;
  }
  if (sub_1002C890C())
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[90] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002DE310;
    return sub_1002DCD20();
  }
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100044058(v9, (uint64_t)qword_10040C330);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    v0[8] = sub_100037004(0xD000000000000010, 0x8000000100379C20, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v10, "%{public}s isFindingCapable == false.", v11, 0xCu);
    swift_arrayDestroy();
LABEL_14:
    swift_slowDealloc();
    swift_slowDealloc();
  }
LABEL_15:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002DE310(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 1097) = a1 & 1;
    return _swift_task_switch(sub_1002DE668, 0, 0);
  }
}

uint64_t sub_1002DE668()
{
  uint64_t v31 = v0;
  if (*(unsigned char *)(v0 + 1097) != 1)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100044058(v18, (uint64_t)qword_10040C330);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)(v0 + 72) = sub_100037004(0xD000000000000010, 0x8000000100379C20, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s this device is NOT eligible to generate finding tokens.", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1002ACC80();
    swift_allocError();
    *unint64_t v22 = 20;
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 600);
  Friend.handle.getter();
  Handle.peerID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(*(void *)(v0 + 600), &qword_1003ECFB8);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 712);
    uint64_t v5 = *(void *)(v0 + 704);
    uint64_t v6 = *(void *)(v0 + 656);
    uint64_t v7 = *(void *)(v0 + 648);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 704);
    uint64_t v13 = *(void *)(v0 + 656);
    if (v11)
    {
      uint64_t v29 = *(void *)(v0 + 648);
      uint64_t v14 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446723;
      *(void *)(v0 + 80) = sub_100037004(0xD000000000000010, 0x8000000100379C20, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2160;
      *(void *)(v0 + 88) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2081;
      uint64_t v15 = Handle.identifier.getter();
      *(void *)(v0 + 96) = sub_100037004(v15, v16, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v17(v12, v29);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Missing peerID for handle %{private,mask.hash}s!", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v17(*(void *)(v0 + 704), *(void *)(v0 + 648));
    }

    uint64_t v24 = *(void *)(v0 + 712);
    uint64_t v25 = *(void *)(v0 + 648);
    sub_1002ACC80();
    swift_allocError();
    *id v26 = 15;
    swift_willThrow();
    v17(v24, v25);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 616) + 32))(*(void *)(v0 + 640), *(void *)(v0 + 600), *(void *)(v0 + 608));
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 728) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1002DEDA4;
  return daemon.getter();
}

uint64_t sub_1002DEDA4(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[92] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[93] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[94] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[95] = v6;
  uint64_t v7 = sub_1002F32A8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002DEF84;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002DEF84(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[96] = a1;
  v3[97] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    return _swift_task_switch(sub_1002E313C, 0, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v3[98] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1002DF12C;
    uint64_t v6 = v3[70];
    return sub_1000078BC(v6);
  }
}

uint64_t sub_1002DF12C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002DF228, 0, 0);
}

uint64_t sub_1002DF228()
{
  v100 = v0;
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C330);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v99[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      v0[13] = sub_100037004(0xD000000000000010, 0x8000000100379C20, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing primary account to send friend token!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v8 = v0[89];
    uint64_t v9 = v0[82];
    uint64_t v10 = v0[81];
    uint64_t v11 = v0[80];
    uint64_t v12 = v0[77];
    uint64_t v13 = v0[76];
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v14 = 16;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v73 = (uint64_t (*)(void))v0[1];
    return v73();
  }
  uint64_t v15 = v0[63];
  uint64_t v16 = v0[64];
  uint64_t v17 = v0[62];
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[73], v3, v2);
  Friend.createdAt.getter();
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v0[99] = v18;
  v0[100] = (v16 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v18(v17, 1, v15) == 1)
  {
    sub_10000A520(v0[62], (uint64_t *)&unk_1003EE800);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v19 = v0[89];
    uint64_t v20 = v0[87];
    uint64_t v21 = v0[82];
    uint64_t v22 = v0[81];
    uint64_t v23 = type metadata accessor for Logger();
    sub_100044058(v23, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = v0[87];
    uint64_t v28 = v0[82];
    if (v26)
    {
      uint64_t v96 = v0[81];
      uint64_t v29 = swift_slowAlloc();
      v99[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446723;
      v0[14] = sub_100037004(0xD000000000000010, 0x8000000100379C20, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2160;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2081;
      uint64_t v30 = Handle.identifier.getter();
      v0[16] = sub_100037004(v30, v31, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v93 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v93(v27, v96);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s Missing relationship date: %{private,mask.hash}s!", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v93 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v93(v0[87], v0[81]);
    }

    uint64_t v90 = v0[81];
    uint64_t v92 = v0[89];
    uint64_t v66 = v0[80];
    uint64_t v67 = v0[77];
    uint64_t v68 = v0[76];
    uint64_t v69 = v0[73];
    uint64_t v70 = v0[72];
    uint64_t v71 = v0[71];
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v72 = 15;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    v93(v92, v90);
    goto LABEL_18;
  }
  uint64_t v32 = v0[69];
  uint64_t v33 = v0[63];
  uint64_t v34 = v0[64];
  uint64_t v35 = v0[62];
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
  v0[101] = v36;
  v0[102] = (v34 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v36(v32, v35, v33);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v37 = v0[80];
  uint64_t v38 = v0[79];
  uint64_t v39 = v0[77];
  uint64_t v40 = v0[76];
  uint64_t v94 = v0[68];
  uint64_t v97 = v0[69];
  uint64_t v41 = v0[64];
  uint64_t v89 = v0[55];
  uint64_t v91 = v0[63];
  uint64_t v43 = v0[52];
  uint64_t v42 = v0[53];
  uint64_t v44 = v0[35];
  uint64_t v45 = type metadata accessor for Logger();
  v0[103] = sub_100044058(v45, (uint64_t)qword_10040C330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v37, v40);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v0[104] = v46;
  v0[105] = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v46(v89, v44, v43);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  v0[106] = v47;
  v0[107] = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v47(v94, v97, v91);
  os_log_type_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = v0[86];
    v98 = v48;
    uint64_t v51 = v0[82];
    uint64_t v83 = v0[81];
    os_log_type_t v95 = v49;
    uint64_t v52 = v0[79];
    uint64_t v53 = v0[77];
    uint64_t v54 = v0[76];
    uint64_t v87 = v0[68];
    uint64_t v88 = v0[64];
    uint64_t v86 = v0[63];
    uint64_t v82 = v0[55];
    uint64_t v84 = v0[53];
    uint64_t v85 = v0[52];
    uint64_t v55 = swift_slowAlloc();
    v99[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136446979;
    sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[31] = sub_100037004(v56, v57, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v58(v52, v54);
    *(_WORD *)(v55 + 12) = 2160;
    v0[32] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 22) = 2081;
    Friend.handle.getter();
    uint64_t v59 = Handle.identifier.getter();
    unint64_t v61 = v60;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v83);
    v0[33] = sub_100037004(v59, v61, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v62 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v62(v82, v85);
    *(_WORD *)(v55 + 32) = 2082;
    sub_1002F32A8(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_100037004(v63, v64, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v65(v87, v86);
    _os_log_impl((void *)&_mh_execute_header, v98, v95, "Adding peer %{public}s %{private,mask.hash}s baseDate: %{public}s", (uint8_t *)v55, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v75 = v0[68];
    uint64_t v76 = v0[63];
    uint64_t v77 = v0[64];
    uint64_t v78 = v0[55];
    uint64_t v80 = v0[52];
    uint64_t v79 = v0[53];
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0[77] + 8);
    v58(v0[79], v0[76]);
    v62 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
    v62(v78, v80);
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v65(v75, v76);
  }
  v0[110] = v65;
  v0[109] = v58;
  v0[108] = v62;
  v81 = (void *)swift_task_alloc();
  v0[111] = v81;
  void *v81 = v0;
  v81[1] = sub_1002DFECC;
  return daemon.getter();
}

uint64_t sub_1002DFECC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 896) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 904) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1002F32A8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002E0080;
  uint64_t v8 = *(void *)(v2 + 760);
  uint64_t v9 = *(void *)(v2 + 752);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002E0080(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 912) = a1;
  *(void *)(v3 + 920) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    uint64_t v4 = sub_1002E33E4;
  }
  else {
    uint64_t v4 = sub_1002E01C0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002E01C0()
{
  uint64_t v1 = v0[114];
  uint64_t v2 = v0[36];
  uint64_t v3 = swift_allocObject();
  v0[116] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[117] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002E02C0;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1002E02C0()
{
  *(void *)(*(void *)v1 + 944) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1002E36F0;
  }
  else {
    uint64_t v2 = sub_1002E03F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002E03F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[119] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E0494;
  uint64_t v2 = v0[80];
  uint64_t v3 = v0[46];
  return sub_1000F6B40(v3, v2);
}

uint64_t sub_1002E0494()
{
  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002E11F0;
  }
  else {
    uint64_t v2 = sub_1002E05A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002E05A8()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 384) + 48))(v1, 1, *(void *)(v0 + 376)) == 1)
  {
    uint64_t v2 = &qword_1003EEEB8;
    uint64_t v3 = v1;
LABEL_3:
    sub_10000A520(v3, v2);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 408);
  sub_1002F2E64(v1, v4, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  sub_1002F31E0(v4, v5, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 400);
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v11 = swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    *(void *)(v0 + 232) = sub_100037004(0xD000000000000010, 0x8000000100379C20, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    sub_1002F31E0(v9, v10, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v0 + 240) = sub_100037004(v12, v13, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F3248(v9, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s found existing peer record %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002F3248(v9, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  }

  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 488);
  uint64_t v17 = *(void *)(v0 + 408) + *(int *)(*(void *)(v0 + 376) + 36);
  sub_100013210(v17, v16, (uint64_t *)&unk_1003EE800);
  LODWORD(v15) = v14(v16, 1, v15);
  sub_10000A520(v16, (uint64_t *)&unk_1003EE800);
  if (v15 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 408);
  }
  else
  {
    uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
    uint64_t v25 = *(void *)(v0 + 504);
    uint64_t v26 = *(void *)(v0 + 480);
    sub_100013210(v17, v26, (uint64_t *)&unk_1003EE800);
    if (v24(v26, 1, v25) == 1)
    {
      uint64_t v27 = *(void *)(v0 + 480);
      sub_1002F3248(*(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      uint64_t v2 = (uint64_t *)&unk_1003EE800;
      uint64_t v3 = v27;
      goto LABEL_3;
    }
    (*(void (**)(void, void, void))(v0 + 808))(*(void *)(v0 + 536), *(void *)(v0 + 480), *(void *)(v0 + 504));
    if ((static Date.> infix(_:_:)() & 1) == 0)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 656) + 16))(*(void *)(v0 + 680), *(void *)(v0 + 712), *(void *)(v0 + 648));
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v55 = *(void *)(v0 + 680);
      uint64_t v56 = *(void *)(v0 + 656);
      if (v54)
      {
        uint64_t v82 = *(void *)(v0 + 648);
        uint64_t v57 = swift_slowAlloc();
        v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136446723;
        *(void *)(v0 + 200) = sub_100037004(0xD000000000000010, 0x8000000100379C20, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2160;
        *(void *)(v0 + 216) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 22) = 2081;
        uint64_t v58 = Handle.identifier.getter();
        *(void *)(v0 + 224) = sub_100037004(v58, v59, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v60 = v82;
        uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v83(v55, v60);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s Peer already exists: %{private,mask.hash}s!", (uint8_t *)v57, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v83(v55, *(void *)(v0 + 648));
      }

      unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v79 = *(void *)(v0 + 712);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
      uint64_t v77 = *(void *)(v0 + 648);
      uint64_t v73 = *(void *)(v0 + 640);
      uint64_t v72 = *(void *)(v0 + 608);
      uint64_t v62 = *(void *)(v0 + 576);
      uint64_t v68 = *(void *)(v0 + 568);
      uint64_t v69 = *(void *)(v0 + 584);
      uint64_t v67 = *(void *)(v0 + 552);
      uint64_t v63 = *(void *)(v0 + 536);
      uint64_t v64 = *(void *)(v0 + 504);
      uint64_t v65 = *(void *)(v0 + 408);
      sub_1002ACC80();
      swift_allocError();
      *uint64_t v66 = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      v61(v63, v64);
      sub_1002F3248(v65, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      v61(v67, v64);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v69, v68);
      v75(v73, v72);
      v83(v79, v77);
      goto LABEL_24;
    }
    uint64_t v51 = *(void *)(v0 + 408);
    (*(void (**)(void, void))(v0 + 880))(*(void *)(v0 + 536), *(void *)(v0 + 504));
    uint64_t v18 = v51;
  }
  sub_1002F3248(v18, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
LABEL_10:
  uint64_t v19 = static Data.random(bytes:)();
  *(void *)(v0 + 968) = v19;
  *(void *)(v0 + 976) = v20;
  uint64_t v21 = v19;
  unint64_t v22 = v20;
  switch(v20 >> 62)
  {
    case 1uLL:
      LODWORD(v23) = HIDWORD(v19) - v19;
      if (__OFSUB__(HIDWORD(v19), v19))
      {
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x1002E11E0);
      }
      uint64_t v23 = (int)v23;
LABEL_17:
      if (v23 == 32)
      {
        unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 848);
        uint64_t v32 = *(void *)(v0 + 552);
        uint64_t v33 = *(void *)(v0 + 504);
        uint64_t v34 = *(void *)(v0 + 464);
        uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 512) + 56);
        v35(*(void *)(v0 + 472), 1, 1, v33);
        v31(v34, v32, v33);
        v35(v34, 0, 1, v33);
        sub_100022C64(v21, v22);
        uint64_t v36 = (void *)swift_task_alloc();
        *(void *)(v0 + 984) = v36;
        *uint64_t v36 = v0;
        v36[1] = sub_1002E150C;
        uint64_t v37 = *(void *)(v0 + 640);
        uint64_t v39 = *(void *)(v0 + 464);
        uint64_t v38 = *(void *)(v0 + 472);
        return sub_1002E4678(v37, 0, 0xF000000000000000, v38, v21, v22, v39);
      }
LABEL_21:
      sub_100044090(v19, v20);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136446210;
        *(void *)(v0 + 136) = sub_100037004(0xD000000000000010, 0x8000000100379C20, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s Unable to generate SharedSecretKey!", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v81 = *(void *)(v0 + 712);
      uint64_t v44 = *(void *)(v0 + 656);
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
      uint64_t v80 = *(void *)(v0 + 648);
      uint64_t v74 = *(void *)(v0 + 608);
      uint64_t v76 = *(void *)(v0 + 640);
      uint64_t v70 = *(void *)(v0 + 584);
      uint64_t v45 = *(void *)(v0 + 576);
      uint64_t v46 = *(void *)(v0 + 568);
      uint64_t v47 = *(void *)(v0 + 552);
      uint64_t v48 = *(void *)(v0 + 504);
      sub_1002ACC80();
      swift_allocError();
      void *v49 = 21;
      swift_willThrow();
      swift_release();
      swift_release();
      v71(v47, v48);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v70, v46);
      v78(v76, v74);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v81, v80);
      break;
    case 2uLL:
      uint64_t v29 = *(void *)(v19 + 16);
      uint64_t v28 = *(void *)(v19 + 24);
      BOOL v30 = __OFSUB__(v28, v29);
      uint64_t v23 = v28 - v29;
      if (!v30) {
        goto LABEL_17;
      }
      goto LABEL_34;
    case 3uLL:
      goto LABEL_21;
    default:
      uint64_t v23 = BYTE6(v20);
      goto LABEL_17;
  }
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
  return v50();
}

uint64_t sub_1002E11F0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v14 = v0[89];
  uint64_t v2 = v0[82];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v13 = v0[81];
  uint64_t v10 = v0[76];
  uint64_t v11 = v0[80];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[63];
  swift_release();
  swift_release();
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v12(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002E150C()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[124] = v0;
  swift_task_dealloc();
  unint64_t v4 = v2[122];
  uint64_t v5 = v2[121];
  uint64_t v6 = v2[59];
  uint64_t v7 = v2[58];
  if (v0)
  {
    sub_100044090(v5, v4);
    sub_10000A520(v7, (uint64_t *)&unk_1003EE800);
    sub_10000A520(v6, (uint64_t *)&unk_1003EE800);
    return _swift_task_switch(sub_1002E3A0C, 0, 0);
  }
  else
  {
    sub_100044090(v5, v4);
    sub_10000A520(v7, (uint64_t *)&unk_1003EE800);
    sub_10000A520(v6, (uint64_t *)&unk_1003EE800);
    BOOL v8 = (void *)swift_task_alloc();
    v2[125] = v8;
    *BOOL v8 = v3;
    v8[1] = sub_1002E1728;
    return daemon.getter();
  }
}

uint64_t sub_1002E1728(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1008) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1016) = v5;
  uint64_t v6 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v7 = sub_1002F32A8(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v5 = v4;
  v5[1] = sub_1002E18DC;
  uint64_t v8 = *(void *)(v2 + 760);
  uint64_t v9 = *(void *)(v2 + 752);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002E18DC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1024) = a1;
  *(void *)(v3 + 1032) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    uint64_t v4 = sub_1002E3D44;
  }
  else {
    uint64_t v4 = sub_1002E1A1C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002E1A1C()
{
  uint64_t v79 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  uint64_t v2 = *(void *)(v0 + 712);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 656);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 432);
  uint64_t v7 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 280);
  Swift::String v9 = Account.dsidBase64EncodedString()();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1040) = v10;
  *(void *)(v0 + 1048) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v11 = v3;
  object = v9._object;
  v10(v11, v2, v5);
  v1(v6, v8, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v63 = v13;
    uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
    uint64_t v15 = *(void *)(v0 + 672);
    uint64_t v16 = *(void *)(v0 + 656);
    uint64_t v68 = *(void *)(v0 + 504);
    uint64_t v17 = *(void *)(v0 + 456);
    uint64_t v65 = *(void *)(v0 + 648);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(void *)(v0 + 160) = 1752392040;
    v78[0] = v19;
    *(_DWORD *)uint64_t v18 = 141559043;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    uint64_t v20 = Handle.identifier.getter();
    *(void *)(v0 + 168) = sub_100037004(v20, v21, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v15, v65);
    *(_WORD *)(v18 + 22) = 2050;
    Friend.expiry.getter();
    os_log_type_t v72 = v14;
    if (v69(v17, 1, v68) == 1)
    {
      uint64_t v23 = 0x4143C68000000000;
    }
    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v29 = *(void *)(v0 + 528);
      uint64_t v30 = *(void *)(v0 + 520);
      uint64_t v31 = *(void *)(v0 + 504);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 808))(v29, *(void *)(v0 + 456), v31);
      static Date.trustedNow.getter(v30);
      Date.timeIntervalSince(_:)();
      uint64_t v23 = v32;
      v28(v30, v31);
      v28(v29, v31);
    }
    object = v9._object;
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
    uint64_t v34 = *(void *)(v0 + 432);
    uint64_t v35 = *(void *)(v0 + 416);
    *(void *)(v0 + 176) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33(v34, v35);
    *(_WORD *)(v18 + 32) = 2160;
    *(void *)(v0 + 184) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 42) = 2081;
    swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    *(void *)(v0 + 192) = sub_100037004(v9._countAndFlagsBits, (unint64_t)v9._object, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v63, v72, "Sending shared secret to %{private,mask.hash}s. TTL: %{public}f\nfrom my serverID: %{private,mask.hash}s over IDS.", (uint8_t *)v18, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
    uint64_t v25 = *(void *)(v0 + 432);
    uint64_t v26 = *(void *)(v0 + 416);
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 656) + 8);
    v22(*(void *)(v0 + 672), *(void *)(v0 + 648));
    v24(v25, v26);
    swift_bridgeObjectRelease_n();

    uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  }
  *(void *)(v0 + 1056) = v22;
  uint64_t v76 = v22;
  uint64_t v77 = *(void *)(v0 + 1032);
  unint64_t v36 = *(void *)(v0 + 976);
  uint64_t v37 = *(void *)(v0 + 968);
  uint64_t v38 = *(void *)(v0 + 352);
  uint64_t v39 = *(uint64_t **)(v0 + 360);
  uint64_t v40 = *(void *)(v0 + 344);
  (*(void (**)(char *, void, void))(v0 + 848))((char *)v39 + *(int *)(v40 + 20), *(void *)(v0 + 552), *(void *)(v0 + 504));
  *uint64_t v39 = countAndFlagsBits;
  v39[1] = (uint64_t)object;
  uint64_t v41 = (uint64_t *)((char *)v39 + *(int *)(v40 + 24));
  *uint64_t v41 = v37;
  v41[1] = v36;
  *(unsigned char *)(v0 + 1096) = 1;
  sub_1002F31E0((uint64_t)v39, v38, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  sub_100022C64(v37, v36);
  sub_100072920();
  sub_1002F32A8(&qword_1003F4528, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
  sub_1002F32A8(&qword_1003F4530, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
  Message.init<A>(type:version:payload:)();
  if (v77)
  {
    unint64_t v42 = *(void *)(v0 + 976);
    uint64_t v43 = *(void *)(v0 + 968);
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
    uint64_t v74 = *(void *)(v0 + 648);
    uint64_t v75 = *(void *)(v0 + 712);
    uint64_t v70 = *(void *)(v0 + 608);
    uint64_t v71 = *(void *)(v0 + 640);
    uint64_t v44 = *(void *)(v0 + 576);
    uint64_t v64 = *(void *)(v0 + 568);
    uint64_t v66 = *(void *)(v0 + 584);
    uint64_t v45 = *(void *)(v0 + 552);
    uint64_t v46 = *(void *)(v0 + 504);
    uint64_t v47 = *(void *)(v0 + 360);
    swift_release();
    swift_release();
    sub_100044090(v43, v42);
    swift_release();
    sub_1002F3248(v47, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    v67(v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v66, v64);
    v73(v71, v70);
    v76(v75, v74);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  else
  {
    sub_100044014(&qword_1003ECFC0);
    type metadata accessor for Destination();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
    char v50 = Handle.isPhoneNumber.getter();
    Handle.identifier.getter();
    if (v50) {
      Destination.init(phoneNumber:)();
    }
    else {
      Destination.init(email:)();
    }
    uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 792);
    uint64_t v52 = *(void *)(v0 + 504);
    uint64_t v53 = *(void *)(v0 + 448);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 616) + 56))(*(void *)(v0 + 592), 1, 1, *(void *)(v0 + 608));
    Friend.expiry.getter();
    if (v51(v53, 1, v52) != 1)
    {
      BOOL v54 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v55 = *(void *)(v0 + 528);
      uint64_t v56 = *(void *)(v0 + 520);
      uint64_t v57 = *(void *)(v0 + 504);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 808))(v55, *(void *)(v0 + 448), v57);
      static Date.trustedNow.getter(v56);
      Date.timeIntervalSince(_:)();
      v54(v56, v57);
      v54(v55, v57);
    }
    uint64_t v58 = *(void *)(v0 + 1024);
    sub_100044014(&qword_1003F4368);
    uint64_t v59 = type metadata accessor for MessagingCapability();
    uint64_t v60 = *(void *)(v59 - 8);
    unint64_t v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_100367D70;
    (*(void (**)(unint64_t, void, uint64_t))(v60 + 104))(v62 + v61, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v59);
    sub_100179698(v62);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
    return _swift_task_switch(sub_1002E2574, v58, 0);
  }
}

uint64_t sub_1002E2574()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[133] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E261C;
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[39];
  return InternetMessaging.send(message:messageOptions:)(v2, v3, v4);
}

uint64_t sub_1002E261C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1072) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002E2968;
  }
  else
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[109];
    uint64_t v5 = v2[78];
    uint64_t v6 = v2[76];
    v2[135] = (v2[77] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v4(v5, v6);
    uint64_t v3 = sub_1002E275C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002E275C()
{
  uint64_t v15 = v0;
  (*(void (**)(void, void, void))(v0 + 1040))(*(void *)(v0 + 664), *(void *)(v0 + 712), *(void *)(v0 + 648));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 664);
    uint64_t v11 = *(void *)(v0 + 656);
    uint64_t v12 = *(void *)(v0 + 648);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 144) = 1752392040;
    uint64_t v14 = v5;
    *(_DWORD *)uint64_t v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v6 = Handle.identifier.getter();
    *(void *)(v0 + 152) = sub_100037004(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v11 + 8;
    v13(v3, v12);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent finding token over IDS for %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 656) + 8;
    (*(void (**)(void, void))(v0 + 1056))(*(void *)(v0 + 664), *(void *)(v0 + 648));
  }

  *(void *)(v0 + 1088) = v8;
  uint64_t v9 = *(void *)(v0 + 272);
  return _swift_task_switch(sub_1002E2D2C, v9, 0);
}

uint64_t sub_1002E2968()
{
  uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[132];
  uint64_t v1 = v0[121];
  unint64_t v11 = v0[122];
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v21 = v0[81];
  uint64_t v22 = v0[89];
  uint64_t v18 = v0[76];
  uint64_t v19 = v0[80];
  uint64_t v2 = v0[72];
  uint64_t v15 = v0[71];
  uint64_t v16 = v0[73];
  uint64_t v13 = v0[63];
  uint64_t v14 = v0[69];
  uint64_t v12 = v0[45];
  uint64_t v3 = v0[41];
  uint64_t v4 = v0[42];
  uint64_t v5 = v0[39];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[38];
  swift_release();
  swift_release();
  sub_100044090(v1, v11);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v6);
  sub_1002F3248(v12, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  v17(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v16, v15);
  v20(v19, v18);
  v23(v22, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002E2D2C()
{
  sub_100313B7C();
  return _swift_task_switch(sub_1002E2D94, 0, 0);
}

uint64_t sub_1002E2D94()
{
  uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[132];
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v22 = v0[89];
  uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v21 = v0[81];
  uint64_t v18 = v0[76];
  uint64_t v19 = v0[80];
  uint64_t v3 = v0[72];
  uint64_t v15 = v0[71];
  uint64_t v16 = v0[73];
  uint64_t v13 = v0[63];
  uint64_t v14 = v0[69];
  uint64_t v12 = v0[45];
  uint64_t v4 = v0[41];
  uint64_t v11 = v0[42];
  uint64_t v5 = v0[39];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[38];
  swift_release();
  swift_release();
  sub_100044090(v2, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v6);
  sub_1002F3248(v12, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  v17(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  v20(v19, v18);
  v23(v22, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002E313C()
{
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[81];
  (*(void (**)(void, void))(v0[77] + 8))(v0[80], v0[76]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002E33E4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v14 = v0[89];
  uint64_t v2 = v0[82];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v13 = v0[81];
  uint64_t v10 = v0[76];
  uint64_t v11 = v0[80];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[63];
  swift_release();
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v12(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002E36F0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v14 = v0[89];
  uint64_t v2 = v0[82];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v13 = v0[81];
  uint64_t v10 = v0[76];
  uint64_t v11 = v0[80];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[63];
  swift_release();
  swift_release();
  v1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v12(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002E3A0C()
{
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  uint64_t v16 = v0[89];
  uint64_t v3 = v0[82];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v15 = v0[81];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v12 = v0[76];
  uint64_t v13 = v0[80];
  uint64_t v10 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[63];
  swift_release();
  sub_100044090(v2, v1);
  swift_release();
  v11(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v5);
  v14(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002E3D44()
{
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  uint64_t v16 = v0[89];
  uint64_t v3 = v0[82];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[109];
  uint64_t v15 = v0[81];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[110];
  uint64_t v12 = v0[76];
  uint64_t v13 = v0[80];
  uint64_t v10 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  uint64_t v6 = v0[69];
  uint64_t v7 = v0[63];
  swift_release();
  sub_100044090(v2, v1);
  swift_release();
  v11(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v5);
  v14(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002E407C(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1002E413C, 0, 0);
}

uint64_t sub_1002E413C()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000010, 0x8000000100379C20, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_1002E431C, v5, 0);
}

uint64_t sub_1002E431C()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_1002E43CC;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_1002E43CC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E0570;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_1002E4500;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E4500()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000010, 0x8000000100379C20, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002E4678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  v8[15] = *v7;
  uint64_t v9 = type metadata accessor for CloudKitCoordinator.Database();
  v8[16] = v9;
  v8[17] = *(void *)(v9 - 8);
  v8[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[19] = v10;
  v8[20] = *(void *)(v10 - 8);
  v8[21] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v8[22] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for FriendSharedSecretsRecord();
  v8[23] = v11;
  v8[24] = *(void *)(v11 - 8);
  v8[25] = swift_task_alloc();
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  uint64_t v12 = (void *)swift_task_alloc();
  v8[34] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_1002E4910;
  return daemon.getter();
}

uint64_t sub_1002E4910(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 280) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 288) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002F32A8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002E4AEC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002E4AEC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[14];
    uint64_t v5 = sub_1002E6708;
  }
  else
  {
    uint64_t v6 = v3[14];
    swift_release();
    uint64_t v5 = sub_1002E4C14;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002E4C14()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[15];
  uint64_t v3 = swift_allocObject();
  v0[39] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[40] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002E4D14;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1002E4D14()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = sub_1002E6810;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_release();
    uint64_t v4 = sub_1002E4E3C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E4E3C()
{
  return _swift_task_switch(sub_1002E4E58, 0, 0);
}

uint64_t sub_1002E4E58()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[42] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E4EF8;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[7];
  return sub_1000F6B40(v2, v3);
}

uint64_t sub_1002E4EF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v4 = sub_1002E54F4;
  }
  else {
    uint64_t v4 = sub_1002E5024;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E5024()
{
  uint64_t v53 = v0;
  uint64_t v1 = (int *)v0[23];
  uint64_t v2 = v0[22];
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v0[24] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v50 = v0[37];
    uint64_t v3 = v0[27];
    uint64_t v5 = v0[19];
    uint64_t v4 = v0[20];
    unint64_t v47 = v0[12];
    uint64_t v6 = v0[10];
    uint64_t v43 = v0[13];
    uint64_t v45 = v0[11];
    uint64_t v8 = v0[8];
    unint64_t v7 = v0[9];
    uint64_t v9 = v0[7];
    sub_10000A520(v2, &qword_1003EEEB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v9, v5);
    sub_100013210(v6, v3 + v1[7], (uint64_t *)&unk_1003EE800);
    sub_100013210(v43, v3 + v1[9], (uint64_t *)&unk_1003EE800);
    *(unsigned char *)(v3 + v1[5]) = 1;
    uint64_t v10 = (uint64_t *)(v3 + v1[6]);
    *uint64_t v10 = v8;
    v10[1] = v7;
    uint64_t v11 = (uint64_t *)(v3 + v1[8]);
    uint64_t *v11 = v45;
    v11[1] = v47;
    uint64_t v12 = swift_task_alloc();
    v0[47] = v12;
    *(void *)(v12 + 16) = v3;
    sub_1000287E4(v8, v7);
    sub_1000287E4(v45, v47);
    uint64_t v13 = sub_1002E5A40;
    uint64_t v14 = v50;
  }
  else
  {
    sub_1002F2E64(v2, v0[30], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v15 = v0[7];
    uint64_t v17 = v0[29];
    uint64_t v16 = v0[30];
    uint64_t v19 = v0[20];
    uint64_t v18 = v0[21];
    uint64_t v20 = v0[19];
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040C330);
    sub_1002F31E0(v16, v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v15, v20);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = v0[29];
    if (v24)
    {
      uint64_t v26 = v0[28];
      uint64_t v46 = v0[21];
      uint64_t v48 = v0[20];
      uint64_t v44 = v0[19];
      uint64_t v27 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      sub_1002F31E0(v25, v26, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      uint64_t v28 = String.init<A>(describing:)();
      v0[5] = sub_100037004(v28, v29, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002F3248(v25, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      *(_WORD *)(v27 + 12) = 2082;
      sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_100037004(v30, v31, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v44);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found existing %s for %{public}s.", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v33 = v0[20];
      uint64_t v32 = v0[21];
      uint64_t v34 = v0[19];
      sub_1002F3248(v0[29], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }

    uint64_t v35 = v0[37];
    uint64_t v36 = v0[30];
    uint64_t v37 = v0[15];
    uint64_t v38 = v0[11];
    long long v49 = *(_OWORD *)(v0 + 9);
    long long v51 = *((_OWORD *)v0 + 6);
    uint64_t v40 = v0[7];
    uint64_t v39 = v0[8];
    uint64_t v41 = swift_task_alloc();
    v0[44] = v41;
    *(void *)(v41 + 16) = v36;
    *(void *)(v41 + 24) = v39;
    *(_OWORD *)(v41 + 32) = v49;
    *(void *)(v41 + 48) = v40;
    *(void *)(v41 + 56) = v38;
    *(_OWORD *)(v41 + 64) = v51;
    *(void *)(v41 + 80) = v37;
    uint64_t v13 = sub_1002E55FC;
    uint64_t v14 = v35;
  }
  return _swift_task_switch(v13, v14, 0);
}

uint64_t sub_1002E54F4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E55FC()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[45] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E56C4;
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[32];
  return v5(v3, &unk_1003F44F8, v2);
}

uint64_t sub_1002E56C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = sub_1002E58AC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_task_dealloc();
    uint64_t v4 = sub_1002E57EC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E57EC()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  sub_1002F3248(v0[30], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  sub_100013B50(v1, v2, &qword_1003EF468);
  uint64_t v3 = v0[37];
  v0[50] = v3;
  (*(void (**)(void, void, void))(v0[17] + 104))(v0[18], enum case for CloudKitCoordinator.Database.private(_:), v0[16]);
  return _swift_task_switch(sub_1002E612C, v3, 0);
}

uint64_t sub_1002E58AC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E5918, v1, 0);
}

uint64_t sub_1002E5918()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  sub_1002F3248(v1, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002E5A40()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[48] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E5B08;
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[31];
  return v5(v3, &unk_1003F44E8, v2);
}

uint64_t sub_1002E5B08()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = sub_1002E5C30;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_task_dealloc();
    uint64_t v4 = sub_1002E5DC4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E5C30()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E5C9C, v1, 0);
}

uint64_t sub_1002E5C9C()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_release();
  sub_1002F3248(v1, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002E5DC4()
{
  uint64_t v19 = v0;
  sub_100013B50(v0[31], v0[33], &qword_1003EF468);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100044058(v4, (uint64_t)qword_10040C330);
  sub_1002F31E0(v2, v1, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  sub_1002F31E0(v2, v3, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[28];
    uint64_t v8 = v0[26];
    uint64_t v17 = v0[25];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_1002F31E0(v8, v7, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v10 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F3248(v8, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    *(_WORD *)(v9 + 12) = 2082;
    sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F3248(v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Saving new %s %{public}s to CK.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v14 = v0[25];
    sub_1002F3248(v0[26], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    sub_1002F3248(v14, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  }

  sub_1002F3248(v0[27], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v15 = v0[37];
  v0[50] = v15;
  (*(void (**)(void, void, void))(v0[17] + 104))(v0[18], enum case for CloudKitCoordinator.Database.private(_:), v0[16]);
  return _swift_task_switch(sub_1002E612C, v15, 0);
}

uint64_t sub_1002E612C()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E61E0;
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[18];
  return v5(v2, v3);
}

uint64_t sub_1002E61E0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[50];
    uint64_t v4 = sub_1002E6318;
  }
  else
  {
    uint64_t v5 = v2[14];
    (*(void (**)(void, void))(v2[17] + 8))(v2[18], v2[16]);
    uint64_t v4 = sub_1002E64B0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E6318()
{
  uint64_t v1 = v0[14];
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
  return _swift_task_switch(sub_1002E6394, v1, 0);
}

uint64_t sub_1002E6394()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_release();
  sub_10000A520(v1, &qword_1003EF468);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002E64B0()
{
  uint64_t v10 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[33];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[2] = sub_100037004(0xD000000000000060, 0x8000000100379BB0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s completed!", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_release();
  sub_10000A520(v5, &qword_1003EF468);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002E6708()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E6810()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E6924(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = a3;
  *(void *)(v4 + 88) = a4;
  *(unsigned char *)(v4 + 192) = a2;
  *(void *)(v4 + 72) = a1;
  uint64_t v5 = type metadata accessor for Handle();
  *(void *)(v4 + 96) = v5;
  *(void *)(v4 + 104) = *(void *)(v5 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Friend();
  *(void *)(v4 + 120) = v6;
  *(void *)(v4 + 128) = *(void *)(v6 - 8);
  *(void *)(v4 + 136) = swift_task_alloc();
  *(void *)(v4 + 144) = swift_task_alloc();
  return _swift_task_switch(sub_1002E6A58, 0, 0);
}

uint64_t sub_1002E6A58()
{
  uint64_t v54 = v0;
  if (*(unsigned char *)(v0 + 192))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 128);
    if (v24)
    {
      os_log_type_t v51 = v23;
      uint64_t v44 = *(void *)(v0 + 120);
      loga = v22;
      uint64_t v26 = *(void *)(v0 + 104);
      uint64_t v27 = *(void *)(v0 + 112);
      uint64_t v42 = *(void *)(v0 + 136);
      uint64_t v43 = *(void *)(v0 + 96);
      uint64_t v47 = *(void *)(v0 + 72);
      uint64_t v28 = swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136446979;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000010, 0x8000000100379C20, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2160;
      *(void *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v29 = Handle.identifier.getter();
      unint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v43);
      *(void *)(v0 + 32) = sub_100037004(v29, v31, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v42, v44);
      *(_WORD *)(v28 + 32) = 2114;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v45 = v32;
      sub_1001D5B10(v47, 1);
      sub_1001D5B10(v47, 1);
      _os_log_impl((void *)&_mh_execute_header, loga, v51, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v28, 0x2Au);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v36 = *(void *)(v0 + 72);
      (*(void (**)(void, void))(v25 + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
      sub_1001D5B10(v36, 1);
      sub_1001D5B10(v36, 1);
    }
    uint64_t v37 = *(void *)(v0 + 72);
    sub_1002ACC80();
    uint64_t v38 = swift_allocError();
    *(void *)(v0 + 168) = v38;
    *uint64_t v39 = v37;
    swift_errorRetain();
    unint64_t v33 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 176) = v33;
    uint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_1002E7318;
    uint64_t v35 = v38;
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v2 = *(void *)(v0 + 120);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 128);
    if (v8)
    {
      os_log_type_t type = v7;
      os_log_t log = v6;
      uint64_t v50 = *(void *)(v0 + 120);
      uint64_t v11 = *(void *)(v0 + 104);
      uint64_t v12 = *(void *)(v0 + 112);
      uint64_t v46 = *(void *)(v0 + 96);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446723;
      *(void *)(v0 + 48) = sub_100037004(0xD000000000000010, 0x8000000100379C20, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2160;
      *(void *)(v0 + 56) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v14 = Handle.identifier.getter();
      unint64_t v16 = v15;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v46);
      *(void *)(v0 + 64) = sub_100037004(v14, v16, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v50);
      uint64_t v6 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 144), *(void *)(v0 + 120));
    }

    unint64_t v33 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 152) = v33;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_1002E71AC;
    uint64_t v35 = 0;
  }
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373440, v35, v33);
}

uint64_t sub_1002E71AC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002E7318()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1002E744C, 0, 0);
}

uint64_t sub_1002E744C()
{
  sub_1001D5B10(*(void *)(v0 + 72), 1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E74CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = type metadata accessor for CloudKitCoordinator.Database();
  v4[20] = v5;
  v4[21] = *(void *)(v5 - 8);
  v4[22] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v4[23] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v4[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FriendSharedSecretsRecord();
  v4[25] = v6;
  v4[26] = *(void *)(v6 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v4[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[32] = v7;
  v4[33] = *(void *)(v7 - 8);
  v4[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v4[35] = v8;
  v4[36] = *(void *)(v8 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_1002E776C, 0, 0);
}

uint64_t sub_1002E776C()
{
  unint64_t v31 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1002F32A8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if (My)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[16];
    uint64_t v4 = v0[38];
    uint64_t v5 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v7 = type metadata accessor for Logger();
    v0[39] = sub_100044058(v7, (uint64_t)qword_10040C330);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v0[40] = v8;
    v0[41] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v8(v4, v3, v5);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[38];
    uint64_t v14 = v0[35];
    uint64_t v13 = v0[36];
    if (v11)
    {
      uint64_t v28 = v0[17];
      os_log_type_t type = v10;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558531;
      v0[13] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_1002F32A8(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[14] = sub_100037004(v16, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v18(v12, v14);
      *(_WORD *)(v15 + 22) = 2082;
      uint64_t v19 = sub_100328F74(v28);
      v0[15] = sub_100037004(v19, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, type, "Removing peer %{private,mask.hash}s. Options: %{public}s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v18(v0[38], v0[35]);
    }

    v0[42] = v18;
    uint64_t v27 = (void *)swift_task_alloc();
    v0[43] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_1002E7D18;
    return daemon.getter();
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040C330);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      BOOL v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)BOOL v24 = 136446210;
      v0[7] = sub_100037004(0xD00000000000001BLL, 0x8000000100379C60, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s Feature.FindMy.redStripe FF disabled.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_1002E7D18(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 352) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 360) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002F32A8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002E7EF4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002E7EF4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 368) = a1;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1002E9630;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1002E8010;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002E8010()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  Handle.peerID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(*(void *)(v0 + 248), &qword_1003ECFB8);
    (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 296), *(void *)(v0 + 128), *(void *)(v0 + 280));
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 296);
    if (v6)
    {
      uint64_t v17 = *(void *)(v0 + 280);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558275;
      *(void *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      uint64_t v9 = Handle.identifier.getter();
      *(void *)(v0 + 72) = sub_100037004(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v18(v7, v17);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No peer record for %{private,mask.hash}s!", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 296), *(void *)(v0 + 280));
    }

    sub_1002ACC80();
    swift_allocError();
    *uint64_t v15 = 15;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 264) + 32))(*(void *)(v0 + 272), *(void *)(v0 + 248), *(void *)(v0 + 256));
    BOOL v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v11;
    void *v11 = v0;
    v11[1] = sub_1002E8390;
    uint64_t v12 = *(void *)(v0 + 272);
    uint64_t v13 = *(void *)(v0 + 192);
    return sub_1000F6B40(v13, v12);
  }
}

uint64_t sub_1002E8390()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002E89E4;
  }
  else {
    uint64_t v2 = sub_1002E84A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002E84A4()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 48))(v1, 1, *(void *)(v0 + 200)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 272), *(void *)(v0 + 256));
    sub_10000A520(v1, &qword_1003EEEB8);
    (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 296), *(void *)(v0 + 128), *(void *)(v0 + 280));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 296);
    if (v4)
    {
      uint64_t v28 = *(void *)(v0 + 280);
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
      uint64_t v6 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 141558275;
      *(void *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2081;
      uint64_t v7 = Handle.identifier.getter();
      *(void *)(v0 + 72) = sub_100037004(v7, v8, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29(v5, v28);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "No peer record for %{private,mask.hash}s!", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 296), *(void *)(v0 + 280));
    }

    sub_1002ACC80();
    swift_allocError();
    *uint64_t v19 = 15;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 240);
    sub_1002F2E64(v1, v9, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    sub_1002F31E0(v9, v10, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    BOOL v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 232);
    if (v13)
    {
      uint64_t v15 = *(void *)(v0 + 224);
      uint64_t v16 = swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      *(void *)(v0 + 88) = sub_100037004(0xD00000000000001BLL, 0x8000000100379C60, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      sub_1002F31E0(v14, v15, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      uint64_t v17 = String.init<A>(describing:)();
      *(void *)(v0 + 96) = sub_100037004(v17, v18, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002F3248(v14, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s record %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002F3248(*(void *)(v0 + 232), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    }

    uint64_t v22 = *(void *)(v0 + 368);
    uint64_t v23 = *(void *)(v0 + 240);
    uint64_t v24 = *(void *)(v0 + 152);
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v27;
    void v27[2] = v25;
    v27[3] = v23;
    v27[4] = v26;
    v27[5] = v24;
    return _swift_task_switch(sub_1002E8B00, v22, 0);
  }
}

uint64_t sub_1002E89E4()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002E8B00()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E8BC8;
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[23];
  return v5(v3, &unk_1003F4550, v2);
}

uint64_t sub_1002E8BC8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 368);
    BOOL v4 = sub_1002E8CEC;
  }
  else
  {
    swift_task_dealloc();
    BOOL v4 = sub_1002E8E90;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E8CEC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E8D54, 0, 0);
}

uint64_t sub_1002E8D54()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1002F3248(v4, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1002E8E90()
{
  uint64_t v10 = v0;
  sub_1002F31E0(v0[30], v0[27], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[27];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F3248(v3, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Updating peer record %s from CK.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002F3248(v0[27], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  }

  uint64_t v7 = v0[46];
  (*(void (**)(void, void, void))(v0[21] + 104))(v0[22], enum case for CloudKitCoordinator.Database.private(_:), v0[20]);
  return _swift_task_switch(sub_1002E90CC, v7, 0);
}

uint64_t sub_1002E90CC()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[53] = v1;
  void *v1 = v0;
  v1[1] = sub_1002E917C;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  return v5(v3, v2);
}

uint64_t sub_1002E917C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[46];
    uint64_t v4 = sub_1002E9468;
  }
  else
  {
    uint64_t v5 = v2[18];
    (*(void (**)(void, void))(v2[21] + 8))(v2[22], v2[20]);
    uint64_t v4 = sub_1002E92B4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E92B4()
{
  sub_100313B7C();
  return _swift_task_switch(sub_1002E931C, 0, 0);
}

uint64_t sub_1002E931C()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[23];
  swift_release();
  sub_10000A520(v5, &qword_1003EF468);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1002F3248(v4, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1002E9468()
{
  (*(void (**)(void, void))(v0[21] + 8))(v0[22], v0[20]);
  return _swift_task_switch(sub_1002E94E0, 0, 0);
}

uint64_t sub_1002E94E0()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[23];
  swift_release();
  sub_10000A520(v5, &qword_1003EF468);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1002F3248(v4, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1002E9630()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E972C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Handle();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1002E980C, 0, 0);
}

uint64_t sub_1002E980C()
{
  uint64_t v63 = v0;
  uint64_t v1 = v0[9];
  if ((~*((_DWORD *)v0 + 18) & 3) == 0) {
    goto LABEL_13;
  }
  if (v1)
  {
    uint64_t v4 = v0[10];
    uint64_t v5 = type metadata accessor for FriendSharedSecretsRecord();
    if (*(void *)(v4 + *(int *)(v5 + 24) + 8) >> 60 != 15)
    {
      uint64_t v6 = v5;
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v7 = v0[16];
      uint64_t v8 = v0[12];
      uint64_t v9 = v0[13];
      uint64_t v10 = v0[11];
      uint64_t v11 = type metadata accessor for Logger();
      sub_100044058(v11, (uint64_t)qword_10040C330);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10, v8);
      os_log_type_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      uint64_t v15 = v0[16];
      uint64_t v16 = v0[13];
      if (v14)
      {
        uint64_t v60 = v0[12];
        uint64_t v17 = swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 141558275;
        v0[6] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 12) = 2081;
        uint64_t v18 = Handle.identifier.getter();
        v0[7] = sub_100037004(v18, v19, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v60);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing incomingSharedSecret for %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v16 + 8))(v0[16], v0[12]);
      }

      uint64_t v39 = (void *)swift_task_alloc();
      v0[17] = v39;
      uint64_t v40 = sub_1002F32A8(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
      *uint64_t v39 = v0;
      v39[1] = sub_1002EA0B8;
      uint64_t v41 = v0[10];
      uint64_t v42 = sub_1002EA4A8;
      uint64_t v43 = v6;
      goto LABEL_29;
    }
LABEL_13:
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v23 = v0[13];
    uint64_t v22 = v0[14];
    uint64_t v25 = v0[11];
    uint64_t v24 = v0[12];
    uint64_t v26 = type metadata accessor for Logger();
    sub_100044058(v26, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v31 = v0[13];
    uint64_t v30 = v0[14];
    if (v29)
    {
      *(void *)os_log_type_t type = v0[12];
      uint64_t v32 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 141558275;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      uint64_t v33 = Handle.identifier.getter();
      v0[5] = sub_100037004(v33, v34, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_type_t *))(v31 + 8))(v30, *(os_log_type_t **)type);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Removing FriendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v31 + 8))(v0[14], v0[12]);
    }

    uint64_t v35 = (void *)swift_task_alloc();
    v0[19] = v35;
    uint64_t v36 = type metadata accessor for FriendSharedSecretsRecord();
    uint64_t v37 = sub_1002F32A8(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
    *uint64_t v35 = v0;
    v35[1] = sub_1002EA358;
    uint64_t v38 = v0[10];
    return CloudKitChangeSet.Adaptor.delete<A>(record:)(v38, v36, v37);
  }
  if ((v1 & 2) == 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  uint64_t v20 = v0[10];
  uint64_t v21 = type metadata accessor for FriendSharedSecretsRecord();
  if (*(void *)(v20 + *(int *)(v21 + 32) + 8) >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v44 = v21;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v45 = v0[15];
  uint64_t v46 = v0[12];
  uint64_t v47 = v0[13];
  uint64_t v48 = v0[11];
  uint64_t v49 = type metadata accessor for Logger();
  sub_100044058(v49, (uint64_t)qword_10040C330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v48, v46);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v53 = v0[15];
  uint64_t v54 = v0[13];
  if (v52)
  {
    uint64_t v59 = v0[12];
    uint64_t v55 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 12) = 2081;
    uint64_t v56 = Handle.identifier.getter();
    v0[3] = sub_100037004(v56, v57, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v59);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Removing outgoingSharedSecret for %{private,mask.hash}s", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v54 + 8))(v0[15], v0[12]);
  }

  uint64_t v58 = (void *)swift_task_alloc();
  v0[18] = v58;
  uint64_t v40 = sub_1002F32A8(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
  *uint64_t v58 = v0;
  v58[1] = sub_1002EA208;
  uint64_t v41 = v0[10];
  uint64_t v42 = sub_1002EA4EC;
  uint64_t v43 = v44;
LABEL_29:
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(v41, v42, 0, v43, v40);
}

uint64_t sub_1002EA0B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002EA208()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002EA358()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

double sub_1002EA4A8(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for FriendSharedSecretsRecord() + 32);
  sub_1000440E8(*(void *)v1, *(void *)(v1 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = xmmword_10036CD90;
  return result;
}

double sub_1002EA4EC(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for FriendSharedSecretsRecord() + 24);
  sub_1000440E8(*(void *)v1, *(void *)(v1 + 8));
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = xmmword_10036CD90;
  return result;
}

uint64_t sub_1002EA530(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 120) = a2;
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = a3;
  uint64_t v4 = type metadata accessor for Handle();
  *(void *)(v3 + 88) = v4;
  *(void *)(v3 + 96) = *(void *)(v4 - 8);
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1002EA604, 0, 0);
}

uint64_t sub_1002EA604()
{
  uint64_t v37 = v0;
  if (*(unsigned char *)(v0 + 120))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100044058(v18, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v24 = *(void *)(v0 + 88);
    uint64_t v25 = *(void *)(v0 + 72);
    if (v21)
    {
      uint64_t v32 = *(void *)(v0 + 88);
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446979;
      os_log_t log = v19;
      *(void *)(v0 + 16) = sub_100037004(0xD00000000000001BLL, 0x8000000100379C60, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2160;
      *(void *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 22) = 2081;
      uint64_t v27 = Handle.identifier.getter();
      *(void *)(v0 + 32) = sub_100037004(v27, v28, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v32);
      *(_WORD *)(v26 + 32) = 2114;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v29;
      sub_1001D5B10(v25, 1);
      sub_1001D5B10(v25, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v20, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v26, 0x2Au);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D5B10(v25, 1);
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 72), 1);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      sub_1001D5B10(v25, 1);
      sub_1001D5B10(v25, 1);
    }
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 112);
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 96);
    if (v8)
    {
      uint64_t v35 = *(void *)(v0 + 88);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      *(void *)(v0 + 48) = sub_100037004(0xD00000000000001BLL, 0x8000000100379C60, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      *(void *)(v0 + 56) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = Handle.identifier.getter();
      *(void *)(v0 + 64) = sub_100037004(v12, v13, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v35);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 88));
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_1002EABC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a5;
  uint64_t v59 = a4;
  uint64_t v68 = a1;
  uint64_t v69 = a3;
  uint64_t v66 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v64 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v49 = v8;
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v55 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 64);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v10;
  uint64_t v11 = type metadata accessor for Handle();
  uint64_t v65 = v11;
  uint64_t v70 = *(void **)(v11 - 8);
  uint64_t v12 = v70[8];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v46 - v14;
  uint64_t v48 = (char *)&v46 - v14;
  uint64_t v16 = sub_100044014(&qword_1003F4460);
  uint64_t v46 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v58 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v18;
  __chkstk_darwin(v19);
  BOOL v21 = (char *)&v46 - v20;
  uint64_t v47 = (char *)&v46 - v20;
  uint64_t v62 = *(void *)(a2 + 128);
  uint64_t v61 = type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v56 = v17 + 16;
  unint64_t v57 = v22;
  v22(v21, v68, v16);
  uint64_t v23 = v70;
  uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))v70[2];
  v54(v15, v69, v11);
  uint64_t v24 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v10, v59, v8);
  uint64_t v25 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v26 = (v25 + 16) & ~v25;
  uint64_t v27 = *((unsigned __int8 *)v23 + 80);
  uint64_t v28 = (v18 + v27 + v26) & ~v27;
  unint64_t v29 = (v12 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (*(unsigned __int8 *)(v24 + 80) + v29 + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v59 = v27 | v25 | 7;
  unint64_t v31 = ((unint64_t)v55 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  uint64_t v51 = v17 + 32;
  uint64_t v55 = v33;
  uint64_t v34 = v46;
  v33(v32 + v26, v47, v46);
  uint64_t v35 = (char *)v70[4];
  v70 += 4;
  uint64_t v47 = v35;
  uint64_t v36 = v65;
  ((void (*)(uint64_t, char *, uint64_t))v35)(v32 + v28, v48, v65);
  uint64_t v37 = v67;
  *(void *)(v32 + v29) = v66;
  (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v32 + v30, v50, v49);
  uint64_t v38 = v63;
  *(void *)(v32 + v31) = v63;
  uint64_t v39 = v60;
  v54(v60, v69, v36);
  uint64_t v40 = v58;
  v57(v58, v68, v34);
  uint64_t v41 = (v27 + 16) & ~v27;
  uint64_t v42 = (v52 + v25 + v41) & ~v25;
  unint64_t v43 = (v53 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = swift_allocObject();
  ((void (*)(uint64_t, char *, uint64_t))v47)(v44 + v41, v39, v65);
  v55(v44 + v42, v40, v34);
  *(void *)(v44 + v43) = v38;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1002EB0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[25] = a4;
  v5[26] = a5;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[27] = swift_task_alloc();
  uint64_t v6 = *(void *)(sub_100044014(&qword_1003F1530) - 8);
  v5[28] = v6;
  v5[29] = *(void *)(v6 + 64);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v5[34] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[35] = v8;
  v5[36] = *(void *)(v8 + 64);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v5[43] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v5[44] = v9;
  v5[45] = *(void *)(v9 - 8);
  v5[46] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v5[47] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for FriendSharedSecretsRecord();
  v5[48] = v10;
  v5[49] = *(void *)(v10 - 8);
  v5[50] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v5[51] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v5[52] = v11;
  v5[53] = *(void *)(v11 - 8);
  v5[54] = swift_task_alloc();
  return _swift_task_switch(sub_1002EB46C, 0, 0);
}

uint64_t sub_1002EB46C()
{
  uint64_t v16 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1002F32A8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if ((My & 1) == 0)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C330);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_15;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    v0[7] = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Feature.FindMy.redStripe FF disabled.", v7, 0xCu);
    swift_arrayDestroy();
    goto LABEL_14;
  }
  if (sub_1002C890C())
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[55] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002EB994;
    return daemon.getter();
  }
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    v0[8] = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v9, "%{public}s isFindingCapable == false.", v10, 0xCu);
    swift_arrayDestroy();
LABEL_14:
    swift_slowDealloc();
    swift_slowDealloc();
  }
LABEL_15:

  uint64_t v11 = v0[30];
  uint64_t v12 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_100044014(&qword_1003F4460);
  CheckedContinuation.resume(returning:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002EB994(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 448) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 456) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1002F32A8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_1002EBB70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002EBB70(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 464) = a1;
  *(void *)(v3 + 472) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1002ED7BC;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1002EBC8C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002EBC8C()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[26];
  uint64_t v3 = swift_allocObject();
  v0[60] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[61] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002EBD8C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1002EBD8C()
{
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1002ED90C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1002EBEA8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002EBEA8()
{
  unint64_t v29 = v0;
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[53];
  uint64_t v3 = v0[51];
  Handle.peerID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v0[51], &qword_1003ECFB8);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[37];
    uint64_t v5 = v0[34];
    uint64_t v6 = v0[35];
    uint64_t v7 = v0[23];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[37];
    uint64_t v13 = v0[35];
    if (v11)
    {
      uint64_t v27 = v0[34];
      uint64_t v14 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v15 = Handle.identifier.getter();
      v0[10] = sub_100037004(v15, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v27);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No peer record for %{private,mask.hash}s!", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[37], v0[34]);
    }

    uint64_t v21 = v0[27];
    uint64_t v22 = v0[24];
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 1, 1, v23);
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v22;
    swift_retain();
    sub_10010405C(v21, (uint64_t)&unk_1003F44A0, (uint64_t)v24);
    swift_release();
    sub_1002ACC80();
    swift_allocError();
    void *v25 = 15;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[53] + 32))(v0[54], v0[51], v0[52]);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[63] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1002EC364;
    uint64_t v18 = v0[54];
    uint64_t v19 = v0[47];
    return sub_1000F6B40(v19, v18);
  }
}

uint64_t sub_1002EC364()
{
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002ED64C;
  }
  else {
    uint64_t v2 = sub_1002EC478;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002EC478()
{
  v139 = v0;
  uint64_t v1 = v0;
  v136 = v0 + 11;
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[47];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[49] + 48))(v3, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[53] + 8))(v0[54], v0[52]);
    sub_10000A520(v3, &qword_1003EEEB8);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[37];
    uint64_t v5 = v0[34];
    uint64_t v6 = v0[35];
    uint64_t v7 = v1[23];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v1[37];
    uint64_t v14 = v1[34];
    uint64_t v13 = v1[35];
    if (v11)
    {
      uint64_t v15 = swift_slowAlloc();
      v138[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v1[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      uint64_t v16 = Handle.identifier.getter();
      v1[10] = sub_100037004(v16, v17, v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No peer record for %{private,mask.hash}s!", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v1[37], v1[34]);
    }

    uint64_t v38 = v1[27];
    uint64_t v39 = v1[24];
    uint64_t v40 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v38, 1, 1, v40);
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = 0;
    v41[3] = 0;
    v41[4] = v39;
    swift_retain();
    sub_10010405C(v38, (uint64_t)&unk_1003F44A0, (uint64_t)v41);
    swift_release();
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v42 = 15;
    swift_willThrow();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v18 = v0[50];
  sub_1002F2E64(v3, v18, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v19 = (uint64_t *)(v18 + *(int *)(v2 + 24));
  unint64_t v135 = v19[1];
  if (v135 >> 60 == 15)
  {
LABEL_9:
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v25 = v1[38];
    uint64_t v26 = v1[34];
    uint64_t v27 = v1[35];
    uint64_t v28 = v1[23];
    uint64_t v29 = type metadata accessor for Logger();
    sub_100044058(v29, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v25, v28, v26);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = v1[38];
    uint64_t v34 = v1[35];
    if (v32)
    {
      uint64_t v134 = v1[34];
      uint64_t v35 = swift_slowAlloc();
      v138[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 141558275;
      void *v136 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2081;
      uint64_t v36 = Handle.identifier.getter();
      v1[12] = sub_100037004(v36, v37, v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v134);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing outgoingSharedSecret for %{private,mask.hash}s!", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v34 + 8))(v1[38], v1[34]);
    }

    uint64_t v44 = v1[53];
    uint64_t v43 = v1[54];
    uint64_t v45 = v1[52];
    uint64_t v46 = v1[50];
    uint64_t v47 = v1[27];
    uint64_t v48 = v1[24];
    uint64_t v49 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v47, 1, 1, v49);
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = 0;
    v50[3] = 0;
    v50[4] = v48;
    swift_retain();
    sub_10010405C(v47, (uint64_t)&unk_1003F44B0, (uint64_t)v50);
    swift_release();
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v51 = 15;
    swift_willThrow();
    swift_release();
    sub_1002F3248(v46, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    goto LABEL_17;
  }
  uint64_t v20 = *v19;
  uint64_t v21 = v0[50];
  uint64_t v22 = v0[44];
  uint64_t v23 = v0[45];
  uint64_t v24 = v1[43];
  sub_100013210(v21 + *(int *)(v1[48] + 28), v24, (uint64_t *)&unk_1003EE800);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
  {
    sub_10000A520(v1[43], (uint64_t *)&unk_1003EE800);
    goto LABEL_9;
  }
  (*(void (**)(void, void, void))(v1[45] + 32))(v1[46], v1[43], v1[44]);
  sub_100022C64(v20, v135);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v55 = v1[41];
  uint64_t v54 = v1[42];
  uint64_t v57 = v1[34];
  uint64_t v56 = v1[35];
  uint64_t v58 = v1[23];
  uint64_t v59 = type metadata accessor for Logger();
  sub_100044058(v59, (uint64_t)qword_10040C330);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  v60(v54, v58, v57);
  v133 = v60;
  v60(v55, v58, v57);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v65 = v1[41];
  uint64_t v64 = v1[42];
  uint64_t v67 = v1[34];
  uint64_t v66 = v1[35];
  if (v63)
  {
    uint64_t v122 = v1[41];
    os_log_type_t type = v62;
    uint64_t v68 = swift_slowAlloc();
    v138[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136447235;
    v1[17] = sub_100037004(0xD000000000000015, 0x8000000100379B90, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v68 + 12) = 2160;
    v1[18] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v68 + 22) = 2081;
    uint64_t v69 = Handle.identifier.getter();
    v1[19] = sub_100037004(v69, v70, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v71(v64, v67);
    *(_WORD *)(v68 + 32) = 2160;
    v1[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v68 + 42) = 2081;
    sub_1002F32A8(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
    v1[21] = sub_100037004(v72, v73, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v74 = v71;
    v71(v122, v67);
    _os_log_impl((void *)&_mh_execute_header, v61, type, "%{public}s found existing peerID: %{private,mask.hash}s for handle %{private,mask.hash}s.", (uint8_t *)v68, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v74(v1[42], v1[34]);
    v74(v65, v67);
  }
  uint64_t v75 = v1[64];
  sub_10030868C(v20, v135, (void (*)(void, void))v1[46], v1[25], (void *)v1[33]);
  if (v75)
  {
    uint64_t v76 = v1[53];
    uint64_t v77 = v1[54];
    uint64_t v78 = v1[52];
    uint64_t v79 = v1[50];
    uint64_t v80 = v20;
    uint64_t v81 = v1[45];
    uint64_t v82 = v1[46];
    uint64_t v83 = v1[44];
    sub_1000440E8(v80, v135);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
    sub_1002F3248(v79, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v78);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = (uint64_t (*)(void))v1[1];
    goto LABEL_18;
  }
  uint64_t v137 = v20;
  uint64_t v84 = v1[40];
  uint64_t v85 = v1[34];
  uint64_t v86 = v1[23];
  sub_100013210(v1[33], v1[32], &qword_1003F1530);
  v133(v84, v86, v85);
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v90 = v1[31];
    uint64_t v89 = v1[32];
    uint64_t v91 = swift_slowAlloc();
    v138[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v91 = 141558787;
    v1[13] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 12) = 2081;
    sub_100013210(v89, v90, &qword_1003F1530);
    uint64_t v92 = type metadata accessor for DiscoveryToken(0);
    int v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v90, 1, v92);
    uint64_t v94 = v1;
    uint64_t v95 = v1[31];
    v130 = v87;
    os_log_type_t v127 = v88;
    if (v93 == 1)
    {
      sub_10000A520(v95, &qword_1003F1530);
      uint64_t v96 = 0;
      unint64_t v97 = 0xE000000000000000;
    }
    else
    {
      uint64_t v96 = sub_1003087F8();
      unint64_t v97 = v100;
      sub_1002F3248(v95, type metadata accessor for DiscoveryToken);
    }
    uint64_t v101 = v94[40];
    uint64_t v102 = v94[34];
    uint64_t v103 = v94[32];
    uint64_t v104 = v96;
    uint64_t v1 = v94;
    v94[14] = sub_100037004(v104, v97, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000A520(v103, &qword_1003F1530);
    *(_WORD *)(v91 + 22) = 2160;
    v94[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 32) = 2081;
    sub_1002F32A8(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
    v94[16] = sub_100037004(v105, v106, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v74(v101, v102);
    _os_log_impl((void *)&_mh_execute_header, v130, v127, "peerToken: %{private,mask.hash}s for handle %{private,mask.hash}s.", (uint8_t *)v91, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v98 = v1[40];
    uint64_t v99 = v1[34];
    sub_10000A520(v1[32], &qword_1003F1530);
    v74(v98, v99);
  }
  os_log_t v131 = (os_log_t)v1[52];
  uint64_t v132 = v1[54];
  uint64_t v128 = v1[50];
  uint64_t v129 = v1[53];
  uint64_t v123 = v1[45];
  os_log_t log = (os_log_t)v1[44];
  *(void *)os_log_type_t typea = v1[46];
  uint64_t v107 = v1[39];
  uint64_t v108 = v1[35];
  uint64_t v109 = v1[36];
  uint64_t v110 = v1[33];
  uint64_t v111 = v1[34];
  uint64_t v112 = v1[30];
  uint64_t v114 = v1[27];
  uint64_t v113 = v1[28];
  uint64_t v120 = v1[29];
  uint64_t v115 = v1[23];
  uint64_t v121 = v1[26];
  uint64_t v116 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v114, 1, 1, v116);
  v133(v107, v115, v111);
  sub_100013210(v110, v112, &qword_1003F1530);
  unint64_t v117 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
  unint64_t v118 = (v109 + *(unsigned __int8 *)(v113 + 80) + v117) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
  uint64_t v119 = swift_allocObject();
  *(void *)(v119 + 16) = 0;
  *(void *)(v119 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v108 + 32))(v119 + v117, v107, v111);
  sub_100013B50(v112, v119 + v118, &qword_1003F1530);
  *(void *)(v119 + ((v120 + v118 + 7) & 0xFFFFFFFFFFFFFFF8)) = v121;
  sub_10010405C(v114, (uint64_t)&unk_1003F44C0, v119);
  swift_release();
  sub_100013210(v110, v112, &qword_1003F1530);
  sub_100044014(&qword_1003F4460);
  CheckedContinuation.resume(returning:)();
  sub_1000440E8(v137, v135);
  swift_release();
  sub_10000A520(v110, &qword_1003F1530);
  (*(void (**)(os_log_type_t *, os_log_t))(v123 + 8))(*(os_log_type_t **)typea, log);
  sub_1002F3248(v128, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, os_log_t))(v129 + 8))(v132, v131);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = (uint64_t (*)(void))v1[1];
LABEL_18:
  return v52();
}

uint64_t sub_1002ED64C()
{
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002ED7BC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002ED90C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EDA68(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1002EDB28, 0, 0);
}

uint64_t sub_1002EDB28()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_1002EDD08, v5, 0);
}

uint64_t sub_1002EDD08()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_1002EDDB8;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_1002EDDB8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E0570;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_1002EDEEC;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002EDEEC()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002EE064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1002EE084, a4, 0);
}

uint64_t sub_1002EE084()
{
  sub_10031A2D8(3600.0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EE0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1002F3528, a4, 0);
}

uint64_t sub_1002EE110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  sub_100044014(&qword_1003F3B30);
  v5[16] = swift_task_alloc();
  sub_100044014(&qword_1003F1530);
  v5[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DiscoveryToken(0);
  v5[18] = v6;
  v5[19] = *(void *)(v6 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v5[27] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Friend();
  v5[28] = v8;
  v5[29] = *(void *)(v8 - 8);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[33] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_1002EE38C;
  return daemon.getter();
}

uint64_t sub_1002EE38C(uint64_t a1)
{
  os_log_type_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[34] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[35] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[36] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1002F32A8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[37] = v6;
  uint64_t v7 = sub_1002F32A8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1002EE56C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002EE56C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 304) = a1;
  *(void *)(v4 + 312) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1002EFDA4;
    uint64_t v6 = 0;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1002EE6A4;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1002EE6A4()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 320) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1002EE800;
  return sub_100021584(v4, 1);
}

uint64_t sub_1002EE800(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002EE920, 0, 0);
}

uint64_t sub_1002EE920()
{
  uint64_t v98 = v0;
  uint64_t v1 = v0[42];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[29];
    uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v0[22] + 8);
    uint64_t v92 = *(void *)(v4 + 56);
    uint64_t v94 = v5;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = v0[26];
      uint64_t v9 = v0[21];
      v94(v0[31], v6, v0[28]);
      Friend.handle.getter();
      char v10 = static Handle.== infix(_:_:)();
      (*v7)(v8, v9);
      if (v10) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[31], v0[28]);
      v6 += v92;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v12 = v0[31];
    uint64_t v13 = v0[28];
    uint64_t v14 = v0[29];
    uint64_t v15 = v0[27];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v12, v13);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  uint64_t v16 = v0[28];
  uint64_t v17 = v0[29];
  uint64_t v18 = v0[27];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v11, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16) == 1)
  {
    sub_10000A520(v0[27], &qword_1003ECFE8);
    uint64_t v19 = &qword_1003EC000;
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v20 = v0[25];
    uint64_t v21 = v0[21];
    uint64_t v22 = v0[22];
    uint64_t v23 = v0[14];
    uint64_t v95 = type metadata accessor for Logger();
    sub_100044058(v95, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, v23, v21);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = v0[25];
    uint64_t v28 = v0[22];
    if (v26)
    {
      uint64_t v90 = v0[21];
      uint64_t v29 = swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446723;
      v0[4] = sub_100037004(0xD000000000000015, 0x8000000100379B90, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2160;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2081;
      uint64_t v30 = Handle.identifier.getter();
      v0[6] = sub_100037004(v30, v31, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v90);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, " %{public}s missing following\nfor %{private,mask.hash}s!", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v19 = &qword_1003EC000;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(uint64_t, void))(v28 + 8))(v27, v0[21]);
    }

    sub_1000724B8();
    uint64_t v48 = swift_allocError();
    unsigned char *v49 = 7;
    swift_willThrow();
    swift_release();
    if (v19[134] != -1) {
      swift_once();
    }
    sub_100044058(v95, (uint64_t)qword_10040C330);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446210;
      v0[2] = v48;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v53 = String.init<A>(describing:)();
      v0[3] = sub_100037004(v53, v54, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_type_t v55 = v51;
      unint64_t v37 = v0;
      _os_log_impl((void *)&_mh_execute_header, v50, v55, "PeerToken trigger sending configData error: %{public}s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      unint64_t v37 = v0;
    }
    goto LABEL_32;
  }
  int v93 = v0 + 7;
  (*(void (**)(void, void, void))(v0[29] + 32))(v0[32], v0[27], v0[28]);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v32 = v0[32];
  uint64_t v34 = v0[29];
  uint64_t v33 = v0[30];
  uint64_t v35 = v0[28];
  uint64_t v36 = type metadata accessor for Logger();
  sub_100044058(v36, (uint64_t)qword_10040C330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
  unint64_t v37 = v0;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v42 = v37[29];
  uint64_t v41 = v37[30];
  uint64_t v43 = v37[28];
  if (v40)
  {
    uint64_t v44 = swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136446723;
    v37[11] = sub_100037004(0xD000000000000015, 0x8000000100379B90, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2160;
    v37[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 22) = 2081;
    sub_1002F32A8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    v37[13] = sub_100037004(v45, v46, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v47(v41, v43);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s Found Following: %{private,mask.hash}s", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v47(v37[30], v37[28]);
  }

  v37[43] = v47;
  uint64_t v56 = v37[18];
  uint64_t v57 = v37[19];
  uint64_t v58 = v37[17];
  sub_100013210(v37[15], v58, &qword_1003F1530);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v58, 1, v56) == 1)
  {
    uint64_t v59 = v37[17];
    uint64_t v60 = &qword_1003F1530;
LABEL_28:
    sub_10000A520(v59, v60);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    uint64_t v68 = v37[32];
    uint64_t v69 = v37[28];
    if (v67)
    {
      uint64_t v96 = v37[32];
      unint64_t v70 = (uint8_t *)swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v70 = 136446210;
      *int v93 = sub_100037004(0xD000000000000015, 0x8000000100379B90, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "%{public}s no token to trigger sending configData session", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      uint64_t v71 = v69;
      uint64_t v72 = v96;
    }
    else
    {
      swift_release();

      uint64_t v72 = v68;
      uint64_t v71 = v69;
    }
    v47(v72, v71);
LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v73 = (uint64_t (*)(void))v37[1];
    return v73();
  }
  uint64_t v61 = v37[21];
  uint64_t v62 = v37[22];
  uint64_t v63 = v37[16];
  sub_1002F2E64(v37[17], v37[20], type metadata accessor for DiscoveryToken);
  Friend.ownerHandle.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v61) == 1)
  {
    uint64_t v64 = v37[16];
    sub_1002F3248(v37[20], type metadata accessor for DiscoveryToken);
    uint64_t v60 = &qword_1003F3B30;
    uint64_t v59 = v64;
    goto LABEL_28;
  }
  uint64_t v75 = v37[23];
  uint64_t v76 = v37[21];
  uint64_t v77 = v37[22];
  uint64_t v78 = v37[14];
  (*(void (**)(void, void, uint64_t))(v77 + 32))(v37[24], v37[16], v76);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v75, v78, v76);
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.default.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  uint64_t v83 = v37[22];
  uint64_t v82 = v37[23];
  uint64_t v84 = v37[21];
  if (v81)
  {
    uint64_t v85 = swift_slowAlloc();
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v85 = 136446723;
    os_log_type_t type = v80;
    v37[8] = sub_100037004(0xD000000000000015, 0x8000000100379B90, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v85 + 12) = 2160;
    v37[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v85 + 22) = 2081;
    sub_1002F32A8(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
    v37[10] = sub_100037004(v86, v87, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v88 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v88(v82, v84);
    _os_log_impl((void *)&_mh_execute_header, v79, type, "%{public}s Trigger start addtional configData NISession\nwith handle: %{private,mask.hash}s", (uint8_t *)v85, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v88 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v88(v37[23], v37[21]);
  }

  v37[44] = v88;
  uint64_t v89 = (void *)swift_task_alloc();
  v37[45] = v89;
  *uint64_t v89 = v37;
  v89[1] = sub_1002EF6EC;
  return daemon.getter();
}

uint64_t sub_1002EF6EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 368) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 376) = v5;
  uint64_t v6 = type metadata accessor for NIRangingService();
  uint64_t v7 = sub_1002F32A8(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002EF8A0;
  uint64_t v8 = *(void *)(v2 + 296);
  uint64_t v9 = *(void *)(v2 + 288);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002EF8A0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 384) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_1002F0040;
  }
  else
  {
    *(void *)(v4 + 392) = a1;
    uint64_t v5 = sub_1002EF9E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002EF9E4()
{
  uint64_t v1 = **(void ***)(v0 + 160);
  *(void *)(v0 + 400) = v1;
  id v2 = v1;
  Friend.handle.getter();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002EFAAC;
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  return sub_10029EBE0((uint64_t)v2, v4, v5);
}

uint64_t sub_1002EFAAC()
{
  uint64_t v1 = *v0;
  id v2 = *(void **)(*v0 + 400);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v0 + 352);
  uint64_t v4 = *(void *)(*v0 + 208);
  uint64_t v5 = *(void *)(*v0 + 176);
  uint64_t v6 = *(void *)(*v0 + 168);
  swift_task_dealloc();

  *(void *)(v1 + 416) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v4, v6);
  return _swift_task_switch(sub_1002EFC44, 0, 0);
}

uint64_t sub_1002EFC44()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[44];
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[20];
  uint64_t v5 = v0[21];
  swift_release();
  swift_release();
  v1(v4, v5);
  sub_1002F3248(v6, type metadata accessor for DiscoveryToken);
  v9(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002EFDA4()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[39];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[2] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PeerToken trigger sending configData error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002F0040()
{
  uint64_t v18 = v0;
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[44];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[20];
  swift_release();
  v1(v5, v6);
  sub_1002F3248(v7, type metadata accessor for DiscoveryToken);
  v2(v3, v4);
  uint64_t v8 = v0[48];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100044058(v9, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    v0[2] = v8;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v13 = String.init<A>(describing:)();
    v0[3] = sub_100037004(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "PeerToken trigger sending configData error: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1002F0340(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 96) = a4;
  *(void *)(v5 + 104) = a5;
  *(unsigned char *)(v5 + 184) = a2;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = a3;
  uint64_t v6 = type metadata accessor for Handle();
  *(void *)(v5 + 112) = v6;
  *(void *)(v5 + 120) = *(void *)(v6 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  *(void *)(v5 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_1002F0418, 0, 0);
}

uint64_t sub_1002F0418()
{
  uint64_t v42 = v0;
  if (*(unsigned char *)(v0 + 184))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100044058(v18, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v23 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 128);
    uint64_t v24 = *(void *)(v0 + 80);
    if (v21)
    {
      uint64_t v37 = *(void *)(v0 + 112);
      uint64_t v25 = swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446979;
      os_log_t log = v19;
      *(void *)(v0 + 24) = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2160;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2081;
      uint64_t v26 = Handle.identifier.getter();
      *(void *)(v0 + 40) = sub_100037004(v26, v27, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v37);
      *(_WORD *)(v25 + 32) = 2114;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v28;
      sub_1001D5B10(v24, 1);
      sub_1001D5B10(v24, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v20, "%{public}s failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v25, 0x2Au);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v23 + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
      sub_1001D5B10(v24, 1);
      sub_1001D5B10(v24, 1);
    }
    uint64_t v32 = *(void *)(v0 + 80);
    sub_1002ACC80();
    uint64_t v33 = swift_allocError();
    *(void *)(v0 + 160) = v33;
    *uint64_t v34 = v32;
    swift_errorRetain();
    unint64_t v29 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 168) = v29;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1002F0C2C;
    uint64_t v31 = v33;
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 136);
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 120);
    if (v8)
    {
      uint64_t v40 = *(void *)(v0 + 112);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      *(void *)(v0 + 56) = sub_100037004(0xD000000000000015, 0x8000000100379B90, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      *(void *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = Handle.identifier.getter();
      *(void *)(v0 + 72) = sub_100037004(v12, v13, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v40);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s succeeded for %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 136), *(void *)(v0 + 112));
    }

    unint64_t v29 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 144) = v29;
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1002F0ADC;
    uint64_t v31 = 0;
  }
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373400, v31, v29);
}

uint64_t sub_1002F0ADC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002F0C2C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1002F0D60, 0, 0);
}

uint64_t sub_1002F0D60()
{
  v0[2] = v0[10];
  sub_100044014(&qword_1003F4460);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002F0DF0(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1002F0EB0, 0, 0);
}

uint64_t sub_1002F0EB0()
{
  BOOL v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000060, 0x8000000100379BB0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_1002F1090, v5, 0);
}

uint64_t sub_1002F1090()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_1002F1140;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_1002F1140()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E3A48;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_1002F1274;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002F1274()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000060, 0x8000000100379BB0, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002F13EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return _swift_task_switch(sub_1002F1424, 0, 0);
}

uint64_t sub_1002F1424()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  long long v6 = *(_OWORD *)(v0 + 48);
  long long v7 = *(_OWORD *)(v0 + 80);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 48) = v1;
  *(void *)(v5 + 56) = v2;
  *(_OWORD *)(v5 + 64) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v8;
  uint64_t v9 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v10 = sub_1002F32A8(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
  *uint64_t v8 = v0;
  v8[1] = sub_1002F155C;
  uint64_t v11 = *(void *)(v0 + 24);
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(v11, sub_1002F3100, v5, v9, v10);
}

uint64_t sub_1002F155C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002F1698, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1002F1698()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002F16FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void (*a8)(uint64_t, char *, uint64_t))
{
  unint64_t v73 = a8;
  uint64_t v75 = a5;
  uint64_t v79 = (uint8_t *)a2;
  uint64_t v77 = a1;
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v76 - 8);
  uint64_t v12 = __chkstk_darwin(v76);
  uint64_t v72 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  BOOL v21 = (char *)&v64 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(uint8_t **)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v74 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v27 = (char *)&v64 - v26;
  if (a3 >> 60 != 15)
  {
    sub_100013210(a4, (uint64_t)v21, (uint64_t *)&unk_1003EE800);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v23 + 6))(v21, 1, v22) == 1)
    {
      sub_100022C64((uint64_t)v79, a3);
      sub_10000A520((uint64_t)v21, (uint64_t *)&unk_1003EE800);
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100044058(v28, (uint64_t)qword_10040C330);
      unint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "outgoingBaseDate cannot be nil!", v31, 2u);
        swift_slowDealloc();
      }
      uint64_t v32 = (uint64_t)v79;
      unint64_t v33 = a3;
LABEL_21:
      sub_1000440E8(v32, v33);

      return;
    }
    uint64_t v70 = a6;
    unint64_t v71 = a7;
    uint64_t v69 = v23;
    BOOL v67 = (void (*)(char *, char *, uint64_t))*((void *)v23 + 4);
    uint64_t v68 = v23 + 32;
    v67(v27, v21, v22);
    sub_100022C64((uint64_t)v79, a3);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100044058(v34, (uint64_t)qword_10040C330);
    uint64_t v35 = v78;
    uint64_t v36 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v15, v75, v76);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v81 = v66;
      *(_DWORD *)os_log_type_t v39 = 136446210;
      uint64_t v64 = v39 + 4;
      uint64_t v65 = v39;
      sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v80 = sub_100037004(v40, v41, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v36);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Updating outgoingSharedSecret for %{public}s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
    }

    a6 = v70;
    uint64_t v42 = type metadata accessor for FriendSharedSecretsRecord();
    uint64_t v43 = v77;
    uint64_t v44 = v77 + *(int *)(v42 + 24);
    sub_1000440E8(*(void *)v44, *(void *)(v44 + 8));
    *(void *)uint64_t v44 = v79;
    *(void *)(v44 + 8) = a3;
    uint64_t v45 = v43 + *(int *)(v42 + 28);
    sub_10000A520(v45, (uint64_t *)&unk_1003EE800);
    v67((char *)v45, v27, v22);
    uint64_t v23 = v69;
    (*((void (**)(uint64_t, void, uint64_t, uint64_t))v69 + 7))(v45, 0, 1, v22);
    a7 = v71;
  }
  if (a7 >> 60 == 15) {
    return;
  }
  sub_100013210((uint64_t)v73, (uint64_t)v19, (uint64_t *)&unk_1003EE800);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v23 + 6))(v19, 1, v22) == 1)
  {
    sub_100022C64(a6, a7);
    sub_10000A520((uint64_t)v19, (uint64_t *)&unk_1003EE800);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100044058(v46, (uint64_t)qword_10040C330);
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v47, "outgoingBaseDate cannot be nil!", v48, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = a6;
    unint64_t v33 = a7;
    goto LABEL_21;
  }
  uint64_t v49 = (void (*)(uint64_t, char *, uint64_t))*((void *)v23 + 4);
  uint64_t v79 = v23 + 32;
  unint64_t v73 = v49;
  v49((uint64_t)v74, v19, v22);
  sub_100022C64(a6, a7);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_100044058(v50, (uint64_t)qword_10040C330);
  uint64_t v51 = v78;
  uint64_t v52 = v72;
  uint64_t v53 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v72, v75, v76);
  unint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    unint64_t v71 = a7;
    uint64_t v75 = v57;
    uint64_t v81 = v57;
    uint64_t v69 = v56;
    uint64_t v70 = a6;
    *(_DWORD *)uint64_t v56 = 136446210;
    sub_1002F32A8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_100037004(v58, v59, &v81);
    a6 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Updating incomingSharedSecret for %{public}s", v69, 0xCu);
    swift_arrayDestroy();
    a7 = v71;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  }

  uint64_t v60 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v61 = v77;
  uint64_t v62 = v77 + *(int *)(v60 + 32);
  sub_1000440E8(*(void *)v62, *(void *)(v62 + 8));
  *(void *)uint64_t v62 = a6;
  *(void *)(v62 + 8) = a7;
  uint64_t v63 = v61 + *(int *)(v60 + 36);
  sub_10000A520(v63, (uint64_t *)&unk_1003EE800);
  v73(v63, v74, v22);
  (*((void (**)(uint64_t, void, uint64_t, uint64_t))v23 + 7))(v63, 0, 1, v22);
}

uint64_t sub_1002F2088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v6 = sub_1002F32A8(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return CloudKitChangeSet.Adaptor.create<A>(record:)(a2, v5, v6);
}

uint64_t sub_1002F217C(uint64_t a1)
{
  return sub_1002EABC4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002F2188()
{
  uint64_t v17 = sub_100044014(&qword_1003F4460);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v15 = (v2 + 16) & ~v2;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for Handle();
  uint64_t v4 = *(void *)(v16 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v15 + v3 + v5) & ~v5;
  unint64_t v7 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v7 + v10 + 8) & ~v10;
  uint64_t v12 = v2 | v5 | v10 | 7;
  unint64_t v13 = ((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);

  return _swift_deallocObject(v0, v13, v12);
}

uint64_t sub_1002F2388()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F4460) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Handle() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v0 + v3;
  uint64_t v11 = *(void *)(v0 + v7);
  uint64_t v12 = v0 + v6;
  uint64_t v13 = v0 + v9;
  uint64_t v14 = *(void *)(v0 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_10004A274;
  return sub_1002EB0FC(v10, v12, v11, v13, v14);
}

uint64_t sub_1002F256C()
{
  uint64_t v1 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_100044014(&qword_1003F4460);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1002F26CC(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(type metadata accessor for Handle() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_100044014(&qword_1003F4460) - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v2 + v7;
  uint64_t v12 = v2 + v10;
  uint64_t v13 = *(void *)(v2 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_10004A274;
  return sub_1002F0340(a1, v5, v11, v12, v13);
}

uint64_t sub_1002F284C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F2884(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *char v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1002EDA68(a1, v4);
}

uint64_t sub_1002F2934()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  v3[2] = v2;
  return _swift_task_switch(sub_1002EE084, v2, 0);
}

uint64_t sub_1002F29E0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002F2A20()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  v3[2] = v2;
  return _swift_task_switch(sub_1002F3528, v2, 0);
}

uint64_t sub_1002F2AC8()
{
  uint64_t v1 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_100044014(&qword_1003F1530) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  unint64_t v10 = (id *)(v0 + v8);
  uint64_t v11 = type metadata accessor for DiscoveryToken(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v0 + v8, 1, v11))
  {

    uint64_t v12 = (char *)v10 + *(int *)(v11 + 20);
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    uint64_t v14 = &v12[*(int *)(type metadata accessor for DiscoveryToken.Bucket(0) + 24)];
    uint64_t v15 = type metadata accessor for DateInterval();
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v7 | 7);
}

uint64_t sub_1002F2CD8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for Handle() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_100044014(&qword_1003F1530) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v9;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_10004A274;
  return sub_1002EE110(a1, v10, v11, v1 + v6, v12);
}

uint64_t sub_1002F2E64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002F2ECC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1002F0DF0(a1, v4);
}

uint64_t sub_1002F2F78(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1002F2088(a1, v4);
}

uint64_t sub_1002F3014(uint64_t a1)
{
  long long v11 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v1 + 40);
  long long v9 = *(_OWORD *)(v1 + 72);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = sub_10004A274;
  *(_OWORD *)(v7 + 80) = v9;
  *(void *)(v7 + 64) = v5;
  *(void *)(v7 + 72) = v6;
  *(_OWORD *)(v7 + 48) = v8;
  *(void *)(v7 + 40) = v4;
  *(_OWORD *)(v7 + 24) = v11;
  *(void *)(v7 + 16) = a1;
  return _swift_task_switch(sub_1002F1424, 0, 0);
}

void sub_1002F3100(uint64_t a1)
{
  sub_1002F16FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void (**)(uint64_t, char *, uint64_t))(v1 + 64));
}

uint64_t sub_1002F3134(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1002E407C(a1, v4);
}

uint64_t sub_1002F31E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002F3248(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002F32A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002F32F0()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002F33C8()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002F3464(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100018CD0;
  return sub_1002E972C(a1, v4, v5, v6);
}

uint64_t sub_1002F352C(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MessagingOptions();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003ECF50);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v2[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Account();
  v2[30] = v6;
  v2[31] = *(void *)(v6 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MessagingCapability();
  v2[33] = v7;
  v2[34] = *(void *)(v7 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  v2[36] = v8;
  v2[37] = *(void *)(v8 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Handle();
  v2[39] = v9;
  v2[40] = *(void *)(v9 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_1002F38AC, v1, 0);
}

uint64_t sub_1002F38AC()
{
  uint64_t v20 = v0;
  Friend.handle.getter();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = type metadata accessor for Logger();
  v0[46] = sub_100044058(v5, (uint64_t)qword_10040C330);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[47] = v6;
  v0[48] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v2, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[44];
  uint64_t v11 = v0[40];
  if (v9)
  {
    uint64_t v18 = v0[39];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[15] = sub_100037004(0xD000000000000012, 0x8000000100379D30, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    uint64_t v13 = Handle.identifier.getter();
    v0[7] = sub_100037004(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s from: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v0[44], v0[39]);
  }

  v0[49] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[50] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1002F3B8C;
  return daemon.getter();
}

uint64_t sub_1002F3B8C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[51] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[52] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[53] = v4;
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[54] = v6;
  uint64_t v7 = sub_1000474BC(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_1002F3D6C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002F3D6C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 440) = a1;
  *(void *)(v4 + 448) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 144);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_1002F5AAC;
  }
  else {
    uint64_t v6 = sub_1002F3EBC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002F3EBC()
{
  char v1 = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v1) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  *(_DWORD *)(v0 + 552) = enum case for MessagingCapability.supportsPeopleFindingV1(_:);
  uint64_t v5 = *(void (**)(uint64_t))(v4 + 104);
  *(void *)(v0 + 456) = v5;
  *(void *)(v0 + 464) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v5(v3);
  return _swift_task_switch(sub_1002F3F78, v2, 0);
}

uint64_t sub_1002F3F78()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
                                                + async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:));
  char v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  void *v1 = v0;
  v1[1] = sub_1002F402C;
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[35];
  return v5(v2, v3);
}

uint64_t sub_1002F402C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 440);
    uint64_t v6 = sub_1002F4548;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 296);
    uint64_t v7 = *(void *)(v4 + 304);
    uint64_t v9 = *(void *)(v4 + 280);
    uint64_t v10 = *(void *)(v4 + 288);
    uint64_t v11 = *(void *)(v4 + 264);
    uint64_t v12 = *(void *)(v4 + 272);
    uint64_t v13 = *(void *)(v4 + 144);
    *(unsigned char *)(v4 + 557) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v10);
    uint64_t v6 = sub_1002F419C;
    uint64_t v5 = v13;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002F419C()
{
  uint64_t v18 = v0;
  if (*(unsigned char *)(v0 + 557) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v1;
    void *v1 = v0;
    v1[1] = sub_1002F4728;
    return daemon.getter();
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 376))(*(void *)(v0 + 328), *(void *)(v0 + 360), *(void *)(v0 + 312));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 328);
    if (v4)
    {
      uint64_t v15 = *(void *)(v0 + 312);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
      uint64_t v6 = swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446723;
      *(void *)(v0 + 64) = sub_100037004(0xD000000000000012, 0x8000000100379D30, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2160;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2081;
      uint64_t v7 = Handle.identifier.getter();
      *(void *)(v0 + 40) = sub_100037004(v7, v8, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v5, v15);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %{private,mask.hash}s missing required capability", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 328), *(void *)(v0 + 312));
    }

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 312);
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v12 = 3;
    swift_willThrow();
    swift_release();
    v9(v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_1002F4548()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[18];
  (*(void (**)(void, void))(v0[34] + 8))(v0[35], v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1002F45E8, v4, 0);
}

uint64_t sub_1002F45E8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[39];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002F4728(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 496) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 504) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1000474BC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002F48DC;
  uint64_t v8 = *(void *)(v2 + 432);
  uint64_t v9 = *(void *)(v2 + 424);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002F48DC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[18];
    swift_release();
    return _swift_task_switch(sub_1002F5BDC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[66] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1002F4A8C;
    uint64_t v7 = v3[29];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1002F4A8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002F4B9C, v1, 0);
}

uint64_t sub_1002F4B9C()
{
  uint64_t v45 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      *(void *)(v0 + 48) = sub_100037004(0xD000000000000012, 0x8000000100379D30, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Missing primary account to send revoke token with my dsid!", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 312);
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v10 = 16;
    swift_willThrow();
    swift_release();
    swift_release();
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    goto LABEL_10;
  }
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 256), v3, v1);
  Swift::String v17 = Account.dsidBase64EncodedString()();
  v13(v15, v14, v16);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v22 = *(void *)(v0 + 312);
  if (v20)
  {
    unint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    os_log_type_t type = v19;
    uint64_t v23 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558787;
    *(void *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v24 = Handle.identifier.getter();
    *(void *)(v0 + 96) = sub_100037004(v24, v25, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v21, v22);
    *(_WORD *)(v23 + 22) = 2160;
    *(void *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 32) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = sub_100037004(v17._countAndFlagsBits, (unint64_t)v17._object, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, type, "Revoking shared secret from %{private,mask.hash}s.\nserverId: %{private,mask.hash}s over IDS.", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 344), *(void *)(v0 + 312));
    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = *(void *)(v0 + 520);
  *(unsigned char *)(v0 + 556) = 6;
  *(Swift::String *)(v0 + 16) = v17;
  sub_100072920();
  sub_100307C78();
  sub_100307CCC();
  Message.init<A>(type:version:payload:)();
  if (v26)
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v27 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 248);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v31 = *(void *)(v0 + 240);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    uint64_t v11 = v27;
    uint64_t v12 = v28;
LABEL_10:
    v7(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  sub_100044014(&qword_1003ECFC0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
  char v34 = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v34) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  uint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v36 = *(unsigned int *)(v0 + 552);
  uint64_t v43 = *(void *)(v0 + 440);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 272);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 56))(*(void *)(v0 + 176), 1, 1, *(void *)(v0 + 152));
  sub_100044014(&qword_1003F4368);
  unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_100367D70;
  v35(v40 + v39, v36, v37);
  sub_100179698(v40);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
  return _swift_task_switch(sub_1002F5318, v43, 0);
}

uint64_t sub_1002F5318()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[67] = v1;
  void *v1 = v0;
  v1[1] = sub_1002F53C0;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  return InternetMessaging.send(message:messageOptions:)(v4, v2, v3);
}

uint64_t sub_1002F53C0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[18];
    uint64_t v4 = sub_1002F54F4;
  }
  else
  {
    uint64_t v5 = v2[18];
    (*(void (**)(void, void))(v2[20] + 8))(v2[21], v2[19]);
    uint64_t v4 = sub_1002F56AC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002F54F4()
{
  uint64_t v13 = v0[45];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v12 = v0[39];
  uint64_t v1 = v0[31];
  uint64_t v11 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];
  uint64_t v8 = v0[23];
  uint64_t v7 = v0[24];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v11, v2);
  v14(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002F56AC()
{
  uint64_t v37 = v0;
  (*(void (**)(void, void, void))(v0 + 376))(*(void *)(v0 + 336), *(void *)(v0 + 360), *(void *)(v0 + 312));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v34 = *(void *)(v0 + 360);
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 256);
    uint64_t v28 = *(void *)(v0 + 248);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 72) = 1752392040;
    uint64_t v36 = v5;
    *(_DWORD *)uint64_t v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v6 = Handle.identifier.getter();
    *(void *)(v0 + 80) = sub_100037004(v6, v7, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18(v3, v17);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully revoked finding token from %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v24);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v30);
    v18(v34, v17);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 336);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 256);
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v31 = *(void *)(v0 + 240);
    uint64_t v11 = v1;
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 184);
    swift_release();
    swift_release();

    v8(v25, v9);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v23, v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v29, v27);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v33, v31);
    v8(v35, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1002F5AAC()
{
  (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 360), *(void *)(v0 + 312));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002F5BDC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[49];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[39];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002F5D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a2;
  v4[7] = a3;
  v4[5] = a1;
  uint64_t v5 = type metadata accessor for Destination();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_1002F5EA8, v3, 0);
}

uint64_t sub_1002F5EA8()
{
  uint64_t v44 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v35 = v0[11];
  uint64_t v37 = v0[13];
  uint64_t v6 = v0[9];
  uint64_t v40 = v0[8];
  uint64_t v42 = v0[10];
  uint64_t v7 = v0[6];
  *(void *)os_log_type_t type = v0[7];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v34(v2, v1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v37, v7, v35);
  (*(void (**)(uint64_t, os_log_type_t *, uint64_t))(v6 + 16))(v42, *(os_log_type_t **)type, v40);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[17];
  if (v11)
  {
    uint64_t v14 = v0[15];
    uint64_t v13 = v0[16];
    uint64_t v15 = v0[14];
    uint64_t v33 = v0[13];
    uint64_t v16 = v0[12];
    uint64_t v32 = v0[11];
    uint64_t v41 = v0[9];
    uint64_t v36 = v0[8];
    uint64_t v38 = v0[10];
    uint64_t v17 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315650;
    v34(v13, v12, v15);
    uint64_t v18 = String.init<A>(describing:)();
    v0[2] = sub_100037004(v18, v19, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    *(_WORD *)(v17 + 12) = 2080;
    sub_1000474BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v20, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v33, v32);
    *(_WORD *)(v17 + 22) = 2080;
    sub_1000474BC(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v22, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v38, v36);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "messageDelivered: %s id %s from: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = v0[12];
    uint64_t v24 = v0[13];
    uint64_t v27 = v0[10];
    uint64_t v26 = v0[11];
    uint64_t v28 = v0[8];
    uint64_t v29 = v0[9];
    (*(void (**)(void, void))(v0[15] + 8))(v0[17], v0[14]);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_1002F630C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return sub_1002F63A8(a2);
}

uint64_t sub_1002F63A8(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[30] = v3;
  v2[31] = *(void *)(v3 - 8);
  v2[32] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Handle();
  v2[36] = v4;
  v2[37] = *(void *)(v4 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[40] = v5;
  v2[41] = *(void *)(v5 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  v2[44] = v6;
  v2[45] = *(void *)(v6 - 8);
  v2[46] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v2[47] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  v2[48] = v7;
  v2[49] = *(void *)(v7 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = type metadata accessor for FindingTokenEnvelopeV1();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  return _swift_task_switch(sub_1002F6724, v1, 0);
}

uint64_t sub_1002F6724()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0 + 2;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[59];
  uint64_t v4 = type metadata accessor for Logger();
  v0[60] = sub_100044058(v4, (uint64_t)qword_10040C330);
  sub_10030836C(v2, v3, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[59];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v21 = v20;
    v0[26] = sub_100037004(0xD000000000000017, 0x8000000100379C80, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v10 = sub_1002010C4();
    v0[27] = sub_100037004(v10, v11, &v21);
    uint64_t v1 = v0 + 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003083D4(v8, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s payload: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003083D4(v0[59], (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1000474BC(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v13 = sub_10003E0F4(v1);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v13, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v1);
  if (My)
  {
    uint64_t v14 = (void *)swift_task_alloc();
    v0[61] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1002F6C90;
    return daemon.getter();
  }
  else
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      v0[14] = sub_100037004(0xD000000000000017, 0x8000000100379C80, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Feature.FindMy.redStripe FF disabled.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_1002F6C90(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 496) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 504) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000474BC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1002F6E6C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002F6E6C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[29];
    uint64_t v5 = sub_1002F8650;
  }
  else
  {
    uint64_t v6 = v3[29];
    swift_release();
    uint64_t v5 = sub_1002F6F98;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002F6F98()
{
  uint64_t v1 = (uint64_t *)v0[28];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  (*(void (**)(void, void, void))(v0[45] + 104))(v0[46], enum case for HandleType.following(_:), v0[44]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[66] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002F7070;
  uint64_t v6 = v0[46];
  uint64_t v5 = v0[47];
  return sub_10010F2F4(v5, v3, v2, v6, 1);
}

uint64_t sub_1002F7070()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  uint64_t v2 = *(void *)(*(void *)v0 + 360);
  uint64_t v3 = *(void *)(*(void *)v0 + 352);
  uint64_t v4 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1002F71DC, v4, 0);
}

uint64_t sub_1002F71DC()
{
  v141 = v0;
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[47];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v3, &qword_1003ECFE8);
    goto LABEL_5;
  }
  uint64_t v4 = v0[41];
  uint64_t v136 = v0[40];
  uint64_t v5 = v0[39];
  uint64_t v7 = v0[36];
  uint64_t v6 = v0[37];
  uint64_t v8 = v0[35];
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[53], v3, v1);
  Friend.handle.getter();
  Handle.peerID.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v136) == 1)
  {
    uint64_t v10 = v0[35];
    (*(void (**)(void, void))(v0[49] + 8))(v0[53], v0[48]);
    sub_10000A520(v10, &qword_1003ECFB8);
LABEL_5:
    sub_10030836C(v0[28], v0[55], (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = (uint64_t *)v0[55];
    if (v13)
    {
      uint64_t v15 = swift_slowAlloc();
      v140[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[13] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      uint64_t v17 = *v14;
      unint64_t v16 = v14[1];
      swift_bridgeObjectRetain();
      v0[11] = sub_100037004(v17, v16, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003083D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No such following with serverID: %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      sub_1003083D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    }

LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  uint64_t v137 = v9;
  uint64_t v20 = v0[58];
  uint64_t v22 = v0[52];
  uint64_t v21 = v0[53];
  uint64_t v23 = v0[48];
  uint64_t v24 = v0[49];
  uint64_t v25 = v0[28];
  (*(void (**)(void, void, void))(v0[41] + 32))(v0[43], v0[35], v0[40]);
  sub_10030836C(v25, v20, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  os_log_t v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  v131(v22, v21, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = (uint64_t *)v0[58];
  uint64_t v30 = v0[52];
  uint64_t v32 = v0[48];
  uint64_t v31 = v0[49];
  if (v28)
  {
    uint64_t v33 = v0[38];
    uint64_t v117 = v0[36];
    uint64_t v34 = swift_slowAlloc();
    v140[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 141558787;
    v0[22] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 2081;
    os_log_t log = v26;
    uint64_t v35 = v30;
    os_log_type_t type = v27;
    uint64_t v37 = *v29;
    unint64_t v36 = v29[1];
    swift_bridgeObjectRetain();
    v0[23] = sub_100037004(v37, v36, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003083D4((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    *(_WORD *)(v34 + 22) = 2160;
    v0[24] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 32) = 2081;
    Friend.handle.getter();
    uint64_t v38 = Handle.identifier.getter();
    unint64_t v40 = v39;
    v137(v33, v117);
    v0[25] = sub_100037004(v38, v40, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v41(v35, v32);
    uint64_t v26 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "Found following with serverID: %{private,mask.hash}s\nhandle.identifier: %{private,mask.hash}s", (uint8_t *)v34, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003083D4((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v41(v30, v32);
  }

  uint64_t v42 = v0[54];
  uint64_t v43 = v0[28];
  uint64_t v44 = (uint64_t *)(v43 + *(int *)(v42 + 24));
  uint64_t v45 = *v44;
  v0[67] = *v44;
  unint64_t v46 = v44[1];
  v0[68] = v46;
  uint64_t v129 = v41;
  switch(v46 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v45), v45))
      {
        __break(1u);
LABEL_32:
        __break(1u);
        JUMPOUT(0x1002F82CCLL);
      }
      uint64_t v47 = HIDWORD(v45) - (int)v45;
LABEL_20:
      sub_100022C64(v45, v46);
LABEL_21:
      uint64_t v43 = v0[28];
      if (v47 != 32)
      {
LABEL_24:
        os_log_t v122 = (os_log_t)v42;
        uint64_t v70 = v0[56];
        uint64_t v71 = v0[53];
        uint64_t v72 = v0[50];
        uint64_t v73 = v0[48];
        sub_100044090(v45, v46);
        sub_10030836C(v43, v70, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
        v131(v72, v71, v73);
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        uint64_t v77 = v0[56];
        uint64_t v78 = v0[53];
        uint64_t v79 = v0[49];
        uint64_t v134 = v0[50];
        uint64_t v80 = v0[48];
        uint64_t v81 = v0[43];
        uint64_t v83 = v0[40];
        uint64_t v82 = v0[41];
        if (v76)
        {
          uint64_t v119 = v0[38];
          uint64_t v120 = v0[36];
          uint64_t v132 = v0[53];
          uint64_t v121 = v0[48];
          uint64_t v85 = v0[31];
          uint64_t v84 = v0[32];
          uint64_t v113 = v0[30];
          uint64_t v130 = v0[41];
          uint64_t v86 = swift_slowAlloc();
          v140[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 141558787;
          v0[12] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v86 + 12) = 2081;
          unint64_t v87 = (uint64_t *)(v77 + SLODWORD(v122[3].isa));
          uint64_t v123 = v74;
          *(void *)os_log_type_t typea = v79;
          uint64_t v89 = *v87;
          unint64_t v88 = v87[1];
          v0[9] = *v87;
          v0[10] = v88;
          (*(void (**)(uint64_t, void, uint64_t))(v85 + 104))(v84, enum case for HashAlgorithm.sha256(_:), v113);
          sub_100022C64(v89, v88);
          sub_10004F4EC();
          uint64_t v139 = v81;
          uint64_t v90 = DataProtocol.hash(algorithm:)();
          uint64_t v135 = v83;
          unint64_t v92 = v91;
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v113);
          sub_100044090(v0[9], v0[10]);
          v0[7] = v90;
          v0[8] = v92;
          uint64_t v93 = DataProtocol.hexString.getter();
          unint64_t v95 = v94;
          sub_100044090(v90, v92);
          v0[15] = sub_100037004(v93, v95, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1003083D4(v77, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
          *(_WORD *)(v86 + 22) = 2160;
          v0[16] = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v86 + 32) = 2081;
          Friend.handle.getter();
          uint64_t v96 = Handle.identifier.getter();
          unint64_t v98 = v97;
          v137(v119, v120);
          v0[17] = sub_100037004(v96, v98, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v99 = *(void (**)(uint64_t, uint64_t))(*(void *)typea + 8);
          v99(v134, v121);
          _os_log_impl((void *)&_mh_execute_header, v123, v75, "Invalid shared secret %{private,mask.hash}s for handle: %{private,mask.hash}s", (uint8_t *)v86, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v139, v135);
          v99(v132, v121);
        }
        else
        {
          swift_release();

          v129(v134, v80);
          sub_1003083D4(v77, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
          (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
          v129(v78, v80);
        }
        goto LABEL_9;
      }
      uint64_t v50 = v0[57];
      uint64_t v52 = v0[42];
      uint64_t v51 = v0[43];
      uint64_t v53 = v0[40];
      uint64_t v54 = v0[41];
      v131(v0[51], v0[53], v0[48]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v52, v51, v53);
      sub_10030836C(v43, v50, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      os_log_type_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = v0[57];
      if (v57)
      {
        uint64_t v128 = v0[57];
        uint64_t v59 = v0[51];
        uint64_t v126 = v0[42];
        uint64_t v127 = v0[41];
        uint64_t v124 = v0[48];
        uint64_t v125 = v0[40];
        v138 = v55;
        uint64_t v60 = v0[38];
        uint64_t v118 = v0[36];
        uint64_t v61 = swift_slowAlloc();
        v140[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 141558787;
        v0[18] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 12) = 2081;
        os_log_type_t v133 = v56;
        Friend.handle.getter();
        uint64_t v62 = Handle.debugDescription.getter();
        unint64_t v64 = v63;
        v137(v60, v118);
        v0[19] = sub_100037004(v62, v64, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v129(v59, v124);
        *(_WORD *)(v61 + 22) = 2082;
        sub_1000474BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[20] = sub_100037004(v65, v66, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        BOOL v67 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
        v67(v126, v125);
        *(_WORD *)(v61 + 32) = 2080;
        type metadata accessor for Date();
        sub_1000474BC(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[21] = sub_100037004(v68, v69, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003083D4(v128, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
        _os_log_impl((void *)&_mh_execute_header, v138, v133, "Adding %{private,mask.hash}s peer info %{public}s baseDate: %s", (uint8_t *)v61, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v101 = v0[41];
        uint64_t v100 = v0[42];
        uint64_t v102 = v0[40];
        v129(v0[51], v0[48]);
        BOOL v67 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v67(v100, v102);
        sub_1003083D4(v58, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      }
      v0[69] = v67;
      uint64_t v104 = v0[33];
      uint64_t v103 = v0[34];
      uint64_t v105 = v0[28] + *(int *)(v0[54] + 20);
      uint64_t v106 = type metadata accessor for Date();
      uint64_t v107 = *(void *)(v106 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v103, v105, v106);
      uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56);
      v108(v103, 0, 1, v106);
      v108(v104, 1, 1, v106);
      sub_100022C64(v45, v46);
      uint64_t v109 = (void *)swift_task_alloc();
      v0[70] = v109;
      *uint64_t v109 = v0;
      v109[1] = sub_1002F82DC;
      uint64_t v110 = v0[43];
      uint64_t v112 = v0[33];
      uint64_t v111 = v0[34];
      uint64_t result = sub_1002E4678(v110, v45, v46, v111, 0, 0xF000000000000000, v112);
      break;
    case 2uLL:
      uint64_t v49 = *(void *)(v45 + 16);
      uint64_t v48 = *(void *)(v45 + 24);
      uint64_t v47 = v48 - v49;
      if (!__OFSUB__(v48, v49)) {
        goto LABEL_20;
      }
      goto LABEL_32;
    case 3uLL:
      goto LABEL_24;
    default:
      uint64_t v47 = BYTE6(v46);
      goto LABEL_21;
  }
  return result;
}

uint64_t sub_1002F82DC()
{
  uint64_t v2 = *v1;
  unint64_t v3 = *(void *)(*v1 + 544);
  uint64_t v4 = *(void *)(*v1 + 536);
  uint64_t v5 = *(void *)(*v1 + 272);
  uint64_t v6 = *(void *)(*v1 + 264);
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  sub_100044090(v4, v3);
  sub_10000A520(v6, (uint64_t *)&unk_1003EE800);
  sub_10000A520(v5, (uint64_t *)&unk_1003EE800);
  uint64_t v7 = *(void *)(v2 + 232);
  if (v0) {
    uint64_t v8 = sub_1002F87BC;
  }
  else {
    uint64_t v8 = sub_1002F8494;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002F8494()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[69];
  unint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[48];
  uint64_t v6 = v0[49];
  uint64_t v7 = v0[43];
  uint64_t v8 = v0[40];
  swift_release();
  sub_100044090(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002F8650()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002F87BC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[69];
  unint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[53];
  uint64_t v5 = v0[48];
  uint64_t v6 = v0[49];
  uint64_t v7 = v0[43];
  uint64_t v8 = v0[40];
  swift_release();
  sub_100044090(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002F8980(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a3;
  return _swift_task_switch(sub_1002F89A4, 0, 0);
}

uint64_t sub_1002F89A4()
{
  if (*(unsigned char *)(v0 + 80))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C330);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 24);
    if (v7)
    {
      uint64_t v17 = v5;
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      unint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138543362;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v16 = v10;
      uint64_t v5 = v17;
      sub_1001D5B10(v8, 1);
      sub_1001D5B10(v8, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v6, "receiveFindingToken error: %{public}@", v9, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 24), 1);
      sub_1001D5B10(v8, 1);
    }

    uint64_t v11 = *(void *)(v0 + 24);
    sub_1002ACC80();
    uint64_t v12 = swift_allocError();
    *(void *)(v0 + 56) = v12;
    *BOOL v13 = v11;
    swift_errorRetain();
    unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 64) = v1;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1002F8CDC;
    uint64_t v3 = v12;
  }
  else
  {
    unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 40) = v1;
    unint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v2;
    *unint64_t v2 = v0;
    v2[1] = sub_10024EB14;
    uint64_t v3 = 0;
  }
  return sub_1002D99E0(0xD000000000000039, 0x8000000100373340, v3, v1);
}

uint64_t sub_1002F8CDC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_1002F8E10, 0, 0);
}

uint64_t sub_1002F8E10()
{
  sub_1001D5B10(*(void *)(v0 + 24), 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002F8E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = sub_100018CD0;
  return sub_1002F8F20(a2, a3);
}

uint64_t sub_1002F8F20(uint64_t a1, uint64_t a2)
{
  v3[40] = a2;
  v3[41] = v2;
  v3[39] = a1;
  v3[42] = *v2;
  uint64_t v4 = type metadata accessor for MessagingOptions();
  v3[43] = v4;
  v3[44] = *(void *)(v4 - 8);
  v3[45] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003ECF50);
  v3[46] = v5;
  v3[47] = *(void *)(v5 - 8);
  v3[48] = swift_task_alloc();
  v3[49] = type metadata accessor for FindingTokenEnvelopeV1();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[52] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Account();
  v3[53] = v6;
  v3[54] = *(void *)(v6 - 8);
  v3[55] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v3[59] = v7;
  v3[60] = *(void *)(v7 - 8);
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v3[64] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendSharedSecretsRecord();
  v3[65] = v8;
  v3[66] = *(void *)(v8 - 8);
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Handle();
  v3[71] = v9;
  v3[72] = *(void *)(v9 - 8);
  v3[73] = swift_task_alloc();
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v3[76] = v10;
  v3[77] = *(void *)(v10 - 8);
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for HandleType();
  v3[81] = v11;
  v3[82] = *(void *)(v11 - 8);
  v3[83] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v3[84] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Friend();
  v3[85] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[86] = v13;
  v3[87] = *(void *)(v13 + 64);
  v3[88] = swift_task_alloc();
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  v3[92] = swift_task_alloc();
  v3[93] = swift_task_alloc();
  v3[94] = swift_task_alloc();
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  v3[97] = swift_task_alloc();
  return _swift_task_switch(sub_1002F9528, v2, 0);
}

uint64_t sub_1002F9528()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0 + 2;
  uint64_t v2 = qword_1003EC430;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v0[98] = sub_100044058(v3, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[40];
  if (v6)
  {
    uint64_t v19 = v0[39];
    uint64_t v8 = swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446723;
    v0[37] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2160;
    v0[38] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    swift_bridgeObjectRetain();
    v0[23] = sub_100037004(v19, v7, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s from friendServerId: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1000474BC(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v10 = sub_10003E0F4(v1);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v10, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v1);
  if (My)
  {
    if (sub_1002C890C())
    {
      uint64_t v11 = (void *)swift_task_alloc();
      v0[99] = v11;
      void *v11 = v0;
      v11[1] = sub_1002F9C80;
      return sub_1002DCD20();
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      v0[8] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v16, "%{public}s isFindingCapable == false.", v17, 0xCu);
      swift_arrayDestroy();
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      v0[7] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s Feature.FindMy.redStripe FF disabled.", v15, 0xCu);
      swift_arrayDestroy();
LABEL_15:
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1002F9C80(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 800) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 328);
  if (v1)
  {
    BOOL v6 = sub_1002FEC9C;
  }
  else
  {
    *(unsigned char *)(v4 + 1169) = a1 & 1;
    BOOL v6 = sub_1002F9DC0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002F9DC0()
{
  uint64_t v8 = v0;
  if (*(unsigned char *)(v0 + 1169) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v1;
    void *v1 = v0;
    v1[1] = sub_1002FA198;
    return daemon.getter();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 72) = sub_100037004(0xD000000000000020, 0x8000000100379CA0, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s this device is NOT eligible to respond to finding tokens request.", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_1002FA198(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[102] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[103] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[104] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[105] = v6;
  uint64_t v7 = sub_1000474BC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1002FA378;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1002FA378(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[106] = a1;
  v3[107] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[41];
    uint64_t v5 = sub_1002FEEFC;
  }
  else
  {
    uint64_t v6 = v3[41];
    swift_release();
    uint64_t v5 = sub_1002FA4A4;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002FA4A4()
{
  (*(void (**)(void, void, void))(v0[82] + 104))(v0[83], enum case for HandleType.follower(_:), v0[81]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[108] = v1;
  void *v1 = v0;
  v1[1] = sub_1002FA570;
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[40];
  return sub_10010F2F4(v2, v4, v5, v3, 1);
}

uint64_t sub_1002FA570()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 664);
  uint64_t v2 = *(void *)(*(void *)v0 + 656);
  uint64_t v3 = *(void *)(*(void *)v0 + 648);
  uint64_t v4 = *(void *)(*(void *)v0 + 328);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1002FA6DC, v4, 0);
}

uint64_t sub_1002FA6DC()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[84];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = &qword_1003ECFE8;
LABEL_5:
    sub_10000A520(v3, v4);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    unint64_t v16 = v0[40];
    if (v15)
    {
      uint64_t v17 = v0[39];
      uint64_t v18 = swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558275;
      v0[10] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      swift_bridgeObjectRetain();
      v0[11] = sub_100037004(v17, v16, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No follower with serverID for handle: %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  uint64_t v5 = v0[97];
  uint64_t v6 = v0[77];
  uint64_t v45 = v0[76];
  uint64_t v7 = v0[75];
  uint64_t v8 = v0[72];
  uint64_t v9 = v0[71];
  uint64_t v10 = v0[70];
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  v0[109] = v11;
  v0[110] = (v1 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v11(v5, v3, v2);
  Friend.handle.getter();
  Handle.peerID.getter();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[111] = v12;
  v0[112] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v7, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v45) == 1)
  {
    uint64_t v3 = v0[70];
    (*(void (**)(void, void))(v0[86] + 8))(v0[97], v0[85]);
    uint64_t v4 = &qword_1003ECFB8;
    goto LABEL_5;
  }
  uint64_t v21 = v0[97];
  uint64_t v22 = v0[96];
  uint64_t v23 = v0[86];
  uint64_t v24 = v0[85];
  (*(void (**)(void, void, void))(v0[77] + 32))(v0[80], v0[70], v0[76]);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v0[113] = v25;
  v0[114] = (v23 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v25(v22, v21, v24);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = v0[96];
  uint64_t v30 = v0[86];
  uint64_t v31 = v0[85];
  if (v28)
  {
    os_log_type_t v44 = v27;
    uint64_t v41 = v0[96];
    uint64_t v32 = v0[74];
    uint64_t v42 = v0[71];
    uint64_t v43 = v0[85];
    unint64_t v33 = v0[40];
    uint64_t v40 = v0[39];
    uint64_t v34 = swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 141558787;
    v0[33] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 2081;
    swift_bridgeObjectRetain();
    v0[34] = sub_100037004(v40, v33, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 22) = 2160;
    v0[35] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 32) = 2081;
    Friend.handle.getter();
    uint64_t v35 = Handle.identifier.getter();
    unint64_t v37 = v36;
    v12(v32, v42);
    v0[36] = sub_100037004(v35, v37, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v38(v41, v43);
    _os_log_impl((void *)&_mh_execute_header, v26, v44, "Found follower with serverID: %{private,mask.hash}s\nfor handle: %{private,mask.hash}s", (uint8_t *)v34, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v38(v29, v31);
  }
  v0[115] = v38;
  unint64_t v39 = (void *)swift_task_alloc();
  v0[116] = v39;
  *unint64_t v39 = v0;
  v39[1] = sub_1002FAED4;
  return daemon.getter();
}

uint64_t sub_1002FAED4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 936) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 944) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1000474BC(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002FB088;
  uint64_t v8 = *(void *)(v2 + 840);
  uint64_t v9 = *(void *)(v2 + 832);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002FB088(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[119] = a1;
  v3[120] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[41];
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1002FF168;
    uint64_t v6 = v4;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_1002FB1E4;
    uint64_t v6 = 0;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1002FB1E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[121] = v1;
  void *v1 = v0;
  v1[1] = sub_1002FB284;
  uint64_t v2 = v0[80];
  uint64_t v3 = v0[64];
  return sub_1000F6B40(v3, v2);
}

uint64_t sub_1002FB284()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 976) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002FC3B8;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 328);
    uint64_t v3 = sub_1002FB3A0;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1002FB3A0()
{
  uint64_t v113 = v0;
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[66] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[113];
    uint64_t v4 = v0[97];
    uint64_t v5 = v0[89];
    uint64_t v6 = v0[85];
    swift_bridgeObjectRelease();
    sub_10000A520(v2, &qword_1003EEEB8);
    v3(v5, v4, v6);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v93 = (void (*)(uint64_t, uint64_t))v0[111];
      uint64_t v9 = v0[89];
      uint64_t v106 = v0[85];
      uint64_t v10 = v0[74];
      uint64_t v89 = v0[71];
      uint64_t v100 = (void (*)(uint64_t, uint64_t))v0[115];
      uint64_t v11 = swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446723;
      v0[15] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2160;
      v0[16] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2081;
      uint64_t v12 = v9;
      Friend.handle.getter();
      uint64_t v13 = Handle.identifier.getter();
      unint64_t v15 = v14;
      v93(v10, v89);
      v0[17] = sub_100037004(v13, v15, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v100(v12, v106);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s.", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[115])(v0[89], v0[85]);
    }

    ((void (*)(void, void, void))v0[113])(v0[88], v0[97], v0[85]);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v97 = (void (*)(uint64_t, uint64_t))v0[111];
      uint64_t v22 = v0[88];
      uint64_t v110 = v0[85];
      uint64_t v23 = v0[74];
      uint64_t v94 = v0[71];
      uint64_t v103 = (void (*)(uint64_t, uint64_t))v0[115];
      uint64_t v24 = swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446723;
      v0[12] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2160;
      v0[13] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v25 = Handle.identifier.getter();
      unint64_t v27 = v26;
      v97(v23, v94);
      v0[14] = sub_100037004(v25, v27, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v103(v22, v110);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s Generating tokens for: %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[115])(v0[88], v0[85]);
    }

    uint64_t v104 = (void (*)(uint64_t, uint64_t))v0[115];
    unint64_t v39 = (void (*)(uint64_t, uint64_t, uint64_t))v0[113];
    uint64_t v82 = v39;
    unint64_t v87 = (void (*)(uint64_t, uint64_t, uint64_t))v0[109];
    uint64_t v40 = v0[97];
    uint64_t v41 = v0[91];
    uint64_t v109 = v0[90];
    uint64_t v111 = v40;
    uint64_t v42 = v0[87];
    uint64_t v43 = v0[86];
    uint64_t v44 = v0[85];
    uint64_t v95 = v0[76];
    uint64_t v98 = v0[80];
    uint64_t v83 = v0[41];
    uint64_t v85 = v0[42];
    uint64_t v90 = v0[77];
    type metadata accessor for WorkItemQueue.WorkItem();
    v39(v41, v40, v44);
    uint64_t v45 = *(unsigned __int8 *)(v43 + 80);
    uint64_t v46 = (v45 + 24) & ~v45;
    uint64_t v47 = v42 + 7;
    unint64_t v48 = (v46 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v83;
    v87(v49 + v46, v41, v44);
    *(void *)(v49 + v48) = v85;
    v82(v109, v111, v44);
    uint64_t v50 = (v45 + 16) & ~v45;
    uint64_t v51 = swift_allocObject();
    v87(v51 + v50, v109, v44);
    *(void *)(v51 + ((v50 + v47) & 0xFFFFFFFFFFFFFFF8)) = v85;
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v98, v95);
    v104(v111, v44);
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v72 = (uint64_t (*)(void))v0[1];
    return v72();
  }
  uint64_t v16 = v0[68];
  sub_100308304(v2, v16, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v17 = (uint64_t *)(v16 + *(int *)(v1 + 32));
  uint64_t v18 = *v17;
  v0[123] = *v17;
  unint64_t v19 = v17[1];
  v0[124] = v19;
  if (v19 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    sub_10030836C(v0[68], v0[67], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = v0[67];
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v36 = 136446210;
      sub_1000474BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[21] = sub_100037004(v37, v38, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003083D4(v35, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No incomingSharedSecret for %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003083D4(v0[67], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    }

    ((void (*)(void, void, void))v0[113])(v0[92], v0[97], v0[85]);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v96 = (void (*)(uint64_t, uint64_t))v0[111];
      uint64_t v54 = v0[92];
      uint64_t v107 = v0[85];
      uint64_t v55 = v0[74];
      uint64_t v91 = v0[71];
      uint64_t v101 = (void (*)(uint64_t, uint64_t))v0[115];
      uint64_t v56 = swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136446723;
      v0[18] = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 12) = 2160;
      v0[19] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v57 = Handle.identifier.getter();
      unint64_t v59 = v58;
      v96(v55, v91);
      v0[20] = sub_100037004(v57, v59, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v101(v54, v107);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s Generating tokens for: %{private,mask.hash}s", (uint8_t *)v56, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(void, void))v0[115])(v0[92], v0[85]);
    }

    uint64_t v108 = (void (*)(uint64_t, uint64_t))v0[115];
    uint64_t v60 = (void (*)(uint64_t, uint64_t, uint64_t))v0[113];
    uint64_t v81 = v60;
    uint64_t v86 = (void (*)(uint64_t, uint64_t, uint64_t))v0[109];
    uint64_t v61 = v0[97];
    uint64_t v62 = v0[91];
    uint64_t v84 = v0[90];
    uint64_t v80 = v0[87];
    uint64_t v63 = v0[86];
    uint64_t v64 = v0[85];
    uint64_t v105 = v0[80];
    uint64_t v99 = v0[77];
    uint64_t v102 = v0[76];
    uint64_t v66 = v0[41];
    uint64_t v65 = v0[42];
    uint64_t v92 = v0[68];
    type metadata accessor for WorkItemQueue.WorkItem();
    uint64_t v88 = v61;
    v60(v62, v61, v64);
    uint64_t v67 = *(unsigned __int8 *)(v63 + 80);
    uint64_t v68 = (v67 + 24) & ~v67;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = v66;
    v86(v69 + v68, v62, v64);
    *(void *)(v69 + ((v68 + v80 + 7) & 0xFFFFFFFFFFFFFFF8)) = v65;
    v81(v84, v61, v64);
    uint64_t v70 = (v67 + 16) & ~v67;
    uint64_t v71 = swift_allocObject();
    v86(v71 + v70, v84, v64);
    *(void *)(v71 + ((v70 + v80 + 7) & 0xFFFFFFFFFFFFFFF8)) = v65;
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1003083D4(v92, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v105, v102);
    v108(v88, v64);
    goto LABEL_20;
  }
  uint64_t v28 = v0[59];
  uint64_t v29 = v0[60];
  uint64_t v30 = v0[58];
  sub_1000E2224(v0[68] + *(int *)(v0[65] + 36), v30);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  v0[125] = v31;
  v0[126] = (v29 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v31(v30, 1, v28) == 1)
  {
    uint64_t v32 = v0[58];
    swift_bridgeObjectRelease();
    sub_10000A520(v32, (uint64_t *)&unk_1003EE800);
    goto LABEL_11;
  }
  uint64_t v74 = v0[63];
  uint64_t v75 = v0[59];
  uint64_t v76 = v0[60];
  uint64_t v77 = v0[58];
  uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32);
  v0[127] = v78;
  v0[128] = (v76 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v78(v74, v77, v75);
  sub_100022C64(v18, v19);
  uint64_t v79 = (void *)swift_task_alloc();
  v0[129] = v79;
  *uint64_t v79 = v0;
  v79[1] = sub_1002FC6D8;
  return daemon.getter();
}

uint64_t sub_1002FC3B8()
{
  uint64_t v1 = *(void *)(v0 + 328);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002FC420, v1, 0);
}

uint64_t sub_1002FC420()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v2 = v0[97];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[80];
  uint64_t v5 = v0[77];
  uint64_t v6 = v0[76];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002FC6D8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1040) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1048) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1000474BC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_1002FC88C;
  uint64_t v8 = *(void *)(v2 + 840);
  uint64_t v9 = *(void *)(v2 + 832);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002FC88C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[132] = a1;
  v3[133] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[41];
    swift_release();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1002FF414, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[134] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1002FCA44;
    uint64_t v7 = v3[52];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1002FCA44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 328);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002FCB54, v1, 0);
}

uint64_t sub_1002FCB54()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 416);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      *(void *)(v0 + 176) = sub_100037004(0xD000000000000020, 0x8000000100379CA0, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Missing primary account to send FindingTokenRequestEnvelopeV1 with my dsid!", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v16 = *(void *)(v0 + 992);
    uint64_t v7 = *(void *)(v0 + 984);
    uint64_t v21 = *(void *)(v0 + 776);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v20 = *(void *)(v0 + 680);
    uint64_t v19 = *(void *)(v0 + 640);
    uint64_t v8 = *(void *)(v0 + 616);
    uint64_t v17 = *(void *)(v0 + 544);
    uint64_t v18 = *(void *)(v0 + 608);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v10 = *(void *)(v0 + 472);
    uint64_t v11 = *(void *)(v0 + 480);
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v12 = 16;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_1000440E8(v7, v16);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    sub_1003083D4(v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v19, v18);
    v22(v21, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 440), v3, v1);
    *(Swift::String *)(v0 + 1080) = Account.dsidBase64EncodedString()();
    unint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 1096) = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1002FD098;
    return daemon.getter();
  }
}

uint64_t sub_1002FD098(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1104) = a1;
  swift_task_dealloc();
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1112) = v5;
  uint64_t v6 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v7 = sub_1000474BC(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *os_log_type_t v5 = v4;
  v5[1] = sub_1002FD24C;
  uint64_t v8 = *(void *)(v2 + 840);
  uint64_t v9 = *(void *)(v2 + 832);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1002FD24C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[140] = a1;
  v3[141] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[41];
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v5 = sub_1002FF72C;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v3[41];
    swift_release();
    os_log_type_t v5 = sub_1002FD3B8;
    uint64_t v6 = v7;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1002FD3B8()
{
  uint64_t v86 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 776);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 680);
  v1(*(void *)(v0 + 760), v2, v4);
  v1(v3, v2, v4);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v83 = v6;
    uint64_t v64 = v5;
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
    uint64_t v7 = *(void *)(v0 + 760);
    uint64_t v67 = *(void *)(v0 + 680);
    uint64_t v8 = *(void *)(v0 + 592);
    uint64_t v65 = *(void *)(v0 + 568);
    uint64_t v76 = *(void *)(v0 + 472);
    uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
    uint64_t v73 = *(void *)(v0 + 456);
    unint64_t v68 = *(void *)(v0 + 320);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v71 = *(void *)(v0 + 312);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(void *)(v0 + 208) = 1752392040;
    v85[0] = v10;
    *(_DWORD *)uint64_t v9 = 141559555;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v7;
    Friend.handle.getter();
    uint64_t v12 = Handle.identifier.getter();
    unint64_t v14 = v13;
    v66(v8, v65);
    *(void *)(v0 + 216) = sub_100037004(v12, v14, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v69(v11, v67);
    *(_WORD *)(v9 + 22) = 2160;
    *(void *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 232) = sub_100037004(v71, v68, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 42) = 2050;
    Friend.expiry.getter();
    if (v78(v73, 1, v76) == 1)
    {
      uint64_t v15 = 0x4143C68000000000;
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 488);
      uint64_t v20 = *(void *)(v0 + 496);
      uint64_t v21 = *(void *)(v0 + 472);
      uint64_t v22 = *(void *)(v0 + 480);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 1016))(v20, *(void *)(v0 + 456), v21);
      static Date.trustedNow.getter(v19);
      Date.timeIntervalSince(_:)();
      uint64_t v15 = v23;
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v24(v19, v21);
      v24(v20, v21);
    }
    unint64_t v25 = *(void *)(v0 + 1088);
    uint64_t v26 = *(void *)(v0 + 1080);
    unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v28 = *(void *)(v0 + 752);
    uint64_t v29 = *(void *)(v0 + 680);
    *(void *)(v0 + 240) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v27(v28, v29);
    *(_WORD *)(v9 + 52) = 2160;
    *(void *)(v0 + 248) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 62) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 256) = sub_100037004(v26, v25, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v64, v83, "Sending shared secret to %{private,mask.hash}s.\nfriend ServerId: %{private,mask.hash}s\nTTL: %{public}f\nfrom my serverId: %{private,mask.hash}s over IDS.", (uint8_t *)v9, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v17 = *(void *)(v0 + 752);
    uint64_t v18 = *(void *)(v0 + 680);
    v16(*(void *)(v0 + 760), v18);
    swift_bridgeObjectRelease_n();
    v16(v17, v18);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = *(void *)(v0 + 1128);
  uint64_t v31 = *(void *)(v0 + 1088);
  uint64_t v32 = *(void *)(v0 + 1080);
  unint64_t v33 = *(void *)(v0 + 992);
  uint64_t v34 = *(void *)(v0 + 984);
  uint64_t v35 = *(void *)(v0 + 400);
  unint64_t v36 = *(char **)(v0 + 408);
  uint64_t v37 = *(void *)(v0 + 392);
  (*(void (**)(char *, void, void))(*(void *)(v0 + 480) + 16))(&v36[*(int *)(v37 + 20)], *(void *)(v0 + 504), *(void *)(v0 + 472));
  *(void *)unint64_t v36 = v32;
  *((void *)v36 + 1) = v31;
  unint64_t v38 = (uint64_t *)&v36[*(int *)(v37 + 24)];
  *unint64_t v38 = v34;
  v38[1] = v33;
  *(unsigned char *)(v0 + 1168) = 1;
  sub_10030836C((uint64_t)v36, v35, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  sub_100022C64(v34, v33);
  sub_100072920();
  sub_1000474BC(&qword_1003F4528, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
  sub_1000474BC(&qword_1003F4530, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
  Message.init<A>(type:version:payload:)();
  if (v30)
  {
    unint64_t v72 = *(void *)(v0 + 992);
    uint64_t v39 = *(void *)(v0 + 984);
    uint64_t v82 = *(void *)(v0 + 776);
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v81 = *(void *)(v0 + 680);
    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v40 = *(void *)(v0 + 616);
    uint64_t v77 = *(void *)(v0 + 544);
    uint64_t v79 = *(void *)(v0 + 608);
    uint64_t v41 = *(void *)(v0 + 480);
    uint64_t v74 = *(void *)(v0 + 472);
    uint64_t v75 = *(void *)(v0 + 504);
    uint64_t v42 = *(void *)(v0 + 432);
    uint64_t v70 = *(void *)(v0 + 440);
    uint64_t v43 = *(void *)(v0 + 424);
    uint64_t v44 = *(void *)(v0 + 408);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1000440E8(v39, v72);
    sub_1003083D4(v44, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v70, v43);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v75, v74);
    sub_1003083D4(v77, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v80, v79);
    v84(v82, v81);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    return v45();
  }
  else
  {
    sub_100044014(&qword_1003ECFC0);
    type metadata accessor for Destination();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
    Friend.handle.getter();
    char v47 = Handle.isPhoneNumber.getter();
    Handle.identifier.getter();
    if (v47) {
      Destination.init(phoneNumber:)();
    }
    else {
      Destination.init(email:)();
    }
    unint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1000);
    uint64_t v49 = *(void *)(v0 + 616);
    uint64_t v50 = *(void *)(v0 + 608);
    uint64_t v51 = *(void *)(v0 + 552);
    uint64_t v52 = *(void *)(v0 + 472);
    uint64_t v53 = *(void *)(v0 + 448);
    (*(void (**)(void, void))(v0 + 888))(*(void *)(v0 + 584), *(void *)(v0 + 568));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, 1, 1, v50);
    Friend.expiry.getter();
    if (v48(v53, 1, v52) != 1)
    {
      uint64_t v55 = *(void *)(v0 + 488);
      uint64_t v54 = *(void *)(v0 + 496);
      uint64_t v56 = *(void *)(v0 + 472);
      uint64_t v57 = *(void *)(v0 + 480);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 1016))(v54, *(void *)(v0 + 448), v56);
      static Date.trustedNow.getter(v55);
      Date.timeIntervalSince(_:)();
      unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v58(v55, v56);
      v58(v54, v56);
    }
    uint64_t v59 = *(void *)(v0 + 1120);
    sub_100044014(&qword_1003F4368);
    uint64_t v60 = type metadata accessor for MessagingCapability();
    uint64_t v61 = *(void *)(v60 - 8);
    unint64_t v62 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_100367D70;
    (*(void (**)(unint64_t, void, uint64_t))(v61 + 104))(v63 + v62, enum case for MessagingCapability.supportsPeopleFindingV1(_:), v60);
    sub_100179698(v63);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
    return _swift_task_switch(sub_1002FDFEC, v59, 0);
  }
}

uint64_t sub_1002FDFEC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[142] = v1;
  void *v1 = v0;
  v1[1] = sub_1002FE094;
  uint64_t v2 = v0[79];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[45];
  return InternetMessaging.send(message:messageOptions:)(v2, v3, v4);
}

uint64_t sub_1002FE094()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[41];
    uint64_t v4 = sub_1002FE8E8;
  }
  else
  {
    uint64_t v5 = v2[79];
    uint64_t v6 = v2[77];
    uint64_t v7 = v2[76];
    uint64_t v8 = v2[41];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[144] = v9;
    v2[145] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v4 = sub_1002FE1E0;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002FE1E0()
{
  uint64_t v61 = v0;
  (*(void (**)(void, void, void))(v0 + 904))(*(void *)(v0 + 744), *(void *)(v0 + 776), *(void *)(v0 + 680));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  uint64_t v59 = v1;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
    uint64_t v33 = *(void *)(v0 + 984);
    unint64_t v35 = *(void *)(v0 + 992);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 888);
    uint64_t v55 = *(void *)(v0 + 776);
    uint64_t v17 = *(void *)(v0 + 744);
    uint64_t v20 = *(void *)(v0 + 680);
    uint64_t v51 = *(void *)(v0 + 608);
    uint64_t v53 = *(void *)(v0 + 640);
    uint64_t v3 = *(void *)(v0 + 592);
    uint64_t v18 = *(void *)(v0 + 568);
    uint64_t v47 = *(void *)(v0 + 504);
    uint64_t v49 = *(void *)(v0 + 544);
    uint64_t v43 = *(void *)(v0 + 480);
    uint64_t v45 = *(void *)(v0 + 472);
    uint64_t v37 = *(void *)(v0 + 432);
    uint64_t v39 = *(void *)(v0 + 424);
    uint64_t v41 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 384);
    uint64_t v31 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 376);
    uint64_t v28 = *(void *)(v0 + 368);
    uint64_t v22 = *(void *)(v0 + 352);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 360);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 192) = 1752392040;
    uint64_t v60 = v5;
    *(_DWORD *)uint64_t v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    Friend.handle.getter();
    uint64_t v6 = Handle.identifier.getter();
    unint64_t v8 = v7;
    v19(v3, v18);
    *(void *)(v0 + 200) = sub_100037004(v6, v8, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21(v17, v20);
    _os_log_impl((void *)&_mh_execute_header, v59, v2, "Successfully sent finding token over IDS for %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    sub_1000440E8(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v28);
    sub_1003083D4(v31, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v41, v39);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v45);
    sub_1003083D4(v49, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    v57(v53, v51);
    v21(v55, v20);
  }
  else
  {
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1152);
    uint64_t v36 = *(void *)(v0 + 984);
    unint64_t v38 = *(void *)(v0 + 992);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
    uint64_t v56 = *(void *)(v0 + 776);
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v10 = *(void *)(v0 + 680);
    uint64_t v52 = *(void *)(v0 + 608);
    uint64_t v54 = *(void *)(v0 + 640);
    uint64_t v48 = *(void *)(v0 + 504);
    uint64_t v50 = *(void *)(v0 + 544);
    uint64_t v11 = *(void *)(v0 + 480);
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v44 = *(void *)(v0 + 440);
    uint64_t v46 = *(void *)(v0 + 472);
    uint64_t v40 = *(void *)(v0 + 408);
    uint64_t v42 = *(void *)(v0 + 424);
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v32 = *(void *)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v27 = *(void *)(v0 + 360);
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v9(v30, v10);
    sub_1000440E8(v36, v38);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v34, v32);
    sub_1003083D4(v40, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v44, v42);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v48, v46);
    sub_1003083D4(v50, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    v58(v54, v52);
    v9(v56, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1002FE8E8()
{
  uint64_t v12 = v0[123];
  unint64_t v13 = v0[124];
  uint64_t v23 = v0[97];
  uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v22 = v0[85];
  uint64_t v1 = v0[77];
  uint64_t v20 = v0[76];
  uint64_t v21 = v0[80];
  uint64_t v18 = v0[63];
  uint64_t v19 = v0[68];
  uint64_t v2 = v0[60];
  uint64_t v3 = v0[54];
  uint64_t v16 = v0[55];
  uint64_t v17 = v0[59];
  uint64_t v14 = v0[51];
  uint64_t v15 = v0[53];
  uint64_t v4 = v0[47];
  uint64_t v5 = v0[45];
  uint64_t v10 = v0[46];
  uint64_t v11 = v0[48];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000440E8(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v10);
  sub_1003083D4(v14, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v17);
  sub_1003083D4(v19, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v21, v20);
  v24(v23, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002FEC9C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002FEEFC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002FF168()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v2 = v0[97];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[80];
  uint64_t v5 = v0[77];
  uint64_t v6 = v0[76];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002FF414()
{
  unint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v13 = v0[97];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v12 = v0[85];
  uint64_t v11 = v0[80];
  uint64_t v3 = v0[77];
  uint64_t v4 = v0[76];
  uint64_t v5 = v0[68];
  uint64_t v6 = v0[63];
  uint64_t v7 = v0[59];
  uint64_t v8 = v0[60];
  swift_release();
  swift_release();
  sub_1000440E8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_1003083D4(v5, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v11, v4);
  v14(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002FF72C()
{
  unint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v16 = v0[97];
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v15 = v0[85];
  uint64_t v3 = v0[77];
  uint64_t v13 = v0[76];
  uint64_t v14 = v0[80];
  uint64_t v11 = v0[63];
  uint64_t v12 = v0[68];
  uint64_t v4 = v0[60];
  uint64_t v10 = v0[59];
  uint64_t v5 = v0[54];
  uint64_t v6 = v0[55];
  uint64_t v7 = v0[53];
  swift_release();
  swift_release();
  swift_release();
  sub_1000440E8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v10);
  sub_1003083D4(v12, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v13);
  v17(v16, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002FFA74(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 80) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a3;
  return _swift_task_switch(sub_1002FFA98, 0, 0);
}

uint64_t sub_1002FFA98()
{
  if (*(unsigned char *)(v0 + 80))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C330);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 24);
    if (v7)
    {
      uint64_t v17 = v5;
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138543362;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v10;
      uint64_t v5 = v17;
      sub_1001D5B10(v8, 1);
      sub_1001D5B10(v8, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v6, "respondToFindingTokenRequest error: %{public}@", v9, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 24), 1);
      sub_1001D5B10(v8, 1);
    }

    uint64_t v11 = *(void *)(v0 + 24);
    sub_1002ACC80();
    uint64_t v12 = swift_allocError();
    *(void *)(v0 + 56) = v12;
    *uint64_t v13 = v11;
    swift_errorRetain();
    unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 64) = v1;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1002FFDD0;
    uint64_t v3 = v12;
  }
  else
  {
    unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 40) = v1;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100308688;
    uint64_t v3 = 0;
  }
  return sub_1002D99E0(0xD00000000000003DLL, 0x80000001003733C0, v3, v1);
}

uint64_t sub_1002FFDD0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_10030867C, 0, 0);
}

uint64_t sub_1002FFF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *os_log_type_t v6 = v3;
  v6[1] = sub_10004A274;
  return sub_1002FFFB0(a2, a3);
}

uint64_t sub_1002FFFB0(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v3[20] = *v2;
  uint64_t v4 = type metadata accessor for CloudKitCoordinator.Database();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  sub_100044014(&qword_1003EF468);
  v3[24] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v3[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendSharedSecretsRecord();
  v3[26] = v5;
  v3[27] = *(void *)(v5 - 8);
  v3[28] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v3[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Handle();
  v3[30] = v6;
  v3[31] = *(void *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[34] = v7;
  v3[35] = *(void *)(v7 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HandleType();
  v3[38] = v8;
  v3[39] = *(void *)(v8 - 8);
  v3[40] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v3[41] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Friend();
  v3[42] = v9;
  v3[43] = *(void *)(v9 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  return _swift_task_switch(sub_100300370, v2, 0);
}

uint64_t sub_100300370()
{
  uint64_t v12 = v0;
  uint64_t v1 = qword_1003EC430;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[48] = sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unint64_t v6 = v0[18];
  if (v5)
  {
    uint64_t v10 = v0[17];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446723;
    v0[14] = sub_100037004(0xD000000000000016, 0x8000000100379CD0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2160;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2081;
    swift_bridgeObjectRetain();
    v0[16] = sub_100037004(v10, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s for handle.serverId: %{private,mask.hash}s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[49] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100300614;
  return daemon.getter();
}

uint64_t sub_100300614(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[50] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[51] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[52] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[53] = v6;
  uint64_t v7 = sub_1000474BC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1003007F4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1003007F4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[19];
    uint64_t v5 = sub_100302A0C;
  }
  else
  {
    uint64_t v6 = v3[19];
    swift_release();
    uint64_t v5 = sub_10030091C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10030091C()
{
  (*(void (**)(void, void, void))(v0[39] + 104))(v0[40], enum case for HandleType.following(_:), v0[38]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[56] = v1;
  void *v1 = v0;
  v1[1] = sub_1003009E0;
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  return sub_10010F2F4(v2, v4, v5, v3, 1);
}

uint64_t sub_1003009E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  uint64_t v2 = *(void *)(*(void *)v0 + 312);
  uint64_t v3 = *(void *)(*(void *)v0 + 304);
  uint64_t v4 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100300B4C, v4, 0);
}

uint64_t sub_100300B4C()
{
  uint64_t v45 = v0;
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[41];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = &qword_1003ECFE8;
LABEL_5:
    sub_10000A520(v3, v4);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[18];
    if (v13)
    {
      uint64_t v15 = v0[17];
      uint64_t v16 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      swift_bridgeObjectRetain();
      v0[3] = sub_100037004(v15, v14, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No following with serverID: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  uint64_t v5 = v0[35];
  os_log_t log = (os_log_t)v0[34];
  uint64_t v6 = v0[33];
  uint64_t v8 = v0[30];
  uint64_t v7 = v0[31];
  uint64_t v9 = v0[29];
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[47], v3, v1);
  Friend.handle.getter();
  Handle.peerID.getter();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[57] = v10;
  v0[58] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v6, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, os_log_t))(v5 + 48))(v9, 1, log) == 1)
  {
    uint64_t v3 = v0[29];
    (*(void (**)(void, void))(v0[43] + 8))(v0[47], v0[42]);
    uint64_t v4 = &qword_1003ECFB8;
    goto LABEL_5;
  }
  uint64_t v19 = v0[47];
  uint64_t v20 = v0[46];
  uint64_t v21 = v0[42];
  uint64_t v22 = v0[43];
  (*(void (**)(void, void, void))(v0[35] + 32))(v0[37], v0[29], v0[34]);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  v0[59] = v23;
  v0[60] = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v23(v20, v19, v21);
  swift_bridgeObjectRetain();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = v0[46];
  uint64_t v29 = v0[42];
  uint64_t v28 = v0[43];
  if (v26)
  {
    os_log_type_t type = v25;
    uint64_t v39 = v0[46];
    uint64_t v30 = v0[32];
    uint64_t v40 = v0[30];
    uint64_t v41 = v0[42];
    unint64_t v31 = v0[18];
    uint64_t v38 = v0[17];
    uint64_t v32 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 141558787;
    v0[10] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12) = 2081;
    swift_bridgeObjectRetain();
    v0[11] = sub_100037004(v38, v31, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 22) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 32) = 2081;
    Friend.handle.getter();
    uint64_t v33 = Handle.identifier.getter();
    unint64_t v35 = v34;
    v10(v30, v40);
    v0[13] = sub_100037004(v33, v35, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v36(v39, v41);
    _os_log_impl((void *)&_mh_execute_header, v24, type, "Found following with serverID: %{private,mask.hash}s\nhandleId: %{private,mask.hash}s", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v36(v27, v29);
  }
  v0[61] = v36;
  uint64_t v37 = (void *)swift_task_alloc();
  v0[62] = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_1003011DC;
  return daemon.getter();
}

uint64_t sub_1003011DC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 504) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 512) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1000474BC(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_100301390;
  uint64_t v8 = *(void *)(v2 + 424);
  uint64_t v9 = *(void *)(v2 + 416);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100301390(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[65] = a1;
  v3[66] = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v4 = v3[19];
    uint64_t v5 = sub_100302B48;
  }
  else
  {
    uint64_t v5 = sub_1003014D8;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1003014D8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[67] = v1;
  void *v1 = v0;
  v1[1] = sub_100301578;
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[25];
  return sub_1000F6B40(v3, v2);
}

uint64_t sub_100301578()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v4 = sub_100301B24;
  }
  else {
    uint64_t v4 = sub_1003016A4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1003016A4()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[27] + 48))(v1, 1, v0[26]) == 1)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[59];
    uint64_t v3 = v0[47];
    uint64_t v4 = v0[44];
    uint64_t v5 = v0[42];
    sub_10000A520(v1, &qword_1003EEEB8);
    v2(v4, v3, v5);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[61];
    if (v8)
    {
      os_log_type_t type = v7;
      uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[57];
      uint64_t v31 = v0[47];
      uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[61];
      uint64_t v10 = v0[44];
      uint64_t v29 = v0[42];
      uint64_t v11 = v0[32];
      uint64_t v26 = v0[30];
      uint64_t v12 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446723;
      v0[4] = sub_100037004(0xD000000000000016, 0x8000000100379CD0, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2160;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2081;
      Friend.handle.getter();
      uint64_t v13 = Handle.identifier.getter();
      unint64_t v15 = v14;
      v27(v11, v26);
      v0[6] = sub_100037004(v13, v15, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v30(v10, v29);
      _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s.", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();

      v30(v31, v29);
    }
    else
    {
      uint64_t v21 = v0[47];
      uint64_t v22 = v0[44];
      uint64_t v23 = v0[42];
      swift_release();
      swift_release();

      v9(v22, v23);
      v9(v21, v23);
    }
    (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    uint64_t v16 = v0[65];
    uint64_t v17 = v0[37];
    uint64_t v18 = v0[28];
    uint64_t v19 = v0[20];
    sub_100308304(v1, v18, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[69] = v20;
    uint64_t v20[2] = v18;
    v20[3] = v17;
    v20[4] = v19;
    return _swift_task_switch(sub_100301CA4, v16, 0);
  }
}

uint64_t sub_100301B24()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  swift_release();
  swift_release();
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100301CA4()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                                        + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[70] = v1;
  void *v1 = v0;
  v1[1] = sub_100301D6C;
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[24];
  return v5(v3, &unk_1003F4698, v2);
}

uint64_t sub_100301D6C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 520);
    uint64_t v4 = sub_100302104;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 152);
    swift_task_dealloc();
    uint64_t v4 = sub_100301E94;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100301E94()
{
  uint64_t v1 = v0[65];
  (*(void (**)(void, void, void))(v0[22] + 104))(v0[23], enum case for CloudKitCoordinator.Database.private(_:), v0[21]);
  return _swift_task_switch(sub_100301F1C, v1, 0);
}

uint64_t sub_100301F1C()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                                + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[72] = v1;
  void *v1 = v0;
  v1[1] = sub_100301FCC;
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  return v5(v3, v2);
}

uint64_t sub_100301FCC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[65];
    uint64_t v4 = sub_100302310;
  }
  else
  {
    uint64_t v5 = v2[19];
    (*(void (**)(void, void))(v2[22] + 8))(v2[23], v2[21]);
    uint64_t v4 = sub_100302544;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100302104()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_task_dealloc();
  return _swift_task_switch(sub_100302170, v1, 0);
}

uint64_t sub_100302170()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[28];
  swift_release();
  swift_release();
  v1(v2, v3);
  sub_1003083D4(v7, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100302310()
{
  uint64_t v1 = v0[19];
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  return _swift_task_switch(sub_10030238C, v1, 0);
}

uint64_t sub_10030238C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[42];
  uint64_t v10 = v0[37];
  uint64_t v5 = v0[34];
  uint64_t v4 = v0[35];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[24];
  swift_release();
  swift_release();
  sub_10000A520(v7, &qword_1003EF468);
  v1(v2, v3);
  sub_1003083D4(v6, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100302544()
{
  uint64_t v41 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[59];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[42];
  (*(void (**)(void, void, void))(v0[35] + 16))(v0[36], v0[37], v0[34]);
  v1(v3, v2, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v39 = v5;
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v35 = (void (*)(uint64_t, uint64_t))v0[61];
    uint64_t v32 = (void (*)(uint64_t, uint64_t))v0[57];
    uint64_t v37 = v0[47];
    uint64_t v33 = v0[42];
    os_log_type_t type = v6;
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[36];
    uint64_t v9 = v0[34];
    uint64_t v28 = v0[32];
    uint64_t v29 = v0[45];
    uint64_t v30 = v0[30];
    uint64_t v36 = v0[24];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446723;
    sub_1000474BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = sub_100037004(v11, v12, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v31(v8, v9);
    *(_WORD *)(v10 + 12) = 2160;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2081;
    Friend.handle.getter();
    uint64_t v13 = Handle.identifier.getter();
    unint64_t v15 = v14;
    v32(v28, v30);
    v0[9] = sub_100037004(v13, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v35(v29, v33);
    _os_log_impl((void *)&_mh_execute_header, v39, type, "Successfully removed outgoingSharedSecret for %{public}s %{private,mask.hash}s\")", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    sub_10000A520(v36, &qword_1003EF468);
    uint64_t v16 = v31;
    v35(v37, v33);
  }
  else
  {
    uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[61];
    uint64_t v38 = v0[47];
    uint64_t v18 = v0[45];
    uint64_t v19 = v0[42];
    uint64_t v20 = v0[35];
    uint64_t v21 = v0[36];
    uint64_t v22 = v0[34];
    uint64_t v23 = v0[24];
    swift_release();
    swift_release();

    v17(v18, v19);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v16(v21, v22);
    sub_10000A520(v23, &qword_1003EF468);
    v17(v38, v19);
  }
  uint64_t v24 = v0[37];
  uint64_t v25 = v0[34];
  sub_1003083D4(v0[28], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  v16(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_100302A0C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100302B48()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[47];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[35];
  swift_release();
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100302CBC(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100302D4C;
  return sub_1003108EC();
}

uint64_t sub_100302D4C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(unsigned char *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100302E64, v2, 0);
}

uint64_t sub_100302E64()
{
  uint64_t v10 = v0;
  switch(*(unsigned char *)(v0 + 96))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v1) {
        goto LABEL_4;
      }
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100044058(v3, (uint64_t)qword_10040C330);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136446210;
        *(void *)(v0 + 16) = sub_100037004(0xD000000000000018, 0x8000000100379CF0, &v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Not findable device.", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v7();
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 48) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100303170;
      uint64_t result = daemon.getter();
      break;
  }
  return result;
}

uint64_t sub_100303170(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NIRangingService();
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000474BC(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *uint64_t v3 = v9;
  v3[1] = sub_10030334C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10030334C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = sub_1001D731C;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 32);
    swift_release();
    *(void *)(v4 + 80) = a1;
    uint64_t v6 = sub_10030348C;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10030348C()
{
  uint64_t v1 = *(uint64_t **)(v0 + 24);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)v1 + *(int *)(type metadata accessor for FindingConfigEnvelopeV1(0) + 24);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10030355C;
  return sub_1002A000C(v3, v2, v4, v5, v6);
}

uint64_t sub_10030355C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_100174CFC, v1, 0);
}

uint64_t sub_10030366C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1003036FC;
  return sub_1003108EC();
}

uint64_t sub_1003036FC(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(unsigned char *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100303814, v2, 0);
}

uint64_t sub_100303814()
{
  uint64_t v10 = v0;
  switch(*(unsigned char *)(v0 + 96))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v1) {
        goto LABEL_4;
      }
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100044058(v3, (uint64_t)qword_10040C330);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136446210;
        *(void *)(v0 + 16) = sub_100037004(0xD00000000000001CLL, 0x8000000100379D10, &v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Not findable device.", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v7();
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 48) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100303B20;
      uint64_t result = daemon.getter();
      break;
  }
  return result;
}

uint64_t sub_100303B20(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NIRangingService();
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000474BC(&qword_1003F14F8, (void (*)(uint64_t))type metadata accessor for NIRangingService);
  *uint64_t v3 = v9;
  v3[1] = sub_100303CFC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100303CFC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = sub_100308684;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 32);
    swift_release();
    *(void *)(v4 + 80) = a1;
    uint64_t v6 = sub_100303E3C;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100303E3C()
{
  uint64_t v1 = *(uint64_t **)(v0 + 24);
  uint64_t v2 = (uint64_t)v1 + *(int *)(type metadata accessor for FindingConfigSessionStopEnvelopeV1(0) + 20);
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100303EF8;
  return sub_10029F6B4(v2, v3, v4);
}

uint64_t sub_100303EF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_100308680, v1, 0);
}

uint64_t sub_100304008(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100304028, v1, 0);
}

uint64_t sub_100304028()
{
  uint64_t v11 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for Account();
    sub_1000474BC(&qword_1003ECEB8, (void (*)(uint64_t))&type metadata accessor for Account);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging accounts changed. Accounts: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100304280(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Device();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10030435C, v1, 0);
}

uint64_t sub_10030435C()
{
  uint64_t v11 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_1000474BC(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[5] = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging devices changed. Devices: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1003045E8;
  return daemon.getter();
}

uint64_t sub_1003045E8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 120) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 128) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v6 = sub_1000474BC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000474BC(&qword_1003F14A8, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  *os_log_type_t v3 = v9;
  v3[1] = sub_1003047C4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1003047C4(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[7];
    uint64_t v5 = sub_100304F00;
  }
  else
  {
    uint64_t v6 = v3[7];
    swift_release();
    uint64_t v5 = sub_1003048EC;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1003048EC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 184) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 56);
  uint64_t v6 = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      uint64_t v6 = *(void *)(v0 + 48);
      goto LABEL_23;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return _swift_task_switch(v6, v7, v8);
    }
    int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 184)) + 63) >> 6;
    uint64_t v6 = *(void *)(v0 + 48);
    if (v13 >= v14) {
      goto LABEL_28;
    }
    uint64_t v15 = v6 + 56;
    unint64_t v16 = *(void *)(v6 + 56 + 8 * v13);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_23:
    *(void *)(v0 + 152) = v9;
    *(void *)(v0 + 160) = v5;
    unint64_t v18 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16);
    v23(v19, *(void *)(v6 + 48) + *(void *)(v21 + 72) * v12, v22);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 32))(v18, v19, v22);
    LOBYTE(v21) = Device.isLocallyPaired.getter();
    v23(v20, v18, v22);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 72) + 8;
    if (v21)
    {
      char v27 = Device.isConnected.getter();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))v26;
      *(void *)(v0 + 168) = *(void *)v26;
      *(void *)(v0 + 176) = v26 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v10(v24, v25);
      if (v27)
      {
        uint64_t v7 = *(void *)(v0 + 136);
        uint64_t v6 = (uint64_t)sub_100304BCC;
        uint64_t v8 = 0;
        return _swift_task_switch(v6, v7, v8);
      }
    }
    else
    {
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))v26;
      (*(void (**)(void, void))v26)(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }
    uint64_t v6 = ((uint64_t (*)(void, void))v10)(*(void *)(v0 + 88), *(void *)(v0 + 64));
  }
  int64_t v17 = v13 + 3;
  if (v17 < v14)
  {
    unint64_t v16 = *(void *)(v15 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v9 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_32;
        }
        if (v9 >= v14) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        ++v17;
        if (v16) {
          goto LABEL_22;
        }
      }
    }
    int64_t v9 = v17;
    goto LABEL_22;
  }
LABEL_28:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100304BCC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_1002CF150(*(void *)(v0 + 88), 0);
  return _swift_task_switch(sub_100304C40, v1, 0);
}

uint64_t sub_100304C40()
{
  uint64_t v1 = (uint64_t (*)())(*(uint64_t (**)(void, void))(v0 + 168))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  int64_t v4 = *(void *)(v0 + 152);
  unint64_t v5 = *(void *)(v0 + 160);
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      uint64_t v1 = *(uint64_t (**)())(v0 + 48);
      goto LABEL_20;
    }
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return _swift_task_switch(v1, v2, v3);
    }
    int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v0 + 184)) + 63) >> 6;
    uint64_t v1 = *(uint64_t (**)())(v0 + 48);
    if (v9 >= v10) {
      goto LABEL_25;
    }
    unint64_t v11 = (char *)v1 + 56;
    unint64_t v12 = *((void *)v1 + v9 + 7);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v9 + 1;
      if (v9 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)&v11[8 * v4];
      if (!v12)
      {
        int64_t v4 = v9 + 2;
        if (v9 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)&v11[8 * v4];
        if (!v12) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v8 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_20:
    *(void *)(v0 + 152) = v4;
    *(void *)(v0 + 160) = v5;
    unint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    v19(v15, *((void *)v1 + 6) + *(void *)(v17 + 72) * v8, v18);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v14, v15, v18);
    LOBYTE(v17) = Device.isLocallyPaired.getter();
    v19(v16, v14, v18);
    uint64_t v20 = *(void *)(v0 + 80);
    uint64_t v21 = *(void *)(v0 + 64);
    uint64_t v22 = *(void *)(v0 + 72) + 8;
    if (v17)
    {
      char v23 = Device.isConnected.getter();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))v22;
      *(void *)(v0 + 168) = *(void *)v22;
      *(void *)(v0 + 176) = v22 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v6(v20, v21);
      if (v23)
      {
        uint64_t v2 = *(void *)(v0 + 136);
        uint64_t v1 = sub_100304BCC;
        uint64_t v3 = 0;
        return _swift_task_switch(v1, v2, v3);
      }
    }
    else
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))v22;
      (*(void (**)(void, void))v22)(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }
    uint64_t v1 = (uint64_t (*)())((uint64_t (*)(void, void))v6)(*(void *)(v0 + 88), *(void *)(v0 + 64));
  }
  int64_t v13 = v9 + 3;
  if (v13 < v10)
  {
    unint64_t v12 = *(void *)&v11[8 * v13];
    if (!v12)
    {
      while (1)
      {
        int64_t v4 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v4 >= v10) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)&v11[8 * v4];
        ++v13;
        if (v12) {
          goto LABEL_19;
        }
      }
    }
    int64_t v4 = v13;
    goto LABEL_19;
  }
LABEL_25:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100304F00()
{
  int64_t v10 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[18];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000018, 0x8000000100379A30, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[3] = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100305140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_10004A274;
  return sub_1002F5D1C(a1, a2, a3);
}

uint64_t sub_1003051F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003F45C8 + dword_1003F45C8);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_10004A274;
  return v9(a1, a2, a3);
}

uint64_t sub_1003052C4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  v5[3] = a1;
  return _swift_task_switch(sub_100304028, v4, 0);
}

uint64_t sub_100305374(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_100304280(a1);
}

uint64_t sub_10030540C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100305430, 0, 0);
}

uint64_t sub_100305430()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v4 = sub_1000474BC(&qword_1003EF710, (void (*)(uint64_t))type metadata accessor for FriendSharedSecretsRecord);
  *uint64_t v2 = v0;
  v2[1] = sub_1002C6C64;
  uint64_t v5 = *(void *)(v0 + 24);
  return CloudKitChangeSet.Adaptor.update<A>(record:updateBlock:)(v5, sub_100308674, v1, v3, v4);
}

uint64_t sub_100305548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v21 = a1;
    unint64_t v12 = (uint8_t *)v11;
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 136446210;
    sub_1000474BC(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = sub_100037004(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Removing outgoingSharedSecret for %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v21;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v15 = type metadata accessor for FriendSharedSecretsRecord();
  uint64_t v16 = a1 + *(int *)(v15 + 24);
  sub_1000440E8(*(void *)v16, *(void *)(v16 + 8));
  *(_OWORD *)uint64_t v16 = xmmword_10036CD90;
  uint64_t v17 = a1 + *(int *)(v15 + 28);
  sub_10000A520(v17, (uint64_t *)&unk_1003EE800);
  uint64_t v18 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
}

uint64_t sub_100305864(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100305888, 0, 0);
}

uint64_t sub_100305888()
{
  if (*(unsigned char *)(v0 + 32))
  {
    swift_errorRetain();
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040C330);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 24);
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138543362;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      sub_1001D5B10(v5, 1);
      sub_1001D5B10(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "revokeFindingToken error: %{public}@", v6, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D5B10(v5, 1);
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 24), 1);
      sub_1001D5B10(v5, 1);
      swift_errorRelease();
    }
  }
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100305AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[33] = *v3;
  v4[34] = type metadata accessor for FindingConfigSessionStopEnvelopeV1(0);
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = type metadata accessor for FindingConfigEnvelopeV1(0);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  type metadata accessor for UUID();
  v4[40] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FindingTokenEnvelopeV1();
  v4[41] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[42] = v6;
  v4[43] = *(void *)(v6 + 64);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  uint64_t v7 = sub_100044014(&qword_1003ECF50);
  v4[47] = v7;
  v4[48] = *(void *)(v7 - 8);
  v4[49] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  v4[50] = v8;
  v4[51] = *(void *)(v8 - 8);
  v4[52] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Account();
  v4[53] = v9;
  v4[54] = *(void *)(v9 - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  return _swift_task_switch(sub_100305D9C, v3, 0);
}

uint64_t sub_100305D9C()
{
  uint64_t v108 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 408);
  uint64_t v97 = *(void *)(v0 + 416);
  uint64_t v6 = *(void *)(v0 + 384);
  uint64_t v101 = *(void *)(v0 + 376);
  uint64_t v103 = *(void *)(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v99 = *(void *)(v0 + 400);
  uint64_t v100 = *(void *)(v0 + 248);
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v0 + 456) = sub_100044058(v8, (uint64_t)qword_10040C330);
  uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v96(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v97, v7, v99);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v103, v100, v101);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 448);
  if (v11)
  {
    uint64_t v102 = v9;
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v13 = *(void *)(v0 + 440);
    uint64_t v15 = *(void *)(v0 + 424);
    uint64_t v91 = *(void *)(v0 + 400);
    uint64_t v92 = *(void *)(v0 + 416);
    uint64_t v95 = *(void *)(v0 + 392);
    uint64_t v98 = *(void *)(v0 + 384);
    uint64_t v93 = *(void *)(v0 + 408);
    uint64_t v94 = *(void *)(v0 + 376);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136447747;
    *(void *)(v0 + 184) = sub_100037004(0xD00000000000003ELL, 0x8000000100373AE0, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2160;
    *(void *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    v96(v13, v12, v15);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 200) = sub_100037004(v17, v18, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    *(_WORD *)(v16 + 32) = 2160;
    *(void *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 2081;
    sub_1000474BC(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_100037004(v19, v20, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v91);
    *(_WORD *)(v16 + 52) = 2160;
    *(void *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 62) = 2081;
    sub_1003082A0();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = sub_100037004(v21, v22, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v95, v94);
    _os_log_impl((void *)&_mh_execute_header, v102, v10, "%{public}s\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v16, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v23 = *(void *)(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v26 = *(void *)(v0 + 400);
    uint64_t v27 = *(void *)(v0 + 376);
    uint64_t v28 = *(void *)(v0 + 384);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 432) + 8))(v12, *(void *)(v0 + 424));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v26);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v27);
  }
  Message.type.getter();
  uint64_t v104 = (void *)v0;
  switch(*(unsigned char *)(v0 + 496))
  {
    case 1:
      sub_1000474BC(&qword_1003F4528, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
      sub_1000474BC(&qword_1003F4530, (void (*)(uint64_t))type metadata accessor for FindingTokenEnvelopeV1);
      Message.extract<A>()();
      sub_10030836C(*(void *)(v0 + 368), *(void *)(v0 + 360), (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v33 = *(void *)(v0 + 360);
      if (v32)
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 141558275;
        *(void *)(v0 + 168) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 12) = 2081;
        uint64_t v35 = sub_1002010C4();
        *(void *)(v0 + 176) = sub_100037004(v35, v36, &v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003083D4(v33, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Extracted FindingTokenEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1003083D4(*(void *)(v0 + 360), (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      }

      uint64_t v29 = (void *)v0;
      uint64_t v73 = *(void *)(v0 + 368);
      uint64_t v74 = *(void *)(v0 + 352);
      uint64_t v75 = v104[42];
      uint64_t v76 = v104[32];
      uint64_t v77 = v104[33];
      type metadata accessor for WorkItemQueue.WorkItem();
      sub_10030836C(v73, v74, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      unint64_t v78 = (*(unsigned __int8 *)(v75 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v76;
      sub_100308304(v74, v79 + v78, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      *(void *)(swift_allocObject() + 16) = v77;
      swift_retain();
      UUID.init()();
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
      dispatch thunk of WorkItemQueue.enqueue(_:)();
      swift_release();
      sub_1003083D4(v73, (uint64_t (*)(void))type metadata accessor for FindingTokenEnvelopeV1);
      break;
    case 3:
      uint64_t v29 = (void *)v0;
      sub_100307DCC();
      sub_100307E20();
      Message.extract<A>()();
      uint64_t v38 = *(void *)(v0 + 32);
      uint64_t v37 = *(void **)(v0 + 40);
      swift_bridgeObjectRetain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v105 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 141558275;
        *(void *)(v0 + 152) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 12) = 2081;
        uint64_t v106 = 0;
        unint64_t v107 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(22);
        *(void *)(v0 + 16) = v38;
        *(void *)(v0 + 24) = v37;
        sub_100201C50();
        uint64_t v42 = CustomStringConvertible.typeDescription.getter();
        unint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v106 = v42;
        unint64_t v107 = v44;
        v45._object = (void *)0x8000000100377C50;
        v45._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v45);
        swift_bridgeObjectRetain();
        v46._uint64_t countAndFlagsBits = v38;
        v46._object = v37;
        String.append(_:)(v46);
        swift_bridgeObjectRelease_n();
        *(void *)(v0 + 160) = sub_100037004(v106, v107, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Extracted FindingTokenRequestEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        uint64_t v29 = (void *)v0;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v80 = v29[32];
      uint64_t v81 = v29[33];
      type metadata accessor for WorkItemQueue.WorkItem();
      uint64_t v82 = (void *)swift_allocObject();
      v82[2] = v80;
      v82[3] = v38;
      v82[4] = v37;
      *(void *)(swift_allocObject() + 16) = v81;
      swift_retain();
      UUID.init()();
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
      goto LABEL_32;
    case 4:
      uint64_t v47 = (uint64_t *)v0;
      sub_1000474BC(&qword_1003F3920, (void (*)(uint64_t))type metadata accessor for FindingConfigEnvelopeV1);
      sub_1000474BC(&qword_1003F3928, (void (*)(uint64_t))type metadata accessor for FindingConfigEnvelopeV1);
      Message.extract<A>()();
      sub_10030836C(v47[39], v47[38], type metadata accessor for FindingConfigEnvelopeV1);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v51 = *(void *)(v0 + 304);
      if (v50)
      {
        uint64_t v52 = swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 141558275;
        *(void *)(v0 + 88) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v52 + 12) = 2081;
        unint64_t v53 = sub_1001FE778();
        *(void *)(v0 + 96) = sub_100037004(v53, v54, &v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003083D4(v51, type metadata accessor for FindingConfigEnvelopeV1);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "NIRangingService Extracted FindingConfigEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
        swift_arrayDestroy();
        uint64_t v47 = (uint64_t *)v0;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1003083D4(*(void *)(v0 + 304), type metadata accessor for FindingConfigEnvelopeV1);
      }

      os_log_type_t v83 = (void *)swift_task_alloc();
      v47[58] = (uint64_t)v83;
      *os_log_type_t v83 = v47;
      v83[1] = sub_1003072F8;
      uint64_t v84 = v47[39];
      return sub_100302CBC(v84);
    case 5:
      uint64_t v55 = (uint64_t *)v0;
      sub_1000474BC(&qword_1003F45D0, (void (*)(uint64_t))type metadata accessor for FindingConfigSessionStopEnvelopeV1);
      sub_1000474BC(&qword_1003F45D8, (void (*)(uint64_t))type metadata accessor for FindingConfigSessionStopEnvelopeV1);
      Message.extract<A>()();
      sub_10030836C(v55[36], v55[35], type metadata accessor for FindingConfigSessionStopEnvelopeV1);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = *(void *)(v0 + 280);
      if (v58)
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 141558275;
        *(void *)(v0 + 104) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v60 + 12) = 2081;
        unint64_t v61 = sub_1001FF048();
        *(void *)(v0 + 80) = sub_100037004(v61, v62, &v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003083D4(v59, type metadata accessor for FindingConfigSessionStopEnvelopeV1);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "NIRangingService Extracted FindingConfigSessionStopEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        uint64_t v55 = (uint64_t *)v0;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1003083D4(*(void *)(v0 + 280), type metadata accessor for FindingConfigSessionStopEnvelopeV1);
      }

      uint64_t v86 = (void *)swift_task_alloc();
      v55[60] = (uint64_t)v86;
      *uint64_t v86 = v55;
      v86[1] = sub_10030753C;
      uint64_t v87 = v55[36];
      return sub_10030366C(v87);
    case 6:
      uint64_t v29 = (void *)v0;
      sub_100307C78();
      sub_100307CCC();
      Message.extract<A>()();
      uint64_t v64 = *(void *)(v0 + 64);
      uint64_t v63 = *(void **)(v0 + 72);
      swift_bridgeObjectRetain_n();
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v105 = swift_slowAlloc();
        *(_DWORD *)uint64_t v67 = 141558275;
        *(void *)(v0 + 112) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v67 + 12) = 2081;
        uint64_t v106 = 0;
        unint64_t v107 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(22);
        *(void *)(v0 + 48) = v64;
        *(void *)(v0 + 56) = v63;
        sub_100202204();
        uint64_t v68 = CustomStringConvertible.typeDescription.getter();
        unint64_t v70 = v69;
        swift_bridgeObjectRelease();
        uint64_t v106 = v68;
        unint64_t v107 = v70;
        v71._object = (void *)0x8000000100377C50;
        v71._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v71);
        swift_bridgeObjectRetain();
        v72._uint64_t countAndFlagsBits = v64;
        v72._object = v63;
        String.append(_:)(v72);
        swift_bridgeObjectRelease_n();
        *(void *)(v0 + 128) = sub_100037004(v106, v107, &v105);
        uint64_t v29 = (void *)v0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Extracted FindingTokenRevokeEnvelopeV1: %{private,mask.hash}s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v88 = v29[32];
      type metadata accessor for WorkItemQueue.WorkItem();
      uint64_t v89 = (void *)swift_allocObject();
      v89[2] = v88;
      v89[3] = v64;
      v89[4] = v63;
      swift_retain();
      UUID.init()();
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
LABEL_32:
      dispatch thunk of WorkItemQueue.enqueue(_:)();
      swift_release();
      break;
    default:
      uint64_t v29 = (void *)v0;
      break;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v90 = (uint64_t (*)(void))v29[1];
  return v90();
}

uint64_t sub_1003072F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 472) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_100307780;
  }
  else {
    uint64_t v4 = sub_100307424;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100307424()
{
  sub_1003083D4(*(void *)(v0 + 312), type metadata accessor for FindingConfigEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10030753C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_1003079FC;
  }
  else {
    uint64_t v4 = sub_100307668;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100307668()
{
  sub_1003083D4(*(void *)(v0 + 288), type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100307780()
{
  BOOL v11 = v0;
  sub_1003083D4(v0[39], type metadata accessor for FindingConfigEnvelopeV1);
  uint64_t v1 = v0[59];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v10 = v5;
    v0[17] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[15] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "messageReceived handler error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1003079FC()
{
  BOOL v11 = v0;
  sub_1003083D4(v0[36], type metadata accessor for FindingConfigSessionStopEnvelopeV1);
  uint64_t v1 = v0[61];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v10 = v5;
    v0[17] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[15] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "messageReceived handler error: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

unint64_t sub_100307C78()
{
  unint64_t result = qword_1003F45F0;
  if (!qword_1003F45F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F45F0);
  }
  return result;
}

unint64_t sub_100307CCC()
{
  unint64_t result = qword_1003F45F8;
  if (!qword_1003F45F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F45F8);
  }
  return result;
}

uint64_t sub_100307D24()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1002FFF04(v2, v3, v4);
}

unint64_t sub_100307DCC()
{
  unint64_t result = qword_1003F4618;
  if (!qword_1003F4618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4618);
  }
  return result;
}

unint64_t sub_100307E20()
{
  unint64_t result = qword_1003F4620;
  if (!qword_1003F4620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F4620);
  }
  return result;
}

uint64_t sub_100307E78()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100018CD0;
  return sub_1002F8E74(v2, v3, v4);
}

uint64_t sub_100307F20()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100307F30(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_10004A274;
  *(unsigned char *)(v7 + 80) = v5;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = v6;
  return _swift_task_switch(sub_1002FFA98, 0, 0);
}

uint64_t sub_100307FF0()
{
  uint64_t v1 = (int *)(type metadata accessor for FindingTokenEnvelopeV1() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  sub_100044090(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1003080FC()
{
  uint64_t v2 = *(void *)(type metadata accessor for FindingTokenEnvelopeV1() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_1002F630C(v3, v4);
}

uint64_t sub_1003081D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003081E0(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_100018CD0;
  *(unsigned char *)(v7 + 80) = v5;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = v6;
  return _swift_task_switch(sub_1002F89A4, 0, 0);
}

unint64_t sub_1003082A0()
{
  unint64_t result = qword_1003ECF58;
  if (!qword_1003ECF58)
  {
    sub_10004AE58(&qword_1003ECF50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003ECF58);
  }
  return result;
}

uint64_t sub_100308304(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10030836C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003083D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100308438()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100308514()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003085B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10004A274;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100305430, 0, 0);
}

uint64_t sub_100308674(uint64_t a1)
{
  return sub_100305548(a1, *(void *)(v1 + 16));
}

uint64_t sub_10030868C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for DiscoveryToken.Bucket(0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100309990();
  sub_100308AA8(a3, a4, v14, (uint64_t)v13);
  id v15 = sub_1003095E8(a1, a2, *(void *)&v13[*(int *)(v11 + 28)], 0);
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = type metadata accessor for DiscoveryToken(0);
    sub_100309D78((uint64_t)v13, (uint64_t)a5 + *(int *)(v17 + 20));
    *a5 = v16;
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a5, 0, 1, v17);
  }
  else
  {
    sub_100309D1C((uint64_t)v13);
    uint64_t v19 = type metadata accessor for DiscoveryToken(0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a5, 1, 1, v19);
  }
}

uint64_t sub_1003087F8()
{
  _StringGuts.grow(_:)(54);
  type metadata accessor for DiscoveryToken(0);
  sub_100309CB4(&qword_1003F46C0, (void (*)(uint64_t))type metadata accessor for DiscoveryToken);
  v1._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6E656B6F54696E20;
  v2._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v2);
  id v3 = *v0;
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x7461446573616220;
  v9._object = (void *)0xEB00000000203A65;
  String.append(_:)(v9);
  type metadata accessor for Date();
  sub_100309CB4(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x203A7865646E6920;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  type metadata accessor for DiscoveryToken.Bucket(0);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x746E496574616420;
  v13._object = (void *)0xEF203A6C61767265;
  String.append(_:)(v13);
  type metadata accessor for DateInterval();
  sub_100309CB4(&qword_1003F46C8, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100308AA8@<X0>(void (*a1)(void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v75 = *(void (***)(char *, uint64_t, uint64_t))(v7 - 8);
  uint64_t v76 = v7;
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DateInterval();
  uint64_t v77 = *(void *)(v9 - 8);
  uint64_t v78 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  os_log_type_t v83 = (char *)v67 - v12;
  uint64_t v13 = type metadata accessor for Date();
  Swift::String v14 = *(char **)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v79 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::String v71 = (char *)v67 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_t v69 = (os_log_t)((char *)v67 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v67 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v82 = (char *)v67 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)v67 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v85 = (char *)v67 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)v67 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (void (**)(char *, uint64_t, uint64_t))((char *)v67 - v34);
  Date.timeIntervalSinceReferenceDate.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_100309CB4(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
  char v36 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v37 = v14;
  uint64_t v38 = (char *)*((void *)v14 + 2);
  uint64_t v84 = a1;
  uint64_t v70 = a2;
  if (v36) {
    uint64_t v39 = a1;
  }
  else {
    uint64_t v39 = (void (*)(void, void))a2;
  }
  uint64_t v80 = v38;
  ((void (*)(char *, void (*)(void, void), uint64_t))v38)(v33, v39, v13);
  Swift::String v72 = v33;
  Date.timeIntervalSince(_:)();
  double v41 = v40 / ((double)a3 * 60.0);
  if ((~*(void *)&v41 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v41 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v41 >= 1.84467441e19)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unint64_t)v41 != -1)
  {
    unint64_t v89 = (unint64_t)v41 + 1;
    uint64_t v68 = v35;
    uint64_t v33 = v80;
    ((void (*)(char *, void, uint64_t))v80)(v28, v35, v13);
    uint64_t v42 = v85;
    Date.init(timeInterval:since:)();
    ((void (*)(char *, char *, uint64_t))v33)(v28, v42, v13);
    Date.init(timeInterval:since:)();
    Date.timeIntervalSince1970.getter();
    a1 = (void (*)(void, void))*((void *)v14 + 1);
    v67[2] = v14 + 8;
    a1(v23, v13);
    unint64_t v43 = v82;
    uint64_t v23 = v83;
    uint64_t v35 = v75;
    uint64_t v37 = v71;
    Date.init(timeIntervalSince1970:)();
    ((void (*)(char *, char *, uint64_t))v33)(v28, v85, v13);
    ((void (*)(os_log_t, char *, uint64_t))v33)(v69, v43, v13);
    DateInterval.init(start:end:)();
    if (qword_1003EC430 == -1) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  swift_once();
LABEL_9:
  uint64_t v44 = v76;
  uint64_t v45 = sub_100044058(v76, (uint64_t)qword_10040C330);
  Swift::String v46 = v74;
  v35[2](v74, v45, v44);
  ((void (*)(char *, void (*)(void, void), uint64_t))v33)(v37, v84, v13);
  ((void (*)(char *, uint64_t, uint64_t))v33)(v79, v70, v13);
  uint64_t v47 = v77;
  uint64_t v48 = v78;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v81, v23, v78);
  os_log_type_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  LODWORD(v71) = v50;
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    v88[0] = v70;
    *(_DWORD *)uint64_t v51 = 134218754;
    os_log_t v69 = v49;
    swift_beginAccess();
    uint64_t v86 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 12) = 2082;
    sub_100309CB4(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_100037004(v52, v53, v88);
    unint64_t v54 = (void (*)(char *, uint64_t))a1;
    v67[1] = &v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a1(v37, v13);
    *(_WORD *)(v51 + 22) = 2082;
    uint64_t v55 = v79;
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_100037004(v56, v57, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a1(v55, v13);
    *(_WORD *)(v51 + 32) = 2082;
    sub_100309CB4(&qword_1003F46C8, (void (*)(uint64_t))&type metadata accessor for DateInterval);
    BOOL v58 = v81;
    uint64_t v59 = v78;
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_100037004(v60, v61, v88);
    uint64_t v47 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v58, v59);
    os_log_t v62 = v69;
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v71, "Bucket calculated to ‣%llu baseTime: %{public}s date: %{public}s .\ndateInterval: %{public}s", (uint8_t *)v51, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v75[1])(v74, v76);
    v54(v82, v13);
    v54(v85, v13);
    v54(v72, v13);
    v54((char *)v68, v13);
    uint64_t v48 = v59;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v47 + 8))(v81, v48);
    a1(v79, v13);
    a1(v37, v13);
    ((void (*)(char *, uint64_t))v35[1])(v46, v44);
    a1(v82, v13);
    a1(v85, v13);
    a1(v72, v13);
    a1(v68, v13);
  }
  uint64_t v63 = v73;
  ((void (*)(uint64_t, void (*)(void, void), uint64_t))v80)(v73, v84, v13);
  swift_beginAccess();
  unint64_t v64 = v89;
  uint64_t v65 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(void *)(v63 + *(int *)(v65 + 20)) = v64;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v63 + *(int *)(v65 + 24), v83, v48);
}

uint64_t sub_10030951C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  id v4 = sub_100042524(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (long long v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_100309AD0(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_100309C18((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_100309B94((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = sub_1000233E4((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

id sub_1003095E8(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for SymmetricKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v14 = (char *)&v28 - v13;
  uint64_t v15 = String.utf8Data.getter();
  unint64_t v17 = v16;
  uint64_t v31 = a1;
  unint64_t v32 = a2;
  sub_100022C64(a1, a2);
  SymmetricKey.init<A>(data:)();
  uint64_t v28 = v15;
  uint64_t v31 = v15;
  unint64_t v32 = v17;
  if (a4)
  {
    type metadata accessor for SHA256();
    sub_100309CB4(&qword_1003F46B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
    sub_10004F4EC();
    static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)();
  }
  else
  {
    uint64_t v29 = a3;
    sub_10030993C();
    uint64_t v18 = FixedWidthInteger.data.getter();
    unint64_t v20 = v19;
    uint64_t v29 = v18;
    unint64_t v30 = v19;
    type metadata accessor for SHA256();
    sub_100309CB4(&qword_1003F46B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
    sub_10004F4EC();
    static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)();
    sub_100044090(v18, v20);
  }
  SymmetricKey.withUnsafeBytes<A>(_:)();
  uint64_t v21 = v31;
  unint64_t v22 = v32;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  uint64_t v24 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v26 = [v24 generateFindingDiscoveryTokenWithSharedSecret:isa];

  sub_100044090(v28, v17);
  sub_100044090(v21, v22);
  v23(v14, v8);
  return v26;
}

unint64_t sub_10030993C()
{
  unint64_t result = qword_1003F46B8;
  if (!qword_1003F46B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F46B8);
  }
  return result;
}

uint64_t sub_100309990()
{
  uint64_t v0 = sub_100363160();
  if (v1) {
    return 10080;
  }
  uint64_t v2 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040C330);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    long long v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v6 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using keyroll interval from defaults: %ld minutes", v6, 0xCu);
    swift_slowDealloc();
  }

  return v2;
}

uint64_t sub_100309AD0(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100309B94(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100309C18(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t type metadata accessor for DiscoveryToken(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003F47C0);
}

uint64_t sub_100309CB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DiscoveryToken.Bucket(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003F4728);
}

uint64_t sub_100309D1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveryToken.Bucket(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100309D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveryToken.Bucket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100309DDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100309EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100309F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10030A054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10030A118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10030A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10030A298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10030A2AC);
}

uint64_t sub_10030A2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DateInterval();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10030A3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10030A3B8);
}

uint64_t sub_10030A3B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DateInterval();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_10030A4BC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DateInterval();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **sub_10030A590(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
    uint64_t v12 = type metadata accessor for DiscoveryToken.Bucket(0);
    *(void *)&v7[*(int *)(v12 + 20)] = *(void *)&v8[*(int *)(v12 + 20)];
    uint64_t v13 = *(int *)(v12 + 24);
    uint64_t v14 = &v7[v13];
    uint64_t v15 = &v8[v13];
    uint64_t v16 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v5;
}

uint64_t sub_10030A6CC(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = &v4[*(int *)(type metadata accessor for DiscoveryToken.Bucket(0) + 24)];
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

void **sub_10030A78C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  uint64_t v11 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(void *)&v6[*(int *)(v11 + 20)] = *(void *)&v7[*(int *)(v11 + 20)];
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = &v6[v12];
  uint64_t v14 = &v7[v12];
  uint64_t v15 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

void **sub_10030A87C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
  uint64_t v14 = *(int *)(v13 + 24);
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

void *sub_10030A968(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  uint64_t v8 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(void *)&v5[*(int *)(v8 + 20)] = *(void *)&v6[*(int *)(v8 + 20)];
  uint64_t v9 = *(int *)(v8 + 24);
  id v10 = &v5[v9];
  uint64_t v11 = &v6[v9];
  uint64_t v12 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

void **sub_10030AA40(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for DiscoveryToken.Bucket(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_10030AB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10030AB3C);
}

uint64_t sub_10030AB3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DiscoveryToken.Bucket(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10030ABEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10030AC00);
}

void *sub_10030AC00(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DiscoveryToken.Bucket(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10030ACA8()
{
  uint64_t result = type metadata accessor for DiscoveryToken.Bucket(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10030AD44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = *(void *)(type metadata accessor for DiscoveryToken(0) - 8);
    uint64_t v5 = (id *)(a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      id v7 = *v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v5 = (id *)((char *)v5 + v6);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10030AE4C()
{
  v1[15] = v0;
  v1[16] = *v0;
  uint64_t v2 = type metadata accessor for Destination();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = type metadata accessor for RedStripeNotification();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[26] = v3;
  v1[27] = *(void *)(v3 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = sub_100044014(&qword_1003F0CA0);
  v1[30] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Handle();
  v1[34] = v4;
  v1[35] = *(void *)(v4 - 8);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Friend();
  v1[43] = v5;
  v1[44] = *(void *)(v5 - 8);
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  v1[50] = type metadata accessor for DiscoveryToken.Bucket(0);
  v1[51] = swift_task_alloc();
  sub_100044014(&qword_1003F1530);
  v1[52] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DiscoveryToken(0);
  v1[53] = v6;
  v1[54] = *(void *)(v6 - 8);
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v1[57] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v1[58] = v7;
  v1[59] = *(void *)(v7 - 8);
  v1[60] = swift_task_alloc();
  v1[61] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendSharedSecretsRecord();
  v1[62] = v8;
  v1[63] = *(void *)(v8 - 8);
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[68] = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10030B3F4;
  return daemon.getter();
}

uint64_t sub_10030B3F4(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[69] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[70] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[71] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[72] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10030B5D4;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10030B5D4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[73] = a1;
  v3[74] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[15];
    uint64_t v5 = sub_10030F7AC;
  }
  else
  {
    uint64_t v6 = v3[15];
    swift_release();
    uint64_t v5 = sub_10030B700;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10030B700()
{
  uint64_t v21 = v0;
  id v1 = [self activelyInteractingDiscoveryTokens];
  if (v1)
  {
    uint64_t v2 = v1;
    sub_10015F194();
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      uint64_t v4 = sub_100246BB8(v3);
      v0[75] = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[76] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_10030BCE8;
      return sub_100314048(v4);
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "No activelyInteractingDiscoveryTokens!", v11, 2u);
    swift_slowDealloc();
  }

  sub_1002ACC80();
  uint64_t v12 = swift_allocError();
  *uint64_t v13 = 2;
  swift_willThrow();
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  sub_100044058(v8, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    v0[9] = v12;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v17 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v17, v18, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "handleRangingStartedNotification error: %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10030BCE8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(unsigned char *)(*(void *)v1 + 964) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10030BE00, v2, 0);
}

uint64_t sub_10030BE00()
{
  if (*(unsigned char *)(v0 + 964))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 584);
    return _swift_task_switch(sub_10030C098, v3, 0);
  }
}

uint64_t sub_10030C098()
{
  *(void *)(v0 + 616) = sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  *(void *)(v0 + 624) = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)(v0 + 632) = *(void *)(v2 + 72);
  int v3 = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 960) = v3;
  unint64_t v4 = (v3 + 32) & ~(unint64_t)v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 640) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_100367D70;
  uint64_t v6 = enum case for HandleType.follower(_:);
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 104);
  *(void *)(v0 + 648) = v7;
  *(void *)(v0 + 656) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v5 + v4, v6, v1);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 664) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10030C218;
  return sub_100021584(v5, 1);
}

uint64_t sub_10030C218(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 584);
  *(void *)(*(void *)v1 + 672) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10030C34C, v2, 0);
}

uint64_t sub_10030C34C()
{
  uint64_t v1 = *(void (**)(unint64_t, void, uint64_t))(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 624);
  unint64_t v3 = (*(unsigned __int8 *)(v0 + 960) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 960);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 680) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  v1(v4 + v3, enum case for HandleType.following(_:), v2);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10030C44C;
  return sub_100021584(v4, 1);
}

uint64_t sub_10030C44C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = *v1;
  *(void *)(v2 + 696) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 704) = v3;
  *unint64_t v3 = v5;
  v3[1] = sub_10030C59C;
  return daemon.getter();
}

uint64_t sub_10030C59C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 712) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 720) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1003240E8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_10030C750;
  uint64_t v8 = *(void *)(v2 + 576);
  uint64_t v9 = *(void *)(v2 + 568);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10030C750(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[91] = a1;
  v3[92] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[15];
    uint64_t v5 = sub_10030FB90;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10030C878;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10030C878()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v1;
  void *v1 = v0;
  v1[1] = sub_10030C90C;
  return sub_1000F6838();
}

uint64_t sub_10030C90C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 752) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10030DF04;
  }
  else
  {
    *(void *)(v4 + 760) = a1;
    uint64_t v5 = sub_10030CA34;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10030CA34()
{
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + 768) = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return _swift_task_switch(sub_10030CAAC, v1, 0);
}

uint64_t sub_10030CAAC()
{
  v161 = v0;
  uint64_t v1 = v0[96];
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_25:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_26;
  }
  uint64_t v3 = v0[63];
  uint64_t v156 = v0[62];
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = v0[59];
  v152 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v6 = v0[54];
  uint64_t v137 = v0[53];
  uint64_t v149 = v0[50];
  v147 = (void (**)(void, void, void))(v5 + 32);
  v145 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v151 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  v143 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v154 = *(void *)(v3 + 72);
  while (1)
  {
    uint64_t v10 = v0[67];
    sub_100324020(v4, v10, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v11 = (uint64_t *)(v10 + *(int *)(v156 + 32));
    uint64_t v12 = *v11;
    v0[97] = *v11;
    unint64_t v13 = v11[1];
    v0[98] = v13;
    if (v13 >> 60 == 15) {
      goto LABEL_9;
    }
    uint64_t v14 = v0[57];
    uint64_t v15 = v0[58];
    sub_100013210(v0[67] + *(int *)(v156 + 36), v14, (uint64_t *)&unk_1003EE800);
    if ((*v152)(v14, 1, v15) == 1)
    {
      sub_10000A520(v0[57], (uint64_t *)&unk_1003EE800);
LABEL_9:
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v16 = v0[67];
      uint64_t v17 = v0[64];
      uint64_t v18 = type metadata accessor for Logger();
      sub_100044058(v18, (uint64_t)qword_10040C330);
      sub_100324020(v16, v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = v0[64];
      if (v21)
      {
        uint64_t v7 = swift_slowAlloc();
        v160[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136446210;
        sub_1003240E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v7 + 4) = sub_100037004(v8, v9, v160);
        swift_bridgeObjectRelease();
        sub_100324088(v22, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "No incomingSharedSecret for %{public}s", (uint8_t *)v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100324088(v0[64], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      }

      goto LABEL_5;
    }
    uint64_t v23 = v0[60];
    uint64_t v24 = (void (*)(void, void))v0[61];
    uint64_t v25 = v0[51];
    (*v147)(v24, v0[57], v0[58]);
    sub_100022C64(v12, v13);
    static Date.trustedNow.getter(v23);
    uint64_t v26 = sub_100309990();
    sub_100308AA8(v24, v23, v26, v25);
    id v27 = sub_1003095E8(v12, v13, *(void *)(v25 + *(int *)(v149 + 20)), 0);
    uint64_t v28 = (void *)v0[52];
    uint64_t v29 = v0[53];
    uint64_t v30 = v0[51];
    if (v27)
    {
      sub_100324130(v30, (uint64_t)v28 + *(int *)(v137 + 20), type metadata accessor for DiscoveryToken.Bucket);
      *uint64_t v28 = v27;
      (*v145)(v28, 0, 1, v29);
    }
    else
    {
      sub_100324088(v30, type metadata accessor for DiscoveryToken.Bucket);
      (*v145)(v28, 1, 1, v29);
    }
    uint64_t v31 = v0[60];
    uint64_t v32 = v0[58];
    uint64_t v33 = v0[52];
    uint64_t v34 = v0[53];
    uint64_t v35 = *v151;
    v0[99] = *v151;
    v0[100] = (unint64_t)v151 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v35(v31, v32);
    if ((*v143)(v33, 1, v34) != 1) {
      break;
    }
    uint64_t v141 = v12;
    sub_10000A520(v0[52], &qword_1003F1530);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v36 = v0[67];
    uint64_t v37 = v0[65];
    uint64_t v38 = type metadata accessor for Logger();
    sub_100044058(v38, (uint64_t)qword_10040C330);
    sub_100324020(v36, v37, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v0[65];
    uint64_t v43 = v0[61];
    uint64_t v139 = v0[58];
    if (!v41)
    {
      sub_1000440E8(v141, v13);

      sub_100324088(v42, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      uint64_t v53 = v43;
      uint64_t v54 = v139;
      goto LABEL_24;
    }
    loga = v39;
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v160[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136446210;
    sub_1003240E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_100037004(v45, v46, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100324088(v42, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, loga, v40, "Unable to retrieve discovery token for for %{public}s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_1000440E8(v141, v13);

    v35(v43, v139);
LABEL_5:
    sub_100324088(v0[67], (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    v4 += v154;
    if (!--v2) {
      goto LABEL_25;
    }
  }
  uint64_t v47 = v0[75];
  uint64_t v48 = (id *)v0[56];
  sub_100324130(v0[52], (uint64_t)v48, type metadata accessor for DiscoveryToken);
  id v49 = *v48;
  LOBYTE(v47) = sub_100149508(v49, v47);

  if ((v47 & 1) == 0)
  {
    uint64_t v50 = v0[61];
    uint64_t v51 = v0[58];
    uint64_t v52 = v0[56];
    sub_1000440E8(v12, v13);
    sub_100324088(v52, type metadata accessor for DiscoveryToken);
    uint64_t v53 = v50;
    uint64_t v54 = v51;
LABEL_24:
    v35(v53, v54);
    goto LABEL_5;
  }
  uint64_t v136 = v35;
  swift_bridgeObjectRelease();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v57 = v0[67];
  uint64_t v58 = v0[66];
  uint64_t v60 = v0[55];
  uint64_t v59 = v0[56];
  uint64_t v129 = type metadata accessor for Logger();
  v0[101] = sub_100044058(v129, (uint64_t)qword_10040C330);
  sub_100324020(v59, v60, type metadata accessor for DiscoveryToken);
  sub_100324020(v57, v58, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  unint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v64 = v0[66];
  uint64_t v65 = v0[55];
  uint64_t v142 = v12;
  if (v63)
  {
    uint64_t v66 = swift_slowAlloc();
    v160[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 136446466;
    uint64_t v67 = sub_1003087F8();
    v0[13] = sub_100037004(v67, v68, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100324088(v65, type metadata accessor for DiscoveryToken);
    *(_WORD *)(v66 + 12) = 2082;
    sub_1003240E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[14] = sub_100037004(v69, v70, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100324088(v64, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Found matching token %{public}s from record %{public}s", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100324088(v65, type metadata accessor for DiscoveryToken);
    sub_100324088(v64, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  }

  uint64_t v71 = v0[84];
  uint64_t v72 = *(void *)(v71 + 16);
  if (!v72)
  {
LABEL_45:
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[44] + 56);
    v100(v0[42], 1, 1, v0[43]);
    goto LABEL_48;
  }
  uint64_t v73 = v0[44];
  uint64_t v74 = v0[27];
  uint64_t v75 = *(void (**)(void))(v73 + 16);
  v73 += 16;
  v148 = v75;
  uint64_t v150 = v0[29];
  uint64_t v76 = v71 + ((*(unsigned __int8 *)(v73 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 64));
  v144 = (void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
  v146 = (void (**)(uint64_t, uint64_t))(v0[35] + 8);
  uint64_t v140 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56);
  uint64_t v77 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  uint64_t v130 = (void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
  uint64_t v135 = (void (**)(void, void))(v73 - 8);
  os_log_t log = (os_log_t)(v74 + 8);
  uint64_t v134 = *(void *)(v73 + 56);
  swift_bridgeObjectRetain();
  uint64_t v78 = v76;
  uint64_t v79 = &qword_1003ECFB8;
  v138 = v77;
  while (2)
  {
    uint64_t v153 = v72;
    uint64_t v155 = v78;
    uint64_t v157 = v0[67];
    uint64_t v81 = v0[40];
    uint64_t v82 = v0[33];
    uint64_t v83 = v0[34];
    uint64_t v84 = v0[32];
    uint64_t v85 = v0[30];
    uint64_t v86 = v0[26];
    v148(v0[48]);
    Friend.handle.getter();
    Handle.peerID.getter();
    (*v146)(v81, v83);
    (*v144)(v84, v157, v86);
    (*v140)(v84, 0, 1, v86);
    uint64_t v87 = v85 + *(int *)(v150 + 48);
    sub_100013210(v82, v85, v79);
    sub_100013210(v84, v87, v79);
    uint64_t v88 = *v138;
    int v89 = (*v138)(v85, 1, v86);
    uint64_t v90 = v0[26];
    if (v89 != 1)
    {
      sub_100013210(v0[30], v0[31], v79);
      int v91 = v88(v87, 1, v90);
      uint64_t v92 = v79;
      uint64_t v94 = v0[32];
      uint64_t v93 = v0[33];
      uint64_t v95 = v0[31];
      if (v91 == 1)
      {
        uint64_t v96 = v0[26];
        sub_10000A520(v0[32], v92);
        sub_10000A520(v93, v92);
        ((void (*)(uint64_t, uint64_t))log->isa)(v95, v96);
        uint64_t v79 = v92;
LABEL_37:
        sub_10000A520(v0[30], &qword_1003F0CA0);
      }
      else
      {
        uint64_t v158 = v0[30];
        uint64_t v97 = v0[28];
        uint64_t v98 = v0[26];
        (*v130)(v97, v87, v98);
        sub_1003240E8(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v131 = dispatch thunk of static Equatable.== infix(_:_:)();
        Class isa = (void (*)(uint64_t, uint64_t))log->isa;
        ((void (*)(uint64_t, uint64_t))log->isa)(v97, v98);
        sub_10000A520(v94, v92);
        sub_10000A520(v93, v92);
        isa(v95, v98);
        sub_10000A520(v158, v92);
        uint64_t v79 = v92;
        if (v131) {
          goto LABEL_47;
        }
      }
      (*v135)(v0[48], v0[43]);
      uint64_t v78 = v155 + v134;
      uint64_t v72 = v153 - 1;
      if (v153 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      continue;
    }
    break;
  }
  uint64_t v80 = v0[33];
  sub_10000A520(v0[32], v79);
  sub_10000A520(v80, v79);
  if (v88(v87, 1, v90) != 1) {
    goto LABEL_37;
  }
  sub_10000A520(v0[30], &qword_1003ECFB8);
LABEL_47:
  uint64_t v101 = v0[48];
  uint64_t v102 = v0[43];
  uint64_t v103 = v0[44];
  uint64_t v104 = v0[42];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32))(v104, v101, v102);
  uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56);
  v100(v104, 0, 1, v102);
LABEL_48:
  v0[102] = v100;
  uint64_t v105 = v0[43];
  uint64_t v106 = v0[44];
  uint64_t v107 = v0[42];
  swift_bridgeObjectRelease();
  uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
  v0[103] = v108;
  v0[104] = (v106 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v108(v107, 1, v105) == 1)
  {
    uint64_t v109 = v0[42];
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000A520(v109, &qword_1003ECFE8);
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v112 = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "No matching friend for active token!", v112, 2u);
      swift_slowDealloc();
    }
    uint64_t v159 = v0[67];
    uint64_t v113 = v0[61];
    uint64_t v114 = v0[58];
    uint64_t v115 = v0[56];

    sub_1002ACC80();
    uint64_t v116 = swift_allocError();
    *uint64_t v117 = 2;
    swift_willThrow();
    sub_1000440E8(v142, v13);
    swift_release();
    swift_release();
    sub_100324088(v115, type metadata accessor for DiscoveryToken);
    v136(v113, v114);
    sub_100324088(v159, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    sub_100044058(v129, (uint64_t)qword_10040C330);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      v160[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v120 = 136446210;
      v0[9] = v116;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v121 = String.init<A>(describing:)();
      v0[7] = sub_100037004(v121, v122, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "handleRangingStartedNotification error: %{public}s", v120, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v55 = (uint64_t (*)(void))v0[1];
    return v55();
  }
  else
  {
    uint64_t v123 = v0[49];
    uint64_t v124 = v0[43];
    uint64_t v125 = v0[44];
    uint64_t v126 = v0[42];
    uint64_t v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32);
    v0[105] = v127;
    v0[106] = (v125 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v127(v123, v126, v124);
    uint64_t v128 = (void *)swift_task_alloc();
    v0[107] = v128;
    *uint64_t v128 = v0;
    v128[1] = sub_10030E380;
    return daemon.getter();
  }
}

uint64_t sub_10030DF04()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10030DF90, v1, 0);
}

uint64_t sub_10030DF90()
{
  uint64_t v11 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = v0[94];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[9] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "handleRangingStartedNotification error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10030E380(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 864) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 872) = v5;
  uint64_t v6 = type metadata accessor for UserNotificationService();
  uint64_t v7 = sub_1003240E8(&qword_1003F0D88, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  *uint64_t v5 = v4;
  v5[1] = sub_10030E534;
  uint64_t v8 = *(void *)(v2 + 576);
  uint64_t v9 = *(void *)(v2 + 568);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10030E534(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[110] = a1;
  v3[111] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[15];
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10030FFA4;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v3[15];
    swift_release();
    uint64_t v5 = sub_10030E6A8;
    uint64_t v6 = v7;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10030E6A8()
{
  uint64_t v1 = v0[87];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[44];
    uint64_t v35 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v34 = (void (**)(uint64_t, uint64_t))(v0[35] + 8);
    uint64_t v31 = *(void *)(v3 + 72);
    uint64_t v32 = (void (**)(void, void))(v3 + 8);
    swift_bridgeObjectRetain();
    uint64_t v33 = v0;
    while (1)
    {
      uint64_t v36 = v2;
      uint64_t v6 = v0[38];
      uint64_t v5 = v0[39];
      uint64_t v7 = v0[34];
      v35(v0[47], v4, v0[43]);
      Friend.handle.getter();
      uint64_t v8 = Handle.identifier.getter();
      uint64_t v10 = v9;
      uint64_t v11 = *v34;
      (*v34)(v5, v7);
      Friend.handle.getter();
      uint64_t v12 = Handle.identifier.getter();
      uint64_t v14 = v13;
      v11(v6, v7);
      if (v8 == v12 && v10 == v14) {
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_12;
      }
      uint64_t v0 = v33;
      (*v32)(v33[47], v33[43]);
      v4 += v31;
      uint64_t v2 = v36 - 1;
      if (v36 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_12:
    uint64_t v0 = v33;
    uint64_t v18 = (void (*)(uint64_t, uint64_t, uint64_t))v33[105];
    uint64_t v19 = v33[47];
    uint64_t v20 = v33[43];
    uint64_t v21 = v33[41];
    swift_bridgeObjectRelease();
    v18(v21, v19, v20);
    uint64_t v17 = 0;
  }
  else
  {
LABEL_10:
    uint64_t v17 = 1;
  }
  uint64_t v22 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[103];
  uint64_t v23 = v0[43];
  uint64_t v24 = v0[41];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[102])(v24, v17, 1, v23);
  swift_release();
  swift_bridgeObjectRelease();
  if (v22(v24, 1, v23) == 1)
  {
    uint64_t v25 = v0[49];
    uint64_t v27 = v0[44];
    uint64_t v26 = v0[45];
    uint64_t v28 = v0[43];
    sub_10000A520(v0[41], &qword_1003ECFE8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v25, v28);
    uint64_t v29 = sub_10030F014;
  }
  else
  {
    ((void (*)(void, void, void))v0[105])(v0[46], v0[41], v0[43]);
    uint64_t v29 = sub_10030E980;
  }
  return _swift_task_switch(v29, 0, 0);
}

uint64_t sub_10030E980()
{
  uint64_t v1 = (unsigned char *)v0[25];
  uint64_t v2 = v0[21];
  unsigned char *v1 = 2;
  uint64_t v3 = &v1[*(int *)(v2 + 20)];
  uint64_t v4 = enum case for LocalUserNotificationCategory.peopleFindingSessionStarted(_:);
  uint64_t v5 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  UUID.init()();
  Friend.handle.getter();
  LOBYTE(v3) = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v3) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[112] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10030EADC;
  return sub_10032E0BC(1);
}

uint64_t sub_10030EADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 160);
  uint64_t v5 = *(void *)(*v2 + 144);
  uint64_t v6 = *(void *)(*v2 + 136);
  *(void *)(v3 + 904) = a1;
  *(void *)(v3 + 912) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_10030EC40, 0, 0);
}

uint64_t sub_10030EC40()
{
  uint64_t v1 = v0[114];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[105];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[15];
  uint64_t v8 = (void *)(v5 + *(int *)(v6 + 28));
  *uint64_t v8 = v0[113];
  v8[1] = v1;
  v2(v5 + *(int *)(v6 + 32), v3, v4);
  return _swift_task_switch(sub_10030ECDC, v7, 0);
}

uint64_t sub_10030ECDC()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  sub_100324020(v1, v0[24], (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  sub_100324020(v1, v2, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[24];
    uint64_t v6 = v0[21];
    uint64_t v19 = v0[22];
    uint64_t v20 = v0[23];
    os_log_type_t type = v4;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v0[10] = 1752392040;
    *(_DWORD *)uint64_t v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = (uint64_t *)(v5 + *(int *)(v6 + 28));
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    swift_bridgeObjectRetain();
    v0[11] = sub_100037004(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100324088(v5, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
    *(_WORD *)(v7 + 22) = 2080;
    sub_100324020(v20, v19, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
    uint64_t v11 = String.init<A>(describing:)();
    v0[12] = sub_100037004(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100324088(v20, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
    _os_log_impl((void *)&_mh_execute_header, v3, type, "%{private,mask.hash}s is trying to find you. %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = v0[23];
    sub_100324088(v0[24], (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
    sub_100324088(v13, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  }

  uint64_t v14 = v0[25];
  v0[5] = v0[21];
  v0[6] = (uint64_t)&off_1003E50B8;
  uint64_t v15 = sub_10003E0F4(v0 + 2);
  sub_100324020(v14, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  char v16 = (void *)swift_task_alloc();
  v0[118] = (uint64_t)v16;
  *char v16 = v0;
  v16[1] = sub_10030F370;
  return sub_10033121C((uint64_t)(v0 + 2));
}

uint64_t sub_10030F014()
{
  uint64_t v1 = (unsigned char *)v0[25];
  uint64_t v2 = v0[21];
  unsigned char *v1 = 2;
  uint64_t v3 = &v1[*(int *)(v2 + 20)];
  uint64_t v4 = enum case for LocalUserNotificationCategory.peopleFindingSessionStarted(_:);
  uint64_t v5 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  UUID.init()();
  Friend.handle.getter();
  LOBYTE(v3) = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v3) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[115] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10030F170;
  return sub_10032E0BC(1);
}

uint64_t sub_10030F170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 152);
  uint64_t v5 = *(void *)(*v2 + 144);
  uint64_t v6 = *(void *)(*v2 + 136);
  *(void *)(v3 + 928) = a1;
  *(void *)(v3 + 936) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return _swift_task_switch(sub_10030F2D4, 0, 0);
}

uint64_t sub_10030F2D4()
{
  uint64_t v1 = v0[117];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[105];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[15];
  uint64_t v8 = (void *)(v5 + *(int *)(v6 + 28));
  *uint64_t v8 = v0[116];
  v8[1] = v1;
  v2(v5 + *(int *)(v6 + 32), v3, v4);
  return _swift_task_switch(sub_1003241A8, v7, 0);
}

uint64_t sub_10030F370()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = sub_100310428;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    sub_1000233E4(v2 + 16);
    uint64_t v4 = sub_10030F498;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10030F498()
{
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[99];
  uint64_t v11 = v0[67];
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[56];
  uint64_t v9 = v0[49];
  uint64_t v5 = v0[43];
  uint64_t v4 = v0[44];
  uint64_t v6 = v0[25];
  sub_1000440E8(v0[97], v0[98]);
  swift_release();
  swift_release();
  swift_release();
  sub_100324088(v6, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  sub_100324088(v3, type metadata accessor for DiscoveryToken);
  v10(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v5);
  sub_100324088(v11, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10030F7AC()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[74];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[9] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "handleRangingStartedNotification error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10030FB90()
{
  uint64_t v11 = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0[92];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    v0[9] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "handleRangingStartedNotification error: %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10030FFA4()
{
  uint64_t v19 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[99];
  uint64_t v17 = v0[67];
  uint64_t v2 = v0[61];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[49];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  sub_1000440E8(v0[97], v0[98]);
  swift_release();
  swift_release();
  sub_100324088(v4, type metadata accessor for DiscoveryToken);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  sub_100324088(v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v8 = v0[111];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100044058(v9, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    v0[9] = v8;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v13 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "handleRangingStartedNotification error: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100310428()
{
  uint64_t v20 = v0;
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[99];
  uint64_t v18 = v0[67];
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[56];
  uint64_t v16 = v0[49];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[25];
  sub_1000440E8(v0[97], v0[98]);
  swift_release();
  swift_release();
  swift_release();
  sub_100324088(v6, (uint64_t (*)(void))type metadata accessor for RedStripeNotification);
  sub_100324088(v3, type metadata accessor for DiscoveryToken);
  v17(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v4);
  sub_100324088(v18, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  sub_1000233E4((uint64_t)(v0 + 2));
  uint64_t v7 = v0[119];
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136446210;
    v0[9] = v7;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v12 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "handleRangingStartedNotification error: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1003108EC()
{
  v1[191] = v0;
  sub_100044014(&qword_1003EFCD0);
  v1[192] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v1[193] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1003109B0;
  return daemon.getter();
}

uint64_t sub_1003109B0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[194] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[195] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[196] = v4;
  uint64_t v5 = type metadata accessor for AppDeletionService();
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[197] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003F1D40, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  *uint64_t v3 = v9;
  v3[1] = sub_100310B90;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100310B90(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[198] = a1;
  v4[199] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[191];
    uint64_t v6 = sub_100312180;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100310CCC;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100310CCC()
{
  uint64_t v1 = *(void *)(v0 + 1528);
  *(unsigned char *)(v0 + 1664) = *(unsigned char *)(*(void *)(v0 + 1584) + 137);
  return _swift_task_switch(sub_100310CF4, v1, 0);
}

uint64_t sub_100310CF4()
{
  uint64_t v9 = v0;
  if (*(unsigned char *)(v0 + 1664) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 1600) = v1;
    void *v1 = v0;
    v1[1] = sub_100310F60;
    return daemon.getter();
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *(void *)(v0 + 1480) = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s? Find My app is NOT installed.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(2);
  }
}

uint64_t sub_100310F60(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1608) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1616) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_1003240E8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v5 = v4;
  v5[1] = sub_100311114;
  uint64_t v8 = *(void *)(v2 + 1576);
  uint64_t v9 = *(void *)(v2 + 1568);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100311114(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[203] = a1;
  v3[204] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[191];
    return _swift_task_switch(sub_1003123FC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[205] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1003112A4;
    uint64_t v7 = v3[192];
    return sub_100007CFC(v7);
  }
}

uint64_t sub_1003112A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1624);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003113B4, v1, 0);
}

uint64_t sub_1003113B4()
{
  uint64_t v1 = *(void *)(v0 + 1536);
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 1528);
  if (v4 == 1)
  {
    sub_10000A520(v1, &qword_1003EFCD0);
    uint64_t v6 = sub_100311768;
  }
  else
  {
    *(unsigned char *)(v0 + 1665) = Device.isThisDevice.getter() & 1;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    uint64_t v6 = sub_1003114DC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003114DC()
{
  uint64_t v9 = v0;
  if (*(unsigned char *)(v0 + 1665) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 1648) = v1;
    void *v1 = v0;
    v1[1] = sub_100311964;
    return sub_10000E400(v0 + 448);
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100044058(v3, (uint64_t)qword_10040C330);
    int v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      *(void *)(v0 + 1488) = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s? not a me device", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
    }
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v7(1);
  }
}

uint64_t sub_100311768()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)int v4 = 136446210;
    *(void *)(v0 + 1488) = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s? not a me device", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  os_log_type_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(1);
}

uint64_t sub_100311964()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1624);
  swift_task_dealloc();
  return _swift_task_switch(sub_100311A74, v1, 0);
}

uint64_t sub_100311A74()
{
  sub_100013B50(v0 + 448, v0 + 880, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 880) == 1
    || (uint64_t v1 = (long long *)(v0 + 1344),
        memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_100013B50(v0 + 416, v0 + 1376, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 1376)),
        sub_10000E224(v0 + 448),
        sub_100013B50(v0 + 1376, v0 + 1344, &qword_1003EE258),
        !*(void *)(v0 + 1352)))
  {
    uint64_t v6 = *(void *)(v0 + 1528);
    os_log_type_t v5 = sub_100311F84;
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 1528);
    long long v3 = *v1;
    long long v4 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = *v1;
    *(_OWORD *)(v0 + 1328) = v4;
    *(_OWORD *)(v0 + 1424) = v3;
    *(_OWORD *)(v0 + 1456) = v3;
    *(void *)(v0 + 1440) = 28494;
    *(void *)(v0 + 1448) = 0xE200000000000000;
    sub_10004650C();
    *(void *)(v0 + 1656) = StringProtocol.caseInsensitiveCompare<A>(_:)();
    sub_10001FA28(v0 + 1424);
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1328);
    sub_10001FA28(v0 + 1408);
    os_log_type_t v5 = sub_100311BF4;
    uint64_t v6 = v2;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100311BF4()
{
  unint64_t v13 = v0;
  if (v0[207])
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040C330);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      long long v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)long long v4 = 136446210;
      v0[187] = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s? share my location disabled", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
    }
    uint64_t v5 = 3;
  }
  else
  {
    swift_release();
    swift_release();
    if ([self locationServicesEnabled])
    {
      uint64_t v5 = 0;
    }
    else
    {
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100044058(v6, (uint64_t)qword_10040C330);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136446210;
        v0[190] = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s? location services disabled", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v5 = 4;
    }
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(v5);
}

uint64_t sub_100311F84()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    long long v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)long long v4 = 136446210;
    *(void *)(v0 + 1496) = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s? share my location disabled", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(3);
}

uint64_t sub_100312180()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[199];
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[189] = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    v0[188] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[184] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(5);
}

uint64_t sub_1003123FC()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[204];
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[189] = sub_100037004(0x656C6261646E6966, 0xEE00737574617453, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    v0[188] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[184] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(5);
}

uint64_t sub_100312680(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  return _swift_task_switch(sub_1003126C8, v1, 0);
}

uint64_t sub_1003126C8()
{
  uint64_t v31 = v0;
  uint64_t My = type metadata accessor for Feature.FindMy();
  v0[5] = My;
  v0[6] = sub_1003240E8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10003E0F4(v0 + 2);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)(v0 + 2));
  if (My)
  {
    if (sub_1002C890C())
    {
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100044058(v3, (uint64_t)qword_10040C330);
      os_log_type_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136446210;
        v0[9] = sub_100037004(0xD000000000000023, 0x8000000100379D90, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v7 = v0[11];
      uint64_t v8 = v0[12];
      uint64_t v9 = sub_1003240E8(qword_1003F3F20, (void (*)(uint64_t))type metadata accessor for NITokenService);
      uint64_t v10 = swift_task_alloc();
      v0[13] = v10;
      *(void *)(v10 + 16) = v7;
      *(void *)(v10 + 24) = v8;
      uint64_t v11 = (void *)swift_task_alloc();
      v0[14] = v11;
      uint64_t v12 = sub_100044014(&qword_1003F29E0);
      void *v11 = v0;
      v11[1] = sub_100312DDC;
      uint64_t v13 = v0[10];
      return withCheckedContinuation<A>(isolation:function:_:)(v13, v7, v9, 0xD000000000000023, 0x8000000100379D90, sub_100323770, v10, v12);
    }
    else
    {
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100044058(v21, (uint64_t)qword_10040C330);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446210;
        v0[8] = sub_100037004(0xD000000000000023, 0x8000000100379D90, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s isFindingCapable == false.", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_1002ACC80();
      uint64_t v25 = swift_allocError();
      v0[15] = v25;
      *uint64_t v26 = 20;
      unint64_t v27 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
      v0[16] = v27;
      uint64_t v28 = (void *)swift_task_alloc();
      v0[17] = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_100312EEC;
      return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, v25, v27);
    }
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100044058(v14, (uint64_t)qword_10040C330);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      v0[7] = sub_100037004(0xD000000000000023, 0x8000000100379D90, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Feature.FindMy.redStripe FF disabled.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v18 = v0[10];
    uint64_t v19 = type metadata accessor for OwnerSharedSecretsRecord();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100312DDC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100312EEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_10031303C, v1, 0);
}

uint64_t sub_10031303C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = type metadata accessor for OwnerSharedSecretsRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1003130D8()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100313198, v0, 0);
}

uint64_t sub_100313198()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[7] = sub_100037004(0xD000000000000019, 0x8000000100379E30, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v0[2] = _swiftEmptyArrayStorage;
  static ReferenceClock.now.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1003133A0;
  return sub_1002DB264();
}

uint64_t sub_1003133A0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = *(void *)(*v2 + 72);
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = *(void *)(v3 + 64);
  if (v1) {
    uint64_t v9 = sub_1003138D0;
  }
  else {
    uint64_t v9 = sub_100313530;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100313530()
{
  uint64_t v1 = (void *)v0[14];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v14 = v0[14];
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138543362;
      v0[6] = v2;
      id v6 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v14;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting owner token: %{public}@", v5, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v7 = v2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v8 = self;
  sub_10015F194();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v8 setLocalDeviceInteractableDiscoveryTokens:isa];

  uint64_t v11 = (void *)swift_task_alloc();
  v0[16] = v11;
  void *v11 = v0;
  v11[1] = sub_1003137C0;
  return sub_100326ABC();
}

uint64_t sub_1003137C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_100162108, v1, 0);
}

uint64_t sub_1003138D0()
{
  uint64_t v12 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[15];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[3] = sub_100037004(0xD000000000000019, 0x8000000100379E30, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[4] = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[5] = sub_100037004(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  id v7 = self;
  sub_10015F194();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  uint64_t v9 = (void *)swift_task_alloc();
  v0[16] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1003137C0;
  return sub_100326ABC();
}

void sub_100313B7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2 - 8);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040C330);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 136446210;
    sub_100037004(0xD00000000000001ALL, 0x8000000100379E10, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v14[3] = My;
  v14[4] = sub_1003240E8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v8 = sub_10003E0F4(v14);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v8, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v14);
  if (My)
  {
    if (sub_1002C890C())
    {
      type metadata accessor for WorkItemQueue.WorkItem();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v0;
      *(void *)(v9 + 24) = v1;
      swift_retain();
      UUID.init()();
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
      dispatch thunk of WorkItemQueue.enqueue(_:)();
      swift_release();
      return;
    }
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100037004(0xD00000000000001ALL, 0x8000000100379E10, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v13 = "%{public}s isFindingCapable == false.";
      goto LABEL_12;
    }
  }
  else
  {
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      sub_100037004(0xD00000000000001ALL, 0x8000000100379E10, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v13 = "%{public}s Feature.FindMy.redStripe FF disabled.";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100314048(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100314108, v1, 0);
}

uint64_t sub_100314108()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[6] = sub_100037004(0xD000000000000025, 0x8000000100379E50, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static ReferenceClock.now.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[13] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100314304;
  return sub_1002DB264();
}

uint64_t sub_100314304(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = *(void *)(*v2 + 72);
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = *(void *)(v3 + 64);
  if (v1) {
    uint64_t v9 = sub_1003146AC;
  }
  else {
    uint64_t v9 = sub_100314494;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100314494()
{
  uint64_t v12 = v0;
  uint64_t v1 = *(void **)(v0 + 112);
  if (!v1)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      *(void *)(v0 + 40) = sub_100037004(0xD000000000000025, 0x8000000100379E50, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s missing owner token!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_10;
  }
  if ((sub_100149508(*(void **)(v0 + 112), *(void *)(v0 + 56)) & 1) == 0)
  {

LABEL_10:
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Owner ranging is active.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = 1;
LABEL_11:
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v5);
}

uint64_t sub_1003146AC()
{
  id v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[15];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000025, 0x8000000100379E50, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[3] = v3;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_1003148D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = sub_100044014(&qword_1003F4800);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v10 + ((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100314AB8(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  sub_100044014(&qword_1003F29E0);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharedSecretsRecord();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v2[28] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100314CE0;
  return daemon.getter();
}

uint64_t sub_100314CE0(uint64_t a1)
{
  os_log_type_t v2 = (void *)*v1;
  unint64_t v9 = (void *)*v1;
  v2[29] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[30] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[31] = v4;
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[32] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100314EC0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100314EC0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100316894, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[35] = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_10031504C;
    uint64_t v6 = v3[19];
    return sub_100223900(v6);
  }
}

uint64_t sub_10031504C()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1003169A0;
  }
  else {
    os_log_type_t v2 = sub_100315160;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100315160()
{
  uint64_t v54 = v0;
  uint64_t v1 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[21] + 48))(v1, 1, v0[20]) == 1)
  {
    sub_10000A520(v1, &qword_1003F29E0);
    uint64_t v2 = static Data.random(bytes:)();
    v0[37] = v2;
    v0[38] = v3;
    uint64_t v4 = v2;
    unint64_t v5 = v3;
    switch(v3 >> 62)
    {
      case 1uLL:
        LODWORD(v6) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          JUMPOUT(0x100315A3CLL);
        }
        uint64_t v6 = (int)v6;
LABEL_15:
        if (v6 == 32)
        {
          uint64_t v24 = v0[23];
          uint64_t v26 = v0[16];
          uint64_t v25 = v0[17];
          uint64_t v49 = v0[15];
          uint64_t v48 = v0[14];
          uint64_t v50 = v0[13];
          uint64_t v51 = (int *)v0[20];
          uint64_t v52 = v0[12];
          sub_100362798();
          uint64_t v27 = String.utf8Data.getter();
          unint64_t v29 = v28;
          swift_bridgeObjectRelease();
          v0[2] = v27;
          v0[3] = v29;
          sub_10004F4EC();
          DataProtocol.stableUUID.getter();
          sub_100044090(v27, v29);
          static Date.trustedNow.getter(v48);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v25, v49);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v24 + v51[7], v48, v52);
          *(unsigned char *)(v24 + v51[5]) = 1;
          uint64_t v30 = (uint64_t *)(v24 + v51[6]);
          *uint64_t v30 = v4;
          v30[1] = v5;
          sub_100022C64(v4, v5);
          if (qword_1003EC430 != -1) {
            swift_once();
          }
          uint64_t v31 = v0[22];
          uint64_t v32 = v0[23];
          uint64_t v33 = type metadata accessor for Logger();
          sub_100044058(v33, (uint64_t)qword_10040C330);
          sub_100324020(v32, v31, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v36 = v0[24];
            uint64_t v37 = v0[22];
            uint64_t v38 = (uint8_t *)swift_slowAlloc();
            uint64_t v53 = swift_slowAlloc();
            *(_DWORD *)uint64_t v38 = 136315138;
            sub_100324020(v37, v36, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
            uint64_t v39 = String.init<A>(describing:)();
            v0[8] = sub_100037004(v39, v40, &v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100324088(v37, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "Creating new OwnerSharedSecretsRecord: %s", v38, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100324088(v0[22], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
          }

          unint64_t v46 = (void *)swift_task_alloc();
          v0[39] = v46;
          *unint64_t v46 = v0;
          v46[1] = sub_100315A4C;
          uint64_t v47 = v0[23];
          uint64_t result = sub_1002242D8(v47);
        }
        else
        {
LABEL_20:
          sub_100044090(v2, v3);
          if (qword_1003EC430 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          sub_100044058(v41, (uint64_t)qword_10040C330);
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = (uint8_t *)swift_slowAlloc();
            uint64_t v53 = swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = 136446210;
            v0[6] = sub_100037004(0xD000000000000023, 0x8000000100379D90, &v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s Unable to generate SharedSecretKey!", v44, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          swift_release();

          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v45 = (uint64_t (*)(void))v0[1];
          uint64_t result = v45();
        }
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v2 + 16);
        uint64_t v21 = *(void *)(v2 + 24);
        BOOL v23 = __OFSUB__(v21, v22);
        uint64_t v6 = v21 - v22;
        if (!v23) {
          goto LABEL_15;
        }
        goto LABEL_32;
      case 3uLL:
        goto LABEL_20;
      default:
        uint64_t v6 = BYTE6(v3);
        goto LABEL_15;
    }
  }
  else
  {
    sub_100324130(v1, v0[26], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[25];
    uint64_t v7 = v0[26];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040C330);
    sub_100324020(v7, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[25];
    if (v12)
    {
      uint64_t v14 = v0[24];
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_100324020(v13, v14, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
      uint64_t v16 = String.init<A>(describing:)();
      v0[9] = sub_100037004(v16, v17, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100324088(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Found existing owner record: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100324088(v0[25], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    }

    sub_100324130(v0[26], v0[27], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    unint64_t v18 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
    v0[47] = v18;
    uint64_t v19 = (void *)swift_task_alloc();
    v0[48] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1003161D0;
    return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, 0, v18);
  }
  return result;
}

uint64_t sub_100315A4C()
{
  uint64_t v2 = *v1;
  v2[40] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100316AAC, 0, 0);
  }
  else
  {
    sub_100324020(v2[23], v2[27], (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
    unint64_t v3 = (void *)swift_task_alloc();
    v2[41] = (uint64_t)v3;
    *unint64_t v3 = v2;
    v3[1] = sub_100315BD8;
    return daemon.getter();
  }
}

uint64_t sub_100315BD8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 336) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 344) = v5;
  uint64_t v6 = type metadata accessor for NITokenService_LocalMessaging();
  uint64_t v7 = sub_1003240E8(&qword_1003F14A8, (void (*)(uint64_t))type metadata accessor for NITokenService_LocalMessaging);
  *uint64_t v5 = v4;
  v5[1] = sub_100315D8C;
  uint64_t v8 = *(void *)(v2 + 256);
  uint64_t v9 = *(void *)(v2 + 248);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100315D8C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 352) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = sub_100316C3C;
    uint64_t v6 = 0;
  }
  else
  {
    *(void *)(v4 + 360) = a1;
    uint64_t v5 = sub_100315EE4;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100315EE4()
{
  sub_1002D8E48();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v1;
  void *v1 = v0;
  v1[1] = sub_100315F7C;
  return sub_1002CA9A0(0);
}

uint64_t sub_100315F7C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100316078, 0, 0);
}

uint64_t sub_100316078()
{
  uint64_t v1 = v0[37];
  unint64_t v2 = v0[38];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[13];
  swift_release();
  sub_100044090(v1, v2);
  sub_100324088(v3, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  unint64_t v10 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[47] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[48] = v11;
  void *v11 = v0;
  v11[1] = sub_1003161D0;
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, 0, v10);
}

uint64_t sub_1003161D0()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1003162E8, 0, 0);
}

uint64_t sub_1003162E8()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[18];
  sub_100324020(v1, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
  sub_100044014(&qword_1003F4800);
  CheckedContinuation.resume(returning:)();
  swift_release();
  sub_100324088(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100316458()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_10031658C, 0, 0);
}

uint64_t sub_10031658C()
{
  BOOL v12 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[49];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[7] = sub_100037004(0xD000000000000023, 0x8000000100379D90, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    v0[4] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    v0[5] = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(void, uint64_t, uint64_t, void))(v0[21] + 56))(v0[18], 1, 1, v0[20]);
  sub_100044014(&qword_1003F4800);
  CheckedContinuation.resume(returning:)();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100316894()
{
  swift_release();
  uint64_t v1 = v0[34];
  v0[49] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[50] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[52] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100316458;
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, v2, v4);
}

uint64_t sub_1003169A0()
{
  swift_release();
  uint64_t v1 = v0[36];
  v0[49] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[50] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[52] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100316458;
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, v2, v4);
}

uint64_t sub_100316AAC()
{
  uint64_t v1 = v0[37];
  unint64_t v2 = v0[38];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[13];
  swift_release();
  sub_100044090(v1, v2);
  sub_100324088(v3, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v10 = v0[40];
  v0[49] = v10;
  sub_1002ACC80();
  uint64_t v11 = swift_allocError();
  v0[50] = v11;
  *BOOL v12 = v10;
  swift_errorRetain();
  unint64_t v13 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[52] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100316458;
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, v11, v13);
}

uint64_t sub_100316C3C()
{
  uint64_t v1 = v0[37];
  unint64_t v2 = v0[38];
  uint64_t v16 = v0[27];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  uint64_t v9 = v0[12];
  uint64_t v8 = v0[13];
  swift_release();
  sub_100044090(v1, v2);
  sub_100324088(v3, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100324088(v16, (uint64_t (*)(void))type metadata accessor for OwnerSharedSecretsRecord);
  uint64_t v10 = v0[44];
  v0[49] = v10;
  sub_1002ACC80();
  uint64_t v11 = swift_allocError();
  v0[50] = v11;
  *BOOL v12 = v10;
  swift_errorRetain();
  unint64_t v13 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[51] = v13;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[52] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100316458;
  return sub_1002D99E0(0xD00000000000003BLL, 0x8000000100373280, v11, v13);
}

uint64_t sub_100316DE4(uint64_t a1, uint64_t a2)
{
  v2[34] = a1;
  v2[35] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[36] = v3;
  v2[37] = *(void *)(v3 - 8);
  v2[38] = swift_task_alloc();
  return _swift_task_switch(sub_100316EA4, 0, 0);
}

uint64_t sub_100316EA4()
{
  *(void *)(v0 + 256) = _swiftEmptyArrayStorage;
  static ReferenceClock.now.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v1;
  void *v1 = v0;
  v1[1] = sub_100316F50;
  return sub_1002DB264();
}

uint64_t sub_100316F50(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[40] = a1;
  v4[41] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[37] + 8))(v3[38], v3[36]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100318A68;
  }
  else
  {
    uint64_t v5 = sub_1003170CC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003170CC()
{
  uint64_t v1 = (void *)v0[40];
  if (v1)
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    id v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v12 = v0[40];
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138543362;
      v0[30] = v3;
      id v7 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v11 = v12;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Setting owner token: %{public}@", v6, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v8 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v0[32] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[32] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[42] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10031734C;
  return sub_1003108EC();
}

uint64_t sub_10031734C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 430) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10031744C, 0, 0);
}

uint64_t sub_10031744C()
{
  uint64_t v31 = v0;
  uint64_t v1 = (unint64_t *)(v0 + 256);
  switch(*(unsigned char *)(v0 + 430))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_4;
      }
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100044058(v5, (uint64_t)qword_10040C330);
      unint64_t v6 = *v1;
      swift_bridgeObjectRetain_n();
      id v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136446466;
        *(void *)(v0 + 224) = sub_100037004(0xD00000000000001ALL, 0x8000000100379E10, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v9 + 12) = 1024;
        if (v6 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(_DWORD *)(v0 + 424) = v10 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s should not include friend tokens. Start beaconing owner token? %{BOOL}d", (uint8_t *)v9, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      uint64_t v11 = self;
      swift_beginAccess();
      sub_10015F194();
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v13 = [v11 setLocalDeviceInteractableDiscoveryTokens:isa];

      id v14 = [v11 interactableDiscoveryTokens];
      if (v14)
      {
        uint64_t v15 = v14;
        static Array._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          unint64_t v18 = (uint8_t *)swift_slowAlloc();
          uint64_t v30 = swift_slowAlloc();
          *(_DWORD *)unint64_t v18 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v19 = Array.description.getter();
          unint64_t v21 = v20;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 216) = sub_100037004(v19, v21, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Interactable discovery tokens: %{public}s", v18, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        if (qword_1003EC448 != -1) {
          swift_once();
        }
        uint64_t v27 = sub_100044014(&qword_1003EFE58);
        sub_100044058(v27, (uint64_t)qword_1003F3CD8);
        *(unsigned char *)(v0 + 429) = 1;
        swift_beginAccess();
        ManagedDefault.wrappedValue.setter();
        swift_endAccess();
        unint64_t v28 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
        *(void *)(v0 + 384) = v28;
        unint64_t v29 = (void *)swift_task_alloc();
        *(void *)(v0 + 392) = v29;
        void *v29 = v0;
        v29[1] = sub_100318614;
        uint64_t result = sub_1002D99E0(0xD00000000000003ELL, 0x80000001003731C0, 0, v28);
      }
      else
      {
        if (*v1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v22 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v22)
        {
          BOOL v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, v24, "interactableDiscoveryTokens is unexpectedly empty!", v25, 2u);
            swift_slowDealloc();
          }
        }
        swift_task_dealloc();
        uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
        uint64_t result = v26();
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100317BE8;
      uint64_t result = sub_100318CDC();
      break;
  }
  return result;
}

uint64_t sub_100317BE8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100317CE8, 0, 0);
}

uint64_t sub_100317CE8()
{
  uint64_t v32 = v0;
  uint64_t v1 = sub_10030AD44(*(void *)(v0 + 352));
  sub_10012E194((unint64_t)v1);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 352);
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218242;
    *(void *)(v0 + 248) = *(void *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    type metadata accessor for DiscoveryToken(0);
    swift_bridgeObjectRetain();
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 232) = sub_100037004(v8, v10, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting friends tokens[%ld]: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = self;
  sub_10015F194();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [v11 setLocalDeviceInteractableDiscoveryTokens:isa];

  id v14 = [v11 interactableDiscoveryTokens];
  if (v14)
  {
    uint64_t v15 = v14;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v19 = Array.description.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = sub_100037004(v19, v21, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Interactable discovery tokens: %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (qword_1003EC448 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_100044014(&qword_1003EFE58);
    sub_100044058(v29, (uint64_t)qword_1003F3CD8);
    *(unsigned char *)(v0 + 428) = 1;
    swift_beginAccess();
    ManagedDefault.wrappedValue.setter();
    swift_endAccess();
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1003182D8;
    return sub_100326ABC();
  }
  else
  {
    unint64_t v22 = *(void *)(v0 + 256);
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v23)
    {
      os_log_type_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "interactableDiscoveryTokens is unexpectedly empty!", v26, 2u);
        swift_slowDealloc();
      }
    }
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
}

uint64_t sub_1003182D8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003183D4, 0, 0);
}

uint64_t sub_1003183D4()
{
  unint64_t v1 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 368) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100318498;
  return sub_1002D99E0(0xD00000000000003ELL, 0x80000001003732C0, 0, v1);
}

uint64_t sub_100318498()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1003185B0, 0, 0);
}

uint64_t sub_1003185B0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100318614()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10031872C, 0, 0);
}

uint64_t sub_10031872C()
{
  unint64_t v1 = 0xD000000000000010;
  int v2 = *(unsigned __int8 *)(v0 + 430);
  sub_1002ACC80();
  uint64_t v3 = swift_allocError();
  *(void *)(v0 + 400) = v3;
  *uint64_t v4 = 20;
  sub_100044014(&qword_1003F4448);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  strcpy((char *)(inited + 32), "findableStatus");
  *(unsigned char *)(inited + 47) = -18;
  unint64_t v6 = 0x8000000100375B50;
  uint64_t v7 = inited;
  switch(v2)
  {
    case 2:
      unint64_t v1 = 0xD00000000000001FLL;
      uint64_t v8 = "notFindableFindMyAppUninstalled";
      goto LABEL_6;
    case 3:
      unint64_t v1 = 0xD000000000000022;
      uint64_t v8 = "notFindableShareMyLocationDisabled";
      goto LABEL_6;
    case 4:
      unint64_t v1 = 0xD000000000000023;
      uint64_t v8 = "notFindableLocationServicesDisabled";
      goto LABEL_6;
    case 5:
      unint64_t v1 = 0xD000000000000012;
      uint64_t v8 = "notFindableUnknown";
LABEL_6:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = sub_10004650C();
  *(void *)(v7 + 48) = v1;
  *(void *)(v7 + 56) = v6;
  *(_WORD *)(v7 + 88) = 1;
  unint64_t v9 = sub_100101D3C(v7);
  *(void *)(v0 + 408) = v9;
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_100318934;
  return sub_1002D99E0(0xD00000000000003ELL, 0x80000001003732C0, v3, v9);
}

uint64_t sub_100318934()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_100324198, 0, 0);
}

uint64_t sub_100318A68()
{
  uint64_t v12 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[41];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    v0[26] = sub_100037004(0xD00000000000001ALL, 0x8000000100379E10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    v0[25] = v5;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v7 = String.init<A>(describing:)();
    v0[23] = sub_100037004(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100318CDC()
{
  v1[6] = v0;
  v1[7] = *v0;
  int v2 = (void *)swift_task_alloc();
  v1[8] = v2;
  *int v2 = v1;
  v2[1] = sub_100318D98;
  return daemon.getter();
}

uint64_t sub_100318D98(uint64_t a1)
{
  int v2 = (void *)*v1;
  unint64_t v9 = (void *)*v1;
  v2[9] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[10] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[11] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[12] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100318F78;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100318F78(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    return _swift_task_switch(sub_100319B78, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[15] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_1003190EC;
    return daemon.getter();
  }
}

uint64_t sub_1003190EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 128) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 136) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_1003240E8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_1003192A0;
  uint64_t v8 = *(void *)(v2 + 96);
  uint64_t v9 = *(void *)(v2 + 88);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1003192A0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_100319DE4;
  }
  else
  {
    uint64_t v6 = v3[6];
    swift_release();
    uint64_t v5 = sub_1003193C8;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1003193C8()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[7];
  uint64_t v3 = swift_allocObject();
  v0[20] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[21] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003194C8;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1003194C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = sub_10031A058;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_release();
    uint64_t v4 = sub_1003195F0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1003195F0()
{
  return _swift_task_switch(sub_10031960C, *(void *)(v0 + 104), 0);
}

uint64_t sub_10031960C()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 184) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.follower(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100319768;
  return sub_100021584(v4, 1);
}

uint64_t sub_100319768(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10031989C, v2, 0);
}

uint64_t sub_10031989C()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  v0[5] = v0[25];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  void v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[27] = v5;
  uint64_t v6 = sub_100044014(&qword_1003F0530);
  uint64_t v7 = type metadata accessor for DiscoveryToken(0);
  unint64_t v8 = sub_100323FC4();
  *uint64_t v5 = v0;
  v5[1] = sub_1003199B0;
  return Sequence.asyncCompactMap<A>(_:)(&unk_1003F48C0, v4, v6, v7, v8);
}

uint64_t sub_1003199B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100319B08, v2, 0);
}

uint64_t sub_100319B08()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100319B78()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[14];
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[2] = sub_100037004(0x6F54646E65697266, 0xEE002928736E656BLL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    v0[3] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  unint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(_swiftEmptyArrayStorage);
}

uint64_t sub_100319DE4()
{
  uint64_t v11 = v0;
  swift_release();
  uint64_t v1 = v0[19];
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[2] = sub_100037004(0x6F54646E65697266, 0xEE002928736E656BLL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    v0[3] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  unint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(_swiftEmptyArrayStorage);
}

uint64_t sub_10031A058()
{
  uint64_t v11 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = v0[22];
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[2] = sub_100037004(0x6F54646E65697266, 0xEE002928736E656BLL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    v0[3] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v6 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  unint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(_swiftEmptyArrayStorage);
}

void sub_10031A2D8(double a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = *v1;
  uint64_t v4 = type metadata accessor for UUID();
  __chkstk_darwin(v4 - 8);
  unint64_t v40 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F0100);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v44 = (uint64_t)&v38 - v15;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100044058(v16, (uint64_t)qword_10040C330);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v39 = v1;
    uint64_t v20 = v19;
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v38 = v11;
    uint64_t v46 = sub_100037004(0xD000000000000021, 0x8000000100379DC0, v47);
    uint64_t v11 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v46 = *(void *)&a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s threshold: %f", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v39;
    swift_slowDealloc();
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v47[3] = My;
  v47[4] = sub_1003240E8(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v22 = sub_10003E0F4(v47);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v22, enum case for Feature.FindMy.redStripe(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v47);
  if ((My & 1) == 0)
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v28 = 136446210;
      uint64_t v46 = sub_100037004(0xD000000000000021, 0x8000000100379DC0, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v29 = "%{public}s Feature.FindMy.redStripe FF disabled.";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v29, v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_16:
      swift_slowDealloc();
    }
LABEL_17:

    return;
  }
  if ((sub_1002C890C() & 1) == 0)
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v28 = 136446210;
      uint64_t v46 = sub_100037004(0xD000000000000021, 0x8000000100379DC0, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v29 = "%{public}s isFindingCapable == false.";
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  static Date.trustedNow.getter(v44);
  if (qword_1003EC450 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100044058(v6, (uint64_t)qword_1003F3CF0);
  swift_beginAccess();
  os_log_type_t v24 = v42;
  uint64_t v25 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v23, v6);
  ManagedDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v10, 1, v11) == 1)
  {
    static Date.distantPast.getter();
    sub_10000A520((uint64_t)v10, (uint64_t *)&unk_1003EE800);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v14, v10, v11);
  }
  uint64_t v30 = v44;
  Date.timeIntervalSince(_:)();
  double v32 = v31;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v45 + 8);
  v33(v14, v11);
  v33((char *)v30, v11);
  if (v32 <= a1)
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v26, v36)) {
      goto LABEL_17;
    }
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 134349312;
    uint64_t v46 = *(void *)&v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2050;
    uint64_t v46 = *(void *)&a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v26, v36, "Time since last token request attempt: %{public}f. Threshold: %{public}f. Not sending.", (uint8_t *)v37, 0x16u);
    goto LABEL_16;
  }
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v41;
  *(void *)(v34 + 16) = v2;
  *(void *)(v34 + 24) = v35;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
}

uint64_t sub_10031AB64(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10031AC24, 0, 0);
}

uint64_t sub_10031AC24()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[3] = sub_100037004(0x6F54646E65697266, 0xEE002928736E656BLL, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_10031AE0C, v5, 0);
}

uint64_t sub_10031AE0C()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_10031AEBC;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_10031AEBC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = sub_1001E3A48;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    uint64_t v4 = sub_10031AFF0;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10031AFF0()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0x6F54646E65697266, 0xEE002928736E656BLL, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10031B170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = type metadata accessor for Friend();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = sub_100044014(&qword_1003F1530);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v4[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[27] = v6;
  v4[28] = *(void *)(v6 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v4[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for FriendSharedSecretsRecord();
  v4[32] = v7;
  v4[33] = *(void *)(v7 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v4[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v4[37] = v8;
  v4[38] = *(void *)(v8 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v4[41] = v9;
  v4[42] = *(void *)(v9 - 8);
  v4[43] = swift_task_alloc();
  return _swift_task_switch(sub_10031B4D0, 0, 0);
}

uint64_t sub_10031B4D0()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[38];
  uint64_t v6 = v0[36];
  Friend.handle.getter();
  Handle.peerID.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[44] = v7;
  v0[45] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v3, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    sub_10000A520(v0[36], &qword_1003ECFB8);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v8 = v0[20];
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[18];
    uint64_t v11 = v0[14];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v11, v9);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[20];
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[18];
    if (v15)
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_100037004(v20, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v18 + 8))(v0[20], v0[17]);
    }

    uint64_t v26 = v0[13];
    uint64_t v27 = type metadata accessor for DiscoveryToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[42] + 32))(v0[43], v0[36], v0[41]);
    unint64_t v22 = (void *)swift_task_alloc();
    v0[46] = v22;
    *unint64_t v22 = v0;
    v22[1] = sub_10031B970;
    uint64_t v23 = v0[43];
    uint64_t v24 = v0[31];
    return sub_1000F6B40(v24, v23);
  }
}

uint64_t sub_10031B970()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10031C914;
  }
  else {
    uint64_t v2 = sub_10031BA84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10031BA84()
{
  uint64_t v110 = v0;
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[31];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[33] + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
    sub_10000A520(v2, &qword_1003EEEB8);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[20];
    uint64_t v4 = v0[17];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[14];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[20];
    uint64_t v12 = v0[17];
    uint64_t v13 = v0[18];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_100037004(v15, v16, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing friendSharedSecretsRecord for %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v13 + 8))(v0[20], v0[17]);
    }

LABEL_16:
    uint64_t v37 = v0[13];
    uint64_t v38 = type metadata accessor for DiscoveryToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
    goto LABEL_17;
  }
  uint64_t v17 = v0[35];
  sub_100324130(v2, v17, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
  uint64_t v18 = (uint64_t *)(v17 + *(int *)(v1 + 32));
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
LABEL_9:
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v25 = v0[34];
    uint64_t v24 = v0[35];
    uint64_t v26 = type metadata accessor for Logger();
    sub_100044058(v26, (uint64_t)qword_10040C330);
    sub_100324020(v24, v25, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v31 = v0[42];
    uint64_t v30 = v0[43];
    uint64_t v32 = v0[41];
    uint64_t v33 = v0[34];
    uint64_t v107 = v0[35];
    if (v29)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446210;
      sub_1003240E8(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_100037004(v35, v36, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100324088(v33, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No incomingSharedSecret for %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100324088(v107, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    else
    {

      sub_100324088(v33, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      sub_100324088(v107, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    goto LABEL_16;
  }
  uint64_t v20 = *v18;
  uint64_t v22 = v0[27];
  uint64_t v21 = v0[28];
  uint64_t v23 = v0[26];
  sub_100013210(v0[35] + *(int *)(v0[32] + 36), v23, (uint64_t *)&unk_1003EE800);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    sub_10000A520(v0[26], (uint64_t *)&unk_1003EE800);
    goto LABEL_9;
  }
  uint64_t v41 = v0[47];
  uint64_t v42 = v0[29];
  uint64_t v43 = (void (*)(void, void))v0[30];
  uint64_t v44 = (void *)v0[25];
  (*(void (**)(void (*)(void, void), void, void))(v0[28] + 32))(v43, v0[26], v0[27]);
  sub_100022C64(v20, v19);
  static Date.trustedNow.getter(v42);
  sub_10030868C(v20, v19, v43, v42, v44);
  if (v41)
  {
    uint64_t v45 = v0[35];
    uint64_t v46 = v0[29];
    uint64_t v47 = v0[30];
    uint64_t v48 = v0[27];
    uint64_t v49 = v0[28];
    sub_1000440E8(v20, v19);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v50(v46, v48);
    v50(v47, v48);
    sub_100324088(v45, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v52 = v0[18];
    uint64_t v51 = v0[19];
    uint64_t v53 = v0[17];
    uint64_t v54 = v0[14];
    uint64_t v55 = type metadata accessor for Logger();
    sub_100044058(v55, (uint64_t)qword_10040C330);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v60 = v0[18];
    uint64_t v59 = v0[19];
    uint64_t v61 = v0[17];
    if (v58)
    {
      uint64_t v62 = swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 141558531;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2081;
      sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_100037004(v63, v64, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      *(_WORD *)(v62 + 22) = 2082;
      v0[6] = v41;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v65 = String.init<A>(describing:)();
      v0[7] = sub_100037004(v65, v66, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v62, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_16;
  }
  uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v0[28] + 8);
  v108(v0[29], v0[27]);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v67 = v0[24];
  uint64_t v68 = v0[25];
  uint64_t v69 = v0[21];
  uint64_t v70 = v0[17];
  uint64_t v71 = v0[18];
  uint64_t v72 = v0[14];
  uint64_t v73 = type metadata accessor for Logger();
  sub_100044058(v73, (uint64_t)qword_10040C330);
  sub_100013210(v68, v67, &qword_1003F1530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v69, v72, v70);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  uint64_t v105 = v74;
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v94 = (void (*)(uint64_t, uint64_t))v0[44];
    uint64_t v101 = v0[41];
    uint64_t v103 = v0[43];
    uint64_t v76 = v0[39];
    uint64_t v93 = v0[37];
    uint64_t v99 = v0[35];
    uint64_t v100 = v0[42];
    uint64_t v97 = v0[27];
    uint64_t v98 = v0[30];
    uint64_t v78 = v0[23];
    uint64_t v77 = v0[24];
    uint64_t v92 = v0[21];
    uint64_t v95 = v0[18];
    uint64_t v96 = v0[17];
    uint64_t v79 = swift_slowAlloc();
    v109[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v79 = 141558787;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 12) = 2081;
    sub_100013210(v77, v78, &qword_1003F1530);
    uint64_t v80 = String.init<A>(describing:)();
    v0[10] = sub_100037004(v80, v81, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000A520(v77, &qword_1003F1530);
    *(_WORD *)(v79 + 22) = 2160;
    v0[11] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 32) = 2081;
    Friend.handle.getter();
    uint64_t v82 = Handle.identifier.getter();
    unint64_t v84 = v83;
    v94(v76, v93);
    v0[12] = sub_100037004(v82, v84, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v92, v96);
    _os_log_impl((void *)&_mh_execute_header, v105, v75, "Local discovery token: %{private,mask.hash}s for follower: %{private,mask.hash}s.", (uint8_t *)v79, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_1000440E8(v20, v19);

    v108(v98, v97);
    sub_100324088(v99, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v103, v101);
  }
  else
  {
    uint64_t v85 = v0[42];
    uint64_t v106 = v0[43];
    uint64_t v102 = v0[35];
    uint64_t v104 = v0[41];
    uint64_t v86 = v0[30];
    uint64_t v87 = v0[27];
    uint64_t v88 = v0[24];
    uint64_t v89 = v0[21];
    uint64_t v90 = v0[17];
    uint64_t v91 = v0[18];
    sub_1000440E8(v20, v19);

    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v89, v90);
    sub_10000A520(v88, &qword_1003F1530);
    v108(v86, v87);
    sub_100324088(v102, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v106, v104);
  }
  sub_100013B50(v0[25], v0[13], &qword_1003F1530);
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = (uint64_t (*)(void))v0[1];
  return v39();
}

uint64_t sub_10031C914()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[47];
  (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040C330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[18];
  uint64_t v10 = v0[19];
  uint64_t v12 = v0[17];
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_100037004(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 2082;
    v0[6] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v16 = String.init<A>(describing:)();
    v0[7] = sub_100037004(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Unable to generate discovery token for %{private,mask.hash}s. Error: %{public}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[13];
  uint64_t v19 = type metadata accessor for DiscoveryToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10031CD5C(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[12] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10031CE30;
  return daemon.getter();
}

uint64_t sub_10031CE30(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[13] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[14] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[15] = v4;
  uint64_t v5 = type metadata accessor for CloudStorageService();
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[16] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10031D010;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10031D010(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10031E13C;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10031D12C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10031D12C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[9];
  uint64_t v3 = swift_allocObject();
  v0[19] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10031D22C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_10031D22C()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10031E248;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10031D348;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10031D348()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  void *v1 = v0;
  v1[1] = sub_10031D3D8;
  return daemon.getter();
}

uint64_t sub_10031D3D8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 184) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 192) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_1003240E8(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v5 = v4;
  v5[1] = sub_10031D58C;
  uint64_t v8 = *(void *)(v2 + 128);
  uint64_t v9 = *(void *)(v2 + 120);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10031D58C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_10031E360;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10031D6A8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10031D6A8()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  long long v4 = *(_OWORD *)(v0 + 64);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031D7A0;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10031D7A0()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10031E478;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10031D8BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10031D8BC()
{
  uint64_t v14 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[7] = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s completed!", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[11];
  static Date.trustedNow.getter(v5);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  if (qword_1003EC450 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  uint64_t v9 = sub_100044014(&qword_1003F0100);
  sub_100044058(v9, (uint64_t)qword_1003F3CF0);
  sub_100013210(v8, v7, (uint64_t *)&unk_1003EE800);
  swift_beginAccess();
  ManagedDefault.wrappedValue.setter();
  swift_endAccess();
  sub_10000A520(v8, (uint64_t *)&unk_1003EE800);
  unint64_t v10 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[30] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[31] = v11;
  void *v11 = v0;
  v11[1] = sub_10031DBDC;
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373380, 0, v10);
}

uint64_t sub_10031DBDC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10031DCF4, 0, 0);
}

uint64_t sub_10031DCF4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10031DD74()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return _swift_task_switch(sub_10031DEA8, 0, 0);
}

uint64_t sub_10031DEA8()
{
  unint64_t v10 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[5] = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10031E13C()
{
  swift_release();
  uint64_t v1 = v0[18];
  v0[32] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[33] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031DD74;
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373380, v2, v4);
}

uint64_t sub_10031E248()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[21];
  v0[32] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[33] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031DD74;
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373380, v2, v4);
}

uint64_t sub_10031E360()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[26];
  v0[32] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[33] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031DD74;
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373380, v2, v4);
}

uint64_t sub_10031E478()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = v0[29];
  v0[32] = v1;
  sub_1002ACC80();
  uint64_t v2 = swift_allocError();
  v0[33] = v2;
  *os_log_type_t v3 = v1;
  swift_errorRetain();
  unint64_t v4 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[34] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031DD74;
  return sub_1002D99E0(0xD00000000000003ALL, 0x8000000100373380, v2, v4);
}

uint64_t sub_10031E59C(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v3 = type metadata accessor for CloudKitStorage.State();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10031E65C, 0, 0);
}

uint64_t sub_10031E65C()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136446210;
    v0[3] = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for CloudKit to be available %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[4];
  (*(void (**)(void, void, void))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return _swift_task_switch(sub_10031E83C, v5, 0);
}

uint64_t sub_10031E83C()
{
  unint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                       + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  void *v1 = v0;
  v1[1] = sub_10031E8EC;
  uint64_t v2 = *(void *)(v0 + 56);
  return v4(v2);
}

uint64_t sub_10031E8EC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    unint64_t v4 = sub_1001E0570;
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
    unint64_t v4 = sub_10031EA20;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10031EA20()
{
  uint64_t v7 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CloudKit is available. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10031EB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[25] = a5;
  v6[26] = a6;
  v6[23] = a3;
  v6[24] = a4;
  v6[22] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v6[31] = swift_task_alloc();
  sub_100044014(&qword_1003EEEB8);
  v6[32] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendSharedSecretsRecord();
  v6[33] = v8;
  v6[34] = *(void *)(v8 - 8);
  v6[35] = swift_task_alloc();
  v6[36] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v6[37] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Handle();
  v6[38] = v9;
  v6[39] = *(void *)(v9 - 8);
  v6[40] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v6[41] = v10;
  v6[42] = *(void *)(v10 - 8);
  v6[43] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Friend();
  v6[44] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[45] = v12;
  v6[46] = *(void *)(v12 + 64);
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  v6[50] = swift_task_alloc();
  v6[51] = swift_task_alloc();
  v6[52] = swift_task_alloc();
  return _swift_task_switch(sub_10031EEB8, a3, 0);
}

uint64_t sub_10031EEB8()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 424) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10031F014;
  return sub_100021584(v4, 1);
}

uint64_t sub_10031F014(uint64_t a1)
{
  *(void *)(*(void *)v1 + 440) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10031F134, 0, 0);
}

uint64_t sub_10031F134()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 440) + 16);
  *(void *)(v0 + 448) = v1;
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0 + 360);
    *(_DWORD *)(v0 + 520) = *(_DWORD *)(v3 + 80);
    *(void *)(v0 + 456) = *(void *)(v3 + 72);
    *(void *)(v0 + 464) = *(void *)(v3 + 16);
    while (1)
    {
      uint64_t v4 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 464);
      uint64_t v5 = *(void *)(v0 + 416);
      uint64_t v6 = *(void *)(v0 + 352);
      unint64_t v7 = *(void *)(v0 + 440)
         + ((*(unsigned __int8 *)(v0 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520))
         + *(void *)(v0 + 456) * v2;
      unint64_t v8 = (*(void *)(v0 + 360) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      *(void *)(v0 + 472) = v2;
      *(void *)(v0 + 480) = v8;
      v4(v5, v7, v6);
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      uint64_t v10 = *(void *)(v0 + 408);
      uint64_t v11 = *(void *)(v0 + 416);
      uint64_t v12 = *(void *)(v0 + 352);
      uint64_t v13 = type metadata accessor for Logger();
      *(void *)(v0 + 488) = sub_100044058(v13, (uint64_t)qword_10040C330);
      v9(v10, v11, v12);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      BOOL v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *(void *)(v0 + 408);
      uint64_t v18 = *(void *)(v0 + 352);
      uint64_t v19 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 360) + 8);
      if (v16)
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 141558275;
        *(void *)(v20 + 4) = 1752392040;
        *(_WORD *)(v20 + 12) = 2081;
        sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v20 + 14) = sub_100037004(v21, v22, &v49);
        swift_bridgeObjectRelease();
        uint64_t v23 = *v19;
        (*v19)(v17, v18);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checking if we need to request token for %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v23 = *v19;
        (*v19)(*(void *)(v0 + 408), *(void *)(v0 + 352));
      }

      uint64_t v24 = v23;
      *(void *)(v0 + 496) = v23;
      uint64_t v25 = *(void *)(v0 + 328);
      uint64_t v26 = *(void *)(v0 + 336);
      uint64_t v28 = *(void *)(v0 + 312);
      uint64_t v27 = *(void *)(v0 + 320);
      uint64_t v30 = *(void *)(v0 + 296);
      uint64_t v29 = *(void *)(v0 + 304);
      Friend.handle.getter();
      Handle.peerID.getter();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v30, 1, v25) != 1) {
        break;
      }
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      uint64_t v32 = *(void *)(v0 + 416);
      uint64_t v33 = *(void *)(v0 + 400);
      uint64_t v34 = *(void *)(v0 + 352);
      sub_10000A520(*(void *)(v0 + 296), &qword_1003ECFB8);
      v31(v33, v32, v34);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v38 = *(void *)(v0 + 416);
      uint64_t v39 = *(void *)(v0 + 400);
      uint64_t v40 = *(void *)(v0 + 352);
      if (v37)
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 136446723;
        *(void *)(v41 + 4) = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v49);
        *(_WORD *)(v41 + 12) = 2160;
        *(void *)(v41 + 14) = 1752392040;
        *(_WORD *)(v41 + 22) = 2081;
        sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v41 + 24) = sub_100037004(v42, v43, &v49);
        swift_bridgeObjectRelease();
        v24(v39, v40);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s No peerID for following %{private,mask.hash}s", (uint8_t *)v41, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v24(v39, v40);
      }
      v24(v38, v40);
      uint64_t v2 = *(void *)(v0 + 472) + 1;
      if (v2 == *(void *)(v0 + 448)) {
        goto LABEL_16;
      }
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 336) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 296), *(void *)(v0 + 328));
    uint64_t v44 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_10031F800;
    uint64_t v45 = *(void *)(v0 + 344);
    uint64_t v46 = *(void *)(v0 + 256);
    return sub_1000F6B40(v46, v45);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
}

uint64_t sub_10031F800()
{
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100320B2C;
  }
  else {
    uint64_t v2 = sub_10031F914;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10031F914()
{
  uint64_t v142 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 256);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 272) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 352);
    sub_10000A520(v2, &qword_1003EEEB8);
    v3(v5, v4, v6);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v11 = *(void *)(v0 + 352);
    if (v9)
    {
      uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446723;
      *(void *)(v0 + 144) = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2160;
      *(void *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2081;
      sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 128) = sub_100037004(v13, v14, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v132(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Missing friendSharedSecretsRecord for %{private,mask.hash}s. Requesting token...", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 496))(*(void *)(v0 + 392), *(void *)(v0 + 352));
    }

    uint64_t v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v19 = *(void *)(v0 + 376);
    uint64_t v21 = *(void *)(v0 + 352);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v22 = *(void *)(v0 + 224);
    uint64_t v124 = v22;
    uint64_t v126 = *(void *)(v0 + 416);
    uint64_t v138 = *(void *)(v0 + 216);
    uint64_t v130 = *(void *)(v0 + 200);
    unint64_t v23 = (*(unsigned __int8 *)(v0 + 520) + 40) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520);
    unint64_t v133 = (*(void *)(v0 + 368) + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v135 = *(void *)(v0 + 208);
    uint64_t v24 = type metadata accessor for TaskPriority();
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v22, 1, 1, v24);
    v128(v19, v126, v21);
    uint64_t v26 = (char *)swift_allocObject();
    *((void *)v26 + 2) = 0;
    *((void *)v26 + 3) = 0;
    *((void *)v26 + 4) = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(&v26[v23], v19, v21);
    *(void *)&v26[v133] = v135;
    sub_100013210(v124, v138, (uint64_t *)&unk_1003F3C10);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v138, 1, v24);
    swift_retain();
    uint64_t v27 = *(void *)(v0 + 216);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 216), (uint64_t *)&unk_1003F3C10);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v24);
    }
    if (*((void *)v26 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v39 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v41 = v40;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    uint64_t v51 = **(void **)(v0 + 176);
    uint64_t v52 = v41 | v39;
    if (v41 | v39)
    {
      uint64_t v52 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v39;
      *(void *)(v0 + 40) = v41;
    }
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    uint64_t v54 = *(void *)(v0 + 416);
    uint64_t v55 = *(void *)(v0 + 352);
    uint64_t v56 = *(void *)(v0 + 336);
    uint64_t v57 = *(void *)(v0 + 344);
    uint64_t v58 = *(void *)(v0 + 328);
    uint64_t v59 = *(void *)(v0 + 224);
    *(void *)(v0 + 104) = 1;
    *(void *)(v0 + 112) = v52;
    *(void *)(v0 + 120) = v51;
    swift_task_create();
    swift_release();
    sub_10000A520(v59, (uint64_t *)&unk_1003F3C10);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
    v53(v54, v55);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v15 = *(void *)(v0 + 288);
    sub_100324130(v2, v15, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    unint64_t v17 = *(void *)(v15 + *(int *)(v1 + 24) + 8);
    sub_100324020(v15, v16, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    uint64_t v18 = *(void *)(v0 + 280);
    if (v17 >> 60 == 15)
    {
      sub_100324088(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 248);
      sub_100013210(v18 + *(int *)(*(void *)(v0 + 264) + 28), v28, (uint64_t *)&unk_1003EE800);
      sub_100324088(v18, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
      uint64_t v29 = type metadata accessor for Date();
      int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29);
      sub_10000A520(v28, (uint64_t *)&unk_1003EE800);
      if (v30 != 1)
      {
        uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
        uint64_t v73 = *(void *)(v0 + 416);
        uint64_t v74 = *(void *)(v0 + 352);
        uint64_t v76 = *(void *)(v0 + 336);
        uint64_t v75 = *(void *)(v0 + 344);
        uint64_t v77 = *(void *)(v0 + 328);
        sub_100324088(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
        v72(v73, v74);
        goto LABEL_30;
      }
    }
    (*(void (**)(void, void, void))(v0 + 464))(*(void *)(v0 + 384), *(void *)(v0 + 416), *(void *)(v0 + 352));
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = *(void *)(v0 + 384);
    uint64_t v35 = *(void *)(v0 + 352);
    if (v33)
    {
      uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
      uint64_t v36 = swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446723;
      *(void *)(v0 + 152) = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2160;
      *(void *)(v0 + 160) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2081;
      sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 168) = sub_100037004(v37, v38, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v136(v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s Missing outgoingSharedSecret for %{private,mask.hash}s. Requesting token...", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 496))(*(void *)(v0 + 384), *(void *)(v0 + 352));
    }

    uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
    uint64_t v42 = *(void *)(v0 + 376);
    uint64_t v44 = *(void *)(v0 + 352);
    uint64_t v43 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 240);
    uint64_t v125 = v45;
    uint64_t v127 = *(void *)(v0 + 416);
    uint64_t v139 = *(void *)(v0 + 232);
    uint64_t v131 = *(void *)(v0 + 200);
    unint64_t v46 = (*(unsigned __int8 *)(v0 + 520) + 40) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520);
    unint64_t v134 = (*(void *)(v0 + 368) + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v137 = *(void *)(v0 + 208);
    uint64_t v47 = type metadata accessor for TaskPriority();
    uint64_t v48 = *(void *)(v47 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v45, 1, 1, v47);
    v129(v42, v127, v44);
    uint64_t v49 = (char *)swift_allocObject();
    *((void *)v49 + 2) = 0;
    *((void *)v49 + 3) = 0;
    *((void *)v49 + 4) = v131;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(&v49[v46], v42, v44);
    *(void *)&v49[v134] = v137;
    sub_100013210(v125, v139, (uint64_t *)&unk_1003F3C10);
    LODWORD(v43) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v139, 1, v47);
    swift_retain();
    uint64_t v50 = *(void *)(v0 + 232);
    if (v43 == 1)
    {
      sub_10000A520(*(void *)(v0 + 232), (uint64_t *)&unk_1003F3C10);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v47);
    }
    if (*((void *)v49 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v60 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v62 = v61;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v60 = 0;
      uint64_t v62 = 0;
    }
    uint64_t v63 = **(void **)(v0 + 176);
    uint64_t v64 = v62 | v60;
    if (v62 | v60)
    {
      uint64_t v64 = v0 + 48;
      *(void *)(v0 + 48) = 0;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = v60;
      *(void *)(v0 + 72) = v62;
    }
    uint64_t v140 = *(void (**)(uint64_t, uint64_t))(v0 + 496);
    uint64_t v65 = *(void *)(v0 + 416);
    uint64_t v66 = *(void *)(v0 + 352);
    uint64_t v67 = *(void *)(v0 + 336);
    uint64_t v68 = *(void *)(v0 + 344);
    uint64_t v69 = *(void *)(v0 + 328);
    uint64_t v70 = *(void *)(v0 + 288);
    uint64_t v71 = *(void *)(v0 + 240);
    *(void *)(v0 + 80) = 1;
    *(void *)(v0 + 88) = v64;
    *(void *)(v0 + 96) = v63;
    swift_task_create();
    swift_release();
    sub_10000A520(v71, (uint64_t *)&unk_1003F3C10);
    sub_100324088(v70, (uint64_t (*)(void))type metadata accessor for FriendSharedSecretsRecord);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
    v140(v65, v66);
  }
LABEL_30:
  uint64_t v78 = *(void *)(v0 + 472) + 1;
  if (v78 == *(void *)(v0 + 448))
  {
LABEL_31:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v79 = *(uint64_t (**)(void))(v0 + 8);
    return v79();
  }
  else
  {
    while (1)
    {
      unint64_t v84 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 464);
      uint64_t v85 = *(void *)(v0 + 416);
      uint64_t v86 = *(void *)(v0 + 352);
      unint64_t v87 = *(void *)(v0 + 440)
          + ((*(unsigned __int8 *)(v0 + 520) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 520))
          + *(void *)(v0 + 456) * v78;
      unint64_t v88 = (*(void *)(v0 + 360) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      *(void *)(v0 + 472) = v78;
      *(void *)(v0 + 480) = v88;
      v84(v85, v87, v86);
      if (qword_1003EC430 != -1) {
        swift_once();
      }
      uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      uint64_t v90 = *(void *)(v0 + 408);
      uint64_t v91 = *(void *)(v0 + 416);
      uint64_t v92 = *(void *)(v0 + 352);
      uint64_t v93 = type metadata accessor for Logger();
      *(void *)(v0 + 488) = sub_100044058(v93, (uint64_t)qword_10040C330);
      v89(v90, v91, v92);
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.default.getter();
      BOOL v96 = os_log_type_enabled(v94, v95);
      uint64_t v97 = *(void *)(v0 + 408);
      uint64_t v98 = *(void *)(v0 + 352);
      uint64_t v99 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 360) + 8);
      if (v96)
      {
        uint64_t v100 = swift_slowAlloc();
        uint64_t v141 = swift_slowAlloc();
        *(_DWORD *)uint64_t v100 = 141558275;
        *(void *)(v100 + 4) = 1752392040;
        *(_WORD *)(v100 + 12) = 2081;
        sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v100 + 14) = sub_100037004(v101, v102, &v141);
        swift_bridgeObjectRelease();
        uint64_t v103 = *v99;
        (*v99)(v97, v98);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Checking if we need to request token for %{private,mask.hash}s", (uint8_t *)v100, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v103 = *v99;
        (*v99)(*(void *)(v0 + 408), *(void *)(v0 + 352));
      }

      uint64_t v104 = v103;
      *(void *)(v0 + 496) = v103;
      uint64_t v105 = *(void *)(v0 + 328);
      uint64_t v106 = *(void *)(v0 + 336);
      uint64_t v108 = *(void *)(v0 + 312);
      uint64_t v107 = *(void *)(v0 + 320);
      uint64_t v110 = *(void *)(v0 + 296);
      uint64_t v109 = *(void *)(v0 + 304);
      Friend.handle.getter();
      Handle.peerID.getter();
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v109);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v110, 1, v105) != 1) {
        break;
      }
      uint64_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
      uint64_t v112 = *(void *)(v0 + 416);
      uint64_t v113 = *(void *)(v0 + 400);
      uint64_t v114 = *(void *)(v0 + 352);
      sub_10000A520(*(void *)(v0 + 296), &qword_1003ECFB8);
      v111(v113, v112, v114);
      uint64_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.error.getter();
      BOOL v117 = os_log_type_enabled(v115, v116);
      uint64_t v118 = *(void *)(v0 + 416);
      uint64_t v119 = *(void *)(v0 + 400);
      uint64_t v120 = *(void *)(v0 + 352);
      if (v117)
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v141 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136446723;
        *(void *)(v81 + 4) = sub_100037004(0xD000000000000021, 0x8000000100379DC0, &v141);
        *(_WORD *)(v81 + 12) = 2160;
        *(void *)(v81 + 14) = 1752392040;
        *(_WORD *)(v81 + 22) = 2081;
        sub_1003240E8(&qword_1003EFEB8, (void (*)(uint64_t))&type metadata accessor for Friend);
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v81 + 24) = sub_100037004(v82, v83, &v141);
        swift_bridgeObjectRelease();
        v104(v119, v120);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "%{public}s No peerID for following %{private,mask.hash}s", (uint8_t *)v81, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v104(v119, v120);
      }
      v104(v118, v120);
      uint64_t v78 = *(void *)(v0 + 472) + 1;
      if (v78 == *(void *)(v0 + 448)) {
        goto LABEL_31;
      }
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 336) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 296), *(void *)(v0 + 328));
    uint64_t v121 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v121;
    *uint64_t v121 = v0;
    v121[1] = sub_10031F800;
    uint64_t v122 = *(void *)(v0 + 344);
    uint64_t v123 = *(void *)(v0 + 256);
    return sub_1000F6B40(v123, v122);
  }
}

uint64_t sub_100320B2C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[62];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[44];
  uint64_t v4 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[41];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100320CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a5;
  uint64_t v7 = type metadata accessor for Friend();
  v5[6] = v7;
  v5[7] = *(void *)(v7 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v5[9] = v8;
  v5[10] = *(void *)(v8 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[12] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_100320E1C;
  return sub_100320F68(a5);
}

uint64_t sub_100320E1C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1003241AC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100320F68(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  v2[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MessagingOptions();
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003ECF50);
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v2[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Account();
  v2[30] = v6;
  v2[31] = *(void *)(v6 - 8);
  v2[32] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MessagingCapability();
  v2[33] = v7;
  v2[34] = *(void *)(v7 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  v2[36] = v8;
  v2[37] = *(void *)(v8 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Handle();
  v2[39] = v9;
  v2[40] = *(void *)(v9 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_1003212E8, v1, 0);
}

uint64_t sub_1003212E8()
{
  uint64_t v20 = v0;
  Friend.handle.getter();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = type metadata accessor for Logger();
  v0[46] = sub_100044058(v5, (uint64_t)qword_10040C330);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[47] = v6;
  v0[48] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v2, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[44];
  uint64_t v11 = v0[40];
  if (v9)
  {
    uint64_t v18 = v0[39];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[15] = sub_100037004(0xD000000000000013, 0x8000000100379DF0, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    uint64_t v13 = Handle.identifier.getter();
    v0[7] = sub_100037004(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s from: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v0[44], v0[39]);
  }

  v0[49] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[50] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003215C8;
  return daemon.getter();
}

uint64_t sub_1003215C8(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  BOOL v9 = (void *)*v1;
  v2[51] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[52] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[53] = v4;
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_1003240E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[54] = v6;
  uint64_t v7 = sub_1003240E8(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_1003217A8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1003217A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 440) = a1;
  *(void *)(v4 + 448) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 144);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_1002F5AAC;
  }
  else {
    uint64_t v6 = sub_1003218F8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003218F8()
{
  char v1 = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v1) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  uint64_t v2 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  *(_DWORD *)(v0 + 552) = enum case for MessagingCapability.supportsPeopleFindingV1(_:);
  uint64_t v5 = *(void (**)(uint64_t))(v4 + 104);
  *(void *)(v0 + 456) = v5;
  *(void *)(v0 + 464) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v5(v3);
  return _swift_task_switch(sub_1003219B4, v2, 0);
}

uint64_t sub_1003219B4()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:)
                                                + async function pointer to dispatch thunk of QueryController.destinationHasCapability(destination:capability:));
  char v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  void *v1 = v0;
  v1[1] = sub_100321A68;
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[35];
  return v5(v2, v3);
}

uint64_t sub_100321A68(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 440);
    uint64_t v6 = sub_1002F4548;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 296);
    uint64_t v7 = *(void *)(v4 + 304);
    uint64_t v9 = *(void *)(v4 + 280);
    uint64_t v10 = *(void *)(v4 + 288);
    uint64_t v11 = *(void *)(v4 + 264);
    uint64_t v12 = *(void *)(v4 + 272);
    uint64_t v13 = *(void *)(v4 + 144);
    *(unsigned char *)(v4 + 557) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v10);
    uint64_t v6 = sub_100321BD8;
    uint64_t v5 = v13;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100321BD8()
{
  uint64_t v18 = v0;
  if (*(unsigned char *)(v0 + 557) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v1;
    void *v1 = v0;
    v1[1] = sub_100321F84;
    return daemon.getter();
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 376))(*(void *)(v0 + 328), *(void *)(v0 + 360), *(void *)(v0 + 312));
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 328);
    if (v4)
    {
      uint64_t v15 = *(void *)(v0 + 312);
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
      uint64_t v6 = swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446723;
      *(void *)(v0 + 64) = sub_100037004(0xD000000000000013, 0x8000000100379DF0, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2160;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2081;
      uint64_t v7 = Handle.identifier.getter();
      *(void *)(v0 + 40) = sub_100037004(v7, v8, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v5, v15);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %{private,mask.hash}s missing required capability", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 328), *(void *)(v0 + 312));
    }

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 312);
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v12 = 3;
    swift_willThrow();
    swift_release();
    v9(v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100321F84(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 496) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 504) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_1003240E8(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_100322138;
  uint64_t v8 = *(void *)(v2 + 432);
  uint64_t v9 = *(void *)(v2 + 424);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100322138(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[18];
    swift_release();
    return _swift_task_switch(sub_1002F5BDC, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[66] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1003222E8;
    uint64_t v7 = v3[29];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1003222E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003223F8, v1, 0);
}

uint64_t sub_1003223F8()
{
  uint64_t v45 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      *(void *)(v0 + 48) = sub_100037004(0xD000000000000013, 0x8000000100379DF0, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Missing primary account to send FindingTokenReuqest with my dsid!", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 312);
    sub_1002ACC80();
    swift_allocError();
    *uint64_t v10 = 16;
    swift_willThrow();
    swift_release();
    swift_release();
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    goto LABEL_10;
  }
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 312);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 256), v3, v1);
  Swift::String v17 = Account.dsidBase64EncodedString()();
  v13(v15, v14, v16);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v22 = *(void *)(v0 + 312);
  if (v20)
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    os_log_type_t type = v19;
    uint64_t v23 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 141558787;
    *(void *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v24 = Handle.identifier.getter();
    *(void *)(v0 + 96) = sub_100037004(v24, v25, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v21, v22);
    *(_WORD *)(v23 + 22) = 2160;
    *(void *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 32) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = sub_100037004(v17._countAndFlagsBits, (unint64_t)v17._object, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, type, "Requesting shared secret from %{private,mask.hash}s.\nserverId: %{private,mask.hash}s over IDS.", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 392))(*(void *)(v0 + 344), *(void *)(v0 + 312));
    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = *(void *)(v0 + 520);
  *(unsigned char *)(v0 + 556) = 3;
  *(Swift::String *)(v0 + 16) = v17;
  sub_100072920();
  sub_100307DCC();
  sub_100307E20();
  Message.init<A>(type:version:payload:)();
  if (v26)
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v27 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 248);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v31 = *(void *)(v0 + 240);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    uint64_t v11 = v27;
    uint64_t v12 = v28;
LABEL_10:
    v7(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  sub_100044014(&qword_1003ECFC0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100367D70;
  char v34 = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v34) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  uint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v36 = *(unsigned int *)(v0 + 552);
  uint64_t v43 = *(void *)(v0 + 440);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 272);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 56))(*(void *)(v0 + 176), 1, 1, *(void *)(v0 + 152));
  sub_100044014(&qword_1003F4368);
  unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_100367D70;
  v35(v40 + v39, v36, v37);
  sub_100179698(v40);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
  return _swift_task_switch(sub_100322B74, v43, 0);
}

uint64_t sub_100322B74()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[67] = v1;
  void *v1 = v0;
  v1[1] = sub_100322C1C;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  return InternetMessaging.send(message:messageOptions:)(v4, v2, v3);
}

uint64_t sub_100322C1C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[18];
    uint64_t v4 = sub_1002F54F4;
  }
  else
  {
    uint64_t v5 = v2[18];
    (*(void (**)(void, void))(v2[20] + 8))(v2[21], v2[19]);
    uint64_t v4 = sub_100322D50;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100322D50()
{
  uint64_t v37 = v0;
  (*(void (**)(void, void, void))(v0 + 376))(*(void *)(v0 + 336), *(void *)(v0 + 360), *(void *)(v0 + 312));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v34 = *(void *)(v0 + 360);
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 312);
    uint64_t v32 = *(void *)(v0 + 256);
    uint64_t v28 = *(void *)(v0 + 248);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v24 = *(void *)(v0 + 208);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 72) = 1752392040;
    uint64_t v36 = v5;
    *(_DWORD *)uint64_t v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v6 = Handle.identifier.getter();
    *(void *)(v0 + 80) = sub_100037004(v6, v7, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18(v3, v17);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully requested finding token from %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v24);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v30);
    v18(v34, v17);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    uint64_t v35 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 336);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 256);
    uint64_t v29 = *(void *)(v0 + 224);
    uint64_t v31 = *(void *)(v0 + 240);
    uint64_t v11 = v1;
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 184);
    swift_release();
    swift_release();

    v8(v25, v9);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v23, v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v29, v27);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v33, v31);
    v8(v35, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100323150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a5;
  uint64_t v7 = type metadata accessor for Friend();
  v5[6] = v7;
  v5[7] = *(void *)(v7 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v5[9] = v8;
  v5[10] = *(void *)(v8 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v5[12] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_1003232A4;
  return sub_100320F68(a5);
}

uint64_t sub_1003232A4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1003233F0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1003233F0()
{
  uint64_t v28 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040C330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t type = v7;
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[11];
    uint64_t v22 = v0[9];
    uint64_t v21 = v0[8];
    uint64_t v10 = v0[7];
    uint64_t v23 = v0[6];
    os_log_t log = v6;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    Friend.handle.getter();
    uint64_t v12 = Handle.identifier.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v22);
    v0[3] = sub_100037004(v12, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v21, v23);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to request token from %{private,mask.hash}s error - %{public}@", (uint8_t *)v11, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v16 = v0[7];
    uint64_t v17 = v0[8];
    uint64_t v18 = v0[6];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100323770(uint64_t a1)
{
  return sub_1003148D4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100323778()
{
  uint64_t v1 = sub_100044014(&qword_1003F4800);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100323818()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F4800) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_100314AB8(v4, v5);
}

uint64_t sub_100323918()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100323950()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10004A274;
  return sub_10031CD5C(v2, v3);
}

uint64_t sub_1003239E8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10031E59C(a1, v4);
}

uint64_t sub_100323A94(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10004A274;
  return sub_10031EB98(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_100323B60(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Friend() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10004A274;
  return sub_100320CC8(a1, v5, v6, v7, v8);
}

uint64_t sub_100323C90(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Friend() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10004A274;
  return sub_100323150(a1, v5, v6, v7, v8);
}

uint64_t sub_100323DBC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10004A274;
  return sub_100316DE4(v2, v3);
}

uint64_t sub_100323E54(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10031AB64(a1, v4);
}

uint64_t sub_100323F00(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100018CD0;
  return sub_10031B170(a1, a2, v6, v7);
}

unint64_t sub_100323FC4()
{
  unint64_t result = qword_1003F48C8;
  if (!qword_1003F48C8)
  {
    sub_10004AE58(&qword_1003F0530);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F48C8);
  }
  return result;
}

uint64_t sub_100324020(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100324088(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003240E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100324130(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003241B0()
{
  *(void *)(v1 + 48) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100324244;
  return daemon.getter();
}

uint64_t sub_100324244(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047504(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047504(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100324420;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100324420(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    return _swift_task_switch(sub_100324D68, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[12] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100324594;
    return sub_1002DCD20();
  }
}

uint64_t sub_100324594(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 104) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 48);
  if (v1)
  {
    uint64_t v6 = sub_100324FEC;
  }
  else
  {
    *(unsigned char *)(v4 + 136) = a1 & 1;
    uint64_t v6 = sub_1003246D4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003246D4()
{
  uint64_t v9 = v0;
  if (*(unsigned char *)(v0 + 136) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 80);
    return _swift_task_switch(sub_1003248F0, v1, 0);
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *(void *)(v0 + 32) = sub_100037004(0xD000000000000011, 0x8000000100379EA0, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s not eligible to generate tokens.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();

    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6(0);
  }
}

uint64_t sub_1003248F0()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 112) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.follower(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100324A4C;
  return sub_100021584(v4, 1);
}

uint64_t sub_100324A4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100324B80, v2, 0);
}

uint64_t sub_100324B80()
{
  uint64_t v9 = v0;
  uint64_t v1 = *(void *)(v0[16] + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_release();
  }
  else
  {
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C330);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      v0[5] = sub_100037004(0xD000000000000011, 0x8000000100379EA0, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s no followers.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();
  }
  uint64_t v6 = (uint64_t (*)(BOOL))v0[1];
  return v6(v1 != 0);
}

uint64_t sub_100324D68()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000011, 0x8000000100379EA0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_100324FEC()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[2] = sub_100037004(0xD000000000000011, 0x8000000100379EA0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_100325270(uint64_t a1)
{
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_100018CD0;
  return sub_10032531C(a1);
}

uint64_t sub_10032531C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCActivity.Priority();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_100325438, v1, 0);
}

uint64_t sub_100325438()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[4] = sub_100037004(0xD000000000000018, 0x8000000100379EC0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100325624;
  return sub_1003241B0();
}

uint64_t sub_100325624(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(unsigned char *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10032573C, v2, 0);
}

uint64_t sub_10032573C()
{
  uint64_t v11 = v0;
  if (*(unsigned char *)(v0 + 120) == 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 104))(*(void *)(v0 + 96), enum case for XPCActivity.Priority.utility(_:), *(void *)(v0 + 80));
    sub_100325E50();
    sub_100325E50();
    sub_100044014(&qword_1003F0618);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1003677A0;
    static XPCActivity.Criteria.Options.requiresClassC.getter();
    static XPCActivity.Criteria.Options.requiresNetwork.getter();
    *(void *)(v0 + 24) = v1;
    sub_100047504(&qword_1003F0620, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
    sub_100044014(&qword_1003F0628);
    sub_100162300();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
    uint64_t v2 = 0;
  }
  else
  {
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000018, 0x8000000100379EC0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s not eligible.", v5, 0xCu);
      uint64_t v2 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v2 = 1;
    }
  }
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = type metadata accessor for XPCActivity.Criteria();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, v2, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100325A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for XPCActivity.State();
  v3[5] = v5;
  v3[6] = *(void *)(v5 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_100325B1C, a3, 0);
}

uint64_t sub_100325B1C()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[3], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    sub_10031A2D8(86400.0);
    type metadata accessor for XPCActivity();
    sub_100047504(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v8 = sub_100325D18;
LABEL_5:
    return _swift_task_switch(v8, v5, v7);
  }
  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    type metadata accessor for XPCActivity();
    sub_100047504(&qword_1003F0238, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v9;
    uint64_t v8 = sub_100325DE4;
    goto LABEL_5;
  }
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100325D18()
{
  uint64_t v1 = *(void *)(v0 + 32);
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100325D84, v1, 0);
}

uint64_t sub_100325D84()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100325DE4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_100325F90, v1, 0);
}

uint64_t sub_100325E50()
{
  uint64_t v0 = sub_100363160();
  if (v1) {
    return 43200;
  }
  uint64_t v2 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040C330);
  int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using XPCActivity interval from defaults: %ld seconds", v6, 0xCu);
    swift_slowDealloc();
  }

  return v2;
}

void *sub_100325F94(uint64_t a1)
{
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v12[1] = v1;
    uint64_t v16 = _swiftEmptyArrayStorage;
    sub_100245F08(0, v6, 0);
    uint64_t v7 = v16;
    uint64_t v14 = type metadata accessor for DiscoveryToken(0);
    uint64_t v8 = a1
       + ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80));
    uint64_t v13 = *(void *)(*(void *)(v14 - 8) + 72);
    v12[2] = type metadata accessor for DiscoveryToken.Bucket(0);
    do
    {
      DateInterval.end.getter();
      uint64_t v16 = v7;
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1)
      {
        sub_100245F08(v9 > 1, v10 + 1, 1);
        uint64_t v7 = v16;
      }
      v7[2] = v10 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, v5, v15);
      v8 += v13;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1003261A4()
{
  v1[94] = v0;
  v1[95] = *v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[96] = swift_task_alloc();
  return _swift_task_switch(sub_100326260, v0, 0);
}

uint64_t sub_100326260()
{
  uint64_t v12 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[97] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[93] = sub_100037004(0xD000000000000017, 0x8000000100379F00, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (sub_1002C890C())
  {
    os_log_type_t v5 = (void *)swift_task_alloc();
    v0[98] = v5;
    *os_log_type_t v5 = v0;
    v5[1] = sub_10032659C;
    return daemon.getter();
  }
  else
  {
    int64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      v0[87] = sub_100037004(0xD000000000000017, 0x8000000100379F00, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s isFindingCapable == false.", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    unint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10032659C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 792) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_100328D28(&qword_1003F0E30, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003266F4, v3, v2);
}

uint64_t sub_1003266F4()
{
  uint64_t v1 = *(void *)(v0 + 752);
  *(void *)(v0 + 800) = Daemon.xpcAlarmEventHandler.getter();
  swift_release();
  return _swift_task_switch(sub_10032676C, v1, 0);
}

uint64_t sub_10032676C()
{
  uint64_t v1 = v0[100];
  uint64_t v2 = Logger.logObject.getter();
  if (v1)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for XPC Alarms", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[96];
    uint64_t v6 = v0[95];
    uint64_t v7 = v0[94];

    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
    uint64_t v9 = sub_100328D28(qword_1003F3F20, (void (*)(uint64_t))type metadata accessor for NITokenService);
    unint64_t v10 = (void *)swift_allocObject();
    v10[2] = v7;
    uint64_t v10[3] = v9;
    v10[4] = v1;
    v10[5] = v7;
    v10[6] = v6;
    swift_retain_n();
    swift_retain();
    sub_10010405C(v5, (uint64_t)&unk_1003F4920, (uint64_t)v10);
    swift_release();
    swift_asyncLet_begin();
    return _swift_asyncLet_get(v0 + 2, v11, sub_100326A1C, v0 + 82);
  }
  else
  {
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, (os_log_type_t)v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, (os_log_type_t)v12, "Daemon not registered XPC Alarm event handler", v13, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100326A1C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_100326A38, v2 + 704);
}

uint64_t sub_100326A38()
{
  return _swift_task_switch(sub_100326A54, *(void *)(v0 + 752), 0);
}

uint64_t sub_100326A54()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100326ABC()
{
  v1[10] = v0;
  v1[11] = type metadata accessor for XPCAlarm.Criteria.Options();
  v1[12] = swift_task_alloc();
  type metadata accessor for XPCAlarm.Criteria();
  v1[13] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for XPCAlarm();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v1[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[18] = v3;
  v1[19] = *(void *)(v3 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_100326C8C, v0, 0);
}

uint64_t sub_100326C8C()
{
  uint64_t v8 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[9] = sub_100037004(0xD000000000000010, 0x8000000100379EE0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  static XPCAlarm.unregister(identifier:)();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[25] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100326EA0;
  return sub_1003241B0();
}

uint64_t sub_100326EA0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(unsigned char *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100326FB8, v2, 0);
}

uint64_t sub_100326FB8()
{
  uint64_t v8 = v0;
  if (*(unsigned char *)(v0 + 248) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v1;
    void *v1 = v0;
    v1[1] = sub_1003271F0;
    return sub_100318CDC();
  }
  else
  {
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000010, 0x8000000100379EE0, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s not eligible.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1003271F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100327308, v2, 0);
}

uint64_t sub_100327308()
{
  uint64_t v41 = v0;
  if (*(void *)(v0[27] + 16))
  {
    uint64_t v2 = v0[18];
    uint64_t v1 = v0[19];
    os_log_type_t v3 = (char *)v0[17];
    uint64_t v4 = sub_100325F94(v0[27]);
    swift_bridgeObjectRelease();
    sub_100327C24((uint64_t)v4, v3);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
    {
      sub_100328C6C(v0[17]);
      swift_retain();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 134217984;
        v0[5] = sub_100325E50();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Default end date to: now + %lld seconds", v7, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v30 = v0[19];
      uint64_t v29 = v0[20];
      uint64_t v31 = v0[18];
      static Date.trustedNow.getter(v29);
      sub_100325E50();
      Date.addingTimeInterval(_:)();
      uint64_t v27 = v30 + 8;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v26(v29, v31);
      uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    }
    else
    {
      uint64_t v14 = v0[21];
      uint64_t v13 = v0[22];
      uint64_t v16 = v0[18];
      uint64_t v15 = v0[19];
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, v0[17], v16);
      unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
      v39(v14, v13, v16);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      BOOL v19 = os_log_type_enabled(v17, v18);
      uint64_t v20 = v0[21];
      uint64_t v21 = v0[18];
      uint64_t v22 = v0[19];
      if (v19)
      {
        uint64_t v23 = swift_slowAlloc();
        v40[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        v0[6] = sub_100037004(0xD000000000000010, 0x8000000100379EE0, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2082;
        sub_100328D28(&qword_1003F1950, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[7] = sub_100037004(v24, v25, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        uint64_t v27 = v22 + 8;
        uint64_t v26 = v28;
        v28(v20, v21);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s Nearest token end date %{public}s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        uint64_t v27 = v22 + 8;
        uint64_t v26 = v33;
        v33(v0[21], v0[18]);
      }

      uint64_t v34 = v0[22];
      uint64_t v35 = v0[18];
      Date.addingTimeInterval(_:)();
      v26(v34, v35);
      uint64_t v32 = v39;
    }
    v0[28] = v27;
    v0[29] = v26;
    v32(v0[20], v0[23], v0[18]);
    v0[4] = _swiftEmptyArrayStorage;
    sub_100328D28(&qword_1003F0E00, (void (*)(uint64_t))&type metadata accessor for XPCAlarm.Criteria.Options);
    sub_100044014(&qword_1003F0E08);
    sub_100328CCC();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    XPCAlarm.Criteria.init(date:options:)();
    uint64_t v36 = (void *)swift_task_alloc();
    v0[30] = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_1003279E4;
    uint64_t v37 = v0[16];
    uint64_t v38 = v0[13];
    return XPCAlarm.init(identifier:criteria:)(v37, 0xD000000000000036, 0x8000000100372EB0, v38);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136446210;
      v0[8] = sub_100037004(0xD000000000000010, 0x8000000100379EE0, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s no friend token to rotate.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1003279E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  uint64_t v3 = *(void *)(*(void *)v0 + 112);
  uint64_t v4 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100327B50, v4, 0);
}

uint64_t sub_100327B50()
{
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 184), *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100327C24@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    BOOL v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v9, 1, 1, v10);
    goto LABEL_5;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v37 = v11 + 16;
  v36(v9, a1 + v18, v10);
  uint64_t v31 = a1;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v38(v9, 0, 1, v10);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v35 = v11 + 48;
  if (v34(v9, 1, v10) == 1)
  {
    BOOL v19 = v38;
LABEL_5:
    sub_100328C6C((uint64_t)v9);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(a2, 1, 1, v10);
  }
  uint64_t v30 = a2;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v33(v16, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v21 = v17 - 1;
  if (v21)
  {
    uint64_t v23 = *(void *)(v11 + 72);
    uint64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v23;
    unint64_t v25 = v31 + v23 + v18;
    uint64_t v26 = v33;
    while (1)
    {
      v36(v7, v25, v10);
      v38(v7, 0, 1, v10);
      if (v34(v7, 1, v10) == 1) {
        break;
      }
      v26(v14, v7, v10);
      sub_100328D28(&qword_1003F0F50, (void (*)(uint64_t))&type metadata accessor for Date);
      char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v28 = *v24;
      if (v27)
      {
        v28(v16, v10);
        v26(v16, v14, v10);
      }
      else
      {
        v28(v14, v10);
      }
      v25 += v32;
      if (!--v21) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v38(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  sub_100328C6C((uint64_t)v7);
  uint64_t v22 = v30;
  v33(v30, v16, v10);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v38)(v22, 0, 1, v10);
}

uint64_t sub_100328038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a5;
  uint64_t v6 = sub_100044014(&qword_1003F0F40);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v5[7] = v7;
  uint64_t v8 = sub_100044014(&qword_1003F0F38);
  v5[8] = v8;
  v5[9] = *(void *)(v8 - 8);
  v5[10] = swift_task_alloc();
  uint64_t v11 = (uint64_t (*)(uint64_t, unint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:)
                                                                            + async function pointer to dispatch thunk of XPCAlarmEventHandler.asyncStream(name:));
  os_log_type_t v9 = (void *)swift_task_alloc();
  v5[11] = v9;
  *os_log_type_t v9 = v5;
  v9[1] = sub_1003281C8;
  return v11(v7, 0xD000000000000036, 0x8000000100372EB0);
}

uint64_t sub_1003281C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003282D8, v1, 0);
}

uint64_t sub_1003282D8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_100328D28(qword_1003F3F20, (void (*)(uint64_t))type metadata accessor for NITokenService);
  v0[12] = v4;
  uint64_t v5 = v0[4];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[13] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1003283F8;
  uint64_t v7 = v0[8];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, v5, v4, v7);
}

uint64_t sub_1003283F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_100328508, v1, 0);
}

uint64_t sub_100328508()
{
  uint64_t v12 = v0;
  unint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = v0[2];
    if (qword_1003EC430 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100044058(v3, (uint64_t)qword_10040C330);
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v6 + 4) = sub_100037004(v2, v1, &v11);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "XPC Alarm key rotation triggered: %{public}s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v9 = (void *)swift_task_alloc();
    v0[14] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10032879C;
    uint64_t v10 = (void *)v0[4];
    v9[3] = v10;
    v9[4] = *v10;
    return _swift_task_switch(sub_100328988, v10, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10032879C()
{
  unint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  uint64_t v3 = v1[12];
  uint64_t v4 = v1[4];
  os_log_type_t v5 = (void *)swift_task_alloc();
  v1[13] = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_1003283F8;
  uint64_t v6 = v1[8];
  return AsyncStream.Iterator.next(isolation:)(v1 + 2, v4, v3, v6);
}

uint64_t sub_100328940()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100328988, v0, 0);
}

uint64_t sub_100328988()
{
  uint64_t v9 = v0;
  if (qword_1003EC430 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C330);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[2] = sub_100037004(0xD000000000000017, 0x8000000100379F20, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100313B7C();
  unint64_t v5 = sub_100101D3C((uint64_t)_swiftEmptyArrayStorage);
  v0[5] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10024EB14;
  return sub_1002D99E0(0xD000000000000039, 0x8000000100373300, 0, v5);
}

uint64_t sub_100328BBC()
{
  os_log_type_t v3 = (uint64_t (*)(_UNKNOWN **))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                           + async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000801A4;
  return v3(&off_1003DD768);
}

uint64_t sub_100328C6C(uint64_t a1)
{
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100328CCC()
{
  unint64_t result = qword_1003F0E10;
  if (!qword_1003F0E10)
  {
    sub_10004AE58(&qword_1003F0E08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F0E10);
  }
  return result;
}

uint64_t sub_100328D28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100328D70()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100328DB8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100018CD0;
  return sub_100328038(a1, v4, v5, v6, v7);
}

uint64_t sub_100328E80()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100018CD0;
  uint64_t v4 = (uint64_t (*)(_UNKNOWN **))((char *)&async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:)
                                           + async function pointer to dispatch thunk of XPCAlarmEventHandler.processEvents(with:));
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000801A4;
  return v4(&off_1003DD768);
}

uint64_t sub_100328F74(char a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_10004AFDC(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10004AFDC((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0x65776F6C6C6F662ELL;
  v5[5] = 0xE900000000000072;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10004AFDC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_10004AFDC((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0x69776F6C6C6F662ELL;
    v8[5] = 0xEA0000000000676ELL;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10004AFDC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_10004AFDC((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0x466572757475662ELL;
    v11[5] = 0xEF7265776F6C6C6FLL;
  }
  if ((a1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_10004AFDC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_10004AFDC((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    v14[4] = 0x466572757475662ELL;
    uint64_t v14[5] = 0xEF7265776F6C6C6FLL;
  }
  sub_100044014(&qword_1003ED230);
  sub_1000C129C();
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 93;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 91;
}

void *sub_100329224()
{
  return &protocol witness table for String;
}

uint64_t sub_100329230(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003F4980);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100329EB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_10008FC1C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100329380()
{
  return 1635017060;
}

uint64_t sub_100329390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100329418(uint64_t a1)
{
  unint64_t v2 = sub_100329EB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100329454(uint64_t a1)
{
  unint64_t v2 = sub_100329EB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100329490@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100329864(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1003294BC(void *a1)
{
  return sub_100329230(a1, *v1, v1[1]);
}

Swift::Int sub_1003294D8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100022C64(v1, v2);
  Data.hash(into:)();
  sub_100044090(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10032953C()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_100022C64(v2, v1);
  Data.hash(into:)();

  return sub_100044090(v2, v1);
}

Swift::Int sub_10032959C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_100022C64(v1, v2);
  Data.hash(into:)();
  sub_100044090(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1003295FC()
{
  uint64_t v4 = CustomStringConvertible.typeDescription.getter();
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  sub_10004F4EC();
  v1._uint64_t countAndFlagsBits = DataProtocol.hexString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 62;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4;
}

uint64_t sub_100329690@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003297D8(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1003296C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_100022C64(v2, v3);
}

uint64_t sub_1003296CC(uint64_t a1, uint64_t a2)
{
  return sub_100102018(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1003296E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003299D4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100329714()
{
  unint64_t result = qword_1003F4940;
  if (!qword_1003F4940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4940);
  }
  return result;
}

void *sub_100329768()
{
  return &protocol witness table for String;
}

unint64_t sub_100329778()
{
  unint64_t result = qword_1003F4948;
  if (!qword_1003F4948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4948);
  }
  return result;
}

void *sub_1003297CC()
{
  return &protocol witness table for String;
}

uint64_t sub_1003297D8(uint64_t result, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100329854);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 != 32)
      {
LABEL_7:
        sub_100044090(result, a2);
        return 0;
      }
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v3 = *(void *)(result + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_100329864(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F4970);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_100042524(a1, a1[3]);
  sub_100329EB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
  }
  else
  {
    sub_10008FB64();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v7 = v9;
    sub_1000233E4((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1003299D4()
{
  sub_10004650C();
  uint64_t result = Data.init<A>(hexString:)();
  if (v1 >> 60 == 15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  switch(v1 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v2 = (int)v2;
LABEL_7:
      if (v2 != 32)
      {
LABEL_12:
        _StringGuts.grow(_:)(25);
        sub_100329B98();
        CustomStringConvertible.typeDescription.getter();
        swift_bridgeObjectRelease();
        v6._uint64_t countAndFlagsBits = 0x6562207473756D20;
        v6._object = (void *)0xE900000000000020;
        String.append(_:)(v6);
        v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        v8._uint64_t countAndFlagsBits = 0x6C20736574796220;
        v8._object = (void *)0xEC00000021676E6FLL;
        String.append(_:)(v8);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100329B88);
      }
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v3 = *(void *)(result + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_7;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v2 = BYTE6(v1);
      goto LABEL_7;
  }
}

unint64_t sub_100329B98()
{
  unint64_t result = qword_1003F4950;
  if (!qword_1003F4950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4950);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SharedSecretKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100022C64(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for SharedSecretKey(uint64_t a1)
{
  return sub_100044090(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for SharedSecretKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100022C64(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100044090(v5, v6);
  return a1;
}

uint64_t *assignWithTake for SharedSecretKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100044090(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedSecretKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharedSecretKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedSecretKey()
{
  return &type metadata for SharedSecretKey;
}

unint64_t sub_100329D70()
{
  unint64_t result = qword_1003F4958;
  if (!qword_1003F4958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4958);
  }
  return result;
}

unint64_t sub_100329DC4(void *a1)
{
  a1[1] = sub_100329B98();
  a1[2] = sub_1000E4078();
  a1[3] = sub_1000E41E0();
  a1[4] = sub_100329E0C();
  unint64_t result = sub_100329E60();
  a1[5] = result;
  return result;
}

unint64_t sub_100329E0C()
{
  unint64_t result = qword_1003F4960;
  if (!qword_1003F4960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4960);
  }
  return result;
}

unint64_t sub_100329E60()
{
  unint64_t result = qword_1003F4968;
  if (!qword_1003F4968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4968);
  }
  return result;
}

unint64_t sub_100329EB4()
{
  unint64_t result = qword_1003F4978;
  if (!qword_1003F4978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4978);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SharedSecretKey.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100329FA4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedSecretKey.CodingKeys()
{
  return &type metadata for SharedSecretKey.CodingKeys;
}

unint64_t sub_100329FE0()
{
  unint64_t result = qword_1003F4988;
  if (!qword_1003F4988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4988);
  }
  return result;
}

unint64_t sub_10032A038()
{
  unint64_t result = qword_1003F4990;
  if (!qword_1003F4990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4990);
  }
  return result;
}

unint64_t sub_10032A090()
{
  unint64_t result = qword_1003F4998;
  if (!qword_1003F4998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4998);
  }
  return result;
}

void *sub_10032A0EC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalUserNotificationCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = (void *)((char *)a1 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (void *)((char *)a1 + v13);
    Swift::String v18 = (void *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (void *)((char *)a1 + v20);
    uint64_t v23 = (void *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10032A260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10032A34C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  uint64_t v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10032A470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  void *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10032A5DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t sub_10032A6CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10032A7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032A810);
}

uint64_t sub_10032A810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10032A928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032A93C);
}

uint64_t sub_10032A93C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for FenceConfirmationNotification()
{
  uint64_t result = qword_1003F49F8;
  if (!qword_1003F49F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10032AA9C()
{
  uint64_t result = type metadata accessor for LocalUserNotificationCategory();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10032AB90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_10032ABF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10032AC68()
{
  uint64_t v3 = LocalUserNotificationCategory.rawValue.getter();
  v0._uint64_t countAndFlagsBits = 45;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10032ACD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10032AD10(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10032AD48()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10032AD54(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

void *sub_10032AD60(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10003CB84(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for PersonHandle() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = PersonHandle.id.getter();
      uint64_t v8 = v7;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10003CB84(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage[2 * v10];
      *((void *)v11 + 4) = v6;
      *((void *)v11 + 5) = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10032AE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for Fence.TriggerPosition();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.TriggerID();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v6[14] = v9;
  v6[15] = *(void *)(v9 - 8);
  v6[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for LocalUserNotificationCategory();
  v6[17] = v10;
  v6[18] = *(void *)(v10 - 8);
  v6[19] = swift_task_alloc();
  return _swift_task_switch(sub_10032B074, 0, 0);
}

uint64_t sub_10032B074()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v20 = v0[8];
  uint64_t v21 = v0[10];
  uint64_t v8 = v0[4];
  uint64_t v19 = v0[5];
  uint64_t v9 = v0[3];
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for LocalUserNotificationCategory.geofenceTriggerReceived(_:), v0[17]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v21, v19, v20);
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[20] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10032B1E4;
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[16];
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[10];
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[2];
  return sub_10032C044(v17, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_10032B1E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10032E0B8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

unint64_t sub_10032B354(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100044014(&qword_1003EFFF8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v47;
  uint64_t v7 = v45;
  uint64_t v8 = &v41;
  uint64_t v9 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v34) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v19);
  int64_t v21 = v36 + 1;
  if (!v20)
  {
    int64_t v21 = v36 + 2;
    if (v36 + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v36 + 3;
      if (v36 + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v36 + 4;
        if (v36 + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v34) {
                break;
              }
              unint64_t v20 = *(void *)(v35 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1001491B4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v36 = v21;
  uint64_t v37 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_1000370D8(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    uint64_t v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v39 = v25;
    uint64_t v40 = v24;
    sub_100023434(v7, &v38);
    swift_bridgeObjectRetain();
    sub_100044014(&qword_1003ECF00);
    swift_dynamicCast();
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    sub_100023434(v8, v9);
    sub_100023434(v9, v44);
    sub_100023434(v44, &v42);
    unint64_t result = sub_10003B888(v27, v26);
    unint64_t v28 = result;
    if (v29)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v8;
      uint64_t v13 = v1;
      uint64_t v14 = v7;
      uint64_t v15 = v6;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v16 = v27;
      v16[1] = v26;
      uint64_t v6 = v15;
      uint64_t v7 = v14;
      uint64_t v1 = v13;
      uint64_t v8 = v12;
      uint64_t v9 = v11;
      uint64_t v17 = (_OWORD *)(v2[7] + 32 * v28);
      sub_1000233E4((uint64_t)v17);
      unint64_t result = (unint64_t)sub_100023434(&v42, v17);
      unint64_t v5 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v30 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v30 = v27;
    v30[1] = v26;
    unint64_t result = (unint64_t)sub_100023434(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v2[2] = v33;
    unint64_t v5 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10032B700(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100044014(&qword_1003F4A58);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000370D8(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100023434(v38, v37);
    sub_100044014(&qword_1003ECF00);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100023434(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100023434(v36, v37);
    sub_100023434(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100023434(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1001491B4();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10032BAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = type metadata accessor for Fence.TriggerPosition();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Fence.TriggerID();
  v6[11] = v8;
  v6[12] = *(void *)(v8 - 8);
  v6[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence();
  v6[14] = v9;
  v6[15] = *(void *)(v9 - 8);
  v6[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for LocalUserNotificationCategory();
  v6[17] = v10;
  v6[18] = *(void *)(v10 - 8);
  v6[19] = swift_task_alloc();
  return _swift_task_switch(sub_10032BCD4, 0, 0);
}

uint64_t sub_10032BCD4()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v20 = v0[8];
  uint64_t v21 = v0[10];
  uint64_t v8 = v0[4];
  uint64_t v19 = v0[5];
  uint64_t v9 = v0[3];
  (*(void (**)(void, void, void))(v0[18] + 104))(v0[19], enum case for LocalUserNotificationCategory.geofenceTrigger(_:), v0[17]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v21, v19, v20);
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[20] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10032BE44;
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[16];
  uint64_t v13 = v0[13];
  uint64_t v14 = v0[10];
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[2];
  return sub_10032C044(v17, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_10032BE44()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10032BFB4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10032BFB4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10032C044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[42] = a2;
  v7[43] = a3;
  v7[41] = a1;
  uint64_t v8 = type metadata accessor for Fence.ID();
  v7[48] = v8;
  v7[49] = *(void *)(v8 - 8);
  v7[50] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Fence.TriggerPosition();
  v7[51] = v9;
  v7[52] = *(void *)(v9 - 8);
  v7[53] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v7[54] = v10;
  v7[55] = *(void *)(v10 - 8);
  v7[56] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Fence.MonitorRegion();
  v7[57] = v11;
  v7[58] = *(void *)(v11 - 8);
  v7[59] = swift_task_alloc();
  v7[60] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Handle();
  v7[61] = v12;
  v7[62] = *(void *)(v12 - 8);
  v7[63] = swift_task_alloc();
  v7[64] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Friend();
  v7[65] = v13;
  v7[66] = *(void *)(v13 - 8);
  v7[67] = swift_task_alloc();
  v7[68] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  v7[69] = swift_task_alloc();
  v7[70] = swift_task_alloc();
  return _swift_task_switch(sub_10032C378, 0, 0);
}

uint64_t sub_10032C378()
{
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = type metadata accessor for FenceNotification();
  *(void *)(v0 + 568) = v2;
  *(unsigned char *)(v1 + *(int *)(v2 + 20)) = 2;
  uint64_t v3 = *(int *)(v2 + 32);
  *(_DWORD *)(v0 + 648) = v3;
  uint64_t v4 = (void *)(v1 + v3);
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10032C464;
  return daemon.getter();
}

uint64_t sub_10032C464(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 584) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 592) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004754C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004754C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10032C668;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10032C668(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 600) = a1;
  *(void *)(v3 + 608) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10032DA54;
  }
  else
  {
    uint64_t v4 = sub_10032C7EC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10032C7EC()
{
  uint64_t v1 = Fence.others.getter();
  uint64_t v2 = sub_10032AD60(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    uint64_t v3 = v2[4];
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0xE000000000000000;
  }
  v0[78] = v4;
  v0[77] = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[79] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10032C90C;
  return sub_100005710();
}

uint64_t sub_10032C90C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 640) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10032CA38, 0, 0);
}

uint64_t sub_10032CA38()
{
  v145 = v0 + 39;
  uint64_t v1 = v0[80];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[66];
    uint64_t v4 = *(void (**)(void, uint64_t, void))(v3 + 16);
    v3 += 16;
    v152 = v4;
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64));
    uint64_t v6 = (void (**)(uint64_t, uint64_t))(v0[62] + 8);
    uint64_t v149 = (void (**)(void, void))(v3 - 8);
    uint64_t v147 = *(void *)(v3 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[78];
      uint64_t v8 = v0[77];
      uint64_t v9 = v0[63];
      uint64_t v10 = v0[61];
      v152(v0[67], v5, v0[65]);
      Friend.handle.getter();
      uint64_t v11 = Handle.identifier.getter();
      uint64_t v13 = v12;
      (*v6)(v9, v10);
      if (v11 == v8 && v13 == v7) {
        break;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_12;
      }
      (*v149)(v0[67], v0[65]);
      v5 += v147;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v17 = v0[70];
    uint64_t v18 = v0[67];
    uint64_t v19 = v0[66];
    uint64_t v20 = v0[65];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v18, v20);
    uint64_t v16 = 0;
  }
  else
  {
LABEL_10:
    uint64_t v16 = 1;
  }
  uint64_t v21 = v0[70];
  uint64_t v22 = v0[69];
  uint64_t v23 = v0[66];
  uint64_t v24 = v0[65];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v16, 1, v24);
  swift_bridgeObjectRelease();
  sub_10032DCA8(v21, v22);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v24);
  uint64_t v26 = v0[70];
  uint64_t v154 = v0;
  if (v25 == 1)
  {
    sub_10032DD10(v26);
    uint64_t v142 = 0;
    unint64_t v27 = 0xE000000000000000;
  }
  else
  {
    uint64_t v28 = v0[68];
    uint64_t v29 = v0[66];
    uint64_t v30 = v0[65];
    uint64_t v31 = v0[64];
    uint64_t v32 = v0[62];
    uint64_t v33 = v0[61];
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 32))(v28, v0[69], v30);
    Friend.handle.getter();
    uint64_t v34 = Handle.serverIdentifier.getter();
    unint64_t v36 = v35;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    sub_10032DD10(v26);
    if (v36) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v142 = v37;
    unint64_t v27 = 0xE000000000000000;
    if (v36) {
      unint64_t v27 = v36;
    }
  }
  unint64_t v153 = v27;
  uint64_t v38 = v0[60];
  uint64_t v39 = v0[59];
  uint64_t v40 = v0[58];
  uint64_t v41 = v154[57];
  uint64_t v42 = v154[56];
  uint64_t v43 = v154[55];
  uint64_t v44 = v154[54];
  Fence.region.getter();
  Fence.MonitorRegion.center.getter();
  double v46 = v45;
  double v48 = v47;
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v49(v38, v41);
  Fence.region.getter();
  Fence.MonitorRegion.radius.getter();
  double v51 = v50;
  v49(v39, v41);
  static Date.now.getter();
  id v52 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v54 = [v52 initWithCoordinate:isa, v46, v48, 0.0, v51, 0.0];

  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  uint64_t v55 = self;
  v154[39] = 0;
  id v56 = [v55 archivedDataWithRootObject:v54 requiringSecureCoding:1 error:v145];
  id v57 = (id)v154[39];
  if (v56)
  {
    uint64_t v58 = v154[52];
    uint64_t v59 = v154[53];
    uint64_t v60 = v154[51];
    uint64_t v61 = v154[45];
    uint64_t v148 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v150 = v62;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v59, v61, v60);
    int v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 88))(v59, v60);
    if (v63 == enum case for Fence.TriggerPosition.inside(_:) || v63 == enum case for Fence.TriggerPosition.outside(_:))
    {
      uint64_t v64 = v154;
      uint64_t v74 = (void **)v154[53];
      (*(void (**)(void **, void))(v154[52] + 96))(v74, v154[51]);
      uint64_t v75 = *v74;
      v154[40] = 0;
      id v76 = v75;
      id v77 = [v55 archivedDataWithRootObject:v76 requiringSecureCoding:1 error:v154 + 40];
      id v78 = (id)v154[40];
      if (v77)
      {
        uint64_t v141 = v54;
        uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v131 = v80;
        uint64_t v132 = v79;
        uint64_t v127 = v76;

        goto LABEL_28;
      }
      BOOL v117 = v78;
      uint64_t v118 = v154[52];
      uint64_t v119 = v154[51];
      uint64_t v120 = v154[45];
      uint64_t v121 = v154[44];
      uint64_t v122 = v154[43];
      uint64_t v144 = v154[42];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();

      sub_100044090(v148, v150);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v120, v119);
      uint64_t v123 = type metadata accessor for Fence.TriggerID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(v121, v123);
      uint64_t v124 = type metadata accessor for Fence();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v124 - 8) + 8))(v122, v124);
      uint64_t v125 = type metadata accessor for LocalUserNotificationCategory();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8))(v144, v125);
    }
    else
    {
      uint64_t v141 = v54;
      if (v63 == enum case for Fence.TriggerPosition.undetermined(_:))
      {
        uint64_t v64 = v154;
        (*(void (**)(void, void))(v154[52] + 8))(v154[53], v154[51]);
        uint64_t v127 = 0;
        unint64_t v131 = 0xF000000000000000;
        uint64_t v132 = 0;
LABEL_28:
        uint64_t v137 = v64[78];
        uint64_t v135 = v64[77];
        uint64_t v81 = v64[71];
        uint64_t v82 = v64[49];
        uint64_t v83 = v64[50];
        uint64_t v84 = v64[48];
        uint64_t v133 = v64[46];
        uint64_t v134 = v64[47];
        uint64_t v86 = v64[41];
        uint64_t v85 = v64[42];
        Fence.id.getter();
        uint64_t v87 = Fence.ID.uuidString.getter();
        uint64_t v89 = v88;
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v84);
        uint64_t v90 = type metadata accessor for LocalUserNotificationCategory();
        uint64_t v139 = *(void *)(v90 - 8);
        uint64_t v146 = v90;
        (*(void (**)(uint64_t, uint64_t))(v139 + 16))(v86, v85);
        uint64_t v91 = (uint64_t *)(v86 + *(int *)(v81 + 28));
        *uint64_t v91 = v87;
        v91[1] = v89;
        swift_bridgeObjectRetain();
        Fence.TriggerID.uuid.getter();
        uint64_t v92 = (void *)(v86 + *(int *)(v81 + 36));
        *uint64_t v92 = v133;
        v92[1] = v134;
        sub_100044014(&qword_1003F1970);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100367790;
        *(void *)(inited + 32) = 0x6E6F697461636F6CLL;
        *(void *)(inited + 40) = 0xEF64497472656C41;
        *(void *)(inited + 48) = v87;
        *(void *)(inited + 56) = v89;
        *(void *)(inited + 72) = &type metadata for String;
        strcpy((char *)(inited + 80), "friendHandle");
        *(unsigned char *)(inited + 93) = 0;
        *(_WORD *)(inited + 94) = -5120;
        *(void *)(inited + 96) = v135;
        *(void *)(inited + 104) = v137;
        *(void *)(inited + 120) = &type metadata for String;
        strcpy((char *)(inited + 128), "friendServerId");
        *(unsigned char *)(inited + 143) = -18;
        *(void *)(inited + 144) = v142;
        *(void *)(inited + 152) = v153;
        *(void *)(inited + 168) = &type metadata for String;
        strcpy((char *)(inited + 176), "fenceLocation");
        *(void *)(inited + 216) = &type metadata for Data;
        *(_WORD *)(inited + 190) = -4864;
        *(void *)(inited + 192) = v148;
        *(void *)(inited + 200) = v150;
        sub_100022C64(v148, v150);
        unint64_t v94 = sub_1001019AC(inited);
        if (v131 >> 60 == 15)
        {
          uint64_t v95 = v132;
        }
        else
        {
          v64[33] = &type metadata for Data;
          uint64_t v95 = v132;
          v64[30] = v132;
          v64[31] = v131;
          sub_100023434((_OWORD *)v64 + 15, (_OWORD *)v64 + 17);
          sub_100022C64(v132, v131);
          sub_100022C64(v132, v131);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_100142DB8((_OWORD *)v64 + 17, 0xD000000000000014, 0x8000000100379F90, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          sub_1000440E8(v132, v131);
        }
        uint64_t v130 = v64[71];
        uint64_t v97 = v64[52];
        uint64_t v98 = v64[51];
        uint64_t v99 = v64[45];
        uint64_t v100 = v154[44];
        uint64_t v101 = v154[43];
        uint64_t v128 = v154[42];
        uint64_t v129 = v154[41];
        unint64_t v102 = sub_10032B354(v94);
        swift_release();
        swift_bridgeObjectRelease();
        sub_100044090(v148, v150);

        sub_1000440E8(v95, v131);
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v99, v98);
        uint64_t v103 = type metadata accessor for Fence.TriggerID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v100, v103);
        uint64_t v104 = type metadata accessor for Fence();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v101, v104);
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v128, v146);
        *(void *)(v129 + *(int *)(v130 + 40)) = v102;
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v105 = (uint64_t (*)(void))v154[1];
        goto LABEL_35;
      }
      uint64_t v106 = v154[52];
      uint64_t v143 = v154[53];
      uint64_t v107 = v154[51];
      uint64_t v108 = v154[45];
      uint64_t v136 = v154[44];
      uint64_t v138 = v154[43];
      uint64_t v140 = v154[42];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v109 = type metadata accessor for GenericError();
      sub_10004754C((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
      swift_allocError();
      uint64_t v111 = v110;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      sub_10004754C(&qword_1003EEA60, (void (*)(uint64_t))&type metadata accessor for Fence.TriggerPosition);
      v112._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      *uint64_t v111 = 0xD00000000000001FLL;
      v111[1] = 0x8000000100379F70;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v109 - 8) + 104))(v111, enum case for GenericError.error(_:), v109);
      swift_willThrow();
      swift_release();
      sub_100044090(v148, v150);

      uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
      v113(v108, v107);
      uint64_t v114 = type metadata accessor for Fence.TriggerID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v114 - 8) + 8))(v136, v114);
      uint64_t v115 = type metadata accessor for Fence();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(v138, v115);
      uint64_t v116 = type metadata accessor for LocalUserNotificationCategory();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8))(v140, v116);
      v113(v143, v107);
    }
  }
  else
  {
    uint64_t v65 = v57;
    uint64_t v66 = v154[51];
    uint64_t v67 = v154[52];
    uint64_t v69 = v154[44];
    uint64_t v68 = v154[45];
    uint64_t v70 = v154[43];
    uint64_t v151 = v154[42];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v66);
    uint64_t v71 = type metadata accessor for Fence.TriggerID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v69, v71);
    uint64_t v72 = type metadata accessor for Fence();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v70, v72);
    uint64_t v73 = type metadata accessor for LocalUserNotificationCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v151, v73);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v105 = (uint64_t (*)(void))v154[1];
LABEL_35:
  return v105();
}

uint64_t sub_10032DA54()
{
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  uint64_t v2 = v0[43];
  (*(void (**)(void, void))(v0[52] + 8))(v0[45], v0[51]);
  uint64_t v4 = type metadata accessor for Fence.TriggerID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v1, v4);
  uint64_t v5 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t type metadata accessor for FenceNotification()
{
  uint64_t result = qword_1003F4AC0;
  if (!qword_1003F4AC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10032DCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECFE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032DD10(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003ECFE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10032DD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032DD84);
}

uint64_t sub_10032DD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10032DE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032DEB0);
}

uint64_t sub_10032DEB0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_10032DFC4()
{
  uint64_t result = type metadata accessor for LocalUserNotificationCategory();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10032E0BC(char a1)
{
  *(void *)(v2 + 40) = v1;
  *(unsigned char *)(v2 + 88) = a1;
  uint64_t v3 = type metadata accessor for Destination.DestinationType();
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = *(void *)(v3 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  type metadata accessor for Daemon();
  *(void *)(v2 + 72) = static Daemon.shared.getter();
  sub_10032EAD0();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10032E1E8, v5, v4);
}

uint64_t sub_10032E1E8()
{
  swift_release();
  uint64_t v1 = (void *)qword_1003F5D40;
  if (qword_1003F5D40)
  {
    id v2 = (id)qword_1003F5D40;
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)CNContactStore) init];
    uint64_t v4 = (void *)qword_1003F5D40;
    qword_1003F5D40 = (uint64_t)v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  *(void *)(v0 + 80) = v2;
  id v5 = v1;
  return _swift_task_switch(sub_10032E2D4, 0, 0);
}

uint64_t sub_10032E2D4()
{
  uint64_t v68 = v0;
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  Destination.type.getter();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == enum case for Destination.DestinationType.email(_:))
  {
    Destination.destination.getter();
    v6._uint64_t countAndFlagsBits = 0x3A6F746C69616DLL;
    v6._object = (void *)0xE700000000000000;
    Swift::String v7 = String.deletingPrefix(_:)(v6);
    object = v7._object;
    swift_bridgeObjectRelease();
    uint64_t v9 = self;
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 predicateForContactsMatchingEmailAddress:v10];
  }
  else
  {
    if (v5 != enum case for Destination.DestinationType.phoneNumber(_:))
    {
      if (qword_1003EC490 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100044058(v46, (uint64_t)qword_10040C3C8);
      double v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unexpected destination type!", v49, 2u);
        swift_slowDealloc();
      }
      uint64_t v51 = *(void *)(v0 + 56);
      uint64_t v50 = *(void *)(v0 + 64);
      uint64_t v52 = *(void *)(v0 + 48);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      uint64_t v53 = 0;
      object = (void *)0xE000000000000000;
      goto LABEL_31;
    }
    Destination.destination.getter();
    v12._uint64_t countAndFlagsBits = 980182388;
    v12._object = (void *)0xE400000000000000;
    Swift::String v13 = String.deletingPrefix(_:)(v12);
    object = v13._object;
    swift_bridgeObjectRelease();
    uint64_t v14 = self;
    id v15 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = v13._countAndFlagsBits;
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v10 = [v15 initWithStringValue:v16];

    id v11 = [v14 predicateForContactsMatchingPhoneNumber:v10];
  }
  uint64_t v17 = *(void **)(v0 + 80);
  id v18 = v11;

  id v65 = self;
  id v19 = [v65 descriptorForRequiredKeysForStyle:0];
  sub_100044014(&qword_1003F4B20);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_10036D5A0;
  *(void *)(v20 + 32) = v19;
  uint64_t v67 = v20;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  sub_100044014(&qword_1003F4B28);
  uint64_t v64 = v0;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  int v63 = v18;
  id v22 = [v17 unifiedContactsMatchingPredicate:v18 keysToFetch:isa error:v0 + 16];

  uint64_t v1 = v0;
  uint64_t v23 = *(void **)(v0 + 16);
  if (v22)
  {
    sub_10032F168();
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = v23;

    if (v24 >> 62) {
      goto LABEL_37;
    }
    uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v26)
    {
      uint64_t v27 = 0;
      while (1)
      {
        id v28 = (v24 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v24 + 8 * v27 + 32);
        uint64_t v29 = v28;
        uint64_t v30 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          break;
        }
        if (*(unsigned char *)(v1 + 88) == 1)
        {
          id v31 = [v28 givenName];
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v34 = v33;

          swift_bridgeObjectRelease();
          uint64_t v35 = HIBYTE(v34) & 0xF;
          uint64_t v36 = v32 & 0xFFFFFFFFFFFFLL;
          uint64_t v1 = v64;
          if ((v34 & 0x2000000000000000) == 0) {
            uint64_t v35 = v36;
          }
          if (v35)
          {
            uint64_t v59 = *(void **)(v64 + 80);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v60 = [v29 givenName];
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            object = v61;

            swift_unknownObjectRelease();
            goto LABEL_31;
          }
        }
        id v37 = [v65 stringFromContact:v29 style:0];
        if (v37)
        {
          id v56 = v37;
          id v57 = *(void **)(v1 + 80);
          swift_bridgeObjectRelease();
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          object = v58;

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }

        ++v27;
        if (v30 == v26) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_19:

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v38 = v23;
    uint64_t v39 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1003EC490 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100044058(v40, (uint64_t)qword_10040C3C8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v66 = *(id *)(v0 + 80);
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      *(void *)(v0 + 24) = v39;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v44 = String.init<A>(describing:)();
      *(void *)(v0 + 32) = sub_100037004(v44, v45, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error matching contacts: %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v0;
      swift_slowDealloc();

      swift_errorRelease();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  uint64_t v53 = countAndFlagsBits;
LABEL_31:
  swift_task_dealloc();
  id v54 = *(uint64_t (**)(uint64_t, void *))(v1 + 8);
  return v54(v53, object);
}

unint64_t sub_10032EAD0()
{
  unint64_t result = qword_1003F0E30;
  if (!qword_1003F0E30)
  {
    type metadata accessor for Daemon();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F0E30);
  }
  return result;
}

uint64_t sub_10032EB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HandleType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EE3F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  Swift::String v13 = (uint64_t *)(v3 + *(int *)(type metadata accessor for RedStripeNotification() + 28));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(inited + 32) = v15;
  *(void *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  Friend.type.getter();
  uint64_t v26 = v9;
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v16 == enum case for HandleType.follower(_:)) {
    goto LABEL_12;
  }
  if (v16 == enum case for HandleType.following(_:))
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for LocalizationUtility.Table.redStripe(_:), v4);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10017A4C4(inited);
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v19 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  BOOL v17 = v16 == enum case for HandleType.futureFollower(_:) || v16 == enum case for HandleType.futureFollowing(_:);
  if (v17 || v16 == enum case for HandleType.pendingOffer(_:))
  {
LABEL_12:
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for LocalizationUtility.Table.redStripe(_:), v4);
    static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10017A4C4(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (qword_1003EC490 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100044058(v21, (uint64_t)qword_10040C3C8);
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unexpected friend type!", v24, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
  return 0;
}

uint64_t sub_10032EF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10032EFB4()
{
  return sub_10032EB28(0xD000000000000028, 0x800000010037A040, 0x800000010037A010);
}

uint64_t sub_10032EFF4()
{
  return sub_10032EB28(0xD00000000000002BLL, 0x8000000100379FE0, 0x8000000100379FB0);
}

unint64_t sub_10032F034()
{
  uint64_t v0 = type metadata accessor for Handle();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100044014(&qword_1003F4BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367D70;
  *(void *)(inited + 32) = static LocalUserNotificationConstants.HandleIdentifier.getter();
  *(void *)(inited + 40) = v5;
  Friend.handle.getter();
  uint64_t v6 = Handle.identifier.getter();
  uint64_t v8 = v7;
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v8;
  return sub_100101984(inited);
}

uint64_t sub_10032F160()
{
  return *v0;
}

unint64_t sub_10032F168()
{
  unint64_t result = qword_1003F4B38;
  if (!qword_1003F4B38)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F4B38);
  }
  return result;
}

uint64_t *sub_10032F1A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for LocalUserNotificationCategory();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    Swift::String v12 = (char *)v4 + v11;
    Swift::String v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    BOOL v17 = (uint64_t *)((char *)v4 + v15);
    id v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *BOOL v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (char *)v4 + v16;
    uint64_t v21 = (char *)a2 + v16;
    uint64_t v22 = type metadata accessor for Friend();
    os_log_type_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    v23(v20, v21, v22);
  }
  return v4;
}

uint64_t sub_10032F338(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Friend();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

unsigned char *sub_10032F440(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  Swift::String v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v14];
  BOOL v17 = &a2[v14];
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = &a1[v15];
  uint64_t v20 = &a2[v15];
  uint64_t v21 = type metadata accessor for Friend();
  uint64_t v22 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  return a1;
}

unsigned char *sub_10032F580(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  Swift::String v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for Friend();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

unsigned char *sub_10032F6C8(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  Swift::String v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for Friend();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

unsigned char *sub_10032F7EC(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for LocalUserNotificationCategory();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  Swift::String v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Friend();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t sub_10032F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032F938);
}

uint64_t sub_10032F938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for LocalUserNotificationCategory();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v13 = *(void *)(a1 + a3[7] + 8);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for Friend();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[8];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_10032FAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032FACC);
}

uint64_t sub_10032FACC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for LocalUserNotificationCategory();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_5:
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  uint64_t result = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for Friend();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a4[8];
    return v15(v17, a2, a2, v16);
  }
  return result;
}

uint64_t type metadata accessor for RedStripeNotification()
{
  uint64_t result = qword_1003F4B98;
  if (!qword_1003F4B98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10032FC98()
{
  uint64_t result = type metadata accessor for LocalUserNotificationCategory();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Friend();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10032FDB4()
{
  return 0;
}

uint64_t sub_10032FDC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

ValueMetadata *type metadata accessor for UserNotificationDestination()
{
  return &type metadata for UserNotificationDestination;
}

uint64_t sub_10032FE40(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_100044014(&qword_1003F4C38);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  uint64_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014(&qword_1003F4C40);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100044014(&qword_1003F4C48);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100044014(&qword_1003F4C50);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100330B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_100330C08();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_100330BB4();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_100330C5C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1003301AC()
{
  uint64_t v1 = 0x73656369766564;
  if (*v0 != 1) {
    uint64_t v1 = 0x736D657469;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C706F6570;
  }
}

uint64_t sub_100330200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003304A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100330228(uint64_t a1)
{
  unint64_t v2 = sub_100330B60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100330264(uint64_t a1)
{
  unint64_t v2 = sub_100330B60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003302A0(uint64_t a1)
{
  unint64_t v2 = sub_100330C08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003302DC(uint64_t a1)
{
  unint64_t v2 = sub_100330C08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100330318(uint64_t a1)
{
  unint64_t v2 = sub_100330BB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100330354(uint64_t a1)
{
  unint64_t v2 = sub_100330BB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100330390(uint64_t a1)
{
  unint64_t v2 = sub_100330C5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003303CC(uint64_t a1)
{
  unint64_t v2 = sub_100330C5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100330408@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003305F0(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100330434(void *a1)
{
  return sub_10032FE40(a1, *v1);
}

unint64_t sub_100330454()
{
  unint64_t result = qword_1003F4BE8;
  if (!qword_1003F4BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4BE8);
  }
  return result;
}

uint64_t sub_1003304A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C706F6570 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656369766564 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1003305F0(void *a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F4BF0);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100044014(&qword_1003F4BF8);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F4C00);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003F4C08);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100042524(a1, a1[3]);
  sub_100330B60();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_100044014(&qword_1003F4C18);
    void *v11 = &type metadata for UserNotificationDestination;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    sub_1000233E4((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_100330C08();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_100330BB4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_100330C5C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  sub_1000233E4((uint64_t)v30);
  return v11;
}

unint64_t sub_100330B60()
{
  unint64_t result = qword_1003F4C10;
  if (!qword_1003F4C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C10);
  }
  return result;
}

unint64_t sub_100330BB4()
{
  unint64_t result = qword_1003F4C20;
  if (!qword_1003F4C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C20);
  }
  return result;
}

unint64_t sub_100330C08()
{
  unint64_t result = qword_1003F4C28;
  if (!qword_1003F4C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C28);
  }
  return result;
}

unint64_t sub_100330C5C()
{
  unint64_t result = qword_1003F4C30;
  if (!qword_1003F4C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C30);
  }
  return result;
}

unsigned char *_s13findmylocated27UserNotificationDestinationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100330D7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.CodingKeys()
{
  return &type metadata for UserNotificationDestination.CodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.PeopleCodingKeys()
{
  return &type metadata for UserNotificationDestination.PeopleCodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.DevicesCodingKeys()
{
  return &type metadata for UserNotificationDestination.DevicesCodingKeys;
}

ValueMetadata *type metadata accessor for UserNotificationDestination.ItemsCodingKeys()
{
  return &type metadata for UserNotificationDestination.ItemsCodingKeys;
}

unint64_t sub_100330DE8()
{
  unint64_t result = qword_1003F4C58;
  if (!qword_1003F4C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C58);
  }
  return result;
}

unint64_t sub_100330E40()
{
  unint64_t result = qword_1003F4C60;
  if (!qword_1003F4C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C60);
  }
  return result;
}

unint64_t sub_100330E98()
{
  unint64_t result = qword_1003F4C68;
  if (!qword_1003F4C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C68);
  }
  return result;
}

unint64_t sub_100330EF0()
{
  unint64_t result = qword_1003F4C70;
  if (!qword_1003F4C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C70);
  }
  return result;
}

unint64_t sub_100330F48()
{
  unint64_t result = qword_1003F4C78;
  if (!qword_1003F4C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C78);
  }
  return result;
}

unint64_t sub_100330FA0()
{
  unint64_t result = qword_1003F4C80;
  if (!qword_1003F4C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C80);
  }
  return result;
}

unint64_t sub_100330FF8()
{
  unint64_t result = qword_1003F4C88;
  if (!qword_1003F4C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C88);
  }
  return result;
}

unint64_t sub_100331050()
{
  unint64_t result = qword_1003F4C90;
  if (!qword_1003F4C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C90);
  }
  return result;
}

unint64_t sub_1003310A8()
{
  unint64_t result = qword_1003F4C98;
  if (!qword_1003F4C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F4C98);
  }
  return result;
}

uint64_t sub_100331100(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_100044014(&qword_1003F4B30);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100331198()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C3C8);
  sub_100044058(v0, (uint64_t)qword_10040C3C8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10033121C(uint64_t a1)
{
  v2[32] = a1;
  v2[33] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[34] = v3;
  v2[35] = *(void *)(v3 - 8);
  v2[36] = swift_task_alloc();
  return _swift_task_switch(sub_1003312DC, v1, 0);
}

uint64_t sub_1003312DC()
{
  uint64_t v61 = v0;
  uint64_t v1 = v0 + 32;
  uint64_t v2 = (void *)v0[32];
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100042524(v2, v3);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v3, v4))
  {
    uint64_t v5 = (void *)v0[32];
    uint64_t v6 = v2[3];
    uint64_t v7 = v2[4];
    sub_100042524(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
    id v8 = objc_allocWithZone((Class)UNUserNotificationCenter);
    NSString v9 = String._bridgeToObjectiveC()();
    uint64_t v10 = [v8 initWithBundleIdentifier:v9];
    v0[37] = v10;

    id v11 = sub_10033239C(v5);
    v0[38] = v11;
    uint64_t v12 = v2[3];
    uint64_t v13 = v2[4];
    sub_100042524(v5, v12);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 72))(v12, v13)) {
      uint64_t v14 = 15;
    }
    else {
      uint64_t v14 = 7;
    }
    uint64_t v15 = v2[3];
    uint64_t v16 = v2[4];
    sub_100042524(v5, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
    if (!v17)
    {
      os_log_t log = v10;
      uint64_t v28 = v0[35];
      uint64_t v27 = v0[36];
      uint64_t v57 = v0[34];
      uint64_t v29 = v2[3];
      uint64_t v30 = v2[4];
      sub_100042524((void *)v0[32], v29);
      char v31 = *(void (**)(uint64_t, uint64_t))(v30 + 16);
      uint64_t v32 = v30;
      uint64_t v1 = v0 + 32;
      v31(v29, v32);
      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v57);
      uint64_t v10 = log;
    }
    char v33 = (void *)v0[32];
    id v34 = v11;
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = [self requestWithIdentifier:v35 content:v34 trigger:0 destinations:v14];
    v0[39] = v36;

    uint64_t v37 = v2[3];
    uint64_t v38 = v2[4];
    sub_100042524(v33, v37);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v38 + 80))(v37, v38) & 1) == 0)
    {
      if (qword_1003EC490 != -1) {
        swift_once();
      }
      uint64_t v39 = *v1;
      uint64_t v40 = type metadata accessor for Logger();
      sub_100044058(v40, (uint64_t)qword_10040C3C8);
      sub_100050C1C(v39, (uint64_t)(v0 + 15));
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = v0[35];
        uint64_t v43 = v0[36];
        uint64_t v54 = v0[34];
        loga = v41;
        os_log_type_t type = v42;
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = swift_slowAlloc();
        *(_DWORD *)unint64_t v45 = 136315138;
        buf = v45;
        uint64_t v46 = v10;
        uint64_t v48 = v0[18];
        uint64_t v47 = v0[19];
        sub_100042524(v0 + 15, v48);
        uint64_t v49 = v48;
        uint64_t v10 = v46;
        (*(void (**)(uint64_t, uint64_t))(v47 + 16))(v49, v47);
        sub_10033293C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v52 = v51;
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v54);
        v0[31] = sub_100037004(v50, v52, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000233E4((uint64_t)(v0 + 15));
        uint64_t v41 = loga;
        _os_log_impl((void *)&_mh_execute_header, loga, type, "Notification with identifier %s **WILL NOT** be forwarded to the companion", buf, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000233E4((uint64_t)(v0 + 15));
      }
    }
    v0[2] = v0;
    v0[3] = sub_100331A54;
    uint64_t v53 = swift_continuation_init();
    v0[25] = _NSConcreteStackBlock;
    v0[26] = 0x40000000;
    v0[27] = sub_100331100;
    v0[28] = &unk_1003E52A8;
    v0[29] = v53;
    [v10 addNotificationRequest:v36 withCompletionHandler:v0 + 25];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    if (qword_1003EC490 != -1) {
      swift_once();
    }
    uint64_t v18 = *v1;
    uint64_t v19 = type metadata accessor for Logger();
    sub_100044058(v19, (uint64_t)qword_10040C3C8);
    sub_100050C1C(v18, (uint64_t)(v0 + 20));
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      sub_100050C1C((uint64_t)(v0 + 20), (uint64_t)(v0 + 10));
      sub_100044014(&qword_1003F4DB0);
      uint64_t v23 = String.init<A>(describing:)();
      v0[30] = sub_100037004(v23, v24, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000233E4((uint64_t)(v0 + 20));
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Refusing to post disabled notification: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000233E4((uint64_t)(v0 + 20));
    }

    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_100331A54()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 320) = v2;
  uint64_t v3 = *(void *)(v1 + 264);
  if (v2) {
    uint64_t v4 = sub_100331BEC;
  }
  else {
    uint64_t v4 = sub_100331B74;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100331B74()
{
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v2 = *(void **)(v0 + 296);

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100331BEC()
{
  uint64_t v1 = (void *)v0[39];
  uint64_t v3 = (void *)v0[37];
  uint64_t v2 = (void *)v0[38];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100331C7C()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UserNotificationService()
{
  return self;
}

uint64_t sub_100331CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for UserNotificationService();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_100331D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for UserNotificationService();
  *id v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_100331E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for UserNotificationService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100331EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for UserNotificationService();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_100331F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for UserNotificationService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.run()(v5, a2);
}

uint64_t sub_10033203C()
{
  type metadata accessor for UserNotificationService();
  sub_10033293C(&qword_1003F0D88, v0, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_1003320A4(uint64_t a1, uint64_t a2)
{
  return sub_10033293C(&qword_1003F4D78, a2, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
}

uint64_t sub_1003320EC(uint64_t a1, uint64_t a2)
{
  return sub_10033293C(qword_1003F4D80, a2, (void (*)(uint64_t))type metadata accessor for UserNotificationService);
}

_OWORD *sub_100332134(char a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  LOBYTE(v26) = a1;
  uint64_t v27 = &type metadata for Bool;
  uint64_t v9 = (void *)*a5;
  unint64_t v11 = sub_10003B888(a2, a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = (void *)*a5;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = (_OWORD *)(v17[7] + 32 * v11);
      sub_1000233E4((uint64_t)v18);
      return sub_100023434(&v26, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_1001262BC();
    goto LABEL_7;
  }
  sub_10013FA88(v14, a4 & 1);
  unint64_t v20 = sub_10003B888(a2, a3);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  uint64_t v17 = (void *)*a5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = sub_1000CA5F8((uint64_t)&v26, (uint64_t)&type metadata for Bool);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v25 + 16))(v24);
  sub_100332318(v11, a2, a3, *v24, v17);
  sub_1000233E4((uint64_t)&v26);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_100332318(unint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  LOBYTE(v11) = a4;
  uint64_t v12 = &type metadata for Bool;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  unint64_t result = sub_100023434(&v11, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_10033239C(void *a1)
{
  uint64_t v2 = type metadata accessor for LocalUserNotificationCategory();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F1868);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100042524(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 104))(v10, v11);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  char v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    char v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
  }
  [v9 setDefaultActionURL:v15];

  id v17 = [self defaultCriticalSound];
  [v9 setSound:v17];

  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_100042524(a1, v18);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  LocalUserNotificationCategory.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setCategoryIdentifier:v20];

  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  sub_100042524(a1, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v21, v22);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v23];

  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  sub_100042524(a1, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 48))(v24, v25);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setBody:v26];

  [v9 setInterruptionLevel:2];
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_100042524(a1, v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  uint64_t v30 = a1[3];
  uint64_t v31 = a1[4];
  sub_100042524(a1, v30);
  char v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 80))(v30, v31);
  uint64_t v47 = &type metadata for Bool;
  LOBYTE(v46) = v32 & 1;
  sub_100023434(&v46, &v44);
  LOBYTE(v20) = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v29;
  uint64_t v33 = sub_1000CA5F8((uint64_t)&v44, v45);
  __chkstk_darwin(v33);
  NSString v35 = (char *)&v42 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v36 + 16))(v35);
  sub_100332134(*v35, 0xD000000000000023, 0x800000010037A070, (char)v20, &v43);
  sub_1000233E4((uint64_t)&v44);
  uint64_t v37 = v43;
  swift_bridgeObjectRelease();
  sub_10032B700(v37);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setUserInfo:isa];

  uint64_t v39 = a1[3];
  uint64_t v40 = a1[4];
  sub_100042524(a1, v39);
  [v9 setShouldIgnoreDoNotDisturb:((*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v39, v40) & 1)];
  return v9;
}

uint64_t sub_10033293C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100332984()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C3E0);
  sub_100044058(v0, (uint64_t)qword_10040C3E0);
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for SettingsServiceClient()
{
  return self;
}

uint64_t sub_100332A2C(uint64_t a1)
{
  type metadata accessor for SettingsServiceClient();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_1001711CC(v4, v1, v3);
}

Swift::Int sub_100332ACC()
{
  return Hasher._finalize()();
}

uint64_t sub_100332B28()
{
  type metadata accessor for SettingsServiceClient();
  sub_10033C36C(&qword_1003F5090, v0, (void (*)(uint64_t))type metadata accessor for SettingsServiceClient);
  return XPCAcceptedClient.hash(into:)();
}

Swift::Int sub_100332BA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100332BF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = type metadata accessor for SettingsServiceClient();
  uint64_t v6 = sub_10033C36C(&qword_1003F5090, v5, (void (*)(uint64_t))type metadata accessor for SettingsServiceClient);

  return static XPCAcceptedClient.== infix(_:_:)(v2, v3, v4, v6);
}

uint64_t sub_100332C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PreferenceStreamChange();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = a2;
  *((void *)v14 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v14[v13], (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain();
  swift_retain();
  sub_10010405C((uint64_t)v11, (uint64_t)&unk_1003F50A0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_100332E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for PreferenceStreamChange();
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[9] = v8;
  v6[10] = *(void *)(v8 + 64);
  v6[11] = swift_task_alloc();
  return _swift_task_switch(sub_100332F34, 0, 0);
}

uint64_t sub_100332F34()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[7], v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[12] = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100333098;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100333098()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1003331B4;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100162108;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003331B4()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[14];
  swift_release();
  v0[2] = v1;
  OnceCheckedContinuation.resume(throwing:)();
  if (qword_1003EC498 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C3E0);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    unint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD000000000000016, 0x800000010037A1A0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10033343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return _swift_task_switch(sub_100333460, 0, 0);
}

uint64_t sub_100333460()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t, uint64_t (*)(), uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
                                                               + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  void *v1 = v0;
  v1[1] = sub_10033353C;
  uint64_t v2 = *(void *)(v0 + 80);
  return v4(v0 + 64, sub_10033AF58, v2);
}

uint64_t sub_10033353C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001D643C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100333658;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100333658()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for PreferenceStreamChange();
  sub_10033C36C(&qword_1003F50B8, 255, (void (*)(uint64_t))&type metadata accessor for PreferenceStreamChange);
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = v0[10];
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001D4AC4;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001CB748;
    v0[5] = &unk_1003E5310;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v2 preferencesUpdatedWithChange:isa completion:v10];
    _Block_release(v10);

    sub_100044090(v6, v7);
  }
  swift_unknownObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100333848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003EFCD0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_100013210(a3, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1003EFCD0);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  uint64_t v14[5] = a1;
  sub_100013B50((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13, &qword_1003EFCD0);
  swift_retain();
  swift_retain();
  sub_10010405C((uint64_t)v11, (uint64_t)&unk_1003F50C8, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_100333A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = *(void *)(sub_100044014(&qword_1003EFCD0) - 8);
  v6[8] = v7;
  v6[9] = *(void *)(v7 + 64);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_100333AD8, 0, 0);
}

uint64_t sub_100333AD8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  sub_100013210(v0[7], v1, &qword_1003EFCD0);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  v0[11] = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  sub_100013B50(v1, v6 + v5, &qword_1003EFCD0);
  swift_retain();
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100333C1C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100333C1C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100333D98;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100333D38;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100333D38()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100333D98()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[13];
  swift_release();
  v0[2] = v1;
  OnceCheckedContinuation.resume(throwing:)();
  if (qword_1003EC498 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040C3E0);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[3] = sub_100037004(0xD00000000000001ALL, 0x800000010037A1C0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2114;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Uncaught error in %{public}s: %{public}@", (uint8_t *)v5, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100334020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  return _swift_task_switch(sub_100334044, 0, 0);
}

uint64_t sub_100334044()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t, uint64_t (*)(), uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:)
                                                               + async function pointer to dispatch thunk of FM.XPCSession.proxy(errorHandler:));
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  void *v1 = v0;
  v1[1] = sub_100334120;
  uint64_t v2 = *(void *)(v0 + 80);
  return v4(v0 + 64, sub_10033AF58, v2);
}

uint64_t sub_100334120()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100174860;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10033423C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10033423C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100044014(&qword_1003EFCD0);
  sub_10033B3F0();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = v0[10];
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v0[6] = sub_1001D4AC4;
    v0[7] = v8;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1001CB748;
    v0[5] = &unk_1003E5388;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    [v2 meDeviceUpdatedWithMeDevice:isa completion:v10];
    _Block_release(v10);

    sub_100044090(v6, v7);
  }
  swift_unknownObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1003343FC()
{
  if (qword_1003EC498 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100044058(v0, (uint64_t)qword_10040C3E0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    unint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v4 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SettingsServiceClient proxy error: %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return OnceCheckedContinuation.resume(throwing:)();
}

uint64_t sub_1003345C4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1003345E4, v1, 0);
}

uint64_t sub_1003345E4()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001CD0F8;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD00000000000001ALL, 0x800000010037A1C0, sub_10033AF8C, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1003346CC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1003346EC, v1, 0);
}

uint64_t sub_1003346EC()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001CCECC;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000016, 0x800000010037A1A0, sub_10033ABB4, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1003347D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C3F8);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C3F8);
  if (qword_1003EC498 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C3E0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_10033489C(unint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 4uLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 5uLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 6uLL:
    case 9uLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 7uLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 8uLL:
      unint64_t result = 0xD000000000000010;
      break;
    case 0xAuLL:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 0xBuLL:
      unint64_t result = 0x64616552746F6E2ELL;
      break;
    default:
      strcpy((char *)v6, ".underlying(");
      BYTE5(v6[1]) = 0;
      HIWORD(v6[1]) = -5120;
      sub_10012BA58(a1);
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      sub_10012BA68(a1);
      unint64_t result = v6[0];
      break;
  }
  return result;
}

unint64_t sub_100334AC8()
{
  return sub_10033489C(*v0);
}

uint64_t sub_100334AD0()
{
  uint64_t v2 = v0;
  v1[2] = v0;
  type metadata accessor for UUID();
  v1[3] = swift_task_alloc();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0x73676E6974746553;
  *(void *)(v0 + 120) = 0xEF65636976726553;
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription;
  uint64_t v4 = type metadata accessor for XPCServiceDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline) = 0;
  uint64_t v5 = OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool;
  sub_100044014(&qword_1003F5130);
  *(void *)(v2 + v5) = XPCClientConnectionPool.__allocating_init()();
  uint64_t v6 = OBJC_IVAR____TtC13findmylocated15SettingsService_preferencesUpdateQueue;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v2 + v6) = WorkItemQueue.__allocating_init(name:identifier:)();
  uint64_t v7 = v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003F2E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for XPCSessionManager();
  uint64_t v9 = (void *)swift_task_alloc();
  v1[4] = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100334D00;
  return XPCSessionManager.__allocating_init(name:)(0x73676E6974746553, 0xEF65636976726553);
}

uint64_t sub_100334D00(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();
  *(void *)(v4 + OBJC_IVAR____TtC13findmylocated15SettingsService_xpcSessionManager) = a1;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v8 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  return v5(v6);
}

uint64_t sub_100334E40()
{
  v1[12] = v0;
  sub_100044014(&qword_1003F0A50);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for MachServiceName();
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  return _swift_task_switch(sub_100334F50, v0, 0);
}

uint64_t sub_100334F50()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SettingsService: startup", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v27 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 96);

  MachServiceName.init(_:)();
  uint64_t v9 = self;
  id v10 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate18SettingsXPCService_];
  *(void *)(v0 + 152) = v10;
  uint64_t v11 = sub_100044014(&qword_1003F51A0);
  uint64_t v12 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  swift_weakInit();
  swift_weakAssign();
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = v11;
  id v13 = [super init];
  *(void *)(v0 + 160) = v13;
  swift_release();
  id v14 = [v9 interfaceWithProtocol:&OBJC_PROTOCOL____TtP12FindMyLocate24SettingsServiceClientXPC_];
  *(void *)(v0 + 168) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v26, v5, v27);
  uint64_t v15 = type metadata accessor for ServiceEntitlements();
  *(void *)(v0 + 40) = v15;
  *(void *)(v0 + 48) = sub_10033C36C(&qword_1003F0A58, 255, (void (*)(uint64_t))&type metadata accessor for ServiceEntitlements);
  uint64_t v16 = sub_10003E0F4((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, enum case for ServiceEntitlements.settingService(_:), v15);
  swift_allocObject();
  swift_weakInit();
  id v17 = v13;
  id v18 = v10;
  id v19 = v14;
  XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)();
  uint64_t v20 = type metadata accessor for XPCServiceDescription();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 0, 1, v20);
  sub_100013B50(v7, v28, &qword_1003F0A50);
  uint64_t v21 = v8 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription;
  swift_beginAccess();
  sub_10028314C(v28, v21, &qword_1003F0A50);
  swift_endAccess();
  *(void *)(v8 + OBJC_IVAR____TtC13findmylocated15SettingsService_trampoline) = v17;
  id v22 = v17;
  swift_release();
  *(void *)(v0 + 176) = *(void *)(v8 + OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool);
  sub_100044014(&qword_1003F5130);
  sub_100014FFC(&qword_1003F5138, &qword_1003F5130);
  uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003353BC, v24, v23);
}

uint64_t sub_1003353BC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)();
  return _swift_task_switch(sub_100335440, v1, 0);
}

uint64_t sub_100335440()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void **)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10033550C(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1003355A0, 0, 0);
}

uint64_t sub_1003355A0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[7];
    uint64_t v4 = (void *)v0[5];
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = (void *)swift_allocObject();
    void v6[2] = 0;
    v6[3] = 0;
    v6[4] = v2;
    v6[5] = v4;
    swift_retain();
    id v7 = v4;
    sub_10010405C(v3, (uint64_t)&unk_1003F51C8, (uint64_t)v6);
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(1);
}

uint64_t sub_1003356E0()
{
  v1[103] = v0;
  uint64_t v2 = sub_100044014(&qword_1003F3438);
  v1[104] = v2;
  v1[105] = *(void *)(v2 - 8);
  v1[106] = swift_task_alloc();
  sub_100044014(&qword_1003F3430);
  v1[107] = swift_task_alloc();
  v1[108] = swift_task_alloc();
  sub_100044014(&qword_1003F0A50);
  v1[109] = swift_task_alloc();
  return _swift_task_switch(sub_100335814, v0, 0);
}

uint64_t sub_100335814()
{
  uint64_t v1 = v0[109];
  uint64_t v2 = v0[103];
  v0[110] = *(void *)(v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_xpcSessionManager);
  uint64_t v3 = v2 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription;
  swift_beginAccess();
  sub_100013210(v3, v1, &qword_1003F0A50);
  uint64_t v4 = type metadata accessor for XPCServiceDescription();
  v0[111] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[112] = v5;
  uint64_t v6 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  if (v6 == 1)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for XPCSessionManager();
    sub_10033C36C(&qword_1003F0A70, 255, (void (*)(uint64_t))&type metadata accessor for XPCSessionManager);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v11 = v10;
    uint64_t v6 = sub_100335984;
    uint64_t v7 = v9;
    uint64_t v8 = v11;
  }
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100335984()
{
  dispatch thunk of XPCSessionManager.register(service:)();
  v0[113] = 0;
  (*(void (**)(void, void))(v0[112] + 8))(v0[109], v0[111]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[114] = v1;
  void *v1 = v0;
  v1[1] = sub_100335A8C;
  return daemon.getter();
}

uint64_t sub_100335A8C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 920) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 928) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10033C36C(&qword_1003ECCA8, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10033C36C(&qword_1003ECCC0, 255, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100335C70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100335C70(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[117] = a1;
  v4[118] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[103];
    uint64_t v6 = sub_1002503C0;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100335DAC;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100335DAC()
{
  uint64_t v1 = v0[106];
  uint64_t v2 = v0[105];
  uint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  return _swift_task_switch(sub_100335EC4, v4, 0);
}

uint64_t sub_100335EC4()
{
  uint64_t v1 = v0[108];
  uint64_t v2 = v0[107];
  uint64_t v3 = v0[103];
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F2E98);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_100013B50(v1, v2, &qword_1003F3430);
  uint64_t v5 = v3 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  swift_beginAccess();
  sub_10028314C(v2, v5, &qword_1003F3430);
  swift_endAccess();
  swift_retain_n();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 2);
}

uint64_t sub_100336024()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_1003368B8();
}

uint64_t sub_1003360B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10004A274;
  return sub_100336150(a5);
}

uint64_t sub_100336150(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for ServiceEntitlements();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100336210, v1, 0);
}

uint64_t sub_100336210()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ServiceEntitlements.settingService(_:), v3);
  sub_10033C36C(&qword_1003F0A58, 255, (void (*)(uint64_t))&type metadata accessor for ServiceEntitlements);
  char v4 = NSXPCConnection.hasEntitlement<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    os_log_t log = (os_log_t)((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                   + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100336578;
    uint64_t v6 = *(void *)(v0 + 24);
    return ((uint64_t (*)(uint64_t))log)(v6);
  }
  else
  {
    [*(id *)(v0 + 24) invalidate];
    sub_100085350();
    swift_allocError();
    *uint64_t v8 = 11;
    swift_willThrow();
    if (qword_1003EC4A0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040C3F8);
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      loga = v10;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138543362;
      uint64_t v14 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 16) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v14;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v11, "Error adding connection: %{public}@", v12, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100336578()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    return _swift_task_switch(sub_1003366D4, v4, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_1003366D4()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error adding connection: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1003368B8()
{
  v1[5] = v0;
  v1[6] = *v0;
  sub_100044014(&qword_1003EFCD0);
  v1[7] = swift_task_alloc();
  type metadata accessor for UUID();
  v1[8] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for PreferenceStreamChange();
  v1[9] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[10] = v3;
  v1[11] = *(void *)(v3 + 64);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  sub_100044014(&qword_1003F3420);
  v1[20] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003F3428);
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  sub_100044014(&qword_1003F3430);
  v1[24] = swift_task_alloc();
  uint64_t v6 = sub_100044014((uint64_t *)&unk_1003F2E98);
  v1[25] = v6;
  v1[26] = *(void *)(v6 - 8);
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_100336BB8, v0, 0);
}

uint64_t sub_100336BB8()
{
  if (static SystemInfo.underTest.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v1();
  }
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 224) = sub_100044058(v2, (uint64_t)qword_10040C3F8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Monitoring DataManager stream", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 40);

  uint64_t v10 = v9 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream;
  swift_beginAccess();
  sub_100013210(v10, v8, &qword_1003F3430);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
  {
    sub_10000A520(*(void *)(v0 + 192), &qword_1003F3430);
    os_log_type_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "dataManagerStateStream should be available by now!", v13, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v14 = 10;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 216), *(void *)(v0 + 192), *(void *)(v0 + 200));
  AsyncStream.makeAsyncIterator()();
  uint64_t v16 = sub_10033C36C(qword_1003F5038, 255, (void (*)(uint64_t))type metadata accessor for SettingsService);
  uint64_t v17 = OBJC_IVAR____TtC13findmylocated15SettingsService_preferencesUpdateQueue;
  *(void *)(v0 + 232) = v16;
  *(void *)(v0 + 240) = v17;
  *(_DWORD *)(v0 + 264) = enum case for PreferenceStreamChange.initialized(_:);
  *(_DWORD *)(v0 + 268) = enum case for PreferenceStreamChange.friendRequests(_:);
  *(_DWORD *)(v0 + 272) = enum case for PreferenceStreamChange.myLocation(_:);
  *(_DWORD *)(v0 + 276) = enum case for PreferenceStreamChange.meDevice(_:);
  *(void *)(v0 + 248) = 0;
  uint64_t v18 = *(void *)(v0 + 40);
  id v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v19;
  *id v19 = v0;
  v19[1] = sub_100337064;
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 168);
  return AsyncStream.Iterator.next(isolation:)(v20, v18, v16, v21);
}

uint64_t sub_100337064()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100337174, v1, 0);
}

uint64_t sub_100337174()
{
  uint64_t v76 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 120) + 48))(v1, 1, *(void *)(v0 + 112)) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 200);
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v5();
  }
  uint64_t v6 = *(void *)(v0 + 248);
  sub_10028300C(v1, *(void *)(v0 + 152));
  static Task<>.checkCancellation()();
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 168);
    sub_10004E90C(*(void *)(v0 + 152));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  sub_10004E968(*(void *)(v0 + 152), *(void *)(v0 + 144));
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v0 + 144);
  if (v16)
  {
    uint64_t v18 = swift_slowAlloc();
    v75[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v19 = sub_100105094();
    *(void *)(v18 + 4) = sub_100037004(v19, v20, v75);
    swift_bridgeObjectRelease();
    sub_10004E90C(v17);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "dataManagerStateStream event: %s", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10004E90C(*(void *)(v0 + 144));
  }

  sub_10004E968(*(void *)(v0 + 152), *(void *)(v0 + 136));
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v21 = type metadata accessor for Friend();
      (*(void (**)(void))(*(void *)(v21 - 8) + 8))(*(void *)(v0 + 136));
      goto LABEL_13;
    case 3u:
      uint64_t v40 = *(unsigned int *)(v0 + 272);
      uint64_t v74 = *(void *)(v0 + 152);
      uint64_t v42 = *(void *)(v0 + 96);
      uint64_t v41 = *(unsigned char **)(v0 + 104);
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v44 = *(void *)(v0 + 88);
      uint64_t v45 = *(void *)(v0 + 72);
      uint64_t v46 = *(void *)(v0 + 40);
      uint64_t v70 = *(void *)(v0 + 48);
      *uint64_t v41 = **(unsigned char **)(v0 + 136);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 104))(v41, v40, v45);
      type metadata accessor for WorkItemQueue.WorkItem();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v43 + 16))(v42, v41, v45);
      unint64_t v47 = (*(unsigned __int8 *)(v43 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v48 = (v44 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v46;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v43 + 32))(v49 + v47, v42, v45);
      *(void *)(v49 + v48) = v70;
      swift_retain();
      UUID.init()();
      goto LABEL_21;
    case 4u:
      uint64_t v50 = *(unsigned int *)(v0 + 268);
      uint64_t v74 = *(void *)(v0 + 152);
      uint64_t v51 = *(void *)(v0 + 96);
      uint64_t v41 = *(unsigned char **)(v0 + 104);
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v52 = *(void *)(v0 + 88);
      uint64_t v45 = *(void *)(v0 + 72);
      uint64_t v53 = *(void *)(v0 + 40);
      uint64_t v71 = *(void *)(v0 + 48);
      *uint64_t v41 = **(unsigned char **)(v0 + 136);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 104))(v41, v50, v45);
      type metadata accessor for WorkItemQueue.WorkItem();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v43 + 16))(v51, v41, v45);
      unint64_t v54 = (*(unsigned __int8 *)(v43 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v55 = (v52 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v56 = swift_allocObject();
      *(void *)(v56 + 16) = v53;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v43 + 32))(v56 + v54, v51, v45);
      *(void *)(v56 + v55) = v71;
      swift_retain();
      UUID.init()();
      goto LABEL_21;
    case 5u:
    case 7u:
LABEL_13:
      sub_10004E968(*(void *)(v0 + 152), *(void *)(v0 + 128));
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      uint64_t v25 = *(void *)(v0 + 152);
      uint64_t v26 = *(void *)(v0 + 128);
      if (v24)
      {
        uint64_t v27 = swift_slowAlloc();
        v75[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v28 = sub_100105094();
        *(void *)(v27 + 4) = sub_100037004(v28, v29, v75);
        swift_bridgeObjectRelease();
        sub_10004E90C(v26);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ignoring %s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10004E90C(v26);
      }
      uint64_t v30 = v25;
      goto LABEL_23;
    case 6u:
      uint64_t v74 = *(void *)(v0 + 152);
      uint64_t v57 = *(void *)(v0 + 96);
      uint64_t v41 = *(unsigned char **)(v0 + 104);
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v58 = *(void *)(v0 + 88);
      uint64_t v45 = *(void *)(v0 + 72);
      uint64_t v59 = *(void *)(v0 + 40);
      uint64_t v72 = *(void *)(v0 + 48);
      (*(void (**)(unsigned char *, void, uint64_t))(v43 + 104))(v41, *(unsigned int *)(v0 + 264), v45);
      type metadata accessor for WorkItemQueue.WorkItem();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v43 + 16))(v57, v41, v45);
      unint64_t v60 = (*(unsigned __int8 *)(v43 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      unint64_t v61 = (v58 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = v59;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v43 + 32))(v62 + v60, v57, v45);
      *(void *)(v62 + v61) = v72;
      swift_retain();
      UUID.init()();
LABEL_21:
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
      dispatch thunk of WorkItemQueue.enqueue(_:)();
      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v41, v45);
      break;
    default:
      uint64_t v31 = *(unsigned int *)(v0 + 276);
      uint64_t v33 = *(void *)(v0 + 96);
      uint64_t v32 = *(void *)(v0 + 104);
      uint64_t v34 = *(void *)(v0 + 80);
      uint64_t v68 = *(void *)(v0 + 88);
      uint64_t v35 = *(void *)(v0 + 72);
      uint64_t v36 = *(void *)(v0 + 56);
      uint64_t v69 = *(void *)(v0 + 48);
      uint64_t v37 = *(void *)(v0 + 40);
      uint64_t v73 = v36;
      uint64_t v74 = *(void *)(v0 + 152);
      sub_100013B50(*(void *)(v0 + 136), v36, &qword_1003EFCD0);
      sub_100013210(v36, v32, &qword_1003EFCD0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104))(v32, v31, v35);
      type metadata accessor for WorkItemQueue.WorkItem();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
      unint64_t v38 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v37;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))(v39 + v38, v33, v35);
      *(void *)(v39 + ((v68 + v38 + 7) & 0xFFFFFFFFFFFFFFF8)) = v69;
      swift_retain();
      UUID.init()();
      WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
      dispatch thunk of WorkItemQueue.enqueue(_:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v35);
      sub_10000A520(v73, &qword_1003EFCD0);
      break;
  }
  uint64_t v30 = v74;
LABEL_23:
  sub_10004E90C(v30);
  *(void *)(v0 + 248) = 0;
  uint64_t v63 = *(void *)(v0 + 232);
  uint64_t v64 = *(void *)(v0 + 40);
  id v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v65;
  *id v65 = v0;
  v65[1] = sub_100337064;
  uint64_t v66 = *(void *)(v0 + 160);
  uint64_t v67 = *(void *)(v0 + 168);
  return AsyncStream.Iterator.next(isolation:)(v66, v64, v63, v67);
}

uint64_t sub_100337BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for PreferenceStreamChange();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100337CA4, 0, 0);
}

uint64_t sub_100337CA4()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[3], v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  v0[9] = v9;
  *(void *)(v9 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(void *)(v9 + v8) = v5;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[10] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100116F4C;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_100337E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a3;
  v4[9] = a4;
  v4[7] = a2;
  uint64_t v5 = type metadata accessor for PreferenceStreamChange();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_100337ED4, 0, 0);
}

uint64_t sub_100337ED4()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 56)
                                    + OBJC_IVAR____TtC13findmylocated15SettingsService_connectionPool);
  sub_100044014(&qword_1003F5130);
  sub_100014FFC(&qword_1003F5138, &qword_1003F5130);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100337F9C, v2, v1);
}

uint64_t sub_100337F9C()
{
  uint64_t v1 = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  v0[14] = v1;
  v0[2] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[15] = v2;
  uint64_t v3 = sub_100044014(&qword_1003F5148);
  uint64_t v4 = type metadata accessor for UUID();
  v0[16] = v4;
  uint64_t v5 = sub_100014FFC(&qword_1003F5150, &qword_1003F5148);
  *uint64_t v2 = v0;
  v2[1] = sub_1003380C0;
  return Sequence.asyncMap<A>(_:)(&unk_1003F5140, 0, v3, v4, v5);
}

uint64_t sub_1003380C0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003381C0, 0, 0);
}

uint64_t sub_1003381C0()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040C3F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[14];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218755;
    if ((v8 & 0xC000000000000001) != 0) {
      uint64_t v10 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v10 = *(void *)(v0[14] + 16);
    }
    uint64_t v14 = v0[11];
    uint64_t v25 = v0[10];
    uint64_t v26 = v0[12];
    swift_bridgeObjectRelease();
    v0[3] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v15 = Array.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    v0[4] = sub_100037004(v15, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2081;
    sub_10033C36C(&qword_1003F5168, 255, (void (*)(uint64_t))&type metadata accessor for PreferenceStreamChange);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_100037004(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v26, v25);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SettingsService: send meDevice Update to all clients:\nclients[%ld]: %{public}s\nupdates:%{private,mask.hash}s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v12 = v0[11];
    uint64_t v11 = v0[12];
    uint64_t v13 = v0[10];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  uint64_t v20 = v0[14];
  uint64_t v21 = swift_task_alloc();
  v0[18] = v21;
  long long v22 = *((_OWORD *)v0 + 4);
  *(void *)(v21 + 16) = v20;
  *(_OWORD *)(v21 + 24) = v22;
  os_log_type_t v23 = (void *)swift_task_alloc();
  v0[19] = v23;
  *os_log_type_t v23 = v0;
  v23[1] = sub_100338608;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100338608()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10033873C, 0, 0);
}

uint64_t sub_10033873C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003387A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  uint64_t v6 = type metadata accessor for PreferenceStreamChange();
  v5[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[21] = v7;
  v5[22] = *(void *)(v7 + 64);
  v5[23] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_1003388AC, 0, 0);
}

uint64_t sub_1003388AC()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for SettingsServiceClient();
    sub_10033C36C((unint64_t *)&unk_1003F5080, v2, (void (*)(uint64_t))type metadata accessor for SettingsServiceClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v36 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v36 = v1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v35 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v38 = *(void *)(v0 + 176) + 7;
  uint64_t v39 = *(void *)(v0 + 168);
  uint64_t v37 = v1;
  while (v1 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_37;
    }
    *(void *)(v0 + 120) = v14;
    type metadata accessor for SettingsServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 112);
    swift_unknownObjectRelease();
    uint64_t v13 = v5;
    uint64_t v11 = v6;
    if (!v15) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v43 = v11;
    uint64_t v40 = v13;
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v42 = *(void *)(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v44 = v15;
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v41 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 144);
    uint64_t v23 = type metadata accessor for TaskPriority();
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v19, 1, 1, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v20, v22, v21);
    unint64_t v25 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = 0;
    uint64_t v27 = v26 + 2;
    v26[3] = 0;
    v26[4] = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))((char *)v26 + v25, v20, v21);
    *(void *)((char *)v26 + ((v38 + v25) & 0xFFFFFFFFFFFFFFF8)) = v41;
    sub_100013210(v19, v42, (uint64_t *)&unk_1003F3C10);
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v42, 1, v23);
    swift_retain();
    uint64_t v28 = *(void *)(v0 + 192);
    if (v20 == 1)
    {
      sub_10000A520(*(void *)(v0 + 192), (uint64_t *)&unk_1003F3C10);
      if (*v27) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v23);
      if (*v27)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v31 = v30;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v29 = 0;
    uint64_t v31 = 0;
LABEL_35:
    uint64_t v32 = **(void **)(v0 + 128);
    uint64_t v33 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v33 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v29;
      *(void *)(v0 + 80) = v31;
    }
    uint64_t v1 = v37;
    uint64_t v10 = *(void *)(v0 + 200);
    *(void *)(v0 + 88) = 1;
    *(void *)(v0 + 96) = v33;
    *(void *)(v0 + 104) = v32;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = sub_10000A520(v10, (uint64_t *)&unk_1003F3C10);
    uint64_t v5 = v40;
    unint64_t v6 = v43;
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v13 = v5;
    goto LABEL_29;
  }
  int64_t v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v35) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v36 + 8 * v16);
  uint64_t v13 = v5 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 2;
  if (v5 + 2 >= v35) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v36 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 3;
  if (v5 + 3 >= v35) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v36 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v5 + 4;
  if (v5 + 4 >= v35) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v36 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v5 + 5;
  while (v35 != v18)
  {
    unint64_t v17 = *(void *)(v36 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  sub_1001491B4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_100338E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for PreferenceStreamChange();
  v6[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[8] = v8;
  v6[9] = *(void *)(v8 + 64);
  v6[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[12] = v10;
  v6[13] = *(void *)(v10 + 64);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_100338FB0, 0, 0);
}

uint64_t sub_100338FB0()
{
  static Task<>.checkCancellation()();
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                       + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  void *v1 = v0;
  v1[1] = sub_1003390E0;
  uint64_t v2 = *(void *)(v0 + 128);
  return v4(v2);
}

uint64_t sub_1003390E0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003391DC, 0, 0);
}

uint64_t sub_1003391DC()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  uint64_t v8 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[7];
  uint64_t v18 = v9;
  uint64_t v19 = v5;
  uint64_t v10 = v0[5];
  uint64_t v20 = v0[4];
  uint64_t v21 = v0[6];
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[18] = v11;
  v0[19] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v2, v1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v10, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v13 = (v3 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + v13 + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  v0[20] = v15;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v15 + v12, v2, v6);
  *(void *)(v15 + v13) = v20;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v15 + v14, v19, v18);
  *(void *)(v15 + ((v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  swift_retain();
  int64_t v16 = (void *)swift_task_alloc();
  v0[21] = v16;
  *int64_t v16 = v0;
  v16[1] = sub_1003393CC;
  return withTimeout<A>(_:block:)();
}

uint64_t sub_1003393CC()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10033958C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1003394E8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003394E8()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[16], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10033958C()
{
  unint64_t v25 = v0;
  swift_release();
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040C3F8);
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[11];
  uint64_t v12 = v0[12];
  if (v8)
  {
    uint64_t v23 = v0[16];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    sub_10033C36C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Error from client %{public}s error: %{public}@", (uint8_t *)v13, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v16(v23, v11);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v10, v11);
    swift_errorRelease();
    v18(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100339910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_1003399E4, 0, 0);
}

uint64_t sub_1003399E4()
{
  uint64_t v20 = v0;
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  v0[11] = sub_100044058(v5, (uint64_t)qword_10040C3F8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[12] = v6;
  v0[13] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_10033C36C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending preferences update to client %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[14] = v16;
  uint64_t v17 = v0[5];
  return _swift_task_switch(sub_100339C64, v17, 0);
}

uint64_t sub_100339C64()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100339D48;
  return withOnceCheckedThrowingContinuation<A>(function:_:)(v2, 0xD000000000000016, 0x800000010037A1A0, sub_10033C668, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100339D48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_1001D23C4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_100339E70;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100339E70()
{
  return _swift_task_switch(sub_100339E8C, 0, 0);
}

uint64_t sub_100339E8C()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0 + 96))(*(void *)(v0 + 72), *(void *)(v0 + 32), *(void *)(v0 + 56));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    sub_10033C36C(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v10(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully sent preferences update to client %{public}s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  }

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10033A0AC(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v4 = type metadata accessor for SystemVersionNumber();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10033A17C, v2, 0);
}

uint64_t sub_10033A17C()
{
  uint64_t v27 = v0;
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100044058(v7, (uint64_t)qword_10040C3F8);
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v8(v3, v6, v4);
  BOOL v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  if (v11)
  {
    uint64_t v25 = v0[8];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_10033C36C(&qword_1003F0108, 255, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v15);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v25, v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "STUB: migrate from %s to %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v12, v15);
    v22(v13, v15);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10033A490()
{
  swift_bridgeObjectRelease();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_serviceDescription, &qword_1003F0A50);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated15SettingsService_dataManagerStateStream, &qword_1003F3430);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10033A538()
{
  return type metadata accessor for SettingsService();
}

uint64_t type metadata accessor for SettingsService()
{
  uint64_t result = qword_1003F4EC0;
  if (!qword_1003F4EC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10033A58C()
{
  sub_10016926C();
  if (v0 <= 0x3F)
  {
    sub_10027A284();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10033A684()
{
  return _swift_task_switch(sub_10033A6A0, v0, 0);
}

uint64_t sub_10033A6A0()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "STUB: initialLaunchProcessing", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10033A7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10033A0AC(a1, a2);
}

uint64_t sub_10033A858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for SettingsService();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10033A904()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100334E40();
}

uint64_t sub_10033A990()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100018CD0;
  return sub_1003356E0();
}

uint64_t sub_10033AA1C()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_10033AA8C()
{
  return sub_10033C36C(&qword_1003F5030, 255, (void (*)(uint64_t))type metadata accessor for SettingsService);
}

uint64_t sub_10033AAD8()
{
  return sub_10033C36C(qword_1003F5038, 255, (void (*)(uint64_t))type metadata accessor for SettingsService);
}

uint64_t sub_10033AB24(uint64_t a1, uint64_t a2)
{
  return sub_10033C36C(&qword_1003F5078, a2, (void (*)(uint64_t))type metadata accessor for SettingsServiceClient);
}

uint64_t sub_10033AB6C(uint64_t a1, uint64_t a2)
{
  return sub_10033C36C((unint64_t *)&unk_1003F5080, a2, (void (*)(uint64_t))type metadata accessor for SettingsServiceClient);
}

uint64_t sub_10033ABB4(uint64_t a1)
{
  return sub_100332C80(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10033ABBC()
{
  uint64_t v1 = type metadata accessor for PreferenceStreamChange();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10033AC98(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *os_log_type_t v10 = v2;
  v10[1] = sub_10004A274;
  return sub_100332E68(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_10033AD98()
{
  uint64_t v1 = type metadata accessor for PreferenceStreamChange();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10033AE6C()
{
  uint64_t v2 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10004A274;
  *(void *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  return _swift_task_switch(sub_100333460, 0, 0);
}

uint64_t sub_10033AF58()
{
  return sub_1003343FC();
}

uint64_t sub_10033AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10033AF84()
{
  return swift_release();
}

uint64_t sub_10033AF8C(uint64_t a1)
{
  return sub_100333848(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10033AF94()
{
  uint64_t v1 = *(void *)(sub_100044014(&qword_1003EFCD0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for Device();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10033B0CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100044014(&qword_1003EFCD0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *os_log_type_t v10 = v2;
  v10[1] = sub_10004A274;
  return sub_100333A0C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_10033B1D0()
{
  uint64_t v1 = *(void *)(sub_100044014(&qword_1003EFCD0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for Device();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10033B300()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003EFCD0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10004A274;
  *(void *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  return _swift_task_switch(sub_100334044, 0, 0);
}

unint64_t sub_10033B3F0()
{
  unint64_t result = qword_1003F50E0;
  if (!qword_1003F50E0)
  {
    sub_10004AE58(&qword_1003EFCD0);
    sub_10033C36C(&qword_1003F50E8, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F50E0);
  }
  return result;
}

uint64_t sub_10033B49C()
{
  uint64_t v2 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_100337BD8(v4, v5, v6);
}

uint64_t sub_10033B5A8(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(sub_10033B5C8, 0, 0);
}

uint64_t sub_10033B5C8()
{
  uint64_t v13 = v0;
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v12 = v7;
    v0[2] = v5;
    type metadata accessor for SettingsServiceClient();
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)();
    v0[2] = sub_100037004(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Settings Service: removed connection: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  os_log_type_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10033B7CC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_10033B7F0, 0, 0);
}

uint64_t sub_10033B7F0()
{
  uint64_t v12 = v0;
  if (*(unsigned char *)(v0 + 32))
  {
    swift_errorRetain();
    if (qword_1003EC4A0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040C3F8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 24);
    if (v4)
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000016, 0x800000010037A1E0, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2114;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      sub_1001D5B10(v5, 1);
      sub_1001D5B10(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}@", (uint8_t *)v6, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D5B10(v5, 1);
    }
    else
    {
      sub_1001D5B10(*(void *)(v0 + 24), 1);
      sub_1001D5B10(v5, 1);
      swift_errorRelease();
    }
  }
  unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10033BA94()
{
  uint64_t v2 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100018CD0;
  return sub_100337BD8(v4, v5, v6);
}

uint64_t sub_10033BBAC()
{
  uint64_t v1 = type metadata accessor for PreferenceStreamChange();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10033BC84(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10004A274;
  return sub_100337E10(a1, v6, v7, v8);
}

uint64_t sub_10033BD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10004A274;
  return sub_1003387A0(a1, a2, v6, v7, v8);
}

uint64_t sub_10033BE60()
{
  uint64_t v1 = type metadata accessor for PreferenceStreamChange();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10033BF40(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_10004A274;
  return sub_100338E64(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_10033C06C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for PreferenceStreamChange();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10033C1DC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for PreferenceStreamChange() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_10004A274;
  return sub_100339910(a1, v1 + v6, v10, v11);
}

uint64_t sub_10033C36C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10033C3B4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033C3EC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_100336024();
}

uint64_t sub_10033C488(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004CAE8;
  return sub_10033550C(a1, v1);
}

uint64_t sub_10033C520()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10033C568()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10004A274;
  return sub_100336150(v2);
}

ValueMetadata *type metadata accessor for SettingsService.Error()
{
  return &type metadata for SettingsService.Error;
}

uint64_t sub_10033C66C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C410);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C410);
  if (qword_1003EC4B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C428);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10033C734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1003EC4A8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040C410);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Mock setDidReceive:block", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(void *)(v3 + 160);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = a2;
  swift_retain();

  return sub_1002CA554(v10);
}

uint64_t sub_10033C848()
{
  sub_1000233E4(v0 + 120);
  sub_1002CA554(*(void *)(v0 + 160));
  sub_1002CA554(*(void *)(v0 + 176));
  sub_1002CA554(*(void *)(v0 + 192));
  sub_1002CA554(*(void *)(v0 + 208));
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MockAPNSManager()
{
  return self;
}

uint64_t sub_10033C8CC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_10033C8EC, v1, 0);
}

uint64_t sub_10033C8EC()
{
  sub_10033D1E0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10033C94C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10033C970, v2, 0);
}

uint64_t sub_10033C970()
{
  sub_10033C734(v0[2], v0[3]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10033C9D4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10033C9F8, v2, 0);
}

uint64_t sub_10033C9F8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 + 176);
  *(void *)(v2 + 176) = v0[2];
  *(void *)(v2 + 184) = v1;
  swift_retain();
  sub_1002CA554(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10033CA70(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10033CA94, v2, 0);
}

uint64_t sub_10033CA94()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 + 192);
  *(void *)(v2 + 192) = v0[2];
  *(void *)(v2 + 200) = v1;
  swift_retain();
  sub_1002CA554(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10033CB0C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10033CB30, v2, 0);
}

uint64_t sub_10033CB30()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 + 208);
  *(void *)(v2 + 208) = v0[2];
  *(void *)(v2 + 216) = v1;
  swift_retain();
  sub_1002CA554(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10033CBA8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10033CBC8, v1, 0);
}

uint64_t sub_10033CBC8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(int **)(v1 + 208);
  v0[4] = v2;
  if (v2)
  {
    v0[5] = *(void *)(v1 + 216);
    swift_retain();
    uint64_t v3 = static Data.random(bytes:)();
    uint64_t v5 = v4;
    v0[6] = v3;
    v0[7] = v4;
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v2 + *v2);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[8] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10033CD18;
    uint64_t v7 = v0[2];
    return v10(v3, v5, v7);
  }
  else
  {
    unint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10033CD18()
{
  unint64_t v1 = *(void *)(*v0 + 56);
  uint64_t v2 = *(void *)(*v0 + 48);
  uint64_t v3 = *(void *)(*v0 + 32);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  sub_1002CA554(v3);
  sub_100044090(v2, v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10033CE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_10033CEA4, v4, 0);
}

uint64_t sub_10033CEA4()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(int **)(v1 + 192);
  v0[7] = v2;
  if (v2)
  {
    v0[8] = *(void *)(v1 + 200);
    swift_retain();
    uint64_t v3 = static Data.random(bytes:)();
    uint64_t v5 = v4;
    v0[9] = v3;
    v0[10] = v4;
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v2 + *v2);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[11] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10033CFF8;
    uint64_t v7 = v0[4];
    uint64_t v8 = v0[5];
    uint64_t v9 = v0[2];
    uint64_t v10 = v0[3];
    return v13(v3, v5, v9, v10, v7, v8);
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_10033CFF8()
{
  unint64_t v1 = *(void *)(*v0 + 80);
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *(void *)(*v0 + 56);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  sub_1002CA554(v3);
  sub_100044090(v2, v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10033D15C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C428);
  sub_100044058(v0, (uint64_t)qword_10040C428);
  return Logger.init(subsystem:category:)();
}

void sub_10033D1E0()
{
  if (qword_1003EC4A8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100044058(v0, (uint64_t)qword_10040C410);
  swift_bridgeObjectRetain_n();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    sub_100037004(v4, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Mock enabledTopics: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

BOOL sub_10033D3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  sub_100346F48(a1, (uint64_t)&v18 - v8, type metadata accessor for DataManager.State);
  unint64_t v10 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
      unint64_t v10 = 3;
      break;
    case 2u:
      uint64_t v12 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
      unint64_t v10 = 4;
      break;
    case 3u:
      unint64_t v10 = 6;
      break;
    case 4u:
      unint64_t v10 = 7;
      break;
    case 5u:
      break;
    case 6u:
      unint64_t v10 = 1;
      break;
    case 7u:
      unint64_t v10 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v9, &qword_1003EFCD0);
      unint64_t v10 = 2;
      break;
  }
  sub_100346F48(a2, (uint64_t)v7, type metadata accessor for DataManager.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v14 = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v15 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v7, v15);
      unint64_t v14 = 3;
      break;
    case 2:
      uint64_t v16 = type metadata accessor for Friend();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
      unint64_t v14 = 4;
      break;
    case 3:
      unint64_t v14 = 6;
      break;
    case 4:
      unint64_t v14 = 7;
      break;
    case 5:
      return v10 >= v14;
    case 6:
      unint64_t v14 = 1;
      break;
    case 7:
      unint64_t v14 = 5;
      break;
    default:
      sub_10000A520((uint64_t)v7, &qword_1003EFCD0);
      unint64_t v14 = 2;
      break;
  }
  return v10 >= v14;
}

uint64_t sub_10033D6AC(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 196) = a2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = v2;
  uint64_t v4 = type metadata accessor for Device();
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v4 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  *(void *)(v3 + 88) = swift_task_alloc();
  *(void *)(v3 + 96) = swift_task_alloc();
  sub_100044014(&qword_1003EFCD0);
  *(void *)(v3 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_10033D7C8, v2, 0);
}

uint64_t sub_10033D7C8()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 196);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 192) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "activeLocationSharingDevice cached: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10033D958;
  return sub_100340BB8();
}

uint64_t sub_10033D958()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 128) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10033DB00;
    return daemon.getter();
  }
}

uint64_t sub_10033DB00(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 136) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 144) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10033DCDC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10033DCDC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[6];
    return _swift_task_switch(sub_10033E664, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[21] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10033DE64;
    return sub_100005F58();
  }
}

uint64_t sub_10033DE64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10033DF7C, v2, 0);
}

uint64_t sub_10033DF7C()
{
  uint64_t v54 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = sub_100037004(v4, v6, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "All devices: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v12 = *(void (**)(void, uint64_t, void))(v9 + 16);
    uint64_t v10 = v9 + 16;
    uint64_t v11 = v12;
    uint64_t v13 = v7 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v14 = *(void *)(v10 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(*(void *)(v0 + 96), v13, *(void *)(v0 + 56));
      if (Device.isActive.getter()) {
        break;
      }
      (*(void (**)(void, void))(v10 - 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
      v13 += v14;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v19 = *(void *)(v0 + 64);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v16, v18);
    uint64_t v15 = 0;
  }
  else
  {
LABEL_9:
    uint64_t v15 = 1;
  }
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v22 = *(void *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, v15, 1, v21);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000A520(*(void *)(v0 + 104), &qword_1003EFCD0);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing meDevice)", v25, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v26 = 8;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 80);
    uint64_t v28 = *(void *)(v0 + 88);
    uint64_t v31 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 72);
    uint64_t v32 = *(void *)(v0 + 56);
    uint64_t v33 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 32))(v33, *(void *)(v0 + 104), v32);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
    v34(v28, v33, v32);
    v34(v29, v33, v32);
    v34(v30, v33, v32);
    int64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v39 = *(void *)(v0 + 80);
    uint64_t v38 = *(void *)(v0 + 88);
    uint64_t v40 = *(void *)(v0 + 64);
    uint64_t v41 = *(void *)(v0 + 72);
    uint64_t v42 = *(void *)(v0 + 56);
    if (v37)
    {
      os_log_t log = v35;
      uint64_t v43 = swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 141558787;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2081;
      sub_100047594(&qword_1003F2C08, (void (*)(uint64_t))&type metadata accessor for Device);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_type_t type = v36;
      *(void *)(v0 + 24) = sub_100037004(v44, v45, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v46(v38, v42);
      *(_WORD *)(v43 + 22) = 1026;
      int v47 = Device.isThisDevice.getter() & 1;
      v46(v39, v42);
      *(_DWORD *)(v0 + 184) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 28) = 1026;
      int v48 = Device.isActive.getter() & 1;
      v46(v41, v42);
      *(_DWORD *)(v0 + 188) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Me device: %{private,mask.hash}s\nisThisDevice? %{BOOL,public}d\nisActive? %{BOOL,public}d", (uint8_t *)v43, 0x22u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v49(*(void *)(v0 + 72), *(void *)(v0 + 56));
      v49(v39, v42);
      v49(v38, v42);
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v27();
}

uint64_t sub_10033E664()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10033E708(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10033E728, v1, 0);
}

uint64_t sub_10033E728()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "thisDeviceWithCompanion", v4, 2u);
    swift_slowDealloc();
  }

  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *unint64_t v5 = v0;
  v5[1] = sub_10033E874;
  return sub_100340BB8();
}

uint64_t sub_10033E874()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 40) = v6;
    *unint64_t v6 = v3;
    v6[1] = sub_10033E9E4;
    return daemon.getter();
  }
}

uint64_t sub_10033E9E4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 48) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10033EBC0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10033EBC0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[3];
    return _swift_task_switch(sub_1002403C4, v6, 0);
  }
  else
  {
    swift_release();
    v4[9] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[10] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_10033ED50;
    uint64_t v8 = v4[2];
    return sub_100105C90(v8);
  }
}

uint64_t sub_10033ED50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DD55C, v1, 0);
}

uint64_t sub_10033EE60(uint64_t a1, uint64_t a2)
{
  v3[97] = v2;
  v3[96] = a2;
  v3[95] = a1;
  uint64_t v4 = type metadata accessor for URLComponents();
  v3[98] = v4;
  v3[99] = *(void *)(v4 - 8);
  v3[100] = swift_task_alloc();
  v3[101] = type metadata accessor for SavePreferencesEndpoint();
  v3[102] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[103] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v3[104] = v5;
  v3[105] = *(void *)(v5 - 8);
  v3[106] = swift_task_alloc();
  v3[107] = swift_task_alloc();
  v3[108] = swift_task_alloc();
  return _swift_task_switch(sub_10033F000, v2, 0);
}

uint64_t sub_10033F000()
{
  uint64_t v11 = v0;
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[109] = sub_100044058(v1, (uint64_t)qword_10040C3F8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[96];
  if (v4)
  {
    uint64_t v6 = v0[95];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[94] = sub_100037004(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "setActiveLocationSharingDevice: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[110] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10033F22C;
  return sub_100340BB8();
}

uint64_t sub_10033F22C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 888) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10033F3E8;
    return daemon.getter();
  }
}

uint64_t sub_10033F3E8(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[112] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[113] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[114] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[115] = v6;
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10033F5C8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10033F5C8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[116] = a1;
  v3[117] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[97];
    return _swift_task_switch(sub_1003408F0, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[118] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10033F754;
    return sub_100005F58();
  }
}

uint64_t sub_10033F754(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 776);
  *(void *)(*(void *)v1 + 952) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10033F86C, v2, 0);
}

uint64_t sub_10033F86C()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    type metadata accessor for Device();
    swift_bridgeObjectRetain();
    uint64_t v4 = Array.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = sub_100037004(v4, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "All devices: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10033FA68;
  return daemon.getter();
}

uint64_t sub_10033FA68(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 968) = a1;
  swift_task_dealloc();
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 976) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_100047594(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *unint64_t v5 = v4;
  v5[1] = sub_10033FC1C;
  uint64_t v8 = *(void *)(v2 + 920);
  uint64_t v9 = *(void *)(v2 + 912);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10033FC1C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[123] = a1;
  v3[124] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[97];
    return _swift_task_switch(sub_1003409A8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[125] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10033FDAC;
    uint64_t v7 = v3[103];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_10033FDAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 776);
  swift_task_dealloc();
  return _swift_task_switch(sub_10033FEBC, v1, 0);
}

uint64_t sub_10033FEBC()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[103];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account to setActiveLocationSharingDevice!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v7 = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[108];
    uint64_t v11 = v0[107];
    uint64_t v23 = v0[102];
    uint64_t v24 = v0[106];
    uint64_t v12 = v0[100];
    uint64_t v13 = v0[99];
    uint64_t v22 = v0[98];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v10, v3, v2);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v21(v11, v10, v2);
    sub_10004C1DC(v11);
    uint64_t v14 = (void (*)(void *, void))URLComponents.path.modify();
    v15._uint64_t countAndFlagsBits = 0x657250657661732FLL;
    v15._object = (void *)0xEA00000000007366;
    String.append(_:)(v15);
    v14(v0 + 89, 0);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v0[126] = v16;
    v0[127] = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v11, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v23, v12, v22);
    v21(v24, v10, v2);
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003EE5E8 + dword_1003EE5E8);
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[128] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100340234;
    uint64_t v18 = v0[106];
    uint64_t v19 = v0[96];
    uint64_t v20 = v0[95];
    return v25(v18, v20, v19);
  }
}

uint64_t sub_100340234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[129] = a1;
  v6[130] = a2;
  v6[131] = a3;
  v6[132] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[97];
  if (v3) {
    uint64_t v8 = sub_1003406BC;
  }
  else {
    uint64_t v8 = sub_100340374;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100340374()
{
  unint64_t v1 = v0[131];
  uint64_t v2 = v0[130];
  uint64_t v3 = v0[129];
  uint64_t v4 = v0[102];
  v0[82] = v0[101];
  v0[83] = sub_100047594(&qword_1003F5420, (void (*)(uint64_t))type metadata accessor for SavePreferencesEndpoint);
  os_log_type_t v5 = sub_10003E0F4(v0 + 79);
  sub_100346F48(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v0[77] = &type metadata for SavePreferencesRequest;
  v0[78] = sub_1000C9E94();
  v0[74] = v3;
  v0[75] = v2;
  v0[76] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[133] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10034054C;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 79), (uint64_t)(v0 + 74), (uint64_t)(v0 + 84));
}

uint64_t sub_10034054C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1072) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 776);
    sub_10000A520(v3, &qword_1003ECD18);
    os_log_type_t v5 = sub_100340A6C;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = (void *)(v2 + 16);
    uint64_t v8 = v2 + 632;
    uint64_t v9 = v2 + 592;
    uint64_t v10 = *(void *)(v2 + 776);
    sub_1000367D8(v7);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v9);
    sub_1000233E4(v8);
    os_log_type_t v5 = sub_1003407BC;
    uint64_t v6 = v10;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1003406BC()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[126];
  uint64_t v2 = v0[108];
  uint64_t v3 = v0[104];
  uint64_t v4 = v0[102];
  swift_release();
  swift_release();
  sub_100346FB0(v4, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1003407BC()
{
  unint64_t v1 = v0[131];
  uint64_t v2 = v0[130];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[126];
  uint64_t v4 = v0[108];
  uint64_t v5 = v0[104];
  uint64_t v6 = v0[102];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1003408F0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003409A8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100340A6C()
{
  unint64_t v1 = v0[131];
  uint64_t v2 = v0[130];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[126];
  uint64_t v4 = v0[108];
  uint64_t v5 = v0[104];
  uint64_t v6 = v0[102];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 74));
  sub_1000233E4((uint64_t)(v0 + 79));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100340BB8()
{
  v1[7] = v0;
  v1[8] = type metadata accessor for DataManager.State(0);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v2 = (void *)swift_task_alloc();
  v1[11] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100340C8C;
  return daemon.getter();
}

uint64_t sub_100340C8C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[12] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[13] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[14] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[15] = v6;
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100340E6C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100340E6C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[16] = a1;
  v4[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = sub_100341958;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100340FA4;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100340FA4()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[16] + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess();
  sub_100346F48(v3, v1, type metadata accessor for DataManager.State);
  return _swift_task_switch(sub_10034105C, v2, 0);
}

uint64_t sub_10034105C()
{
  uint64_t v16 = v0;
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  swift_storeEnumTagMultiPayload();
  BOOL v3 = sub_10033D3B0(v1, v2);
  sub_100346FB0(v2, type metadata accessor for DataManager.State);
  sub_100346FB0(v1, type metadata accessor for DataManager.State);
  if (v3)
  {
    if (qword_1003EC4A0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C3F8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      v0[6] = sub_100037004(0xD000000000000019, 0x800000010037A420, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s DataManager is ready", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    if (qword_1003EC4A0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040C3F8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      v0[5] = sub_100037004(0xD000000000000019, 0x800000010037A420, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s DataManager is not ready. Retry initClient.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v12 = (void *)swift_task_alloc();
    v0[18] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100341444;
    return daemon.getter();
  }
}

uint64_t sub_100341444(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 152) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 160) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_100047594(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v5 = v4;
  v5[1] = sub_1003415F8;
  uint64_t v8 = *(void *)(v2 + 120);
  uint64_t v9 = *(void *)(v2 + 112);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_1003415F8(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[7];
    return _swift_task_switch(sub_1003419CC, v6, 0);
  }
  else
  {
    swift_release();
    v4[22] = a1;
    uint64_t v7 = (void *)swift_task_alloc();
    v4[23] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_100341784;
    return sub_10035130C();
  }
}

uint64_t sub_100341784()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100341894, v1, 0);
}

uint64_t sub_100341894()
{
  sub_1000715BC();
  swift_allocError();
  void *v1 = 11;
  swift_willThrow();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100341958()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003419CC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100341A4C(char a1)
{
  *(void *)(v2 + 744) = v1;
  *(unsigned char *)(v2 + 1028) = a1;
  uint64_t v3 = type metadata accessor for URLComponents();
  *(void *)(v2 + 752) = v3;
  *(void *)(v2 + 760) = *(void *)(v3 - 8);
  *(void *)(v2 + 768) = swift_task_alloc();
  *(void *)(v2 + 776) = type metadata accessor for SavePreferencesEndpoint();
  *(void *)(v2 + 784) = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  *(void *)(v2 + 792) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account();
  *(void *)(v2 + 800) = v4;
  *(void *)(v2 + 808) = *(void *)(v4 - 8);
  *(void *)(v2 + 816) = swift_task_alloc();
  *(void *)(v2 + 824) = swift_task_alloc();
  *(void *)(v2 + 832) = swift_task_alloc();
  return _swift_task_switch(sub_100341BE8, v1, 0);
}

uint64_t sub_100341BE8()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 840) = sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 1028);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 1024) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "hideMyLocation: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100341D78;
  return daemon.getter();
}

uint64_t sub_100341D78(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[107] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[108] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[109] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[110] = v6;
  uint64_t v7 = sub_100047594(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100341F58;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100341F58(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[111] = a1;
  v3[112] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[93];
    return _swift_task_switch(sub_100342F3C, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[113] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1003420E8;
    uint64_t v7 = v3[99];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1003420E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003421F8, v1, 0);
}

uint64_t sub_1003421F8()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 792);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account to hideMyLocation!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v7 = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 832);
    uint64_t v11 = *(void *)(v0 + 824);
    uint64_t v22 = *(void *)(v0 + 784);
    uint64_t v23 = *(void *)(v0 + 816);
    uint64_t v12 = *(void *)(v0 + 768);
    uint64_t v13 = *(void *)(v0 + 760);
    uint64_t v21 = *(void *)(v0 + 752);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v10, v3, v2);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v20(v11, v10, v2);
    sub_10004C1DC(v11);
    uint64_t v14 = (void (*)(uint64_t, void))URLComponents.path.modify();
    v15._object = (void *)0x800000010037A490;
    v15._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v15);
    v14(v0 + 712, 0);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    *(void *)(v0 + 912) = v16;
    *(void *)(v0 + 920) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v11, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v22, v12, v21);
    v20(v23, v10, v2);
    uint64_t v24 = (uint64_t (*)(uint64_t, char))((char *)&dword_1003EE628 + dword_1003EE628);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 928) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10034254C;
    uint64_t v18 = *(void *)(v0 + 816);
    char v19 = *(unsigned char *)(v0 + 1028);
    return v24(v18, v19);
  }
}

uint64_t sub_10034254C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = (void *)*v4;
  v5[117] = a1;
  v5[118] = a2;
  v5[119] = a3;
  v5[120] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[93];
    return _swift_task_switch(sub_1003429CC, v6, 0);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v5[121] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1003426C4;
    return daemon.getter();
  }
}

uint64_t sub_1003426C4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 976) = a1;
  swift_task_dealloc();
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 984) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v5 = v4;
  v5[1] = sub_100342878;
  uint64_t v8 = *(void *)(v2 + 880);
  uint64_t v9 = *(void *)(v2 + 872);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100342878(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 992) = a1;
  *(void *)(v4 + 1000) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 744);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_100342FF4;
  }
  else {
    uint64_t v6 = sub_100342AC0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003429CC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[114];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[100];
  uint64_t v4 = v0[98];
  swift_release();
  sub_100346FB0(v4, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100342AC0()
{
  unint64_t v1 = v0[119];
  uint64_t v2 = v0[118];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[98];
  v0[77] = v0[97];
  v0[78] = sub_100047594(&qword_1003F5420, (void (*)(uint64_t))type metadata accessor for SavePreferencesEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 74);
  sub_100346F48(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v0[82] = (uint64_t)&type metadata for SavePreferencesRequest;
  v0[83] = sub_1000C9E94();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = (uint64_t)&protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[126] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100342C98;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_100342C98()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 744);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_100343110;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = (void *)(v2 + 16);
    uint64_t v8 = v2 + 632;
    uint64_t v9 = v2 + 592;
    uint64_t v10 = *(void *)(v2 + 744);
    sub_1000367D8(v7);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v8);
    sub_1000233E4(v9);
    uint64_t v5 = sub_100342E08;
    uint64_t v6 = v10;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100342E08()
{
  unint64_t v1 = v0[119];
  uint64_t v2 = v0[118];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[114];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[100];
  uint64_t v6 = v0[98];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100342F3C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100342FF4()
{
  unint64_t v1 = v0[119];
  uint64_t v2 = v0[118];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[114];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[100];
  uint64_t v6 = v0[98];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100343110()
{
  unint64_t v1 = v0[119];
  uint64_t v2 = v0[118];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[114];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[100];
  uint64_t v6 = v0[98];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 74));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10034325C(char a1)
{
  *(void *)(v2 + 744) = v1;
  *(unsigned char *)(v2 + 1028) = a1;
  uint64_t v3 = type metadata accessor for URLComponents();
  *(void *)(v2 + 752) = v3;
  *(void *)(v2 + 760) = *(void *)(v3 - 8);
  *(void *)(v2 + 768) = swift_task_alloc();
  *(void *)(v2 + 776) = type metadata accessor for SavePreferencesEndpoint();
  *(void *)(v2 + 784) = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  *(void *)(v2 + 792) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account();
  *(void *)(v2 + 800) = v4;
  *(void *)(v2 + 808) = *(void *)(v4 - 8);
  *(void *)(v2 + 816) = swift_task_alloc();
  *(void *)(v2 + 824) = swift_task_alloc();
  *(void *)(v2 + 832) = swift_task_alloc();
  return _swift_task_switch(sub_1003433F8, v1, 0);
}

uint64_t sub_1003433F8()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 840) = sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 1028);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 1024) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "allowFriendshipRequests: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 848) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100343588;
  return daemon.getter();
}

uint64_t sub_100343588(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[107] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[108] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[109] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[110] = v6;
  uint64_t v7 = sub_100047594(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100343768;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100343768(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[111] = a1;
  v3[112] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[93];
    return _swift_task_switch(sub_100342F3C, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[113] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1003438F8;
    uint64_t v7 = v3[99];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1003438F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_100343A08, v1, 0);
}

uint64_t sub_100343A08()
{
  uint64_t v1 = v0[101];
  uint64_t v2 = v0[100];
  uint64_t v3 = v0[99];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account to hideMyLocation!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v7 = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[104], v3, v2);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[114] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100343C3C;
    return daemon.getter();
  }
}

uint64_t sub_100343C3C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 920) = a1;
  swift_task_dealloc();
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 928) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v5 = v4;
  v5[1] = sub_100343DF0;
  uint64_t v8 = *(void *)(v2 + 880);
  uint64_t v9 = *(void *)(v2 + 872);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100343DF0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 936) = a1;
  *(void *)(v4 + 944) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 744);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_1003447C4;
  }
  else {
    uint64_t v6 = sub_100343F44;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100343F44()
{
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 808);
  uint64_t v3 = *(void *)(v0 + 800);
  uint64_t v16 = *(void *)(v0 + 784);
  uint64_t v17 = *(void *)(v0 + 816);
  uint64_t v4 = *(void *)(v0 + 768);
  uint64_t v5 = *(void *)(v0 + 760);
  uint64_t v14 = *(void *)(v0 + 832);
  uint64_t v15 = *(void *)(v0 + 752);
  uint64_t v13 = *(void (**)(uint64_t))(v2 + 16);
  v13(v1);
  sub_10004C1DC(v1);
  uint64_t v6 = (void (*)(uint64_t, void))URLComponents.path.modify();
  v7._object = (void *)0x800000010037A470;
  v7._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v7);
  v6(v0 + 712, 0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 952) = v8;
  *(void *)(v0 + 960) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v16, v4, v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v13)(v17, v14, v3);
  uint64_t v18 = (uint64_t (*)(uint64_t, char))((char *)&dword_1003EE5F8 + dword_1003EE5F8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 968) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100344108;
  uint64_t v10 = *(void *)(v0 + 816);
  char v11 = *(unsigned char *)(v0 + 1028);
  return v18(v10, v11);
}

uint64_t sub_100344108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[122] = a1;
  v6[123] = a2;
  v6[124] = a3;
  v6[125] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[93];
  if (v3) {
    uint64_t v8 = sub_100344590;
  }
  else {
    uint64_t v8 = sub_100344248;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100344248()
{
  unint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v3 = v0[122];
  uint64_t v4 = v0[98];
  v0[77] = v0[97];
  v0[78] = sub_100047594(&qword_1003F5420, (void (*)(uint64_t))type metadata accessor for SavePreferencesEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 74);
  sub_100346F48(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v0[82] = (uint64_t)&type metadata for SavePreferencesRequest;
  v0[83] = sub_1000C9E94();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = (uint64_t)&protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[126] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100344420;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_100344420()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1016) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 744);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_1003448A0;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = (void *)(v2 + 16);
    uint64_t v8 = v2 + 632;
    uint64_t v9 = v2 + 592;
    uint64_t v10 = *(void *)(v2 + 744);
    sub_1000367D8(v7);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v8);
    sub_1000233E4(v9);
    uint64_t v5 = sub_100344690;
    uint64_t v6 = v10;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100344590()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[119];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[100];
  uint64_t v4 = v0[98];
  swift_release();
  swift_release();
  sub_100346FB0(v4, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100344690()
{
  unint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[119];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[100];
  uint64_t v6 = v0[98];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1003447C4()
{
  uint64_t v1 = v0[104];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[100];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1003448A0()
{
  unint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[119];
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[100];
  uint64_t v6 = v0[98];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100346FB0(v6, (uint64_t (*)(void))type metadata accessor for SavePreferencesEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 74));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1003449EC(char a1)
{
  *(void *)(v2 + 1472) = v1;
  *(unsigned char *)(v2 + 1540) = a1;
  return _swift_task_switch(sub_100344A10, v1, 0);
}

uint64_t sub_100344A10()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 1540);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 1536) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "isMyLocationEnabled cached: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 1480) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100344B9C;
  return sub_100340BB8();
}

uint64_t sub_100344B9C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4(0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 1488) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100344D10;
    return daemon.getter();
  }
}

uint64_t sub_100344D10(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1496) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1504) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100344EEC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100344EEC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[189] = a1;
  v3[190] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[184];
    return _swift_task_switch(sub_100345368, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[191] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100345080;
    return sub_10000E400((uint64_t)(v3 + 56));
  }
}

uint64_t sub_100345080()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1512);
  swift_task_dealloc();
  return _swift_task_switch(sub_100345190, v1, 0);
}

uint64_t sub_100345190()
{
  sub_100013B50(v0 + 448, v0 + 880, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 880) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_100013B50(v0 + 416, v0 + 1376, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 1376)),
        sub_10000E224(v0 + 448),
        sub_100013B50(v0 + 1376, v0 + 1344, &qword_1003EE258),
        !*(void *)(v0 + 1352)))
  {
    BOOL v4 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 1344);
    long long v2 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = v1;
    *(_OWORD *)(v0 + 1328) = v2;
    *(_OWORD *)(v0 + 1424) = v1;
    *(_OWORD *)(v0 + 1440) = v1;
    *(void *)(v0 + 1456) = 28494;
    *(void *)(v0 + 1464) = 0xE200000000000000;
    sub_10004650C();
    uint64_t v3 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    sub_10001FA28(v0 + 1424);
    BOOL v4 = v3 == 0;
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1328);
    sub_10001FA28(v0 + 1408);
  }
  *(unsigned char *)(v0 + 1541) = v4;
  uint64_t v5 = *(void *)(v0 + 1472);
  return _swift_task_switch(sub_100345300, v5, 0);
}

uint64_t sub_100345300()
{
  swift_release();
  long long v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 1541);
  return v1(v2);
}

uint64_t sub_100345368()
{
  swift_release();
  long long v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1003453D0(char a1)
{
  *(void *)(v2 + 1472) = v1;
  *(unsigned char *)(v2 + 1540) = a1;
  return _swift_task_switch(sub_1003453F4, v1, 0);
}

uint64_t sub_1003453F4()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 1540);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 1536) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "areFriendshipRequestsAllowed cached: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 1480) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100345580;
  return sub_100340BB8();
}

uint64_t sub_100345580()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4(0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 1488) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1003456F4;
    return daemon.getter();
  }
}

uint64_t sub_1003456F4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1496) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1504) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1003458D0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1003458D0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[189] = a1;
  v3[190] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[184];
    return _swift_task_switch(sub_100347018, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[191] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100345A64;
    return sub_10000E400((uint64_t)(v3 + 56));
  }
}

uint64_t sub_100345A64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1512);
  swift_task_dealloc();
  return _swift_task_switch(sub_100345B74, v1, 0);
}

uint64_t sub_100345B74()
{
  sub_100013B50(v0 + 448, v0 + 880, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 880) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 880), 0x1B0uLL),
        sub_100013B50(v0 + 416, v0 + 1376, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 1376)),
        sub_10000E224(v0 + 448),
        sub_100013B50(v0 + 1376, v0 + 1344, &qword_1003EE258),
        !*(void *)(v0 + 1352)))
  {
    BOOL v3 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 1360);
    *(_OWORD *)(v0 + 1312) = *(_OWORD *)(v0 + 1344);
    *(_OWORD *)(v0 + 1328) = v1;
    long long v2 = *(_OWORD *)(v0 + 1328);
    *(_OWORD *)(v0 + 1424) = v2;
    *(_OWORD *)(v0 + 1440) = v2;
    *(void *)(v0 + 1456) = 7562585;
    *(void *)(v0 + 1464) = 0xE300000000000000;
    sub_10004650C();
    BOOL v3 = StringProtocol.caseInsensitiveCompare<A>(_:)() == 0;
    *(_OWORD *)(v0 + 1408) = *(_OWORD *)(v0 + 1312);
    sub_10001FA28(v0 + 1408);
    sub_10001FA28(v0 + 1424);
  }
  *(unsigned char *)(v0 + 1541) = v3;
  uint64_t v4 = *(void *)(v0 + 1472);
  return _swift_task_switch(sub_100347014, v4, 0);
}

uint64_t sub_100345CF0()
{
  return _swift_task_switch(sub_100345D0C, v0, 0);
}

uint64_t sub_100345D0C()
{
  uint64_t v8 = v0;
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C3F8);
  long long v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 16) = sub_100037004(0xD00000000000002BLL, 0x800000010037A440, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s: Keep SettingsConnection active", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100345EC0(char a1)
{
  *(void *)(v2 + 32) = v1;
  *(unsigned char *)(v2 + 116) = a1;
  return _swift_task_switch(sub_100345EE4, v1, 0);
}

uint64_t sub_100345EE4()
{
  if (qword_1003EC4A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 40) = sub_100044058(v1, (uint64_t)qword_10040C3F8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 116);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 112) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "allDevices cached: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100346074;
  return sub_100340BB8();
}

uint64_t sub_100346074()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 56) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1003461E4;
    return daemon.getter();
  }
}

uint64_t sub_1003461E4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047594(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047594(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1003463C0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1003463C0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[4];
    return _swift_task_switch(sub_100174D60, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[12] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100346548;
    return sub_100005F58();
  }
}

uint64_t sub_100346548(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100346660, v2, 0);
}

uint64_t sub_100346660()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v0[2] = 1752392040;
    uint64_t v11 = v4;
    *(_DWORD *)uint64_t v3 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2081;
    type metadata accessor for Device();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = sub_100037004(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "All devices: %{private,mask.hash}s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v9 = v0[13];
  return v8(v9);
}

uint64_t sub_10034686C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10033EE60(a1, a2);
}

uint64_t sub_100346910(char a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100018CD0;
  return sub_100341A4C(a1);
}

uint64_t sub_1003469A4(char a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_10034325C(a1);
}

uint64_t sub_100346A38(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10033D6AC(a1, a2);
}

uint64_t sub_100346AE0(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  void v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_10004A274;
  return _swift_task_switch(sub_10033E728, v1, 0);
}

uint64_t sub_100346B8C(char a1)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100346C3C;
  *(void *)(v4 + 1472) = v1;
  *(unsigned char *)(v4 + 1540) = a1;
  return _swift_task_switch(sub_100344A10, v1, 0);
}

uint64_t sub_100346C3C(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_100346D44(char a1)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100347010;
  *(void *)(v4 + 1472) = v1;
  *(unsigned char *)(v4 + 1540) = a1;
  return _swift_task_switch(sub_1003453F4, v1, 0);
}

uint64_t sub_100346DF4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10004A274;
  return _swift_task_switch(sub_100345D0C, v0, 0);
}

uint64_t sub_100346E98(char a1)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_1000CF3B8;
  *(void *)(v4 + 32) = v1;
  *(unsigned char *)(v4 + 116) = a1;
  return _swift_task_switch(sub_100345EE4, v1, 0);
}

uint64_t sub_100346F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100346FB0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10034701C()
{
  return swift_initClassMetadata2();
}

void sub_100347068(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

uint64_t sub_100347100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Transaction();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1003471D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = swift_isaMask & *a1;
  uint64_t v7 = type metadata accessor for ClientSessionError.Category();
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ClientSessionError();
  v5[12] = v8;
  v5[13] = *(void *)(v8 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100347330, a1, 0);
}

uint64_t sub_100347330()
{
  *(void *)(v0 + 120) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_1003473A0, 0, 0);
}

uint64_t sub_1003473A0()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1003474B4;
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 40);
    return dispatch thunk of SettingsProtocol.setActiveLocationSharingDevice(_:)(v6, v5, v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 48))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1003474B4()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10034764C;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_1003475D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003475D0()
{
  (*(void (**)(void))(v0 + 48))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034764C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1003476B8, v1, 0);
}

uint64_t sub_1003476B8()
{
  v0[2] = v0[17];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_errorRetain();
    uint64_t v1 = v0[17];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[10] + 104))(v0[11], enum case for ClientSessionError.Category.settingsService(_:), v0[9]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[18] = v1;
  return _swift_task_switch(sub_100347810, 0, 0);
}

uint64_t sub_100347810()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void (*)(uint64_t))v0[6];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1003478B8(int a1, int a2, int a3, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  swift_retain();
  sub_100347100(v5, v7, (uint64_t)sub_10004B288, v8);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100347974(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_1003479A0(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 48) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 80) = v7;
  *(void *)(v4 + 88) = *(void *)(v7 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100347B00, a1, 0);
}

uint64_t sub_100347B00()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_100347B70, 0, 0);
}

uint64_t sub_100347B70()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100347C84;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 136);
    return dispatch thunk of SettingsProtocol.hideMyLocation(hidden:)(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100347C84()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100347DA0;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_10000A330;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100347DA0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100347E0C, v1, 0);
}

uint64_t sub_100347E0C()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.settingsService(_:), v0[7]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_1001F3908, 0, 0);
}

uint64_t sub_100347F64(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E5918, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t, uint64_t))sub_100347974);
}

uint64_t sub_100347F98(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_100347FC4(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 48) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 80) = v7;
  *(void *)(v4 + 88) = *(void *)(v7 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100348124, a1, 0);
}

uint64_t sub_100348124()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_100348194, 0, 0);
}

uint64_t sub_100348194()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1003482A8;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 136);
    return dispatch thunk of SettingsProtocol.allowFriendshipRequests(allowed:)(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_1003482A8()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1003483C4;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_10004CE00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003483C4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100348430, v1, 0);
}

uint64_t sub_100348430()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.settingsService(_:), v0[7]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_1001F5C8C, 0, 0);
}

uint64_t sub_100348588(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E58F0, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t, uint64_t))sub_100347F98);
}

uint64_t sub_1003485BC(int a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  swift_retain();
  a7(a3, a6, v11);
  swift_release();

  return swift_release();
}

uint64_t sub_10034865C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_100348688(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 160) = a2;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 48) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 80) = v7;
  *(void *)(v4 + 88) = *(void *)(v7 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  *(void *)(v4 + 104) = sub_100044014(&qword_1003EFCD0);
  *(void *)(v4 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_10034881C, a1, 0);
}

uint64_t sub_10034881C()
{
  *(void *)(v0 + 120) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10034888C, 0, 0);
}

uint64_t sub_10034888C()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100348B20;
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = *(unsigned __int8 *)(v0 + 160);
    return dispatch thunk of SettingsProtocol.activeLocationSharingDevice(cached:)(v5, v6, v2, v3);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = type metadata accessor for Device();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_10034B64C((unint64_t *)&qword_1003F50E0, &qword_1003EFCD0);
    uint64_t v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = v9;
    unint64_t v13 = v12;
    uint64_t v14 = *(void (**)(uint64_t, unint64_t, void))(v0 + 32);
    swift_release();
    sub_100022C64(v11, v13);
    v14(v11, v13, 0);
    sub_100044090(v11, v13);
    sub_100044090(v11, v13);
    sub_10000A520(v10, &qword_1003EFCD0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100348B20()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10034904C;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_100348C3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100348C3C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = type metadata accessor for Device();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = v0[17];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10034B64C((unint64_t *)&qword_1003F50E0, &qword_1003EFCD0);
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v6 = v0[14];
  if (v3)
  {
    sub_10000A520(v0[14], &qword_1003EFCD0);
    swift_release();
    v0[18] = v3;
    uint64_t v7 = v0[3];
    return _swift_task_switch(sub_100348E38, v7, 0);
  }
  else
  {
    uint64_t v8 = v4;
    unint64_t v9 = v5;
    uint64_t v10 = (void (*)(uint64_t, unint64_t, void))v0[4];
    swift_release();
    sub_100022C64(v8, v9);
    v10(v8, v9, 0);
    sub_100044090(v8, v9);
    sub_100044090(v8, v9);
    sub_10000A520(v6, &qword_1003EFCD0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100348E38()
{
  v0[2] = v0[18];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[18];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.settingsService(_:), v0[7]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[19] = v1;
  return _swift_task_switch(sub_100348F90, 0, 0);
}

uint64_t sub_100348F90()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[4];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10034904C()
{
  swift_unknownObjectRelease();
  v0[18] = v0[17];
  uint64_t v1 = v0[3];
  return _swift_task_switch(sub_100348E38, v1, 0);
}

uint64_t sub_1003490BC(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E58C8, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, uint64_t, uint64_t))sub_10034865C);
}

uint64_t sub_1003490F0(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_10034911C(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = sub_100044014(&qword_1003F5550);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_1003492AC, a1, 0);
}

uint64_t sub_1003492AC()
{
  *(void *)(v0 + 120) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10034931C, 0, 0);
}

uint64_t sub_10034931C()
{
  if (v0[15])
  {
    uint64_t v1 = v0[6];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100349588;
    uint64_t v5 = v0[14];
    return dispatch thunk of SettingsProtocol.thisDeviceWithCompanion()(v5, v2, v3);
  }
  else
  {
    uint64_t v6 = v0[14];
    uint64_t v7 = type metadata accessor for DeviceWithCompanion();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_10034B9A0();
    uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    uint64_t v9 = v0[14];
    uint64_t v10 = v8;
    unint64_t v12 = v11;
    uint64_t v13 = (void (*)(uint64_t, unint64_t, void))v0[4];
    swift_release();
    sub_100022C64(v10, v12);
    v13(v10, v12, 0);
    sub_100044090(v10, v12);
    sub_100044090(v10, v12);
    sub_10000A520(v9, &qword_1003F5550);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100349588()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10034904C;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_1003496A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003496A4()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = type metadata accessor for DeviceWithCompanion();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = v0[17];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10034B9A0();
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v6 = v0[14];
  if (v3)
  {
    sub_10000A520(v0[14], &qword_1003F5550);
    swift_release();
    v0[18] = v3;
    uint64_t v7 = v0[3];
    return _swift_task_switch(sub_100348E38, v7, 0);
  }
  else
  {
    uint64_t v8 = v4;
    unint64_t v9 = v5;
    uint64_t v10 = (void (*)(uint64_t, unint64_t, void))v0[4];
    swift_release();
    sub_100022C64(v8, v9);
    v10(v8, v9, 0);
    sub_100044090(v8, v9);
    sub_100044090(v8, v9);
    sub_10000A520(v6, &qword_1003F5550);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10034987C(int a1, int a2, void *a3)
{
  return sub_10034AA04(a1, a2, a3, (uint64_t)&unk_1003E58A0, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, uint64_t))sub_1003490F0);
}

uint64_t sub_1003498B0(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_1003498DC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 48) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 80) = v7;
  *(void *)(v4 + 88) = *(void *)(v7 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100349A3C, a1, 0);
}

uint64_t sub_100349A3C()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_100349AAC, 0, 0);
}

uint64_t sub_100349AAC()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100349BC4;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 136);
    return dispatch thunk of SettingsProtocol.isMyLocationEnabled(cached:)(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 32))(0, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100349BC4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100349D78;
  }
  else
  {
    swift_unknownObjectRelease();
    *(unsigned char *)(v4 + 137) = a1 & 1;
    uint64_t v5 = sub_100349CF8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100349CF8()
{
  (*(void (**)(void, void))(v0 + 32))(*(unsigned __int8 *)(v0 + 137), 0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100349D78()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_100349DE4, v1, 0);
}

uint64_t sub_100349DE4()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.settingsService(_:), v0[7]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_100349F3C, 0, 0);
}

uint64_t sub_100349F3C()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void (*)(void, uint64_t))v0[4];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100349FE8(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E5878, (uint64_t)sub_10034BDEC, (void (*)(uint64_t, uint64_t, uint64_t))sub_1003498B0);
}

void sub_10034A01C(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

uint64_t sub_10034A08C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_10034A0B8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = a4;
  *(unsigned char *)(v4 + 136) = a2;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 48) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 80) = v7;
  *(void *)(v4 + 88) = *(void *)(v7 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_10034A218, a1, 0);
}

uint64_t sub_10034A218()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10034A288, 0, 0);
}

uint64_t sub_10034A288()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10034A3A0;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 136);
    return dispatch thunk of SettingsProtocol.areFriendshipRequestsAllowed(cached:)(v5, v2, v3);
  }
  else
  {
    (*(void (**)(void, void))(v0 + 32))(0, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10034A3A0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10034A4D4;
  }
  else
  {
    swift_unknownObjectRelease();
    *(unsigned char *)(v4 + 137) = a1 & 1;
    uint64_t v5 = sub_10034BE14;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10034A4D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_10034A540, v1, 0);
}

uint64_t sub_10034A540()
{
  v0[2] = v0[15];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_errorRetain();
    uint64_t v1 = v0[15];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], enum case for ClientSessionError.Category.settingsService(_:), v0[7]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[16] = v1;
  return _swift_task_switch(sub_10034BDF0, 0, 0);
}

uint64_t sub_10034A698(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E5850, (uint64_t)sub_10034BDE4, (void (*)(uint64_t, uint64_t, uint64_t))sub_10034A08C);
}

uint64_t sub_10034A6CC(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t sub_10034A6F8(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10034A854, a1, 0);
}

uint64_t sub_10034A854()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10034A8C4, 0, 0);
}

uint64_t sub_10034A8C4()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100347C84;
    return dispatch thunk of SettingsProtocol.startMonitoringPreferencesChangeForClient()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10034A9D0(int a1, int a2, void *a3)
{
  return sub_10034AA04(a1, a2, a3, (uint64_t)&unk_1003E5828, (uint64_t)sub_10004B28C, (void (*)(uint64_t, uint64_t))sub_10034A6CC);
}

uint64_t sub_10034AA04(int a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  swift_retain();
  a6(a5, v9);
  swift_release();

  return swift_release();
}

uint64_t sub_10034AA9C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10034AAC8(a1, a2, a3);
}

uint64_t sub_10034AAC8(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Transaction();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_10034AB8C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = a4;
  *(unsigned char *)(v4 + 160) = a2;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 56) = swift_isaMask & *a1;
  uint64_t v6 = type metadata accessor for ClientSessionError.Category();
  *(void *)(v4 + 64) = v6;
  *(void *)(v4 + 72) = *(void *)(v6 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientSessionError();
  *(void *)(v4 + 88) = v7;
  *(void *)(v4 + 96) = *(void *)(v7 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_10034ACEC, a1, 0);
}

uint64_t sub_10034ACEC()
{
  *(void *)(v0 + 112) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10034AD5C, 0, 0);
}

uint64_t sub_10034AD5C()
{
  if (*(void *)(v0 + 112))
  {
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10034AF6C;
    uint64_t v5 = *(unsigned __int8 *)(v0 + 160);
    return dispatch thunk of SettingsProtocol.allDevices(cached:)(v5, v2, v3);
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    *(void *)(v0 + 24) = 0;
    sub_100044014(&qword_1003F54F8);
    sub_10034B5B4();
    uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v8 = v7;
    uint64_t v9 = *(void (**)(uint64_t, unint64_t, void))(v0 + 40);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100022C64(v6, v8);
    v9(v6, v8, 0);
    sub_100044090(v6, v8);
    sub_100044090(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_10034AF6C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10034B42C;
  }
  else
  {
    swift_unknownObjectRelease();
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = sub_10034B09C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10034B09C()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[3] = v1;
  sub_100044014(&qword_1003F54F8);
  sub_10034B5B4();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v0[18] = v2;
    uint64_t v5 = v0[4];
    return _swift_task_switch(sub_10034B224, v5, 0);
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    unint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[5];
    swift_bridgeObjectRelease();
    swift_release();
    sub_100022C64(v6, v7);
    v8(v6, v7, 0);
    sub_100044090(v6, v7);
    sub_100044090(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10034B224()
{
  v0[2] = v0[18];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_errorRetain();
    uint64_t v1 = v0[18];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for ClientSessionError.Category.settingsService(_:), v0[8]);
    sub_10034BA44(&qword_1003F1648, (void (*)(uint64_t))&type metadata accessor for ClientSessionError);
    uint64_t v1 = swift_allocError();
    ClientSessionError.init(type:)();
  }
  v0[19] = v1;
  return _swift_task_switch(sub_10034B37C, 0, 0);
}

uint64_t sub_10034B37C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[5];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10034B42C()
{
  swift_unknownObjectRelease();
  v0[18] = v0[16];
  uint64_t v1 = v0[4];
  return _swift_task_switch(sub_10034B224, v1, 0);
}

uint64_t sub_10034B49C(int a1, int a2, uint64_t a3, void *a4)
{
  return sub_1003485BC(a1, a2, a3, a4, (uint64_t)&unk_1003E5800, (uint64_t)sub_100171AE0, (void (*)(uint64_t, uint64_t, uint64_t))sub_10034AA9C);
}

void sub_10034B4D0()
{
}

uint64_t _s10TrampolineCMa_2()
{
  return sub_1001F5C54();
}

uint64_t sub_10034B504()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100018CD0;
  return sub_10034AB8C(v2, v3, v5, v4);
}

unint64_t sub_10034B5B4()
{
  unint64_t result = qword_1003F5500;
  if (!qword_1003F5500)
  {
    sub_10004AE58(&qword_1003F54F8);
    sub_10034B64C(&qword_1003F5508, &qword_1003F27B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F5500);
  }
  return result;
}

uint64_t sub_10034B64C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(a2);
    sub_10034BA44(&qword_1003F50E8, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10034B6E4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_10034A6F8(v2, v3, v4);
}

uint64_t sub_10034B790()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_10034A0B8(v2, v3, v5, v4);
}

uint64_t sub_10034B844()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_1003498DC(v2, v3, v5, v4);
}

uint64_t sub_10034B8F8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10004A274;
  return sub_10034911C(v2, v3, v4);
}

unint64_t sub_10034B9A0()
{
  unint64_t result = qword_1003F5558;
  if (!qword_1003F5558)
  {
    sub_10004AE58(&qword_1003F5550);
    sub_10034BA44(&qword_1003F5560, (void (*)(uint64_t))&type metadata accessor for DeviceWithCompanion);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F5558);
  }
  return result;
}

uint64_t sub_10034BA44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10034BA90()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_100348688(v2, v3, v5, v4);
}

uint64_t sub_10034BB44()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_100347FC4(v2, v3, v5, v4);
}

uint64_t sub_10034BBF8()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_1003479A0(v2, v3, v5, v4);
}

uint64_t sub_10034BCA8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10034BCF0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_1003471D0(v2, v3, v4, v5, v6);
}

uint64_t sub_10034BDAC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10034BDE4(char a1, uint64_t a2)
{
  sub_10034A01C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10034BE18()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C440);
  sub_100044058(v0, (uint64_t)qword_10040C440);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10034BE9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C458);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C458);
  if (qword_1003EC4B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C440);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10034BF64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Account();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccountService.State(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C9244(v1, (uint64_t)v8, type metadata accessor for AccountService.State);
  uint64_t v9 = sub_100044014(&qword_1003EFE18);
  uint64_t v10 = 0x6E776F6E6B6E752ELL;
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 3, v9))
  {
    case 1u:
      return v10;
    case 2u:
      uint64_t v10 = 0x6C696176616E752ELL;
      break;
    case 3u:
      uint64_t v10 = 0x756F6363416F6E2ELL;
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      v11._object = (void *)0x8000000100375C60;
      v11._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v11);
      _print_unlocked<A, B>(_:_:)();
      v12._uint64_t countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      uint64_t v10 = v14[0];
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      break;
  }
  return v10;
}

unint64_t sub_10034C1EC(unint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 2uLL:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 3uLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 4uLL:
    case 7uLL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5uLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 6uLL:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      strcpy((char *)v6, ".underlying(");
      BYTE5(v6[1]) = 0;
      HIWORD(v6[1]) = -5120;
      sub_100358B68(a1);
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      sub_100358B78(a1);
      unint64_t result = v6[0];
      break;
  }
  return result;
}

unint64_t sub_10034C3A4()
{
  return sub_10034C1EC(*v0);
}

uint64_t sub_10034C3AC()
{
  uint64_t v2 = v0;
  type metadata accessor for UUID();
  swift_task_alloc();
  swift_defaultActor_initialize();
  strcpy((char *)(v0 + 112), "AccountService");
  *(unsigned char *)(v0 + 127) = -18;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v0 + 128) = WorkItemQueue.__allocating_init(identifier:)();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  uint64_t v4 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 3, v4);
  uint64_t v5 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  uint64_t v6 = type metadata accessor for Account();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations) = _swiftEmptyDictionarySingleton;
  uint64_t v7 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  uint64_t v8 = sub_100044014(&qword_1003F3D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 0;
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_100358A98(v9, v1, v2);
}

uint64_t sub_10034C5D4()
{
  v1[205] = v0;
  sub_100044014(&qword_1003F3F70);
  v1[211] = swift_task_alloc();
  v1[217] = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  v1[218] = swift_task_alloc();
  uint64_t v2 = sub_100044014(&qword_1003F0440);
  v1[219] = v2;
  v1[220] = *(void *)(v2 - 8);
  v1[221] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v1[222] = swift_task_alloc();
  v1[223] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Account();
  v1[224] = v3;
  v1[225] = *(void *)(v3 - 8);
  v1[226] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[227] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10034C7D0;
  return daemon.getter();
}

uint64_t sub_10034C7D0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[228] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[229] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[230] = v4;
  uint64_t UnlockService = type metadata accessor for FirstUnlockService();
  uint64_t v6 = sub_100355070(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[231] = v6;
  uint64_t v7 = sub_100355070(&qword_1003EF448, (void (*)(uint64_t))&type metadata accessor for FirstUnlockService);
  *uint64_t v3 = v9;
  v3[1] = sub_10034C9B0;
  return ActorServiceDaemon.getService<A>()(v4, UnlockService, v6, v7);
}

uint64_t sub_10034C9B0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[232] = a1;
  v3[233] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[205];
    return _swift_task_switch(sub_10034DB7C, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock()
                           + async function pointer to dispatch thunk of FirstUnlockService.waitForFirstUnlock());
    uint64_t v6 = (void *)swift_task_alloc();
    v3[234] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10034CB58;
    return v8();
  }
}

uint64_t sub_10034CB58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1640);
  swift_task_dealloc();
  return _swift_task_switch(sub_10034CC68, v1, 0);
}

uint64_t sub_10034CC68()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[235] = sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AccountService run", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[236] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10034CDC0;
  uint64_t v6 = v0[226];
  return sub_100352990(v6);
}

uint64_t sub_10034CDC0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1896) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1640);
  if (v0) {
    uint64_t v4 = sub_10034DC48;
  }
  else {
    uint64_t v4 = sub_10034CEEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10034CEEC()
{
  uint64_t v1 = v0[225];
  uint64_t v2 = v0[224];
  uint64_t v3 = v0[223];
  uint64_t v4 = v0[222];
  uint64_t v5 = v0[205];
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v30(v3, v0[226], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  sub_100013B50(v3, v4, &qword_1003ECCF0);
  uint64_t v6 = v5 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess();
  sub_10028314C(v4, v6, &qword_1003ECCF0);
  swift_endAccess();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully updated account info", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[205];

  uint64_t v11 = v10 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations;
  swift_beginAccess();
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  if (v12)
  {
    uint64_t v29 = v11;
    uint64_t v13 = v0[220];
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    uint64_t v14 = v13 + 16;
    uint64_t v15 = v16;
    unint64_t v17 = *(void *)v11 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v18 = *(void *)(v14 + 56);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v19 = v0[221];
      uint64_t v20 = v0[219];
      v15(v19, v17, v20);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(uint64_t, uint64_t))(v14 - 8))(v19, v20);
      v17 += v18;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v11 = v29;
  }
  uint64_t v21 = v0[226];
  uint64_t v22 = v0[224];
  uint64_t v23 = v0[218];
  uint64_t v24 = v0[205];
  *(void *)uint64_t v11 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v24 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 1;
  v30(v23, v21, v22);
  uint64_t v25 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 0, 3, v25);
  uint64_t v26 = (void *)swift_task_alloc();
  v0[238] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_10034D218;
  uint64_t v27 = v0[218];
  return sub_10034E278(v27, 0);
}

uint64_t sub_10034D218()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1744);
  uint64_t v2 = *(void *)(*(void *)v0 + 1640);
  swift_task_dealloc();
  sub_100358064(v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_10034D358, v2, 0);
}

uint64_t sub_10034D358()
{
  (*(void (**)(void, void))(v0[225] + 8))(v0[226], v0[224]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[239] = v1;
  void *v1 = v0;
  v1[1] = sub_10034D404;
  return daemon.getter();
}

uint64_t sub_10034D404(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1920) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1928) = v5;
  uint64_t v6 = type metadata accessor for CloudStorageService();
  uint64_t v7 = sub_100355070(&qword_1003EF450, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
  *uint64_t v5 = v4;
  v5[1] = sub_10034D5B8;
  uint64_t v8 = *(void *)(v2 + 1848);
  uint64_t v9 = *(void *)(v2 + 1840);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10034D5B8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[242] = a1;
  v4[243] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[205];
    uint64_t v6 = sub_10034DF28;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_10034D6F4;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10034D6F4()
{
  *(void *)(v0 + 1952) = *(void *)(*(void *)(v0 + 1936) + 136);
  type metadata accessor for CloudKitStorage();
  sub_100355070(&qword_1003F3F80, (void (*)(uint64_t))&type metadata accessor for CloudKitStorage);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10034D7B4, v2, v1);
}

uint64_t sub_10034D7B4()
{
  uint64_t v1 = *(void *)(v0 + 1640);
  dispatch thunk of CloudKitStorage.stateStream()();
  return _swift_task_switch(sub_10034D824, v1, 0);
}

uint64_t sub_10034D824()
{
  uint64_t v1 = v0[217];
  uint64_t v2 = v0[211];
  uint64_t v3 = v0[205];
  uint64_t v4 = sub_100044014(&qword_1003F3D80);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_100013B50(v1, v2, &qword_1003F3F70);
  uint64_t v5 = v3 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  swift_beginAccess();
  sub_10028314C(v2, v5, &qword_1003F3F70);
  swift_endAccess();
  swift_retain_n();
  swift_asyncLet_begin();
  swift_retain();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 82);
}

uint64_t sub_10034D9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3 + 16;
  *(void *)(v3 + 1960) = v2;
  if (v2) {
    return _swift_asyncLet_finish(v4, a2, sub_10034E000, v3 + 1488);
  }
  else {
    return _swift_asyncLet_get_throwing(v4);
  }
}

uint64_t sub_10034D9F8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 1968) = v2;
  if (v2)
  {
    uint64_t v4 = v3 + 1648;
    uint64_t v5 = sub_10034E13C;
  }
  else
  {
    uint64_t v4 = v3 + 1600;
    uint64_t v5 = sub_10034DA34;
  }
  return _swift_asyncLet_finish(v3 + 16, a2, v5, v4);
}

uint64_t sub_10034DA34()
{
  return _swift_task_switch(sub_10034DA50, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034DA50(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_10034DA6C, v2 + 1296);
}

uint64_t sub_10034DA6C()
{
  return _swift_task_switch(sub_10034DA88, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034DA88()
{
  swift_release();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034DB7C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034DC48()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[199] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to update account info due to %{public}@", v3, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = v0[205] + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7)
  {
    uint64_t v19 = v6;
    uint64_t v8 = v0[220];
    uint64_t v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    uint64_t v9 = v8 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)v6 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v13 = *(void *)(v9 + 56);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v14 = v0[221];
      uint64_t v15 = v0[219];
      v10(v14, v12, v15);
      CheckedContinuation.resume(returning:)();
      (*(void (**)(uint64_t, uint64_t))(v9 - 8))(v14, v15);
      v12 += v13;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v6 = v19;
  }
  uint64_t v16 = v0[205];
  *(void *)uint64_t v6 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_errorRelease();
  *(unsigned char *)(v16 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized) = 1;
  unint64_t v17 = (void *)swift_task_alloc();
  v0[239] = v17;
  *unint64_t v17 = v0;
  v17[1] = sub_10034D404;
  return daemon.getter();
}

uint64_t sub_10034DF28()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034E000()
{
  return _swift_task_switch(sub_10034E01C, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034E01C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_10034E038, v2 + 1552);
}

uint64_t sub_10034E038()
{
  return _swift_task_switch(sub_10034E054, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034E054()
{
  swift_release();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034E13C()
{
  return _swift_task_switch(sub_10034E158, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034E158(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_10034E174, v2 + 1696);
}

uint64_t sub_10034E174()
{
  return _swift_task_switch(sub_10034E190, *(void *)(v0 + 1640), 0);
}

uint64_t sub_10034E190()
{
  swift_release();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034E278(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 232) = a2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v2;
  uint64_t v4 = sub_100044014(&qword_1003F58A8);
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003F00A0);
  *(void *)(v3 + 152) = v5;
  *(void *)(v3 + 160) = *(void *)(v5 - 8);
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = sub_100044014(&qword_1003F5878);
  *(void *)(v3 + 192) = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 208) = swift_task_alloc();
  *(void *)(v3 + 216) = swift_task_alloc();
  *(void *)(v3 + 224) = swift_task_alloc();
  return _swift_task_switch(sub_10034E438, v2, 0);
}

uint64_t sub_10034E438()
{
  unint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v0 + 88;
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 120) + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess();
  uint64_t v62 = v6;
  sub_1002C9244(v6, v3, type metadata accessor for AccountService.State);
  uint64_t v7 = v5 + *(int *)(v4 + 48);
  sub_1002C9244(v3, v5, type metadata accessor for AccountService.State);
  sub_1002C9244(v1, v7, type metadata accessor for AccountService.State);
  uint64_t v8 = sub_100044014(&qword_1003EFE18);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  switch(v9(v5, 3, v8))
  {
    case 1u:
      if (v9(v7, 3, v8) != 1) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 2u:
      if (v9(v7, 3, v8) == 2) {
        goto LABEL_11;
      }
      goto LABEL_9;
    case 3u:
      if (v9(v7, 3, v8) != 3) {
        goto LABEL_9;
      }
      goto LABEL_11;
    default:
      sub_1002C9244(*(void *)(v0 + 192), *(void *)(v0 + 216), type metadata accessor for AccountService.State);
      unsigned int v10 = v9(v7, 3, v8);
      uint64_t v11 = type metadata accessor for Account();
      unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      uint64_t v13 = *(void *)(v0 + 216);
      if (v10)
      {
        v12(*(void *)(v0 + 216), v11);
LABEL_9:
        uint64_t v14 = *(void *)(v0 + 224);
        sub_10000A520(*(void *)(v0 + 192), &qword_1003F5878);
        sub_100358064(v14, type metadata accessor for AccountService.State);
        uint64_t v15 = v6;
        goto LABEL_12;
      }
      v12(v7, v11);
      v12(v13, v11);
LABEL_11:
      uint64_t v16 = *(void *)(v0 + 224);
      char v17 = *(unsigned char *)(v0 + 232);
      sub_100358064(*(void *)(v0 + 192), type metadata accessor for AccountService.State);
      sub_100358064(v16, type metadata accessor for AccountService.State);
      uint64_t v15 = v6;
      if (v17)
      {
LABEL_12:
        if (qword_1003EC4C0 != -1) {
          goto LABEL_48;
        }
        while (1)
        {
          uint64_t v18 = *(void *)(v0 + 208);
          uint64_t v19 = *(void *)(v0 + 112);
          uint64_t v20 = type metadata accessor for Logger();
          sub_100044058(v20, (uint64_t)qword_10040C458);
          sub_1002C9244(v19, v18, type metadata accessor for AccountService.State);
          swift_retain_n();
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          BOOL v23 = os_log_type_enabled(v21, v22);
          uint64_t v24 = *(void *)(v0 + 208);
          uint64_t v63 = (void *)v0;
          if (v23)
          {
            os_log_type_t typea = v22;
            uint64_t v25 = *(void *)(v0 + 200);
            uint64_t v26 = swift_slowAlloc();
            uint64_t v64 = swift_slowAlloc();
            *(_DWORD *)uint64_t v26 = 136315394;
            sub_1002C9244(v15, v25, type metadata accessor for AccountService.State);
            uint64_t v27 = sub_10034BF64();
            unint64_t v29 = v28;
            sub_100358064(v25, type metadata accessor for AccountService.State);
            *(void *)(v0 + 96) = sub_100037004(v27, v29, &v64);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v26 + 12) = 2080;
            uint64_t v30 = sub_10034BF64();
            *(void *)(v0 + 104) = sub_100037004(v30, v31, &v64);
            uint64_t v15 = v62;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100358064(v24, type metadata accessor for AccountService.State);
            _os_log_impl((void *)&_mh_execute_header, v21, typea, "State: %s -> %s", (uint8_t *)v26, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
            sub_100358064(v24, type metadata accessor for AccountService.State);
          }

          uint64_t v33 = *(void *)(v0 + 112);
          uint64_t v32 = *(void *)(v0 + 120);
          swift_beginAccess();
          sub_100358000(v33, v15);
          swift_endAccess();
          uint64_t v34 = (uint64_t *)(v32 + OBJC_IVAR____TtC13findmylocated14AccountService_stateContinuations);
          swift_beginAccess();
          uint64_t v35 = *v34;
          uint64_t v36 = *(void *)(*v34 + 16);
          if (v36)
          {
            BOOL v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v15 = 12;
              uint64_t v39 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v39 = 134217984;
              *(void *)unint64_t v2 = v36;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v37, v38, "Publishing State change event to %ld subscribers", v39, 0xCu);
              swift_slowDealloc();
            }

            uint64_t v35 = *v34;
          }
          unint64_t v2 = *(void *)(v0 + 160);
          uint64_t v40 = *(void *)(v0 + 136);
          *(void *)os_log_type_t type = v35 + 64;
          uint64_t v41 = -1;
          uint64_t v42 = -1 << *(unsigned char *)(v35 + 32);
          if (-v42 < 64) {
            uint64_t v41 = ~(-1 << -(char)v42);
          }
          unint64_t v0 = v41 & *(void *)(v35 + 64);
          unint64_t v61 = (void (**)(uint64_t, uint64_t))(v40 + 8);
          int64_t v60 = (unint64_t)(63 - v42) >> 6;
          uint64_t v62 = v35;
          swift_bridgeObjectRetain();
          int64_t v43 = 0;
          while (1)
          {
            if (v0)
            {
              unint64_t v44 = __clz(__rbit64(v0));
              v0 &= v0 - 1;
              unint64_t v45 = v44 | (v43 << 6);
              uint64_t v46 = v62;
              goto LABEL_24;
            }
            int64_t v53 = v43 + 1;
            uint64_t v46 = v62;
            if (__OFADD__(v43, 1))
            {
              __break(1u);
              goto LABEL_47;
            }
            if (v53 >= v60) {
              goto LABEL_42;
            }
            unint64_t v54 = *(void *)(*(void *)type + 8 * v53);
            ++v43;
            if (!v54)
            {
              int64_t v43 = v53 + 1;
              if (v53 + 1 >= v60) {
                goto LABEL_42;
              }
              unint64_t v54 = *(void *)(*(void *)type + 8 * v43);
              if (!v54)
              {
                int64_t v43 = v53 + 2;
                if (v53 + 2 >= v60) {
                  goto LABEL_42;
                }
                unint64_t v54 = *(void *)(*(void *)type + 8 * v43);
                if (!v54)
                {
                  int64_t v43 = v53 + 3;
                  if (v53 + 3 >= v60) {
                    goto LABEL_42;
                  }
                  unint64_t v54 = *(void *)(*(void *)type + 8 * v43);
                  if (!v54) {
                    break;
                  }
                }
              }
            }
LABEL_41:
            unint64_t v0 = (v54 - 1) & v54;
            unint64_t v45 = __clz(__rbit64(v54)) + (v43 << 6);
LABEL_24:
            uint64_t v47 = v63[25];
            uint64_t v49 = v63[21];
            uint64_t v48 = v63[22];
            uint64_t v50 = v63[18];
            uint64_t v15 = v63[19];
            uint64_t v51 = v63[16];
            uint64_t v52 = v63[14];
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16))(v48, *(void *)(v46 + 56) + *(void *)(v2 + 72) * v45, v15);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v49, v48, v15);
            sub_1002C9244(v52, v47, type metadata accessor for AccountService.State);
            AsyncStream.Continuation.yield(_:)();
            (*v61)(v50, v51);
            (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v49, v15);
          }
          int64_t v55 = v53 + 4;
          if (v55 >= v60)
          {
LABEL_42:
            swift_release();
            unint64_t v0 = (unint64_t)v63;
            goto LABEL_43;
          }
          unint64_t v54 = *(void *)(*(void *)type + 8 * v55);
          if (v54) {
            break;
          }
          while (1)
          {
            int64_t v43 = v55 + 1;
            if (__OFADD__(v55, 1)) {
              break;
            }
            if (v43 >= v60) {
              goto LABEL_42;
            }
            unint64_t v54 = *(void *)(*(void *)type + 8 * v43);
            ++v55;
            if (v54) {
              goto LABEL_41;
            }
          }
LABEL_47:
          __break(1u);
LABEL_48:
          swift_once();
        }
        int64_t v43 = v55;
        goto LABEL_41;
      }
LABEL_43:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
      return v56();
  }
}

uint64_t sub_10034ED48()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_10034EDD8();
}

uint64_t sub_10034EDD8()
{
  v1[5] = v0;
  v1[6] = *v0;
  type metadata accessor for UUID();
  v1[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for CloudKitStorage.State();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  sub_100044014(&qword_1003F40F0);
  v1[14] = swift_task_alloc();
  uint64_t v3 = sub_100044014(&qword_1003F40F8);
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  sub_100044014(&qword_1003F3F70);
  v1[18] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003F3D80);
  v1[19] = v4;
  v1[20] = *(void *)(v4 - 8);
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_10034F034, v0, 0);
}

uint64_t sub_10034F034()
{
  if (static SystemInfo.underTest.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v1();
  }
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 176) = sub_100044058(v2, (uint64_t)qword_10040C458);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Monitoring CloudKit AccountState stream", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 40);

  uint64_t v10 = v9 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream;
  swift_beginAccess();
  sub_100013210(v10, v8, &qword_1003F3F70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
  {
    sub_10000A520(*(void *)(v0 + 144), &qword_1003F3F70);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "cloudKitAccountStateStream should be available by now!", v13, 2u);
      swift_slowDealloc();
    }

    sub_100357D9C();
    swift_allocError();
    *uint64_t v14 = 7;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 32))(*(void *)(v0 + 168), *(void *)(v0 + 144), *(void *)(v0 + 152));
  AsyncStream.makeAsyncIterator()();
  uint64_t v16 = sub_100355070(qword_1003F5848, (void (*)(uint64_t))type metadata accessor for AccountService);
  int v17 = enum case for CloudKitStorage.State.unavailable(_:);
  *(_DWORD *)(v0 + 232) = enum case for CloudKitStorage.State.unknown(_:);
  *(_DWORD *)(v0 + 236) = v17;
  int v18 = enum case for CloudKitStorage.State.loading(_:);
  *(_DWORD *)(v0 + 240) = enum case for CloudKitStorage.State.noAccount(_:);
  *(_DWORD *)(v0 + 244) = v18;
  int v19 = enum case for CloudKitStorage.State.available(_:);
  *(_DWORD *)(v0 + 248) = enum case for CloudKitStorage.State.rebuilding(_:);
  *(_DWORD *)(v0 + 252) = v19;
  *(_DWORD *)(v0 + 256) = enum case for CloudKitStorage.State.apnsConnected(_:);
  *(void *)(v0 + 184) = v16;
  *(void *)(v0 + 192) = 0;
  uint64_t v20 = *(void *)(v0 + 40);
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_10034F4A8;
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 120);
  return AsyncStream.Iterator.next(isolation:)(v22, v20, v16, v23);
}

uint64_t sub_10034F4A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_10034F5B8, v1, 0);
}

uint64_t sub_10034F5B8()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 152);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v7();
  }
  uint64_t v8 = *(void *)(v0 + 192);
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 104), v1, v2);
  static Task<>.checkCancellation()();
  *(void *)(v0 + 208) = v8;
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 120);
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  uint64_t v16 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 72) + 16);
  v16(*(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 64));
  int v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, (os_log_type_t)v18);
  uint64_t v20 = *(void *)(v0 + 96);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 72) + 8);
  if (v19)
  {
    uint64_t v23 = swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    sub_100355070(&qword_1003F4100, (void (*)(uint64_t))&type metadata accessor for CloudKitStorage.State);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v23 + 4) = sub_100037004(v24, v25, v64);
    swift_bridgeObjectRelease();
    uint64_t v26 = *v22;
    (*v22)(v20, v21);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "cloudKitAccountStateStream event: %s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = *v22;
    (*v22)(*(void *)(v0 + 96), *(void *)(v0 + 64));
  }

  *(void *)(v0 + 216) = v26;
  int v28 = *(_DWORD *)(v0 + 232);
  int v27 = *(_DWORD *)(v0 + 236);
  uint64_t v29 = *(void *)(v0 + 88);
  uint64_t v30 = *(void *)(v0 + 64);
  uint64_t v31 = *(void *)(v0 + 72);
  v16(v29, *(void *)(v0 + 104), v30);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 88))(v29, v30);
  if (v32 == v28 || v32 == v27) {
    goto LABEL_21;
  }
  if (v32 == *(_DWORD *)(v0 + 240))
  {
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "CK account is .noAccount.", v35, 2u);
      swift_slowDealloc();
    }
    uint64_t v36 = *(void *)(v0 + 104);
    uint64_t v37 = *(void *)(v0 + 64);

    v26(v36, v37);
    goto LABEL_25;
  }
  if (v32 == *(_DWORD *)(v0 + 244) || v32 == *(_DWORD *)(v0 + 248))
  {
LABEL_21:
    v16(*(void *)(v0 + 80), *(void *)(v0 + 104), *(void *)(v0 + 64));
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void *)(v0 + 104);
    uint64_t v46 = *(void *)(v0 + 80);
    uint64_t v47 = *(void *)(v0 + 64);
    if (v44)
    {
      uint64_t v48 = swift_slowAlloc();
      v64[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      sub_100355070(&qword_1003F4100, (void (*)(uint64_t))&type metadata accessor for CloudKitStorage.State);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v48 + 4) = sub_100037004(v49, v50, v64);
      swift_bridgeObjectRelease();
      v26(v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring %s", (uint8_t *)v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v26(v46, v47);
    }
    v26(v45, v47);
    goto LABEL_25;
  }
  if (v32 == *(_DWORD *)(v0 + 252))
  {
    uint64_t v63 = *(void *)(v0 + 104);
    uint64_t v38 = *(void *)(v0 + 64);
    uint64_t v39 = *(void *)(v0 + 48);
    uint64_t v40 = *(void *)(v0 + 40);
    type metadata accessor for WorkItemQueue.WorkItem();
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v40;
    *(void *)(v41 + 24) = v39;
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    v26(v63, v38);
LABEL_25:
    *(void *)(v0 + 192) = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 184);
    uint64_t v52 = *(void *)(v0 + 40);
    int64_t v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v53;
    *int64_t v53 = v0;
    v53[1] = sub_10034F4A8;
    uint64_t v54 = *(void *)(v0 + 112);
    uint64_t v55 = *(void *)(v0 + 120);
    return AsyncStream.Iterator.next(isolation:)(v54, v52, v51, v55);
  }
  if (v32 != *(_DWORD *)(v0 + 256))
  {
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unknown CloudKitStorage.State!", v59, 2u);
      swift_slowDealloc();
    }
    uint64_t v60 = *(void *)(v0 + 104);
    uint64_t v61 = *(void *)(v0 + 88);
    uint64_t v62 = *(void *)(v0 + 64);

    v26(v60, v62);
    v26(v61, v62);
    goto LABEL_25;
  }
  uint64_t v56 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v56;
  *uint64_t v56 = v0;
  v56[1] = sub_10034FE8C;
  return sub_10035130C();
}

uint64_t sub_10034FE8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_10034FF9C, v1, 0);
}

uint64_t sub_10034FF9C()
{
  (*(void (**)(void, void))(v0 + 216))(*(void *)(v0 + 104), *(void *)(v0 + 64));
  *(void *)(v0 + 192) = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10034F4A8;
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  return AsyncStream.Iterator.next(isolation:)(v4, v2, v1, v5);
}

uint64_t sub_100350074(uint64_t a1, void *a2)
{
  v2[2] = a2;
  v2[3] = *a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_100350134, a2, 0);
}

uint64_t sub_100350134()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = sub_100355070(qword_1003F5848, (void (*)(uint64_t))type metadata accessor for AccountService);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v3;
  v6[3] = v5;
  v6[4] = v3;
  v6[5] = v2;
  swift_retain_n();
  sub_10010405C(v1, (uint64_t)&unk_1003F58D8, (uint64_t)v6);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100350278(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100044014(&qword_1003F00A0);
  uint64_t v38 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v37 = v2;
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v40 = v13;
    UUID.init()();
    uint64_t v30 = v3;
    int v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32(v11, v13, v7);
    uint64_t v28 = v1;
    uint64_t v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = v8;
    uint64_t v39 = v6;
    uint64_t v31 = v16 | 7;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v38;
    *(void *)(v17 + 16) = v15;
    BOOL v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v33 = v8 + 32;
    os_log_type_t v34 = v19;
    v19((char *)(v17 + ((v16 + 24) & ~v16)), v11, v7);
    swift_retain();
    uint64_t v20 = v28;
    uint64_t v21 = v36;
    AsyncStream.Continuation.onTermination.setter();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v39, 1, 1, v22);
    uint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v30, v21, v20);
    uint64_t v24 = v29;
    v32(v29, v40, v7);
    unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    unint64_t v26 = (v37 + v16 + v25) & ~v16;
    int v27 = (char *)swift_allocObject();
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = v15;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v27[v25], v23, v20);
    v34(&v27[v26], v24, v7);
    swift_retain();
    sub_10010405C((uint64_t)v39, (uint64_t)&unk_1003F5920, (uint64_t)v27);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v40, v7);
  }
  return result;
}

uint64_t sub_100350664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v13[v12], (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_10010405C((uint64_t)v10, (uint64_t)&unk_1003F5930, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100350838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100350858, a4, 0);
}

uint64_t sub_100350858()
{
  sub_1003508B8(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003508B8(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F0450);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - v10;
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040C458);
  int v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v11, a1, v6);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    unint64_t v25 = v5;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = v1;
    v30[0] = v17;
    uint64_t v24 = a1;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v23 = v16 + 4;
    sub_100355070(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_100037004(v18, v19, v30);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Removing stateContinuation for %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }

  uint64_t v20 = (uint64_t)v28;
  v27(v28, a1, v6);
  uint64_t v21 = sub_100044014(&qword_1003F00A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_beginAccess();
  sub_10012C5DC((uint64_t)v5, v20);
  return swift_endAccess();
}

uint64_t sub_100350C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v8 = sub_100044014(&qword_1003F58A8);
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_100350D6C, a4, 0);
}

uint64_t sub_100350D6C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[5];
  sub_100350F24(v0[6], v0[7]);
  uint64_t v3 = v2 + OBJC_IVAR____TtC13findmylocated14AccountService_state;
  swift_beginAccess();
  sub_1002C9244(v3, v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_100350E28, 0, 0);
}

uint64_t sub_100350E28()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  sub_1002C9244(v1, v0[11], type metadata accessor for AccountService.State);
  sub_100044014(&qword_1003F00A0);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100358064(v1, type metadata accessor for AccountService.State);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100350F24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100044014(&qword_1003F0450);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v32 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v26 - v12;
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040C458);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v31 = a2;
  v30(v13, a2, v8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v2;
    v34[0] = v19;
    uint64_t v27 = a1;
    *(_DWORD *)uint64_t v18 = 136446210;
    v26[1] = v18 + 4;
    sub_100355070(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_100037004(v20, v21, v34);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Storing stateContinuation for %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v22 = (uint64_t)v32;
  v30(v32, v31, v8);
  uint64_t v23 = sub_100044014(&qword_1003F00A0);
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, a1, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
  swift_beginAccess();
  sub_10012C5DC((uint64_t)v7, v22);
  return swift_endAccess();
}

uint64_t sub_10035130C()
{
  v1[13] = v0;
  type metadata accessor for AccountService.State(0);
  v1[14] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v1[15] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Account();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  v1[19] = type metadata accessor for DataManager.State(0);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_100351468, v0, 0);
}

uint64_t sub_100351468()
{
  uint64_t v8 = v0;
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[22] = sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[12] = sub_100037004(0xD000000000000018, 0x800000010037A710, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[23] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100351654;
  return daemon.getter();
}

uint64_t sub_100351654(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 192) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 200) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100355070(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100355070(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100351830;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100351830(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[26] = a1;
  v4[27] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[13];
    uint64_t v6 = sub_10035229C;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100351968;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100351968()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[26] + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess();
  sub_1002C9244(v3, v1, type metadata accessor for DataManager.State);
  return _swift_task_switch(sub_100351A20, v2, 0);
}

uint64_t sub_100351A20()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  swift_storeEnumTagMultiPayload();
  char v3 = sub_1000121A0(v2, v1);
  sub_100358064(v1, type metadata accessor for DataManager.State);
  sub_100358064(v2, type metadata accessor for DataManager.State);
  if ((v3 & 1) == 0)
  {
    swift_release();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[11] = sub_100037004(0xD000000000000018, 0x800000010037A710, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Sending account .available state to retry initClient", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = v0[16];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[13] + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess();
  sub_100013210(v10, v9, &qword_1003ECCF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_10000A520(v0[15], &qword_1003ECCF0);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      v0[10] = sub_100037004(0xD000000000000018, 0x800000010037A710, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s Account is nil!", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100357D9C();
    swift_allocError();
    *uint64_t v14 = 6;
    swift_willThrow();
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446466;
      v0[9] = sub_100037004(0xD000000000000018, 0x800000010037A710, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2114;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      v0[8] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s failed due to %{public}@", (uint8_t *)v17, 0x16u);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_14;
  }
  uint64_t v21 = v0[17];
  uint64_t v20 = v0[18];
  uint64_t v22 = v0[16];
  uint64_t v23 = v0[14];
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v20, v0[15], v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v20, v22);
  uint64_t v24 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 3, v24);
  unint64_t v25 = (void *)swift_task_alloc();
  v0[28] = v25;
  void *v25 = v0;
  v25[1] = sub_1003520A4;
  uint64_t v26 = v0[14];
  return sub_10034E278(v26, 1);
}

uint64_t sub_1003520A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  sub_100358064(v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_1003521E4, v2, 0);
}

uint64_t sub_1003521E4()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10035229C()
{
  uint64_t v9 = v0;
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[9] = sub_100037004(0xD000000000000018, 0x800000010037A710, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s failed due to %{public}@", (uint8_t *)v3, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100352504(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  sub_100044014(&qword_1003ECCF0);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1003525A8, v1, 0);
}

uint64_t sub_1003525A8()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C458);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Renewing credentials...", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1003526F8;
  uint64_t v6 = *(void *)(v0 + 40);
  return sub_100352990(v6);
}

uint64_t sub_1003526F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 48);
    return _swift_task_switch(sub_100352838, v6, 0);
  }
}

uint64_t sub_100352838()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Account();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v3, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  sub_100013B50(v1, v2, &qword_1003ECCF0);
  uint64_t v7 = v4 + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess();
  sub_10028314C(v2, v7, &qword_1003ECCF0);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100352990(uint64_t a1)
{
  v2[57] = a1;
  v2[58] = v1;
  uint64_t v3 = type metadata accessor for Account();
  v2[59] = v3;
  v2[60] = *(void *)(v3 - 8);
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Account.TokenStatus();
  v2[63] = v4;
  v2[64] = *(void *)(v4 - 8);
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  v2[67] = swift_task_alloc();
  return _swift_task_switch(sub_100352AF8, v1, 0);
}

uint64_t sub_100352AF8()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[68] = sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retrieving account info...", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[67];

  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 2, 3, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[69] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100352C9C;
  uint64_t v8 = v0[67];
  return sub_10034E278(v8, 0);
}

uint64_t sub_100352C9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536);
  uint64_t v2 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  sub_100358064(v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_100352DDC, v2, 0);
}

uint64_t sub_100352DDC()
{
  id v1 = [self defaultStore];
  v0[70] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    v0[2] = v0;
    v0[7] = v0 + 56;
    v0[3] = sub_100353014;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100353DA8;
    v0[13] = &unk_1003E5978;
    v0[14] = v3;
    [v2 aa_primaryAppleAccountWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary account!", v6, 2u);
      swift_slowDealloc();
    }

    sub_100357D9C();
    swift_allocError();
    *uint64_t v7 = 6;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100353014()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 568) = v2;
  uint64_t v3 = *(void *)(v1 + 464);
  if (v2) {
    uint64_t v4 = sub_100353CF8;
  }
  else {
    uint64_t v4 = sub_100353134;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100353134()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void **)(v0 + 448);
  if (!v1)
  {

    goto LABEL_5;
  }
  if (static SystemInfo.underTest.getter())
  {

LABEL_5:
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Missing primary account!", v4, 2u);
      swift_slowDealloc();
    }

    sub_100357D9C();
    swift_allocError();
    *os_log_type_t v5 = 6;
    swift_willThrow();
    goto LABEL_16;
  }
  id v6 = [v1 aa_personID];
  if (!v6)
  {
LABEL_13:
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing credentials!", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void **)(v0 + 560);

    sub_100357D9C();
    swift_allocError();
    *uint64_t v14 = 3;
    swift_willThrow();

    goto LABEL_16;
  }
  uint64_t v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = [v1 username];
  if (!v8)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v9 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  if (static SystemInfo.underTest.getter())
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  id v17 = [v1 dataclassProperties];
  if (!v17)
  {
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
LABEL_30:
    uint64_t v24 = v0 + 152;
LABEL_31:
    sub_10000A520(v24, &qword_1003F5890);
    goto LABEL_32;
  }
  uint64_t v18 = v17;
  *(void *)(v0 + 408) = 0xD000000000000020;
  *(void *)(v0 + 416) = 0x800000010037A6E0;
  id v19 = [v17 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
  }
  sub_100013B50(v0 + 280, v0 + 152, &qword_1003F5890);
  if (!*(void *)(v0 + 176)) {
    goto LABEL_30;
  }
  uint64_t v20 = (uint64_t *)(v0 + 432);
  sub_100044014(&qword_1003F5898);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v21 = *v20;
  if (*(void *)(*v20 + 16) && (unint64_t v22 = sub_10003B888(0x755F656C706F6570, 0xEA00000000006C72), (v23 & 1) != 0))
  {
    sub_1000370D8(*(void *)(v21 + 56) + 32 * v22, v0 + 216);
  }
  else
  {
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 240))
  {
    uint64_t v24 = v0 + 216;
    goto LABEL_31;
  }
  swift_dynamicCast();
LABEL_32:
  id v25 = [v1 dataclassProperties];
  if (!v25)
  {
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520(v0 + 184, &qword_1003F5890);
LABEL_43:
    int v32 = *(void **)(v0 + 560);
    sub_100357D9C();
    swift_allocError();
    *uint64_t v33 = 4;
    swift_willThrow();

LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  uint64_t v26 = v25;
  *(void *)(v0 + 360) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 368) = v27;
  swift_bridgeObjectRetain();
  id v28 = [v26 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  if (v28)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 248) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
  }
  sub_100013B50(v0 + 248, v0 + 184, &qword_1003F5890);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 208)) {
    goto LABEL_41;
  }
  sub_100044014(&qword_1003F5898);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  uint64_t v29 = *(void *)(v0 + 424);
  id v30 = [v1 aa_authToken];
  if (v30)
  {

    uint64_t v31 = (unsigned int *)&enum case for Account.TokenStatus.success(_:);
  }
  else
  {
    uint64_t v31 = (unsigned int *)&enum case for Account.TokenStatus.notAccessible(_:);
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 512) + 104))(*(void *)(v0 + 528), *v31, *(void *)(v0 + 504));
  if (*(void *)(v29 + 16) && (unint64_t v34 = sub_10003B888(0x766E45737061, 0xE600000000000000), (v35 & 1) != 0))
  {
    sub_1000370D8(*(void *)(v29 + 56) + 32 * v34, v0 + 312);
    int v36 = swift_dynamicCast();
    if (v36) {
      uint64_t v37 = *(void *)(v0 + 392);
    }
    else {
      uint64_t v37 = 0;
    }
    if (v36) {
      uint64_t v38 = *(void *)(v0 + 400);
    }
    else {
      uint64_t v38 = 0;
    }
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
  }
  if (*(void *)(v29 + 16) && (unint64_t v39 = sub_10003B888(0x6E74736F48707061, 0xEB00000000656D61), (v40 & 1) != 0))
  {
    sub_1000370D8(*(void *)(v29 + 56) + 32 * v39, v0 + 120);
  }
  else
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144)) {
    swift_dynamicCast();
  }
  else {
    sub_10000A520(v0 + 120, &qword_1003F5890);
  }
  uint64_t v41 = v38;
  id v42 = [v1 aa_fmfAccount];
  if (!v42) {
    goto LABEL_73;
  }
  os_log_type_t v43 = v42;
  id v44 = [*(id *)(v0 + 560) credentialForAccount:v42];
  if (!v44)
  {
    uint64_t v45 = v43;
LABEL_72:

LABEL_73:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void **)(v0 + 560);
    uint64_t v55 = *(void *)(v0 + 528);
    uint64_t v56 = *(void *)(v0 + 504);
    uint64_t v57 = *(void *)(v0 + 512);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100357D9C();
    swift_allocError();
    *os_log_type_t v58 = 5;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
    goto LABEL_16;
  }
  uint64_t v45 = v44;
  uint64_t v84 = v37;
  id v46 = [v44 credentialItemForKey:ACFindMyFriendsAppTokenKey];
  if (!v46)
  {

    goto LABEL_72;
  }
  uint64_t v47 = v46;
  uint64_t v81 = v45;
  uint64_t v82 = v43;
  uint64_t v48 = *(void *)(v0 + 528);
  uint64_t v49 = *(void *)(v0 + 520);
  uint64_t v51 = *(void *)(v0 + 504);
  uint64_t v50 = *(void *)(v0 + 512);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v49, v48, v51);
  sub_100357DF0(v84, v41);
  swift_bridgeObjectRelease();
  id v52 = [v1 aa_authToken];
  if (v52)
  {
    int64_t v53 = v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v59 = *(void *)(v0 + 496);
  uint64_t v61 = *(void *)(v0 + 472);
  uint64_t v60 = *(void *)(v0 + 480);
  uint64_t v62 = *(void *)(v0 + 456);
  Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)();
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v63(v59, v62, v61);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.default.getter();
  BOOL v66 = os_log_type_enabled(v64, v65);
  uint64_t v67 = *(void *)(v0 + 528);
  uint64_t v69 = *(void *)(v0 + 504);
  uint64_t v68 = *(void *)(v0 + 512);
  if (v66)
  {
    uint64_t v87 = *(void *)(v0 + 504);
    uint64_t v71 = *(void *)(v0 + 480);
    uint64_t v70 = *(void *)(v0 + 488);
    os_log_type_t type = v65;
    uint64_t v72 = *(void *)(v0 + 472);
    uint64_t v73 = *(void *)(v0 + 496);
    uint64_t v85 = *(void **)(v0 + 560);
    uint64_t v86 = *(void *)(v0 + 528);
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    *(_DWORD *)uint64_t v74 = 136315138;
    v63(v70, v73, v72);
    uint64_t v75 = String.init<A>(describing:)();
    *(void *)(v0 + 440) = sub_100037004(v75, v76, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
    _os_log_impl((void *)&_mh_execute_header, v64, type, "Retrieved account: %s", v74, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v86, v87);
  }
  else
  {
    uint64_t v77 = *(void *)(v0 + 472);
    uint64_t v78 = *(void *)(v0 + 480);
    uint64_t v79 = *(void **)(v0 + 560);
    uint64_t v80 = *(void *)(v0 + 496);

    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v80, v77);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
  return v15();
}

uint64_t sub_100353CF8()
{
  uint64_t v1 = *(void **)(v0 + 560);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100353DA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    os_log_type_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_100013B50((uint64_t)&v11, v8, &qword_1003F58A0);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100353E74()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_100358064(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_state, type metadata accessor for AccountService.State);
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated14AccountService__account, &qword_1003ECCF0);
  swift_bridgeObjectRelease();
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated14AccountService_cloudKitAccountStateStream, &qword_1003F3F70);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100353F28()
{
  return type metadata accessor for AccountService(0);
}

void sub_100353F30()
{
  type metadata accessor for AccountService.State(319);
  if (v0 <= 0x3F)
  {
    sub_100354090();
    if (v1 <= 0x3F)
    {
      sub_1003540E8();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for AccountService.State(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003F5830);
}

void sub_100354090()
{
  if (!qword_1003F5630)
  {
    type metadata accessor for Account();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003F5630);
    }
  }
}

void sub_1003540E8()
{
  if (!qword_1003F3D78)
  {
    sub_10004AE58(&qword_1003F3D80);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003F3D78);
    }
  }
}

uint64_t *sub_100354144(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100044014(&qword_1003EFE18);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for Account();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t sub_1003542B0(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EFE18);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 3, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Account();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *sub_100354364(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Account();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_100354494(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for Account();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_10000A520((uint64_t)a1, &qword_1003EFE18);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for Account();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *sub_100354640(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Account();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_100354770(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for Account();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_10000A520((uint64_t)a1, &qword_1003EFE18);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for Account();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t sub_10035491C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100354930);
}

uint64_t sub_100354930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003EFE18);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0;
  }
}

uint64_t sub_1003549A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003549B4);
}

uint64_t sub_1003549B4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100044014(&qword_1003EFE18);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100354A3C(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EFE18);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 3, v2);
}

uint64_t sub_100354AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003EFE18);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 3, v4);
}

uint64_t sub_100354B1C()
{
  uint64_t result = type metadata accessor for Account();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_100354B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_100354C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for AccountService(0);
  *uint64_t v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_100354D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_100354DB4()
{
  return _swift_task_switch(sub_100354DD0, v0, 0);
}

uint64_t sub_100354DD0()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AccountService startup", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100354EE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100018CD0;
  return sub_10034C5D4();
}

uint64_t sub_100354F74()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_100354FE0()
{
  return sub_100355070(&qword_1003F5840, (void (*)(uint64_t))type metadata accessor for AccountService);
}

uint64_t sub_100355028()
{
  return sub_100355070(qword_1003F5848, (void (*)(uint64_t))type metadata accessor for AccountService);
}

uint64_t sub_100355070(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003550B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F0440);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC13findmylocated14AccountService_isInitialized))
  {
    if (qword_1003EC4C0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100044058(v8, (uint64_t)qword_10040C458);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Init is done. Resume all.", v11, 2u);
      swift_slowDealloc();
    }

    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (qword_1003EC4C0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100044058(v13, (uint64_t)qword_10040C458);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Init in progress; appending continuation.", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    id v17 = (unint64_t *)(a2 + OBJC_IVAR____TtC13findmylocated14AccountService_initContinuations);
    swift_beginAccess();
    unint64_t v18 = *v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *id v17 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v18 = sub_10013E358(0, *(void *)(v18 + 16) + 1, 1, v18);
      *id v17 = v18;
    }
    unint64_t v21 = *(void *)(v18 + 16);
    unint64_t v20 = *(void *)(v18 + 24);
    if (v21 >= v20 >> 1)
    {
      unint64_t v18 = sub_10013E358(v20 > 1, v21 + 1, 1, v18);
      *id v17 = v18;
    }
    *(void *)(v18 + 16) = v21 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v21, v7, v4);
    return swift_endAccess();
  }
}

uint64_t sub_1003553DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for UUID();
  v5[4] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DarwinNotification();
  v5[5] = v7;
  v5[6] = *(void *)(v7 - 8);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  sub_100044014(&qword_1003F0E88);
  v5[9] = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F0E98);
  v5[10] = v8;
  v5[11] = *(void *)(v8 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v9 = sub_100044014(&qword_1003F0E90);
  v5[13] = v9;
  v5[14] = *(void *)(v9 - 8);
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_1003555CC, a4, 0);
}

uint64_t sub_1003555CC()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 128) = sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for Darwin notification: SPAccountRemovedNotification", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10035571C;
  return daemon.getter();
}

uint64_t sub_10035571C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_100355070(&qword_1003F0E30, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100355874, v3, v2);
}

uint64_t sub_100355874()
{
  *(void *)(v0 + 152) = Daemon.darwinNotificationHandler.getter();
  swift_release();
  type metadata accessor for DarwinNotificationHandler();
  sub_100355070(&qword_1003F0EA0, (void (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10035594C, v2, v1);
}

uint64_t sub_10035594C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_1003559DC, v1, 0);
}

uint64_t sub_1003559DC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_100355070(qword_1003F5848, (void (*)(uint64_t))type metadata accessor for AccountService);
  v0[20] = v4;
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[21] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100355AF8;
  uint64_t v7 = v0[13];
  uint64_t v8 = v0[9];
  return AsyncStream.Iterator.next(isolation:)(v8, v5, v4, v7);
}

uint64_t sub_100355AF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_100355C08, v1, 0);
}

uint64_t sub_100355C08()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v2);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v13 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 48) + 8);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_100355070(&qword_1003F39E0, (void (*)(uint64_t))&type metadata accessor for DarwinNotification);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 4) = sub_100037004(v15, v16, &v25);
      swift_bridgeObjectRelease();
      id v17 = *v13;
      (*v13)(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Darwin SPAccountRemovedNotification: %s. Reset LocalDB and UserDefaults.", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v17 = *v13;
      (*v13)(*(void *)(v0 + 56), *(void *)(v0 + 40));
    }

    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v19 = *(void *)(v0 + 40);
    type metadata accessor for WorkItemQueue.WorkItem();
    *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)(v0 + 16);
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    v17(v18, v19);
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v21 = *(void *)(v0 + 16);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100355AF8;
    uint64_t v23 = *(void *)(v0 + 104);
    uint64_t v24 = *(void *)(v0 + 72);
    return AsyncStream.Iterator.next(isolation:)(v24, v21, v20, v23);
  }
}

uint64_t sub_100355FDC(uint64_t a1)
{
  v1[8] = a1;
  uint64_t v2 = type metadata accessor for Account();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  type metadata accessor for AccountService.State(0);
  v1[12] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_1003560F8, 0, 0);
}

uint64_t sub_1003560F8()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v0[14] = v5;
  v0[15] = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 1, 1, v2);
  return _swift_task_switch(sub_100356188, v4, 0);
}

uint64_t sub_100356188()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[8];
  uint64_t v3 = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v0[16] = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  sub_1003583CC(v1, v4);
  swift_endAccess();
  sub_10000A520(v1, &qword_1003ECCF0);
  return _swift_task_switch(sub_100356244, 0, 0);
}

uint64_t sub_100356244()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = sub_100044014(&qword_1003EFE18);
  v0[17] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v0[18] = v4;
  v0[19] = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v4(v1, 3, 3, v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100356338;
  uint64_t v6 = v0[12];
  return sub_10034E278(v6, 0);
}

uint64_t sub_100356338()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  sub_100358064(v2, type metadata accessor for AccountService.State);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 168) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1003564C0;
  uint64_t v5 = *(void *)(v1 + 88);
  return sub_100352990(v5);
}

uint64_t sub_1003564C0()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100356AA4;
  }
  else {
    uint64_t v2 = sub_1003565D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003565D4()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v7;
  v0[24] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v2, v3, v5);
  v1(v2, 0, 1, v5);
  return _swift_task_switch(sub_10035668C, v6, 0);
}

uint64_t sub_10035668C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[8] + v0[16];
  swift_beginAccess();
  sub_1003583CC(v1, v2);
  swift_endAccess();
  sub_10000A520(v1, &qword_1003ECCF0);
  return _swift_task_switch(sub_100356740, 0, 0);
}

uint64_t sub_100356740()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Account is available after receiving SPAccountRemovedNotification. Sending .available to subscribers.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
  uint64_t v6 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[18];
  uint64_t v7 = v0[17];
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  uint64_t v10 = v0[9];

  v5(v8, v9, v10);
  v6(v8, 0, 3, v7);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[25] = v11;
  void *v11 = v0;
  v11[1] = sub_1003568E8;
  uint64_t v12 = v0[12];
  return sub_10034E278(v12, 0);
}

uint64_t sub_1003568E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  sub_100358064(v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_100356A14, 0, 0);
}

uint64_t sub_100356A14()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100356AA4()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Account is unavailable after receiving SPAccountRemovedNotification as expected!", v4, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100356BE4(uint64_t a1)
{
  v1[8] = a1;
  type metadata accessor for AccountService.State(0);
  v1[9] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Account();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100356D10, 0, 0);
}

uint64_t sub_100356D10()
{
  if (qword_1003EC4C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 120) = sub_100044058(v1, (uint64_t)qword_10040C458);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CK account is available", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 64);

  return _swift_task_switch(sub_100356E34, v5, 0);
}

uint64_t sub_100356E34()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  uint64_t v3 = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  v0[16] = OBJC_IVAR____TtC13findmylocated14AccountService__account;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  sub_100013210(v4, v1, &qword_1003ECCF0);
  return _swift_task_switch(sub_100356ED4, 0, 0);
}

uint64_t sub_100356ED4()
{
  uint64_t v1 = v0[14];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[11] + 48))(v1, 1, v0[10]);
  sub_10000A520(v1, &qword_1003ECCF0);
  if (v2 == 1)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[17] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10035708C;
    uint64_t v4 = v0[12];
    return sub_100352990(v4);
  }
  else
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Account info has already been fetched.", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = (void *)swift_task_alloc();
    v0[22] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1003575D0;
    return sub_10035130C();
  }
}

uint64_t sub_10035708C()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = sub_100357740;
  }
  else {
    int v2 = sub_1003571A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003571A0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[19] = v6;
  v0[20] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  return _swift_task_switch(sub_10035725C, v5, 0);
}

uint64_t sub_10035725C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[8] + v0[16];
  swift_beginAccess();
  sub_1003583CC(v1, v2);
  swift_endAccess();
  sub_10000A520(v1, &qword_1003ECCF0);
  return _swift_task_switch(sub_100357310, 0, 0);
}

uint64_t sub_100357310()
{
  uint64_t v1 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, void, void))(v0 + 152))(v1, *(void *)(v0 + 96), *(void *)(v0 + 80));
  uint64_t v2 = sub_100044014(&qword_1003EFE18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 3, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100357400;
  uint64_t v4 = *(void *)(v0 + 72);
  return sub_10034E278(v4, 0);
}

uint64_t sub_100357400()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  sub_100358064(v1, type metadata accessor for AccountService.State);
  return _swift_task_switch(sub_10035752C, 0, 0);
}

uint64_t sub_10035752C()
{
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1003575D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100357740()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003577CC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1003577F0, 0, 0);
}

uint64_t sub_1003577F0()
{
  if (*(unsigned char *)(v0 + 32))
  {
    swift_errorRetain();
    if (qword_1003EC4C0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040C458);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v2, v6);
    uint64_t v8 = *(void *)(v0 + 24);
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138543362;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      sub_1001D5B10(v8, 1);
      sub_1001D5B10(v8, 1);
      _os_log_impl((void *)&_mh_execute_header, v2, v6, "Failed to update account info. Error %{public}@", v9, 0xCu);
      sub_100044014(&qword_1003ECCC8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D5B10(v8, 1);
      goto LABEL_12;
    }
    sub_1001D5B10(*(void *)(v0 + 24), 1);
    sub_1001D5B10(v8, 1);
    swift_errorRelease();
  }
  else
  {
    if (qword_1003EC4C0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040C458);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully updated account info", v4, 2u);
      swift_slowDealloc();
    }
  }

LABEL_12:
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100357AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountService.State(0);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003F5878);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1002C9244(a1, (uint64_t)v10, type metadata accessor for AccountService.State);
  sub_1002C9244(a2, v11, type metadata accessor for AccountService.State);
  uint64_t v12 = sub_100044014(&qword_1003EFE18);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  switch(v13((uint64_t)v10, 3, v12))
  {
    case 1u:
      if (v13(v11, 3, v12) != 1) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 2u:
      if (v13(v11, 3, v12) == 2) {
        goto LABEL_11;
      }
      goto LABEL_9;
    case 3u:
      if (v13(v11, 3, v12) != 3) {
        goto LABEL_9;
      }
      goto LABEL_11;
    default:
      sub_1002C9244((uint64_t)v10, (uint64_t)v6, type metadata accessor for AccountService.State);
      unsigned int v14 = v13(v11, 3, v12);
      uint64_t v15 = type metadata accessor for Account();
      unint64_t v16 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      if (v14)
      {
        v16(v6, v15);
LABEL_9:
        sub_10000A520((uint64_t)v10, &qword_1003F5878);
        return 0;
      }
      else
      {
        v16((char *)v11, v15);
        v16(v6, v15);
LABEL_11:
        sub_100358064((uint64_t)v10, type metadata accessor for AccountService.State);
        return 1;
      }
  }
}

unint64_t sub_100357D9C()
{
  unint64_t result = qword_1003F5888;
  if (!qword_1003F5888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F5888);
  }
  return result;
}

uint64_t sub_100357DF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10004650C();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)() && StringProtocol.caseInsensitiveCompare<A>(_:)()) {
      StringProtocol.caseInsensitiveCompare<A>(_:)();
    }
  }
  else
  {
    if (qword_1003EC4C0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100044058(v2, (uint64_t)qword_10040C458);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalid APS Env value returned from iCloud Setup. Falling back to production.", v5, 2u);
      swift_slowDealloc();
    }
  }
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100358000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountService.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100358064(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003580C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10004A274;
  return sub_10034ED48();
}

uint64_t sub_100358160(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return sub_100350074(a1, v1);
}

uint64_t sub_1003581FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10035823C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100018CD0;
  return sub_1003553DC(a1, v4, v5, v7, v6);
}

uint64_t sub_1003582FC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100358334()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100018CD0;
  return sub_100355FDC(v2);
}

uint64_t sub_1003583CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECCF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100358434()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10004A274;
  return sub_100356BE4(v2);
}

uint64_t sub_1003584CC(uint64_t a1)
{
  return sub_1003550B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1003584D4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003585A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100350664(a1, v4, v5);
}

uint64_t sub_100358614()
{
  uint64_t v1 = sub_100044014(&qword_1003F00A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100358778(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_100044014(&qword_1003F00A0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10004A274;
  return sub_100350C64(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_1003588DC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003589B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10004A274;
  return _swift_task_switch(sub_100350858, v3, 0);
}

uint64_t sub_100358A98(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t getEnumTagSinglePayload for AccountService.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF8 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483640);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 7;
  if (v4 >= 9) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccountService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483640;
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountService.Error()
{
  return &type metadata for AccountService.Error;
}

unint64_t sub_100358B68(unint64_t result)
{
  if (result >= 8) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_100358B78(unint64_t result)
{
  if (result >= 8) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100358B8C()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_100052FAC(v0, qword_10040C478);
  sub_100044058(v0, (uint64_t)qword_10040C478);
  return sub_100358BD8();
}

uint64_t sub_100358BD8()
{
  uint64_t v0 = sub_100044014(&qword_1003F1868);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self defaultManager];
  id v8 = [v7 URLsForDirectory:5 inDomains:1];

  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v9 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v2, v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100358E8C((uint64_t)v2);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_100358E8C(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F1868);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100358EEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_1003F5940);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_1003F5940);
  if (qword_1003EC4D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C490);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100358FB4(char a1)
{
  if (a1 == 2) {
    return 0x6E776F6E6B6E752ELL;
  }
  if (a1 == 3) {
    return 0x6C616974696E692ELL;
  }
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000018;
}

uint64_t sub_1003590AC()
{
  return sub_100358FB4(*v0);
}

BOOL sub_1003590B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 & 0xFE) == 2) {
    return 0;
  }
  return (((v2 & 1) == 0) ^ v3) & 1;
}

uint64_t sub_100359114()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100359134, v0, 0);
}

id sub_100359134()
{
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_1003F5940);
  int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AppDeletionService startup", v4, 2u);
    swift_slowDealloc();
  }

  id result = [self defaultWorkspace];
  if (result)
  {
    Swift::String v6 = result;
    uint64_t v7 = *(void *)(v0 + 16);
    NSString v8 = String._bridgeToObjectiveC()();
    unsigned __int8 v9 = [v6 applicationIsInstalled:v8];

    *(unsigned char *)(v7 + 137) = v9;
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003592C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  Swift::String v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t v8 = sub_10035D080(qword_1003F5AC0, v7, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  unsigned __int8 v9 = (void *)swift_allocObject();
  v9[2] = v0;
  v9[3] = v8;
  v9[4] = v0;
  v9[5] = v1;
  swift_retain_n();
  sub_10010405C((uint64_t)v4, (uint64_t)&unk_1003F5AF8, (uint64_t)v9);
  swift_release();
  v6(v4, 1, 1, v5);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v0;
  uint64_t v10[3] = v8;
  v10[4] = v0;
  v10[5] = v1;
  swift_retain_n();
  sub_10010405C((uint64_t)v4, (uint64_t)&unk_1003F5B08, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1003594A0(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v4 = type metadata accessor for SystemVersionNumber();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_100359570, v2, 0);
}

uint64_t sub_100359570()
{
  uint64_t v27 = v0;
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100044058(v7, (uint64_t)qword_1003F5940);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v8(v3, v6, v4);
  unsigned __int8 v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  if (v11)
  {
    uint64_t v25 = v0[8];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_10035D080(&qword_1003F0108, 255, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v15);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v25, v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Migrate from %s to %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v12, v15);
    v22(v13, v15);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_100359884(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100044014(&qword_1003F0080);
  uint64_t v38 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v37 = v2;
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  BOOL v11 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    char v40 = v13;
    UUID.init()();
    id v30 = v3;
    int v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32(v11, v13, v7);
    uint64_t v28 = v1;
    uint64_t v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = v8;
    unint64_t v39 = v6;
    uint64_t v31 = v16 | 7;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v38;
    *(void *)(v17 + 16) = v15;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v33 = v8 + 32;
    unint64_t v34 = v19;
    v19((char *)(v17 + ((v16 + 24) & ~v16)), v11, v7);
    swift_retain();
    uint64_t v20 = v28;
    uint64_t v21 = v36;
    AsyncStream.Continuation.onTermination.setter();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v39, 1, 1, v22);
    uint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v30, v21, v20);
    uint64_t v24 = v29;
    v32(v29, v40, v7);
    unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    unint64_t v26 = (v37 + v16 + v25) & ~v16;
    uint64_t v27 = (char *)swift_allocObject();
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = v15;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v27[v25], v23, v20);
    v34(&v27[v26], v24, v7);
    swift_retain();
    sub_10010405C((uint64_t)v39, (uint64_t)&unk_1003F5B48, (uint64_t)v27);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v40, v7);
  }
  return result;
}

uint64_t sub_100359C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v13[v12], (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_10010405C((uint64_t)v10, (uint64_t)&unk_1003F5B58, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100359E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100359E64, a4, 0);
}

uint64_t sub_100359E64()
{
  sub_10035AADC(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100359EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  uint64_t v8 = sub_100044014(&qword_1003F5B38);
  v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_100359F90, a4, 0);
}

uint64_t sub_100359F90()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10035A6F8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  *(unsigned char *)(v0 + 65) = *(unsigned char *)(v1 + 136);
  return _swift_task_switch(sub_10035A004, 0, 0);
}

uint64_t sub_10035A004()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 64) = *(unsigned char *)(v0 + 65);
  sub_100044014(&qword_1003F0080);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10035A0C0(int a1)
{
  unint64_t v2 = v1;
  LODWORD(v3) = a1;
  uint64_t v50 = sub_100044014(&qword_1003F5B38);
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F0080);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v41 - v12;
  int v13 = *(unsigned __int8 *)(v2 + 136);
  if (v13 == 2)
  {
    if (v3 == 2) {
      return result;
    }
    goto LABEL_9;
  }
  if (v13 == 3)
  {
    if (v3 == 3) {
      return result;
    }
    goto LABEL_9;
  }
  if ((v3 & 0xFE) == 2 || ((v3 ^ ((v13 & 1) == 0)) & 1) == 0)
  {
LABEL_9:
    uint64_t v42 = v4;
    if (qword_1003EC4D0 != -1) {
LABEL_43:
    }
      swift_once();
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100044058(v14, (uint64_t)qword_1003F5940);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      uint64_t v47 = v15;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v45 = v19 + 4;
      uint64_t v20 = sub_100358FB4(*(unsigned char *)(v2 + 136));
      LODWORD(v46) = v18;
      uint64_t v51 = sub_100037004(v20, v21, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v45 = v19 + 14;
      uint64_t v22 = sub_100358FB4(v3);
      uint64_t v51 = sub_100037004(v22, v23, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v46, "State: %s -> %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    LODWORD(v47) = v3;
    *(unsigned char *)(v2 + 136) = v3;
    unint64_t v24 = v2 + 128;
    swift_beginAccess();
    uint64_t v3 = *(void *)(*(void *)(v2 + 128) + 16);
    if (v3)
    {
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134217984;
        uint64_t v51 = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Publishing State change event to %ld subscribers", v27, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v28 = *(void *)v24;
    uint64_t v29 = *(void *)(*(void *)v24 + 64);
    uint64_t v43 = *(void *)v24 + 64;
    uint64_t v30 = 1 << *(unsigned char *)(v28 + 32);
    uint64_t v31 = -1;
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    unint64_t v2 = v31 & v29;
    uint64_t v46 = v7 + 16;
    int64_t v44 = (unint64_t)(v30 + 63) >> 6;
    uint64_t v45 = v7 + 32;
    int v32 = (void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v33 = v28;
    swift_bridgeObjectRetain();
    int64_t v34 = 0;
    while (1)
    {
      if (v2)
      {
        unint64_t v35 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        unint64_t v36 = v35 | (v34 << 6);
      }
      else
      {
        int64_t v38 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v38 >= v44) {
          return swift_release();
        }
        unint64_t v39 = *(void *)(v43 + 8 * v38);
        ++v34;
        if (!v39)
        {
          int64_t v34 = v38 + 1;
          if (v38 + 1 >= v44) {
            return swift_release();
          }
          unint64_t v39 = *(void *)(v43 + 8 * v34);
          if (!v39)
          {
            int64_t v34 = v38 + 2;
            if (v38 + 2 >= v44) {
              return swift_release();
            }
            unint64_t v39 = *(void *)(v43 + 8 * v34);
            if (!v39)
            {
              int64_t v34 = v38 + 3;
              if (v38 + 3 >= v44) {
                return swift_release();
              }
              unint64_t v39 = *(void *)(v43 + 8 * v34);
              if (!v39)
              {
                int64_t v40 = v38 + 4;
                if (v40 >= v44) {
                  return swift_release();
                }
                unint64_t v39 = *(void *)(v43 + 8 * v40);
                if (!v39)
                {
                  while (1)
                  {
                    int64_t v34 = v40 + 1;
                    if (__OFADD__(v40, 1)) {
                      goto LABEL_42;
                    }
                    if (v34 >= v44) {
                      return swift_release();
                    }
                    unint64_t v39 = *(void *)(v43 + 8 * v34);
                    ++v40;
                    if (v39) {
                      goto LABEL_38;
                    }
                  }
                }
                int64_t v34 = v40;
              }
            }
          }
        }
LABEL_38:
        unint64_t v2 = (v39 - 1) & v39;
        unint64_t v36 = __clz(__rbit64(v39)) + (v34 << 6);
      }
      uint64_t v37 = v48;
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v48, *(void *)(v33 + 56) + *(void *)(v7 + 72) * v36, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v37, v6);
      LOBYTE(v51) = v47;
      uint64_t v3 = (uint64_t)v49;
      AsyncStream.Continuation.yield(_:)();
      (*v32)(v3, v50);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  return result;
}

uint64_t sub_10035A6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100044014(&qword_1003F0430);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v32 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v13 = (char *)v26 - v12;
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_1003F5940);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v31 = a2;
  v30(v13, a2, v8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v7;
    int v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v2;
    v34[0] = v19;
    uint64_t v27 = a1;
    *(_DWORD *)int v18 = 136446210;
    v26[1] = v18 + 4;
    sub_10035D080(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_100037004(v20, v21, v34);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Storing stateContinuation for %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v22 = (uint64_t)v32;
  v30(v32, v31, v8);
  uint64_t v23 = sub_100044014(&qword_1003F0080);
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, a1, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
  swift_beginAccess();
  sub_10012C830((uint64_t)v7, v22);
  return swift_endAccess();
}

uint64_t sub_10035AADC(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F0430);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - v10;
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_1003F5940);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v11, a1, v6);
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    unint64_t v25 = v5;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = v1;
    v30[0] = v17;
    uint64_t v24 = a1;
    *(_DWORD *)os_log_type_t v16 = 136446210;
    uint64_t v23 = v16 + 4;
    sub_10035D080(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_100037004(v18, v19, v30);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Removing stateContinuation for %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }

  uint64_t v20 = (uint64_t)v28;
  v27(v28, a1, v6);
  uint64_t v21 = sub_100044014(&qword_1003F0080);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_beginAccess();
  sub_10012C830((uint64_t)v5, v20);
  return swift_endAccess();
}

uint64_t sub_10035AE84()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppDeletionService()
{
  return self;
}

uint64_t getEnumTagSinglePayload for AppDeletionService.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10035AF98);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AppDeletionService.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10035B080);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_10035B0A8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_10035B0C4(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDeletionService.State()
{
  return &type metadata for AppDeletionService.State;
}

uint64_t sub_10035B0EC()
{
  return _swift_task_switch(sub_10035B108, v0, 0);
}

uint64_t sub_10035B108()
{
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_1003F5940);
  BOOL v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "initialLaunchProcessing", v4, 2u);
    swift_slowDealloc();
  }

  unsigned int v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10035B21C(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = sub_10004A274;
  return sub_1003594A0(a1, a2);
}

uint64_t sub_10035B2C0(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for AppDeletionService();
  *int v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10035B368()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100018CD0;
  v2[2] = v0;
  return _swift_task_switch(sub_100359134, v0, 0);
}

uint64_t sub_10035B40C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10035B42C, v0, 0);
}

uint64_t sub_10035B42C()
{
  sub_1003592C0();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10035B490()
{
  type metadata accessor for AppDeletionService();
  sub_10035D080(&qword_1003F1D40, v0, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_10035B4F8(uint64_t a1, uint64_t a2)
{
  return sub_10035D080(&qword_1003F5AB8, a2, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
}

uint64_t sub_10035B540(uint64_t a1, uint64_t a2)
{
  return sub_10035D080(qword_1003F5AC0, a2, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
}

uint64_t sub_10035B588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v6 = type metadata accessor for DistributedNotification();
  v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = swift_task_alloc();
  sub_100044014(&qword_1003F5B10);
  v4[7] = swift_task_alloc();
  uint64_t v7 = sub_100044014(&qword_1003F5B18);
  v4[8] = v7;
  v4[9] = *(void *)(v7 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F5B20);
  v4[11] = v8;
  v4[12] = *(void *)(v8 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10035B74C, a4, 0);
}

uint64_t sub_10035B74C()
{
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = sub_100044058(v1, (uint64_t)qword_1003F5940);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for Distributed notification: com.apple.LaunchServices.applicationRegistered", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10035B89C;
  return daemon.getter();
}

uint64_t sub_10035B89C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_10035D080(&qword_1003F0E30, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10035B9F8, v3, v2);
}

uint64_t sub_10035B9F8()
{
  *(void *)(v0 + 136) = Daemon.distributedNotificationHandler.getter();
  swift_release();
  type metadata accessor for DistributedNotificationHandler();
  sub_10035D080(&qword_1003F5B28, 255, (void (*)(uint64_t))&type metadata accessor for DistributedNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10035BAD4, v2, v1);
}

uint64_t sub_10035BAD4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  dispatch thunk of DistributedNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_10035BB64, v1, 0);
}

uint64_t sub_10035BB64()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_10035D080(qword_1003F5AC0, v4, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  v0[18] = v5;
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[19] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10035BC80;
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[7];
  return AsyncStream.Iterator.next(isolation:)(v9, v6, v5, v8);
}

uint64_t sub_10035BC80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10035BD90, v1, 0);
}

uint64_t sub_10035BD90()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v2);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[3];
    int v13 = (void (**)(uint64_t, uint64_t))(v0[4] + 8);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_10035D080(&qword_1003F5B30, 255, (void (*)(uint64_t))&type metadata accessor for DistributedNotification);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 4) = sub_100037004(v15, v16, &v25);
      swift_bridgeObjectRelease();
      uint64_t v17 = *v13;
      (*v13)(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Process application registered: %s", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *v13;
      (*v13)(v0[5], v0[3]);
    }

    uint64_t v18 = v0[6];
    uint64_t v19 = v0[3];
    sub_10035C194();
    v17(v18, v19);
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[2];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[19] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10035BC80;
    uint64_t v23 = v0[11];
    uint64_t v24 = v0[7];
    return AsyncStream.Iterator.next(isolation:)(v24, v21, v20, v23);
  }
}

uint64_t sub_10035C0D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_10035B588(a1, v4, v5, v6);
}

id sub_10035C194()
{
  uint64_t v1 = v0;
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v3 = result;
    NSString v4 = String._bridgeToObjectiveC()();
    int v5 = [v3 applicationIsInstalled:v4];

    if (qword_1003EC4D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100044058(v6, (uint64_t)qword_1003F5940);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      sub_100037004(0xD000000000000027, 0x800000010037A8B0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2080;
      if (v5) {
        uint64_t v10 = 7562585;
      }
      else {
        uint64_t v10 = 28494;
      }
      if (v5) {
        unint64_t v11 = 0xE300000000000000;
      }
      else {
        unint64_t v11 = 0xE200000000000000;
      }
      sub_100037004(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s isFindMyAppInstalled: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + 137) = v5;
    return (id)sub_10035A0C0(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10035C3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v6 = type metadata accessor for DistributedNotification();
  v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = swift_task_alloc();
  sub_100044014(&qword_1003F5B10);
  v4[7] = swift_task_alloc();
  uint64_t v7 = sub_100044014(&qword_1003F5B18);
  v4[8] = v7;
  v4[9] = *(void *)(v7 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F5B20);
  v4[11] = v8;
  v4[12] = *(void *)(v8 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10035C5B4, a4, 0);
}

uint64_t sub_10035C5B4()
{
  if (qword_1003EC4D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = sub_100044058(v1, (uint64_t)qword_1003F5940);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    NSString v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for Distributed notification: com.apple.LaunchServices.applicationUnregistered", v4, 2u);
    swift_slowDealloc();
  }

  int v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *int v5 = v0;
  v5[1] = sub_10035C704;
  return daemon.getter();
}

uint64_t sub_10035C704(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_10035D080(&qword_1003F0E30, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10035C860, v3, v2);
}

uint64_t sub_10035C860()
{
  *(void *)(v0 + 136) = Daemon.distributedNotificationHandler.getter();
  swift_release();
  type metadata accessor for DistributedNotificationHandler();
  sub_10035D080(&qword_1003F5B28, 255, (void (*)(uint64_t))&type metadata accessor for DistributedNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10035C93C, v2, v1);
}

uint64_t sub_10035C93C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  dispatch thunk of DistributedNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_10035C9CC, v1, 0);
}

uint64_t sub_10035C9CC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_10035D080(qword_1003F5AC0, v4, (void (*)(uint64_t))type metadata accessor for AppDeletionService);
  v0[18] = v5;
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[19] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10035CAE8;
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[7];
  return AsyncStream.Iterator.next(isolation:)(v9, v6, v5, v8);
}

uint64_t sub_10035CAE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10035CBF8, v1, 0);
}

uint64_t sub_10035CBF8()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v2);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[3];
    int v13 = (void (**)(uint64_t, uint64_t))(v0[4] + 8);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_10035D080(&qword_1003F5B30, 255, (void (*)(uint64_t))&type metadata accessor for DistributedNotification);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 4) = sub_100037004(v15, v16, &v25);
      swift_bridgeObjectRelease();
      uint64_t v17 = *v13;
      (*v13)(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Process application unregistered: %s", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *v13;
      (*v13)(v0[5], v0[3]);
    }

    uint64_t v18 = v0[6];
    uint64_t v19 = v0[3];
    sub_10035C194();
    v17(v18, v19);
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[2];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[19] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10035CAE8;
    uint64_t v23 = v0[11];
    uint64_t v24 = v0[7];
    return AsyncStream.Iterator.next(isolation:)(v24, v21, v20, v23);
  }
}

uint64_t sub_10035CF3C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100018CD0;
  return sub_10035C3F0(a1, v4, v5, v6);
}

uint64_t sub_10035CFFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C490);
  sub_100044058(v0, (uint64_t)qword_10040C490);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10035D080(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10035D0C8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10035D194(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100359C70(a1, v4, v5);
}

uint64_t sub_10035D208()
{
  uint64_t v1 = sub_100044014(&qword_1003F0080);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10035D36C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_100044014(&qword_1003F0080) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10004A274;
  return sub_100359EC4(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_10035D4D0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10035D5A4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10004A274;
  return _swift_task_switch(sub_100359E64, v3, 0);
}

uint64_t sub_10035D68C()
{
  uint64_t v0 = sub_100044014((uint64_t *)&unk_1003EE800);
  sub_100052FAC(v0, qword_1003F5B60);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_1003F5B60);
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t static Date.testSetNow(date:)(uint64_t a1)
{
  if (static SystemInfo.underTest.getter())
  {
    if (qword_1003EC4E0 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_100044014((uint64_t *)&unk_1003EE800);
    uint64_t v3 = sub_100044058(v2, (uint64_t)qword_1003F5B60);
    swift_beginAccess();
    sub_10035D880(a1, v3);
    return swift_endAccess();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10035D810()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C4A8);
  sub_100044058(v0, (uint64_t)qword_10040C4A8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10035D880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003EE800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035D8E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C4C0);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040C4C0);
  if (qword_1003EC4F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040C4D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10035D9B0(char a1)
{
  if (a1 == 2) {
    return 0x6E776F6E6B6E752ELL;
  }
  if (a1 == 3) {
    return 0x6C616974696E692ELL;
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000012;
}

uint64_t sub_10035DAA8()
{
  return sub_10035D9B0(*v0);
}

uint64_t sub_10035DAB0(uint64_t a1, uint64_t a2)
{
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v4 = type metadata accessor for SystemVersionNumber();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10035DB80, v2, 0);
}

uint64_t sub_10035DB80()
{
  uint64_t v27 = v0;
  if (qword_1003EC4F0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for Logger();
  sub_100044058(v7, (uint64_t)qword_10040C4C0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v8(v3, v6, v4);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  if (v11)
  {
    uint64_t v25 = v0[8];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_100360A88(&qword_1003F0108, 255, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100037004(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v15);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_100037004(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v25, v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "LocationMonitor: migrate from %s to %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v12, v15);
    v22(v13, v15);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10035DE94(uint64_t a1)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100044014(&qword_1003F0070);
  uint64_t v38 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v37 = v2;
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  BOOL v11 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - v12;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    int64_t v40 = v13;
    UUID.init()();
    uint64_t v30 = v3;
    int v32 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v32(v11, v13, v7);
    uint64_t v28 = v1;
    uint64_t v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v35 = v8;
    unint64_t v39 = v6;
    uint64_t v31 = v16 | 7;
    uint64_t v17 = swift_allocObject();
    uint64_t v18 = v38;
    *(void *)(v17 + 16) = v15;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v33 = v8 + 32;
    int64_t v34 = v19;
    v19((char *)(v17 + ((v16 + 24) & ~v16)), v11, v7);
    swift_retain();
    uint64_t v20 = v28;
    uint64_t v21 = v36;
    AsyncStream.Continuation.onTermination.setter();
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v39, 1, 1, v22);
    uint64_t v23 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v30, v21, v20);
    uint64_t v24 = v29;
    v32(v29, v40, v7);
    unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    unint64_t v26 = (v37 + v16 + v25) & ~v16;
    uint64_t v27 = (char *)swift_allocObject();
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = v15;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v27[v25], v23, v20);
    v34(&v27[v26], v24, v7);
    swift_retain();
    sub_10010405C((uint64_t)v39, (uint64_t)&unk_1003F5CF8, (uint64_t)v27);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v40, v7);
  }
  return result;
}

uint64_t sub_10035E280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_100044014((uint64_t *)&unk_1003F3C10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v13[v12], (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_10010405C((uint64_t)v10, (uint64_t)&unk_1003F5D08, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10035E454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10035E474, a4, 0);
}

uint64_t sub_10035E474()
{
  sub_10035F0EC(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10035E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  void v6[2] = a4;
  uint64_t v8 = sub_100044014(&qword_1003F5CE8);
  v6[5] = v8;
  v6[6] = *(void *)(v8 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_10035E5A0, a4, 0);
}

uint64_t sub_10035E5A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10035ED08(*(void *)(v0 + 24), *(void *)(v0 + 32));
  *(unsigned char *)(v0 + 65) = *(unsigned char *)(v1 + 136);
  return _swift_task_switch(sub_10035E614, 0, 0);
}

uint64_t sub_10035E614()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 64) = *(unsigned char *)(v0 + 65);
  sub_100044014(&qword_1003F0070);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10035E6D0(int a1)
{
  unint64_t v2 = v1;
  LODWORD(v3) = a1;
  uint64_t v50 = sub_100044014(&qword_1003F5CE8);
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003F0070);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v41 - v12;
  int v13 = *(unsigned __int8 *)(v2 + 136);
  if (v13 == 2)
  {
    if (v3 == 2) {
      return result;
    }
    goto LABEL_9;
  }
  if (v13 == 3)
  {
    if (v3 == 3) {
      return result;
    }
    goto LABEL_9;
  }
  if ((v3 & 0xFE) == 2 || ((v3 ^ ((v13 & 1) == 0)) & 1) == 0)
  {
LABEL_9:
    uint64_t v42 = v4;
    if (qword_1003EC4F0 != -1) {
LABEL_43:
    }
      swift_once();
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100044058(v14, (uint64_t)qword_10040C4C0);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      uint64_t v47 = v15;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v45 = v19 + 4;
      uint64_t v20 = sub_10035D9B0(*(unsigned char *)(v2 + 136));
      LODWORD(v46) = v18;
      uint64_t v51 = sub_100037004(v20, v21, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v45 = v19 + 14;
      uint64_t v22 = sub_10035D9B0(v3);
      uint64_t v51 = sub_100037004(v22, v23, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v46, "State: %s -> %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    LODWORD(v47) = v3;
    *(unsigned char *)(v2 + 136) = v3;
    unint64_t v24 = v2 + 128;
    swift_beginAccess();
    uint64_t v3 = *(void *)(*(void *)(v2 + 128) + 16);
    if (v3)
    {
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134217984;
        uint64_t v51 = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Publishing State change event to %ld subscribers", v27, 0xCu);
        swift_slowDealloc();
      }
    }
    uint64_t v28 = *(void *)v24;
    uint64_t v29 = *(void *)(*(void *)v24 + 64);
    uint64_t v43 = *(void *)v24 + 64;
    uint64_t v30 = 1 << *(unsigned char *)(v28 + 32);
    uint64_t v31 = -1;
    if (v30 < 64) {
      uint64_t v31 = ~(-1 << v30);
    }
    unint64_t v2 = v31 & v29;
    uint64_t v46 = v7 + 16;
    int64_t v44 = (unint64_t)(v30 + 63) >> 6;
    uint64_t v45 = v7 + 32;
    int v32 = (void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v33 = v28;
    swift_bridgeObjectRetain();
    int64_t v34 = 0;
    while (1)
    {
      if (v2)
      {
        unint64_t v35 = __clz(__rbit64(v2));
        v2 &= v2 - 1;
        unint64_t v36 = v35 | (v34 << 6);
      }
      else
      {
        int64_t v38 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v38 >= v44) {
          return swift_release();
        }
        unint64_t v39 = *(void *)(v43 + 8 * v38);
        ++v34;
        if (!v39)
        {
          int64_t v34 = v38 + 1;
          if (v38 + 1 >= v44) {
            return swift_release();
          }
          unint64_t v39 = *(void *)(v43 + 8 * v34);
          if (!v39)
          {
            int64_t v34 = v38 + 2;
            if (v38 + 2 >= v44) {
              return swift_release();
            }
            unint64_t v39 = *(void *)(v43 + 8 * v34);
            if (!v39)
            {
              int64_t v34 = v38 + 3;
              if (v38 + 3 >= v44) {
                return swift_release();
              }
              unint64_t v39 = *(void *)(v43 + 8 * v34);
              if (!v39)
              {
                int64_t v40 = v38 + 4;
                if (v40 >= v44) {
                  return swift_release();
                }
                unint64_t v39 = *(void *)(v43 + 8 * v40);
                if (!v39)
                {
                  while (1)
                  {
                    int64_t v34 = v40 + 1;
                    if (__OFADD__(v40, 1)) {
                      goto LABEL_42;
                    }
                    if (v34 >= v44) {
                      return swift_release();
                    }
                    unint64_t v39 = *(void *)(v43 + 8 * v34);
                    ++v40;
                    if (v39) {
                      goto LABEL_38;
                    }
                  }
                }
                int64_t v34 = v40;
              }
            }
          }
        }
LABEL_38:
        unint64_t v2 = (v39 - 1) & v39;
        unint64_t v36 = __clz(__rbit64(v39)) + (v34 << 6);
      }
      uint64_t v37 = v48;
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v48, *(void *)(v33 + 56) + *(void *)(v7 + 72) * v36, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v37, v6);
      LOBYTE(v51) = v47;
      uint64_t v3 = (uint64_t)v49;
      AsyncStream.Continuation.yield(_:)();
      (*v32)(v3, v50);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  return result;
}

uint64_t sub_10035ED08(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100044014(&qword_1003F0428);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int v32 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int v13 = (char *)v26 - v12;
  if (qword_1003EC4F0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040C4C0);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v31 = a2;
  v30(v13, a2, v8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v7;
    int v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v29 = v2;
    v34[0] = v19;
    uint64_t v27 = a1;
    *(_DWORD *)int v18 = 136446210;
    v26[1] = v18 + 4;
    sub_100360A88(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = sub_100037004(v20, v21, v34);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Storing stateContinuation for %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v28;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  uint64_t v22 = (uint64_t)v32;
  v30(v32, v31, v8);
  uint64_t v23 = sub_100044014(&qword_1003F0070);
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v7, a1, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
  swift_beginAccess();
  sub_10012CA84((uint64_t)v7, v22);
  return swift_endAccess();
}

uint64_t sub_10035F0EC(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003F0428);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - v10;
  if (qword_1003EC4F0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100044058(v12, (uint64_t)qword_10040C4C0);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v11, a1, v6);
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    unint64_t v25 = v5;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = v1;
    v30[0] = v17;
    uint64_t v24 = a1;
    *(_DWORD *)os_log_type_t v16 = 136446210;
    uint64_t v23 = v16 + 4;
    sub_100360A88(&qword_1003ECF68, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_100037004(v18, v19, v30);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Removing stateContinuation for %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }

  uint64_t v20 = (uint64_t)v28;
  v27(v28, a1, v6);
  uint64_t v21 = sub_100044014(&qword_1003F0070);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v5, 1, 1, v21);
  swift_beginAccess();
  sub_10012CA84((uint64_t)v5, v20);
  return swift_endAccess();
}

uint64_t type metadata accessor for LocationMonitor()
{
  return self;
}

uint64_t getEnumTagSinglePayload for LocationMonitor.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10035F568);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocationMonitor.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10035F650);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationMonitor.State()
{
  return &type metadata for LocationMonitor.State;
}

uint64_t sub_10035F688()
{
  return _swift_task_switch(sub_10035F6A4, v0, 0);
}

uint64_t sub_10035F6A4()
{
  if (qword_1003EC4F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C4C0);
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocationMonitor: initialLaunchProcessing", v4, 2u);
    swift_slowDealloc();
  }

  unsigned int v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10035F7B8(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = sub_10004A274;
  return sub_10035DAB0(a1, a2);
}

uint64_t sub_10035F85C(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for LocationMonitor();
  *int v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10035F904(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for LocationMonitor();
  *int v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_10035F9AC()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_10035FA68, v0, 0);
}

uint64_t sub_10035FA68()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v6 = sub_100360A88(qword_1003F5CA8, v5, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v6;
  v7[4] = v3;
  v7[5] = v2;
  swift_retain_n();
  sub_10010405C(v1, (uint64_t)&unk_1003F5CE0, (uint64_t)v7);
  swift_release();
  swift_task_dealloc();
  unsigned int v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10035FBAC()
{
  type metadata accessor for LocationMonitor();
  sub_100360A88(&qword_1003F1D38, v0, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_10035FC14(uint64_t a1, uint64_t a2)
{
  return sub_100360A88(&qword_1003F5CA0, a2, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
}

uint64_t sub_10035FC5C(uint64_t a1, uint64_t a2)
{
  return sub_100360A88(qword_1003F5CA8, a2, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
}

uint64_t sub_10035FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a4;
  uint64_t v6 = type metadata accessor for DarwinNotification();
  v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = swift_task_alloc();
  sub_100044014(&qword_1003F0E88);
  v4[7] = swift_task_alloc();
  uint64_t v7 = sub_100044014(&qword_1003F0E98);
  v4[8] = v7;
  v4[9] = *(void *)(v7 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F0E90);
  v4[11] = v8;
  v4[12] = *(void *)(v8 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10035FE68, a4, 0);
}

uint64_t sub_10035FE68()
{
  if (qword_1003EC4F0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = sub_100044058(v1, (uint64_t)qword_10040C4C0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Registering listener for Darwin notification: com.apple.locationd.authorization", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10035FFB8;
  return daemon.getter();
}

uint64_t sub_10035FFB8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  type metadata accessor for Daemon();
  sub_100360A88(&qword_1003F0E30, 255, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100360114, v3, v2);
}

uint64_t sub_100360114()
{
  *(void *)(v0 + 136) = Daemon.darwinNotificationHandler.getter();
  swift_release();
  type metadata accessor for DarwinNotificationHandler();
  sub_100360A88(&qword_1003F0EA0, 255, (void (*)(uint64_t))&type metadata accessor for DarwinNotificationHandler);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003601F0, v2, v1);
}

uint64_t sub_1003601F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  dispatch thunk of DarwinNotificationHandler.asyncStream(name:)();
  swift_release();
  return _swift_task_switch(sub_100360280, v1, 0);
}

uint64_t sub_100360280()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_100360A88(qword_1003F5CA8, v4, (void (*)(uint64_t))type metadata accessor for LocationMonitor);
  v0[18] = v5;
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[19] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10036039C;
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[7];
  return AsyncStream.Iterator.next(isolation:)(v9, v6, v5, v8);
}

uint64_t sub_10036039C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003604AC, v1, 0);
}

uint64_t sub_1003604AC()
{
  int v32 = v0;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v6 = v0[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v6, v2);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[3];
    int v13 = (void (**)(uint64_t, uint64_t))(v0[4] + 8);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_100360A88(&qword_1003F39E0, 255, (void (*)(uint64_t))&type metadata accessor for DarwinNotification);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v14 + 4) = sub_100037004(v15, v16, &v31);
      swift_bridgeObjectRelease();
      uint64_t v17 = *v13;
      (*v13)(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Process location authorization change: %s", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *v13;
      (*v13)(v0[5], v0[3]);
    }

    int v18 = [self locationServicesEnabled];
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      if (v18) {
        uint64_t v22 = 0x44454C42414E45;
      }
      else {
        uint64_t v22 = 0x44454C4241534944;
      }
      if (v18) {
        unint64_t v23 = 0xE700000000000000;
      }
      else {
        unint64_t v23 = 0xE800000000000000;
      }
      *(void *)(v21 + 4) = sub_100037004(v22, v23, &v31);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "*** Location Authorization Event *** %s", (uint8_t *)v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v24 = v0[6];
    uint64_t v25 = v0[3];
    sub_10035E6D0(v18);
    v17(v24, v25);
    uint64_t v26 = v0[18];
    uint64_t v27 = v0[2];
    uint64_t v28 = (void *)swift_task_alloc();
    v0[19] = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_10036039C;
    uint64_t v29 = v0[11];
    uint64_t v30 = v0[7];
    return AsyncStream.Iterator.next(isolation:)(v30, v27, v26, v29);
  }
}

uint64_t sub_100360904()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100360944(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100018CD0;
  return sub_10035FCA4(a1, v4, v5, v6);
}

uint64_t sub_100360A04()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040C4D8);
  sub_100044058(v0, (uint64_t)qword_10040C4D8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100360A88(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100360AD0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100360B9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10035E280(a1, v4, v5);
}

uint64_t sub_100360C10()
{
  uint64_t v1 = sub_100044014(&qword_1003F0070);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100360D74(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_100044014(&qword_1003F0070) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10004A274;
  return sub_10035E4D4(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_100360ED8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100360FAC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10004A274;
  return _swift_task_switch(sub_10035E474, v3, 0);
}

uint64_t sub_100361094()
{
  *(void *)(v1 + 48) = v0;
  return _swift_task_switch(sub_1003610B4, 0, 0);
}

uint64_t sub_1003610B4()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_10036118C;
  uint64_t v2 = *(void *)(v0 + 48);
  return withTimeout<A>(_:block:)(v0 + 16, 0x8AC7230489E80000, 0, &unk_1003F5D28, v2, &type metadata for String);
}

uint64_t sub_10036118C()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100361698;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1003612A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003612A8()
{
  unint64_t v19 = v0;
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 == 0xD000000000000018 && v1 == 0x800000010037A9F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v3 = static SystemInfo.isInternalBuild.getter();
  }
  else
  {
    uint64_t v6 = &qword_1003EC000;
    if (qword_1003EC400 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040C278);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v17 = v7;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      v0[5] = sub_100037004(v2, v1, &v18);
      uint64_t v6 = &qword_1003EC000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking if %s is running", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v7 = v17;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v11 = v0[8];
    char v3 = sub_100361B3C(v2, v1);
    swift_bridgeObjectRelease();
    if (v11)
    {
      if (v6[128] != -1) {
        swift_once();
      }
      sub_100044058(v7, (uint64_t)qword_10040C278);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 138543362;
        swift_errorRetain();
        uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
        v0[4] = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v15 = v16;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "RunningBoardProcess threw an error: %{public}@", v14, 0xCu);
        sub_100044014(&qword_1003ECCC8);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      char v3 = 0;
    }
  }
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(v3 & 1);
}

uint64_t sub_100361698()
{
  swift_release();
  if (qword_1003EC400 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C278);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RunningBoardProcess threw an error: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(0);
}

uint64_t sub_1003618A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1003618C0, 0, 0);
}

uint64_t sub_1003618C0()
{
  v0[4] = *(void *)(v0[3] + 112);
  os_log_type_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of FM.XPCSession.connection.getter
                         + async function pointer to dispatch thunk of FM.XPCSession.connection.getter);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  void *v1 = v0;
  v1[1] = sub_10036197C;
  return v3();
}

uint64_t sub_10036197C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100361A9C, 0, 0);
}

uint64_t sub_100361A9C()
{
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = NSXPCConnection.codeSigningIdentity.getter();
  uint64_t v4 = v3;

  uint64_t v5 = (uint64_t *)v0[2];
  *uint64_t v5 = v2;
  v5[1] = v4;
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

BOOL sub_100361B3C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = self;
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [self predicateMatchingBundleIdentifier:v5];

  id v26 = 0;
  id v7 = [v4 statesForPredicate:v6 withDescriptor:0 error:&v26];

  id v8 = v26;
  if (!v7)
  {
    id v19 = v26;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v20;
  }
  sub_10036247C();
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = v8;

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v11 = *(void **)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_4:
      if ((v9 & 0xC000000000000001) != 0)
      {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v12 = *(id *)(v9 + 32);
      }
      uint64_t v11 = v12;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1003EC400 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100044058(v13, (uint64_t)qword_10040C278);
  id v14 = v11;
  swift_bridgeObjectRetain_n();
  id v15 = v14;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    id v26 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    sub_100037004(a1, a2, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    if (v11) {
      [v15 taskState];
    }
    sub_100044014(&qword_1003F5D38);
    uint64_t v23 = String.init<A>(describing:)();
    sub_100037004(v23, v24, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RunningBoardProcess: %s %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v11) {
      return 0;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!v11) {
      return 0;
    }
  }
  id v21 = v15;
  if ([v21 taskState] == 2)
  {

    return 1;
  }
  else
  {
    unsigned int v22 = [v21 taskState];

    return v22 == 4;
  }
}

uint64_t sub_100361F74(char a1)
{
  *(unsigned char *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100362074, 0, 0);
}

uint64_t sub_100362074()
{
  char v1 = *(unsigned char *)(v0 + 192);
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  if (v1)
  {
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t result = swift_release();
  uint64_t v3 = *(void *)(v0 + 152);
  unint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 120);
  if (v5 < 0)
  {
    uint64_t v10 = __CocoaSet.Iterator.next()();
    if (!v10) {
      goto LABEL_31;
    }
    *(void *)(v0 + 72) = v10;
    type metadata accessor for LocationServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v9 = *(void *)(v0 + 64);
    swift_unknownObjectRelease();
    uint64_t v8 = v3;
    uint64_t v6 = v4;
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = (v4 - 1) & v4;
      unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v8 = *(void *)(v0 + 152);
    }
    else
    {
      int64_t v13 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        return result;
      }
      int64_t v14 = (unint64_t)(*(void *)(v0 + 136) + 64) >> 6;
      if (v13 >= v14) {
        goto LABEL_31;
      }
      uint64_t v15 = *(void *)(v0 + 128);
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      uint64_t v8 = v3 + 1;
      if (!v16)
      {
        uint64_t v8 = v3 + 2;
        if (v3 + 2 >= v14) {
          goto LABEL_31;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v8);
        if (!v16)
        {
          uint64_t v8 = v3 + 3;
          if (v3 + 3 >= v14) {
            goto LABEL_31;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v8);
          if (!v16)
          {
            uint64_t v8 = v3 + 4;
            if (v3 + 4 >= v14) {
              goto LABEL_31;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v8);
            if (!v16)
            {
              uint64_t v8 = v3 + 5;
              if (v3 + 5 >= v14) {
                goto LABEL_31;
              }
              unint64_t v16 = *(void *)(v15 + 8 * v8);
              if (!v16)
              {
                uint64_t v17 = v3 + 6;
                while (v14 != v17)
                {
                  unint64_t v16 = *(void *)(v15 + 8 * v17++);
                  if (v16)
                  {
                    uint64_t v8 = v17 - 1;
                    goto LABEL_18;
                  }
                }
                goto LABEL_31;
              }
            }
          }
        }
      }
LABEL_18:
      uint64_t v6 = (v16 - 1) & v16;
      unint64_t v7 = __clz(__rbit64(v16)) + (v8 << 6);
    }
    uint64_t v9 = *(void *)(*(void *)(v5 + 48) + 8 * v7);
    swift_retain();
  }
  *(void *)(v0 + 152) = v8;
  *(void *)(v0 + 160) = v6;
  *(void *)(v0 + 144) = v9;
  if (v9)
  {
    BOOL v20 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                          + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v11;
    void *v11 = v0;
    v11[1] = sub_10000466C;
    uint64_t v12 = *(void *)(v0 + 112);
    return v20(v12);
  }
LABEL_31:
  sub_1001491B4();
  uint64_t v18 = *(void *)(v0 + 56);
  swift_task_dealloc();
  id v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v19(v18);
}

unint64_t sub_100362374()
{
  unint64_t result = qword_1003F3190;
  if (!qword_1003F3190)
  {
    type metadata accessor for LocationServiceClient();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F3190);
  }
  return result;
}

uint64_t sub_1003623CC(uint64_t a1)
{
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003F5D20 + dword_1003F5D20);
  return v5(a1, v1);
}

unint64_t sub_10036247C()
{
  unint64_t result = qword_1003F5D30;
  if (!qword_1003F5D30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003F5D30);
  }
  return result;
}

void sub_1003624CC(uint64_t a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = MGCopyAnswerWithError();

  if (v3)
  {
    *(void *)(a1 + 24) = swift_getObjectType();
    *(void *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t sub_100362738(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F5890);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100362798()
{
  sub_1003624CC((uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v6;
    }
  }
  else
  {
    sub_100362738((uint64_t)v7);
  }
  if (qword_1003EC080 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B7F8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not get serial number", v5, 2u);
    swift_slowDealloc();
  }

  return 0;
}

unsigned __int8 *sub_1003628F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003629F8(a1, a2, a3);
}

unsigned __int8 *sub_100362910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100362C74();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_1003629F8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1003629F8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100362C74()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100362CF4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100362CF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100362E4C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1000379D0(v9, 0),
          unint64_t v12 = sub_100362F4C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100362E4C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_10008029C(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_10008029C(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_100362F4C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_10008029C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_10008029C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100363160()
{
  if ((static SystemInfo.isInternalBuild.getter() & 1) == 0) {
    return 0;
  }
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  uint64_t v6 = HIBYTE(v5) & 0xF;
  uint64_t v7 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
    {
      if ((v3 & 0x1000000000000000) != 0) {
        uint64_t v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v10 = (uint64_t)sub_1003629F8(v9, v7, 10);
      LOBYTE(v3) = v11 & 1;
      goto LABEL_46;
    }
    v26[0] = v3;
    v26[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    if (v3 == 43)
    {
      if (!v6) {
        goto LABEL_60;
      }
      if (v6 == 1 || (BYTE1(v3) - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v10 = (BYTE1(v3) - 48);
      if (v6 != 2)
      {
        if ((BYTE2(v3) - 48) > 9u) {
          goto LABEL_33;
        }
        uint64_t v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
        uint64_t v12 = v6 - 3;
        if (v12)
        {
          uint64_t v13 = (unsigned __int8 *)v26 + 3;
          while (1)
          {
            unsigned int v14 = *v13 - 48;
            if (v14 > 9) {
              goto LABEL_33;
            }
            uint64_t v15 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
              goto LABEL_33;
            }
            uint64_t v10 = v15 + v14;
            if (__OFADD__(v15, v14)) {
              goto LABEL_33;
            }
            LOBYTE(v3) = 0;
            ++v13;
            if (!--v12) {
              goto LABEL_46;
            }
          }
        }
      }
    }
    else
    {
      if (v3 == 45)
      {
        if (v6)
        {
          if (v6 != 1 && (BYTE1(v3) - 48) <= 9u)
          {
            if (v6 == 2)
            {
              LOBYTE(v3) = 0;
              uint64_t v10 = -(uint64_t)(BYTE1(v3) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(v3) - 48) <= 9u)
            {
              uint64_t v10 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
              uint64_t v20 = v6 - 3;
              if (!v20) {
                goto LABEL_45;
              }
              uint64_t v22 = (unsigned __int8 *)v26 + 3;
              while (1)
              {
                unsigned int v23 = *v22 - 48;
                if (v23 > 9) {
                  break;
                }
                uint64_t v24 = 10 * v10;
                if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
                  break;
                }
                uint64_t v10 = v24 - v23;
                if (__OFSUB__(v24, v23)) {
                  break;
                }
                LOBYTE(v3) = 0;
                ++v22;
                if (!--v20) {
                  goto LABEL_46;
                }
              }
            }
          }
LABEL_33:
          uint64_t v10 = 0;
          LOBYTE(v3) = 1;
          goto LABEL_46;
        }
        __break(1u);
LABEL_60:
        __break(1u);
        return type metadata accessor for SystemInfo.DeviceLockState();
      }
      if (!v6 || (v3 - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v10 = (v3 - 48);
      if (v6 != 1)
      {
        if ((BYTE1(v3) - 48) > 9u) {
          goto LABEL_33;
        }
        uint64_t v10 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
        uint64_t v16 = v6 - 2;
        if (v16)
        {
          unint64_t v17 = (unsigned __int8 *)v26 + 2;
          while (1)
          {
            unsigned int v18 = *v17 - 48;
            if (v18 > 9) {
              goto LABEL_33;
            }
            uint64_t v19 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
              goto LABEL_33;
            }
            uint64_t v10 = v19 + v18;
            if (__OFADD__(v19, v18)) {
              goto LABEL_33;
            }
            LOBYTE(v3) = 0;
            ++v17;
            if (!--v16) {
              goto LABEL_46;
            }
          }
        }
      }
    }
LABEL_45:
    LOBYTE(v3) = 0;
    goto LABEL_46;
  }
  uint64_t v10 = (uint64_t)sub_100362910(v3, v5, 10);
  LOBYTE(v3) = v25;
LABEL_46:
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
  else {
    return v10;
  }
}

uint64_t type metadata accessor for SystemInfo.DeviceLockState()
{
  return type metadata accessor for SystemInfo.DeviceLockState();
}

uint64_t static SystemInfo.lockState.getter()
{
  return static SystemInfo.lockState.getter();
}

uint64_t static SystemInfo.regionCode.getter()
{
  return static SystemInfo.regionCode.getter();
}

uint64_t static SystemInfo.arrowChipID.getter()
{
  return static SystemInfo.arrowChipID.getter();
}

uint64_t static SystemInfo.deviceClass.getter()
{
  return static SystemInfo.deviceClass.getter();
}

uint64_t static SystemInfo.productType.getter()
{
  return static SystemInfo.productType.getter();
}

uint64_t static SystemInfo.buildVersion.getter()
{
  return static SystemInfo.buildVersion.getter();
}

uint64_t static SystemInfo.uniqueDeviceID.getter()
{
  return static SystemInfo.uniqueDeviceID.getter();
}

uint64_t static SystemInfo.isInternalBuild.getter()
{
  return static SystemInfo.isInternalBuild.getter();
}

uint64_t static SystemInfo.platform.getter()
{
  return static SystemInfo.platform.getter();
}

uint64_t static SystemInfo.osVersion.getter()
{
  return static SystemInfo.osVersion.getter();
}

uint64_t static SystemInfo.underTest.getter()
{
  return static SystemInfo.underTest.getter();
}

uint64_t static Transaction.currentNSXPCConnection.getter()
{
  return static Transaction.currentNSXPCConnection.getter();
}

uint64_t static Transaction.asyncTask(name:block:)()
{
  return static Transaction.asyncTask(name:block:)();
}

uint64_t type metadata accessor for Transaction()
{
  return type metadata accessor for Transaction();
}

uint64_t dispatch thunk of XPCActivity.done()()
{
  return dispatch thunk of XPCActivity.done()();
}

uint64_t type metadata accessor for XPCActivity.State()
{
  return type metadata accessor for XPCActivity.State();
}

uint64_t dispatch thunk of XPCActivity.defer()()
{
  return dispatch thunk of XPCActivity.defer()();
}

uint64_t static XPCActivity.Criteria.Options.requiresClassC.getter()
{
  return static XPCActivity.Criteria.Options.requiresClassC.getter();
}

uint64_t static XPCActivity.Criteria.Options.requiresNetwork.getter()
{
  return static XPCActivity.Criteria.Options.requiresNetwork.getter();
}

uint64_t type metadata accessor for XPCActivity.Criteria.Options()
{
  return type metadata accessor for XPCActivity.Criteria.Options();
}

uint64_t XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)()
{
  return XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
}

uint64_t type metadata accessor for XPCActivity.Criteria()
{
  return type metadata accessor for XPCActivity.Criteria();
}

uint64_t type metadata accessor for XPCActivity.Priority()
{
  return type metadata accessor for XPCActivity.Priority();
}

uint64_t type metadata accessor for XPCActivity()
{
  return type metadata accessor for XPCActivity();
}

uint64_t type metadata accessor for GenericError()
{
  return type metadata accessor for GenericError();
}

uint64_t type metadata accessor for HashAlgorithm()
{
  return type metadata accessor for HashAlgorithm();
}

uint64_t WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)()
{
  return WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
}

{
  return WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
}

uint64_t WorkItemQueue.WorkItem.id.getter()
{
  return WorkItemQueue.WorkItem.id.getter();
}

uint64_t type metadata accessor for WorkItemQueue.WorkItem()
{
  return type metadata accessor for WorkItemQueue.WorkItem();
}

uint64_t WorkItemQueue.__allocating_init(identifier:)()
{
  return WorkItemQueue.__allocating_init(identifier:)();
}

uint64_t WorkItemQueue.__allocating_init(name:identifier:)()
{
  return WorkItemQueue.__allocating_init(name:identifier:)();
}

uint64_t WorkItemQueue.name.getter()
{
  return WorkItemQueue.name.getter();
}

uint64_t dispatch thunk of WorkItemQueue.enqueue(_:)()
{
  return dispatch thunk of WorkItemQueue.enqueue(_:)();
}

uint64_t type metadata accessor for WorkItemQueue()
{
  return type metadata accessor for WorkItemQueue();
}

uint64_t ManagedDefault.wrappedValue.getter()
{
  return ManagedDefault.wrappedValue.getter();
}

uint64_t ManagedDefault.wrappedValue.setter()
{
  return ManagedDefault.wrappedValue.setter();
}

uint64_t ManagedDefault.init(prefixedDefaults:key:)()
{
  return ManagedDefault.init(prefixedDefaults:key:)();
}

uint64_t MachServiceName.description.getter()
{
  return MachServiceName.description.getter();
}

uint64_t type metadata accessor for MachServiceName()
{
  return type metadata accessor for MachServiceName();
}

uint64_t MachServiceName.init(_:)()
{
  return MachServiceName.init(_:)();
}

uint64_t PrefixedDefaults.init(prefix:)()
{
  return PrefixedDefaults.init(prefix:)();
}

uint64_t type metadata accessor for PrefixedDefaults()
{
  return type metadata accessor for PrefixedDefaults();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t XPCAcceptedClient.hash(into:)()
{
  return XPCAcceptedClient.hash(into:)();
}

uint64_t dispatch thunk of XPCSessionManager.register(service:)()
{
  return dispatch thunk of XPCSessionManager.register(service:)();
}

uint64_t type metadata accessor for XPCSessionManager()
{
  return type metadata accessor for XPCSessionManager();
}

uint64_t type metadata accessor for DarwinNotification()
{
  return type metadata accessor for DarwinNotification();
}

uint64_t AsyncStreamProvider.yield(value:transaction:)()
{
  return AsyncStreamProvider.yield(value:transaction:)();
}

uint64_t AsyncStreamProvider.stream(initialEvents:)()
{
  return AsyncStreamProvider.stream(initialEvents:)();
}

uint64_t AsyncStreamProvider.init()()
{
  return AsyncStreamProvider.init()();
}

uint64_t XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)()
{
  return XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)();
}

uint64_t type metadata accessor for XPCServiceDescription()
{
  return type metadata accessor for XPCServiceDescription();
}

uint64_t OnceCheckedContinuation.resume(throwing:)()
{
  return OnceCheckedContinuation.resume(throwing:)();
}

uint64_t OnceCheckedContinuation.resume(returning:)()
{
  return OnceCheckedContinuation.resume(returning:)();
}

uint64_t OnceCheckedContinuation.resume<>()()
{
  return OnceCheckedContinuation.resume<>()();
}

uint64_t type metadata accessor for Feature.FindMy()
{
  return type metadata accessor for Feature.FindMy();
}

uint64_t valueOf(entitlement:)()
{
  return valueOf(entitlement:)();
}

uint64_t type metadata accessor for Keychain.DataProtectionClass()
{
  return type metadata accessor for Keychain.DataProtectionClass();
}

uint64_t static Keychain.set<A>(data:account:service:dataProtectionClass:)()
{
  return static Keychain.set<A>(data:account:service:dataProtectionClass:)();
}

uint64_t static Keychain.data(account:service:)()
{
  return static Keychain.data(account:service:)();
}

uint64_t static XPCAlarm.unregister(identifier:)()
{
  return static XPCAlarm.unregister(identifier:)();
}

uint64_t XPCAlarm.Criteria.init(date:options:)()
{
  return XPCAlarm.Criteria.init(date:options:)();
}

uint64_t static XPCAlarm.Criteria.Options.userVisible.getter()
{
  return static XPCAlarm.Criteria.Options.userVisible.getter();
}

uint64_t type metadata accessor for XPCAlarm.Criteria.Options()
{
  return type metadata accessor for XPCAlarm.Criteria.Options();
}

uint64_t type metadata accessor for XPCAlarm.Criteria()
{
  return type metadata accessor for XPCAlarm.Criteria();
}

uint64_t type metadata accessor for XPCAlarm()
{
  return type metadata accessor for XPCAlarm();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t type metadata accessor for JSONEncoder.DateEncodingStrategy()
{
  return type metadata accessor for JSONEncoder.DateEncodingStrategy();
}

uint64_t dispatch thunk of JSONEncoder.dateEncodingStrategy.setter()
{
  return dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t DataProtocol.stableUUID.getter()
{
  return DataProtocol.stableUUID.getter();
}

uint64_t DataProtocol.hash(algorithm:)()
{
  return DataProtocol.hash(algorithm:)();
}

uint64_t DataProtocol.hexString.getter()
{
  return DataProtocol.hexString.getter();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.contains(_:)()
{
  return DateInterval.contains(_:)();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.modify()
{
  return URLComponents.path.modify();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.hour.setter()
{
  return DateComponents.hour.setter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t static Data.random(bytes:)()
{
  return static Data.random(bytes:)();
}

uint64_t Data.init<A>(hexString:)()
{
  return Data.init<A>(hexString:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.localISO8601.getter()
{
  return Date.localISO8601.getter();
}

uint64_t Date.epoch.getter()
{
  return Date.epoch.getter();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.init(timeInterval:since:)()
{
  return Date.init(timeInterval:since:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID.nilUUID.getter()
{
  return static UUID.nilUUID.getter();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.firstWeekday.getter()
{
  return Calendar.firstWeekday.getter();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

uint64_t Calendar.weekdaySymbols.getter()
{
  return Calendar.weekdaySymbols.getter();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return type metadata accessor for Calendar.SearchDirection();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.init(identifier:)()
{
  return TimeZone.init(identifier:)();
}

uint64_t TimeZone.identifier.getter()
{
  return TimeZone.identifier.getter();
}

uint64_t TimeZone.abbreviation(for:)()
{
  return TimeZone.abbreviation(for:)();
}

uint64_t TimeZone.secondsFromGMT(for:)()
{
  return TimeZone.secondsFromGMT(for:)();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t Connection.transaction(_:block:)()
{
  return Connection.transaction(_:block:)();
}

uint64_t type metadata accessor for Connection.TransactionMode()
{
  return type metadata accessor for Connection.TransactionMode();
}

uint64_t Connection.run(_:_:)()
{
  return Connection.run(_:_:)();
}

uint64_t Connection.run(_:)()
{
  return Connection.run(_:)();
}

{
  return Connection.run(_:)();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.execute(_:)(Swift::String a1)
{
}

uint64_t Connection.prepare(_:)()
{
  return Connection.prepare(_:)();
}

uint64_t Connection.savepoint(_:block:)()
{
  return Connection.savepoint(_:block:)();
}

uint64_t type metadata accessor for OnConflict()
{
  return type metadata accessor for OnConflict();
}

Swift::String __swiftcall SchemaType.drop(ifExists:)(Swift::Bool ifExists)
{
  uint64_t v1 = SchemaType.drop(ifExists:)(ifExists);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SchemaType.select(_:)()
{
  return SchemaType.select(_:)();
}

uint64_t TableBuilder.column<A>(_:primaryKey:check:defaultValue:)()
{
  return TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
}

uint64_t TableBuilder.column<A>(_:unique:check:defaultValue:)()
{
  return TableBuilder.column<A>(_:unique:check:defaultValue:)();
}

{
  return TableBuilder.column<A>(_:unique:check:defaultValue:)();
}

uint64_t TableBuilder.unique(_:)()
{
  return TableBuilder.unique(_:)();
}

uint64_t ExpressionType.init(_:)()
{
  return ExpressionType.init(_:)();
}

uint64_t ExpressionType<>.lowercaseString.getter()
{
  return ExpressionType<>.lowercaseString.getter();
}

uint64_t & infix<A>(_:_:)()
{
  return & infix<A>(_:_:)();
}

uint64_t == infix<A>(_:_:)()
{
  return == infix<A>(_:_:)();
}

uint64_t <- infix<A>(_:_:)()
{
  return <- infix<A>(_:_:)();
}

{
  return <- infix<A>(_:_:)();
}

uint64_t != infix<A>(_:_:)()
{
  return != infix<A>(_:_:)();
}

uint64_t type metadata accessor for Row()
{
  return type metadata accessor for Row();
}

uint64_t Row.subscript.getter()
{
  return Row.subscript.getter();
}

{
  return Row.subscript.getter();
}

uint64_t Table.create(temporary:ifNotExists:withoutRowid:block:)()
{
  return Table.create(temporary:ifNotExists:withoutRowid:block:)();
}

uint64_t type metadata accessor for Table()
{
  return type metadata accessor for Table();
}

uint64_t Table.init(_:database:)()
{
  return Table.init(_:database:)();
}

uint64_t type metadata accessor for Delete()
{
  return type metadata accessor for Delete();
}

uint64_t type metadata accessor for Insert()
{
  return type metadata accessor for Insert();
}

uint64_t type metadata accessor for Setter()
{
  return type metadata accessor for Setter();
}

uint64_t QueryType.limit(_:)()
{
  return QueryType.limit(_:)();
}

uint64_t QueryType.where(_:)()
{
  return QueryType.where(_:)();
}

uint64_t QueryType.delete()()
{
  return QueryType.delete()();
}

uint64_t QueryType.filter(_:)()
{
  return QueryType.filter(_:)();
}

uint64_t QueryType.insert(or:_:)()
{
  return QueryType.insert(or:_:)();
}

uint64_t static ReferenceClock.now.getter()
{
  return static ReferenceClock.now.getter();
}

uint64_t LocatePriority.reason.getter()
{
  return LocatePriority.reason.getter();
}

uint64_t static LocatePriority.allCases.getter()
{
  return static LocatePriority.allCases.getter();
}

uint64_t LocatePriority.init(rawValue:)()
{
  return LocatePriority.init(rawValue:)();
}

uint64_t LocatePriority.rawValue.getter()
{
  return LocatePriority.rawValue.getter();
}

uint64_t type metadata accessor for LocatePriority()
{
  return type metadata accessor for LocatePriority();
}

uint64_t static HandleType.== infix(_:_:)()
{
  return static HandleType.== infix(_:_:)();
}

uint64_t type metadata accessor for HandleType()
{
  return type metadata accessor for HandleType();
}

uint64_t type metadata accessor for ClientOrigin()
{
  return type metadata accessor for ClientOrigin();
}

uint64_t type metadata accessor for LocationType()
{
  return type metadata accessor for LocationType();
}

uint64_t static PersonHandle.== infix(_:_:)()
{
  return static PersonHandle.== infix(_:_:)();
}

uint64_t PersonHandle.init(id:)()
{
  return PersonHandle.init(id:)();
}

uint64_t PersonHandle.id.getter()
{
  return PersonHandle.id.getter();
}

uint64_t type metadata accessor for PersonHandle()
{
  return type metadata accessor for PersonHandle();
}

uint64_t type metadata accessor for FenceResponse()
{
  return type metadata accessor for FenceResponse();
}

uint64_t type metadata accessor for FollowerState()
{
  return type metadata accessor for FollowerState();
}

uint64_t RequestOrigin.contextApp.getter()
{
  return RequestOrigin.contextApp.getter();
}

uint64_t RequestOrigin.contextBundleApp.getter()
{
  return RequestOrigin.contextBundleApp.getter();
}

uint64_t RequestOrigin.origin.getter()
{
  return RequestOrigin.origin.getter();
}

uint64_t type metadata accessor for RequestOrigin()
{
  return type metadata accessor for RequestOrigin();
}

uint64_t RequestOrigin.init(_:)()
{
  return RequestOrigin.init(_:)();
}

uint64_t type metadata accessor for FollowingState()
{
  return type metadata accessor for FollowingState();
}

uint64_t FriendshipState.init(followerState:followingState:)()
{
  return FriendshipState.init(followerState:followingState:)();
}

uint64_t type metadata accessor for FriendshipState()
{
  return type metadata accessor for FriendshipState();
}

uint64_t LocationRequest.refreshReason.getter()
{
  return LocationRequest.refreshReason.getter();
}

uint64_t LocationRequest.shallowLocatesOnly.getter()
{
  return LocationRequest.shallowLocatesOnly.getter();
}

uint64_t LocationRequest.type.getter()
{
  return LocationRequest.type.getter();
}

uint64_t LocationRequest.origin.getter()
{
  return LocationRequest.origin.getter();
}

uint64_t LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)()
{
  return LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)();
}

uint64_t LocationRequest.priority.getter()
{
  return LocationRequest.priority.getter();
}

uint64_t LocationRequest.toHandles.getter()
{
  return LocationRequest.toHandles.getter();
}

uint64_t type metadata accessor for LocationRequest()
{
  return type metadata accessor for LocationRequest();
}

uint64_t static PreferenceError.== infix(_:_:)()
{
  return static PreferenceError.== infix(_:_:)();
}

uint64_t type metadata accessor for PreferenceError()
{
  return type metadata accessor for PreferenceError();
}

uint64_t type metadata accessor for FriendshipAction()
{
  return type metadata accessor for FriendshipAction();
}

uint64_t FriendshipRequest.isFromGroup.getter()
{
  return FriendshipRequest.isFromGroup.getter();
}

uint64_t FriendshipRequest.requestType.getter()
{
  return FriendshipRequest.requestType.getter();
}

uint64_t FriendshipRequest.respondType.getter()
{
  return FriendshipRequest.respondType.getter();
}

uint64_t FriendshipRequest.callerHandle.getter()
{
  return FriendshipRequest.callerHandle.getter();
}

uint64_t FriendshipRequest.shouldShowAlertIfThisDeviceIsNotBeingUsedToShareLocation.getter()
{
  return FriendshipRequest.shouldShowAlertIfThisDeviceIsNotBeingUsedToShareLocation.getter();
}

uint64_t FriendshipRequest.origin.getter()
{
  return FriendshipRequest.origin.getter();
}

uint64_t FriendshipRequest.endDate.getter()
{
  return FriendshipRequest.endDate.getter();
}

uint64_t FriendshipRequest.toHandles.getter()
{
  return FriendshipRequest.toHandles.getter();
}

uint64_t type metadata accessor for FriendshipRequest()
{
  return type metadata accessor for FriendshipRequest();
}

uint64_t ClientSessionError.init(type:)()
{
  return ClientSessionError.init(type:)();
}

uint64_t type metadata accessor for ClientSessionError.Category()
{
  return type metadata accessor for ClientSessionError.Category();
}

uint64_t type metadata accessor for ClientSessionError()
{
  return type metadata accessor for ClientSessionError();
}

uint64_t type metadata accessor for FenceClientRequest()
{
  return type metadata accessor for FenceClientRequest();
}

uint64_t type metadata accessor for FenceDaemonRequest()
{
  return type metadata accessor for FenceDaemonRequest();
}

uint64_t DarwinNotifications.rawValue.getter()
{
  return DarwinNotifications.rawValue.getter();
}

uint64_t type metadata accessor for DarwinNotifications()
{
  return type metadata accessor for DarwinNotifications();
}

uint64_t DeviceWithCompanion.init(thisDevice:companion:)()
{
  return DeviceWithCompanion.init(thisDevice:companion:)();
}

uint64_t DeviceWithCompanion.thisDevice.getter()
{
  return DeviceWithCompanion.thisDevice.getter();
}

uint64_t type metadata accessor for DeviceWithCompanion()
{
  return type metadata accessor for DeviceWithCompanion();
}

uint64_t static LocalizationUtility.localizedString(key:table:)()
{
  return static LocalizationUtility.localizedString(key:table:)();
}

uint64_t static LocalizationUtility.localizedString(key:table:_:)()
{
  return static LocalizationUtility.localizedString(key:table:_:)();
}

uint64_t type metadata accessor for LocalizationUtility.Table()
{
  return type metadata accessor for LocalizationUtility.Table();
}

uint64_t type metadata accessor for MotionActivityState()
{
  return type metadata accessor for MotionActivityState();
}

uint64_t type metadata accessor for ServiceEntitlements()
{
  return type metadata accessor for ServiceEntitlements();
}

uint64_t static FriendshipRequestType.== infix(_:_:)()
{
  return static FriendshipRequestType.== infix(_:_:)();
}

uint64_t type metadata accessor for FriendshipRequestType()
{
  return type metadata accessor for FriendshipRequestType();
}

uint64_t LegacyRefreshSchedule.rawValue.getter()
{
  return LegacyRefreshSchedule.rawValue.getter();
}

uint64_t type metadata accessor for LegacyRefreshSchedule()
{
  return type metadata accessor for LegacyRefreshSchedule();
}

uint64_t type metadata accessor for FriendshipRequestError()
{
  return type metadata accessor for FriendshipRequestError();
}

uint64_t type metadata accessor for PreferenceStreamChange()
{
  return type metadata accessor for PreferenceStreamChange();
}

uint64_t FriendshipRequestResult.init(request:result:requestIds:)()
{
  return FriendshipRequestResult.init(request:result:requestIds:)();
}

uint64_t type metadata accessor for FriendshipRequestResult()
{
  return type metadata accessor for FriendshipRequestResult();
}

uint64_t type metadata accessor for FriendshipRequestStatus()
{
  return type metadata accessor for FriendshipRequestStatus();
}

uint64_t LegacyRefreshCommandReason.reason.getter()
{
  return LegacyRefreshCommandReason.reason.getter();
}

uint64_t LegacyRefreshCommandReason.rawValue.getter()
{
  return LegacyRefreshCommandReason.rawValue.getter();
}

uint64_t type metadata accessor for LegacyRefreshCommandReason()
{
  return type metadata accessor for LegacyRefreshCommandReason();
}

uint64_t LocalUserNotificationCategory.rawValue.getter()
{
  return LocalUserNotificationCategory.rawValue.getter();
}

uint64_t type metadata accessor for LocalUserNotificationCategory()
{
  return type metadata accessor for LocalUserNotificationCategory();
}

uint64_t static FriendshipResponseToInviteType.== infix(_:_:)()
{
  return static FriendshipResponseToInviteType.== infix(_:_:)();
}

uint64_t type metadata accessor for FriendshipResponseToInviteType()
{
  return type metadata accessor for FriendshipResponseToInviteType();
}

uint64_t static LocalUserNotificationConstants.HandleIdentifier.getter()
{
  return static LocalUserNotificationConstants.HandleIdentifier.getter();
}

uint64_t FriendshipCanShareLocationRequest.isFromGroup.getter()
{
  return FriendshipCanShareLocationRequest.isFromGroup.getter();
}

uint64_t FriendshipCanShareLocationRequest.handle.getter()
{
  return FriendshipCanShareLocationRequest.handle.getter();
}

uint64_t FriendshipCanShareLocationRequest.origin.getter()
{
  return FriendshipCanShareLocationRequest.origin.getter();
}

uint64_t type metadata accessor for FriendshipCanShareLocationRequest()
{
  return type metadata accessor for FriendshipCanShareLocationRequest();
}

uint64_t Fence.shouldDeleteFence.getter()
{
  return Fence.shouldDeleteFence.getter();
}

uint64_t Fence.shouldDeleteFence.setter()
{
  return Fence.shouldDeleteFence.setter();
}

uint64_t static Fence.DaysOfWeek.all.getter()
{
  return static Fence.DaysOfWeek.all.getter();
}

uint64_t static Fence.DaysOfWeek.friday.getter()
{
  return static Fence.DaysOfWeek.friday.getter();
}

uint64_t static Fence.DaysOfWeek.monday.getter()
{
  return static Fence.DaysOfWeek.monday.getter();
}

uint64_t static Fence.DaysOfWeek.sunday.getter()
{
  return static Fence.DaysOfWeek.sunday.getter();
}

uint64_t static Fence.DaysOfWeek.tuesday.getter()
{
  return static Fence.DaysOfWeek.tuesday.getter();
}

uint64_t Fence.DaysOfWeek.init(rawValue:)()
{
  return Fence.DaysOfWeek.init(rawValue:)();
}

uint64_t Fence.DaysOfWeek.rawValue.getter()
{
  return Fence.DaysOfWeek.rawValue.getter();
}

uint64_t static Fence.DaysOfWeek.saturday.getter()
{
  return static Fence.DaysOfWeek.saturday.getter();
}

uint64_t static Fence.DaysOfWeek.thursday.getter()
{
  return static Fence.DaysOfWeek.thursday.getter();
}

uint64_t static Fence.DaysOfWeek.wednesday.getter()
{
  return static Fence.DaysOfWeek.wednesday.getter();
}

uint64_t type metadata accessor for Fence.DaysOfWeek()
{
  return type metadata accessor for Fence.DaysOfWeek();
}

uint64_t Fence.Participant.description.getter()
{
  return Fence.Participant.description.getter();
}

uint64_t static Fence.Participant.== infix(_:_:)()
{
  return static Fence.Participant.== infix(_:_:)();
}

uint64_t type metadata accessor for Fence.Participant()
{
  return type metadata accessor for Fence.Participant();
}

uint64_t Fence.muteEndDate.getter()
{
  return Fence.muteEndDate.getter();
}

uint64_t type metadata accessor for Fence.MonitorRegion.Source()
{
  return type metadata accessor for Fence.MonitorRegion.Source();
}

uint64_t Fence.MonitorRegion.init(center:radius:source:)()
{
  return Fence.MonitorRegion.init(center:radius:source:)();
}

uint64_t Fence.MonitorRegion.center.getter()
{
  return Fence.MonitorRegion.center.getter();
}

uint64_t Fence.MonitorRegion.radius.getter()
{
  return Fence.MonitorRegion.radius.getter();
}

uint64_t Fence.MonitorRegion.source.getter()
{
  return Fence.MonitorRegion.source.getter();
}

uint64_t type metadata accessor for Fence.MonitorRegion()
{
  return type metadata accessor for Fence.MonitorRegion();
}

uint64_t Fence.TriggerPosition.description.getter()
{
  return Fence.TriggerPosition.description.getter();
}

uint64_t type metadata accessor for Fence.TriggerPosition()
{
  return type metadata accessor for Fence.TriggerPosition();
}

uint64_t Fence.AcceptanceStatus.description.getter()
{
  return Fence.AcceptanceStatus.description.getter();
}

uint64_t static Fence.AcceptanceStatus.== infix(_:_:)()
{
  return static Fence.AcceptanceStatus.== infix(_:_:)();
}

uint64_t type metadata accessor for Fence.AcceptanceStatus()
{
  return type metadata accessor for Fence.AcceptanceStatus();
}

uint64_t Fence.acceptanceStatus.getter()
{
  return Fence.acceptanceStatus.getter();
}

uint64_t Fence.ckRecordIdentifier.getter()
{
  return Fence.ckRecordIdentifier.getter();
}

uint64_t Fence.ckRecordZoneOwnerName.getter()
{
  return Fence.ckRecordZoneOwnerName.getter();
}

uint64_t Fence.ID.uuidString.getter()
{
  return Fence.ID.uuidString.getter();
}

uint64_t Fence.ID.init(id:)()
{
  return Fence.ID.init(id:)();
}

uint64_t Fence.ID.uuid.getter()
{
  return Fence.ID.uuid.getter();
}

uint64_t Fence.ID.init(string:)()
{
  return Fence.ID.init(string:)();
}

uint64_t type metadata accessor for Fence.ID()
{
  return type metadata accessor for Fence.ID();
}

uint64_t Fence.init(id:label:createdBy:finder:variant:acceptanceStatus:region:placemark:others:muteEndDate:ckRecordIdentifier:ckRecordZoneOwnerName:updatedAt:)()
{
  return Fence.init(id:label:createdBy:finder:variant:acceptanceStatus:region:placemark:others:muteEndDate:ckRecordIdentifier:ckRecordZoneOwnerName:updatedAt:)();
}

uint64_t Fence.id.getter()
{
  return Fence.id.getter();
}

uint64_t type metadata accessor for Fence.Error()
{
  return type metadata accessor for Fence.Error();
}

uint64_t Fence.label.getter()
{
  return Fence.label.getter();
}

uint64_t Fence.label.setter()
{
  return Fence.label.setter();
}

uint64_t Fence.findee.getter()
{
  return Fence.findee.getter();
}

uint64_t Fence.finder.getter()
{
  return Fence.finder.getter();
}

uint64_t Fence.others.getter()
{
  return Fence.others.getter();
}

uint64_t Fence.region.getter()
{
  return Fence.region.getter();
}

uint64_t Fence.update(muteEndDate:)()
{
  return Fence.update(muteEndDate:)();
}

uint64_t Fence.update(acceptanceStatus:)()
{
  return Fence.update(acceptanceStatus:)();
}

uint64_t Fence.update(ckRecordIdentifier:owner:)()
{
  return Fence.update(ckRecordIdentifier:owner:)();
}

uint64_t Fence.update(id:)()
{
  return Fence.update(id:)();
}

uint64_t type metadata accessor for Fence.Trigger()
{
  return type metadata accessor for Fence.Trigger();
}

uint64_t Fence.Variant.descriptionForAnalytics.getter()
{
  return Fence.Variant.descriptionForAnalytics.getter();
}

uint64_t type metadata accessor for Fence.Variant()
{
  return type metadata accessor for Fence.Variant();
}

uint64_t Fence.variant.getter()
{
  return Fence.variant.getter();
}

uint64_t Fence.Schedule.daysOfWeek.getter()
{
  return Fence.Schedule.daysOfWeek.getter();
}

uint64_t Fence.Schedule.description.getter()
{
  return Fence.Schedule.description.getter();
}

uint64_t Fence.Schedule.end.getter()
{
  return Fence.Schedule.end.getter();
}

uint64_t Fence.Schedule.init(start:end:daysOfWeek:timeZone:)()
{
  return Fence.Schedule.init(start:end:daysOfWeek:timeZone:)();
}

uint64_t Fence.Schedule.start.getter()
{
  return Fence.Schedule.start.getter();
}

uint64_t Fence.Schedule.Matcher.doesMatchSchedule(_:)()
{
  return Fence.Schedule.Matcher.doesMatchSchedule(_:)();
}

uint64_t Fence.Schedule.Matcher.nextStartDate(from:direction:)()
{
  return Fence.Schedule.Matcher.nextStartDate(from:direction:)();
}

uint64_t Fence.Schedule.Matcher.previousEndDate(from:)()
{
  return Fence.Schedule.Matcher.previousEndDate(from:)();
}

uint64_t Fence.Schedule.Matcher.previousStartDate(from:)()
{
  return Fence.Schedule.Matcher.previousStartDate(from:)();
}

uint64_t Fence.Schedule.Matcher.nextStartOrEndDate(from:)()
{
  return Fence.Schedule.Matcher.nextStartOrEndDate(from:)();
}

uint64_t Fence.Schedule.Matcher.interval(containingDate:)()
{
  return Fence.Schedule.Matcher.interval(containingDate:)();
}

uint64_t Fence.Schedule.Matcher.init(schedule:)()
{
  return Fence.Schedule.Matcher.init(schedule:)();
}

uint64_t type metadata accessor for Fence.Schedule.Matcher()
{
  return type metadata accessor for Fence.Schedule.Matcher();
}

uint64_t Fence.Schedule.timeZone.getter()
{
  return Fence.Schedule.timeZone.getter();
}

uint64_t type metadata accessor for Fence.Schedule()
{
  return type metadata accessor for Fence.Schedule();
}

uint64_t static Fence.TimeOfDay.== infix(_:_:)()
{
  return static Fence.TimeOfDay.== infix(_:_:)();
}

uint64_t Fence.TimeOfDay.init(hour:minute:)()
{
  return Fence.TimeOfDay.init(hour:minute:)();
}

uint64_t Fence.TimeOfDay.hour.getter()
{
  return Fence.TimeOfDay.hour.getter();
}

uint64_t Fence.TimeOfDay.minute.getter()
{
  return Fence.TimeOfDay.minute.getter();
}

uint64_t type metadata accessor for Fence.TimeOfDay()
{
  return type metadata accessor for Fence.TimeOfDay();
}

uint64_t Fence.TriggerID.uuidString.getter()
{
  return Fence.TriggerID.uuidString.getter();
}

uint64_t Fence.TriggerID.init(id:)()
{
  return Fence.TriggerID.init(id:)();
}

uint64_t Fence.TriggerID.uuid.getter()
{
  return Fence.TriggerID.uuid.getter();
}

uint64_t Fence.TriggerID.init()()
{
  return Fence.TriggerID.init()();
}

uint64_t type metadata accessor for Fence.TriggerID()
{
  return type metadata accessor for Fence.TriggerID();
}

uint64_t Fence.createdBy.getter()
{
  return Fence.createdBy.getter();
}

uint64_t static Fence.isAllowed(at:)()
{
  return static Fence.isAllowed(at:)();
}

uint64_t Fence.placemark.getter()
{
  return Fence.placemark.getter();
}

uint64_t Fence.placemark.setter()
{
  return Fence.placemark.setter();
}

uint64_t Fence.updatedAt.getter()
{
  return Fence.updatedAt.getter();
}

uint64_t type metadata accessor for Fence()
{
  return type metadata accessor for Fence();
}

uint64_t Device.idsDeviceId.getter()
{
  return Device.idsDeviceId.getter();
}

uint64_t Device.isThisDevice.getter()
{
  return Device.isThisDevice.getter();
}

uint64_t Device.deviceName.getter()
{
  return Device.deviceName.getter();
}

uint64_t Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)()
{
  return Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)();
}

uint64_t Device.identifier.getter()
{
  return Device.identifier.getter();
}

uint64_t Device.description.getter()
{
  return Device.description.getter();
}

uint64_t Device.isCompanion.getter()
{
  return Device.isCompanion.getter();
}

uint64_t Device.isAutoMeCapable.getter()
{
  return Device.isAutoMeCapable.getter();
}

uint64_t Device.isActive.getter()
{
  return Device.isActive.getter();
}

uint64_t type metadata accessor for Device()
{
  return type metadata accessor for Device();
}

{
  return type metadata accessor for Device();
}

uint64_t Friend.checkFriendUpdateNeeded(with:)()
{
  return Friend.checkFriendUpdateNeeded(with:)();
}

uint64_t Friend.ownerHandle.getter()
{
  return Friend.ownerHandle.getter();
}

uint64_t Friend.fallbackToLegacy.getter()
{
  return Friend.fallbackToLegacy.getter();
}

uint64_t Friend.friendshipOrigin.getter()
{
  return Friend.friendshipOrigin.getter();
}

uint64_t Friend.secureLocationsCapable.getter()
{
  return Friend.secureLocationsCapable.getter();
}

uint64_t Friend.fallbackToLegacyAllowed.getter()
{
  return Friend.fallbackToLegacyAllowed.getter();
}

uint64_t Friend.isLegacyLocationCapable.getter()
{
  return Friend.isLegacyLocationCapable.getter();
}

uint64_t Friend.isSecureLocationCapable.getter()
{
  return Friend.isSecureLocationCapable.getter();
}

uint64_t static Friend.== infix(_:_:)()
{
  return static Friend.== infix(_:_:)();
}

uint64_t Friend.shallowOrLiveSecureLocationsCapable.getter()
{
  return Friend.shallowOrLiveSecureLocationsCapable.getter();
}

uint64_t Friend.type.getter()
{
  return Friend.type.getter();
}

uint64_t Friend.expiry.getter()
{
  return Friend.expiry.getter();
}

uint64_t Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)()
{
  return Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
}

uint64_t Friend.handle.getter()
{
  return Friend.handle.getter();
}

uint64_t Friend.createdAt.getter()
{
  return Friend.createdAt.getter();
}

uint64_t type metadata accessor for Friend()
{
  return type metadata accessor for Friend();
}

uint64_t Handle.hashedDSID.getter()
{
  return Handle.hashedDSID.getter();
}

uint64_t Handle.identifier.getter()
{
  return Handle.identifier.getter();
}

uint64_t Handle.prettyName.getter()
{
  return Handle.prettyName.getter();
}

uint64_t Handle.favoriteOrder.getter()
{
  return Handle.favoriteOrder.getter();
}

uint64_t Handle.isPhoneNumber.getter()
{
  return Handle.isPhoneNumber.getter();
}

uint64_t Handle.pushIdentifiers.getter()
{
  return Handle.pushIdentifiers.getter();
}

uint64_t Handle.debugDescription.getter()
{
  return Handle.debugDescription.getter();
}

uint64_t Handle.expiresByGroupId.getter()
{
  return Handle.expiresByGroupId.getter();
}

uint64_t Handle.serverIdentifier.getter()
{
  return Handle.serverIdentifier.getter();
}

uint64_t Handle.contactIdentifier.getter()
{
  return Handle.contactIdentifier.getter();
}

uint64_t Handle.trackingTimestamp.getter()
{
  return Handle.trackingTimestamp.getter();
}

uint64_t Handle.siblingIdentifiers.getter()
{
  return Handle.siblingIdentifiers.getter();
}

uint64_t Handle.qualifiedIdentifier.getter()
{
  return Handle.qualifiedIdentifier.getter();
}

uint64_t static Handle.== infix(_:_:)()
{
  return static Handle.== infix(_:_:)();
}

uint64_t Handle.dsid.getter()
{
  return Handle.dsid.getter();
}

uint64_t Handle.peerID.getter()
{
  return Handle.peerID.getter();
}

uint64_t Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)()
{
  return Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
}

uint64_t Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)()
{
  return Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)();
}

uint64_t Handle.serverID.getter()
{
  return Handle.serverID.getter();
}

uint64_t Handle.idsStatus.getter()
{
  return Handle.idsStatus.getter();
}

uint64_t Handle.reachable.getter()
{
  return Handle.reachable.getter();
}

uint64_t type metadata accessor for Handle()
{
  return type metadata accessor for Handle();
}

uint64_t type metadata accessor for Account.TokenStatus()
{
  return type metadata accessor for Account.TokenStatus();
}

uint64_t Account.appHostName.getter()
{
  return Account.appHostName.getter();
}

uint64_t Account.apsEnvironment.getter()
{
  return Account.apsEnvironment.getter();
}

uint64_t Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)()
{
  return Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)();
}

uint64_t Account.icloudIdentifier.getter()
{
  return Account.icloudIdentifier.getter();
}

Swift::String __swiftcall Account.dsidBase64EncodedString()()
{
  uint64_t v0 = Account.dsidBase64EncodedString()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Account.dsid.getter()
{
  return Account.dsid.getter();
}

uint64_t Account.appToken.getter()
{
  return Account.appToken.getter();
}

uint64_t Account.peopleURL.getter()
{
  return Account.peopleURL.getter();
}

uint64_t type metadata accessor for Account()
{
  return type metadata accessor for Account();
}

{
  return type metadata accessor for Account();
}

uint64_t GroupID.init(rawValue:)()
{
  return GroupID.init(rawValue:)();
}

uint64_t GroupID.rawValue.getter()
{
  return GroupID.rawValue.getter();
}

uint64_t type metadata accessor for GroupID()
{
  return type metadata accessor for GroupID();
}

uint64_t type metadata accessor for Session.FenceError()
{
  return type metadata accessor for Session.FenceError();
}

uint64_t Location.date.getter()
{
  return Location.date.getter();
}

uint64_t Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)()
{
  return Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)();
}

uint64_t Location.timestamp.getter()
{
  return Location.timestamp.getter();
}

uint64_t type metadata accessor for Location()
{
  return type metadata accessor for Location();
}

uint64_t IDSStatus.init(rawValue:)()
{
  return IDSStatus.init(rawValue:)();
}

uint64_t IDSStatus.rawValue.getter()
{
  return IDSStatus.rawValue.getter();
}

uint64_t type metadata accessor for IDSStatus()
{
  return type metadata accessor for IDSStatus();
}

uint64_t PlaceMark.streetName.getter()
{
  return PlaceMark.streetName.getter();
}

uint64_t PlaceMark.description.getter()
{
  return PlaceMark.description.getter();
}

uint64_t PlaceMark.streetAddress.getter()
{
  return PlaceMark.streetAddress.getter();
}

uint64_t PlaceMark.administrativeArea.getter()
{
  return PlaceMark.administrativeArea.getter();
}

uint64_t PlaceMark.formattedAddressLines.getter()
{
  return PlaceMark.formattedAddressLines.getter();
}

uint64_t PlaceMark.country.getter()
{
  return PlaceMark.country.getter();
}

uint64_t PlaceMark.init(locality:administrativeArea:country:stateCode:streetAddress:streetName:formattedAddressLines:formattedAddressLinesWithoutCountry:coarseAddress:poiAddress:smallAddress:mediumAddress:largeAddress:)()
{
  return PlaceMark.init(locality:administrativeArea:country:stateCode:streetAddress:streetName:formattedAddressLines:formattedAddressLinesWithoutCountry:coarseAddress:poiAddress:smallAddress:mediumAddress:largeAddress:)();
}

uint64_t PlaceMark.locality.getter()
{
  return PlaceMark.locality.getter();
}

uint64_t PlaceMark.stateCode.getter()
{
  return PlaceMark.stateCode.getter();
}

uint64_t type metadata accessor for PlaceMark()
{
  return type metadata accessor for PlaceMark();
}

uint64_t type metadata accessor for DatabaseError()
{
  return type metadata accessor for DatabaseError();
}

uint64_t type metadata accessor for DatabaseState()
{
  return type metadata accessor for DatabaseState();
}

uint64_t Database.columnNames(connection:tableName:)()
{
  return Database.columnNames(connection:tableName:)();
}

uint64_t Database.description.getter()
{
  return Database.description.getter();
}

uint64_t Database.readConnection.getter()
{
  return Database.readConnection.getter();
}

uint64_t Database.writeConnection.getter()
{
  return Database.writeConnection.getter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.createIfNecessary()()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.purge()()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.reset()()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.startup()()
{
}

uint64_t dispatch thunk of CloudBacked.id.getter()
{
  return dispatch thunk of CloudBacked.id.getter();
}

uint64_t dispatch thunk of CloudBacked.init(ckRecord:)()
{
  return dispatch thunk of CloudBacked.init(ckRecord:)();
}

uint64_t CloudBacked.zone.getter()
{
  return CloudBacked.zone.getter();
}

uint64_t type metadata accessor for CloudKitCoordinator.Database()
{
  return type metadata accessor for CloudKitCoordinator.Database();
}

uint64_t CloudKitCoordinator.Deletion.init(recordType:recordID:)()
{
  return CloudKitCoordinator.Deletion.init(recordType:recordID:)();
}

uint64_t CloudKitCoordinator.Deletion.recordType.getter()
{
  return CloudKitCoordinator.Deletion.recordType.getter();
}

uint64_t CloudKitCoordinator.Deletion.recordID.getter()
{
  return CloudKitCoordinator.Deletion.recordID.getter();
}

uint64_t type metadata accessor for CloudKitCoordinator.Deletion()
{
  return type metadata accessor for CloudKitCoordinator.Deletion();
}

uint64_t CloudKitStateChange.deleted.getter()
{
  return CloudKitStateChange.deleted.getter();
}

uint64_t CloudKitStateChange.modified.getter()
{
  return CloudKitStateChange.modified.getter();
}

uint64_t type metadata accessor for CloudKitStateChange()
{
  return type metadata accessor for CloudKitStateChange();
}

uint64_t dispatch thunk of CloudKitStorage.stateStream()()
{
  return dispatch thunk of CloudKitStorage.stateStream()();
}

uint64_t type metadata accessor for CloudKitStorage.State()
{
  return type metadata accessor for CloudKitStorage.State();
}

uint64_t type metadata accessor for CloudKitStorage()
{
  return type metadata accessor for CloudKitStorage();
}

uint64_t CloudKitChangeSet.TombstoneInfo.recordType.getter()
{
  return CloudKitChangeSet.TombstoneInfo.recordType.getter();
}

uint64_t type metadata accessor for CloudKitChangeSet.TombstoneInfo()
{
  return type metadata accessor for CloudKitChangeSet.TombstoneInfo();
}

uint64_t CloudKitChangeSet.recordIDsToDelete.getter()
{
  return CloudKitChangeSet.recordIDsToDelete.getter();
}

uint64_t type metadata accessor for CloudKitChangeSet()
{
  return type metadata accessor for CloudKitChangeSet();
}

uint64_t dispatch thunk of LocalMessaging.connectedDevice.getter()
{
  return dispatch thunk of LocalMessaging.connectedDevice.getter();
}

uint64_t dispatch thunk of LocalMessaging.set(didDeliverCallback:)()
{
  return dispatch thunk of LocalMessaging.set(didDeliverCallback:)();
}

uint64_t dispatch thunk of LocalMessaging.set(accountChangedCallback:)()
{
  return dispatch thunk of LocalMessaging.set(accountChangedCallback:)();
}

uint64_t dispatch thunk of LocalMessaging.set(devicesChangedCallback:)()
{
  return dispatch thunk of LocalMessaging.set(devicesChangedCallback:)();
}

uint64_t dispatch thunk of LocalMessaging.set(messageReceivedCallback:)()
{
  return dispatch thunk of LocalMessaging.set(messageReceivedCallback:)();
}

uint64_t dispatch thunk of LocalMessaging.set(connectedDevicesChangedCallback:)()
{
  return dispatch thunk of LocalMessaging.set(connectedDevicesChangedCallback:)();
}

uint64_t dispatch thunk of LocalMessaging.start()()
{
  return dispatch thunk of LocalMessaging.start()();
}

uint64_t dispatch thunk of LocalMessaging.device(fromID:)()
{
  return dispatch thunk of LocalMessaging.device(fromID:)();
}

uint64_t dispatch thunk of InternetMessaging.set(didDeliverCallback:)()
{
  return dispatch thunk of InternetMessaging.set(didDeliverCallback:)();
}

uint64_t dispatch thunk of InternetMessaging.set(accountChangedCallback:)()
{
  return dispatch thunk of InternetMessaging.set(accountChangedCallback:)();
}

uint64_t dispatch thunk of InternetMessaging.set(devicesChangedCallback:)()
{
  return dispatch thunk of InternetMessaging.set(devicesChangedCallback:)();
}

uint64_t dispatch thunk of InternetMessaging.set(messageReceivedCallback:)()
{
  return dispatch thunk of InternetMessaging.set(messageReceivedCallback:)();
}

uint64_t dispatch thunk of InternetMessaging.set(dictionaryReceivedCallback:)()
{
  return dispatch thunk of InternetMessaging.set(dictionaryReceivedCallback:)();
}

uint64_t dispatch thunk of InternetMessaging.start()()
{
  return dispatch thunk of InternetMessaging.start()();
}

uint64_t type metadata accessor for MessagingCapability()
{
  return type metadata accessor for MessagingCapability();
}

uint64_t MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)()
{
  return MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
}

uint64_t type metadata accessor for MessagingOptions()
{
  return type metadata accessor for MessagingOptions();
}

uint64_t type metadata accessor for Destination.DestinationType()
{
  return type metadata accessor for Destination.DestinationType();
}

uint64_t Destination.destination.getter()
{
  return Destination.destination.getter();
}

uint64_t Destination.init(phoneNumber:)()
{
  return Destination.init(phoneNumber:)();
}

uint64_t Destination.type.getter()
{
  return Destination.type.getter();
}

uint64_t Destination.init(email:)()
{
  return Destination.init(email:)();
}

uint64_t Destination.init(string:)()
{
  return Destination.init(string:)();
}

uint64_t type metadata accessor for Destination()
{
  return type metadata accessor for Destination();
}

uint64_t MessageContext.senderCorrelationIdentifier.getter()
{
  return MessageContext.senderCorrelationIdentifier.getter();
}

uint64_t type metadata accessor for MessageContext()
{
  return type metadata accessor for MessageContext();
}

uint64_t QueryController.__allocating_init(serviceName:)()
{
  return QueryController.__allocating_init(serviceName:)();
}

uint64_t type metadata accessor for QueryController()
{
  return type metadata accessor for QueryController();
}

uint64_t Device.destination.getter()
{
  return Device.destination.getter();
}

uint64_t Device.isConnected.getter()
{
  return Device.isConnected.getter();
}

uint64_t Device.isLocallyPaired.getter()
{
  return Device.isLocallyPaired.getter();
}

uint64_t Device.uniqueIDOverride.getter()
{
  return Device.uniqueIDOverride.getter();
}

uint64_t Message.init<A>(type:version:payload:)()
{
  return Message.init<A>(type:version:payload:)();
}

uint64_t Message.type.getter()
{
  return Message.type.getter();
}

uint64_t Message.extract<A>()()
{
  return Message.extract<A>()();
}

uint64_t ActorDaemon.bundleIdentifier.getter()
{
  return ActorDaemon.bundleIdentifier.getter();
}

uint64_t Daemon.xpcAlarmEventHandler.getter()
{
  return Daemon.xpcAlarmEventHandler.getter();
}

uint64_t Daemon.darwinNotificationHandler.getter()
{
  return Daemon.darwinNotificationHandler.getter();
}

uint64_t Daemon.distributedNotificationHandler.getter()
{
  return Daemon.distributedNotificationHandler.getter();
}

uint64_t static Daemon.shared.getter()
{
  return static Daemon.shared.getter();
}

uint64_t type metadata accessor for Daemon()
{
  return type metadata accessor for Daemon();
}

uint64_t APNSManager.IncomingMessage.topic.getter()
{
  return APNSManager.IncomingMessage.topic.getter();
}

uint64_t APNSManager.IncomingMessage.userInfo.getter()
{
  return APNSManager.IncomingMessage.userInfo.getter();
}

uint64_t type metadata accessor for APNSManager.IncomingMessage()
{
  return type metadata accessor for APNSManager.IncomingMessage();
}

uint64_t type metadata accessor for APNSManager()
{
  return type metadata accessor for APNSManager();
}

uint64_t FirstUnlockService.__allocating_init()()
{
  return FirstUnlockService.__allocating_init()();
}

uint64_t type metadata accessor for FirstUnlockService()
{
  return type metadata accessor for FirstUnlockService();
}

uint64_t type metadata accessor for SystemVersionNumber()
{
  return type metadata accessor for SystemVersionNumber();
}

uint64_t ActorServiceProtocol.description.getter()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t type metadata accessor for DistributedNotification()
{
  return type metadata accessor for DistributedNotification();
}

uint64_t dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)()
{
  return dispatch thunk of XPCClientConnectionPool.setRemoveHandler(_:)();
}

uint64_t dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)()
{
  return dispatch thunk of XPCClientConnectionPool.setStopProcessing(_:)();
}

uint64_t dispatch thunk of XPCClientConnectionPool.isEmpty.getter()
{
  return dispatch thunk of XPCClientConnectionPool.isEmpty.getter();
}

uint64_t dispatch thunk of XPCClientConnectionPool.sessions.getter()
{
  return dispatch thunk of XPCClientConnectionPool.sessions.getter();
}

uint64_t XPCClientConnectionPool.__allocating_init()()
{
  return XPCClientConnectionPool.__allocating_init()();
}

uint64_t dispatch thunk of DarwinNotificationHandler.asyncStream(name:)()
{
  return dispatch thunk of DarwinNotificationHandler.asyncStream(name:)();
}

uint64_t type metadata accessor for DarwinNotificationHandler()
{
  return type metadata accessor for DarwinNotificationHandler();
}

uint64_t dispatch thunk of DistributedNotificationHandler.asyncStream(name:)()
{
  return dispatch thunk of DistributedNotificationHandler.asyncStream(name:)();
}

uint64_t type metadata accessor for DistributedNotificationHandler()
{
  return type metadata accessor for DistributedNotificationHandler();
}

uint64_t ServerInteractionController.__allocating_init(bundleIdentifier:)()
{
  return ServerInteractionController.__allocating_init(bundleIdentifier:)();
}

uint64_t type metadata accessor for ServerInteractionController()
{
  return type metadata accessor for ServerInteractionController();
}

uint64_t BasicCredential.init(username:password:)()
{
  return BasicCredential.init(username:password:)();
}

uint64_t type metadata accessor for BasicCredential()
{
  return type metadata accessor for BasicCredential();
}

uint64_t ContentRepresentable.method.getter()
{
  return ContentRepresentable.method.getter();
}

uint64_t Response.body.getter()
{
  return Response.body.getter();
}

uint64_t Response.response.getter()
{
  return Response.response.getter();
}

uint64_t type metadata accessor for Response()
{
  return type metadata accessor for Response();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.utility.getter()
{
  return static DispatchQoS.utility.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t DispatchTime.uptimeNanoseconds.getter()
{
  return DispatchTime.uptimeNanoseconds.getter();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)()
{
  return static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)();
}

uint64_t static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)()
{
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t BinaryFloatingPoint.init<A>(_:)()
{
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t related decl 'e' for CKErrorCode.description.getter()
{
  return related decl 'e' for CKErrorCode.description.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

Swift::String __swiftcall String.deletingPrefix(_:)(Swift::String a1)
{
  uint64_t v1 = String.deletingPrefix(_:)(a1._countAndFlagsBits, a1._object);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t String.utf8Data.getter()
{
  return String.utf8Data.getter();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:arguments:)()
{
  return String.init(format:arguments:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t Array<A>.uniqued()()
{
  return Array<A>.uniqued()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t NINearbyObject.dataRepresentation.getter()
{
  return NINearbyObject.dataRepresentation.getter();
}

uint64_t NSXPCConnection.hasEntitlement<A>(_:)()
{
  return NSXPCConnection.hasEntitlement<A>(_:)();
}

uint64_t NSXPCConnection.codeSigningIdentity.getter()
{
  return NSXPCConnection.codeSigningIdentity.getter();
}

uint64_t NSXPCConnection.id.getter()
{
  return NSXPCConnection.id.getter();
}

uint64_t NIDiscoveryToken.dataRepresentation.getter()
{
  return NIDiscoveryToken.dataRepresentation.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

CKQuery __swiftcall CKQuery.init(recordType:predicate:)(Swift::String recordType, NSPredicate *predicate)
{
  return (CKQuery)CKQuery.init(recordType:predicate:)(recordType._countAndFlagsBits, recordType._object, predicate);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return dispatch thunk of BinaryInteger._lowWord.getter();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return dispatch thunk of SetAlgebra.init()();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContinuousClock.now.getter()
{
  return ContinuousClock.now.getter();
}

uint64_t static ContinuousClock.now.getter()
{
  return static ContinuousClock.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t dispatch thunk of _AnySequenceBox._underestimatedCount.getter()
{
  return dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
}

uint64_t dispatch thunk of _AnySequenceBox.__copyToContiguousArray()()
{
  return dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t FixedWidthInteger.data.getter()
{
  return FixedWidthInteger.data.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedDecodingContainer.contains(_:)()
{
  return KeyedDecodingContainer.contains(_:)();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t CustomStringConvertible.typeDescription.getter()
{
  return CustomStringConvertible.typeDescription.getter();
}

uint64_t CustomStringConvertible<>.addressDescription.getter()
{
  return CustomStringConvertible<>.addressDescription.getter();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.code.getter()
{
  return Error.code.getter();
}

uint64_t Error.domain.getter()
{
  return Error.domain.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)Int64._bridgeToObjectiveC()();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Result.error.getter()
{
  return Result.error.getter();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static Duration.description<A>(_:_:units:)()
{
  return static Duration.description<A>(_:_:units:)();
}

uint64_t Duration.milliseconds.getter()
{
  return Duration.milliseconds.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.milliseconds.getter()
{
  return static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return type metadata accessor for Duration.UnitsFormatStyle.Unit();
}

uint64_t Duration.description.getter()
{
  return Duration.description.getter();
}

uint64_t static Duration.- infix(_:_:)()
{
  return static Duration.- infix(_:_:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  CLLocationCoordinate2D v4 = _CLLocationCoordinate2DMake(latitude, longitude);
  double v3 = v4.longitude;
  double v2 = v4.latitude;
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
}

{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t stringForCKErrorCode()
{
  return _stringForCKErrorCode();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocBox()
{
  return _swift_deallocBox();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_job_run()
{
  return _swift_job_run();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_asyncMainDrainQueue()
{
  return _swift_task_asyncMainDrainQueue();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_task_getMainExecutor()
{
  return _swift_task_getMainExecutor();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}