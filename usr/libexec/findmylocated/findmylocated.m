uint64_t sub_1000041EC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v11[160];
  unsigned char v12[184];

  v3 = v1;
  v5 = sub_100044014(&qword_1003EDDC8);
  v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_10004B778();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for LegacyLocationServerRequestContext();
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_100004BBC(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000043E8()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 440) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v5;
  void *v5 = v0;
  v5[1] = sub_1000079A4;
  return sub_100021584(v4, 1);
}

uint64_t sub_100004544(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = sub_1002270D4;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    v5 = sub_10001A47C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10000466C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return _swift_task_switch(sub_10001FA54, v1, 0);
}

uint64_t sub_10000477C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10000953C, v2, 0);
}

uint64_t sub_1000048B0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  v3[16] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[9];
    v5 = sub_1002864B0;
  }
  else
  {
    uint64_t v6 = v3[9];
    swift_release();
    v5 = sub_100018958;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000049E0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 2096) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 2104) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100004BBC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100004BBC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000099EC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100004BBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LocationServiceClient()
{
  return self;
}

uint64_t sub_100004C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[2];
  uint64_t v6 = sub_10003D430(&qword_1003F0330, a2, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v7 = (void *)swift_task_alloc();
  v2[5] = v7;
  v7[2] = v5;
  v7[3] = v3;
  v7[4] = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  v2[6] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100009B80;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, v3, v6, 0x6564286574697277, 0xEF293A7365636976, sub_10022A97C, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100004D6C()
{
  uint64_t v1 = (char *)v0[10];
  if (v1)
  {
    if (qword_1003EC0C0 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[9];
    uint64_t v3 = type metadata accessor for Table();
    uint64_t v4 = sub_100044058(v3, (uint64_t)qword_10040B8A0);
    v0[5] = v3;
    v0[6] = &protocol witness table for Table;
    uint64_t v5 = sub_10003E0F4(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v5, v4, v3);
    uint64_t v6 = sub_100032260((uint64_t)(v0 + 2), v1);
    swift_release();
    sub_1000233E4((uint64_t)(v0 + 2));
    if (!v2)
    {
      uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
      return v7(v6);
    }
  }
  else
  {
    uint64_t v9 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104))(v10, enum case for DatabaseError.notConnected(_:), v9);
    swift_willThrow();
  }
  v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100004F7C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[201] = a1;
  v3[202] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[116];
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1000186DC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[203] = v5;
    void *v5 = v3;
    v5[1] = sub_10004DCFC;
    uint64_t v6 = v3[153];
    return sub_1000078BC(v6);
  }
}

uint64_t sub_10000513C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 600) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002F058, v2, 0);
}

uint64_t type metadata accessor for FriendshipServiceClient()
{
  return self;
}

uint64_t sub_100005294(uint64_t a1)
{
  type metadata accessor for FriendshipServiceClient();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_1001711CC(v4, v1, v3);
}

uint64_t sub_100005334(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_100044014(&qword_1003F2B70);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Insert();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10004C620, 0, 0);
}

uint64_t sub_100005424(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1002260A0;
  }
  else {
    uint64_t v4 = sub_100010768;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100005538(uint64_t a1)
{
  type metadata accessor for LocationServiceClient();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return sub_1001711CC(v4, v1, v3);
}

uint64_t sub_1000055D8()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v0 + 176) = sub_10004D088();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10004BB8C;
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = *(void *)(v0 + 48);
  char v16 = *(unsigned char *)(v0 + 200);
  return sub_1000164F4(v10, v11, v12, v16, v14, v15, v13, (uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100005710()
{
  *(void *)(v1 + 40) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100022058;
  return daemon.getter();
}

uint64_t sub_1000057A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return _swift_task_switch(sub_10000F340, 0, 0);
}

uint64_t sub_1000057C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v31 = a2;
  uint64_t v46 = a4;
  v47 = a5;
  v32 = a1;
  uint64_t v45 = type metadata accessor for Location();
  uint64_t v6 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  v42 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Handle();
  uint64_t result = __chkstk_darwin(v44);
  v40 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  v48 = (void *)a3;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v33 = 0;
  uint64_t v34 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v38 = v6 + 16;
  uint64_t v39 = v9 + 16;
  uint64_t v43 = v6;
  uint64_t v37 = v6 + 8;
  uint64_t v41 = v9;
  int64_t v35 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v36 = v9 + 8;
  uint64_t v16 = v9;
  uint64_t v17 = (uint64_t)v40;
  uint64_t v18 = v6;
  uint64_t v19 = (uint64_t)v42;
  uint64_t v21 = v44;
  uint64_t v20 = v45;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v49 = v11;
      unint64_t v23 = v22 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v35) {
      return sub_100006B54(v32, v31, v33, v48);
    }
    unint64_t v26 = *(void *)(v34 + 8 * v25);
    int64_t v27 = v11 + 1;
    if (!v26)
    {
      int64_t v27 = v11 + 2;
      if (v11 + 2 >= v35) {
        return sub_100006B54(v32, v31, v33, v48);
      }
      unint64_t v26 = *(void *)(v34 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v11 + 3;
        if (v11 + 3 >= v35) {
          return sub_100006B54(v32, v31, v33, v48);
        }
        unint64_t v26 = *(void *)(v34 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v26 - 1) & v26;
    int64_t v49 = v27;
    unint64_t v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    v24 = v48;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v17, v48[6] + *(void *)(v16 + 72) * v23, v21);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16))(v19, v24[7] + *(void *)(v18 + 72) * v23, v20);
    LOBYTE(v24) = sub_100288330(v17, v19, v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v21);
    int64_t v11 = v49;
    if (v24)
    {
      *(unint64_t *)((char *)v32 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      if (__OFADD__(v33++, 1))
      {
        __break(1u);
        return sub_100006B54(v32, v31, v33, v48);
      }
    }
  }
  uint64_t v28 = v11 + 4;
  if (v11 + 4 >= v35) {
    return sub_100006B54(v32, v31, v33, v48);
  }
  unint64_t v26 = *(void *)(v34 + 8 * v28);
  if (v26)
  {
    int64_t v27 = v11 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v27 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v27 >= v35) {
      return sub_100006B54(v32, v31, v33, v48);
    }
    unint64_t v26 = *(void *)(v34 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100005B5C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[53] = a1;
  v4[54] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[11];
    uint64_t v6 = sub_10028D838;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_1000043E8;
    uint64_t v5 = a1;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100005C94(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 64);
    uint64_t v6 = sub_10011E904;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 64);
    swift_release();
    *(void *)(v4 + 104) = a1;
    uint64_t v6 = sub_100005FEC;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

Swift::Int sub_100005DD4()
{
  return Hasher._finalize()();
}

uint64_t sub_100005E2C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 40);
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v5 = sub_100149FD8;
  }
  else {
    uint64_t v5 = sub_10001AF10;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100005F58()
{
  *(void *)(v1 + 40) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100021E7C;
  return daemon.getter();
}

uint64_t sub_100005FEC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)(v0[8] + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  swift_beginAccess();
  v0[14] = *v2;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10011E884, v1, 0);
}

uint64_t sub_100006084()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    return _swift_task_switch(sub_1001CEC44, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_1000061D8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[9];
    return _swift_task_switch(sub_100286C14, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[31] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100286904;
    uint64_t v7 = v3[8];
    return sub_10000C0B8(v7);
  }
}

uint64_t sub_100006368(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[10] = a1;
  v3[11] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[6];
    return _swift_task_switch(sub_100162C48, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[12] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10004F288;
    uint64_t v7 = v3[5];
    return sub_10004BEE8(v7);
  }
}

uint64_t sub_1000064F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100044014(&qword_1003F0490);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000067A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1768);
  *(void *)(*(void *)v1 + 2048) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10001BD44, v2, 0);
}

uint64_t sub_1000068DC()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 1544) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v5;
  void *v5 = v0;
  v5[1] = sub_100007DE8;
  return sub_100021584(v4, 1);
}

uint64_t sub_100006A38()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001EB5C8;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_10004CE00;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100006B54(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v64 = type metadata accessor for Location();
  uint64_t v56 = *(void *)(v64 - 8);
  uint64_t v8 = __chkstk_darwin(v64);
  v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v54 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for Handle();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  v62 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v53 = (char *)&v47 - v14;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100044014(&qword_1003EFEC0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v16 = result;
  v47 = a1;
  uint64_t v48 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v51 = v55 + 16;
  uint64_t v52 = result;
  int64_t v49 = a4;
  uint64_t v50 = v56 + 16;
  uint64_t v60 = v56 + 32;
  uint64_t v61 = v55 + 32;
  uint64_t v19 = result + 64;
  uint64_t v20 = v62;
  while (1)
  {
    uint64_t v59 = a3;
    if (v17)
    {
      uint64_t v57 = (v17 - 1) & v17;
      uint64_t v58 = v18;
      unint64_t v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v48) {
        return v16;
      }
      unint64_t v23 = v47[v22];
      uint64_t v24 = v18 + 1;
      if (!v23)
      {
        uint64_t v24 = v18 + 2;
        if (v18 + 2 >= v48) {
          return v16;
        }
        unint64_t v23 = v47[v24];
        if (!v23)
        {
          uint64_t v24 = v18 + 3;
          if (v18 + 3 >= v48) {
            return v16;
          }
          unint64_t v23 = v47[v24];
          if (!v23)
          {
            uint64_t v25 = v18 + 4;
            if (v18 + 4 >= v48) {
              return v16;
            }
            unint64_t v23 = v47[v25];
            if (!v23)
            {
              while (1)
              {
                uint64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v24 >= v48) {
                  return v16;
                }
                unint64_t v23 = v47[v24];
                ++v25;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v57 = (v23 - 1) & v23;
      uint64_t v58 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    uint64_t v26 = v55;
    uint64_t v27 = *(void *)(v55 + 72);
    uint64_t v28 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, a4[6] + v27 * v21, v11);
    uint64_t v29 = a4[7];
    uint64_t v30 = v56;
    uint64_t v31 = *(void *)(v56 + 72);
    uint64_t v32 = v29 + v31 * v21;
    uint64_t v33 = v11;
    uint64_t v34 = v54;
    uint64_t v35 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v32, v64);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v36(v20, v28, v33);
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v38 = v34;
    uint64_t v11 = v33;
    v37(v63, v38, v35);
    uint64_t v16 = v52;
    sub_1000471EC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v45 = v41 == v44;
        if (v41 == v44) {
          unint64_t v41 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v19 + 8 * v41);
      }
      while (v46 == -1);
      unint64_t v42 = __clz(__rbit64(~v46)) + (v41 << 6);
    }
    *(void *)(v19 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    v36((char *)(*(void *)(v16 + 48) + v42 * v27), v62, v11);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v37)(*(void *)(v16 + 56) + v42 * v31, v63, v64);
    ++*(void *)(v16 + 16);
    a3 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      break;
    }
    a4 = v49;
    unint64_t v17 = v57;
    uint64_t v18 = v58;
    if (v59 == 1) {
      return v16;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10000704C(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100163098, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10004E750;
    uint64_t v7 = v3[4];
    return sub_10004C140(v7);
  }
}

uint64_t sub_1000071DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10000D050, 0, 0);
}

uint64_t sub_1000072E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 248) = a1;
  *(void *)(v4 + 256) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000AE42C;
    uint64_t v6 = 0;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10004E4D8;
    uint64_t v6 = a1;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100007418()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    return _swift_task_switch(sub_10025067C, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

uint64_t sub_10000756C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[7];
    uint64_t v4 = (void *)v0[5];
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = 0;
    v6[3] = 0;
    v6[4] = v2;
    v6[5] = v4;
    swift_retain();
    id v7 = v4;
    sub_10010405C(v3, (uint64_t)&unk_1003F34B0, (uint64_t)v6);
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(1);
}

uint64_t sub_1000076AC()
{
  if (v0[10])
  {
    if (qword_1003EC0B8 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[9];
    uint64_t v2 = type metadata accessor for Table();
    uint64_t v3 = sub_100044058(v2, (uint64_t)qword_10040B888);
    v0[5] = v2;
    v0[6] = &protocol witness table for Table;
    uint64_t v4 = sub_10003E0F4(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
    uint64_t v5 = sub_10003D9C4();
    swift_release();
    sub_1000233E4((uint64_t)(v0 + 2));
    if (!v1)
    {
      uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
      return v6(v5);
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for DatabaseError.notConnected(_:), v8);
    swift_willThrow();
  }
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000078BC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  uint64_t v3 = type metadata accessor for Account.TokenStatus();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000086B8, v1, 0);
}

uint64_t sub_1000079A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100025FB0, v2, 0);
}

uint64_t sub_100007AD8()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6] + OBJC_IVAR____TtC13findmylocated14AccountService__account;
  swift_beginAccess();
  sub_100013210(v2, v1, &qword_1003ECCF0);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100007B70(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Handle();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[13] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000AC7C;
  return daemon.getter();
}

uint64_t sub_100007C60()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 48) = dispatch thunk of XPCClientConnectionPool.sessions.getter();
  return _swift_task_switch(sub_10000BB14, v1, 0);
}

uint64_t sub_100007CCC()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100007CFC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Device();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[7] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004E638;
  return sub_100005F58();
}

uint64_t sub_100007DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 928);
  *(void *)(*(void *)v1 + 1560) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10002A3C0, v2, 0);
}

uint64_t sub_100007F1C()
{
  if (static SystemInfo.underTest.getter())
  {
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10000CE74;
    return daemon.getter();
  }
}

uint64_t sub_100007FE4()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 152) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v5;
  void *v5 = v0;
  v5[1] = sub_10000477C;
  return sub_100021584(v4, 1);
}

uint64_t sub_100008140(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003F0030);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_10000844C()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(LocationRequest.toHandles.getter() + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[16] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10004D740;
    return sub_1000163A8();
  }
  else
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040C290);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      v0[7] = sub_100037004(0xD000000000000019, 0x8000000100378D60, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s with empty handles", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v8 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(unint64_t))v0[1];
    return v9(v8);
  }
}

uint64_t sub_1000086B8()
{
  if (static SystemInfo.underTest.getter())
  {
    uint64_t v1 = v0[5];
    (*(void (**)(void, void, void))(v0[9] + 104))(v0[10], enum case for Account.TokenStatus.success(_:), v0[8]);
    Account.init(icloudIdentifier:dsid:authTokenStatus:appToken:appHostName:apsEnvironment:peopleURL:authToken:)();
    uint64_t v2 = type metadata accessor for Account();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
    swift_task_dealloc();
    unint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[7];
    sub_100355070(qword_1003F5848, (void (*)(uint64_t))type metadata accessor for AccountService);
    uint64_t v7 = swift_task_alloc();
    v0[11] = v7;
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v6;
    unint64_t v8 = (void *)swift_task_alloc();
    v0[12] = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_10004E1A8;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_100008944()
{
  uint64_t v1 = *(void *)(v0 + 72);
  *(unsigned char *)(v0 + 200) = dispatch thunk of XPCClientConnectionPool.isEmpty.getter() & 1;
  return _swift_task_switch(sub_100029588, v1, 0);
}

uint64_t sub_1000089B8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t v6 = *(void *)(Priority - 8);
  __chkstk_darwin(Priority);
  unint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100044014(&qword_1003F0038);
  int v49 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  BOOL v45 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v43 = v3;
  int64_t v44 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44) {
      break;
    }
    unint64_t v26 = v45;
    unint64_t v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v27 = v45[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v44) {
              goto LABEL_34;
            }
            unint64_t v27 = v45[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v48 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v49)
    {
      (*v17)(v8, v30, Priority);
      uint64_t v31 = *(void *)(v11 + 56) + 24 * v24;
      uint64_t v32 = *(void *)v31;
      long long v50 = *(_OWORD *)(v31 + 8);
    }
    else
    {
      (*v46)(v8, v30, Priority);
      uint64_t v33 = *(void *)(v11 + 56) + 24 * v24;
      uint64_t v32 = *(void *)v33;
      long long v50 = *(_OWORD *)(v33 + 8);
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_1001491BC(&qword_1003F0048, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v29 * v21, v8, Priority);
    uint64_t v22 = *(void *)(v12 + 56) + 24 * v21;
    *(void *)uint64_t v22 = v32;
    *(_OWORD *)(v22 + 8) = v50;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v43;
  unint64_t v26 = v45;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100008E14(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 40);
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v5 = sub_100162584;
  }
  else {
    uint64_t v5 = sub_10001B098;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100008F40(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a2;
  char v37 = a1;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  int v49 = (char *)&v36 - v12;
  int64_t v13 = 0;
  uint64_t v41 = v11;
  uint64_t v42 = a3;
  uint64_t v14 = *(void *)(a3 + 56);
  uint64_t v38 = 0;
  uint64_t v39 = a3 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  int64_t v40 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v47 = v11 + 16;
  uint64_t v48 = a4;
  uint64_t v46 = a4 + 56;
  uint64_t v18 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  while (1)
  {
    if (v17)
    {
      uint64_t v44 = (v17 - 1) & v17;
      int64_t v45 = v13;
      unint64_t v19 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v20 >= v40) {
      goto LABEL_31;
    }
    unint64_t v21 = *(void *)(v39 + 8 * v20);
    int64_t v22 = v13 + 1;
    if (!v21)
    {
      int64_t v22 = v13 + 2;
      if (v13 + 2 >= v40) {
        goto LABEL_31;
      }
      unint64_t v21 = *(void *)(v39 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v13 + 3;
        if (v13 + 3 >= v40) {
          goto LABEL_31;
        }
        unint64_t v21 = *(void *)(v39 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v44 = (v21 - 1) & v21;
    int64_t v45 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_22:
    uint64_t v24 = *(void *)(v42 + 48);
    uint64_t v25 = *(void *)(v41 + 72);
    unint64_t v43 = v19;
    unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
    v26(v49, v24 + v25 * v19, v6);
    if (*(void *)(v48 + 16)
      && (uint64_t v27 = v48,
          sub_100017ACC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device),
          uint64_t v28 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v29 = -1 << *(unsigned char *)(v27 + 32),
          unint64_t v30 = v28 & ~v29,
          ((*(void *)(v46 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) != 0))
    {
      uint64_t v31 = ~v29;
      while (1)
      {
        v26(v9, *(void *)(v48 + 48) + v30 * v25, v6);
        sub_100017ACC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *v18;
        (*v18)(v9, v6);
        if (v32) {
          break;
        }
        unint64_t v30 = (v30 + 1) & v31;
        if (((*(void *)(v46 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
          goto LABEL_5;
        }
      }
      uint64_t result = v33(v49, v6);
      *(unint64_t *)((char *)v37 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      BOOL v34 = __OFADD__(v38++, 1);
      unint64_t v17 = v44;
      int64_t v13 = v45;
      if (v34)
      {
        __break(1u);
LABEL_31:
        uint64_t v35 = v42;
        swift_retain();
        return sub_100041790(v37, v36, v38, v35);
      }
    }
    else
    {
LABEL_5:
      uint64_t result = (*v18)(v49, v6);
      unint64_t v17 = v44;
      int64_t v13 = v45;
    }
  }
  uint64_t v23 = v13 + 4;
  if (v13 + 4 >= v40) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v39 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v13 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v40) {
      goto LABEL_31;
    }
    unint64_t v21 = *(void *)(v39 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100009360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(sub_10000F1E4, 0, 0);
}

uint64_t sub_100009384()
{
  sub_100044014(&qword_1003F2828);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000093F8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 928);
  *(void *)(v3 + 1520) = a1;
  *(void *)(v3 + 1528) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100082FDC;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10004D8A4;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10000953C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)(v0[18] + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  swift_beginAccess();
  v0[22] = *v2;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100011494, v1, 0);
}

Swift::Int sub_1000095D8()
{
  return Hasher._finalize()();
}

uint64_t sub_100009630()
{
  sub_100044014(&qword_1003F2828);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000096A4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1592) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1600) = v5;
  uint64_t v6 = type metadata accessor for AccountService(0);
  uint64_t v7 = sub_100046FF4(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  void *v5 = v4;
  v5[1] = sub_100004F7C;
  uint64_t v8 = *(void *)(v2 + 1512);
  uint64_t v9 = *(void *)(v2 + 1504);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100009858()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 592;
  *(void *)(*v1 + 1712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 928);
    sub_10000A520(v3, &qword_1003ECD18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100083258;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 672;
    uint64_t v8 = v2 + 632;
    uint64_t v9 = *(void *)(v2 + 928);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v8);
    sub_1000233E4(v7);
    uint64_t v5 = sub_1000821C4;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000099EC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[264] = a1;
  v3[265] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000A83AC, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[266] = v5;
    void *v5 = v4;
    v5[1] = sub_10004B8D0;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_100009B80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = sub_10022065C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v4 = sub_1001CD21C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100009CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[2];
  uint64_t v6 = sub_10003D430(&qword_1003F0330, a2, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v7 = (void *)swift_task_alloc();
  v2[5] = v7;
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  v2[6] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100009B80;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, v3, v6, 0xD000000000000016, 0x80000001003784A0, sub_10022A5A8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100009DE4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v38 = a1;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v42 = a3;
  uint64_t v43 = 0;
  int64_t v11 = 0;
  uint64_t v12 = a3;
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = *(void *)(v12 + 56);
  uint64_t v39 = v12 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(v12 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v41 = v10;
  uint64_t v51 = v10 + 16;
  uint64_t v49 = a4 + 56;
  uint64_t v52 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  do
  {
LABEL_6:
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v11 << 6);
    }
    else
    {
      int64_t v21 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_33;
      }
      if (v21 >= v40)
      {
LABEL_32:
        uint64_t v36 = v42;
        swift_retain();
        return sub_100041790(v38, v37, v43, v36);
      }
      unint64_t v22 = *(void *)(v39 + 8 * v21);
      ++v11;
      if (!v22)
      {
        int64_t v11 = v21 + 1;
        if (v21 + 1 >= v40) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v39 + 8 * v11);
        if (!v22)
        {
          int64_t v11 = v21 + 2;
          if (v21 + 2 >= v40) {
            goto LABEL_32;
          }
          unint64_t v22 = *(void *)(v39 + 8 * v11);
          if (!v22)
          {
            int64_t v23 = v21 + 3;
            if (v23 >= v40) {
              goto LABEL_32;
            }
            unint64_t v22 = *(void *)(v39 + 8 * v23);
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_34;
                }
                if (v11 >= v40) {
                  goto LABEL_32;
                }
                unint64_t v22 = *(void *)(v39 + 8 * v11);
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
      }
LABEL_21:
      unint64_t v18 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
    }
    uint64_t v24 = *(void *)(v42 + 48);
    uint64_t v50 = *(void *)(v41 + 72);
    uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
    v25(v14, v24 + v50 * v20, v6);
    uint64_t v26 = *(void *)(a4 + 16);
    uint64_t v44 = (unint64_t)v52 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v45 = v20;
    if (v26
      && (sub_100017ACC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device),
          uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v28 = -1 << *(unsigned char *)(a4 + 32),
          unint64_t v29 = v27 & ~v28,
          ((*(void *)(v49 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) != 0))
    {
      unint64_t v46 = v18;
      int64_t v47 = v11;
      uint64_t v30 = a4;
      uint64_t v31 = ~v28;
      do
      {
        char v32 = v48;
        v25(v48, *(void *)(v30 + 48) + v29 * v50, v6);
        sub_100017ACC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
        char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
        BOOL v34 = *v52;
        (*v52)(v32, v6);
        if (v33)
        {
          uint64_t result = v34(v14, v6);
          a4 = v30;
          unint64_t v18 = v46;
          int64_t v11 = v47;
          goto LABEL_6;
        }
        unint64_t v29 = (v29 + 1) & v31;
      }
      while (((*(void *)(v49 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) != 0);
      a4 = v30;
      unint64_t v18 = v46;
      int64_t v11 = v47;
      uint64_t result = v34(v14, v6);
    }
    else
    {
      uint64_t result = (*v52)(v14, v6);
    }
    *(unint64_t *)((char *)v38 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
  }
  while (!__OFADD__(v43++, 1));
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10000A230(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v5[11] = swift_isaMask & *a3;
  uint64_t v6 = type metadata accessor for LocationRequest();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10000B5D8, 0, 0);
}

uint64_t sub_10000A330()
{
  (*(void (**)(void))(v0 + 32))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000A3AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_100044014(&qword_1003EE3A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100021E28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10000A520(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100044014(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A57C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 64) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_100047234(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047234(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100006368;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000A758(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Transaction();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_10000A80C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10001CC78, v2, 0);
}

uint64_t sub_10000A92C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[186] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[187] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[188] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100046FF4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[189] = v6;
  uint64_t v7 = sub_100046FF4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000093F8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000AB0C(uint64_t a1, uint64_t a2)
{
  v3[656] = a2;
  v3[655] = a1;
  uint64_t v4 = type metadata accessor for OnConflict();
  v3[657] = v4;
  v3[658] = *(void *)(v4 - 8);
  v3[659] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v3[660] = v5;
  v3[661] = *(void *)(v5 - 8);
  v3[662] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[663] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10004C200;
  v6[116] = v2;
  v6[115] = v3 + 56;
  return _swift_task_switch(sub_10004A32C, 0, 0);
}

uint64_t sub_10000AC7C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 112) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 120) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004742C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004742C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000048B0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000AE58()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10022065C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100220640;
  }
  return _swift_task_switch(v2, 0, 0);
}

void *sub_10000AF74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    uint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v77 = v17 + v25;
    v79 = &v16[v25];
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    v75 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75(v79, v77, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    uint64_t v28 = &v16[v27];
    unint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    char v32 = &v16[v31];
    char v33 = (void *)(v17 + v31);
    uint64_t v81 = v33[1];
    *(void *)char v32 = *v33;
    *((void *)v32 + 1) = v81;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v80 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v80;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    uint64_t v39 = (void *)(v17 + v37);
    uint64_t v78 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v78;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v76 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v76;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    unint64_t v45 = (void *)(v17 + v43);
    uint64_t v74 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v74;
    uint64_t v46 = v24[21];
    int64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v49 = v48[1];
    *(void *)int64_t v47 = *v48;
    *((void *)v47 + 1) = v49;
    uint64_t v50 = v24[22];
    uint64_t v51 = &v16[v50];
    uint64_t v52 = (void *)(v17 + v50);
    uint64_t v53 = v52[1];
    *(void *)uint64_t v51 = *v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = v24[23];
    uint64_t v55 = &v16[v54];
    uint64_t v56 = (void *)(v17 + v54);
    uint64_t v57 = v56[1];
    *(void *)uint64_t v55 = *v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = v24[24];
    uint64_t v59 = &v16[v58];
    uint64_t v60 = v17 + v58;
    *(void *)uint64_t v59 = *(void *)v60;
    v59[8] = *(unsigned char *)(v60 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v61 = v24[27];
    v62 = &v16[v61];
    v63 = (void *)(v17 + v61);
    uint64_t v64 = v63[1];
    *(void *)v62 = *v63;
    *((void *)v62 + 1) = v64;
    uint64_t v65 = v24[28];
    v66 = &v16[v65];
    v67 = (void *)(v17 + v65);
    uint64_t v68 = v67[1];
    *(void *)v66 = *v67;
    *((void *)v66 + 1) = v68;
    uint64_t v69 = v24[29];
    v70 = &v16[v69];
    v71 = (void *)(v17 + v69);
    uint64_t v72 = v71[1];
    *(void *)v70 = *v71;
    *((void *)v70 + 1) = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10000B354(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = swift_isaMask & *a1;
  uint64_t v5 = type metadata accessor for ClientSessionError.Category();
  v3[7] = v5;
  v3[8] = *(void *)(v5 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientSessionError();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_10004CF10, a1, 0);
}

uint64_t sub_10000B4B0(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = *v1;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000181D0, v1, 0);
}

uint64_t sub_10000B5D8()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10004F4A4(&qword_1003F36F8, (void (*)(uint64_t))&type metadata accessor for LocationRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = *(void *)(v0 + 64);
  swift_release();
  return _swift_task_switch(sub_10004D4A4, v1, 0);
}

uint64_t sub_10000B938(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 232) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 240) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004715C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004715C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000072E0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000BB14()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003F5D10 + dword_1003F5D10);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000A80C;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[4];
  return v5(v2, v3);
}

uint64_t sub_10000BBCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1936);
  uint64_t v2 = *(void *)(*(void *)v0 + 1920);
  swift_task_dealloc();
  sub_10000A520(v2, &qword_1003ED110);
  sub_10000A520(v1, &qword_1003F3B30);
  return _swift_task_switch(sub_100017644, 0, 0);
}

uint64_t sub_10000BD10(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 408) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 416) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047474(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047474(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100005B5C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000BEEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000209D8, v2, 0);
}

uint64_t sub_10000C020(int a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  swift_retain();
  a6(a5, v9);
  swift_release();

  return swift_release();
}

uint64_t sub_10000C0B8(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for LocationRequest();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t Priority = type metadata accessor for LocatePriority();
  v2[16] = Priority;
  v2[17] = *(void *)(Priority - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_100011830, v1, 0);
}

uint64_t sub_10000C1E4(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_10000E928, 0, 0);
}

uint64_t sub_10000C2A4(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = *v1;
  uint64_t v3 = type metadata accessor for LocationRequest();
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[12] = v4;
  v2[13] = *(void *)(v4 + 64);
  v2[14] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_10000844C, v1, 0);
}

uint64_t sub_10000C3C4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_100047234(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047234(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10000704C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000C5A0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 216) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 224) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for CommandManager();
  uint64_t v6 = sub_10004742C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004742C(&qword_1003ECCA0, (void (*)(uint64_t))type metadata accessor for CommandManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000061D8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000C77C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[20];
  if (v1)
  {
    uint64_t v3 = v0[19];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[3] = v2;
    sub_100014914(v1, (uint64_t)sub_100291B8C, 0, isUniquelyReferenced_nonNull_native, v0 + 3);
    if (v3)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = v0[3];
      swift_bridgeObjectRelease();
      v0[19] = 0;
      v0[20] = v8;
      uint64_t v9 = v0[18];
      uint64_t v10 = v0[7];
      long long v11 = (void *)swift_task_alloc();
      v0[21] = v11;
      *long long v11 = v0;
      v11[1] = sub_10004D630;
      uint64_t v12 = v0[10];
      return TaskGroup.Iterator.next(isolation:)(v0 + 2, v10, v9, v12);
    }
  }
  else
  {
    uint64_t v6 = (void *)v0[4];
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    *uint64_t v6 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

void *sub_10000C950(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100044014(&qword_1003EE3F0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_10003BD98((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1001491B4();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10000CA38()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10001ABE0, v0, 0);
}

uint64_t sub_10000CA80()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F27B8) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10004A274;
  v5[6] = v3;
  v5[7] = v4;
  return _swift_task_switch(sub_100015040, 0, 0);
}

uint64_t sub_10000CB6C()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 72)
                                    + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool);
  sub_100044014(&qword_1003F3478);
  sub_10000CC08();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100008944, v2, v1);
}

unint64_t sub_10000CC08()
{
  unint64_t result = qword_1003F3480;
  if (!qword_1003F3480)
  {
    sub_10004AE58(&qword_1003F3478);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F3480);
  }
  return result;
}

uint64_t sub_10000CC64()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10001A8EC, 0, 0);
}

uint64_t sub_10000CCAC()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F2800) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100018CD0;
  return sub_100014E28(v3, v4);
}

uint64_t *sub_10000CDBC(uint64_t *a1)
{
  return a1;
}

void *sub_10000CE20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = (void *)sub_1000354B4(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x240uLL);
  }
  return result;
}

uint64_t sub_10000CE74(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocationService();
  uint64_t v6 = sub_1000256E8(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000256E8(&qword_1003ED030, (void (*)(uint64_t))type metadata accessor for LocationService);
  *uint64_t v3 = v9;
  v3[1] = sub_100005C94;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10000D050()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10004727C(&qword_1003F0B90, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10004727C(&qword_1003EFE10, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100178D68;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_10000D1F0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 2040) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 2048) = v5;
  uint64_t v6 = type metadata accessor for LocationService();
  uint64_t v7 = sub_100046FF4(&qword_1003ED030, (void (*)(uint64_t))type metadata accessor for LocationService);
  void *v5 = v4;
  v5[1] = sub_100010098;
  uint64_t v8 = *(void *)(v2 + 2008);
  uint64_t v9 = *(void *)(v2 + 2000);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t type metadata accessor for LocationService()
{
  uint64_t result = qword_1003F2DD8;
  if (!qword_1003F2DD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000D3F0(uint64_t a1)
{
  uint64_t v102 = type metadata accessor for HandleType();
  uint64_t v3 = *(void *)(v102 - 8);
  uint64_t v4 = __chkstk_darwin(v102);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v103 = (char *)&v89 - v6;
  uint64_t v99 = type metadata accessor for DarwinNotifications();
  uint64_t v100 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  v98 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for Friend();
  uint64_t v96 = *(void *)(v97 - 8);
  uint64_t v8 = __chkstk_darwin(v97);
  v95 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v101 = (char *)&v89 - v10;
  uint64_t v113 = sub_100044014(&qword_1003F05C0);
  uint64_t v104 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  v112 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void (*)(char *, char *, uint64_t))sub_100044014(&qword_1003F0090);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = __chkstk_darwin(v12);
  v111 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v110 = (char *)&v89 - v16;
  uint64_t v17 = type metadata accessor for DataManager.State(0);
  uint64_t v18 = __chkstk_darwin(v17);
  v105 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (void (**)(uint64_t, uint64_t))((char *)&v89 - v21);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v89 - v23;
  uint64_t v25 = v1;
  uint64_t v26 = v1 + OBJC_IVAR____TtC13findmylocated11DataManager_state;
  swift_beginAccess();
  uint64_t v27 = v26;
  sub_10004E968(v26, (uint64_t)v24);
  uint64_t v115 = a1;
  LOBYTE(v26) = sub_1000121A0((uint64_t)v24, a1);
  v114 = v24;
  uint64_t result = sub_10004E90C((uint64_t)v24);
  if (v26) {
    return result;
  }
  uint64_t v93 = v3;
  if (qword_1003EC030 != -1) {
LABEL_52:
  }
    swift_once();
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = sub_100044058(v29, (uint64_t)qword_10040B708);
  sub_10004E968(v115, (uint64_t)v22);
  uint64_t v31 = v25;
  swift_retain_n();
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    v90 = v22;
    LODWORD(v109) = v34;
    uint64_t v36 = v35;
    uint64_t v108 = swift_slowAlloc();
    v118[0] = v108;
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v106 = v36 + 4;
    uint64_t v37 = (uint64_t)v114;
    sub_10004E968(v27, (uint64_t)v114);
    os_log_t v107 = v32;
    uint64_t v38 = sub_100105094();
    unint64_t v40 = v39;
    uint64_t v41 = v37;
    uint64_t v31 = v25;
    sub_10004E90C(v41);
    uint64_t v117 = sub_100037004(v38, v40, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    uint64_t v106 = v36 + 14;
    uint64_t v42 = (uint64_t)v90;
    uint64_t v43 = sub_100105094();
    uint64_t v117 = sub_100037004(v43, v44, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004E90C(v42);
    char v32 = v107;
    _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v109, "State: %{public}s -> %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    sub_10004E90C((uint64_t)v22);
  }

  swift_beginAccess();
  sub_10016029C(v115, v27);
  swift_endAccess();
  unint64_t v45 = (uint64_t *)(v31 + OBJC_IVAR____TtC13findmylocated11DataManager_stateContinuations);
  swift_beginAccess();
  uint64_t v46 = *(void *)(*v45 + 16);
  if (v46)
  {
    int64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 134217984;
      uint64_t v117 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Publishing State change event to %ld subscribers", v49, 0xCu);
      swift_slowDealloc();
    }
  }
  uint64_t v91 = v30;
  uint64_t v92 = v17;
  uint64_t v50 = *v45;
  uint64_t v51 = *(void *)(*v45 + 64);
  uint64_t v106 = *v45 + 64;
  uint64_t v52 = 1 << *(unsigned char *)(v50 + 32);
  uint64_t v53 = -1;
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  unint64_t v54 = v53 & v51;
  uint64_t v109 = v13 + 16;
  os_log_t v107 = (os_log_t)((unint64_t)(v52 + 63) >> 6);
  uint64_t v108 = v13 + 32;
  uint64_t v22 = (void (**)(uint64_t, uint64_t))(v104 + 8);
  uint64_t v25 = v13 + 8;
  uint64_t v55 = v50;
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  uint64_t v56 = v111;
  uint64_t v57 = (uint64_t)v114;
  while (1)
  {
    if (v54)
    {
      unint64_t v58 = __clz(__rbit64(v54));
      v54 &= v54 - 1;
      unint64_t v59 = v58 | (v27 << 6);
      goto LABEL_14;
    }
    uint64_t v61 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_47:
      v79 = v95;
      v12(v95, v56, v27);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      int v82 = v81;
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v83 = swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        uint64_t v117 = v115;
        *(_DWORD *)uint64_t v83 = 136446466;
        LODWORD(v114) = v82;
        uint64_t v116 = sub_100037004(0x7328657461647075, 0xEE00293A65746174, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v83 + 12) = 2080;
        uint64_t v113 = v83 + 14;
        v84 = v94;
        Friend.type.getter();
        sub_100160950(&qword_1003EFEB0, (void (*)(uint64_t))&type metadata accessor for HandleType);
        uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v87 = v86;
        v88 = *(void (**)(char *, uint64_t))(v57 + 8);
        v88(v84, v102);
        uint64_t v116 = sub_100037004(v85, v87, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v25 = v102;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v97);
        _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v114, "%{public}s Unexpected friend.type %s!", (uint8_t *)v83, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v27);

        v88 = *(void (**)(char *, uint64_t))(v57 + 8);
      }
      return ((uint64_t (*)(char *, uint64_t))v88)(v103, v25);
    }
    if (v61 >= (uint64_t)v107) {
      break;
    }
    unint64_t v62 = *(void *)(v106 + 8 * v61);
    ++v27;
    if (!v62)
    {
      uint64_t v27 = v61 + 1;
      if (v61 + 1 >= (uint64_t)v107) {
        break;
      }
      unint64_t v62 = *(void *)(v106 + 8 * v27);
      if (!v62)
      {
        uint64_t v27 = v61 + 2;
        if (v61 + 2 >= (uint64_t)v107) {
          break;
        }
        unint64_t v62 = *(void *)(v106 + 8 * v27);
        if (!v62)
        {
          uint64_t v27 = v61 + 3;
          if (v61 + 3 >= (uint64_t)v107) {
            break;
          }
          unint64_t v62 = *(void *)(v106 + 8 * v27);
          if (!v62)
          {
            uint64_t v63 = v61 + 4;
            if (v63 >= (uint64_t)v107) {
              break;
            }
            unint64_t v62 = *(void *)(v106 + 8 * v63);
            if (!v62)
            {
              while (1)
              {
                uint64_t v27 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  break;
                }
                if (v27 >= (uint64_t)v107) {
                  goto LABEL_32;
                }
                unint64_t v62 = *(void *)(v106 + 8 * v27);
                ++v63;
                if (v62) {
                  goto LABEL_31;
                }
              }
              __break(1u);
              goto LABEL_52;
            }
            uint64_t v27 = v63;
          }
        }
      }
    }
LABEL_31:
    unint64_t v54 = (v62 - 1) & v62;
    unint64_t v59 = __clz(__rbit64(v62)) + (v27 << 6);
LABEL_14:
    uint64_t v60 = v110;
    (*(void (**)(char *, unint64_t, void *))(v13 + 16))(v110, *(void *)(v55 + 56) + *(void *)(v13 + 72) * v59, v12);
    (*(void (**)(char *, char *, void *))(v13 + 32))(v56, v60, v12);
    sub_10004E968(v115, v57);
    uint64_t v17 = (uint64_t)v112;
    AsyncStream.Continuation.yield(_:)();
    (*v22)(v17, v113);
    (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v13 + 8))(v56, v12);
  }
LABEL_32:
  swift_release();
  sub_10004E968(v115, (uint64_t)v105);
  uint64_t result = swift_getEnumCaseMultiPayload();
  uint64_t v25 = v102;
  uint64_t v64 = v103;
  uint64_t v57 = v93;
  uint64_t v56 = v101;
  switch((int)result)
  {
    case 1:
    case 2:
      uint64_t v17 = v96;
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
      uint64_t v27 = v97;
      v12(v101, v105, v97);
      Friend.type.getter();
      int v65 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))(v64, v25);
      if (v65 == enum case for HandleType.follower(_:))
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v56, v27);
        v66 = (unsigned int *)&enum case for DarwinNotifications.followersChanged(_:);
        goto LABEL_40;
      }
      if (v65 == enum case for HandleType.following(_:))
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v56, v27);
        v66 = (unsigned int *)&enum case for DarwinNotifications.followingsChanged(_:);
        goto LABEL_40;
      }
      if (v65 != enum case for HandleType.futureFollower(_:)
        && v65 != enum case for HandleType.futureFollowing(_:)
        && v65 != enum case for HandleType.pendingOffer(_:))
      {
        goto LABEL_47;
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v56, v27);
      break;
    case 3:
    case 4:
    case 5:
      return result;
    case 6:
      v66 = (unsigned int *)&enum case for DarwinNotifications.initialized(_:);
      goto LABEL_40;
    case 7:
      v66 = (unsigned int *)&enum case for DarwinNotifications.devicesChanged(_:);
LABEL_40:
      uint64_t v73 = v100;
      uint64_t v74 = v98;
      uint64_t v75 = v99;
      (*(void (**)(char *, void, uint64_t))(v100 + 104))(v98, *v66, v99);
      uint64_t v76 = DarwinNotifications.rawValue.getter();
      unint64_t v78 = v77;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
      sub_100160300(v76, v78);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v67 = v100;
      uint64_t v68 = v98;
      uint64_t v69 = v99;
      (*(void (**)(char *, void, uint64_t))(v100 + 104))(v98, enum case for DarwinNotifications.meDeviceChanged(_:), v99);
      uint64_t v70 = DarwinNotifications.rawValue.getter();
      unint64_t v72 = v71;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
      sub_100160300(v70, v72);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1001604E8((uint64_t)v105);
      break;
  }
  return result;
}

uint64_t sub_10000E224(uint64_t a1)
{
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100037378(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1));
  return a1;
}

uint64_t sub_10000E2C8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v5 = sub_1002254C8;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    long long v5 = sub_100017C88;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10000E400(uint64_t a1)
{
  v2[221] = v1;
  v2[220] = a1;
  long long v3 = (void *)swift_task_alloc();
  v2[222] = v3;
  *long long v3 = v2;
  v3[1] = sub_100022234;
  return daemon.getter();
}

uint64_t sub_10000E498()
{
  uint64_t v1 = v0;
  uint64_t v22 = v0 + 74;
  uint64_t v23 = (uint64_t)(v0 + 2);
  uint64_t v24 = (uint64_t)(v0 + 79);
  uint64_t v20 = v0[210];
  unint64_t v21 = v0[211];
  uint64_t v18 = v0 + 84;
  uint64_t v19 = v0[209];
  uint64_t v2 = v0[204];
  uint64_t v3 = v0[192];
  uint64_t v4 = v0[152];
  uint64_t v5 = v1[151];
  uint64_t v6 = v1[150];
  uint64_t v17 = v1[145];
  uint64_t v16 = v1[144];
  uint64_t v7 = v1[143];
  uint64_t v8 = v1[142];
  uint64_t v9 = v1[141];
  uint64_t v10 = v1[116];
  uint64_t v11 = v10 + v2;
  *(void *)(v10 + v3) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for LegacyRefreshSchedule.notScheduled(_:), v9);
  uint64_t v12 = v10 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v7, v9);
  swift_endAccess();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for LocatePriority.shallow(_:), v6);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v11, v4, v6);
  swift_endAccess();
  v1[87] = v16;
  v1[88] = sub_100046FF4(&qword_1003ED000, (void (*)(uint64_t))type metadata accessor for LocationEndpoint);
  long long v13 = sub_10003E0F4(v18);
  sub_1000306DC(v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
  v1[82] = &type metadata for LocationServerRequest;
  v1[83] = sub_1000853A4();
  v1[79] = v19;
  v1[80] = v20;
  v1[81] = v21;
  swift_bridgeObjectRetain();
  sub_1000287E4(v20, v21);
  Account.dsid.getter();
  Account.appToken.getter();
  v1[77] = type metadata accessor for BasicCredential();
  v1[78] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v22);
  BasicCredential.init(username:password:)();
  uint64_t v14 = (void *)swift_task_alloc();
  v1[213] = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_100009858;
  return sub_100103CA0(v23, (uint64_t)v18, v24, (uint64_t)v22);
}

uint64_t sub_10000E7B0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[252] = a1;
  v3[253] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[230];
    return _swift_task_switch(sub_100081ECC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[254] = v5;
    void *v5 = v3;
    v5[1] = sub_10000D1F0;
    return daemon.getter();
  }
}

uint64_t sub_10000E928()
{
  v0[7] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0[10];
  if ((v1 & 0xC000000000000001) == 0)
  {
    uint64_t v13 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v5 = ~v13;
    uint64_t v3 = v1 + 56;
    uint64_t v14 = *(void *)(v1 + 56);
    uint64_t v15 = -v13;
    v0[16] = v1 + 56;
    v0[17] = v5;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v6 = v16 & v14;
    v0[15] = v1;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  type metadata accessor for LocationServiceClient();
  sub_100362374();
  Set.Iterator.init(_cocoa:)();
  uint64_t result = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  unint64_t v6 = v0[6];
  v0[16] = v3;
  v0[17] = v5;
  v0[15] = result;
  if ((result & 0x8000000000000000) == 0)
  {
    if (v6)
    {
LABEL_4:
      uint64_t v7 = (v6 - 1) & v6;
      unint64_t v8 = __clz(__rbit64(v6)) | (v4 << 6);
      uint64_t v9 = v4;
LABEL_5:
      uint64_t v10 = *(void *)(*(void *)(result + 48) + 8 * v8);
      swift_retain();
      goto LABEL_6;
    }
LABEL_14:
    int64_t v17 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v18 = (unint64_t)(v5 + 64) >> 6;
    if (v17 >= v18) {
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v3 + 8 * v17);
    uint64_t v9 = v4 + 1;
    if (!v19)
    {
      uint64_t v9 = v4 + 2;
      if (v4 + 2 >= v18) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v3 + 8 * v9);
      if (!v19)
      {
        uint64_t v9 = v4 + 3;
        if (v4 + 3 >= v18) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v3 + 8 * v9);
        if (!v19)
        {
          uint64_t v9 = v4 + 4;
          if (v4 + 4 >= v18) {
            goto LABEL_32;
          }
          unint64_t v19 = *(void *)(v3 + 8 * v9);
          if (!v19)
          {
            uint64_t v9 = v4 + 5;
            if (v4 + 5 >= v18) {
              goto LABEL_32;
            }
            unint64_t v19 = *(void *)(v3 + 8 * v9);
            if (!v19)
            {
              uint64_t v21 = v4 + 6;
              while (v18 != v21)
              {
                unint64_t v19 = *(void *)(v3 + 8 * v21++);
                if (v19)
                {
                  uint64_t v9 = v21 - 1;
                  goto LABEL_17;
                }
              }
              goto LABEL_32;
            }
          }
        }
      }
    }
LABEL_17:
    uint64_t v7 = (v19 - 1) & v19;
    unint64_t v8 = __clz(__rbit64(v19)) + (v9 << 6);
    goto LABEL_5;
  }
  uint64_t v20 = __CocoaSet.Iterator.next()();
  if (!v20) {
    goto LABEL_32;
  }
  v0[9] = v20;
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v10 = v0[8];
  swift_unknownObjectRelease();
  uint64_t v9 = v4;
  uint64_t v7 = v6;
LABEL_6:
  v0[19] = v9;
  v0[20] = v7;
  v0[18] = v10;
  if (v10)
  {
    uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                          + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[21] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10000466C;
    uint64_t v12 = v0[14];
    return v24(v12);
  }
LABEL_32:
  sub_1001491B4();
  uint64_t v22 = v0[7];
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(uint64_t))v0[1];
  return v23(v22);
}

uint64_t sub_10000EC44(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100149DB4, v5, 0);
  }
  else
  {
    swift_release();
    unint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *unint64_t v6 = v4;
    v6[1] = sub_100005E2C;
    return sub_10000CC64();
  }
}

uint64_t sub_10000EDCC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[206];
  uint64_t v2 = v0[169];
  uint64_t v3 = v0[165];
  uint64_t v4 = v0[158];
  uint64_t v5 = v0[155];
  uint64_t v6 = v0[154];
  uint64_t v7 = v0[145];
  swift_release();
  swift_release();
  sub_10002EFF8(v7, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

unint64_t sub_10000F0C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFF98);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003B888(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000F1E4()
{
  if (qword_1003EC3E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_100044058(v1, (uint64_t)qword_10040C218);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalStorage Service write serverSettings", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  void *v5 = v0;
  v5[1] = sub_10004BF30;
  uint64_t v6 = v0[6];
  return sub_100005334(v6);
}

uint64_t sub_10000F340()
{
  uint64_t v12 = v0;
  if (qword_1003EC3E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = sub_100044058(v1, (uint64_t)qword_10040C218);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for Device();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[5] = sub_100037004(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalStorage Service write with devices: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10004BCE4;
  uint64_t v9 = v0[6];
  return sub_100019184(v9);
}

uint64_t sub_10000F5A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Transaction();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = v4;
  v9[5] = a3;
  v9[6] = a4;
  sub_100022C64(a1, a2);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_10000F678(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    return _swift_task_switch(sub_100162360, v5, 0);
  }
  else
  {
    swift_release();
    unint64_t v6 = (void *)swift_task_alloc();
    v3[11] = v6;
    *unint64_t v6 = v4;
    v6[1] = sub_100008E14;
    return sub_10000CA38();
  }
}

uint64_t sub_10000F800()
{
  if (!v0[26])
  {
    uint64_t v6 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, enum case for DatabaseError.notConnected(_:), v6);
    swift_willThrow();
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[21];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 16))(v2, v0[9], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v2, v3);
  if (v4 == enum case for HandleType.follower(_:))
  {
    uint64_t v5 = 2;
  }
  else if (v4 == enum case for HandleType.following(_:))
  {
    uint64_t v5 = 4;
  }
  else if (v4 == enum case for HandleType.futureFollower(_:))
  {
    uint64_t v5 = 8;
  }
  else if (v4 == enum case for HandleType.futureFollowing(_:))
  {
    uint64_t v5 = 16;
  }
  else
  {
    if (v4 != enum case for HandleType.pendingOffer(_:)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v5 = 32;
  }
  if (qword_1003EC0B8 != -1) {
    swift_once();
  }
  uint64_t v31 = v0 + 2;
  uint64_t v8 = v0[18];
  uint64_t v9 = v0[19];
  uint64_t v10 = v0[17];
  uint64_t v11 = sub_100044058(v10, (uint64_t)qword_10040B888);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v30(v9, v11, v10);
  if (qword_1003EC208 != -1) {
    swift_once();
  }
  uint64_t v29 = v0[25];
  uint64_t v26 = v0[20];
  uint64_t v27 = v0[19];
  uint64_t v12 = v0[17];
  uint64_t v25 = v0[18];
  uint64_t v13 = v0[15];
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[13];
  uint64_t v28 = v0[14];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[12];
  sub_100044058(v16, (uint64_t)qword_10040BC90);
  v0[7] = v5;
  sub_100046560();
  & infix<A>(_:_:)();
  v0[8] = 0;
  != infix<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  QueryType.filter(_:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v28);
  int64_t v18 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v18(v27, v12);
  v0[5] = v12;
  v0[6] = &protocol witness table for Table;
  unint64_t v19 = sub_10003E0F4(v31);
  v30((uint64_t)v19, v26, v12);
  uint64_t v20 = sub_10003D9C4();
  if (v29)
  {
    v18(v0[20], v0[17]);
    swift_release();
    sub_1000233E4((uint64_t)v31);
    goto LABEL_19;
  }
  uint64_t v23 = v20;
  v18(v0[20], v0[17]);
  swift_release();
  sub_1000233E4((uint64_t)v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
  return v24(v23);
}

uint64_t sub_10000FD44()
{
  *(void *)(*(void *)v1 + 4928) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002274D8;
  }
  else {
    uint64_t v2 = sub_100049B40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000FE58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 920) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 888);
  if (v0) {
    uint64_t v4 = sub_100220760;
  }
  else {
    uint64_t v4 = sub_1002206C0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10000FF70(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[9];
    uint64_t v5 = sub_1002839A4;
  }
  else
  {
    uint64_t v6 = v3[9];
    swift_release();
    uint64_t v5 = sub_10000CB6C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100010098(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[257] = a1;
  v3[258] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[230];
    return _swift_task_switch(sub_100081FB8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[259] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10004E070;
    return sub_1000163A8();
  }
}

uint64_t sub_100010224()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[5];
    uint64_t v6 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v8 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v5(v0[6], v7, v0[4]);
      if (Device.isActive.getter()) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(v0[6], v0[4]);
      v7 += v8;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = v0[4];
    uint64_t v13 = v0[2];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v10, v12);
    uint64_t v9 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v9 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[5] + 56))(v0[2], v9, 1, v0[4]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100010384()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1824) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1768);
    uint64_t v4 = sub_1001629F8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1768);
    sub_100037758(v2 + 448, v2 + 1312);
    uint64_t v4 = sub_100021740;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000104B0()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager write server Settings into LocalStorage", v4, 2u);
    swift_slowDealloc();
  }
  swift_release();

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000105D0()
{
  unint64_t v1 = v0[34];
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v3 = v0[18];
    uint64_t v5 = v0[8];
    uint64_t v4 = v0[9];
    uint64_t v6 = v0[7];
    swift_release();
    sub_10000A520(v4, &qword_1003F3B30);
    sub_10000A520(v5, &qword_1003ED110);
    v2(v6, v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    v0[2] = v0[33];
    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v10 = v0[18];
    uint64_t v12 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v13 = v0[7];
    v0[3] = v1;
    sub_10004F4EC();
    uint64_t v7 = DataProtocol.hexString.getter();
    uint64_t v8 = v14;
    swift_release();
    sub_10000A520(v11, &qword_1003F3B30);
    sub_10000A520(v12, &qword_1003ED110);
    v9(v13, v10);
    sub_100044090(v0[2], v0[3]);
  }
  uint64_t v15 = (uint64_t *)(v0[6] + *(int *)(v0[25] + 84));
  *uint64_t v15 = v7;
  v15[1] = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100010768()
{
  uint64_t v38 = v0;
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  int v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v34(v1, 1, v2) == 1)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
  }
  else
  {
    uint64_t v31 = v0[13];
    uint64_t v8 = v0[18];
    uint64_t v4 = &_swiftEmptySetSingleton;
    uint64_t v33 = v0[10];
    do
    {
      sub_10003E000(v0[15], v0[14], type metadata accessor for FriendRecord);
      if (qword_1003EC3E0 != -1) {
        swift_once();
      }
      uint64_t v35 = v8;
      uint64_t v36 = (uint64_t)v4;
      uint64_t v16 = v0[13];
      uint64_t v17 = v0[14];
      uint64_t v18 = v0[12];
      uint64_t v19 = type metadata accessor for Logger();
      sub_100044058(v19, (uint64_t)qword_10040C218);
      sub_10003D3C8(v17, v16, type metadata accessor for FriendRecord);
      sub_10003D3C8(v17, v18, type metadata accessor for FriendRecord);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = v0[12];
      uint64_t v24 = (uint64_t *)v0[13];
      if (v22)
      {
        uint64_t v25 = swift_slowAlloc();
        v37[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 141558787;
        v0[4] = 1752392040;
        os_log_type_t type = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2081;
        uint64_t v26 = *v24;
        unint64_t v27 = *(void *)(v31 + 8);
        swift_bridgeObjectRetain();
        v0[5] = sub_100037004(v26, v27, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10003D91C((uint64_t)v24, type metadata accessor for FriendRecord);
        *(_WORD *)(v25 + 22) = 2160;
        v0[6] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 32) = 2081;
        uint64_t v9 = v33;
        type metadata accessor for FriendInfoOption(0);
        sub_10003D430(&qword_1003F2820, 255, (void (*)(uint64_t))type metadata accessor for FriendInfoOption);
        swift_bridgeObjectRetain();
        uint64_t v28 = Set.description.getter();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        v0[7] = sub_100037004(v28, v30, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10003D91C(v23, type metadata accessor for FriendRecord);
        _os_log_impl((void *)&_mh_execute_header, v20, type, "Local storage service record:\nid:%{private,mask.hash}s\ntypes:%{private,mask.hash}s", (uint8_t *)v25, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10003D91C(v0[13], type metadata accessor for FriendRecord);
        sub_10003D91C(v23, type metadata accessor for FriendRecord);

        uint64_t v9 = v33;
      }
      uint64_t v11 = v0[14];
      uint64_t v10 = v0[15];
      uint64_t v12 = v0[10];
      uint64_t v13 = *(void *)(v11 + *(int *)(v9 + 136));
      uint64_t v14 = swift_task_alloc();
      *(void *)(v14 + 16) = v11;
      swift_bridgeObjectRetain();
      uint64_t v8 = v35;
      uint64_t v15 = sub_10003CE70((void (*)(char *))sub_10022A3D8, v14, v13);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v4 = (void *)sub_10003CD10(v15, v36);
      swift_bridgeObjectRelease();
      sub_10003D91C(v11, type metadata accessor for FriendRecord);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v34(v10, 1, v12) != 1);
  }
  swift_release_n();
  uint64_t v5 = sub_10003F4C8((uint64_t)v4);
  swift_bridgeObjectRelease();
  v0[3] = v5;
  sub_100044014(&qword_1003F2800);
  CheckedContinuation.resume(returning:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100010CF4(char a1)
{
  switch(a1)
  {
    case 2:
      strcpy((char *)v4, ".pending(");
      WORD1(v4[1]) = 0;
      HIDWORD(v4[1]) = -385875968;
      break;
    case 3:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v4, ".notModified(");
      HIWORD(v4[1]) = -4864;
      break;
    case 4:
      strcpy((char *)v4, ".badRequest(");
      BYTE5(v4[1]) = 0;
      HIWORD(v4[1]) = -5120;
      break;
    case 5:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v4, ".unauthorized(");
      HIBYTE(v4[1]) = -18;
      break;
    case 6:
      strcpy((char *)v4, ".forbidden(");
      HIDWORD(v4[1]) = -352321536;
      break;
    case 7:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000010;
      v4[1] = 0x8000000100374D20;
      break;
    case 8:
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000014;
      v4[1] = 0x8000000100374D00;
      break;
    case 9:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000012;
      v4[1] = 0x8000000100374CE0;
      break;
    case 10:
      strcpy((char *)v4, ".locked(");
      BYTE1(v4[1]) = 0;
      WORD1(v4[1]) = 0;
      HIDWORD(v4[1]) = -402653184;
      break;
    case 11:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v4, ".serverError(");
      HIWORD(v4[1]) = -4864;
      break;
    case 12:
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000011;
      v4[1] = 0x8000000100374CC0;
      break;
    case 13:
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000012;
      v4[1] = 0x8000000100374CA0;
      break;
    case 14:
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000014;
      v4[1] = 0x8000000100374C80;
      break;
    case 15:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000015;
      v4[1] = 0x8000000100374C60;
      break;
    case 16:
      strcpy((char *)v4, ".noMeDevice(");
      BYTE5(v4[1]) = 0;
      HIWORD(v4[1]) = -5120;
      break;
    case 17:
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000019;
      v4[1] = 0x8000000100374C40;
      break;
    case 18:
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v4[0] = 0xD000000000000014;
      v4[1] = 0x8000000100374C20;
      break;
    case 19:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v4[0] = 0xD00000000000001BLL;
      v4[1] = 0x8000000100374C00;
      break;
    case 20:
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v4[0] = 0x614D65636E65662ELL;
      v4[1] = 0xEF2874696D694C78;
      break;
    default:
      strcpy((char *)v4, ".success(");
      WORD1(v4[1]) = 0;
      HIDWORD(v4[1]) = -385875968;
      break;
  }
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4[0];
}

uint64_t sub_10001123C()
{
  if (!v0[119])
  {
    uint64_t v5 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for DatabaseError.notConnected(_:), v5);
    swift_willThrow();
    goto LABEL_7;
  }
  if (qword_1003EC0C8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[118];
  uint64_t v2 = type metadata accessor for Table();
  uint64_t v3 = sub_100044058(v2, (uint64_t)qword_10040B8B8);
  v0[113] = v2;
  v0[114] = &protocol witness table for Table;
  uint64_t v4 = sub_10003E0F4(v0 + 110);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  sub_10003E158();
  if (v1)
  {
    swift_release();
    sub_1000233E4((uint64_t)(v0 + 110));
LABEL_7:
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    goto LABEL_9;
  }
  uint64_t v8 = v0[115];
  sub_1000233E4((uint64_t)(v0 + 110));
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  swift_release();
  swift_release();
  sub_100013B50((uint64_t)(v0 + 2), (uint64_t)(v0 + 56), &qword_1003ECCD0);
  sub_100013B50((uint64_t)(v0 + 56), v8, &qword_1003ECCD0);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return v7();
}

uint64_t sub_100011494()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100014450(v2, v3, v1);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100011570(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  strcpy((char *)v12, "hideLocation:");
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001003744D0;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v12[0];
}

uint64_t sub_100011658(int a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  Swift::String v10 = _Block_copy(aBlock);
  id v11 = a3;
  swift_retain();
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v10;
  a7(v12, v14, a6, v15);
  swift_release();
  sub_100044090(v12, v14);

  return swift_release();
}

uint64_t sub_10001172C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  v5[5] = v3;
  swift_retain();
  id v6 = v3;
  sub_10010405C(v2, (uint64_t)&unk_1003F13F0, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(1);
}

uint64_t sub_100011830()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[12];
  LocationRequest.priority.getter();
  uint64_t v23 = LocatePriority.rawValue.getter();
  id v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v1, v4);
  uint64_t v7 = v5 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v4);
  uint64_t v8 = LocatePriority.rawValue.getter();
  v6(v2, v4);
  if (v8 < v23)
  {
    uint64_t v9 = v0[19];
    uint64_t v11 = v0[16];
    uint64_t v10 = v0[17];
    LocationRequest.priority.getter();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v7, v9, v11);
    swift_endAccess();
  }
  uint64_t v12 = v0[12];
  (*(void (**)(void, void, void))(v0[14] + 16))(v0[15], v0[11], v0[13]);
  unint64_t v13 = (unint64_t *)(v12 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands);
  swift_beginAccess();
  unint64_t v14 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v13 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v14 = sub_10004B0EC(0, *(void *)(v14 + 16) + 1, 1, v14);
    *unint64_t v13 = v14;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    unint64_t v14 = sub_10004B0EC(v16 > 1, v17 + 1, 1, v14);
    *unint64_t v13 = v14;
  }
  uint64_t v19 = v0[14];
  uint64_t v18 = v0[15];
  uint64_t v20 = v0[13];
  *(void *)(v14 + 16) = v17 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 32))(v14+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v17, v18, v20);
  swift_endAccess();
  os_log_type_t v21 = (void *)swift_task_alloc();
  v0[20] = v21;
  *os_log_type_t v21 = v0;
  v21[1] = sub_1000813DC;
  return sub_10001BB04();
}

uint64_t sub_100011AD0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return _swift_task_switch(sub_100015040, 0, 0);
}

uint64_t sub_100011AF0()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 176) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v5;
  void *v5 = v0;
  v5[1] = sub_10000BEEC;
  return sub_100021584(v4, 1);
}

uint64_t sub_100011C4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = sub_100044014(&qword_1003F2828);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 456) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  memcpy((void *)(v12 + 24), a3, 0x1B0uLL);
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v12 + ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v15;
  swift_retain();
  sub_100035384(a3);
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100011E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v8 = sub_100044014(&qword_1003F33C8);
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for LocationRequest();
  v6[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[14] = v10;
  v6[15] = *(void *)(v10 + 64);
  v6[16] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_100019490, a4, 0);
}

uint64_t sub_100011FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v18 = a4;
  uint64_t v10 = type metadata accessor for UUID();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_100044014(&qword_1003F2828);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  *(void *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_1000121A0(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = type metadata accessor for Friend();
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v70 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v71 = (char *)&v62 - v5;
  uint64_t v68 = type metadata accessor for Device();
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v63 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003EFEC8);
  __chkstk_darwin(v7);
  uint64_t v67 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100044014(&qword_1003EFCD0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v64 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v69 = (uint64_t)&v62 - v13;
  __chkstk_darwin(v12);
  uint64_t v65 = (uint64_t)&v62 - v14;
  uint64_t v15 = type metadata accessor for DataManager.State(0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  os_log_type_t v21 = (char *)&v62 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v62 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v62 - v26;
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v62 - v28;
  uint64_t v30 = sub_100044014(&qword_1003EFED0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v33 = (char *)&v62 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v34 = &v33[*(int *)(v31 + 56)];
  sub_100129BB8(v74, (uint64_t)v33, type metadata accessor for DataManager.State);
  sub_100129BB8(v75, (uint64_t)v34, type metadata accessor for DataManager.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100129BB8((uint64_t)v33, (uint64_t)v27, type metadata accessor for DataManager.State);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v36 = v71;
        uint64_t v35 = v72;
        uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        uint64_t v38 = v73;
        v37(v71, v27, v73);
        uint64_t v39 = v70;
        v37(v70, v34, v38);
        char v40 = static Friend.== infix(_:_:)();
        uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
        v41(v39, v38);
        v41(v36, v38);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v73);
      goto LABEL_21;
    case 2u:
      sub_100129BB8((uint64_t)v33, (uint64_t)v24, type metadata accessor for DataManager.State);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v43 = v71;
        uint64_t v42 = v72;
        unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        uint64_t v45 = v73;
        v44(v71, v24, v73);
        uint64_t v46 = v70;
        v44(v70, v34, v45);
        char v40 = static Friend.== infix(_:_:)();
        int64_t v47 = *(void (**)(char *, uint64_t))(v42 + 8);
        v47(v46, v45);
        v47(v43, v45);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v73);
      goto LABEL_21;
    case 3u:
      sub_100129BB8((uint64_t)v33, (uint64_t)v21, type metadata accessor for DataManager.State);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_21;
      }
      char v48 = *v21;
      goto LABEL_12;
    case 4u:
      sub_100129BB8((uint64_t)v33, (uint64_t)v18, type metadata accessor for DataManager.State);
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_21;
      }
      char v48 = *v18;
LABEL_12:
      char v40 = v48 ^ *v34 ^ 1;
      goto LABEL_30;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 6u:
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 7u:
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_21;
      }
LABEL_18:
      sub_100030644((uint64_t)v33, type metadata accessor for DataManager.State);
      char v40 = 1;
      return v40 & 1;
    default:
      sub_100129BB8((uint64_t)v33, (uint64_t)v29, type metadata accessor for DataManager.State);
      if (swift_getEnumCaseMultiPayload())
      {
        sub_10000A520((uint64_t)v29, &qword_1003EFCD0);
LABEL_21:
        sub_10000A520((uint64_t)v33, &qword_1003EFED0);
        char v40 = 0;
      }
      else
      {
        uint64_t v49 = &qword_1003EFCD0;
        uint64_t v50 = v65;
        sub_100013B50((uint64_t)v29, v65, &qword_1003EFCD0);
        uint64_t v51 = v69;
        sub_100013B50((uint64_t)v34, v69, &qword_1003EFCD0);
        uint64_t v52 = *(int *)(v7 + 48);
        uint64_t v53 = v67;
        uint64_t v54 = v67 + v52;
        sub_100013210(v50, v67, &qword_1003EFCD0);
        sub_100013210(v51, v54, &qword_1003EFCD0);
        uint64_t v55 = v66;
        uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
        uint64_t v57 = v68;
        if (v56(v53, 1, v68) == 1)
        {
          sub_10000A520(v51, &qword_1003EFCD0);
          sub_10000A520(v50, &qword_1003EFCD0);
          if (v56(v54, 1, v57) == 1)
          {
            char v40 = -1;
          }
          else
          {
            uint64_t v49 = &qword_1003EFEC8;
            char v40 = 0;
          }
        }
        else
        {
          uint64_t v58 = v64;
          sub_100013210(v53, v64, &qword_1003EFCD0);
          if (v56(v54, 1, v57) == 1)
          {
            sub_10000A520(v69, &qword_1003EFCD0);
            sub_10000A520(v50, &qword_1003EFCD0);
            (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v58, v57);
            char v40 = 0;
            uint64_t v49 = &qword_1003EFEC8;
          }
          else
          {
            unint64_t v59 = v63;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v63, v54, v57);
            sub_1000256E8(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
            char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
            v60(v59, v57);
            uint64_t v49 = &qword_1003EFCD0;
            sub_10000A520(v69, &qword_1003EFCD0);
            sub_10000A520(v50, &qword_1003EFCD0);
            v60((char *)v58, v57);
          }
        }
        sub_10000A520(v53, v49);
LABEL_30:
        sub_100030644((uint64_t)v33, type metadata accessor for DataManager.State);
      }
      return v40 & 1;
  }
}

uint64_t sub_100012A8C()
{
  char v1 = sub_100012DDC(v0[14], v0[22]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    os_log_type_t v21 = (uint64_t (*)(void))((char *)&dword_1003F5D18 + dword_1003F5D18);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[23] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100361F74;
    return v21();
  }
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  uint64_t result = swift_release();
  uint64_t v4 = v0[19];
  unint64_t v5 = v0[20];
  uint64_t v6 = v0[15];
  if (v6 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_31;
    }
    v0[9] = v11;
    type metadata accessor for LocationServiceClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v10 = v0[8];
    swift_unknownObjectRelease();
    uint64_t v9 = v4;
    uint64_t v7 = v5;
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = (v5 - 1) & v5;
      unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v9 = v0[19];
    }
    else
    {
      int64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        return result;
      }
      int64_t v15 = (unint64_t)(v0[17] + 64) >> 6;
      if (v14 >= v15) {
        goto LABEL_31;
      }
      uint64_t v16 = v0[16];
      unint64_t v17 = *(void *)(v16 + 8 * v14);
      uint64_t v9 = v4 + 1;
      if (!v17)
      {
        uint64_t v9 = v4 + 2;
        if (v4 + 2 >= v15) {
          goto LABEL_31;
        }
        unint64_t v17 = *(void *)(v16 + 8 * v9);
        if (!v17)
        {
          uint64_t v9 = v4 + 3;
          if (v4 + 3 >= v15) {
            goto LABEL_31;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v9);
          if (!v17)
          {
            uint64_t v9 = v4 + 4;
            if (v4 + 4 >= v15) {
              goto LABEL_31;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v9);
            if (!v17)
            {
              uint64_t v9 = v4 + 5;
              if (v4 + 5 >= v15) {
                goto LABEL_31;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v9);
              if (!v17)
              {
                uint64_t v18 = v4 + 6;
                while (v15 != v18)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v18++);
                  if (v17)
                  {
                    uint64_t v9 = v18 - 1;
                    goto LABEL_18;
                  }
                }
                goto LABEL_31;
              }
            }
          }
        }
      }
LABEL_18:
      uint64_t v7 = (v17 - 1) & v17;
      unint64_t v8 = __clz(__rbit64(v17)) + (v9 << 6);
    }
    uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v8);
    swift_retain();
  }
  v0[19] = v9;
  v0[20] = v7;
  v0[18] = v10;
  if (v10)
  {
    uint64_t v22 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter
                                          + async function pointer to dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[21] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10000466C;
    uint64_t v13 = v0[14];
    return v22(v13);
  }
LABEL_31:
  sub_1001491B4();
  uint64_t v19 = v0[7];
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(uint64_t))v0[1];
  return v20(v19);
}

uint64_t sub_100012DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1000471EC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    int64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1000471EC(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100012FF0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100013020()
{
  uint64_t v1 = *(void *)(v0 + 2008);
  uint64_t v2 = *(void *)(v0 + 2000);
  uint64_t v3 = *(void *)(v0 + 1936);
  uint64_t v23 = *(void *)(v0 + 1928);
  uint64_t v4 = *(void *)(v0 + 1920);
  uint64_t v20 = *(void *)(v0 + 1904);
  uint64_t v21 = *(void *)(v0 + 1912);
  uint64_t v5 = *(void *)(v0 + 1896);
  uint64_t v19 = *(void *)(v0 + 1888);
  uint64_t v6 = *(void *)(v0 + 1840);
  uint64_t v7 = *(void *)(v0 + 1824);
  swift_release();
  sub_100013B50(v0 + 1472, v7, &qword_1003ED068);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v3, 1, 1, v2);
  LocationRequest.origin.getter();
  uint64_t v8 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 0, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v20, v6, v19);
  sub_100013210(v4, v21, &qword_1003ED110);
  sub_100013210(v3, v23, &qword_1003F3B30);
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 2136) = v9;
  *unint64_t v9 = v0;
  v9[1] = sub_10000BBCC;
  uint64_t v10 = *(void *)(v0 + 2080);
  uint64_t v11 = *(void *)(v0 + 2072);
  char v12 = *(unsigned char *)(v0 + 2145);
  uint64_t v13 = *(void *)(v0 + 2024);
  uint64_t v14 = *(void *)(v0 + 1944);
  uint64_t v15 = *(void *)(v0 + 1928);
  uint64_t v16 = *(void *)(v0 + 1912);
  uint64_t v17 = *(void *)(v0 + 1904);
  return sub_100015654(v14, v17, v16, v15, v12, v13, v11, v10);
}

uint64_t sub_100013210(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100044014(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100013274(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  *(unsigned char *)(v8 + 200) = a3;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  uint64_t v9 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v8 + 72) = v9;
  *(void *)(v8 + 80) = *(void *)(v9 - 8);
  *(void *)(v8 + 88) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Account();
  *(void *)(v8 + 96) = v10;
  *(void *)(v8 + 104) = *(void *)(v10 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for LocationRequest();
  *(void *)(v8 + 120) = v11;
  *(void *)(v8 + 128) = *(void *)(v11 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  *(void *)(v8 + 144) = type metadata accessor for LegacyLocationServerRequestContext();
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = swift_task_alloc();
  *(void *)(v8 + 168) = swift_task_alloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000055D8, 0, 0);
}

uint64_t sub_100013450(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v6) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v6) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v2 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v6) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v2 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v6) {
            return swift_release();
          }
          unint64_t v15 = *(void *)(v2 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    Swift::String v17 = *(Swift::String *)(*(void *)(a1 + 48) + 16 * v10);
    swift_bridgeObjectRetain_n();
    v11._countAndFlagsBits = 10272;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 8233;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v6) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v2 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnalyticsEvent.DiscreteType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t *sub_100013674(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    Swift::String v11 = (int *)type metadata accessor for LegacyLocation(0);
    uint64_t v12 = *((void *)v11 - 1);
    Swift::String v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100044014(&qword_1003ECFE0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for PlaceMark();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
      {
        uint64_t v18 = sub_100044014(&qword_1003ECAB8);
        memcpy(v9, v10, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v9, v10, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
      }
      uint64_t v19 = v11[5];
      uint64_t v20 = &v9[v19];
      uint64_t v21 = &v10[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v11[6];
      uint64_t v23 = &v9[v22];
      uint64_t v24 = &v10[v22];
      v23[8] = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      uint64_t v25 = v11[7];
      uint64_t v26 = &v9[v25];
      unint64_t v27 = &v10[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
      *(void *)&v9[v11[9]] = *(void *)&v10[v11[9]];
      *(void *)&v9[v11[10]] = *(void *)&v10[v11[10]];
      uint64_t v28 = v11[11];
      unint64_t v29 = &v9[v28];
      uint64_t v30 = &v10[v28];
      v29[8] = v30[8];
      *(void *)unint64_t v29 = *(void *)v30;
      (*(void (**)(char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v31 = a3[6];
    uint64_t v32 = a3[7];
    uint64_t v33 = (uint64_t *)((char *)v4 + v31);
    int v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = (uint64_t *)((char *)v4 + v32);
    uint64_t v37 = (uint64_t *)((char *)a2 + v32);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10001397C()
{
  sub_100013B50((uint64_t)(v0 + 2), (uint64_t)(v0 + 56), &qword_1003ECCD0);
  if (sub_10005F070((uint64_t)(v0 + 56)) != 1)
  {
    memcpy(v0 + 110, v0 + 56, 0x1B0uLL);
    sub_100013B50((uint64_t)(v0 + 122), (uint64_t)(v0 + 164), &qword_1003ED068);
    sub_100013BB4(v0 + 164, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224((uint64_t)(v0 + 2));
    sub_100013B50((uint64_t)(v0 + 164), (uint64_t)(v0 + 184), &qword_1003ED068);
    if (sub_100085654((uint64_t)(v0 + 184)) != 1) {
      sub_100013BB4(v0 + 164, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    }
  }
  uint64_t v1 = v0[235];
  uint64_t v2 = v0[234];
  uint64_t v3 = v0[233];
  uint64_t v4 = v0[230];
  static Duration.seconds(_:)();
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static Duration.seconds(_:)();
  v0[271] = static Duration.- infix(_:_:)();
  v0[272] = v5;
  return _swift_task_switch(sub_10001D26C, v4, 0);
}

uint64_t sub_100013B50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100044014(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_100013BB4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_100013C20(char a1)
{
  switch(a1)
  {
    case 1:
      id v4 = [self mainBundle];
      NSString v5 = String._bridgeToObjectiveC()();
      id v6 = [v4 objectForInfoDictionaryKey:v5];

      if (v6)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v23 = 0u;
        long long v24 = 0u;
      }
      sub_10004AEA0((uint64_t)&v23, (uint64_t)v25);
      if (v26)
      {
        if (swift_dynamicCast()) {
          return v22;
        }
      }
      else
      {
        sub_100362738((uint64_t)v25);
      }
      if (qword_1003EC080 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100044058(v19, (uint64_t)qword_10040B7F8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_47;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "App version not found in info.plist";
      goto LABEL_46;
    case 2:
      id v7 = [self mainBundle];
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [v7 objectForInfoDictionaryKey:v8];

      if (v9)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v23 = 0u;
        long long v24 = 0u;
      }
      sub_10004AEA0((uint64_t)&v23, (uint64_t)v25);
      if (v26)
      {
        if (swift_dynamicCast()) {
          return v22;
        }
      }
      else
      {
        sub_100362738((uint64_t)v25);
      }
      if (qword_1003EC080 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100044058(v20, (uint64_t)qword_10040B7F8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_47;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "Bundle version not found in info.plist";
      goto LABEL_46;
    case 3:
      id v10 = [self mainBundle];
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v10 objectForInfoDictionaryKey:v11];

      if (v12)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v23 = 0u;
        long long v24 = 0u;
      }
      sub_10004AEA0((uint64_t)&v23, (uint64_t)v25);
      if (v26)
      {
        if (swift_dynamicCast()) {
          return v22;
        }
      }
      else
      {
        sub_100362738((uint64_t)v25);
      }
      if (qword_1003EC080 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100044058(v21, (uint64_t)qword_10040B7F8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_47;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "Bundle identifier not found in info.plist";
      goto LABEL_46;
    default:
      id v1 = [self mainBundle];
      NSString v2 = String._bridgeToObjectiveC()();
      id v3 = [v1 objectForInfoDictionaryKey:v2];

      if (v3)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v23 = 0u;
        long long v24 = 0u;
      }
      sub_10004AEA0((uint64_t)&v23, (uint64_t)v25);
      if (v26)
      {
        if (swift_dynamicCast()) {
          return v22;
        }
      }
      else
      {
        sub_100362738((uint64_t)v25);
      }
      if (qword_1003EC080 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100044058(v14, (uint64_t)qword_10040B7F8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        uint64_t v18 = "App name not found in info.plist";
LABEL_46:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
        swift_slowDealloc();
      }
LABEL_47:

      return 0;
  }
}

uint64_t sub_100014250@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URLComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004C1DC(a1);
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v20 = 0x61636F4C72657375;
  unint64_t v21 = 0xEB000000002F6574;
  if (a2) {
    uint64_t v10 = 1885693284;
  }
  else {
    uint64_t v10 = 0x776F6C6C616873;
  }
  if (a2) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE700000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000100373E30;
  v13._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  uint64_t v14 = v20;
  uint64_t v15 = (void *)v21;
  os_log_type_t v16 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v17._countAndFlagsBits = v14;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v16(&v20, 0);
  uint64_t v18 = type metadata accessor for Account();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
}

uint64_t sub_100014450(uint64_t a1, uint64_t a2, NSObject *a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1000057C8((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1000057C8((unint64_t *)v13, v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100014674(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EE380);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_1000239F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 48);
    v10[7] = 4;
    sub_100044014(&qword_1003ED230);
    sub_1000440FC((unint64_t *)&qword_1003ED238, &qword_1003ED230);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100014914(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v64 = a5;
  uint64_t v56 = type metadata accessor for Location();
  uint64_t v52 = *(void *)(v56 - 8);
  uint64_t v9 = __chkstk_darwin(v56);
  uint64_t v50 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v55 = type metadata accessor for Handle();
  uint64_t v51 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100044014(&qword_1003F33E8);
  __chkstk_darwin(v15 - 8);
  Swift::String v17 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = ~v18;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = -v18;
  uint64_t v57 = a1;
  uint64_t v58 = a1 + 64;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  uint64_t v59 = v19;
  uint64_t v60 = 0;
  uint64_t v61 = v22 & v20;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  v46[1] = a1;
  swift_bridgeObjectRetain();
  v46[0] = a3;
  swift_retain();
  sub_100291C64((uint64_t)v17);
  uint64_t v23 = sub_100044014(&qword_1003F0028);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1001491B4();
    return swift_release();
  }
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
  uint64_t v54 = v51 + 32;
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  uint64_t v48 = v52 + 8;
  uint64_t v49 = v52 + 16;
  v46[3] = v52 + 40;
  int64_t v47 = (void (**)(char *, uint64_t))(v51 + 8);
  while (1)
  {
    uint64_t v30 = &v17[*(int *)(v23 + 48)];
    v53(v14, v17, v55);
    uint64_t v31 = *v25;
    uint64_t v32 = v12;
    (*v25)(v12, v30, v56);
    uint64_t v33 = *v64;
    unint64_t v35 = sub_100025614((uint64_t)v14);
    uint64_t v36 = *(void *)(v33 + 16);
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (*(void *)(v33 + 24) >= v38)
    {
      if (a4)
      {
        if (v34) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_10012682C();
        if (v39) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_10013FDD8(v38, a4 & 1);
      unint64_t v40 = sub_100025614((uint64_t)v14);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_22;
      }
      unint64_t v35 = v40;
      if (v39)
      {
LABEL_7:
        uint64_t v26 = v52;
        unint64_t v27 = v50;
        uint64_t v12 = v32;
        uint64_t v28 = v32;
        uint64_t v29 = v56;
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v50, v28, v56);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v29);
        (*v47)(v14, v55);
        (*(void (**)(unint64_t, char *, uint64_t))(v26 + 40))(*(void *)(*v64 + 56) + *(void *)(v26 + 72) * v35, v27, v29);
        goto LABEL_8;
      }
    }
    uint64_t v42 = (void *)*v64;
    *(void *)(*v64 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    v53((char *)(v42[6] + *(void *)(v51 + 72) * v35), v14, v55);
    uint64_t v12 = v32;
    v31((char *)(v42[7] + *(void *)(v52 + 72) * v35), v32, v56);
    uint64_t v43 = v42[2];
    BOOL v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_21;
    }
    v42[2] = v45;
LABEL_8:
    sub_100291C64((uint64_t)v17);
    uint64_t v23 = sub_100044014(&qword_1003F0028);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100014E28(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for FriendRecord(0);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  sub_100044014(&qword_1003F03B8);
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000175B0, 0, 0);
}

uint64_t sub_100014F34()
{
  *(void *)(v0 + 40) = *(void *)(*(void *)(v0 + 32)
                                   + OBJC_IVAR____TtC13findmylocated15LocationService_connectionPool);
  sub_100044014(&qword_1003F3478);
  sub_100014FFC(&qword_1003F3480, &qword_1003F3478);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100007C60, v2, v1);
}

uint64_t sub_100014FFC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015040()
{
  if (qword_1003EC3E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 64) = sub_100044058(v1, (uint64_t)qword_10040C218);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalStorage Service read all devices", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  void *v5 = v0;
  v5[1] = sub_100004544;
  return sub_10004AAC0();
}

uint64_t sub_100015194()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[4] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager write AllDevices count:%ld into LocalStorage", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10001531C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100015380(uint64_t a1, char a2, char a3)
{
  *(void *)(v4 + 2936) = v3;
  *(unsigned char *)(v4 + 3097) = a3;
  *(unsigned char *)(v4 + 3096) = a2;
  *(void *)(v4 + 2928) = a1;
  *(void *)(v4 + 2944) = type metadata accessor for DataManager.State(0);
  *(void *)(v4 + 2952) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Device();
  *(void *)(v4 + 2960) = v5;
  *(void *)(v4 + 2968) = *(void *)(v5 - 8);
  *(void *)(v4 + 2976) = swift_task_alloc();
  sub_100044014(&qword_1003EFCD0);
  *(void *)(v4 + 2984) = swift_task_alloc();
  *(void *)(v4 + 2992) = swift_task_alloc();
  *(void *)(v4 + 3000) = swift_task_alloc();
  *(void *)(v4 + 3008) = swift_task_alloc();
  *(void *)(v4 + 3016) = swift_task_alloc();
  *(void *)(v4 + 3024) = swift_task_alloc();
  *(void *)(v4 + 3032) = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 3040) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_10004EBEC;
  return sub_100005F58();
}

uint64_t sub_100015524()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F2800) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  return sub_10001A184(v3, v4, v5);
}

uint64_t sub_100015608(uint64_t a1)
{
  v2[111] = v1;
  v2[110] = a1;
  v2[112] = *v1;
  return _swift_task_switch(sub_1000218BC, v1, 0);
}

uint64_t sub_100015654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 120) = v14;
  *(void *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 104) = v13;
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a6;
  *(unsigned char *)(v8 + 280) = a5;
  *(void *)(v8 + 56) = a2;
  *(void *)(v8 + 64) = a3;
  *(void *)(v8 + 48) = a1;
  sub_100044014(&qword_1003ED110);
  *(void *)(v8 + 136) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Account();
  *(void *)(v8 + 144) = v9;
  *(void *)(v8 + 152) = *(void *)(v9 - 8);
  *(void *)(v8 + 160) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v8 + 176) = v10;
  *(void *)(v8 + 184) = *(void *)(v10 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10001C11C, 0, 0);
}

uint64_t sub_100015800()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F28E8) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10004A274;
  v5[613] = v4;
  v5[612] = v3;
  return _swift_task_switch(sub_10001E9B8, 0, 0);
}

uint64_t sub_1000158F0()
{
  uint64_t v55 = v0;
  if (*(unsigned char *)(v0 + 2216) != 1)
  {
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100044058(v15, (uint64_t)qword_10040B4B8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v16)) {
      goto LABEL_12;
    }
    Swift::String v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)Swift::String v17 = 136446210;
    *(void *)(v0 + 1800) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "%{public}s Skipping since no need to schedule a refresh", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_11;
  }
  uint64_t v1 = *(void *)(v0 + 1968);
  uint64_t v2 = *(void *)(v0 + 1960);
  uint64_t v3 = *(void **)(v0 + 1928);
  uint64_t v4 = *(void *)(v0 + 1920);
  uint64_t v5 = *(void *)(v0 + 1840);
  uint64_t v6 = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  *(void *)(v0 + 2080) = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  uint64_t v7 = v5 + v6;
  swift_beginAccess();
  uint64_t v53 = (void (*)(uint64_t, uint64_t, uint64_t))v3[2];
  v53(v1, v7, v4);
  *(_DWORD *)(v0 + 2212) = enum case for LegacyRefreshSchedule.highPriorityScheduled(_:);
  uint64_t v8 = (void (*)(void))v3[13];
  *(void *)(v0 + 2088) = v8;
  *(void *)(v0 + 2096) = (unint64_t)(v3 + 13) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  uint64_t v52 = (void (*)(uint64_t, void, uint64_t))v8;
  v8(v2);
  sub_100046FF4(&qword_1003ED038, (void (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v3[1];
  v10(v2, v4);
  v10(v1, v4);
  if (v9)
  {
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100044058(v11, (uint64_t)qword_10040B4B8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_12;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)(v0 + 1832) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Skipping since we already have a high priority refresh queued", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_11:
    swift_slowDealloc();
LABEL_12:

    unint64_t v18 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_release();
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v19(v18);
  }
  uint64_t v48 = v10;
  uint64_t v21 = *(void *)(v0 + 1912);
  uint64_t v22 = *(void *)(v0 + 1904);
  uint64_t v23 = *(void *)(v0 + 1896);
  uint64_t v24 = *(void *)(v0 + 1888);
  uint64_t v25 = *(void *)(v0 + 1840) + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v25, v24);
  unsigned int v50 = enum case for LocatePriority.live(_:);
  uint64_t v49 = *(void (**)(uint64_t))(v23 + 104);
  v49(v22);
  sub_100046FF4(&qword_1003ED040, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v26 = *(void *)(v0 + 1776);
  uint64_t v27 = *(void *)(v0 + 1760);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  *(void *)(v0 + 2104) = v28;
  *(void *)(v0 + 2112) = (v23 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v51 = v28;
  v28(v22, v24);
  if (v26 != v27)
  {
    uint64_t v29 = *(void *)(v0 + 1944);
    uint64_t v30 = *(void *)(v0 + 1920);
    v53(*(void *)(v0 + 1952), v7, v30);
    v52(v29, enum case for LegacyRefreshSchedule.notScheduled(_:), v30);
    sub_100046FF4(&qword_1003ED048, (void (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v31 = *(void *)(v0 + 1952);
    uint64_t v32 = *(void *)(v0 + 1944);
    uint64_t v33 = *(void *)(v0 + 1920);
    if (*(void *)(v0 + 1744) == *(void *)(v0 + 1728) && *(void *)(v0 + 1752) == *(void *)(v0 + 1736))
    {
      swift_bridgeObjectRelease_n();
      v48(v32, v33);
      v48(v31, v33);
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48(v32, v33);
      v48(v31, v33);
      if ((v34 & 1) == 0) {
        goto LABEL_29;
      }
    }
    uint64_t v35 = *(void *)(v0 + 1840) + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
    swift_beginAccess();
    if (*(void *)(*(void *)v35 + 16)) {
      goto LABEL_22;
    }
LABEL_29:
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100044058(v42, (uint64_t)qword_10040B4B8);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136446210;
      *(void *)(v0 + 1768) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s Returning since there is no need to schedule a refresh", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v46 = *(void *)(v0 + 1912);
    uint64_t v47 = *(void *)(v0 + 1888);
    unint64_t v18 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_release();
    v51(v46, v47);
    goto LABEL_13;
  }
LABEL_22:
  uint64_t v36 = *(void *)(v0 + 1904);
  uint64_t v37 = *(void *)(v0 + 1888);
  ((void (*)(uint64_t, void, uint64_t))v49)(v36, v50, v37);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v38 = *(void *)(v0 + 1784);
  *(void *)(v0 + 2120) = v38;
  uint64_t v39 = *(void *)(v0 + 1792);
  *(void *)(v0 + 2128) = v39;
  v51(v36, v37);
  if (v38 == v39)
  {
    unint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 2136) = v40;
    void *v40 = v0;
    v40[1] = sub_100081548;
    return sub_10005D63C();
  }
  else
  {
    char v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 2160) = v41;
    *char v41 = v0;
    v41[1] = sub_10004DF60;
    return sub_10000E400(v0 + 16);
  }
}

uint64_t sub_1000163A8()
{
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for Friend();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Handle();
  v1[13] = v3;
  v1[14] = *(void *)(v3 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[16] = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001B728;
  return daemon.getter();
}

uint64_t sub_1000164F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1880) = v15;
  *(void *)(v8 + 1872) = a8;
  *(void *)(v8 + 1864) = a7;
  *(void *)(v8 + 1856) = a6;
  *(void *)(v8 + 1848) = a5;
  *(unsigned char *)(v8 + 2144) = a4;
  *(void *)(v8 + 1840) = a3;
  *(void *)(v8 + 1832) = a2;
  *(void *)(v8 + 1824) = a1;
  uint64_t v9 = type metadata accessor for Account();
  *(void *)(v8 + 1888) = v9;
  *(void *)(v8 + 1896) = *(void *)(v9 - 8);
  *(void *)(v8 + 1904) = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  *(void *)(v8 + 1912) = swift_task_alloc();
  *(void *)(v8 + 1920) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v8 + 1928) = swift_task_alloc();
  *(void *)(v8 + 1936) = swift_task_alloc();
  type metadata accessor for ClientContext();
  *(void *)(v8 + 1944) = swift_task_alloc();
  uint64_t refreshed = type metadata accessor for LegacyRefreshCommandReason();
  *(void *)(v8 + 1952) = refreshed;
  *(void *)(v8 + 1960) = *(void *)(refreshed - 8);
  *(void *)(v8 + 1968) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for LegacyRefreshSchedule();
  *(void *)(v8 + 1976) = v11;
  *(void *)(v8 + 1984) = *(void *)(v11 - 8);
  *(void *)(v8 + 1992) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Handle();
  *(void *)(v8 + 2000) = v12;
  *(void *)(v8 + 2008) = *(void *)(v12 - 8);
  *(void *)(v8 + 2016) = swift_task_alloc();
  return _swift_task_switch(sub_100037A38, 0, 0);
}

uint64_t sub_10001679C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  static TimeZone.current.getter();
  Date.init()();
  uint64_t v8 = TimeZone.abbreviation(for:)();
  uint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v3, v0);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if (v10) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v10) {
    uint64_t v10 = (void *)0xE000000000000000;
  }
  v18._countAndFlagsBits = v13;
  v18._object = v10;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  static TimeZone.current.getter();
  Date.init()();
  uint64_t v15 = TimeZone.secondsFromGMT(for:)();
  v11(v3, v0);
  v12(v7, v4);
  v18._countAndFlagsBits = v15;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1000169F4()
{
  uint64_t v29 = v0;
  if (*(unsigned char *)(v0 + 276) == 1)
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 136) = sub_100044058(v1, (uint64_t)qword_10040C290);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 48) = sub_100037004(0xD000000000000019, 0x8000000100378D60, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending %{public}s to server", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v11 = type metadata accessor for TaskPriority();
    *(void *)(v0 + 144) = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    *(void *)(v0 + 152) = v13;
    *(void *)(v0 + 160) = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v13(v5, 1, 1, v11);
    Swift::String v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    *(void *)(v0 + 168) = v14;
    *(void *)(v0 + 176) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v14(v6, v10, v8);
    uint64_t v15 = sub_10004742C(qword_1003F3148, (void (*)(uint64_t))type metadata accessor for LocationService);
    *(void *)(v0 + 184) = v15;
    int v16 = *(_DWORD *)(v7 + 80);
    *(_DWORD *)(v0 + 272) = v16;
    unint64_t v17 = (v16 + 40) & ~(unint64_t)v16;
    Swift::String v18 = (char *)swift_allocObject();
    *((void *)v18 + 2) = v9;
    *((void *)v18 + 3) = v15;
    *((void *)v18 + 4) = v9;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    *(void *)(v0 + 192) = v19;
    *(void *)(v0 + 200) = (v7 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v19(&v18[v17], v6, v8);
    swift_retain_n();
    sub_10012EDF8(v5, (uint64_t)&unk_1003F3510, (uint64_t)v18);
    swift_release();
    unint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v20;
    *unint64_t v20 = v0;
    v20[1] = sub_10000C5A0;
    return daemon.getter();
  }
  else
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100044058(v21, (uint64_t)qword_10040C290);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      *(void *)(v0 + 16) = sub_100037004(0xD000000000000019, 0x8000000100378D60, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s should not schedule legacyRefresh", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v25 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v26(v25);
  }
}

uint64_t sub_100016EE4()
{
  uint64_t v19 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[71] = sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[27];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 141558531;
    v0[24] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    v0[25] = sub_100037004(0xD00000000000001DLL, 0x8000000100375A20, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2048;
    v0[26] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{private,mask.hash}s legacy locations count: %ld.", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = *(void *)(v0[27] + 16);
  v0[72] = v7;
  if (v7)
  {
    sub_100044014(&qword_1003ECF40);
    uint64_t v8 = type metadata accessor for HandleType();
    uint64_t v9 = *(void *)(v8 - 8);
    unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = swift_allocObject();
    v0[73] = v11;
    *(_OWORD *)(v11 + 16) = xmmword_100367D70;
    (*(void (**)(unint64_t, void, uint64_t))(v9 + 104))(v11 + v10, enum case for HandleType.following(_:), v8);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[74] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10000513C;
    return sub_100021584(v11, 0);
  }
  else
  {
    Swift::String v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      int v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No legacy location return from server, should not process.", v16, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_10001743C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000175B0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100005424;
  return sub_10004ABB8();
}

uint64_t sub_100017644()
{
  uint64_t v1 = v0[243];
  uint64_t v2 = v0[229];
  uint64_t v3 = v0[228];
  (*(void (**)(void, void))(v0[237] + 8))(v0[230], v0[236]);
  uint64_t v4 = type metadata accessor for LocationRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  uint64_t v5 = type metadata accessor for LegacyLocationServerRequestContext();
  sub_10004E45C(v1, v3 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000177BC()
{
  sub_100215780();
  *(void *)(v0 + 72) = 0;
  uint64_t v1 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_10004A9E8, v1, 0);
}

uint64_t sub_100017870()
{
  sub_100215780();
  *(void *)(v0 + 72) = 0;
  uint64_t v1 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_10004AAE0, v1, 0);
}

uint64_t sub_100017924()
{
  sub_100215780();
  *(void *)(v0 + 200) = 0;
  uint64_t v1 = *(void *)(v0 + 192);
  return _swift_task_switch(sub_10004A5D8, v1, 0);
}

uint64_t sub_100017A18()
{
  sub_100215780();
  *(void *)(v0 + 944) = 0;
  uint64_t v1 = *(void *)(v0 + 936);
  return _swift_task_switch(sub_10004A278, v1, 0);
}

uint64_t sub_100017ACC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for LocalStorageDatabase()
{
  uint64_t result = qword_1003F2450;
  if (!qword_1003F2450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100017B60(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[102] = a1;
  v3[103] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[86];
    uint64_t v5 = sub_10014BC58;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10014A1FC;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100017C88()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 120) + 1;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v2;
  uint64_t v8 = sub_10003D478((void (*)(char *))sub_10022AAA8, v7);
  swift_task_dealloc();
  uint64_t v9 = sub_10003CD10((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  if (v6 == v3)
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = sub_10003F4C8(v9);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v10;
    sub_100044014(&qword_1003F2800);
    CheckedContinuation.resume(returning:)();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 120) + 1;
    *(void *)(v0 + 112) = v9;
    *(void *)(v0 + 120) = v13;
    (*(void (**)(void, unint64_t, void))(v0 + 104))(*(void *)(v0 + 72), *(void *)(v0 + 32)+ ((*(unsigned __int8 *)(v0 + 152) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 152))+ *(void *)(v0 + 96) * v13, *(void *)(v0 + 56));
    Swift::String v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v14;
    *Swift::String v14 = v0;
    v14[1] = sub_10000E2C8;
    uint64_t v15 = *(void *)(v0 + 72);
    return sub_1000207EC(v15);
  }
}

uint64_t sub_100017E9C()
{
  uint64_t v26 = v0;
  if (qword_1003EC408 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[41];
  uint64_t v5 = type metadata accessor for Logger();
  v0[46] = sub_100044058(v5, (uint64_t)qword_10040C290);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[47] = v6;
  v0[48] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[41];
  if (v9)
  {
    uint64_t v11 = v0[39];
    uint64_t v13 = v0[35];
    uint64_t v12 = v0[36];
    uint64_t v24 = v0[40];
    log = v7;
    uint64_t v14 = v0[45];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    os_log_type_t type = v8;
    v0[8] = sub_100037004(0xD00000000000001BLL, 0x8000000100378DD0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2082;
    LocationRequest.priority.getter();
    sub_100047474(&qword_1003F3330, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v0[9] = sub_100037004(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v19(v14, v24);
    uint64_t v7 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s request priority: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v19(v0[45], v0[40]);
  }

  v0[49] = v19;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[50] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10000BD10;
  return daemon.getter();
}

uint64_t sub_1000181D0()
{
  uint64_t v36 = v0;
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[11] = sub_100037004(0xD000000000000025, 0x8000000100375CE0, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = v0[13] + OBJC_IVAR____TtC13findmylocated11DataManager__apnsRefreshTimestamps;
  swift_beginAccess();
  if (*(void *)(*(void *)v5 + 16))
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found existing trigger. Not refreshing.", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[17];
    uint64_t v9 = v0[18];
    uint64_t v11 = v0[16];
    uint64_t v12 = v0[12];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    swift_beginAccess();
    unint64_t v13 = *(void *)v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v5 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v13 = sub_10004B120(0, *(void *)(v13 + 16) + 1, 1, v13);
      *(void *)uint64_t v5 = v13;
    }
    unint64_t v16 = *(void *)(v13 + 16);
    unint64_t v15 = *(void *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      unint64_t v13 = sub_10004B120(v15 > 1, v16 + 1, 1, v13);
      *(void *)uint64_t v5 = v13;
    }
    uint64_t v18 = v0[17];
    uint64_t v17 = v0[18];
    uint64_t v19 = v0[16];
    *(void *)(v13 + 16) = v16 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v13+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v16, v17, v19);
    swift_endAccess();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[17] + 16))(v0[19], v0[12], v0[16]);
    swift_beginAccess();
    unint64_t v20 = *(void *)v5;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v5 = v20;
    if ((v21 & 1) == 0)
    {
      unint64_t v20 = sub_10004B120(0, *(void *)(v20 + 16) + 1, 1, v20);
      *(void *)uint64_t v5 = v20;
    }
    unint64_t v23 = *(void *)(v20 + 16);
    unint64_t v22 = *(void *)(v20 + 24);
    if (v23 >= v22 >> 1)
    {
      unint64_t v20 = sub_10004B120(v22 > 1, v23 + 1, 1, v20);
      *(void *)uint64_t v5 = v20;
    }
    uint64_t v24 = v0[19];
    uint64_t v25 = v0[16];
    uint64_t v26 = v0[17];
    uint64_t v28 = v0[14];
    uint64_t v27 = v0[15];
    uint64_t v29 = v0[13];
    *(void *)(v20 + 16) = v23 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v20+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v23, v24, v25);
    swift_endAccess();
    uint64_t v30 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v27, 1, 1, v30);
    uint64_t v31 = sub_1000256E8(qword_1003EFD98, (void (*)(uint64_t))type metadata accessor for DataManager);
    uint64_t v32 = (void *)swift_allocObject();
    v32[2] = v29;
    v32[3] = v31;
    v32[4] = v29;
    v32[5] = v28;
    swift_retain_n();
    sub_10010405C(v27, (uint64_t)&unk_1003F01B0, (uint64_t)v32);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_1000186DC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100018958()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = sub_1000298F0();
  if (*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v2 = v0[8];
  }
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v0[11];
    sub_10003CB84(0, v3, 0);
    uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
    v4 += 16;
    unint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v18 = *(void *)(v4 + 56);
    uint64_t v19 = v5;
    os_log_type_t v7 = (void (**)(uint64_t, uint64_t))(v4 - 8);
    do
    {
      uint64_t v8 = v0[12];
      uint64_t v9 = v0[10];
      v19(v8, v6, v9);
      uint64_t v10 = Handle.identifier.getter();
      uint64_t v12 = v11;
      (*v7)(v8, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10003CB84(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10003CB84(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      unint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v6 += v18;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v0[6];
  v0[17] = _swiftEmptyArrayStorage;
  v0[18] = v16;
  return _swift_task_switch(sub_100007FE4, v16, 0);
}

uint64_t sub_100018B3C(uint64_t a1)
{
  int64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[225] = a1;
  v3[226] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[221];
    return _swift_task_switch(sub_1001627A8, v5, 0);
  }
  else
  {
    swift_release();
    unint64_t v6 = (void *)swift_task_alloc();
    v3[227] = v6;
    *unint64_t v6 = v4;
    v6[1] = sub_100010384;
    return sub_100015608((uint64_t)(v3 + 56));
  }
}

uint64_t sub_100018CD0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100018DC4()
{
  id v0 = [self processInfo];
  id v1 = [v0 processName];

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3._countAndFlagsBits = 47;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = static SystemInfo.productType.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 47;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = static SystemInfo.osVersion.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100018EE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v12 = a3[12];
  uint64_t v66 = a2 + v12;
  uint64_t v68 = a1 + v12;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v64(v68, v66, v13);
  uint64_t v14 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  unint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v69 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v69;
  uint64_t v21 = a3[17];
  uint64_t v22 = a3[18];
  unint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v65 = v24[1];
  *unint64_t v23 = *v24;
  v23[1] = v65;
  uint64_t v25 = (void *)(a1 + v22);
  uint64_t v26 = (void *)(a2 + v22);
  uint64_t v67 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v67;
  uint64_t v27 = a3[19];
  uint64_t v28 = a3[20];
  uint64_t v29 = (void *)(a1 + v27);
  uint64_t v30 = (void *)(a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = (void *)(a1 + v28);
  uint64_t v33 = (void *)(a2 + v28);
  uint64_t v63 = v33[1];
  void *v32 = *v33;
  v32[1] = v63;
  uint64_t v34 = a3[21];
  uint64_t v35 = a3[22];
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = (void *)(a1 + v35);
  unint64_t v40 = (void *)(a2 + v35);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = a3[23];
  uint64_t v43 = a3[24];
  os_log_type_t v44 = (void *)(a1 + v42);
  uint64_t v45 = (void *)(a2 + v42);
  uint64_t v46 = v45[1];
  *os_log_type_t v44 = *v45;
  v44[1] = v46;
  uint64_t v47 = a1 + v43;
  uint64_t v48 = a2 + v43;
  *(void *)uint64_t v47 = *(void *)v48;
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  uint64_t v49 = a3[26];
  *(unsigned char *)(a1 + a3[25]) = *(unsigned char *)(a2 + a3[25]);
  *(void *)(a1 + v49) = *(void *)(a2 + v49);
  uint64_t v50 = a3[27];
  uint64_t v51 = a3[28];
  uint64_t v52 = (void *)(a1 + v50);
  uint64_t v53 = (void *)(a2 + v50);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = (void *)(a1 + v51);
  uint64_t v56 = (void *)(a2 + v51);
  uint64_t v57 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v57;
  uint64_t v58 = a3[29];
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = (void *)(a2 + v58);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100019184(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for Insert();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003EF230);
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v5 = sub_100044014(&qword_1003EF278);
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Delete();
  v2[20] = v6;
  v2[21] = *(void *)(v6 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Device();
  v2[25] = v7;
  v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Table();
  v2[34] = v8;
  v2[35] = *(void *)(v8 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  return _swift_task_switch(sub_100236424, 0, 0);
}

uint64_t sub_100019490()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v27 = v0 + 2;
  uint64_t v25 = v0[8];
  uint64_t v26 = v0[9];
  uint64_t v8 = v0 + 6;
  uint64_t v7 = v0[6];
  uint64_t v28 = v8[1];
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v24(v2, 1, 1, v9);
  unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  v23(v3, v10, v6);
  unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (v4 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  uint64_t v21 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32);
  v21(v13 + v22, v3, v11);
  *(void *)(v13 + v12) = v28;
  swift_retain();
  sub_100289484(v2, (uint64_t)&unk_1003F35C0, v13);
  sub_10000A520(v2, (uint64_t *)&unk_1003F3C10);
  v24(v2, 1, 1, v9);
  uint64_t v14 = v11;
  v23(v3, v25, v11);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  v21(v15 + v22, v3, v14);
  *(void *)(v15 + v12) = v28;
  *(void *)(v15 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)) = v26;
  swift_retain();
  sub_100289484(v2, (uint64_t)&unk_1003F35D0, v15);
  sub_10000A520(v2, (uint64_t *)&unk_1003F3C10);
  sub_100044014(&qword_1003F03F8);
  TaskGroup.makeAsyncIterator()();
  uint64_t v16 = sub_100047474(qword_1003F3148, (void (*)(uint64_t))type metadata accessor for LocationService);
  v1[19] = 0;
  v1[20] = _swiftEmptyDictionarySingleton;
  v1[18] = v16;
  uint64_t v17 = v1[7];
  uint64_t v18 = (void *)swift_task_alloc();
  v1[21] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_10004D630;
  uint64_t v19 = v1[10];
  return TaskGroup.Iterator.next(isolation:)(v27, v17, v16, v19);
}

uint64_t sub_1000197CC(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE390);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000242C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 20;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100019C24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v3 - 8);
  os_log_type_t v44 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v50 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = sub_100044014(&qword_1003F02E0);
  uint64_t v49 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for FMFAPSMessage(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10004E408();
  uint64_t v19 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v20 = v50;
  uint64_t v41 = v12;
  uint64_t v42 = v10;
  unint64_t v40 = v18;
  uint64_t v51 = a1;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v49;
  uint64_t v39 = v21;
  id v23 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v48);
  [v23 setLocale:isa];

  NSString v25 = String._bridgeToObjectiveC()();
  [v23 setDateFormat:v25];

  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v27 = [v23 dateFromString:v26];

  if (!v27)
  {
    uint64_t v29 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44, 1, 1, v46);
    goto LABEL_6;
  }
  uint64_t v28 = v42;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = (uint64_t)v44;
  uint64_t v30 = v45;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  uint64_t v32 = v28;
  uint64_t v33 = v46;
  v31(v44, v32, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v29, 0, 1, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v33) == 1)
  {
LABEL_6:
    sub_10000A520(v29, (uint64_t *)&unk_1003EE800);
    sub_10012A1B0();
    swift_allocError();
    *uint64_t v37 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v13);
    a1 = v51;
LABEL_7:
    uint64_t v36 = (uint64_t)a1;
    return sub_1000233E4(v36);
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v13);
  uint64_t v34 = v41;
  v31(v41, (char *)v29, v33);
  uint64_t v35 = (uint64_t)v40;
  v31(v40, v34, v33);
  sub_10012A9D0(v35, v43, type metadata accessor for FMFAPSMessage);
  uint64_t v36 = (uint64_t)v51;
  return sub_1000233E4(v36);
}

uint64_t sub_10001A184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for HandleType();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001E81C, 0, 0);
}

uint64_t sub_10001A248()
{
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  v1._countAndFlagsBits = 0x203A6F666E49796DLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  long long v2 = v0[3];
  v19[2] = v0[2];
  v19[3] = v2;
  long long v3 = v0[5];
  v19[4] = v0[4];
  v19[5] = v3;
  long long v4 = v0[1];
  v19[0] = *v0;
  v19[1] = v4;
  sub_1000351EC((uint64_t)v19);
  v5._countAndFlagsBits = sub_100033B78();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_100035180((uint64_t)v19);
  v6._object = (void *)0x8000000100375440;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  sub_100013B50((uint64_t)(v0 + 6), (uint64_t)v18, &qword_1003ED068);
  sub_100013B50((uint64_t)v18, (uint64_t)v15, &qword_1003ED068);
  sub_1000E5FC0(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100044014(&qword_1003ED068);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x437265767265730ALL;
  v8._object = (void *)0xEF203A6769666E6FLL;
  String.append(_:)(v8);
  sub_100013B50((uint64_t)(v0 + 16), (uint64_t)v15, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v15, (uint64_t)v14, &qword_1003ECCD8);
  sub_100044014(&qword_1003ECCD8);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x507265767265730ALL;
  v10._object = (void *)0xEE00203A73666572;
  String.append(_:)(v10);
  sub_100013B50((uint64_t)(v0 + 25), (uint64_t)v14, &qword_1003EE258);
  sub_100013B50((uint64_t)v14, (uint64_t)&v13, &qword_1003EE258);
  sub_100033ED8(v14);
  sub_100044014(&qword_1003EE258);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10001A47C()
{
  swift_retain();
  uint64_t v1 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  *(void *)(v0 + 40) = v1;
  sub_100044014(&qword_1003F27B8);
  CheckedContinuation.resume(returning:)();
  swift_release();
  long long v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void *initializeBufferWithCopyOfBuffer for FriendInfoOption(void *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for HandleType();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    Swift::String v9 = (char *)a1 + v8;
    Swift::String v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for ClientOrigin();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(void *)((char *)a1 + a3[6]) = *(void *)&a2[a3[6]];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = &a2[v12];
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_100044014((uint64_t *)&unk_1003EE800);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = &a2[v20];
    if (v17(&a2[v20], 1, v15))
    {
      uint64_t v23 = sub_100044014((uint64_t *)&unk_1003EE800);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    NSString v26 = (void *)((char *)a1 + v24);
    id v27 = &a2[v24];
    uint64_t v28 = *((void *)v27 + 1);
    *NSString v26 = *(void *)v27;
    v26[1] = v28;
    uint64_t v29 = (char *)a1 + v25;
    uint64_t v30 = &a2[v25];
    uint64_t v31 = type metadata accessor for Handle();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      uint64_t v34 = sub_100044014(&qword_1003F3B30);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v35 = a3[12];
    *((unsigned char *)a1 + a3[11]) = a2[a3[11]];
    *((unsigned char *)a1 + v35) = a2[v35];
    uint64_t v36 = a3[14];
    *((unsigned char *)a1 + a3[13]) = a2[a3[13]];
    *((unsigned char *)a1 + v36) = a2[v36];
  }
  return a1;
}

uint64_t sub_10001A8EC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_100044014(&qword_1003F0530);
  *uint64_t v4 = v0;
  v4[1] = sub_10000AE58;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x6E656972466C6C61, 0xEC00000029287364, sub_10022A3C4, v3, v5);
}

uint64_t sub_10001A9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100044014(&qword_1003F2800);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_10001ABE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = sub_10003D430(&qword_1003F0330, a2, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v6 = swift_task_alloc();
  v2[5] = v6;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v2[6] = v7;
  uint64_t v8 = sub_100044014(&qword_1003F27B0);
  *uint64_t v7 = v2;
  v7[1] = sub_10004A8C0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 2, v3, v5, 0xD000000000000010, 0x8000000100378480, sub_1002270CC, v6, v8);
}

uint64_t sub_10001AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100044014(&qword_1003F27B8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_10001AF10()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[12];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[4] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager load LocalStorage All friends count:%ld", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();

  uint64_t v7 = v0[12];
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_10001B098()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[12];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[4] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager load LocalStorage All devices count:%ld", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();

  uint64_t v7 = v0[12];
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_10001B220(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 4904) = a2;
  *(void *)(v2 + 4896) = a1;
  return _swift_task_switch(sub_10001E9B8, 0, 0);
}

uint64_t sub_10001B244()
{
  uint64_t v1 = sub_100044014(&qword_1003F2828);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10001B328()
{
  uint64_t v1 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10001B408(uint64_t a1, char a2)
{
  *(void *)(v3 + 1768) = v2;
  *(unsigned char *)(v3 + 163) = a2;
  *(void *)(v3 + 1760) = a1;
  uint64_t v4 = type metadata accessor for ClientOrigin();
  *(void *)(v3 + 1776) = v4;
  *(void *)(v3 + 1784) = *(void *)(v4 - 8);
  *(void *)(v3 + 1792) = swift_task_alloc();
  *(void *)(v3 + 1800) = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  *(void *)(v3 + 1808) = swift_task_alloc();
  *(void *)(v3 + 1816) = swift_task_alloc();
  *(void *)(v3 + 1824) = swift_task_alloc();
  *(void *)(v3 + 1832) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Handle();
  *(void *)(v3 + 1840) = v5;
  *(void *)(v3 + 1848) = *(void *)(v5 - 8);
  *(void *)(v3 + 1856) = swift_task_alloc();
  *(void *)(v3 + 1864) = swift_task_alloc();
  *(void *)(v3 + 1872) = swift_task_alloc();
  *(void *)(v3 + 1880) = swift_task_alloc();
  *(void *)(v3 + 1888) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Friend();
  *(void *)(v3 + 1896) = v6;
  *(void *)(v3 + 1904) = *(void *)(v6 - 8);
  *(void *)(v3 + 1912) = swift_task_alloc();
  *(void *)(v3 + 1920) = swift_task_alloc();
  *(void *)(v3 + 1928) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for HandleType();
  *(void *)(v3 + 1936) = v7;
  *(void *)(v3 + 1944) = *(void *)(v7 - 8);
  *(void *)(v3 + 1952) = swift_task_alloc();
  *(void *)(v3 + 1960) = swift_task_alloc();
  *(void *)(v3 + 1968) = swift_task_alloc();
  *(void *)(v3 + 1976) = swift_task_alloc();
  *(void *)(v3 + 1984) = swift_task_alloc();
  *(void *)(v3 + 1992) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v3 + 2000) = swift_task_alloc();
  *(void *)(v3 + 2008) = swift_task_alloc();
  *(void *)(v3 + 2016) = swift_task_alloc();
  return _swift_task_switch(sub_1000385E8, v2, 0);
}

uint64_t sub_10001B728(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 136) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 144) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004742C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004742C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10000FF70;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10001B904(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[248] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[249] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[250] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100046FF4(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[251] = v6;
  uint64_t v7 = sub_100046FF4(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10000E7B0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t type metadata accessor for DataManager(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003EF8B0);
}

uint64_t sub_10001BB04()
{
  v1[230] = v0;
  v1[231] = *v0;
  type metadata accessor for UUID();
  v1[232] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Date();
  v1[233] = v2;
  v1[234] = *(void *)(v2 - 8);
  v1[235] = swift_task_alloc();
  uint64_t Priority = type metadata accessor for LocatePriority();
  v1[236] = Priority;
  v1[237] = *(void *)(Priority - 8);
  v1[238] = swift_task_alloc();
  v1[239] = swift_task_alloc();
  uint64_t refreshed = type metadata accessor for LegacyRefreshSchedule();
  v1[240] = refreshed;
  v1[241] = *(void *)(refreshed - 8);
  v1[242] = swift_task_alloc();
  v1[243] = swift_task_alloc();
  v1[244] = swift_task_alloc();
  v1[245] = swift_task_alloc();
  v1[246] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[247] = v5;
  void *v5 = v1;
  v5[1] = sub_10001B904;
  return daemon.getter();
}

uint64_t sub_10001BD44()
{
  uint64_t v12 = v0;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4F8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for FriendshipAction();
    sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[209] = sub_100037004(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Updated friends: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v9 = v0[256];
  return v8(v9);
}

uint64_t destroy for ServerLocationInProgress()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001C11C()
{
  uint64_t v1 = *(uint64_t **)(v0 + 48);
  *uint64_t v1 = sub_100013C20(0);
  v1[1] = v2;
  id v3 = [self defaultWorkspace];
  if (!v3)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 48);
  NSString v9 = String._bridgeToObjectiveC()();
  unsigned __int8 v10 = [v4 applicationIsInstalled:v9];

  *(unsigned char *)(v8 + 16) = v10 ^ 1;
  *(void *)(v8 + 24) = static SystemInfo.uniqueDeviceID.getter();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = static SystemInfo.deviceClass.getter();
  *(void *)(v8 + 48) = v12;
  *(unsigned char *)(v8 + 56) = 1;
  *(void *)(v8 + 64) = static SystemInfo.productType.getter();
  *(void *)(v8 + 72) = v13;
  *(void *)(v8 + 80) = static SystemInfo.osVersion.getter();
  *(void *)(v8 + 88) = v14;
  *(void *)(v8 + 96) = static SystemInfo.buildVersion.getter();
  *(void *)(v8 + 104) = v15;
  uint64_t v16 = (int *)type metadata accessor for ClientContext();
  *(void *)(v0 + 200) = v16;
  static SystemInfo.lockState.getter();
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  *(double *)(v8 + v16[13]) = v18 * 1000.0;
  uint64_t v19 = sub_10001679C();
  uint64_t v20 = (uint64_t *)(v8 + v16[14]);
  *uint64_t v20 = v19;
  v20[1] = v21;
  *(unsigned char *)(v8 + v16[15]) = 1;
  uint64_t v22 = (void *)(v8 + v16[16]);
  *uint64_t v22 = 3157559;
  v22[1] = 0xE300000000000000;
  uint64_t v23 = static SystemInfo.platform.getter();
  uint64_t v24 = (uint64_t *)(v8 + v16[17]);
  uint64_t *v24 = v23;
  v24[1] = v25;
  id v26 = [self sharedConfiguration];
  if (!v26)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v27 = v26;
  id v28 = [v26 countryCode];

  if (!v28)
  {
LABEL_19:
    __break(1u);
    return daemon.getter();
  }
  uint64_t v29 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 72);
  uint64_t v31 = *(void *)(v0 + 48);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  uint64_t v35 = (uint64_t *)(v31 + v16[18]);
  *uint64_t v35 = v32;
  v35[1] = v34;
  uint64_t v36 = static SystemInfo.regionCode.getter();
  uint64_t v37 = (uint64_t *)(v31 + v16[19]);
  *uint64_t v37 = v36;
  v37[1] = v38;
  uint64_t v39 = Account.icloudIdentifier.getter();
  unint64_t v40 = (uint64_t *)(v31 + v16[20]);
  uint64_t *v40 = v39;
  v40[1] = v41;
  sub_100013210(v30, v29, &qword_1003F3B30);
  uint64_t v42 = type metadata accessor for Handle();
  uint64_t v43 = *(void *)(v42 - 8);
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v29, 1, v42);
  uint64_t v45 = *(void *)(v0 + 168);
  if (v44 == 1)
  {
    sub_10000A520(*(void *)(v0 + 168), &qword_1003F3B30);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v46 = Handle.identifier.getter();
    uint64_t v47 = v48;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 152) + 16))(*(void *)(v0 + 160), *(void *)(v0 + 56), *(void *)(v0 + 144));
  if (!v47)
  {
    uint64_t v46 = Account.icloudIdentifier.getter();
    uint64_t v47 = v49;
  }
  uint64_t v51 = *(void *)(v0 + 152);
  uint64_t v50 = *(void *)(v0 + 160);
  uint64_t v53 = *(void *)(v0 + 136);
  uint64_t v52 = *(void *)(v0 + 144);
  uint64_t v54 = *(void *)(v0 + 64);
  uint64_t v55 = *(void *)(v0 + 48);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  *(void *)(v0 + 208) = v56;
  *(void *)(v0 + 216) = (v51 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v56(v50, v52);
  uint64_t v57 = (uint64_t *)(v55 + v16[22]);
  *uint64_t v57 = v46;
  v57[1] = v47;
  uint64_t v58 = v55 + v16[24];
  *(void *)uint64_t v58 = 0;
  *(unsigned char *)(v58 + 8) = 1;
  sub_100013210(v54, v53, &qword_1003ED110);
  uint64_t v59 = type metadata accessor for RequestOrigin();
  uint64_t v60 = *(void *)(v59 - 8);
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v53, 1, v59);
  uint64_t v62 = *(void *)(v0 + 136);
  if (v61 == 1)
  {
    sub_10000A520(*(void *)(v0 + 136), &qword_1003ED110);
  }
  else
  {
    uint64_t v63 = RequestOrigin.contextBundleApp.getter();
    uint64_t v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v59);
    if (v65)
    {
      uint64_t v66 = v16[23];
      *(void *)(*(void *)(v0 + 48) + v66) = v63;
      goto LABEL_14;
    }
  }
  uint64_t v67 = *(void *)(v0 + 48);
  uint64_t v68 = sub_100013C20(3);
  uint64_t v65 = v69;
  uint64_t v66 = v16[23];
  *(void *)(v67 + v66) = v68;
LABEL_14:
  uint64_t v71 = *(void *)(v0 + 120);
  uint64_t v70 = *(void *)(v0 + 128);
  uint64_t v73 = *(void *)(v0 + 104);
  uint64_t v72 = *(void *)(v0 + 112);
  uint64_t v75 = *(void *)(v0 + 88);
  uint64_t v74 = *(void *)(v0 + 96);
  uint64_t v76 = *(void *)(v0 + 80);
  char v77 = *(unsigned char *)(v0 + 280);
  uint64_t v78 = *(void *)(v0 + 48);
  *(void *)(v78 + v66 + 8) = v65;
  *(unsigned char *)(v78 + v16[25]) = v77;
  *(void *)(v78 + v16[26]) = v76;
  v79 = (void *)(v78 + v16[27]);
  void *v79 = v75;
  v79[1] = v74;
  uint64_t v80 = (void *)(v78 + v16[28]);
  *uint64_t v80 = v73;
  v80[1] = v72;
  os_log_type_t v81 = (void *)(v78 + v16[29]);
  *os_log_type_t v81 = v71;
  v81[1] = v70;
  int v82 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v82;
  *int v82 = v0;
  v82[1] = sub_10000B938;
  return daemon.getter();
}

uint64_t sub_10001C630(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EE008);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_10004E560();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for ClientContext();
    LOBYTE(v12) = 8;
    type metadata accessor for SystemInfo.DeviceLockState();
    sub_10004715C(&qword_1003EE010, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 104));
    v11[7] = 22;
    sub_100044014(&qword_1003EDE78);
    sub_1000321F8(&qword_1003EDE98);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001CC78()
{
  if (qword_1003EC408 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040C290);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[6];
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218240;
    if ((v4 & 0xC000000000000001) != 0) {
      uint64_t v6 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v6 = *(void *)(v0[6] + 16);
    }
    unint64_t v7 = v0[8];
    swift_bridgeObjectRelease();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2048;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v0[3] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "All sessions: %ld. Active sessions: %ld", (uint8_t *)v5, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v10 = v0[8];
  return v9(v10);
}

uint64_t sub_10001CEC0(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  sub_100044014(&qword_1003ECFB8);
  v2[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  sub_100044014(&qword_1003ECFF0);
  v2[17] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Handle();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Friend();
  v2[28] = v5;
  v2[29] = *(void *)(v5 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  uint64_t Priority = type metadata accessor for LocatePriority();
  v2[35] = Priority;
  v2[36] = *(void *)(Priority - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LocationRequest();
  v2[40] = v7;
  v2[41] = *(void *)(v7 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_100017E9C, v1, 0);
}

uint64_t sub_10001D26C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 2176);
  uint64_t v2 = *(void *)(v0 + 2168);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4B8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v26 = *(void *)(v0 + 2120) == *(void *)(v0 + 2128);
    uint64_t v30 = v1;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446722;
    *(void *)(v0 + 1816) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v7 = Duration.description.getter();
    *(void *)(v0 + 1824) = sub_100037004(v7, v8, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v0 + 2208) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s scheduleInterval: %{public}s isHighPriority: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v30;
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(v0 + 1936);
  uint64_t v10 = *(void *)(v0 + 1928);
  uint64_t v11 = *(void *)(v0 + 1920);
  uint64_t v12 = *(void *)(v0 + 1840) + *(void *)(v0 + 2080);
  if (*(void *)(v0 + 2120) == *(void *)(v0 + 2128)) {
    uint64_t v13 = (unsigned int *)(v0 + 2212);
  }
  else {
    uint64_t v13 = (unsigned int *)&enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
  }
  (*(void (**)(void, void, void))(v0 + 2088))(*(void *)(v0 + 1936), *v13, *(void *)(v0 + 1920));
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v12, v9, v11);
  swift_endAccess();
  if (Duration.milliseconds.getter() < 1)
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      *(void *)(v0 + 1808) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s Refreshing legacy location now.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_100081C74;
    return sub_100020D64(0, v2, v1);
  }
  else
  {
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 2104);
    uint64_t v14 = *(void *)(v0 + 2016);
    uint64_t v28 = *(void *)(v0 + 1912);
    uint64_t v27 = *(void *)(v0 + 1888);
    uint64_t v15 = *(void *)(v0 + 1848);
    uint64_t v16 = *(void *)(v0 + 1840);
    BOOL v17 = *(void *)(v0 + 2120) == *(void *)(v0 + 2128);
    type metadata accessor for WorkItemQueue.WorkItem();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    *(void *)(v18 + 24) = v1;
    *(unsigned char *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = v14;
    *(void *)(v18 + 48) = v16;
    *(void *)(v18 + 56) = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    unint64_t v19 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_release();
    v29(v28, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v20(v19);
  }
}

uint64_t sub_10001D87C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 440) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  sub_100044014(&qword_1003F04F0);
  *(void *)(v3 + 64) = swift_task_alloc();
  sub_100044014(&qword_1003EFEA0);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  *(void *)(v3 + 88) = swift_task_alloc();
  *(void *)(v3 + 96) = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003EEBF0);
  *(void *)(v3 + 104) = v4;
  *(void *)(v3 + 112) = *(void *)(v4 - 8);
  *(void *)(v3 + 120) = swift_task_alloc();
  *(void *)(v3 + 128) = swift_task_alloc();
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendshipAction();
  *(void *)(v3 + 192) = v5;
  *(void *)(v3 + 200) = *(void *)(v5 - 8);
  *(void *)(v3 + 208) = swift_task_alloc();
  *(void *)(v3 + 216) = swift_task_alloc();
  *(void *)(v3 + 224) = swift_task_alloc();
  *(void *)(v3 + 232) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Handle();
  *(void *)(v3 + 240) = v6;
  *(void *)(v3 + 248) = *(void *)(v6 - 8);
  *(void *)(v3 + 256) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Friend();
  *(void *)(v3 + 264) = v7;
  *(void *)(v3 + 272) = *(void *)(v7 - 8);
  *(void *)(v3 + 280) = swift_task_alloc();
  *(void *)(v3 + 288) = swift_task_alloc();
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  *(void *)(v3 + 328) = swift_task_alloc();
  *(void *)(v3 + 336) = swift_task_alloc();
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 352) = swift_task_alloc();
  uint64_t v8 = sub_100044014(&qword_1003F04F8);
  *(void *)(v3 + 360) = v8;
  *(void *)(v3 + 368) = *(void *)(v8 - 8);
  *(void *)(v3 + 376) = swift_task_alloc();
  *(void *)(v3 + 384) = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 392) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10004F170;
  return sub_100005710();
}

uint64_t sub_10001DCA0()
{
  uint64_t v1 = *(void *)(v0 + 3048);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 2968);
    uint64_t v6 = *(void (**)(void, uint64_t, void))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v8 = *(void *)(v4 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v5(*(void *)(v0 + 2976), v7, *(void *)(v0 + 2960));
      if (Device.isActive.getter()) {
        break;
      }
      (*(void (**)(void, void))(v4 - 8))(*(void *)(v0 + 2976), *(void *)(v0 + 2960));
      v7 += v8;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v10 = *(void *)(v0 + 3032);
    uint64_t v11 = *(void *)(v0 + 2976);
    uint64_t v12 = *(void *)(v0 + 2968);
    uint64_t v13 = *(void *)(v0 + 2960);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v10, v11, v13);
    uint64_t v9 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v9 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 2968) + 56))(*(void *)(v0 + 3032), v9, 1, *(void *)(v0 + 2960));
  swift_bridgeObjectRelease();
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(v0 + 3032);
  uint64_t v15 = *(void *)(v0 + 3024);
  uint64_t v16 = type metadata accessor for Logger();
  *(void *)(v0 + 3056) = sub_100044058(v16, (uint64_t)qword_10040B708);
  sub_100013210(v14, v15, &qword_1003EFCD0);
  BOOL v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 3024);
  if (!v19)
  {
    sub_10000A520(*(void *)(v0 + 3024), &qword_1003EFCD0);
    goto LABEL_18;
  }
  uint64_t v21 = *(void *)(v0 + 3016);
  uint64_t v22 = *(void *)(v0 + 2968);
  uint64_t v23 = *(void *)(v0 + 2960);
  uint64_t v24 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 67109120;
  sub_100013210(v20, v21, &qword_1003EFCD0);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v23);
  uint64_t v26 = *(void *)(v0 + 3016);
  if (v25 == 1)
  {
    sub_10000A520(*(void *)(v0 + 3016), &qword_1003EFCD0);
LABEL_16:
    int v30 = 0;
    goto LABEL_17;
  }
  uint64_t v27 = *(void *)(v0 + 2968);
  uint64_t v28 = *(void *)(v0 + 2960);
  char v29 = Device.isThisDevice.getter();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  if ((v29 & 1) == 0) {
    goto LABEL_16;
  }
  int v30 = 1;
LABEL_17:
  sub_10000A520(*(void *)(v0 + 3024), &qword_1003EFCD0);
  *(_DWORD *)(v0 + 3092) = v30;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v17, v18, "Current Device meDevice? %{BOOL}d", v24, 8u);
  swift_slowDealloc();
LABEL_18:

  sub_100013210(*(void *)(v0 + 3032), *(void *)(v0 + 3008), &qword_1003EFCD0);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 3008);
  if (!v33)
  {
    sub_10000A520(*(void *)(v0 + 3008), &qword_1003EFCD0);
    goto LABEL_26;
  }
  uint64_t v35 = *(void *)(v0 + 3000);
  uint64_t v36 = *(void *)(v0 + 2968);
  uint64_t v37 = *(void *)(v0 + 2960);
  uint64_t v38 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v38 = 67109120;
  sub_100013210(v34, v35, &qword_1003EFCD0);
  int v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v37);
  uint64_t v40 = *(void *)(v0 + 3000);
  if (v39 == 1)
  {
    sub_10000A520(*(void *)(v0 + 3000), &qword_1003EFCD0);
LABEL_24:
    int v44 = 0;
    goto LABEL_25;
  }
  uint64_t v41 = *(void *)(v0 + 2968);
  uint64_t v42 = *(void *)(v0 + 2960);
  char v43 = Device.isActive.getter();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  if ((v43 & 1) == 0) {
    goto LABEL_24;
  }
  int v44 = 1;
LABEL_25:
  sub_10000A520(*(void *)(v0 + 3008), &qword_1003EFCD0);
  *(_DWORD *)(v0 + 3088) = v44;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v31, v32, "Current MeDevice isActive? %{BOOL}d", v38, 8u);
  swift_slowDealloc();
LABEL_26:
  uint64_t v45 = *(void *)(v0 + 2992);
  uint64_t v46 = *(void *)(v0 + 2968);
  uint64_t v47 = *(void *)(v0 + 2960);
  uint64_t v48 = *(void *)(v0 + 2928);

  sub_100013210(v48, v45, &qword_1003EFCD0);
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  int v50 = v49(v45, 1, v47);
  uint64_t v51 = *(void *)(v0 + 2992);
  if (v50 == 1)
  {
    sub_10000A520(*(void *)(v0 + 2992), &qword_1003EFCD0);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v54 = *(void *)(v0 + 2968);
    uint64_t v55 = *(void *)(v0 + 2960);
    uint64_t v52 = Device.identifier.getter();
    uint64_t v53 = v56;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v51, v55);
  }
  uint64_t v57 = *(void *)(v0 + 2984);
  uint64_t v58 = *(void *)(v0 + 2960);
  sub_100013210(*(void *)(v0 + 3032), v57, &qword_1003EFCD0);
  int v59 = v49(v57, 1, v58);
  uint64_t v60 = *(void *)(v0 + 2984);
  if (v59 == 1)
  {
    sub_10000A520(*(void *)(v0 + 2984), &qword_1003EFCD0);
    if (!v53) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  uint64_t v61 = *(void *)(v0 + 2968);
  uint64_t v62 = *(void *)(v0 + 2960);
  uint64_t v63 = Device.identifier.getter();
  uint64_t v65 = v64;
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  if (!v53)
  {
    if (!v65) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  if (!v65)
  {
LABEL_39:
    swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v66 = *(void *)(v0 + 2952);
    sub_100013210(*(void *)(v0 + 3032), v66, &qword_1003EFCD0);
    swift_storeEnumTagMultiPayload();
    sub_10000D3F0(v66);
    sub_100030644(v66, type metadata accessor for DataManager.State);
    goto LABEL_41;
  }
  if (v52 == v63 && v53 == v65)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v69 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_41:
  uint64_t v67 = (void *)swift_task_alloc();
  *(void *)(v0 + 3064) = v67;
  void *v67 = v0;
  v67[1] = sub_10004EADC;
  return sub_10000E400(v0 + 448);
}

void *initializeWithCopy for ServerLocationInProgress(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10001E398(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  sub_100044014((uint64_t *)&unk_1003EE800);
  v2[29] = swift_task_alloc();
  sub_100044014(&qword_1003EFE98);
  v2[30] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MotionActivityState();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LocationType();
  v2[34] = v4;
  v2[35] = *(void *)(v4 - 8);
  v2[36] = swift_task_alloc();
  sub_100044014(&qword_1003ECAB8);
  v2[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[38] = v5;
  v2[39] = *(void *)(v5 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  sub_100044014(&qword_1003ECFE0);
  v2[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Location();
  v2[45] = v6;
  v2[46] = *(void *)(v6 - 8);
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v2[54] = v7;
  v2[55] = *(void *)(v7 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ServerLocation(0);
  v2[59] = v8;
  v2[60] = *(void *)(v8 - 8);
  v2[61] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Friend();
  v2[62] = v9;
  v2[63] = *(void *)(v9 - 8);
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  return _swift_task_switch(sub_100016EE4, v1, 0);
}

uint64_t sub_10001E81C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 80) = v2;
  if (v2)
  {
    *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 40) + 128);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v4 += 16;
    int v6 = *(_DWORD *)(v4 + 64);
    *(_DWORD *)(v0 + 152) = v6;
    *(void *)(v0 + 96) = *(void *)(v4 + 56);
    *(void *)(v0 + 104) = v5;
    *(void *)(v0 + 112) = &_swiftEmptySetSingleton;
    *(void *)(v0 + 120) = 0;
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v8 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    swift_bridgeObjectRetain();
    v5(v7, v8, v3);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10000E2C8;
    uint64_t v10 = *(void *)(v0 + 72);
    return sub_1000207EC(v10);
  }
  else
  {
    uint64_t v12 = sub_10003F4C8((uint64_t)&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v12;
    sub_100044014(&qword_1003F2800);
    CheckedContinuation.resume(returning:)();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_10001E9B8()
{
  if (qword_1003EC3E0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 4912) = sub_100044058(v1, (uint64_t)qword_10040C218);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LocalStorage Service read all server settings", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 4920) = v5;
  void *v5 = v0;
  v5[1] = sub_10000FD44;
  return sub_10004A5B4(v0 + 3040);
}

uint64_t sub_10001EB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10003B888(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100125BE8();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10001ECA0(v17, a5 & 1);
  unint64_t v23 = sub_10003B888(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  *uint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10001ECA0(uint64_t a1, char a2)
{
  os_log_type_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFF98);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          os_log_type_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    os_log_type_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  os_log_type_t v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *os_log_type_t v3 = v7;
  return result;
}

uint64_t sub_10001EFC8(void *a1)
{
  return sub_10001EFE0(a1);
}

uint64_t sub_10001EFE0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EE500);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_100027C70();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 152);
    v10[7] = 16;
    sub_100044014(&qword_1003EE510);
    sub_1000C2CE0(&qword_1003EE518);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001F3E0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v14 = *(_OWORD *)(a1 + 384);
  long long v15 = *(_OWORD *)(a1 + 400);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v13 = *(_OWORD *)(a1 + 368);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 336);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v9 = *(_OWORD *)(a1 + 304);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    v13,
    *((void *)&v13 + 1),
    v14,
    *((void *)&v14 + 1),
    v15,
    *((void *)&v15 + 1),
    *(void *)(a1 + 416),
    *(void *)(a1 + 424));
  return a1;
}

uint64_t sub_10001F48C()
{
  sub_100013B50(v0 + 448, v0 + 2176, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 2176) == 1
    || (memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL),
        sub_100013B50(v0 + 2144, v0 + 2704, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 2704)),
        sub_10001F3E0(v0 + 448, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378), sub_100013B50(v0 + 2704, v0 + 2608, &qword_1003EE258), !*(void *)(v0 + 2616)))
  {
    int v4 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 2608);
    long long v2 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2736) = v1;
    *(_OWORD *)(v0 + 2752) = v2;
    *(_OWORD *)(v0 + 2816) = v1;
    *(_OWORD *)(v0 + 2912) = v1;
    *(void *)(v0 + 2864) = 28494;
    *(void *)(v0 + 2872) = 0xE200000000000000;
    sub_10004650C();
    uint64_t v3 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    sub_10001FA28(v0 + 2816);
    int v4 = v3 == 0;
    *(_OWORD *)(v0 + 2832) = *(_OWORD *)(v0 + 2752);
    sub_10001FA28(v0 + 2832);
  }
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 67240192;
    *(_DWORD *)(v0 + 3080) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Current Device locationEnabled? %{BOOL,public}d", v7, 8u);
    swift_slowDealloc();
  }
  int v8 = *(unsigned __int8 *)(v0 + 3096);

  if (v4 != v8)
  {
    long long v9 = *(unsigned char **)(v0 + 2952);
    *long long v9 = v4;
    swift_storeEnumTagMultiPayload();
    sub_10000D3F0((uint64_t)v9);
    sub_100030644((uint64_t)v9, type metadata accessor for DataManager.State);
  }
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 3072) = v10;
  *long long v10 = v0;
  v10[1] = sub_10004E9CC;
  return sub_10000E400(v0 + 880);
}

uint64_t sub_10001F734()
{
  sub_100013B50(v0 + 880, v0 + 1312, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 1312) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 1312), 0x1B0uLL),
        sub_100013B50(v0 + 416, v0 + 2672, &qword_1003EE258),
        sub_100033ED8((uint64_t *)(v0 + 2672)),
        sub_10001F3E0(v0 + 880, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378), sub_100013B50(v0 + 2672, v0 + 2640, &qword_1003EE258), !*(void *)(v0 + 2648)))
  {
    int v3 = 0;
  }
  else
  {
    long long v1 = *(_OWORD *)(v0 + 2656);
    *(_OWORD *)(v0 + 2768) = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2784) = v1;
    long long v2 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2848) = v2;
    *(_OWORD *)(v0 + 2880) = v2;
    *(void *)(v0 + 2896) = 7562585;
    *(void *)(v0 + 2904) = 0xE300000000000000;
    sub_10004650C();
    int v3 = StringProtocol.caseInsensitiveCompare<A>(_:)() == 0;
    *(_OWORD *)(v0 + 2800) = *(_OWORD *)(v0 + 2768);
    sub_10001FA28(v0 + 2800);
    sub_10001FA28(v0 + 2848);
  }
  int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 67240192;
    *(_DWORD *)(v0 + 3084) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Current Device newFriendshipRequestsAllowed? %{BOOL,public}d", v6, 8u);
    swift_slowDealloc();
  }
  int v7 = *(unsigned __int8 *)(v0 + 3097);

  if (v3 != v7)
  {
    int v8 = *(unsigned char **)(v0 + 2952);
    *int v8 = v3;
    swift_storeEnumTagMultiPayload();
    sub_10000D3F0((uint64_t)v8);
    sub_100030644((uint64_t)v8, type metadata accessor for DataManager.State);
  }
  sub_10000A520(*(void *)(v0 + 3032), &qword_1003EFCD0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10001FA28(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001FA54()
{
  *(void *)(v0 + 176) = sub_10001FAC0();
  return _swift_task_switch(sub_100012A8C, 0, 0);
}

void (*sub_10001FAC0())(char *, uint64_t, uint64_t, uint64_t)
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v108 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v111 = (char *)v83 - v5;
  uint64_t v6 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100044014(&qword_1003F3210);
  uint64_t v9 = __chkstk_darwin(v99);
  v98 = (char *)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v97 = (uint64_t)v83 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v96 = (char *)v83 - v14;
  __chkstk_darwin(v13);
  v95 = (char *)v83 - v15;
  uint64_t v115 = (void (*)(char *, uint64_t, uint64_t, uint64_t))&_swiftEmptySetSingleton;
  uint64_t v84 = v0;
  swift_beginAccess();
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = sub_100249D50(v16);
  v83[2] = 0;
  swift_bridgeObjectRelease();
  uint64_t v86 = v17[2];
  if (!v86)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  unint64_t v87 = v17 + 4;
  uint64_t v110 = v2 + 16;
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v90 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  uint64_t v89 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  uint64_t v109 = (void (**)(char *, uint64_t))(v2 + 8);
  v83[1] = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  uint64_t v93 = v2;
  uint64_t v92 = v8;
  uint64_t v91 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  uint64_t v94 = v1;
  while (1)
  {
    uint64_t v88 = v19;
    uint64_t v21 = v87[v19];
    int64_t v22 = *(void *)(v21 + 16);
    uint64_t v103 = v21;
    if (v22) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v49 = _swiftEmptyArrayStorage[2];
    v114 = (void (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    if (v49)
    {
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v57 = 0;
      do
      {
        ++v57;
        uint64_t v58 = swift_bridgeObjectRetain();
        sub_10012D854(v58);
      }
      while (v49 != v57);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v106 = *((void *)v114 + 2);
    uint64_t v102 = v114;
    if (v106)
    {
      unint64_t v101 = (unint64_t)v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      unint64_t v59 = 0;
      v105 = (char *)v114 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v60 = *(void *)(v2 + 72);
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
      v61(v8, v105, v1);
      while (1)
      {
        uint64_t v104 = *v18;
        v104(v8, 0, 1, v1);
        if ((*v90)(v8, 1, v1) == 1) {
          break;
        }
        unint64_t v107 = v59;
        (*v89)(v111, v8, v1);
        uint64_t v65 = v115;
        sub_1000207A4(&qword_1003EE920, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_bridgeObjectRetain();
        uint64_t v66 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v67 = -1 << *((unsigned char *)v65 + 32);
        unint64_t v68 = v66 & ~v67;
        if ((*(void *)((char *)v65 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v68))
        {
          uint64_t v69 = ~v67;
          while (1)
          {
            uint64_t v70 = v108;
            v61(v108, (char *)(*((void *)v65 + 6) + v68 * v60), v1);
            sub_1000207A4(&qword_1003EEC20, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v72 = *v109;
            (*v109)(v70, v1);
            if (v71) {
              break;
            }
            unint64_t v68 = (v68 + 1) & v69;
            if (((*(void *)((char *)v65 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v68) & 1) == 0) {
              goto LABEL_36;
            }
          }
          swift_bridgeObjectRelease();
          v72(v111, v1);
        }
        else
        {
LABEL_36:
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v63 = (uint64_t)v108;
          uint64_t v64 = v111;
          v61(v108, v111, v1);
          v114 = v115;
          sub_1000258D0(v63, v68, isUniquelyReferenced_nonNull_native);
          uint64_t v115 = v114;
          swift_bridgeObjectRelease();
          (*v109)(v64, v1);
        }
        unint64_t v59 = v107 + 1;
        uint64_t v2 = v93;
        int v8 = v92;
        uint64_t v18 = v91;
        if (v107 + 1 == v106)
        {
          v104(v92, 1, 1, v1);
          break;
        }
        v61(v92, &v105[v60 * v59], v1);
      }
    }
    else
    {
      (*v18)(v8, 1, 1, v1);
    }
    uint64_t v20 = v88 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v20;
    if (v20 == v86)
    {
      swift_bridgeObjectRelease_n();
LABEL_49:
      swift_beginAccess();
      uint64_t v73 = swift_bridgeObjectRetain();
      uint64_t v74 = sub_10024AC3C(v73);
      swift_bridgeObjectRelease();
      sub_1002930B0((uint64_t)v74);
      swift_bridgeObjectRelease();
      if (qword_1003EC408 != -1) {
        goto LABEL_59;
      }
      goto LABEL_50;
    }
  }
  v114 = (void (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_100245EE8(0, v22, 0);
  uint64_t v24 = sub_1000FF0BC(v21);
  unint64_t v25 = 0;
  unint64_t v26 = v21 + 64;
  char v27 = *(unsigned char *)(v21 + 32);
  uint64_t v100 = (char *)v23;
  uint64_t v85 = v21 + 88;
  uint64_t v28 = v21;
  uint64_t v102 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v22;
  unint64_t v101 = v21 + 64;
  while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << v27)
  {
    if ((*(void *)(v26 + 8 * ((unint64_t)v24 >> 6)) & (1 << v24)) == 0) {
      goto LABEL_54;
    }
    if (*(_DWORD *)(v28 + 36) != v23) {
      goto LABEL_55;
    }
    uint64_t v106 = 1 << v24;
    v105 = v23;
    unint64_t v107 = (unint64_t)v24 >> 6;
    uint64_t v104 = v25;
    uint64_t v30 = v99;
    uint64_t v31 = *(int *)(v99 + 48);
    uint64_t v32 = *(void *)(v28 + 48);
    uint64_t v33 = type metadata accessor for Handle();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = v34;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    uint64_t v37 = (uint64_t)v95;
    v36(v95, v32 + *(void *)(v34 + 72) * v24, v33);
    uint64_t v38 = *(void *)(*(void *)(v28 + 56) + 8 * v24);
    *(void *)(v37 + v31) = v38;
    int v39 = v96;
    v36(v96, v37, v33);
    *(void *)&v39[*(int *)(v30 + 48)] = v38;
    uint64_t v40 = (uint64_t)v39;
    uint64_t v41 = v97;
    sub_100013B50(v40, v97, &qword_1003F3210);
    swift_bridgeObjectRetain_n();
    sub_10000A520(v37, &qword_1003F3210);
    uint64_t v42 = *(int *)(v30 + 48);
    char v43 = v98;
    v36(v98, v41, v33);
    uint64_t v44 = *(void *)(v41 + v42);
    *(void *)&v43[v42] = v44;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v35 + 8);
    swift_bridgeObjectRetain();
    v45(v43, v33);
    sub_10000A520(v41, &qword_1003F3210);
    uint64_t v46 = v114;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100245EE8(0, *((void *)v46 + 2) + 1, 1);
      uint64_t v46 = v114;
    }
    unint64_t v48 = *((void *)v46 + 2);
    unint64_t v47 = *((void *)v46 + 3);
    unint64_t v49 = v48 + 1;
    uint64_t v1 = v94;
    uint64_t v28 = v103;
    int v50 = v102;
    if (v48 >= v47 >> 1)
    {
      sub_100245EE8(v47 > 1, v48 + 1, 1);
      uint64_t v46 = v114;
    }
    *((void *)v46 + 2) = v49;
    *((void *)v46 + v48 + 4) = v44;
    char v27 = *(unsigned char *)(v28 + 32);
    unint64_t v29 = 1 << v27;
    if (v24 >= 1 << v27) {
      goto LABEL_56;
    }
    unint64_t v26 = v101;
    unint64_t v51 = v107;
    uint64_t v52 = *(void *)(v101 + 8 * v107);
    if ((v52 & v106) == 0) {
      goto LABEL_57;
    }
    if (*(_DWORD *)(v28 + 36) != v105) {
      goto LABEL_58;
    }
    unint64_t v53 = v52 & (-2 << (v24 & 0x3F));
    if (v53)
    {
      unint64_t v29 = __clz(__rbit64(v53)) | v24 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v54 = v107 + 1;
      unint64_t v55 = (v29 + 63) >> 6;
      if (v107 + 1 < v55)
      {
        unint64_t v56 = *(void *)(v101 + 8 * v54);
        if (!v56)
        {
          unint64_t v54 = v107 + 2;
          if (v107 + 2 >= v55) {
            goto LABEL_8;
          }
          unint64_t v56 = *(void *)(v101 + 8 * v54);
          if (!v56)
          {
            while (v55 - 3 != v51)
            {
              unint64_t v56 = *(void *)(v85 + 8 * v51++);
              if (v56)
              {
                unint64_t v54 = v51 + 2;
                goto LABEL_23;
              }
            }
            goto LABEL_8;
          }
        }
LABEL_23:
        unint64_t v29 = __clz(__rbit64(v56)) + (v54 << 6);
      }
    }
LABEL_8:
    unint64_t v25 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)v104 + 1);
    int64_t v23 = v100;
    uint64_t v24 = v29;
    if ((void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)v104 + 1) == v50)
    {
      v114 = (void (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
      uint64_t v2 = v93;
      int v8 = v92;
      uint64_t v18 = v91;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once();
LABEL_50:
  uint64_t v75 = type metadata accessor for Logger();
  sub_100044058(v75, (uint64_t)qword_10040C290);
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    *(_DWORD *)uint64_t v78 = 136446210;
    swift_beginAccess();
    sub_1000207A4(&qword_1003EE920, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v79 = Set.description.getter();
    unint64_t v81 = v80;
    swift_bridgeObjectRelease();
    uint64_t v112 = sub_100037004(v79, v81, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Active clients: %{public}s", v78, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v115;
}

uint64_t sub_1000207A4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000207EC(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100044014(&qword_1003F25B8);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = sub_100044014(&qword_1003EF278);
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_10004A68C, 0, 0);
}

uint64_t sub_1000209D8()
{
  unint64_t v25 = v0;
  uint64_t v1 = v0[24];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v24 = _swiftEmptyArrayStorage;
    sub_100020D44(0, v2, 0);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v4 += 16;
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v22 = *(void *)(v4 + 56);
    int64_t v23 = v5;
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v4 - 8);
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = v0[12];
      uint64_t v10 = v0[10];
      v23(v9, v6, v10);
      Friend.handle.getter();
      (*v7)(v9, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100020D44(0, v8[2] + 1, 1);
        uint64_t v8 = v24;
      }
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_100020D44(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v24;
      }
      uint64_t v13 = v0[15];
      uint64_t v14 = v0[13];
      v8[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v12, v13, v14);
      uint64_t v24 = v8;
      v6 += v22;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v8[2];
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_release();
  }
  else
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100044058(v16, (uint64_t)qword_10040C290);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      v0[6] = sub_100037004(0xD00000000000001DLL, 0x8000000100378D40, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not %{public}s to server since no followings", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  return v20(v15 != 0);
}

uint64_t sub_100020D44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001584D4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100020D64(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 928) = v3;
  *(void *)(v4 + 920) = a3;
  *(void *)(v4 + 912) = a2;
  *(unsigned char *)(v4 + 1780) = a1;
  uint64_t v5 = type metadata accessor for MotionActivityState();
  *(void *)(v4 + 936) = v5;
  *(void *)(v4 + 944) = *(void *)(v5 - 8);
  *(void *)(v4 + 952) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LocationType();
  *(void *)(v4 + 960) = v6;
  *(void *)(v4 + 968) = *(void *)(v6 - 8);
  *(void *)(v4 + 976) = swift_task_alloc();
  sub_100044014(&qword_1003ECAB8);
  *(void *)(v4 + 984) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v4 + 992) = v7;
  *(void *)(v4 + 1000) = *(void *)(v7 - 8);
  *(void *)(v4 + 1008) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Location();
  *(void *)(v4 + 1016) = v8;
  *(void *)(v4 + 1024) = *(void *)(v8 - 8);
  *(void *)(v4 + 1032) = swift_task_alloc();
  *(void *)(v4 + 1040) = swift_task_alloc();
  sub_100044014(&qword_1003ECFE0);
  *(void *)(v4 + 1048) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for LegacyLocation(0);
  *(void *)(v4 + 1056) = v9;
  *(void *)(v4 + 1064) = *(void *)(v9 - 8);
  *(void *)(v4 + 1072) = swift_task_alloc();
  sub_100044014(&qword_1003ECFE8);
  *(void *)(v4 + 1080) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ServerLocation(0);
  *(void *)(v4 + 1088) = v10;
  *(void *)(v4 + 1096) = *(void *)(v10 - 8);
  *(void *)(v4 + 1104) = swift_task_alloc();
  *(void *)(v4 + 1112) = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v4 + 1120) = swift_task_alloc();
  uint64_t refreshed = type metadata accessor for LegacyRefreshSchedule();
  *(void *)(v4 + 1128) = refreshed;
  *(void *)(v4 + 1136) = *(void *)(refreshed - 8);
  *(void *)(v4 + 1144) = swift_task_alloc();
  *(void *)(v4 + 1152) = type metadata accessor for LocationEndpoint();
  *(void *)(v4 + 1160) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ClientOrigin();
  *(void *)(v4 + 1168) = v12;
  *(void *)(v4 + 1176) = *(void *)(v12 - 8);
  *(void *)(v4 + 1184) = swift_task_alloc();
  sub_100044014(&qword_1003ECFF0);
  *(void *)(v4 + 1192) = swift_task_alloc();
  uint64_t Priority = type metadata accessor for LocatePriority();
  *(void *)(v4 + 1200) = Priority;
  *(void *)(v4 + 1208) = *(void *)(Priority - 8);
  *(void *)(v4 + 1216) = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  *(void *)(v4 + 1224) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Account();
  *(void *)(v4 + 1232) = v14;
  *(void *)(v4 + 1240) = *(void *)(v14 - 8);
  *(void *)(v4 + 1248) = swift_task_alloc();
  *(void *)(v4 + 1256) = swift_task_alloc();
  *(void *)(v4 + 1264) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for RequestOrigin();
  *(void *)(v4 + 1272) = v15;
  *(void *)(v4 + 1280) = *(void *)(v15 - 8);
  *(void *)(v4 + 1288) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for LegacyRefreshCommandReason();
  *(void *)(v4 + 1296) = v16;
  *(void *)(v4 + 1304) = *(void *)(v16 - 8);
  *(void *)(v4 + 1312) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for LocationRequest();
  *(void *)(v4 + 1320) = v17;
  *(void *)(v4 + 1328) = *(void *)(v17 - 8);
  *(void *)(v4 + 1336) = swift_task_alloc();
  *(void *)(v4 + 1344) = swift_task_alloc();
  *(void *)(v4 + 1352) = swift_task_alloc();
  *(void *)(v4 + 1360) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Handle();
  *(void *)(v4 + 1368) = v18;
  *(void *)(v4 + 1376) = *(void *)(v18 - 8);
  *(void *)(v4 + 1384) = swift_task_alloc();
  *(void *)(v4 + 1392) = swift_task_alloc();
  *(void *)(v4 + 1400) = swift_task_alloc();
  *(void *)(v4 + 1408) = swift_task_alloc();
  *(void *)(v4 + 1416) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Friend();
  *(void *)(v4 + 1424) = v19;
  *(void *)(v4 + 1432) = *(void *)(v19 - 8);
  *(void *)(v4 + 1440) = swift_task_alloc();
  *(void *)(v4 + 1448) = swift_task_alloc();
  *(void *)(v4 + 1456) = swift_task_alloc();
  *(void *)(v4 + 1464) = swift_task_alloc();
  *(void *)(v4 + 1472) = swift_task_alloc();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v4 + 1480) = v20;
  *uint64_t v20 = v4;
  v20[1] = sub_10000A92C;
  return daemon.getter();
}

uint64_t sub_100021584(uint64_t a1, char a2)
{
  *(void *)(v3 + 688) = v2;
  *(unsigned char *)(v3 + 912) = a2;
  *(void *)(v3 + 680) = a1;
  *(void *)(v3 + 696) = *v2;
  uint64_t v4 = type metadata accessor for Date();
  *(void *)(v3 + 704) = v4;
  *(void *)(v3 + 712) = *(void *)(v4 - 8);
  *(void *)(v3 + 720) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for HandleType();
  *(void *)(v3 + 728) = v5;
  *(void *)(v3 + 736) = *(void *)(v5 - 8);
  *(void *)(v3 + 744) = swift_task_alloc();
  *(void *)(v3 + 752) = swift_task_alloc();
  *(void *)(v3 + 760) = swift_task_alloc();
  *(void *)(v3 + 768) = swift_task_alloc();
  *(void *)(v3 + 776) = swift_task_alloc();
  *(void *)(v3 + 784) = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 792) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100022410;
  return daemon.getter();
}

uint64_t sub_100021740()
{
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B708);
  int64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DataManager load LocalStorage serverSettings", v4, 2u);
    swift_slowDealloc();
  }
  swift_release();

  sub_100037758(v0 + 1312, v0 + 16);
  sub_100037758(v0 + 16, *(void *)(v0 + 1760));
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100021880()
{
  return swift_retain();
}

uint64_t sub_1000218BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[112];
  uint64_t v4 = v2[111];
  uint64_t v5 = sub_10003D430(&qword_1003F0330, a2, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  uint64_t v6 = swift_task_alloc();
  v2[113] = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v2[114] = v7;
  uint64_t v8 = sub_100044014(&qword_1003ECCD0);
  *uint64_t v7 = v2;
  v7[1] = sub_10000FE58;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 2, v4, v5, 0xD000000000000014, 0x80000001003784C0, sub_10022AADC, v6, v8);
}

uint64_t sub_100021A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100044014(&qword_1003F28E8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  return swift_release();
}

uint64_t sub_100021BF0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100021C20(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100021C20(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE3B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100042524(a1, a1[3]);
  sub_100021E28();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100021E28()
{
  unint64_t result = qword_1003EE3A8;
  if (!qword_1003EE3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE3A8);
  }
  return result;
}

uint64_t sub_100021E7C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_100047234(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047234(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10000F678;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100022058(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 56) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_10000EC44;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100022234(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1784) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1792) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_100047234(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047234(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100018B3C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100022410(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 800) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 808) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for LocalStorageService();
  uint64_t v6 = sub_1000471EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000471EC(&qword_1003F01F8, (void (*)(uint64_t))type metadata accessor for LocalStorageService);
  *uint64_t v3 = v9;
  v3[1] = sub_100017B60;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t type metadata accessor for LocalStorageService()
{
  return self;
}

uint64_t sub_100022610()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100022650()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000226A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000226E0()
{
  swift_unknownObjectRelease();
  sub_1000233E4(v0 + 32);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100022728(uint64_t *a1)
{
  uint64_t v2 = sub_100044014(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v7, v6);
}

uint64_t sub_1000227FC(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v3 + 40));
  a2(*(void *)(v3 + 48));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100022870()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000228B8()
{
  uint64_t v1 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100022964()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000229A4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000229E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t destroy for UpdateFenceRequest(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    return sub_100044090(v4, v3);
  }
  return result;
}

uint64_t sub_100022AA0(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A7375746174730ALL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  sub_100044014(&qword_1003ED120);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 540697705;
}

uint64_t sub_100022B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  Swift::String v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t _s13findmylocated18UpdateFenceRequestVwCP_0(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  unint64_t v3 = a2 + 1;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
  }
  else
  {
    uint64_t v5 = *v3;
    sub_100022C64(*v3, v4);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t sub_100022C64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100022CC0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100022CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t destroy for ServerContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v3 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v3;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100022F04@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100022F34(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100022F34(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EE210);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_100042524(a1, a1[3]);
  sub_10002313C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10002313C()
{
  unint64_t result = qword_1003EE218;
  if (!qword_1003EE218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE218);
  }
  return result;
}

uint64_t destroy for ServerSettingsRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 136))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 408);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ServerSettingsRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = v8;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    uint64_t v9 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(void *)(a1 + 240) = v9;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v10;
    long long v11 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v13;
    long long v14 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  long long v16 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v16;
  long long v17 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v17;
  long long v18 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v18;
  uint64_t v19 = *(void *)(a2 + 408);
  if (v19)
  {
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = v19;
    uint64_t v20 = *(void *)(a2 + 416);
    uint64_t v21 = *(void *)(a2 + 424);
    *(void *)(a1 + 416) = v20;
    *(void *)(a1 + 424) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v22;
  }
  return a1;
}

uint64_t sub_1000233E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

_OWORD *sub_100023434(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

double sub_100023444@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100023490(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100023490@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE3B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000239F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  LOBYTE(v39) = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v37 = v9;
  LOBYTE(v39) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v35 = v12;
  uint64_t v36 = v11;
  LOBYTE(v39) = 2;
  swift_bridgeObjectRetain();
  uint64_t v15 = v14;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  LOBYTE(v39) = 3;
  int v34 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_100044014(&qword_1003ED230);
  char v38 = 4;
  sub_1000440FC((unint64_t *)&qword_1003ED618, &qword_1003ED230);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v39;
  LOBYTE(v39) = 5;
  uint64_t v32 = v18;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v39) = 6;
  uint64_t v33 = v20;
  swift_bridgeObjectRetain();
  LODWORD(v30) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v39) = 7;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v22;
  v34 &= 1u;
  LODWORD(v31) = v30 & 1;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = v21;
  v24(v8, v5);
  swift_bridgeObjectRetain();
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v25 = v33;
  swift_bridgeObjectRelease();
  uint64_t v26 = v32;
  swift_bridgeObjectRelease();
  uint64_t v27 = v15;
  swift_bridgeObjectRelease();
  uint64_t v28 = v36;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v37;
  *(void *)(a2 + 8) = v28;
  *(void *)(a2 + 16) = v35;
  *(void *)(a2 + 24) = v27;
  *(void *)(a2 + 32) = v17;
  *(unsigned char *)(a2 + 40) = v34;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v25;
  *(unsigned char *)(a2 + 72) = v31;
  *(void *)(a2 + 80) = v30;
  *(void *)(a2 + 88) = v23;
  return result;
}

unint64_t sub_1000239F8()
{
  unint64_t result = qword_1003EE388;
  if (!qword_1003EE388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE388);
  }
  return result;
}

uint64_t sub_100023A4C()
{
  uint64_t v1 = sub_100044014(&qword_1003ECFE0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v21 = 540697705;
  unint64_t v22 = 0xE400000000000000;
  uint64_t v4 = *v0;
  uint64_t v5 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6F697461636F6C0ALL;
  v7._object = (void *)0xEA00000000003A6ELL;
  String.append(_:)(v7);
  uint64_t v8 = (int *)type metadata accessor for ServerLocation(0);
  sub_100013210((uint64_t)v0 + v8[5], (uint64_t)v3, &qword_1003ECFE0);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001003740C0;
  v10._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  uint64_t v11 = (uint64_t *)((char *)v0 + v8[6]);
  uint64_t v12 = v11[1];
  uint64_t v19 = *v11;
  uint64_t v20 = v12;
  swift_bridgeObjectRetain();
  sub_100044014(&qword_1003ED120);
  v13._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x3A7375746174730ALL;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  uint64_t v15 = (uint64_t *)((char *)v0 + v8[7]);
  uint64_t v16 = v15[1];
  uint64_t v19 = *v15;
  uint64_t v20 = v16;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t initializeWithCopy for ServerFriend(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 sub_100023D14@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100023D70(a1, (uint64_t)v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100023D70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE3C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_1000242C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  char v47 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  char v47 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 2;
  char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  char v47 = 4;
  uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  char v47 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = v17;
  char v47 = 7;
  int v46 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 8;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = v19;
  char v47 = 9;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  char v47 = 10;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v24 = v23;
  char v47 = 11;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v25;
  char v47 = 12;
  int v44 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 13;
  int v43 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 14;
  int v42 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 15;
  int v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v47 = 16;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v40 = v27;
  char v47 = 17;
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 18;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v28;
  char v47 = 19;
  int v37 = KeyedDecodingContainer.decode(_:forKey:)();
  char v47 = 20;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v36 = v29;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v30 = v12 & 1;
  char v31 = v46 & 1;
  char v32 = v44 & 1;
  char v33 = v43 & 1;
  char v34 = v42 & 1;
  int v46 = v37 & 1;
  uint64_t result = sub_1000233E4((uint64_t)a1);
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v30;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v45;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v18;
  *(unsigned char *)(a2 + 56) = v31;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v22;
  *(void *)(a2 + 80) = v24;
  *(void *)(a2 + 88) = v26;
  *(unsigned char *)(a2 + 96) = v32;
  *(unsigned char *)(a2 + 97) = v33;
  *(unsigned char *)(a2 + 98) = v34;
  *(unsigned char *)(a2 + 99) = v41;
  *(void *)(a2 + 104) = v40;
  *(void *)(a2 + 112) = v39;
  *(void *)(a2 + 120) = v38;
  *(unsigned char *)(a2 + 128) = v46;
  *(void *)(a2 + 136) = v36;
  return result;
}

unint64_t sub_1000242C0()
{
  unint64_t result = qword_1003EE398;
  if (!qword_1003EE398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE398);
  }
  return result;
}

uint64_t sub_100024314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t v11 = *(void *)(Priority - 8);
  __chkstk_darwin(Priority);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_1000244E0(a4);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v25 = v28;
      *uint64_t v23 = a1;
      v23[1] = v25;
      v23[2] = v29;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_100127788();
    goto LABEL_7;
  }
  sub_1000089B8(v19, a5 & 1);
  unint64_t v26 = sub_1000244E0(a4);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  uint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, Priority);
  return sub_10004AF08(v16, (uint64_t)v13, a1, v28, v29, v22);
}

unint64_t sub_1000244E0(uint64_t a1)
{
  type metadata accessor for LocatePriority();
  sub_1000256E8(&qword_1003F0048, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100025730(a1, v2, (uint64_t (*)(void))&type metadata accessor for LocatePriority, &qword_1003F0050, (void (*)(uint64_t))&type metadata accessor for LocatePriority, (uint64_t)&protocol conformance descriptor for LocatePriority);
}

uint64_t sub_1000245B4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for Handle();
  uint64_t v125 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  uint64_t v10 = __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  uint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v130 = (uint64_t)&v100 - v13;
  unint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t v108 = *(void *)(Priority - 8);
  uint64_t v15 = __chkstk_darwin(Priority);
  uint64_t v106 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v128 = (char *)&v100 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v110 = *(char **)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v129 = (uint64_t)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  v131 = (void (*)(uint64_t, unint64_t, uint64_t))((char *)&v100 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  v127 = (char *)&v100 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v126 = (uint64_t)&v100 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v100 - v27;
  if (qword_1003EC408 != -1) {
    goto LABEL_56;
  }
  while (1)
  {
    uint64_t v29 = type metadata accessor for Logger();
    sub_100044058(v29, (uint64_t)qword_10040C290);
    v132 = (void (*)(char *, unint64_t, uint64_t))*((void *)v110 + 2);
    uint64_t v133 = (uint64_t)(v110 + 16);
    v132(v28, a1, v18);
    char v30 = *(void (**)(void, void, void))(v108 + 16);
    uint64_t v107 = a3;
    uint64_t v105 = v108 + 16;
    uint64_t v104 = (void (*)(char *, uint64_t, unint64_t))v30;
    v30(v128, a3, Priority);
    swift_bridgeObjectRetain_n();
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    BOOL v34 = os_log_type_enabled(v31, v32);
    unint64_t v119 = a1;
    v123 = v8;
    uint64_t v124 = isUniquelyReferenced_nonNull_native;
    v118 = v12;
    if (v34)
    {
      uint64_t v35 = swift_slowAlloc();
      v121 = (void (*)(void, void, void))swift_slowAlloc();
      v136 = v121;
      *(_DWORD *)uint64_t v35 = 136315650;
      unint64_t v36 = a2;
      sub_100047474(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v120 = v31;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v135 = sub_100037004(v37, v38, (uint64_t *)&v136);
      LODWORD(v117) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      a1 = *((void *)v110 + 1);
      ((void (*)(char *, uint64_t))a1)(v28, v18);
      unint64_t v39 = Priority;
      *(_WORD *)(v35 + 12) = 2080;
      sub_100047474(&qword_1003F3330, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
      uint64_t v40 = v128;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v135 = sub_100037004(v41, v42, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v103 = *(void (**)(char *, unint64_t))(v108 + 8);
      v103(v40, v39);
      *(_WORD *)(v35 + 22) = 2080;
      unint64_t Priority = v39;
      swift_bridgeObjectRetain();
      uint64_t v43 = Array.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v135 = sub_100037004(v43, v45, (uint64_t *)&v136);
      uint64_t v12 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a2 = v36;
      swift_bridgeObjectRelease();
      os_log_t v46 = v120;
      _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v117, "Track new legacyLocationSubscriptions: client: %s priority: %s handles: %s", (uint8_t *)v35, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t isUniquelyReferenced_nonNull_native = v124;
      swift_slowDealloc();

      a3 = (uint64_t)v110;
    }
    else
    {
      a3 = (uint64_t)v110;
      a1 = *((void *)v110 + 1);
      ((void (*)(char *, uint64_t))a1)(v28, v18);
      uint64_t v103 = *(void (**)(char *, unint64_t))(v108 + 8);
      v103(v128, Priority);

      swift_bridgeObjectRelease_n();
    }
    char v47 = (uint64_t *)(v122 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
    swift_beginAccess();
    uint64_t v48 = *v47;
    uint64_t v49 = *(void *)(*v47 + 16);
    uint64_t v102 = v47;
    if (!v49) {
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    unint64_t v50 = sub_1000244E0(v107);
    if ((v51 & 1) == 0) {
      break;
    }
    uint64_t v52 = *(void *)(v48 + 56) + 24 * v50;
    uint64_t v28 = *(char **)v52;
    unint64_t v53 = *(char **)(v52 + 8);
    uint64_t v122 = *(void *)(v52 + 16);
    v123 = v53;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(char **)(a2 + 16);
    if (!v12)
    {
      uint64_t v95 = (uint64_t)v106;
      uint64_t v96 = (void (*)(uint64_t, unint64_t))v103;
      uint64_t v93 = v122;
      uint64_t v92 = (uint64_t)v123;
      v104(v106, v107, Priority);
      goto LABEL_50;
    }
    v128 = (char *)a1;
    unint64_t v101 = Priority;
    unint64_t v54 = v125 + 16;
    v131 = *(void (**)(uint64_t, unint64_t, uint64_t))(v125 + 16);
    a1 = a2 + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
    uint64_t v129 = *(void *)(v125 + 72);
    uint64_t v125 = a3 + 8;
    unint64_t Priority = v54;
    uint64_t v8 = (char *)(v54 - 8);
    unint64_t v100 = a2;
    swift_bridgeObjectRetain();
    uint64_t v55 = v130;
    unint64_t v56 = v127;
    while (1)
    {
      v131(v55, a1, isUniquelyReferenced_nonNull_native);
      v132(v56, v119, v18);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v135 = (uint64_t)v28;
      a2 = sub_100025614(v55);
      uint64_t v58 = *((void *)v28 + 2);
      BOOL v59 = (v57 & 1) == 0;
      uint64_t v60 = v58 + v59;
      if (__OFADD__(v58, v59)) {
        break;
      }
      a3 = v57;
      if (*((void *)v28 + 3) >= v60)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100127A44();
          uint64_t v28 = (char *)v135;
        }
      }
      else
      {
        sub_100025B8C(v60, isUniquelyReferenced_nonNull_native);
        uint64_t v28 = (char *)v135;
        unint64_t v61 = sub_100025614(v130);
        if ((a3 & 1) != (v62 & 1)) {
          goto LABEL_57;
        }
        a2 = v61;
      }
      uint64_t isUniquelyReferenced_nonNull_native = v124;
      swift_bridgeObjectRelease();
      if ((a3 & 1) == 0)
      {
        *(void *)&v28[8 * (a2 >> 6) + 64] |= 1 << a2;
        v131(*((void *)v28 + 6) + a2 * v129, v130, isUniquelyReferenced_nonNull_native);
        *(void *)(*((void *)v28 + 7) + 8 * a2) = &_swiftEmptySetSingleton;
        uint64_t v63 = *((void *)v28 + 2);
        BOOL v64 = __OFADD__(v63, 1);
        uint64_t v65 = v63 + 1;
        if (v64) {
          goto LABEL_55;
        }
        *((void *)v28 + 2) = v65;
      }
      a3 = v126;
      unint64_t v56 = v127;
      sub_100154694(v126, v127);
      ((void (*)(uint64_t, uint64_t))v128)(a3, v18);
      uint64_t v55 = v130;
      (*(void (**)(uint64_t, uint64_t))v8)(v130, isUniquelyReferenced_nonNull_native);
      a1 += v129;
      if (!--v12)
      {
        uint64_t v94 = v107;
        uint64_t v95 = (uint64_t)v106;
        uint64_t v96 = (void (*)(uint64_t, unint64_t))v103;
        uint64_t v93 = v122;
        uint64_t v92 = (uint64_t)v123;
        goto LABEL_49;
      }
    }
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v117 = *(void *)(a2 + 16);
  if (v117)
  {
    unint64_t v101 = Priority;
    v121 = *(void (**)(void, void, void))(v125 + 16);
    unint64_t v116 = a2 + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
    uint64_t v8 = (char *)a3;
    uint64_t v122 = a3 + 56;
    os_log_t v120 = *(os_log_t *)(v125 + 72);
    uint64_t v115 = a3 + 48;
    uint64_t v109 = (void (**)(char *, char *, uint64_t))(a3 + 32);
    uint64_t v130 = a3 + 8;
    v125 += 16;
    uint64_t v113 = (void (**)(char *, uint64_t))(v125 - 8);
    unint64_t v100 = a2;
    swift_bridgeObjectRetain();
    uint64_t v66 = 0;
    uint64_t v28 = (char *)_swiftEmptyDictionarySingleton;
    long long v114 = xmmword_100367D70;
    while (1)
    {
      v127 = v28;
      v128 = (char *)a1;
      uint64_t v126 = v66;
      v121(v12, v116 + (void)v120 * v66, isUniquelyReferenced_nonNull_native);
      sub_100044014(&qword_1003F03E8);
      uint64_t v68 = *((void *)v8 + 9);
      unint64_t v69 = (v8[80] + 32) & ~(unint64_t)v8[80];
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v114;
      char v71 = v132;
      uint64_t isUniquelyReferenced_nonNull_native = v133;
      v132((char *)(v70 + v69), v119, v18);
      sub_100047474(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
      a3 = Set.init(minimumCapacity:)();
      uint64_t v72 = v123;
      v71(v123, v70 + v69, v18);
      uint64_t v73 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v8 + 7);
      v73(v72, 0, 1, v18);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v8 + 6))(v72, 1, v18) == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = v118;
        uint64_t v28 = v127;
        a1 = (unint64_t)v128;
      }
      else
      {
        v111 = v73;
        uint64_t v112 = v70;
        (*v109)((char *)v131, v72, v18);
        swift_bridgeObjectRetain();
        uint64_t v74 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v75 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v76 = v74 & ~v75;
        a1 = (unint64_t)v128;
        if ((*(void *)(a3 + 56 + ((v76 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v76))
        {
          uint64_t isUniquelyReferenced_nonNull_native = ~v75;
          uint64_t v28 = v127;
          while (1)
          {
            uint64_t v77 = v129;
            v132((char *)v129, *(void *)(a3 + 48) + v76 * v68, v18);
            sub_100047474(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
            ((void (*)(uint64_t, uint64_t))a1)(v77, v18);
            if (v78) {
              break;
            }
            unint64_t v76 = (v76 + 1) & isUniquelyReferenced_nonNull_native;
            if (((*(void *)(a3 + 56 + ((v76 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v76) & 1) == 0) {
              goto LABEL_32;
            }
          }
          swift_bridgeObjectRelease();
          int v82 = (char *)v131;
        }
        else
        {
          uint64_t v28 = v127;
LABEL_32:
          swift_bridgeObjectRelease();
          char v79 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v80 = v129;
          unint64_t v81 = (char *)v131;
          v132((char *)v129, (unint64_t)v131, v18);
          uint64_t v135 = a3;
          sub_1000258D0(v80, v76, v79);
          a3 = v135;
          swift_bridgeObjectRelease();
          int v82 = v81;
        }
        ((void (*)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t))a1)((void (*)(uint64_t, unint64_t, uint64_t))v82, v18);
        v111(v123, 1, 1, v18);
        swift_bridgeObjectRelease();
        uint64_t v12 = v118;
        uint64_t v8 = v110;
      }
      a2 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v135 = (uint64_t)v28;
      unint64_t Priority = sub_100025614((uint64_t)v12);
      uint64_t v84 = *((void *)v28 + 2);
      BOOL v85 = (v83 & 1) == 0;
      uint64_t v86 = v84 + v85;
      if (__OFADD__(v84, v85))
      {
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      char v87 = v83;
      if (*((void *)v28 + 3) >= v86)
      {
        if (a2)
        {
          uint64_t v28 = (char *)v135;
          if ((v83 & 1) == 0) {
            goto LABEL_42;
          }
        }
        else
        {
          sub_100127A44();
          uint64_t v28 = (char *)v135;
          if ((v87 & 1) == 0) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        sub_100025B8C(v86, a2);
        unint64_t v88 = sub_100025614((uint64_t)v12);
        if ((v87 & 1) != (v89 & 1))
        {
LABEL_57:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t Priority = v88;
        uint64_t v28 = (char *)v135;
        if ((v87 & 1) == 0)
        {
LABEL_42:
          *(void *)&v28[8 * (Priority >> 6) + 64] |= 1 << Priority;
          uint64_t isUniquelyReferenced_nonNull_native = v124;
          v121(*((void *)v28 + 6) + Priority * (void)v120, v12, v124);
          *(void *)(*((void *)v28 + 7) + 8 * Priority) = a3;
          uint64_t v90 = *((void *)v28 + 2);
          BOOL v64 = __OFADD__(v90, 1);
          uint64_t v91 = v90 + 1;
          if (v64) {
            goto LABEL_53;
          }
          *((void *)v28 + 2) = v91;
          goto LABEL_23;
        }
      }
      uint64_t v67 = *((void *)v28 + 7);
      swift_bridgeObjectRelease();
      *(void *)(v67 + 8 * Priority) = a3;
      uint64_t isUniquelyReferenced_nonNull_native = v124;
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v66 = v126 + 1;
      (*v113)(v12, isUniquelyReferenced_nonNull_native);
      if (v66 == v117)
      {
        uint64_t v92 = 0;
        uint64_t v93 = 0;
        uint64_t v94 = v107;
        uint64_t v95 = (uint64_t)v106;
        uint64_t v96 = (void (*)(uint64_t, unint64_t))v103;
LABEL_49:
        swift_bridgeObjectRelease();
        unint64_t Priority = v101;
        v104((char *)v95, v94, v101);
        goto LABEL_50;
      }
    }
  }
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v28 = (char *)_swiftEmptyDictionarySingleton;
  uint64_t v95 = (uint64_t)v106;
  uint64_t v96 = (void (*)(uint64_t, unint64_t))v103;
  v104(v106, v107, Priority);
LABEL_50:
  uint64_t v97 = v102;
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v134 = *v97;
  *uint64_t v97 = 0x8000000000000000;
  sub_100024314((uint64_t)v28, v92, v93, v95, v98);
  *uint64_t v97 = v134;
  swift_bridgeObjectRelease();
  v96(v95, Priority);
  swift_endAccess();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_100025614(uint64_t a1)
{
  type metadata accessor for Handle();
  sub_1000256E8(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100025730(a1, v2, (uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle, (uint64_t)&protocol conformance descriptor for Handle);
}

uint64_t sub_1000256E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100025730(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_1000256E8(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_1000258D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1001557E8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100156F44((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1003F0560);
      goto LABEL_12;
    }
    sub_100157728();
  }
  uint64_t v12 = *v3;
  sub_1000471EC(&qword_1003EE920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000471EC(&qword_1003EEC20, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100025B8C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Handle();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100044014(&qword_1003F0040);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_1001491BC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100025FB0()
{
  v169 = v0;
  uint64_t v1 = v0[57];
  uint64_t v2 = LocationRequest.toHandles.getter();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100292294(v2, v1);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v152 = v3[2];
  if (v152)
  {
    uint64_t v5 = v0[38];
    uint64_t v4 = v0[39];
    v148 = v3;
    uint64_t v6 = v0[35];
    uint64_t v7 = v0[36];
    uint64_t v8 = v0[29];
    LocationRequest.priority.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v5, enum case for LocatePriority.backgroundProactive(_:), v6);
    sub_100047474(&qword_1003F0050, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
    char v145 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v5, v6);
    uint64_t v10 = v4;
    uint64_t v11 = (char *)v148;
    v146 = v9;
    v9(v10, v6);
    uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
    v168[0] = (uint64_t)&_swiftEmptyArrayStorage;
    v160 = (uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    v150 = (uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v13 = swift_bridgeObjectRetain();
    unint64_t v21 = 0;
    while (v21 < *((void *)v11 + 2))
    {
      uint64_t v22 = *(void *)(v8 + 72);
      unint64_t v155 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v163 = *(void (**)(void, char *, void))(v8 + 16);
      v163(v0[34], &v11[v155 + v22 * v21], v0[28]);
      if (Friend.isSecureLocationCapable.getter())
      {
        unint64_t v23 = *v150;
        (*v150)((char *)v0[33], v0[34], v0[28]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003BD78(0, *((void *)v12 + 2) + 1, 1);
          uint64_t v12 = (char *)v168[0];
        }
        unint64_t v25 = *((void *)v12 + 2);
        unint64_t v24 = *((void *)v12 + 3);
        if (v25 >= v24 >> 1)
        {
          sub_10003BD78(v24 > 1, v25 + 1, 1);
          uint64_t v12 = (char *)v168[0];
        }
        uint64_t v26 = v0[33];
        uint64_t v27 = v0[28];
        *((void *)v12 + 2) = v25 + 1;
        uint64_t v13 = v23(&v12[v155 + v25 * v22], v26, v27);
        v168[0] = (uint64_t)v12;
        uint64_t v11 = (char *)v148;
      }
      else
      {
        uint64_t v13 = (*v160)(v0[34], v0[28]);
      }
      if (v152 == ++v21)
      {
        swift_bridgeObjectRelease();
        int64_t v28 = *((void *)v12 + 2);
        if (v28)
        {
          uint64_t v29 = v0[21];
          v168[0] = (uint64_t)&_swiftEmptyArrayStorage;
          sub_100020D44(0, v28, 0);
          uint64_t v30 = &v12[v155];
          uint64_t v31 = &_swiftEmptyArrayStorage;
          do
          {
            unint64_t v32 = v31;
            uint64_t v33 = v0[32];
            uint64_t v34 = v0[28];
            v163(v33, v30, v34);
            Friend.handle.getter();
            uint64_t v35 = v33;
            uint64_t v31 = v32;
            (*v160)(v35, v34);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100020D44(0, v32[2] + 1, 1);
              uint64_t v31 = (void *)v168[0];
            }
            unint64_t v37 = v31[2];
            unint64_t v36 = v31[3];
            if (v37 >= v36 >> 1)
            {
              sub_100020D44(v36 > 1, v37 + 1, 1);
              uint64_t v31 = (void *)v168[0];
            }
            uint64_t v38 = v0[27];
            uint64_t v39 = v0[20];
            v31[2] = v37 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v37, v38, v39);
            v168[0] = (uint64_t)v31;
            v30 += v22;
            --v28;
          }
          while (v28);
          uint64_t v13 = swift_release();
        }
        else
        {
          uint64_t v13 = swift_release();
          uint64_t v31 = &_swiftEmptyArrayStorage;
        }
        unint64_t v45 = 0;
        int v46 = (char *)&_swiftEmptyArrayStorage;
        v168[0] = (uint64_t)&_swiftEmptyArrayStorage;
        char v47 = (char *)v148 + v155;
        v147 = v31;
        do
        {
          if (v45 >= v148[2]) {
            goto LABEL_83;
          }
          v163(v0[31], v47, v0[28]);
          if (Friend.isLegacyLocationCapable.getter())
          {
            uint64_t v48 = *v150;
            (*v150)((char *)v0[30], v0[31], v0[28]);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_10003BD78(0, *((void *)v46 + 2) + 1, 1);
              int v46 = (char *)v168[0];
            }
            unint64_t v50 = *((void *)v46 + 2);
            unint64_t v49 = *((void *)v46 + 3);
            if (v50 >= v49 >> 1)
            {
              sub_10003BD78(v49 > 1, v50 + 1, 1);
              int v46 = (char *)v168[0];
            }
            uint64_t v51 = v0[30];
            uint64_t v52 = v0[28];
            *((void *)v46 + 2) = v50 + 1;
            uint64_t v13 = v48(&v46[v155 + v50 * v22], v51, v52);
            v168[0] = (uint64_t)v46;
          }
          else
          {
            uint64_t v13 = (*v160)(v0[31], v0[28]);
          }
          ++v45;
          v47 += v22;
        }
        while (v152 != v45);
        swift_bridgeObjectRelease();
        int64_t v53 = *((void *)v46 + 2);
        if (v53)
        {
          uint64_t v54 = v0[21];
          v168[0] = (uint64_t)&_swiftEmptyArrayStorage;
          sub_100020D44(0, v53, 0);
          uint64_t v55 = &v46[v155];
          unint64_t v56 = &_swiftEmptyArrayStorage;
          do
          {
            uint64_t v57 = v0[32];
            uint64_t v58 = v0[28];
            v163(v57, v55, v58);
            Friend.handle.getter();
            (*v160)(v57, v58);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100020D44(0, v56[2] + 1, 1);
              unint64_t v56 = (void *)v168[0];
            }
            unint64_t v60 = v56[2];
            unint64_t v59 = v56[3];
            if (v60 >= v59 >> 1)
            {
              sub_100020D44(v59 > 1, v60 + 1, 1);
              unint64_t v56 = (void *)v168[0];
            }
            uint64_t v61 = v0[26];
            uint64_t v62 = v0[20];
            v56[2] = v60 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v54 + 32))((unint64_t)v56+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v60, v61, v62);
            v168[0] = (uint64_t)v56;
            v55 += v22;
            --v53;
          }
          while (v53);
          swift_release();
        }
        else
        {
          swift_release();
          unint64_t v56 = &_swiftEmptyArrayStorage;
        }
        LocationRequest.priority.getter();
        LocationRequest.origin.getter();
        if ((v145 & 1) == 0) {
          swift_bridgeObjectRetain();
        }
        v156 = (void (*)(uint64_t, uint64_t, uint64_t))v0[47];
        uint64_t v63 = v0[39];
        uint64_t v151 = v0[42];
        uint64_t v153 = v0[40];
        uint64_t v64 = v0[35];
        uint64_t v65 = v0[17];
        uint64_t v66 = v0[10];
        LocationRequest.priority.getter();
        LocatePriority.reason.getter();
        v146(v63, v64);
        uint64_t refreshed = type metadata accessor for LegacyRefreshCommandReason();
        uint64_t v68 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(refreshed - 8) + 56);
        v68(v65, 0, 1, refreshed);
        LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)();
        LocationRequest.priority.getter();
        LocationRequest.origin.getter();
        v68(v65, 1, 1, refreshed);
        swift_bridgeObjectRetain();
        LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)();
        v156(v151, v66, v153);
        unint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        BOOL v71 = os_log_type_enabled(v69, v70);
        uint64_t v72 = v0[42];
        if (v71)
        {
          uint64_t v73 = v0[39];
          uint64_t v74 = v0[35];
          os_log_type_t v165 = v70;
          uint64_t v154 = v0[40];
          v157 = (void (*)(uint64_t, uint64_t))v0[49];
          uint64_t v75 = (uint8_t *)swift_slowAlloc();
          v168[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v75 = 136446210;
          LocationRequest.priority.getter();
          sub_100047474(&qword_1003F3330, (void (*)(uint64_t))&type metadata accessor for LocatePriority);
          uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v78 = v77;
          v146(v73, v74);
          v0[7] = sub_100037004(v76, v78, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v157(v72, v154);
          _os_log_impl((void *)&_mh_execute_header, v69, v165, "LocationService: Start Refresh Location with priority: %{public}s for", v75, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          ((void (*)(void, void))v0[49])(v0[42], v0[40]);
        }

        swift_bridgeObjectRetain();
        char v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v80))
        {
          unint64_t v81 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v81 = 134217984;
          uint64_t v82 = v147[2];
          swift_bridgeObjectRelease();
          v0[6] = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "LocationService: validSecureLocationHandles count: %ld", v81, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        swift_bridgeObjectRetain();
        char v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v83, v84))
        {
          BOOL v85 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)BOOL v85 = 134217984;
          uint64_t v86 = v56[2];
          swift_bridgeObjectRelease();
          v0[5] = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "LocationService: legacyRefreshHandles count: %ld", v85, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v87 = LocationRequest.toHandles.getter();
        uint64_t v88 = *(void *)(v87 + 16);
        char v89 = &unk_100368000;
        if (v88)
        {
          uint64_t v90 = v0[21];
          uint64_t v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(v90 + 16);
          v90 += 16;
          v166 = v91;
          unint64_t v92 = v87 + ((*(unsigned __int8 *)(v90 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 64));
          uint64_t v158 = *(void *)(v90 + 56);
          swift_bridgeObjectRetain();
          v161 = (void (**)(uint64_t, uint64_t))(v90 - 8);
          do
          {
            uint64_t v95 = v0[24];
            unint64_t v94 = v0[25];
            uint64_t v96 = v0[20];
            v166(v94, v92, v96);
            v166(v95, v94, v96);
            uint64_t v97 = Logger.logObject.getter();
            os_log_type_t v98 = static os_log_type_t.default.getter();
            BOOL v99 = os_log_type_enabled(v97, v98);
            uint64_t v100 = v0[24];
            uint64_t v101 = v0[20];
            if (v99)
            {
              uint64_t v102 = swift_slowAlloc();
              v168[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v102 = 141558275;
              *(void *)(v102 + 4) = 1752392040;
              *(_WORD *)(v102 + 12) = 2081;
              sub_100047474(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
              uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v102 + 14) = sub_100037004(v103, v104, v168);
              swift_bridgeObjectRelease();
              uint64_t v93 = *v161;
              (*v161)(v100, v101);
              _os_log_impl((void *)&_mh_execute_header, v97, v98, "LocationService: legacy location Request for: %{private,mask.hash}s", (uint8_t *)v102, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              uint64_t v93 = *v161;
              (*v161)(v0[24], v0[20]);
            }

            v93(v0[25], v0[20]);
            v92 += v158;
            --v88;
          }
          while (v88);
          swift_bridgeObjectRelease_n();
          char v89 = (void *)&unk_100368000;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v105 = LocationRequest.toHandles.getter();
        uint64_t v106 = *(void *)(v105 + 16);
        if (v106)
        {
          uint64_t v107 = v0[21];
          uint64_t v108 = *(void (**)(uint64_t, unint64_t, uint64_t))(v107 + 16);
          v107 += 16;
          v167 = v108;
          unint64_t v109 = v105 + ((*(unsigned __int8 *)(v107 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 64));
          uint64_t v159 = *(void *)(v107 + 56);
          swift_bridgeObjectRetain();
          int v149 = v89[63];
          v162 = (void (**)(uint64_t, uint64_t))(v107 - 8);
          do
          {
            uint64_t v112 = v0[22];
            unint64_t v111 = v0[23];
            uint64_t v113 = v0[20];
            v167(v111, v109, v113);
            v167(v112, v111, v113);
            long long v114 = Logger.logObject.getter();
            os_log_type_t v115 = static os_log_type_t.default.getter();
            BOOL v116 = os_log_type_enabled(v114, v115);
            uint64_t v117 = v0[22];
            uint64_t v118 = v0[20];
            if (v116)
            {
              uint64_t v119 = swift_slowAlloc();
              v168[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v119 = v149;
              *(void *)(v119 + 4) = 1752392040;
              *(_WORD *)(v119 + 12) = 2081;
              sub_100047474(&qword_1003F00F0, (void (*)(uint64_t))&type metadata accessor for Handle);
              uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v119 + 14) = sub_100037004(v120, v121, v168);
              swift_bridgeObjectRelease();
              uint64_t v110 = *v162;
              (*v162)(v117, v118);
              _os_log_impl((void *)&_mh_execute_header, v114, v115, "LocationService: secure location Request for: %{private,mask.hash}s", (uint8_t *)v119, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              uint64_t v110 = *v162;
              (*v162)(v0[22], v0[20]);
            }

            v110(v0[23], v0[20]);
            v109 += v159;
            --v106;
          }
          while (v106);
          swift_bridgeObjectRelease_n();
          if (v145) {
            goto LABEL_79;
          }
LABEL_73:
          type metadata accessor for Transaction();
          uint64_t v122 = static Transaction.currentNSXPCConnection.getter();
          uint64_t v123 = v0[14];
          uint64_t v124 = v0[15];
          uint64_t v125 = v0[13];
          if (v122)
          {
            uint64_t v126 = (void *)v122;
            NSXPCConnection.id.getter();

            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v124 + 56))(v125, 0, 1, v123);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v125, 1, v123) != 1)
            {
              (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[13], v0[14]);
              goto LABEL_78;
            }
          }
          else
          {
            (*(void (**)(void, uint64_t, uint64_t, void))(v124 + 56))(v0[13], 1, 1, v0[14]);
          }
          uint64_t v127 = v0[13];
          type metadata accessor for LocationService();
          sub_100047474(&qword_1003F3140, (void (*)(uint64_t))type metadata accessor for LocationService);
          CustomStringConvertible<>.addressDescription.getter();
          uint64_t v128 = String.utf8Data.getter();
          unint64_t v130 = v129;
          swift_bridgeObjectRelease();
          v0[2] = v128;
          v0[3] = v130;
          sub_10004F4EC();
          DataProtocol.stableUUID.getter();
          sub_100044090(v128, v130);
          sub_10000A520(v127, &qword_1003ECFB8);
LABEL_78:
          uint64_t v131 = v0[39];
          uint64_t v132 = v0[35];
          uint64_t v134 = v0[15];
          unint64_t v133 = v0[16];
          uint64_t v135 = v0[14];
          unint64_t v136 = LocationRequest.toHandles.getter();
          LocationRequest.priority.getter();
          sub_1000245B4(v133, v136, v131);
          swift_bridgeObjectRelease();
          v146(v131, v132);
          (*(void (**)(unint64_t, uint64_t))(v134 + 8))(v133, v135);
        }
        else
        {
          swift_bridgeObjectRelease();
          if ((v145 & 1) == 0) {
            goto LABEL_73;
          }
        }
LABEL_79:
        uint64_t v138 = v0[43];
        uint64_t v137 = v0[44];
        uint64_t v139 = v0[11];
        uint64_t v140 = v0[12];
        uint64_t v141 = sub_100044014(&qword_1003F03F8);
        uint64_t v142 = sub_100047474(qword_1003F3148, (void (*)(uint64_t))type metadata accessor for LocationService);
        v143 = (void *)swift_task_alloc();
        v0[58] = v143;
        v143[2] = v137;
        v143[3] = v139;
        v143[4] = v138;
        v143[5] = v140;
        v144 = (void *)swift_task_alloc();
        v0[59] = v144;
        void *v144 = v0;
        v144[1] = sub_10028D52C;
        uint64_t v171 = v141;
        uint64_t v18 = &unk_1003F35B0;
        uint64_t v13 = (uint64_t)(v0 + 4);
        uint64_t v14 = v141;
        uint64_t v15 = v141;
        uint64_t v16 = v139;
        uint64_t v17 = v142;
        char v19 = v143;
        uint64_t v20 = v141;
        return withTaskGroup<A, B>(of:returning:isolation:body:)(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    __break(1u);
LABEL_83:
    __break(1u);
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Start Refresh Location with empty handles", v42, 2u);
      swift_slowDealloc();
    }

    unint64_t v164 = sub_10004B2F8((uint64_t)&_swiftEmptyArrayStorage);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = (uint64_t (*)(unint64_t))v0[1];
    return v43(v164);
  }
}

uint64_t destroy for ServerDevice()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

double sub_1000274EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100027548(a1, v10);
  if (!v2)
  {
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    long long v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    long long v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_100027548@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE520);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v88 = a1;
  sub_100042524(a1, v9);
  sub_100027C70();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v88);
  }
  uint64_t v10 = v6;
  uint64_t v57 = a2;
  LOBYTE(v69[0]) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  LOBYTE(v69[0]) = 1;
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  LOBYTE(v69[0]) = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  LOBYTE(v69[0]) = 3;
  uint64_t v56 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v69[0]) = 4;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  int v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v58 = v19;
  LODWORD(v55) = v20;
  LOBYTE(v69[0]) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  LOBYTE(v69[0]) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v24 = v23;
  LOBYTE(v69[0]) = 7;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v25;
  LOBYTE(v69[0]) = 8;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v27;
  LOBYTE(v69[0]) = 9;
  uint64_t v54 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v69[0]) = 10;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v30 = v29;
  LOBYTE(v69[0]) = 11;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v32 = v31;
  LOBYTE(v69[0]) = 12;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v53 = v33;
  LOBYTE(v69[0]) = 13;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v52 = v34;
  LOBYTE(v69[0]) = 14;
  uint64_t v51 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v36 = v35;
  LOBYTE(v69[0]) = 15;
  swift_bridgeObjectRetain();
  uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_100044014(&qword_1003EE510);
  char v85 = 16;
  sub_1000C2CE0(&qword_1003EE528);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v37 = v55 & 1;
  HIDWORD(v49) = v55 & 1;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  uint64_t v55 = v86;
  *(void *)&long long v59 = v12;
  *((void *)&v59 + 1) = v13;
  *(void *)&long long v60 = v15;
  *((void *)&v60 + 1) = v17;
  uint64_t v38 = v56;
  uint64_t v39 = v58;
  *(void *)&long long v61 = v56;
  *((void *)&v61 + 1) = v58;
  LOBYTE(v62) = v37;
  *((void *)&v62 + 1) = v22;
  *(void *)&long long v63 = v24;
  *((void *)&v63 + 1) = v26;
  *(void *)&long long v64 = v28;
  uint64_t v40 = v54;
  *((void *)&v64 + 1) = v54;
  *(void *)&long long v65 = v30;
  *((void *)&v65 + 1) = v32;
  *(void *)&long long v66 = v53;
  *((void *)&v66 + 1) = v52;
  uint64_t v41 = v51;
  *(void *)&long long v67 = v51;
  *((void *)&v67 + 1) = v36;
  *(void *)&long long v68 = v50;
  *((void *)&v68 + 1) = v86;
  sub_1000C2D44((uint64_t)&v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000233E4((uint64_t)v88);
  v69[0] = v12;
  v69[1] = v13;
  v69[2] = v15;
  v69[3] = v17;
  v69[4] = v38;
  v69[5] = v39;
  char v70 = BYTE4(v49);
  *(_DWORD *)BOOL v71 = v87[0];
  *(_DWORD *)&v71[3] = *(_DWORD *)((char *)v87 + 3);
  uint64_t v72 = v22;
  uint64_t v73 = v24;
  uint64_t v74 = v26;
  uint64_t v75 = v28;
  uint64_t v76 = v40;
  uint64_t v77 = v30;
  uint64_t v78 = v32;
  uint64_t v79 = v53;
  uint64_t v80 = v52;
  uint64_t v81 = v41;
  uint64_t v82 = v36;
  uint64_t v83 = v50;
  uint64_t v84 = v55;
  uint64_t result = sub_1000C2D9C((uint64_t)v69);
  long long v43 = v66;
  unint64_t v44 = v57;
  v57[6] = v65;
  v44[7] = v43;
  long long v45 = v68;
  v44[8] = v67;
  v44[9] = v45;
  long long v46 = v62;
  v44[2] = v61;
  v44[3] = v46;
  long long v47 = v64;
  v44[4] = v63;
  v44[5] = v47;
  long long v48 = v60;
  *unint64_t v44 = v59;
  v44[1] = v48;
  return result;
}

unint64_t sub_100027C70()
{
  unint64_t result = qword_1003EE508;
  if (!qword_1003EE508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE508);
  }
  return result;
}

uint64_t destroy for ServerFriend()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerDevice(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100027D90()
{
  uint64_t v27 = v0;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  sub_100028734(v2, v1);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[20];
  if (v6)
  {
    uint64_t v8 = v0[19];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_100028734(v7, v8);
    uint64_t v10 = String.init<A>(describing:)();
    v0[2] = sub_100037004(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002814C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002814C(v0[20]);
  }

  uint64_t v12 = v0[24];
  uint64_t v14 = v0[10];
  uint64_t v13 = (void *)v0[11];
  uint64_t v15 = v0[9];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v13 = sub_1000CA550;
  v13[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v13, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v15);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_100004BBC(&qword_1003EDD18, (void (*)(uint64_t))type metadata accessor for LegacyLocationServerRequestContext);
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v18 = v17;
  swift_release();
  if (v12)
  {
    swift_errorRelease();
    uint64_t v16 = 0;
    unint64_t v18 = 0xF000000000000000;
  }
  uint64_t v19 = v0[21];
  uint64_t v20 = v0[13];
  uint64_t v21 = v0[12];
  uint64_t v22 = v0[3];
  (*(void (**)(void, void))(v0[16] + 8))(v0[4], v0[15]);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  sub_10002814C(v19);
  sub_1000287E4(v16, v18);
  sub_1000440E8(0, 0xF000000000000000);
  swift_bridgeObjectRetain();
  sub_1000287E4(v16, v18);
  sub_1000440E8(v16, v18);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v24 = v0[22];
  return v23(v24, v16, v18);
}

uint64_t sub_10002814C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyLocationServerRequestContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000281A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100028358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v75 = v15 + v23;
  uint64_t v77 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73(v77, v75, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v79 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v79;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v78 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v78;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  char v37 = (void *)(v15 + v35);
  uint64_t v76 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v76;
  uint64_t v38 = v22[19];
  uint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v74 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v74;
  uint64_t v41 = v22[20];
  unint64_t v42 = (void *)(v14 + v41);
  long long v43 = (void *)(v15 + v41);
  uint64_t v72 = v43[1];
  void *v42 = *v43;
  v42[1] = v72;
  uint64_t v44 = v22[21];
  long long v45 = (void *)(v14 + v44);
  long long v46 = (void *)(v15 + v44);
  uint64_t v47 = v46[1];
  *long long v45 = *v46;
  v45[1] = v47;
  uint64_t v48 = v22[22];
  uint64_t v49 = (void *)(v14 + v48);
  uint64_t v50 = (void *)(v15 + v48);
  uint64_t v51 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v51;
  uint64_t v52 = v22[23];
  uint64_t v53 = (void *)(v14 + v52);
  uint64_t v54 = (void *)(v15 + v52);
  uint64_t v55 = v54[1];
  void *v53 = *v54;
  v53[1] = v55;
  uint64_t v56 = v22[24];
  uint64_t v57 = v14 + v56;
  uint64_t v58 = v15 + v56;
  *(void *)uint64_t v57 = *(void *)v58;
  *(unsigned char *)(v57 + 8) = *(unsigned char *)(v58 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v59 = v22[27];
  long long v60 = (void *)(v14 + v59);
  long long v61 = (void *)(v15 + v59);
  uint64_t v62 = v61[1];
  *long long v60 = *v61;
  v60[1] = v62;
  uint64_t v63 = v22[28];
  long long v64 = (void *)(v14 + v63);
  long long v65 = (void *)(v15 + v63);
  uint64_t v66 = v65[1];
  *long long v64 = *v65;
  v64[1] = v66;
  uint64_t v67 = v22[29];
  long long v68 = (void *)(v14 + v67);
  unint64_t v69 = (void *)(v15 + v67);
  uint64_t v70 = v69[1];
  *long long v68 = *v69;
  v68[1] = v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for ClientContext()
{
  uint64_t result = qword_1003EDF58;
  if (!qword_1003EDF58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100028734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyLocationServerRequestContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LegacyLocationServerRequestContext()
{
  uint64_t result = qword_1003EDD78;
  if (!qword_1003EDD78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000287E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100022C64(a1, a2);
  }
  return a1;
}

uint64_t sub_1000287F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Device();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100017ACC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    long long v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100028994((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100028994(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000471EC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000471EC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100028CB8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100028CB8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Device();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100155FE0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100156F44((uint64_t (*)(void))&type metadata accessor for Device, &qword_1003F0520);
      goto LABEL_12;
    }
    sub_100157E88();
  }
  uint64_t v12 = *v3;
  sub_1000471EC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000471EC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100028F78()
{
  _StringGuts.grow(_:)(564);
  v1._object = (void *)0x8000000100374240;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  Double.write<A>(to:)();
  v2._countAndFlagsBits = 0x6C6C6F4678616D20;
  v2._object = (void *)0xEF203A737265776FLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000100374260;
  v4._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v4);
  if (v0[16]) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (v0[16]) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  v8._object = (void *)0x8000000100374280;
  String.append(_:)(v8);
  Double.write<A>(to:)();
  v9._countAndFlagsBits = 0x6569724678616D20;
  v9._object = (void *)0xED0000203A73646ELL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD000000000000021;
  v11._object = (void *)0x80000001003742A0;
  String.append(_:)(v11);
  Double.write<A>(to:)();
  v12._countAndFlagsBits = 0xD000000000000017;
  v12._object = (void *)0x80000001003742D0;
  String.append(_:)(v12);
  Double.write<A>(to:)();
  v13._countAndFlagsBits = 0xD000000000000020;
  v13._object = (void *)0x80000001003742F0;
  String.append(_:)(v13);
  if (v0[56]) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v0[56]) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100374320;
  v17._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  Double.write<A>(to:)();
  v18._countAndFlagsBits = 0xD00000000000001FLL;
  v18._object = (void *)0x8000000100374340;
  String.append(_:)(v18);
  Double.write<A>(to:)();
  v19._object = (void *)0x8000000100374360;
  v19._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v19);
  Double.write<A>(to:)();
  v20._object = (void *)0x8000000100374380;
  v20._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v20);
  Double.write<A>(to:)();
  v21._countAndFlagsBits = 0xD000000000000012;
  v21._object = (void *)0x80000001003743A0;
  String.append(_:)(v21);
  if (v0[96]) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v0[96]) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0xD000000000000019;
  v25._object = (void *)0x80000001003743C0;
  String.append(_:)(v25);
  if (v0[97]) {
    uint64_t v26 = 1702195828;
  }
  else {
    uint64_t v26 = 0x65736C6166;
  }
  if (v0[97]) {
    unint64_t v27 = 0xE400000000000000;
  }
  else {
    unint64_t v27 = 0xE500000000000000;
  }
  unint64_t v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000022;
  v29._object = (void *)0x80000001003743E0;
  String.append(_:)(v29);
  if (v0[98]) {
    uint64_t v30 = 1702195828;
  }
  else {
    uint64_t v30 = 0x65736C6166;
  }
  if (v0[98]) {
    unint64_t v31 = 0xE400000000000000;
  }
  else {
    unint64_t v31 = 0xE500000000000000;
  }
  unint64_t v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x6F697461636F6C20;
  v33._object = (void *)0xEE00203A4C54546ELL;
  String.append(_:)(v33);
  Double.write<A>(to:)();
  v34._object = (void *)0x8000000100374410;
  v34._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v34);
  v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._object = (void *)0x8000000100374430;
  v36._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v36);
  Double.write<A>(to:)();
  v37._object = (void *)0x8000000100374450;
  v37._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v37);
  if (v0[128]) {
    uint64_t v38 = 1702195828;
  }
  else {
    uint64_t v38 = 0x65736C6166;
  }
  if (v0[128]) {
    unint64_t v39 = 0xE400000000000000;
  }
  else {
    unint64_t v39 = 0xE500000000000000;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0xD000000000000011;
  v41._object = (void *)0x8000000100374480;
  String.append(_:)(v41);
  Double.write<A>(to:)();
  v42._countAndFlagsBits = 0xD000000000000025;
  v42._object = (void *)0x80000001003744A0;
  String.append(_:)(v42);
  if (v0[99]) {
    uint64_t v43 = 1702195828;
  }
  else {
    uint64_t v43 = 0x65736C6166;
  }
  if (v0[99]) {
    unint64_t v44 = 0xE400000000000000;
  }
  else {
    unint64_t v44 = 0xE500000000000000;
  }
  unint64_t v45 = v44;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100029588()
{
  uint64_t v13 = v0;
  if (*(unsigned char *)(v0 + 200))
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_10040C290);
    Swift::String v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_15;
    }
    Swift::String v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)Swift::String v4 = 136446210;
    *(void *)(v0 + 64) = sub_100037004(0xD00000000000001DLL, 0x8000000100378D40, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Not %{public}s to server since no clients connected", v4, 0xCu);
    swift_arrayDestroy();
LABEL_14:
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_15:
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10(0);
  }
  uint64_t v5 = *(void *)(sub_1000298F0() + 16);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    if (qword_1003EC408 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040C290);
    Swift::String v2 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v2, v8)) {
      goto LABEL_15;
    }
    Swift::String v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)Swift::String v9 = 136446210;
    *(void *)(v0 + 56) = sub_100037004(0xD00000000000001DLL, 0x8000000100378D40, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v8, "Not %{public}s to server since no client is interested legacy refresh", v9, 0xCu);
    swift_arrayDestroy();
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(v0 + 152);
  return _swift_task_switch(sub_100011AF0, v6, 0);
}

uint64_t sub_1000298F0()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13findmylocated15LocationService_legacyLocationSubscriptions);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v7) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_23;
      }
      uint64_t v12 = *(void *)(v3 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v3 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_23;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v9);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v6 = (v12 - 1) & v12;
LABEL_5:
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t result = sub_10002ACA0(v10);
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_23:
    swift_release();
    uint64_t v14 = sub_10002A39C((uint64_t)&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v9 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100029AA8()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 1240);
  uint64_t v2 = *(void *)(v0 + 1232);
  uint64_t v3 = *(void *)(v0 + 1224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B4B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      int64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to make Location Request!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100085350();
    swift_allocError();
    *os_log_type_t v8 = 1;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 1304);
    uint64_t v55 = *(void *)(v0 + 1296);
    uint64_t v52 = *(void *)(v0 + 1216);
    uint64_t v12 = *(void *)(v0 + 1208);
    uint64_t v53 = *(void *)(v0 + 1200);
    uint64_t v54 = *(void *)(v0 + 1192);
    uint64_t v13 = *(void *)(v0 + 1176);
    uint64_t v57 = *(void *)(v0 + 1184);
    uint64_t v59 = *(void *)(v0 + 1168);
    uint64_t v14 = *(void *)(v0 + 928);
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 1264), v3, v2);
    uint64_t v15 = OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
    *(void *)(v0 + 1632) = OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
    uint64_t v16 = v14 + v15;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v52, v16, v53);
    uint64_t v17 = swift_bridgeObjectRetain();
    sub_10002A39C(v17);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v54, 1, 1, v55);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v57, enum case for ClientOrigin.other(_:), v59);
    RequestOrigin.init(_:)();
    LocationRequest.init(priority:origin:toHandles:reason:startRefreshingLocation:isCached:)();
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v18 = *(void *)(v0 + 1352);
    uint64_t v19 = *(void *)(v0 + 1344);
    uint64_t v20 = *(void *)(v0 + 1328);
    uint64_t v21 = *(void *)(v0 + 1320);
    uint64_t v22 = type metadata accessor for Logger();
    *(void *)(v0 + 1640) = sub_100044058(v22, (uint64_t)qword_10040B4B8);
    long long v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v60(v19, v18, v21);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 1344);
    uint64_t v27 = *(void *)(v0 + 1328);
    uint64_t v28 = *(void *)(v0 + 1320);
    if (v25)
    {
      uint64_t v29 = swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136446723;
      *(void *)(v0 + 880) = sub_100037004(0xD00000000000002FLL, 0x8000000100373C10, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2160;
      *(void *)(v0 + 888) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2081;
      sub_100046FF4(&qword_1003ED020, (void (*)(uint64_t))&type metadata accessor for LocationRequest);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 896) = sub_100037004(v30, v31, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v32(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "CommandManager %{public}s request: %{private,mask.hash}s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v32(*(void *)(v0 + 1344), *(void *)(v0 + 1320));
    }

    *(void *)(v0 + 1648) = v32;
    uint64_t v33 = *(void *)(v0 + 1352);
    uint64_t v56 = *(void *)(v0 + 1336);
    uint64_t v58 = *(void *)(v0 + 1320);
    uint64_t v34 = *(void *)(v0 + 1264);
    uint64_t v35 = *(void *)(v0 + 1256);
    uint64_t v36 = *(void *)(v0 + 1248);
    uint64_t v37 = *(void *)(v0 + 1232);
    uint64_t v38 = *(void *)(v0 + 1160);
    unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1240) + 16);
    v39(v35, v34, v37);
    char v40 = LocationRequest.shallowLocatesOnly.getter();
    sub_100014250(v35, (v40 & 1) == 0, v38);
    v39(v36, v34, v37);
    v60(v56, v33, v58);
    swift_bridgeObjectRetain();
    uint64_t v41 = swift_bridgeObjectRetain();
    Swift::String v42 = sub_10002A39C(v41);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1656) = *(void *)(v0 + 840);
    uint64_t v43 = swift_bridgeObjectRetain();
    unint64_t v44 = sub_10000C950(v43);
    swift_bridgeObjectRelease();
    long long v61 = (char *)&dword_1003EDD08 + dword_1003EDD08;
    unint64_t v45 = (void *)swift_task_alloc();
    *(void *)(v0 + 1664) = v45;
    *unint64_t v45 = v0;
    v45[1] = sub_10004DE0C;
    uint64_t v46 = *(void *)(v0 + 1576);
    uint64_t v47 = *(void *)(v0 + 1336);
    uint64_t v48 = *(void *)(v0 + 920);
    uint64_t v49 = *(void *)(v0 + 912);
    uint64_t v50 = *(unsigned __int8 *)(v0 + 1780);
    uint64_t v51 = *(void *)(v0 + 1248);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, void *))v61)(v51, v47, v50, v49, v48, v46, v42, v44);
  }
}

char *sub_10002A39C(uint64_t a1)
{
  return sub_10003F01C(a1, &qword_1003F03F0, (uint64_t (*)(void))&type metadata accessor for Handle, (uint64_t (*)(void))&type metadata accessor for Handle);
}

uint64_t sub_10002A3C0()
{
  uint64_t v95 = v0;
  uint64_t v1 = v0[195];
  v94[0] = (Swift::Int)_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = v0[179];
    uint64_t v93 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v5 = (char *)_swiftEmptyArrayStorage;
    uint64_t v90 = v1;
    uint64_t v87 = *(void *)(v1 + 16);
    while (v3 < *(void *)(v1 + 16))
    {
      unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v7 = *(void *)(v4 + 72);
      (*(void (**)(void, unint64_t, void))(v4 + 16))(v86[184], v86[195] + v6 + v7 * v3, v86[178]);
      if (Friend.isLegacyLocationCapable.getter())
      {
        os_log_type_t v8 = *v93;
        (*v93)((char *)v86[183], v86[184], v86[178]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003BD78(0, *((void *)v5 + 2) + 1, 1);
          uint64_t v5 = (char *)v94[0];
        }
        unint64_t v10 = *((void *)v5 + 2);
        unint64_t v9 = *((void *)v5 + 3);
        if (v10 >= v9 >> 1)
        {
          sub_10003BD78(v9 > 1, v10 + 1, 1);
          uint64_t v5 = (char *)v94[0];
        }
        uint64_t v11 = v86[183];
        uint64_t v12 = v86[178];
        *((void *)v5 + 2) = v10 + 1;
        v8(&v5[v6 + v10 * v7], v11, v12);
        v94[0] = (Swift::Int)v5;
        uint64_t v2 = v87;
        uint64_t v1 = v90;
      }
      else
      {
        (*(void (**)(void, void))(v4 + 8))(v86[184], v86[178]);
      }
      if (v2 == ++v3)
      {
        uint64_t v0 = v86;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v5 = (char *)_swiftEmptyArrayStorage;
LABEL_14:
  swift_bridgeObjectRelease();
  int64_t v13 = *((void *)v5 + 2);
  if (v13)
  {
    uint64_t v14 = v0[179];
    uint64_t v15 = v0[172];
    v94[0] = (Swift::Int)_swiftEmptyArrayStorage;
    sub_100020D44(0, v13, 0);
    uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
    v14 += 16;
    uint64_t v17 = &v5[(*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64)];
    uint64_t v88 = *(void *)(v14 + 56);
    uint64_t v91 = v16;
    uint64_t v18 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    uint64_t v19 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v20 = v19;
      uint64_t v21 = v0[182];
      uint64_t v22 = v0[178];
      v91(v21, v17, v22);
      Friend.handle.getter();
      uint64_t v23 = v21;
      uint64_t v19 = v20;
      (*v18)(v23, v22);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100020D44(0, v20[2] + 1, 1);
        uint64_t v19 = (void *)v94[0];
      }
      unint64_t v25 = v19[2];
      unint64_t v24 = v19[3];
      if (v25 >= v24 >> 1)
      {
        sub_100020D44(v24 > 1, v25 + 1, 1);
        uint64_t v19 = (void *)v94[0];
      }
      uint64_t v0 = v86;
      uint64_t v26 = v86[177];
      uint64_t v27 = v86[171];
      v19[2] = v25 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v25, v26, v27);
      v94[0] = (Swift::Int)v19;
      v17 += v88;
      --v13;
    }
    while (v13);
  }
  swift_release();
  uint64_t v28 = *(void *)(v0[116] + v0[192]);
  uint64_t v78 = *(void *)(v28 + 16);
  if (v78)
  {
    uint64_t v29 = v0[166];
    uint64_t v76 = v28 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    uint64_t v75 = (void (**)(uint64_t, uint64_t))(v0[163] + 8);
    uint64_t v71 = v0[172];
    char v89 = (void (**)(uint64_t, uint64_t))(v71 + 8);
    uint64_t v77 = v29;
    uint64_t v73 = (void (**)(uint64_t, uint64_t))(v29 + 8);
    uint64_t v74 = (void (**)(uint64_t, uint64_t))(v0[160] + 8);
    swift_bridgeObjectRetain();
    unint64_t v30 = 0;
    unint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v84 = &_swiftEmptySetSingleton;
    uint64_t v72 = v28;
    while (v30 < *(void *)(v28 + 16))
    {
      (*(void (**)(void, unint64_t, void))(v77 + 16))(v0[170], v76 + *(void *)(v77 + 72) * v30, v0[165]);
      uint64_t v39 = *(void *)(LocationRequest.toHandles.getter() + 16);
      swift_bridgeObjectRelease();
      if (v39) {
        uint64_t v40 = LocationRequest.toHandles.getter();
      }
      else {
        uint64_t v40 = swift_bridgeObjectRetain();
      }
      uint64_t v81 = v40;
      uint64_t v41 = v0[164];
      uint64_t v42 = v0[162];
      LocationRequest.refreshReason.getter();
      uint64_t refreshed = LegacyRefreshCommandReason.reason.getter();
      uint64_t v45 = v44;
      (*v75)(v41, v42);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v31 = sub_10004AFDC(0, v31[2] + 1, 1, v31);
      }
      unint64_t v47 = v31[2];
      unint64_t v46 = v31[3];
      if (v47 >= v46 >> 1) {
        unint64_t v31 = sub_10004AFDC((void *)(v46 > 1), v47 + 1, 1, v31);
      }
      v31[2] = v47 + 1;
      uint64_t v48 = &v31[2 * v47];
      v48[4] = refreshed;
      v48[5] = v45;
      uint64_t v83 = *(void *)(v81 + 16);
      if (v83)
      {
        unint64_t v79 = v30;
        uint64_t v80 = v31;
        uint64_t v49 = 0;
        unint64_t v82 = v81 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
        uint64_t v92 = *(void *)(v71 + 72);
        uint64_t v50 = *(void (**)(void, unint64_t, void))(v71 + 16);
        uint64_t v51 = v84;
        do
        {
          uint64_t v85 = v49;
          v50(v0[176], v82 + v49 * v92, v0[171]);
          sub_100046FF4(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
          swift_bridgeObjectRetain();
          uint64_t v56 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v57 = -1 << *((unsigned char *)v51 + 32);
          unint64_t v58 = v56 & ~v57;
          uint64_t v59 = v51 + 7;
          if ((*(void *)((char *)v51 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v58))
          {
            uint64_t v60 = ~v57;
            while (1)
            {
              uint64_t v61 = v0[175];
              uint64_t v62 = v0[171];
              uint64_t v63 = v51;
              v50(v61, v51[6] + v58 * v92, v62);
              sub_100046FF4(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
              char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
              long long v65 = *v89;
              (*v89)(v61, v62);
              if (v64) {
                break;
              }
              unint64_t v58 = (v58 + 1) & v60;
              uint64_t v0 = v86;
              uint64_t v51 = v63;
              if (((*(void *)((char *)v59 + ((v58 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v58) & 1) == 0) {
                goto LABEL_35;
              }
            }
            uint64_t v0 = v86;
            uint64_t v66 = v86[176];
            uint64_t v67 = v86[171];
            swift_bridgeObjectRelease();
            v65(v66, v67);
            uint64_t v51 = v63;
          }
          else
          {
LABEL_35:
            unint64_t v52 = v0[176];
            uint64_t v53 = v0[175];
            uint64_t v54 = v0[171];
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v50(v53, v52, v54);
            v94[0] = (Swift::Int)v51;
            sub_10002B27C(v53, v58, isUniquelyReferenced_nonNull_native);
            uint64_t v51 = (void *)v94[0];
            swift_bridgeObjectRelease();
            (*v89)(v52, v54);
          }
          uint64_t v49 = v85 + 1;
        }
        while (v85 + 1 != v83);
        uint64_t v84 = v51;
        swift_bridgeObjectRelease();
        uint64_t v28 = v72;
        unint64_t v30 = v79;
        unint64_t v31 = v80;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v30;
      uint64_t v32 = v0[170];
      uint64_t v33 = v0[165];
      uint64_t v34 = v0[161];
      uint64_t v35 = v0[159];
      LocationRequest.origin.getter();
      uint64_t v36 = RequestOrigin.contextApp.getter();
      (*v74)(v34, v35);
      v0[104] = v36;
      Swift::Int v37 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_10003B9E4(v94, v37, v38);
      swift_bridgeObjectRelease();
      (*v73)(v32, v33);
      if (v30 == v78)
      {
        swift_bridgeObjectRelease();
        long long v68 = v84;
        goto LABEL_46;
      }
    }
LABEL_50:
    __break(1u);
    return daemon.getter();
  }
  unint64_t v31 = _swiftEmptyArrayStorage;
  long long v68 = &_swiftEmptySetSingleton;
LABEL_46:
  v0[197] = v31;
  v0[196] = v68;
  swift_bridgeObjectRelease();
  unint64_t v69 = (void *)swift_task_alloc();
  v0[198] = v69;
  *unint64_t v69 = v0;
  v69[1] = sub_1000096A4;
  return daemon.getter();
}

uint64_t sub_10002ACA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Handle();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v25 - v8;
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v25 - v11;
  int64_t v13 = 0;
  uint64_t v28 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v25 = v15;
  int64_t v26 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v25 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v26) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v25 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v26) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v25 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(void *)(v28 + 48) + *(void *)(v3 + 72) * v21, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_10002AF58((uint64_t)v9, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10002AF58(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Handle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000471EC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000471EC(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      int64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10002B27C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10002B27C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Handle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10002B538();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100156F44((uint64_t (*)(void))&type metadata accessor for Handle, &qword_1003F0568);
      goto LABEL_12;
    }
    sub_10002B934();
  }
  uint64_t v12 = *v3;
  sub_1000471EC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000471EC(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10002B538()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F0568);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    Swift::Int v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000471EC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10002B934()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Handle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F0568);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000471EC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10002BCE4(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  return sub_10002BD24(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Friend, (void (*)(BOOL, uint64_t, uint64_t))sub_10003BD78);
}

uint64_t sub_10002BD24(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v23 = a5;
  uint64_t v33 = a4(0);
  uint64_t v9 = *(void *)(v33 - 8);
  uint64_t v10 = __chkstk_darwin(v33);
  uint64_t v32 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = &_swiftEmptyArrayStorage;
  uint64_t v34 = &_swiftEmptyArrayStorage;
  uint64_t v31 = *(void *)(a3 + 16);
  if (v31)
  {
    unint64_t v16 = 0;
    uint64_t v26 = a3;
    unint64_t v27 = (void (**)(char *, uint64_t))(v9 + 8);
    char v29 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v30 = v9 + 16;
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v15 = *(void **)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, a3 + v17 + (void)v15 * v16, v33);
      char v18 = a1(v14);
      if (v5)
      {
        (*v27)(v14, v33);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v15;
      }
      if (v18)
      {
        unint64_t v28 = *v29;
        v28(v32, v14, v33);
        unint64_t v19 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v23(0, v19[2] + 1, 1);
          unint64_t v19 = v34;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          v23(v20 > 1, v21 + 1, 1);
          unint64_t v19 = v34;
        }
        v19[2] = v21 + 1;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v28)((char *)v19 + v17 + v21 * (void)v15, v32, v33);
        uint64_t v34 = v19;
        a3 = v26;
        a1 = v24;
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v27)(v14, v33);
      }
      if (v31 == ++v16)
      {
        uint64_t v15 = v34;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  return result;
}

BOOL sub_10002BFE0(uint64_t a1)
{
  return sub_10002C000(a1, *(void *)(v1 + 16));
}

BOOL sub_10002C000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Friend();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  uint64_t v60 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v48 - v9;
  uint64_t v11 = type metadata accessor for Handle();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v48 - v16;
  uint64_t v58 = a1;
  Friend.handle.getter();
  uint64_t v18 = Handle.expiresByGroupId.getter();
  unint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v19 = v12 + 8;
  unint64_t v20 = v21;
  v21(v17, v11);
  uint64_t v63 = a2;
  uint64_t v22 = v61;
  uint64_t v23 = sub_10002C5BC((uint64_t)sub_10002CFFC, (uint64_t)v62, v18);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v23 + 16);
  swift_release();
  if (!v24)
  {
    unint64_t v52 = v20;
    uint64_t v53 = v19;
    uint64_t v56 = 0;
    uint64_t v57 = v10;
    uint64_t v54 = v15;
    uint64_t v55 = v11;
    uint64_t v61 = v22;
    uint64_t v25 = v59;
    uint64_t v26 = v60;
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100044058(v27, (uint64_t)qword_10040B708);
    unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    uint64_t v30 = v57;
    uint64_t v29 = v58;
    v28(v57, v58, v25);
    v28(v8, v29, v25);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      uint64_t v66 = v58;
      *(_DWORD *)uint64_t v34 = 136447235;
      os_log_t v51 = v31;
      uint64_t v64 = sub_100037004(0xD000000000000025, 0x80000001003761F0, &v66);
      int v50 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2160;
      uint64_t v64 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2081;
      uint64_t v49 = (void (*)(char *, uint64_t))(v34 + 24);
      uint64_t v35 = v54;
      Friend.handle.getter();
      uint64_t v36 = Handle.identifier.getter();
      unint64_t v38 = v37;
      uint64_t v39 = v55;
      int64_t v40 = v52;
      v52(v35, v55);
      uint64_t v64 = sub_100037004(v36, v38, &v66);
      uint64_t v48 = &v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v60 + 8);
      v60 += 8;
      uint64_t v49 = v41;
      v41(v57, v59);
      *(_WORD *)(v34 + 32) = 2160;
      uint64_t v64 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 42) = 2081;
      uint64_t v57 = (char *)(v34 + 44);
      Friend.handle.getter();
      Handle.expiresByGroupId.getter();
      v40(v35, v39);
      type metadata accessor for GroupID();
      type metadata accessor for Date();
      sub_1000471EC(&qword_1003F0018, (void (*)(uint64_t))&type metadata accessor for GroupID);
      uint64_t v42 = Dictionary.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      uint64_t v64 = sub_100037004(v42, v44, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v8, v59);
      os_log_t v45 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v50, "%{public}s expired Friend:%{private,mask.hash}s\nexpiresByGroupId:%{private,mask.hash}s", (uint8_t *)v34, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v46 = *(void (**)(char *, uint64_t))(v26 + 8);
      v46(v30, v25);
      v46(v8, v25);
    }
    uint64_t v24 = v56;
  }
  return v24 == 0;
}

uint64_t sub_10002C5BC(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_10002C734((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, (void *)a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a2 = sub_10002C734((unint64_t *)v11, v8, (void *)a3, v6);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_10002C734(unint64_t *a1, uint64_t a2, void *a3, uint64_t (*a4)(char *, char *))
{
  os_log_t v45 = a4;
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v47 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GroupID();
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  int64_t v13 = 0;
  unint64_t v46 = a3;
  uint64_t v16 = a3[8];
  uint64_t v15 = a3 + 8;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *((unsigned char *)v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v36 = v15;
  int64_t v37 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v38 = v5 + 16;
  uint64_t v39 = v9 + 16;
  uint64_t v42 = v9;
  uint64_t v43 = v5;
  int64_t v40 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v41 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v20 = v44;
LABEL_4:
  uint64_t v35 = v12;
  while (v19)
  {
    unint64_t v21 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v22 = v21 | (v13 << 6);
    uint64_t v23 = v47;
LABEL_18:
    uint64_t v27 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v11, v46[6] + *(void *)(v42 + 72) * v22, v7);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v23, v27[7] + *(void *)(v43 + 72) * v22, v20);
    uint64_t v28 = v48;
    char v29 = v45(v11, v23);
    uint64_t v48 = v28;
    if (v28) {
      goto LABEL_28;
    }
    char v30 = v29;
    (*v40)(v23, v20);
    uint64_t result = (*v41)(v11, v7);
    if (v30)
    {
      uint64_t v31 = v35;
      *(unint64_t *)((char *)v34 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      BOOL v24 = __OFADD__(v31, 1);
      uint64_t v12 = v31 + 1;
      if (!v24) {
        goto LABEL_4;
      }
      __break(1u);
LABEL_28:
      (*v40)(v23, v20);
      return (*v41)(v11, v7);
    }
  }
  BOOL v24 = __OFADD__(v13++, 1);
  uint64_t v23 = v47;
  if (v24)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v13 >= v37) {
    return sub_10002CB04(v34, v33, v35, v46);
  }
  unint64_t v25 = v36[v13];
  if (v25)
  {
LABEL_17:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
    goto LABEL_18;
  }
  int64_t v26 = v13 + 1;
  if (v13 + 1 >= v37) {
    return sub_10002CB04(v34, v33, v35, v46);
  }
  unint64_t v25 = v36[v26];
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v13 + 2;
  if (v13 + 2 >= v37) {
    return sub_10002CB04(v34, v33, v35, v46);
  }
  unint64_t v25 = v36[v26];
  if (v25) {
    goto LABEL_16;
  }
  int64_t v26 = v13 + 3;
  if (v13 + 3 >= v37) {
    return sub_10002CB04(v34, v33, v35, v46);
  }
  unint64_t v25 = v36[v26];
  if (v25)
  {
LABEL_16:
    int64_t v13 = v26;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v13 >= v37) {
      return sub_10002CB04(v34, v33, v35, v46);
    }
    unint64_t v25 = v36[v13];
    ++v26;
    if (v25) {
      goto LABEL_17;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10002CB04(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v64 = type metadata accessor for Date();
  uint64_t v56 = *(void *)(v64 - 8);
  uint64_t v8 = __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v47 - v10;
  uint64_t v11 = type metadata accessor for GroupID();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v53 = (char *)&v47 - v14;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100044014(&qword_1003F0538);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v16 = result;
  unint64_t v47 = a1;
  uint64_t v48 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v51 = v55 + 16;
  uint64_t v52 = result;
  uint64_t v49 = a4;
  uint64_t v50 = v56 + 16;
  uint64_t v60 = v56 + 32;
  uint64_t v61 = v55 + 32;
  uint64_t v19 = result + 64;
  uint64_t v20 = v62;
  while (1)
  {
    uint64_t v59 = a3;
    if (v17)
    {
      uint64_t v57 = (v17 - 1) & v17;
      uint64_t v58 = v18;
      unint64_t v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v48) {
        return v16;
      }
      unint64_t v23 = v47[v22];
      uint64_t v24 = v18 + 1;
      if (!v23)
      {
        uint64_t v24 = v18 + 2;
        if (v18 + 2 >= v48) {
          return v16;
        }
        unint64_t v23 = v47[v24];
        if (!v23)
        {
          uint64_t v24 = v18 + 3;
          if (v18 + 3 >= v48) {
            return v16;
          }
          unint64_t v23 = v47[v24];
          if (!v23)
          {
            uint64_t v25 = v18 + 4;
            if (v18 + 4 >= v48) {
              return v16;
            }
            unint64_t v23 = v47[v25];
            if (!v23)
            {
              while (1)
              {
                uint64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v24 >= v48) {
                  return v16;
                }
                unint64_t v23 = v47[v24];
                ++v25;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v57 = (v23 - 1) & v23;
      uint64_t v58 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    uint64_t v26 = v55;
    uint64_t v27 = *(void *)(v55 + 72);
    uint64_t v28 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, a4[6] + v27 * v21, v11);
    uint64_t v29 = a4[7];
    uint64_t v30 = v56;
    uint64_t v31 = *(void *)(v56 + 72);
    uint64_t v32 = v29 + v31 * v21;
    uint64_t v33 = v11;
    uint64_t v34 = v54;
    uint64_t v35 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v32, v64);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v36(v20, v28, v33);
    int64_t v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v38 = v34;
    uint64_t v11 = v33;
    v37(v63, v38, v35);
    uint64_t v16 = v52;
    sub_1000471EC(&qword_1003F0018, (void (*)(uint64_t))&type metadata accessor for GroupID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v43 = 0;
      unint64_t v44 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v45 = v41 == v44;
        if (v41 == v44) {
          unint64_t v41 = 0;
        }
        v43 |= v45;
        uint64_t v46 = *(void *)(v19 + 8 * v41);
      }
      while (v46 == -1);
      unint64_t v42 = __clz(__rbit64(~v46)) + (v41 << 6);
    }
    *(void *)(v19 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    v36((char *)(*(void *)(v16 + 48) + v42 * v27), v62, v11);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v37)(*(void *)(v16 + 56) + v42 * v31, v63, v64);
    ++*(void *)(v16 + 16);
    a3 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      break;
    }
    a4 = v49;
    unint64_t v17 = v57;
    uint64_t v18 = v58;
    if (v59 == 1) {
      return v16;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10002CFFC()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.trustedNow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100044014((uint64_t *)&unk_1003EE800);
  __chkstk_darwin(v2);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (static SystemInfo.underTest.getter())
  {
    if (qword_1003EC4E0 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_100044058(v2, (uint64_t)qword_1003F5B60);
    swift_beginAccess();
    sub_1000E2224(v5, (uint64_t)v4);
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1) {
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a1, v4, v6);
    }
    sub_10000A520((uint64_t)v4, (uint64_t *)&unk_1003EE800);
  }
  else
  {
    valueOf(entitlement:)();
    if (v15)
    {
      if ((swift_dynamicCast() & 1) != 0 && v13[15] == 1) {
        return static ReferenceClock.now.getter();
      }
    }
    else
    {
      sub_10000A520((uint64_t)v14, &qword_1003F5890);
    }
    if (qword_1003EC4E8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_10040C4A8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Queried trustedNow but falling back to normal Date()", v12, 2u);
      swift_slowDealloc();
    }
  }
  return Date.init()();
}

uint64_t sub_10002D2C0(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003ECFE8);
  __chkstk_darwin(v3 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Friend();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v51 = (char *)&v38 - v10;
  uint64_t result = __chkstk_darwin(v9);
  char v43 = (char *)&v38 - v13;
  uint64_t v46 = a1;
  int64_t v47 = 0;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v15 = a1 + 56;
  uint64_t v14 = v16;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 24);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  uint64_t v38 = -1 << *(unsigned char *)(v15 - 24);
  int64_t v40 = (unint64_t)(63 - v17) >> 6;
  uint64_t v41 = v15;
  uint64_t v42 = v12 + 32;
  uint64_t v44 = v12;
  BOOL v45 = v1;
  uint64_t v49 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v50 = v12 + 16;
  if ((v18 & v14) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    if (v21 < v40)
    {
      unint64_t v22 = *(void *)(v41 + 8 * v21);
      int64_t v23 = v47 + 1;
      if (v22) {
        goto LABEL_21;
      }
      int64_t v23 = v47 + 2;
      if (v47 + 2 >= v40) {
        return sub_1001491B4();
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (v22) {
        goto LABEL_21;
      }
      int64_t v23 = v47 + 3;
      if (v47 + 3 >= v40) {
        return sub_1001491B4();
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (v22)
      {
LABEL_21:
        int64_t v47 = v23;
        uint64_t v48 = (v22 - 1) & v22;
        for (unint64_t i = __clz(__rbit64(v22)) + (v23 << 6); ; unint64_t i = __clz(__rbit64(v19)) | (v47 << 6))
        {
          uint64_t v26 = v43;
          uint64_t v25 = v44;
          uint64_t v27 = *(void *)(v44 + 72);
          uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
          v28(v43, *(void *)(v46 + 48) + v27 * i, v5);
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v51, v26, v5);
          uint64_t v29 = *v1;
          if (*(void *)(*v1 + 16)
            && (sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend),
                uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)(),
                uint64_t v31 = -1 << *(unsigned char *)(v29 + 32),
                unint64_t v32 = v30 & ~v31,
                ((*(void *)(v29 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) != 0))
          {
            uint64_t v33 = ~v31;
            while (1)
            {
              v28(v8, *(void *)(v29 + 48) + v32 * v27, v5);
              sub_1000471EC(&qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend);
              char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v35 = *v49;
              (*v49)(v8, v5);
              if (v34) {
                break;
              }
              unint64_t v32 = (v32 + 1) & v33;
              if (((*(void *)(v29 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
                goto LABEL_6;
              }
            }
            uint64_t v36 = v39;
            int64_t v37 = v51;
            uint64_t v1 = v45;
            sub_10002D774((uint64_t)v51, v39);
            sub_10000A520(v36, &qword_1003ECFE8);
            uint64_t result = v35(v37, v5);
            unint64_t v19 = v48;
            if (!v48) {
              goto LABEL_8;
            }
          }
          else
          {
LABEL_6:
            uint64_t v1 = v45;
            sub_100046C40((uint64_t)v8, v51);
            uint64_t result = (*v49)(v8, v5);
            unint64_t v19 = v48;
            if (!v48) {
              goto LABEL_8;
            }
          }
LABEL_7:
          uint64_t v48 = (v19 - 1) & v19;
        }
      }
      int64_t v24 = v47 + 4;
      if (v47 + 4 < v40)
      {
        unint64_t v22 = *(void *)(v41 + 8 * v24);
        if (v22)
        {
          int64_t v23 = v47 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v23 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_32;
          }
          if (v23 >= v40) {
            return sub_1001491B4();
          }
          unint64_t v22 = *(void *)(v41 + 8 * v23);
          ++v24;
          if (v22) {
            goto LABEL_21;
          }
        }
      }
    }
    return sub_1001491B4();
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10002D774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Friend();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000424DC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_1000424DC(&qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    int64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *int64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10004B248();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_1000DBCEC(v12, (uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
    *int64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_10002DA98(uint64_t a1)
{
  uint64_t v3 = sub_100044014(&qword_1003EFCD0);
  __chkstk_darwin(v3 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Device();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v51 = (char *)&v38 - v10;
  uint64_t result = __chkstk_darwin(v9);
  char v43 = (char *)&v38 - v13;
  uint64_t v46 = a1;
  int64_t v47 = 0;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v15 = a1 + 56;
  uint64_t v14 = v16;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 24);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  uint64_t v38 = -1 << *(unsigned char *)(v15 - 24);
  int64_t v40 = (unint64_t)(63 - v17) >> 6;
  uint64_t v41 = v15;
  uint64_t v42 = v12 + 32;
  uint64_t v44 = v12;
  BOOL v45 = v1;
  uint64_t v49 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v50 = v12 + 16;
  if ((v18 & v14) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v47 + 1;
  if (!__OFADD__(v47, 1))
  {
    if (v21 < v40)
    {
      unint64_t v22 = *(void *)(v41 + 8 * v21);
      int64_t v23 = v47 + 1;
      if (v22) {
        goto LABEL_21;
      }
      int64_t v23 = v47 + 2;
      if (v47 + 2 >= v40) {
        return sub_1001491B4();
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (v22) {
        goto LABEL_21;
      }
      int64_t v23 = v47 + 3;
      if (v47 + 3 >= v40) {
        return sub_1001491B4();
      }
      unint64_t v22 = *(void *)(v41 + 8 * v23);
      if (v22)
      {
LABEL_21:
        int64_t v47 = v23;
        uint64_t v48 = (v22 - 1) & v22;
        for (unint64_t i = __clz(__rbit64(v22)) + (v23 << 6); ; unint64_t i = __clz(__rbit64(v19)) | (v47 << 6))
        {
          uint64_t v26 = v43;
          uint64_t v25 = v44;
          uint64_t v27 = *(void *)(v44 + 72);
          uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
          v28(v43, *(void *)(v46 + 48) + v27 * i, v5);
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v51, v26, v5);
          uint64_t v29 = *v1;
          if (*(void *)(*v1 + 16)
            && (sub_1000471EC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device),
                uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)(),
                uint64_t v31 = -1 << *(unsigned char *)(v29 + 32),
                unint64_t v32 = v30 & ~v31,
                ((*(void *)(v29 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) != 0))
          {
            uint64_t v33 = ~v31;
            while (1)
            {
              v28(v8, *(void *)(v29 + 48) + v32 * v27, v5);
              sub_1000471EC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
              char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v35 = *v49;
              (*v49)(v8, v5);
              if (v34) {
                break;
              }
              unint64_t v32 = (v32 + 1) & v33;
              if (((*(void *)(v29 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0) {
                goto LABEL_6;
              }
            }
            uint64_t v36 = v39;
            int64_t v37 = v51;
            uint64_t v1 = v45;
            sub_10002DF4C((uint64_t)v51, v39);
            sub_10000A520(v36, &qword_1003EFCD0);
            uint64_t result = v35(v37, v5);
            unint64_t v19 = v48;
            if (!v48) {
              goto LABEL_8;
            }
          }
          else
          {
LABEL_6:
            uint64_t v1 = v45;
            sub_100028994((uint64_t)v8, v51);
            uint64_t result = (*v49)(v8, v5);
            unint64_t v19 = v48;
            if (!v48) {
              goto LABEL_8;
            }
          }
LABEL_7:
          uint64_t v48 = (v19 - 1) & v19;
        }
      }
      int64_t v24 = v47 + 4;
      if (v47 + 4 < v40)
      {
        unint64_t v22 = *(void *)(v41 + 8 * v24);
        if (v22)
        {
          int64_t v23 = v47 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v23 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_32;
          }
          if (v23 >= v40) {
            return sub_1001491B4();
          }
          unint64_t v22 = *(void *)(v41 + 8 * v23);
          ++v24;
          if (v22) {
            goto LABEL_21;
          }
        }
      }
    }
    return sub_1001491B4();
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10002DF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Device();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000424DC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_1000424DC(&qword_1003EEC18, (void (*)(uint64_t))&type metadata accessor for Device);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    int64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *int64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10004B268();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_1000DBCEC(v12, (uint64_t (*)(void))&type metadata accessor for Device, &qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    *int64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

double sub_10002E270@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002E2C0(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10002E2C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EE430);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10002E5D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  char v30 = 0;
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v29 = 1;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v28 = 2;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v25 = v11;
  char v27 = 3;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v12;
  char v26 = 4;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  int v21 = v9 & 1;
  uint64_t v16 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000233E4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v21;
  *(unsigned char *)(a2 + 1) = v10 & 1;
  *(void *)(a2 + 8) = v24;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v15;
  return result;
}

unint64_t sub_10002E5D0()
{
  unint64_t result = qword_1003EE438;
  if (!qword_1003EE438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE438);
  }
  return result;
}

uint64_t sub_10002E624()
{
  uint64_t v1 = *(void *)(v0 + 1760);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    uint64_t v15 = 1;
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)(v0 + 1432);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v71 = *(void *)(v3 + 72);
  uint64_t v5 = *(void (**)(void, uint64_t, void))(v3 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v6 = *(void *)(v0 + 1392);
    uint64_t v7 = *(void *)(v0 + 1376);
    uint64_t v8 = *(void *)(v0 + 1368);
    char v9 = *(void **)(v0 + 1104);
    v5(*(void *)(v0 + 1440), v4, *(void *)(v0 + 1424));
    Friend.handle.getter();
    uint64_t v10 = Handle.serverID.getter();
    uint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    if (!v12) {
      goto LABEL_3;
    }
    if (v10 == *v9 && v12 == v9[1]) {
      break;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_14;
    }
LABEL_3:
    (*(void (**)(void, void))(*(void *)(v0 + 1432) + 8))(*(void *)(v0 + 1440), *(void *)(v0 + 1424));
    v4 += v71;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = 1;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(*(void *)(v0 + 1432) + 32))(*(void *)(v0 + 1080), *(void *)(v0 + 1440), *(void *)(v0 + 1424));
  uint64_t v15 = 0;
LABEL_15:
  uint64_t v16 = *(void *)(v0 + 1432);
  uint64_t v17 = *(void *)(v0 + 1424);
  uint64_t v18 = *(void *)(v0 + 1080);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, v15, 1, v17);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v17) == 1)
  {
    uint64_t v19 = *(void *)(v0 + 1080);
    sub_10002EFF8(*(void *)(v0 + 1104), type metadata accessor for ServerLocation);
    uint64_t v20 = &qword_1003ECFE8;
    uint64_t v21 = v19;
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v0 + 1104);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v24 = *(void *)(v0 + 1064);
  uint64_t v25 = *(void *)(v0 + 1056);
  uint64_t v26 = *(void *)(v0 + 1048);
  (*(void (**)(void, void, void))(*(void *)(v0 + 1432) + 32))(*(void *)(v0 + 1448), *(void *)(v0 + 1080), *(void *)(v0 + 1424));
  sub_100013210(v22 + *(int *)(v23 + 20), v26, &qword_1003ECFE0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
  {
    uint64_t v27 = *(void *)(v0 + 1104);
    uint64_t v28 = *(void *)(v0 + 1048);
    (*(void (**)(void, void))(*(void *)(v0 + 1432) + 8))(*(void *)(v0 + 1448), *(void *)(v0 + 1424));
    sub_10002EFF8(v27, type metadata accessor for ServerLocation);
    uint64_t v20 = &qword_1003ECFE0;
    uint64_t v21 = v28;
LABEL_19:
    uint64_t result = sub_10000A520(v21, v20);
    uint64_t v30 = *(void *)(v0 + 1736);
  }
  else
  {
    uint64_t v62 = *(void *)(v0 + 1736);
    unsigned int v54 = *(_DWORD *)(v0 + 1776);
    unsigned int v51 = *(_DWORD *)(v0 + 1772);
    uint64_t v52 = *(void *)(v0 + 1448);
    uint64_t v68 = *(void *)(v0 + 1432);
    uint64_t v70 = *(void *)(v0 + 1424);
    uint64_t v56 = *(void *)(v0 + 1384);
    uint64_t v64 = *(void *)(v0 + 1376);
    uint64_t v66 = *(void *)(v0 + 1368);
    uint64_t v72 = *(void *)(v0 + 1104);
    uint64_t v31 = *(void *)(v0 + 1072);
    uint64_t v53 = *(void *)(v0 + 1040);
    uint64_t v32 = *(void *)(v0 + 1024);
    uint64_t v58 = *(void *)(v0 + 1032);
    uint64_t v60 = *(void *)(v0 + 1016);
    uint64_t v48 = *(void *)(v0 + 984);
    uint64_t v33 = *(void *)(v0 + 976);
    uint64_t v34 = *(void *)(v0 + 968);
    uint64_t v35 = *(void *)(v0 + 952);
    uint64_t v36 = *(void *)(v0 + 944);
    uint64_t v49 = *(void *)(v0 + 960);
    uint64_t v50 = *(void *)(v0 + 936);
    sub_1000854EC(*(void *)(v0 + 1048), v31);
    Friend.handle.getter();
    Date.init(timeIntervalSince1970:)();
    sub_100013210(v31, v48, &qword_1003ECAB8);
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v33, v51, v49);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v35, v54, v50);
    Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v58, v53, v60);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100143090(v58, v56, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = v62;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v56, v66);
    sub_10002EFF8(v31, type metadata accessor for LegacyLocation);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v52, v70);
    uint64_t result = sub_10002EFF8(v72, type metadata accessor for ServerLocation);
  }
  unint64_t v38 = *(void *)(v0 + 1744) + 1;
  if (v38 == *(void *)(v0 + 1728))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(v0 + 1680);
    unint64_t v57 = *(void *)(v0 + 1688);
    uint64_t v39 = *(void *)(v0 + 1328);
    uint64_t v59 = *(void *)(v0 + 1320);
    uint64_t v61 = *(void *)(v0 + 1352);
    uint64_t v73 = v30;
    uint64_t v40 = *(void *)(v0 + 1240);
    uint64_t v65 = *(void *)(v0 + 1232);
    uint64_t v67 = *(void *)(v0 + 1264);
    uint64_t v41 = *(void *)(v0 + 1160);
    uint64_t v42 = *(void *)(v0 + 1008);
    uint64_t v43 = *(void *)(v0 + 1000);
    uint64_t v69 = *(void *)(v0 + 992);
    uint64_t v63 = *(void *)(v0 + 928);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Date.now.getter();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v55, v57);
    sub_10002EFF8(v41, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v61, v59);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v67, v65);
    uint64_t v44 = v63 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40))(v44, v42, v69);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v45 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v45(v73);
  }
  else
  {
    *(void *)(v0 + 1744) = v38;
    *(void *)(v0 + 1736) = v30;
    uint64_t v46 = *(void *)(v0 + 1720);
    if (v38 >= *(void *)(v46 + 16))
    {
      __break(1u);
    }
    else
    {
      sub_1000306DC(v46+ ((*(unsigned __int8 *)(v0 + 1768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1768))+ *(void *)(*(void *)(v0 + 1096) + 72) * v38, *(void *)(v0 + 1104), type metadata accessor for ServerLocation);
      int64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 1752) = v47;
      void *v47 = v0;
      v47[1] = sub_100082EC4;
      return sub_100005710();
    }
  }
  return result;
}

uint64_t sub_10002EFF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002F058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v212 = v3;
  uint64_t v4 = v3[75];
  v211[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v3[63];
    v206 = (uint64_t (**)(void, void, void))(v7 + 32);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v204 = v4;
    do
    {
      if (v6 >= *(void *)(v4 + 16))
      {
LABEL_62:
        __break(1u);
        return _swift_task_switch(a1, a2, a3);
      }
      unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v10 = *(void *)(v7 + 72);
      (*(void (**)(void, unint64_t, void))(v7 + 16))(v3[70], v3[75] + v9 + v10 * v6, v3[62]);
      if (Friend.isLegacyLocationCapable.getter())
      {
        uint64_t v11 = v5;
        uint64_t v12 = *v206;
        (*v206)(v3[69], v3[70], v3[62]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003BD78(0, v8[2] + 1, 1);
          uint64_t v8 = (void *)v211[0];
        }
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        uint64_t v15 = (uint64_t)v8;
        if (v14 >= v13 >> 1)
        {
          sub_10003BD78(v13 > 1, v14 + 1, 1);
          uint64_t v15 = v211[0];
        }
        uint64_t v16 = v3[69];
        uint64_t v17 = v3[62];
        *(void *)(v15 + 16) = v14 + 1;
        a1 = v12(v15 + v9 + v14 * v10, v16, v17);
        v211[0] = v15;
        uint64_t v8 = (void *)v15;
        uint64_t v5 = v11;
        uint64_t v4 = v204;
      }
      else
      {
        a1 = (*(uint64_t (**)(void, void))(v7 + 8))(v3[70], v3[62]);
      }
      ++v6;
    }
    while (v5 != v6);
    v200 = v8;
  }
  else
  {
    v200 = _swiftEmptyArrayStorage;
  }
  uint64_t v18 = v3[63];
  uint64_t v19 = v3[60];
  uint64_t v202 = v3[61];
  uint64_t v195 = v3[59];
  uint64_t v20 = v3[55];
  uint64_t v21 = v3[46];
  uint64_t v22 = v3[39];
  uint64_t v23 = v3[35];
  uint64_t v24 = v3[32];
  uint64_t v25 = v3[27];
  uint64_t v26 = v3[28];
  swift_bridgeObjectRelease();
  uint64_t v27 = (uint64_t *)(v26 + OBJC_IVAR____TtC13findmylocated11DataManager_legacyLocationsForHandles);
  uint64_t v201 = v200[2];
  uint64_t v198 = v25 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  swift_bridgeObjectRetain();
  v174 = v27;
  a1 = swift_beginAccess();
  uint64_t v28 = 0;
  uint64_t v196 = v18;
  uint64_t v197 = *(void *)(v19 + 72);
  v205 = (void (**)(uint64_t, uint64_t))(v20 + 8);
  v203 = (os_log_t *)(v18 + 8);
  v194 = (void (**)(uint64_t, void, uint64_t))(v18 + 32);
  v169 = (void (**)(uint64_t, void, uint64_t))(v23 + 104);
  unsigned int v168 = enum case for LocationType.legacy(_:);
  v167 = (void (**)(uint64_t, void, uint64_t))(v24 + 104);
  unsigned int v166 = enum case for MotionActivityState.unknown(_:);
  unint64_t v164 = (void (**)(void, uint64_t, uint64_t, void))(v21 + 56);
  os_log_type_t v165 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v172 = (void (**)(uint64_t, uint64_t))(v22 + 8);
  v173 = (void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  uint64_t v170 = (void (**)(os_log_type_t *, uint64_t))(v21 + 8);
  uint64_t v171 = (void (**)(uint64_t, os_log_type_t *, uint64_t))(v21 + 16);
  v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v161 = v21;
  v162 = (void (**)(void, void, uint64_t))(v22 + 32);
  v160 = (void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  uint64_t v29 = v3[72];
  while (2)
  {
    if (v28 == v29)
    {
      __break(1u);
      goto LABEL_62;
    }
    sub_100129BB8(v198 + v28 * v197, v3[61], type metadata accessor for ServerLocation);
    if (!v201)
    {
LABEL_16:
      uint64_t v30 = v3[61];
      goto LABEL_17;
    }
    uint64_t v199 = v28;
    uint64_t v31 = (char *)v200 + ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80));
    uint64_t v32 = *(void *)(v196 + 72);
    v207 = *(void (**)(void, void, void))(v196 + 16);
    swift_retain();
    uint64_t v33 = v201;
    while (1)
    {
      uint64_t v34 = (void *)v3[61];
      uint64_t v35 = v3[58];
      uint64_t v36 = v3[54];
      v207(v3[66], v31, v3[62]);
      Friend.handle.getter();
      uint64_t v37 = Handle.serverID.getter();
      uint64_t v39 = v38;
      uint64_t v40 = *v205;
      (*v205)(v35, v36);
      if (!v39) {
        goto LABEL_21;
      }
      if (v37 == *v34 && v39 == *(void *)(v202 + 8)) {
        break;
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_30;
      }
LABEL_21:
      ((void (*)(void, void))*v203)(v3[66], v3[62]);
      v31 += v32;
      if (!--v33)
      {
        swift_release();
        uint64_t v28 = v199;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
LABEL_30:
    swift_release();
    uint64_t v43 = v3[68];
    uint64_t v44 = v3[67];
    uint64_t v46 = v3[61];
    uint64_t v45 = v3[62];
    uint64_t v47 = v3[44];
    uint64_t v48 = *v194;
    (*v194)(v44, v3[66], v45);
    v48(v43, v44, v45);
    sub_100013210(v46 + *(int *)(v195 + 20), v47, &qword_1003ECFE0);
    uint64_t v49 = type metadata accessor for LegacyLocation(0);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v47, 1, v49);
    uint64_t v51 = v3[68];
    if (v50 == 1)
    {
      uint64_t v30 = v3[61];
      uint64_t v52 = v3[62];
      sub_10000A520(v3[44], &qword_1003ECFE0);
      ((void (*)(uint64_t, uint64_t))*v203)(v51, v52);
      goto LABEL_54;
    }
    uint64_t v190 = v3[53];
    uint64_t v53 = v3[44];
    uint64_t v179 = v3[52];
    uint64_t v183 = v3[45];
    uint64_t v54 = v3[36];
    uint64_t v55 = v3[37];
    uint64_t v56 = v3[33];
    uint64_t v175 = v3[34];
    uint64_t v176 = v3[31];
    Date.init(timeIntervalSince1970:)();
    sub_100013210(v53, v55, &qword_1003ECAB8);
    (*v169)(v54, v168, v175);
    (*v167)(v56, v166, v176);
    Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)();
    sub_100030644(v53, type metadata accessor for LegacyLocation);
    unint64_t v57 = *v173;
    (*v173)(v190, v179, v183);
    Friend.handle.getter();
    uint64_t v58 = *v174;
    if (*(void *)(*v174 + 16))
    {
      uint64_t v59 = v3[57];
      swift_bridgeObjectRetain();
      unint64_t v60 = sub_100025614(v59);
      uint64_t v61 = v3[45];
      uint64_t v62 = v3[30];
      if (v63)
      {
        (*(void (**)(void, unint64_t, void))(v161 + 16))(v3[30], *(void *)(v58 + 56) + *(void *)(v161 + 72) * v60, v3[45]);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v161 + 56))(v62, 0, 1, v61);
      }
      else
      {
        (*v164)(v3[30], 1, 1, v3[45]);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*v164)(v3[30], 1, 1, v3[45]);
    }
    uint64_t v64 = v3[45];
    uint64_t v65 = v3[30];
    v40(v3[57], v3[54]);
    if ((*v165)(v65, 1, v64) == 1)
    {
      sub_10000A520(v3[30], &qword_1003EFE98);
      goto LABEL_44;
    }
    uint64_t v67 = v3[42];
    uint64_t v66 = v3[43];
    uint64_t v68 = v3[38];
    v57(v3[51], v3[30], v3[45]);
    Location.date.getter();
    Location.date.getter();
    char v69 = static Date.< infix(_:_:)();
    uint64_t v70 = *v172;
    (*v172)(v67, v68);
    v70(v66, v68);
    if (v69)
    {
      v191 = v70;
      uint64_t v71 = (os_log_type_t *)v3[53];
      uint64_t v73 = v3[50];
      uint64_t v72 = (os_log_type_t *)v3[51];
      uint64_t v74 = v3[49];
      uint64_t v75 = v3[45];
      v207(v3[65], v3[68], v3[62]);
      uint64_t v76 = *v171;
      (*v171)(v73, v71, v75);
      v76(v74, v72, v75);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      uint64_t v208 = v3[68];
      uint64_t v80 = v3[65];
      uint64_t v81 = v3[62];
      if (v79)
      {
        uint64_t v82 = v3[56];
        *(void *)unint64_t v155 = v3[54];
        v177 = (os_log_type_t *)v3[51];
        v180 = (os_log_type_t *)v3[53];
        v147 = (os_log_type_t *)v3[50];
        os_log_t v151 = (os_log_t)v3[49];
        uint64_t v187 = v3[45];
        uint64_t v83 = v3[43];
        uint64_t v184 = v3[38];
        uint64_t v84 = swift_slowAlloc();
        v211[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v84 = 141559299;
        v3[18] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v84 + 12) = 2081;
        os_log_type_t type = v78;
        Friend.handle.getter();
        uint64_t v85 = Handle.identifier.getter();
        unint64_t v87 = v86;
        v40(v82, *(void *)v155);
        v3[19] = sub_100037004(v85, v87, v211);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v156 = (void (*)(void, void))*v203;
        ((void (*)(uint64_t, uint64_t))*v203)(v80, v81);
        *(_WORD *)(v84 + 22) = 2160;
        v3[20] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v84 + 32) = 2081;
        Location.date.getter();
        uint64_t v88 = Date.localISO8601.getter();
        unint64_t v90 = v89;
        v191(v83, v184);
        v3[21] = sub_100037004(v88, v90, v211);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v149 = v81;
        uint64_t v91 = *v170;
        (*v170)(v147, v187);
        *(_WORD *)(v84 + 42) = 2160;
        v3[22] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v84 + 52) = 2081;
        Location.date.getter();
        uint64_t v92 = Date.localISO8601.getter();
        unint64_t v94 = v93;
        v191(v83, v184);
        v3[23] = sub_100037004(v92, v94, v211);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v91((os_log_type_t *)v151, v187);
        _os_log_impl((void *)&_mh_execute_header, v77, type, "Not update cached legacy location for handle: %{private,mask.hash}s\nsince new location location date: %{private,mask.hash}s\nis older cached date: %{private,mask.hash}s.", (uint8_t *)v84, 0x3Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v91(v177, v187);
        v91(v180, v187);
        v156(v208, v149);
      }
      else
      {
        uint64_t v128 = (os_log_type_t *)v3[53];
        unint64_t v130 = (os_log_type_t *)v3[50];
        unint64_t v129 = (os_log_type_t *)v3[51];
        uint64_t v131 = (os_log_type_t *)v3[49];
        uint64_t v132 = v3[45];

        unint64_t v133 = *v170;
        (*v170)(v131, v132);
        v133(v130, v132);
        uint64_t v134 = (void (*)(void, void))*v203;
        ((void (*)(uint64_t, uint64_t))*v203)(v80, v81);
        v133(v129, v132);
        v133(v128, v132);
        v134(v208, v81);
      }
LABEL_53:
      uint64_t v30 = v3[61];
    }
    else
    {
      (*v170)((os_log_type_t *)v3[51], v3[45]);
LABEL_44:
      uint64_t v95 = v3[38];
      uint64_t v96 = v3[29];
      Friend.createdAt.getter();
      if ((*v163)(v96, 1, v95) == 1)
      {
        sub_10000A520(v3[29], (uint64_t *)&unk_1003EE800);
      }
      else
      {
        uint64_t v98 = v3[42];
        uint64_t v97 = v3[43];
        uint64_t v99 = v3[38];
        (*v162)(v3[41], v3[29], v99);
        Location.date.getter();
        Date.addingTimeInterval(_:)();
        uint64_t v100 = *v172;
        (*v172)(v98, v99);
        char v101 = static Date.< infix(_:_:)();
        v100(v97, v99);
        if (v101)
        {
          v192 = v100;
          uint64_t v102 = (os_log_type_t *)v3[53];
          uint64_t v103 = v3[48];
          uint64_t v104 = v3[45];
          uint64_t v105 = v3[40];
          uint64_t v106 = v3[41];
          uint64_t v107 = v3[38];
          v207(v3[64], v3[68], v3[62]);
          (*v160)(v105, v106, v107);
          (*v171)(v103, v102, v104);
          uint64_t v108 = Logger.logObject.getter();
          os_log_type_t v109 = static os_log_type_t.error.getter();
          BOOL v110 = os_log_type_enabled(v108, v109);
          uint64_t v209 = v3[68];
          uint64_t v188 = v3[64];
          uint64_t v111 = v3[62];
          if (v110)
          {
            uint64_t v112 = v3[56];
            os_log_t log = (os_log_t)v3[54];
            *(void *)typea = v3[48];
            uint64_t v178 = v3[45];
            uint64_t v181 = v3[41];
            v185 = (os_log_type_t *)v3[53];
            uint64_t v146 = v3[40];
            uint64_t v148 = v3[38];
            uint64_t v150 = v3[43];
            uint64_t v113 = swift_slowAlloc();
            v211[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v113 = 141559299;
            v3[12] = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v113 + 12) = 2081;
            os_log_type_t v157 = v109;
            Friend.handle.getter();
            uint64_t v114 = Handle.identifier.getter();
            uint64_t v152 = v108;
            unint64_t v116 = v115;
            v40(v112, (uint64_t)log);
            v3[13] = sub_100037004(v114, v116, v211);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            os_log_t loga = *v203;
            ((void (*)(uint64_t, uint64_t))*v203)(v188, v111);
            *(_WORD *)(v113 + 22) = 2160;
            v3[14] = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v113 + 32) = 2081;
            uint64_t v117 = Date.localISO8601.getter();
            v3[15] = sub_100037004(v117, v118, v211);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v192(v146, v148);
            *(_WORD *)(v113 + 42) = 2160;
            v3[16] = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v113 + 52) = 2081;
            Location.date.getter();
            uint64_t v119 = Date.localISO8601.getter();
            unint64_t v121 = v120;
            v192(v150, v148);
            v3[17] = sub_100037004(v119, v121, v211);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v122 = *v170;
            (*v170)(*(os_log_type_t **)typea, v178);
            _os_log_impl((void *)&_mh_execute_header, v152, v157, "Drop older legacy location for handle: %{private,mask.hash}s\ncreateAt: %{private,mask.hash}s\nlocation timestamp: %{private,mask.hash}s", (uint8_t *)v113, 0x3Eu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v192(v181, v148);
            v122(v185, v178);
            ((void (*)(uint64_t, uint64_t))loga)(v209, v111);
          }
          else
          {
            uint64_t v135 = (os_log_type_t *)v3[48];
            uint64_t v136 = v3[45];
            uint64_t v137 = v3[40];
            uint64_t v182 = v3[41];
            v186 = (os_log_type_t *)v3[53];
            uint64_t v138 = v3[38];

            uint64_t v139 = *v170;
            (*v170)(v135, v136);
            v192(v137, v138);
            uint64_t v140 = (void (*)(void, void))*v203;
            ((void (*)(uint64_t, uint64_t))*v203)(v188, v111);
            v192(v182, v138);
            v139(v186, v136);
            v140(v209, v111);
          }
          goto LABEL_53;
        }
        v100(v3[41], v3[38]);
      }
      uint64_t v30 = v3[61];
      uint64_t v210 = v3[62];
      uint64_t v123 = v3[56];
      uint64_t v124 = (os_log_type_t *)v3[53];
      uint64_t v189 = v3[54];
      uint64_t v193 = v3[68];
      uint64_t v125 = v3[47];
      uint64_t v126 = v3[45];
      Friend.handle.getter();
      swift_beginAccess();
      (*v171)(v125, v124, v126);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v211[0] = *v174;
      uint64_t *v174 = 0x8000000000000000;
      sub_100143090(v125, v123, isUniquelyReferenced_nonNull_native);
      uint64_t *v174 = v211[0];
      swift_bridgeObjectRelease();
      v40(v123, v189);
      swift_endAccess();
      (*v170)(v124, v126);
      ((void (*)(uint64_t, uint64_t))*v203)(v193, v210);
    }
LABEL_54:
    uint64_t v28 = v199;
LABEL_17:
    ++v28;
    a1 = sub_100030644(v30, type metadata accessor for ServerLocation);
    uint64_t v29 = v3[72];
    if (v28 != v29) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v141 = Logger.logObject.getter();
  os_log_type_t v142 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v141, v142))
  {
    v143 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v143 = 134217984;
    swift_beginAccess();
    v3[11] = *(void *)(*v174 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v141, v142, "After process, current legacyLocations count: %ld.", v143, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  v144 = (void *)swift_task_alloc();
  v3[76] = v144;
  void *v144 = v3;
  v144[1] = sub_10004ED04;
  a2 = v3[28];
  v144[8] = a2;
  a1 = (uint64_t)sub_100007F1C;
  a3 = 0;
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100030644(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000306A4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000306DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100030744@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003075C(a1, a2);
}

uint64_t sub_10003075C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = sub_100044014(&qword_1003ECFE0);
  __chkstk_darwin(v4 - 8);
  uint64_t v35 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003EE1E8);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ServerLocation(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100042524(a1, a1[3]);
  sub_100030F9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v32 = v11;
    uint64_t v30 = v9;
    uint64_t v12 = v34;
    unint64_t v13 = v35;
    char v39 = 0;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v32;
    uint64_t *v32 = v14;
    v15[1] = v16;
    type metadata accessor for LegacyLocation(0);
    char v38 = 1;
    sub_100030FF0(&qword_1003EE1F8, (void (*)(uint64_t))type metadata accessor for LegacyLocation);
    uint64_t v29 = v6;
    uint64_t v31 = v8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v17 = (uint64_t)v13;
    uint64_t v18 = v30;
    uint64_t v19 = (uint64_t)v32;
    sub_100013B50(v17, (uint64_t)v32 + *(int *)(v30 + 20), &qword_1003ECFE0);
    char v37 = 2;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = (uint64_t *)(v19 + *(int *)(v18 + 24));
    *uint64_t v21 = v20;
    v21[1] = v22;
    char v36 = 3;
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v29);
    uint64_t v26 = (uint64_t *)(v19 + *(int *)(v18 + 28));
    *uint64_t v26 = v23;
    v26[1] = v25;
    sub_100030F18(v19, v33);
  }
  return sub_1000233E4((uint64_t)a1);
}

void *sub_100030AF4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for LegacyLocation(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100044014(&qword_1003ECFE0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for PlaceMark();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14))
    {
      uint64_t v16 = sub_100044014(&qword_1003ECAB8);
      memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v8, v9, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    }
    uint64_t v17 = v10[5];
    uint64_t v18 = &v8[v17];
    uint64_t v19 = &v9[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = v10[6];
    uint64_t v21 = &v8[v20];
    uint64_t v22 = &v9[v20];
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = v10[7];
    uint64_t v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)&v8[v10[8]] = *(void *)&v9[v10[8]];
    *(void *)&v8[v10[9]] = *(void *)&v9[v10[9]];
    *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
    uint64_t v26 = v10[11];
    uint64_t v27 = &v8[v26];
    uint64_t v28 = &v9[v26];
    v27[8] = v28[8];
    *(void *)uint64_t v27 = *(void *)v28;
    (*(void (**)(char *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v29 = a3[6];
  uint64_t v30 = a3[7];
  uint64_t v31 = (void *)((char *)a1 + v29);
  uint64_t v32 = (void *)((char *)a2 + v29);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = (void *)((char *)a1 + v30);
  uint64_t v35 = (void *)((char *)a2 + v30);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100030DAC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for LegacyLocation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for PlaceMark();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for LegacyLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B3BBC);
}

uint64_t type metadata accessor for LegacyLocation(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003EE0C8);
}

uint64_t sub_100030F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServerLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ServerLocation(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003EE1A0);
}

unint64_t sub_100030F9C()
{
  unint64_t result = qword_1003EE1F0;
  if (!qword_1003EE1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE1F0);
  }
  return result;
}

uint64_t sub_100030FF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FMFAPSMessage(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003F02A8);
}

uint64_t type metadata accessor for DataManager.State(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003EFD48);
}

uint64_t sub_100031078(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    uint64_t v4 = type metadata accessor for Friend();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for Device();
    uint64_t v8 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v3);
    if (result) {
      return result;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v7 = a1;
    uint64_t v6 = v3;
  }

  return v5(v7, v6);
}

void *sub_100031190(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = type metadata accessor for Friend();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_10:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for Device();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100044014(&qword_1003EFCD0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_10003139C()
{
  _StringGuts.grow(_:)(66);
  v1._countAndFlagsBits = 0x6143654D6F747561;
  v1._object = (void *)0xEE003A656C626170;
  String.append(_:)(v1);
  if (*(unsigned char *)v0) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)v0) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001003745C0;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + 1)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 1)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 979659018;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + 8);
  uint64_t v11 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x697665447364690ALL;
  v13._object = (void *)0xED00003A64496563;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)(v0 + 24);
  uint64_t v15 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x3A656D616E0ALL;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  uint64_t v19 = *(void *)(v0 + 40);
  uint64_t v18 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v19;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return 0;
}

double sub_100031568@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000315DC(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)v10;
    *(_DWORD *)(a2 + 143) = *(_DWORD *)&v10[15];
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_1000315DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EDE68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v65 = a1;
  sub_100042524(a1, v9);
  sub_100032140();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v65);
  }
  uint64_t v10 = v6;
  uint64_t v61 = a2;
  LOBYTE(v75) = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v13 = v12;
  char v107 = v12 & 1;
  LOBYTE(v75) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  sub_100044014(&qword_1003EDE78);
  LOBYTE(v66) = 2;
  sub_1000321F8(&qword_1003EDE80);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v16 = v75;
  LOBYTE(v75) = 3;
  uint64_t v60 = v16;
  swift_bridgeObjectRetain();
  uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v75) = 4;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v64 = v18;
  uint64_t v57 = v19;
  uint64_t v21 = v20;
  uint64_t v22 = sub_100044014(&qword_1003ED230);
  LOBYTE(v66) = 5;
  uint64_t v23 = sub_100032194((unint64_t *)&qword_1003ED618);
  uint64_t v63 = v21;
  swift_bridgeObjectRetain();
  uint64_t v58 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LOBYTE(v66) = 6;
  uint64_t v56 = v75;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v24 = v75;
  LOBYTE(v75) = 7;
  uint64_t v55 = v24;
  swift_bridgeObjectRetain();
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v54 = v22;
  LOBYTE(v75) = 8;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain();
  int v52 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v62 = v26;
  uint64_t v51 = v11;
  LOBYTE(v75) = 9;
  int v50 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v75) = 10;
  uint64_t v49 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v27;
  LOBYTE(v75) = 11;
  swift_bridgeObjectRetain();
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v48 = v29;
  char v103 = v29 & 1;
  LOBYTE(v66) = 12;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = v75;
  LOBYTE(v75) = 13;
  swift_bridgeObjectRetain();
  LODWORD(v58) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v75) = 14;
  LODWORD(v54) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v101 = 15;
  int v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v21) = v52 & 1;
  int v45 = v52 & 1;
  int v52 = v50 & 1;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  *(void *)&long long v66 = v51;
  BYTE8(v66) = v13 & 1;
  *(void *)&long long v67 = v15;
  *((void *)&v67 + 1) = v60;
  *(void *)&long long v68 = v59;
  uint64_t v31 = v63;
  uint64_t v32 = v64;
  uint64_t v33 = v56;
  *((void *)&v68 + 1) = v64;
  *(void *)&long long v69 = v57;
  *((void *)&v69 + 1) = v63;
  *(void *)&long long v70 = v56;
  *((void *)&v70 + 1) = v55;
  *(void *)&long long v71 = v53;
  *((void *)&v71 + 1) = v62;
  LOBYTE(v72) = v21;
  BYTE1(v72) = v52;
  *((void *)&v72 + 1) = v49;
  *(void *)&long long v73 = v28;
  uint64_t v44 = v28;
  *((void *)&v73 + 1) = v47;
  v74[0] = v48 & 1;
  *(void *)&v74[8] = v30;
  v74[16] = v58;
  v74[17] = v54;
  v74[18] = v46;
  sub_10003C140((uint64_t)&v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v55;
  swift_bridgeObjectRelease();
  uint64_t v36 = v62;
  swift_bridgeObjectRelease();
  uint64_t v37 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000233E4((uint64_t)v65);
  uint64_t v75 = v51;
  char v76 = v107;
  *(_DWORD *)uint64_t v77 = *(_DWORD *)v106;
  *(_DWORD *)&v77[3] = *(_DWORD *)&v106[3];
  uint64_t v78 = v15;
  uint64_t v79 = v60;
  uint64_t v80 = v59;
  uint64_t v81 = v32;
  uint64_t v82 = v57;
  uint64_t v83 = v34;
  uint64_t v84 = v33;
  uint64_t v85 = v35;
  uint64_t v86 = v53;
  uint64_t v87 = v36;
  char v88 = v45;
  char v89 = v52;
  int v90 = v104;
  __int16 v91 = v105;
  uint64_t v92 = v49;
  uint64_t v93 = v37;
  uint64_t v94 = v47;
  char v95 = v103;
  *(_DWORD *)uint64_t v96 = *(_DWORD *)v102;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v102[3];
  uint64_t v97 = v30;
  char v98 = v58;
  char v99 = v54;
  char v100 = v46;
  uint64_t result = sub_10003C0AC((uint64_t)&v75);
  long long v39 = v73;
  uint64_t v40 = v61;
  *(_OWORD *)(v61 + 96) = v72;
  *(_OWORD *)(v40 + 112) = v39;
  *(_OWORD *)(v40 + 128) = *(_OWORD *)v74;
  *(_DWORD *)(v40 + 143) = *(_DWORD *)&v74[15];
  long long v41 = v69;
  *(_OWORD *)(v40 + 32) = v68;
  *(_OWORD *)(v40 + 48) = v41;
  long long v42 = v71;
  *(_OWORD *)(v40 + 64) = v70;
  *(_OWORD *)(v40 + 80) = v42;
  long long v43 = v67;
  *(_OWORD *)uint64_t v40 = v66;
  *(_OWORD *)(v40 + 16) = v43;
  return result;
}

unint64_t sub_100032140()
{
  unint64_t result = qword_1003EDE70;
  if (!qword_1003EDE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDE70);
  }
  return result;
}

uint64_t sub_100032194(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(&qword_1003ED230);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000321F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(&qword_1003EDE78);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032260(uint64_t a1, char *a2)
{
  long long v66 = a2;
  uint64_t v60 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v60 - 8);
  uint64_t v3 = __chkstk_darwin(v60);
  uint64_t v56 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v48 - v5;
  uint64_t v7 = sub_100044014(&qword_1003EF6D8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v12 = (char *)v48 - v11;
  uint64_t v13 = type metadata accessor for Row();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v48 - v18;
  uint64_t v20 = v67;
  uint64_t result = Connection.prepare(_:)();
  if (!v20)
  {
    long long v67 = v10;
    uint64_t v57 = v19;
    uint64_t v51 = v14;
    uint64_t v59 = v13;
    v48[1] = 0;
    uint64_t v49 = v6;
    int v50 = v12;
    uint64_t v22 = result;
    swift_retain();
    uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    long long v70 = &_swiftEmptyArrayStorage;
    sub_100032E40(0, v23 & ~(v23 >> 63), 0);
    swift_retain();
    uint64_t v61 = dispatch thunk of _AnySequenceBox._makeIterator()();
    v48[0] = v22;
    uint64_t result = swift_release();
    if (v23 < 0)
    {
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    uint64_t v58 = v2;
    uint64_t v24 = v59;
    if (v23)
    {
      uint64_t v54 = (void (**)(char *, char *, uint64_t))(v51 + 16);
      uint64_t v55 = (uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
      uint64_t v52 = v2 + 32;
      uint64_t v53 = (void (**)(char *, uint64_t))(v51 + 8);
      do
      {
        uint64_t v25 = v67;
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t result = (*v55)(v25, 1, v24);
        if (result == 1) {
          goto LABEL_51;
        }
        (*v54)(v17, v25, v24);
        if (qword_1003EC210 != -1) {
          swift_once();
        }
        uint64_t v26 = sub_100044014(&qword_1003EF230);
        sub_100044058(v26, (uint64_t)qword_10040BCA8);
        Row.subscript.getter();
        uint64_t v65 = v69;
        long long v66 = v68;
        if (qword_1003EC218 != -1) {
          swift_once();
        }
        sub_100044058(v26, (uint64_t)qword_10040BCC0);
        Row.subscript.getter();
        uint64_t v63 = v69;
        uint64_t v64 = v68;
        if (qword_1003EC220 != -1) {
          swift_once();
        }
        sub_100044058(v26, (uint64_t)qword_10040BCD8);
        Row.subscript.getter();
        uint64_t v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v68;
        if (qword_1003EC228 != -1) {
          swift_once();
        }
        uint64_t v27 = sub_100044014(&qword_1003EF278);
        sub_100044058(v27, (uint64_t)qword_10040BCF0);
        Row.subscript.getter();
        if (qword_1003EC230 != -1) {
          swift_once();
        }
        sub_100044058(v27, (uint64_t)qword_10040BD08);
        Row.subscript.getter();
        if (qword_1003EC238 != -1) {
          swift_once();
        }
        sub_100044058(v27, (uint64_t)qword_10040BD20);
        Row.subscript.getter();
        if (qword_1003EC240 != -1) {
          swift_once();
        }
        sub_100044058(v27, (uint64_t)qword_10040BD38);
        Row.subscript.getter();
        uint64_t v28 = v56;
        Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)();
        int v29 = *v53;
        uint64_t v24 = v59;
        (*v53)(v17, v59);
        v29(v67, v24);
        uint64_t v30 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100032E40(0, v30[2] + 1, 1);
          uint64_t v28 = v56;
          uint64_t v30 = v70;
        }
        uint64_t v31 = v60;
        uint64_t v2 = v58;
        unint64_t v33 = v30[2];
        unint64_t v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          sub_100032E40(v32 > 1, v33 + 1, 1);
          uint64_t v28 = v56;
          uint64_t v30 = v70;
        }
        v30[2] = v33 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v30+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v33, v28, v31);
        long long v70 = v30;
      }
      while (--v23);
    }
    uint64_t v34 = (uint64_t)v50;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v35 = v51;
    uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    uint64_t v63 = (char *)(v51 + 48);
    if (v62(v34, 1, v24) == 1)
    {
      uint64_t v36 = v70;
    }
    else
    {
      char v38 = *(char **)(v35 + 32);
      uint64_t v37 = v35 + 32;
      uint64_t v55 = (uint64_t (**)(char *, uint64_t, uint64_t))(v37 - 16);
      uint64_t v56 = v38;
      uint64_t v53 = (void (**)(char *, uint64_t))(v2 + 32);
      uint64_t v54 = (void (**)(char *, char *, uint64_t))(v37 - 24);
      uint64_t v51 = v37;
      do
      {
        long long v39 = v57;
        ((void (*)(char *, uint64_t, uint64_t))v56)(v57, v34, v24);
        (*v55)(v17, (uint64_t)v39, v24);
        if (qword_1003EC210 != -1) {
          swift_once();
        }
        uint64_t v40 = sub_100044014(&qword_1003EF230);
        sub_100044058(v40, (uint64_t)qword_10040BCA8);
        Row.subscript.getter();
        long long v66 = v69;
        long long v67 = v68;
        if (qword_1003EC218 != -1) {
          swift_once();
        }
        sub_100044058(v40, (uint64_t)qword_10040BCC0);
        Row.subscript.getter();
        uint64_t v64 = v69;
        uint64_t v65 = v68;
        if (qword_1003EC220 != -1) {
          swift_once();
        }
        sub_100044058(v40, (uint64_t)qword_10040BCD8);
        Row.subscript.getter();
        if (qword_1003EC228 != -1) {
          swift_once();
        }
        uint64_t v41 = sub_100044014(&qword_1003EF278);
        sub_100044058(v41, (uint64_t)qword_10040BCF0);
        Row.subscript.getter();
        if (qword_1003EC230 != -1) {
          swift_once();
        }
        sub_100044058(v41, (uint64_t)qword_10040BD08);
        Row.subscript.getter();
        if (qword_1003EC238 != -1) {
          swift_once();
        }
        sub_100044058(v41, (uint64_t)qword_10040BD20);
        Row.subscript.getter();
        if (qword_1003EC240 != -1) {
          swift_once();
        }
        sub_100044058(v41, (uint64_t)qword_10040BD38);
        Row.subscript.getter();
        long long v42 = v49;
        Device.init(identifier:deviceName:idsDeviceId:isActive:isThisDevice:isCompanion:isAutoMeCapable:)();
        long long v43 = *v54;
        uint64_t v24 = v59;
        ((void (*)(char *, uint64_t))*v54)(v17, v59);
        ((void (*)(char *, uint64_t))v43)(v57, v24);
        uint64_t v36 = v70;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100032E40(0, v36[2] + 1, 1);
          uint64_t v36 = v70;
        }
        uint64_t v44 = v60;
        uint64_t v45 = v58;
        unint64_t v47 = v36[2];
        unint64_t v46 = v36[3];
        if (v47 >= v46 >> 1)
        {
          sub_100032E40(v46 > 1, v47 + 1, 1);
          uint64_t v36 = v70;
        }
        v36[2] = v47 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v47, v42, v44);
        long long v70 = v36;
        uint64_t v34 = (uint64_t)v50;
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (v62(v34, 1, v24) != 1);
    }
    swift_release();
    sub_10000A520(v34, &qword_1003EF6D8);
    swift_release_n();
    sub_100044014(&qword_1003F2B18);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v36;
  }
  return result;
}

uint64_t sub_100032E40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001588F8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100032E60()
{
  return sub_100032EB4();
}

uint64_t sub_100032EB4()
{
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(390);
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000019;
  v1._object = (void *)0x80000001003748B0;
  String.append(_:)(v1);
  Double.write<A>(to:)();
  v2._countAndFlagsBits = 0x3A73657220;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  sub_100033324(v0 + 8, (uint64_t)v34);
  sub_100033324((uint64_t)v34, (uint64_t)&v31);
  sub_100033EAC((uint64_t)v34);
  sub_100044014(&qword_1003ED120);
  v3._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  v4._object = (void *)0x80000001003748D0;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._countAndFlagsBits = 0x49746E65696C6320;
  v5._object = (void *)0xEA00000000003A64;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000024;
  v9._object = (void *)0x80000001003748F0;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + 48)) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 48)) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD00000000000001FLL;
  v13._object = (void *)0x8000000100374920;
  String.append(_:)(v13);
  Double.write<A>(to:)();
  v14._countAndFlagsBits = 0xD000000000000022;
  v14._object = (void *)0x8000000100374940;
  String.append(_:)(v14);
  Double.write<A>(to:)();
  v15._countAndFlagsBits = 0xD00000000000001DLL;
  v15._object = (void *)0x8000000100374970;
  String.append(_:)(v15);
  Double.write<A>(to:)();
  v16._countAndFlagsBits = 0x3A644973727020;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  uint64_t v31 = *(void *)(v0 + 88);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD000000000000018;
  v18._object = (void *)0x8000000100374990;
  String.append(_:)(v18);
  Double.write<A>(to:)();
  v19._object = (void *)0x80000001003749B0;
  v19._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v19);
  Double.write<A>(to:)();
  v20._countAndFlagsBits = 0xD000000000000017;
  v20._object = (void *)0x80000001003749D0;
  String.append(_:)(v20);
  Double.write<A>(to:)();
  v21._countAndFlagsBits = 0xD00000000000001ALL;
  v21._object = (void *)0x80000001003749F0;
  String.append(_:)(v21);
  Double.write<A>(to:)();
  v22._countAndFlagsBits = 0xD000000000000013;
  v22._object = (void *)0x8000000100374A10;
  String.append(_:)(v22);
  uint64_t v23 = *(void *)(v0 + 128);
  uint64_t v24 = *(void **)(v0 + 136);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0xD000000000000011;
  v26._object = (void *)0x8000000100374A30;
  String.append(_:)(v26);
  uint64_t v31 = *(void *)(v0 + 144);
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000100374A50;
  v28._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v28);
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_100033324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ED120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003338C()
{
  v47[0] = 0;
  v47[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(276);
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  v1._countAndFlagsBits = 0x203A6F666E49796DLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  long long v2 = v0[3];
  v57[2] = v0[2];
  v57[3] = v2;
  long long v3 = v0[5];
  v57[4] = v0[4];
  v57[5] = v3;
  long long v4 = v0[1];
  v57[0] = *v0;
  v57[1] = v4;
  sub_1000351EC((uint64_t)v57);
  v5._countAndFlagsBits = sub_100033B78();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_100035180((uint64_t)v57);
  v6._countAndFlagsBits = 0x736563697665640ALL;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A73666572700ALL;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  sub_100013B50((uint64_t)v0 + 104, (uint64_t)v56, &qword_1003EE258);
  sub_100013B50((uint64_t)v56, (uint64_t)v47, &qword_1003EE258);
  sub_100033ED8(v56);
  sub_100044014(&qword_1003EE258);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0xEB000000003A7372;
  v10._countAndFlagsBits = 0x65776F6C6C6F660ALL;
  String.append(_:)(v10);
  sub_100013B50((uint64_t)v0 + 136, (uint64_t)v55, &qword_1003EE260);
  sub_100013B50((uint64_t)v55, (uint64_t)v47, &qword_1003EE260);
  sub_1000B8BB4((uint64_t)v55);
  sub_100044014(&qword_1003EE260);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x69776F6C6C6F660ALL;
  v12._object = (void *)0xEB000000003A676ELL;
  String.append(_:)(v12);
  sub_100013B50((uint64_t)(v0 + 9), (uint64_t)v54, &qword_1003EE260);
  sub_100013B50((uint64_t)v54, (uint64_t)v47, &qword_1003EE260);
  sub_1000B8BB4((uint64_t)v54);
  v13._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x80000001003740E0;
  v14._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v14);
  sub_100013B50((uint64_t)v0 + 152, (uint64_t)v53, &qword_1003EE268);
  sub_100013B50((uint64_t)v53, (uint64_t)v47, &qword_1003EE268);
  sub_1000B8BB4((uint64_t)v53);
  sub_100044014(&qword_1003EE268);
  v15._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x8000000100374100;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  sub_100013B50((uint64_t)(v0 + 10), (uint64_t)v52, &qword_1003EE268);
  sub_100013B50((uint64_t)v52, (uint64_t)v47, &qword_1003EE268);
  sub_1000B8BB4((uint64_t)v52);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000100374120;
  v18._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  sub_100013B50((uint64_t)(v0 + 11), (uint64_t)v51, &qword_1003ECD88);
  sub_100013B50((uint64_t)v51, (uint64_t)v47, &qword_1003ECD88);
  sub_10004BA58(v51);
  sub_100044014(&qword_1003ECD88);
  v19._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000012;
  v20._object = (void *)0x8000000100374140;
  String.append(_:)(v20);
  sub_100013B50((uint64_t)v0 + 216, (uint64_t)v50, &qword_1003EE270);
  sub_100013B50((uint64_t)v50, (uint64_t)v47, &qword_1003EE270);
  sub_1000B8BB4((uint64_t)v50);
  sub_100044014(&qword_1003EE270);
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0xEB000000003A736ELL;
  v22._countAndFlagsBits = 0x6F697461636F6C0ALL;
  String.append(_:)(v22);
  sub_100013B50((uint64_t)(v0 + 14), (uint64_t)v49, &qword_1003EE278);
  sub_100013B50((uint64_t)v49, (uint64_t)v47, &qword_1003EE278);
  sub_1000B8BB4((uint64_t)v49);
  sub_100044014(&qword_1003EE278);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x745368637465660ALL;
  v24._object = (void *)0xED00003A73757461;
  String.append(_:)(v24);
  sub_100013B50((uint64_t)v0 + 232, (uint64_t)&v48, &qword_1003EE280);
  sub_100013B50((uint64_t)&v48, (uint64_t)v47, &qword_1003EE280);
  sub_100044014(&qword_1003EE280);
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x437265767265730ALL;
  v26._object = (void *)0xEF3A747865746E6FLL;
  String.append(_:)(v26);
  sub_100013B50((uint64_t)(v0 + 15), (uint64_t)v47, &qword_1003ED068);
  sub_100013B50((uint64_t)v47, (uint64_t)v41, &qword_1003ED068);
  sub_100013BB4(v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100044014(&qword_1003ED068);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x3A6769666E6F630ALL;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  sub_100013B50((uint64_t)(v0 + 25), (uint64_t)v41, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v41, (uint64_t)v40, &qword_1003ECCD8);
  sub_100044014(&qword_1003ECCD8);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000013;
  v30._object = (void *)0x8000000100374160;
  String.append(_:)(v30);
  sub_100013B50((uint64_t)(v0 + 34), (uint64_t)v40, &qword_1003EE288);
  sub_100013B50((uint64_t)v40, (uint64_t)v46, &qword_1003EE288);
  sub_1000B8BB4((uint64_t)v40);
  sub_100044014(&qword_1003EE288);
  v31._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0xD000000000000018;
  v32._object = (void *)0x8000000100374180;
  String.append(_:)(v32);
  sub_100013B50((uint64_t)v0 + 552, (uint64_t)v46, &qword_1003EE288);
  sub_100013B50((uint64_t)v46, (uint64_t)v45, &qword_1003EE288);
  sub_1000B8BB4((uint64_t)v46);
  v33._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x65636E6546796D0ALL;
  v34._object = (void *)0xEF203A7465534973;
  String.append(_:)(v34);
  sub_100013B50((uint64_t)(v0 + 35), (uint64_t)v45, &qword_1003EE288);
  sub_100013B50((uint64_t)v45, (uint64_t)v44, &qword_1003EE288);
  sub_1000B8BB4((uint64_t)v45);
  v35._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0xD000000000000014;
  v36._object = (void *)0x80000001003741A0;
  String.append(_:)(v36);
  sub_100013B50((uint64_t)v0 + 568, (uint64_t)v44, &qword_1003EE288);
  sub_100013B50((uint64_t)v44, (uint64_t)&v39, &qword_1003EE288);
  sub_1000B8BB4((uint64_t)v44);
  v37._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_100033B78()
{
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(129);
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  v1._object = (void *)0x80000001003741C0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  sub_100013B50(v0, (uint64_t)v28, &qword_1003ED120);
  sub_100013B50((uint64_t)v28, (uint64_t)v27, &qword_1003ED120);
  sub_100033EAC((uint64_t)v28);
  sub_100044014(&qword_1003ED120);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x496563697665640ALL;
  v3._object = (void *)0xEA00000000003A64;
  String.append(_:)(v3);
  sub_100013B50(v0 + 16, (uint64_t)v27, &qword_1003ED120);
  sub_100013B50((uint64_t)v27, (uint64_t)v26, &qword_1003ED120);
  sub_100033EAC((uint64_t)v27);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000011;
  v5._object = (void *)0x80000001003741E0;
  String.append(_:)(v5);
  Double.write<A>(to:)();
  v6._countAndFlagsBits = 0xD000000000000010;
  v6._object = (void *)0x8000000100374200;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + 40)) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 40)) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x3A736C69616D650ALL;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x614E74737269660ALL;
  v12._object = (void *)0xEB000000003A656DLL;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)(v0 + 56);
  Swift::String v14 = *(void **)(v0 + 64);
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x8000000100374220;
  v16._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v16);
  if (*(unsigned char *)(v0 + 72)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 72)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6369766544656D0ALL;
  v20._object = (void *)0xEC0000003A644965;
  String.append(_:)(v20);
  sub_100013B50(v0 + 80, (uint64_t)v26, &qword_1003ED120);
  sub_100013B50((uint64_t)v26, (uint64_t)&v23, &qword_1003ED120);
  sub_100033EAC((uint64_t)v26);
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_100033EAC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100033ED8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100033F0C()
{
  uint64_t v97 = v0;
  uint64_t v93 = (void *)(v0 + 3248);
  uint64_t v1 = v0 + 4016;
  sub_100013B50(*(void *)(v0 + 5248) + 256, v0 + 4016, &qword_1003ECCD8);
  sub_100013B50(v0 + 4016, v0 + 4160, &qword_1003ECCD8);
  if (sub_10005F088(v0 + 4160) != 1) {
    goto LABEL_4;
  }
  sub_100013B50(v0 + 448, v0 + 1312, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 1312) == 1)
  {
    uint64_t v1 = v0 + 3872;
    sub_1000C0DC8(v0 + 3872);
LABEL_4:
    uint64_t v2 = v1;
    uint64_t v3 = v0 + 3728;
    goto LABEL_6;
  }
  memcpy((void *)(v0 + 880), (const void *)(v0 + 1312), 0x1B0uLL);
  sub_100013B50(v0 + 1136, v0 + 4592, &qword_1003ECCD8);
  uint64_t v2 = v0 + 4592;
  uint64_t v3 = v0 + 3728;
LABEL_6:
  sub_100013B50(v2, v3, &qword_1003ECCD8);
  sub_100013B50(*(void *)(v0 + 5248) + 96, v0 + 3408, &qword_1003ED068);
  sub_100013B50(v0 + 3408, v0 + 3568, &qword_1003ED068);
  if (sub_100085654(v0 + 3568) != 1)
  {
    uint64_t v4 = v0 + 3408;
    goto LABEL_10;
  }
  sub_100013B50(v0 + 448, v0 + 2176, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 2176) == 1)
  {
    sub_10008DDB0((_OWORD *)(v0 + 3088));
    uint64_t v4 = v0 + 3088;
LABEL_10:
    Swift::String v5 = (void *)(v0 + 3248);
    uint64_t v6 = v0 + 3248;
    goto LABEL_12;
  }
  memcpy((void *)(v0 + 1744), (const void *)(v0 + 2176), 0x1B0uLL);
  sub_100013B50(v0 + 1840, v0 + 2608, &qword_1003ED068);
  sub_100013BB4((void *)(v0 + 2608), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  uint64_t v4 = v0 + 2608;
  Swift::String v5 = (void *)(v0 + 3248);
  uint64_t v6 = v0 + 3248;
LABEL_12:
  sub_100013B50(v4, v6, &qword_1003ED068);
  uint64_t v7 = *(void **)(v0 + 5248);
  uint64_t v8 = v7[51];
  if (v8)
  {
    uint64_t v9 = v7[52];
    uint64_t v10 = v7[53];
    uint64_t v11 = v7[50];
  }
  else
  {
    sub_100013B50(v0 + 448, v0 + 16, &qword_1003ECCD0);
    if (sub_10005F070(v0 + 16) == 1)
    {
      sub_100013BB4((void *)(v0 + 3408), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
      uint64_t v92 = 0;
      uint64_t v8 = 0;
      uint64_t v12 = 0;
      uint64_t v95 = 0;
      goto LABEL_18;
    }
    uint64_t v11 = *(void *)(v0 + 416);
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 432);
    uint64_t v10 = *(void *)(v0 + 440);
  }
  sub_100013BB4((void *)(v0 + 3408), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  uint64_t v92 = v11;
  uint64_t v12 = v9;
  uint64_t v95 = v10;
  sub_1000372F0(v11, v8);
  sub_10000E224(v0 + 448);
LABEL_18:
  if (qword_1003EC3F0 != -1) {
    swift_once();
  }
  uint64_t v13 = *(void **)(v0 + 5248);
  uint64_t v83 = type metadata accessor for Logger();
  sub_100044058(v83, (uint64_t)qword_10040C248);
  sub_100035384(v13);
  sub_1000372F0(v92, v8);
  uint64_t v14 = v8;
  sub_100013BB4(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100035384(v13);
  uint64_t v90 = v12;
  sub_1000372F0(v92, v8);
  sub_100013BB4(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  Swift::String v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 5248);
  uint64_t v89 = v14;
  if (v17)
  {
    uint64_t v19 = swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136447747;
    long long v20 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)(v0 + 4928) = *(_OWORD *)v18;
    *(_OWORD *)(v0 + 4944) = v20;
    long long v21 = *(_OWORD *)(v18 + 80);
    long long v23 = *(_OWORD *)(v18 + 32);
    long long v22 = *(_OWORD *)(v18 + 48);
    *(_OWORD *)(v0 + 4992) = *(_OWORD *)(v18 + 64);
    *(_OWORD *)(v0 + 5008) = v21;
    *(_OWORD *)(v0 + 4960) = v23;
    *(_OWORD *)(v0 + 4976) = v22;
    sub_1000351EC(v0 + 4928);
    uint64_t v24 = sub_100033B78();
    unint64_t v26 = v25;
    sub_100035180(v0 + 4928);
    *(void *)(v0 + 5160) = sub_100037004(v24, v26, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100035258((void *)v18);
    sub_100035258((void *)v18);
    *(_WORD *)(v19 + 12) = 2160;
    *(void *)(v0 + 5152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 22) = 2081;
    *(void *)(v0 + 5024) = v92;
    *(void *)(v0 + 5032) = v14;
    *(void *)(v0 + 5040) = v90;
    *(void *)(v0 + 5048) = v95;
    sub_1000372F0(v92, v14);
    sub_100044014(&qword_1003EE258);
    uint64_t v27 = String.init<A>(describing:)();
    *(void *)(v0 + 5168) = sub_100037004(v27, v28, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037334(v92, v14);
    sub_100037334(v92, v14);
    *(_WORD *)(v19 + 32) = 2160;
    *(void *)(v0 + 5176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 42) = 2081;
    sub_100013B50((uint64_t)v93, v0 + 2768, &qword_1003ED068);
    sub_100013BB4(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_100044014(&qword_1003ED068);
    uint64_t v29 = String.init<A>(describing:)();
    *(void *)(v0 + 5192) = sub_100037004(v29, v30, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013BB4(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100013BB4(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    *(_WORD *)(v19 + 52) = 2160;
    *(void *)(v0 + 5200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 62) = 2081;
    uint64_t v31 = v0 + 3728;
    sub_100013B50(v0 + 3728, v0 + 4448, &qword_1003ECCD8);
    sub_100044014(&qword_1003ECCD8);
    uint64_t v32 = String.init<A>(describing:)();
    *(void *)(v0 + 5216) = sub_100037004(v32, v33, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "LocalStorageService write new serverSettings\nmyInfo: %{public}s\nprefs: %{private,mask.hash}s\ncontext: %{private,mask.hash}s\nconfig: %{private,mask.hash}s", (uint8_t *)v19, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v34 = v90;
  }
  else
  {
    sub_100035258((void *)v18);
    sub_100035258((void *)v18);
    sub_100037334(v92, v14);
    sub_100037334(v92, v14);
    sub_100013BB4(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100013BB4(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);

    uint64_t v34 = v90;
    uint64_t v31 = v0 + 3728;
  }
  uint64_t v35 = *(void *)(v0 + 5312);
  Swift::String v36 = *(_OWORD **)(v0 + 5248);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  long long v37 = v36[1];
  *(_OWORD *)(v0 + 4832) = *v36;
  *(_OWORD *)(v0 + 4848) = v37;
  long long v38 = v36[2];
  long long v39 = v36[3];
  long long v40 = v36[5];
  *(_OWORD *)(v0 + 4896) = v36[4];
  *(_OWORD *)(v0 + 4912) = v40;
  *(_OWORD *)(v0 + 4864) = v38;
  *(_OWORD *)(v0 + 4880) = v39;
  long long v41 = v36[1];
  *(_OWORD *)(v0 + 4736) = *v36;
  *(_OWORD *)(v0 + 4752) = v41;
  long long v42 = v36[5];
  long long v44 = v36[2];
  long long v43 = v36[3];
  *(_OWORD *)(v0 + 4800) = v36[4];
  *(_OWORD *)(v0 + 4816) = v42;
  *(_OWORD *)(v0 + 4768) = v44;
  *(_OWORD *)(v0 + 4784) = v43;
  sub_1000351EC(v0 + 4832);
  sub_10004E5CC();
  uint64_t v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v47 = v46;
  sub_100035180(v0 + 4832);
  swift_release();
  if (v35)
  {
    sub_100013BB4(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100037334(v92, v89);
    if (qword_1003EC3F0 != -1) {
      swift_once();
    }
    sub_100044058(v83, (uint64_t)qword_10040C248);
    swift_errorRetain();
    swift_errorRetain();
    char v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      v96[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136446466;
      *(void *)(v0 + 5232) = sub_100037004(0xD000000000000017, 0x8000000100378570, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2082;
      *(void *)(v0 + 5208) = v35;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v51 = String.init<A>(describing:)();
      *(void *)(v0 + 5224) = sub_100037004(v51, v52, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s error: %{public}s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v56 = *(void *)(v0 + 5240);
    uint64_t v57 = type metadata accessor for Insert();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 1, 1, v57);
  }
  else
  {
    unint64_t v86 = v47;
    uint64_t v87 = v45;
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100013B50(v31, v0 + 4304, &qword_1003ECCD8);
    sub_100044014(&qword_1003ECCD8);
    sub_1002473E0(&qword_1003F2B88, &qword_1003ECCD8, (void (*)(void))sub_1000E602C);
    uint64_t v53 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v55 = v54;
    swift_release();
    uint64_t v88 = v53;
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100013B50((uint64_t)v93, v0 + 2928, &qword_1003ED068);
    sub_100044014(&qword_1003ED068);
    sub_1002473E0(&qword_1003F2B90, &qword_1003ED068, (void (*)(void))sub_10004E2E4);
    uint64_t v58 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t type = v59;
    uint64_t v84 = v58;
    swift_release();
    sub_100013BB4(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    swift_allocObject();
    PropertyListEncoder.init()();
    *(void *)(v0 + 5056) = v92;
    *(void *)(v0 + 5064) = v89;
    *(void *)(v0 + 5072) = v34;
    *(void *)(v0 + 5080) = v95;
    sub_100044014(&qword_1003EE258);
    sub_1002473E0(&qword_1003F2B98, &qword_1003EE258, (void (*)(void))sub_1000E6080);
    uint64_t v60 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v85 = v55;
    unint64_t v81 = v61;
    uint64_t v94 = v60;
    swift_release();
    sub_100037334(v92, v89);
    if (qword_1003EC0C8 != -1) {
      swift_once();
    }
    uint64_t v62 = *(void *)(v0 + 5296);
    uint64_t v63 = *(void *)(v0 + 5288);
    uint64_t v64 = *(void *)(v0 + 5280);
    uint64_t v65 = *(void *)(v0 + 5272);
    uint64_t v66 = *(void *)(v0 + 5264);
    uint64_t v67 = *(void *)(v0 + 5256);
    uint64_t v68 = sub_100044058(v64, (uint64_t)qword_10040B8B8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v68, v64);
    (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))(v65, enum case for OnConflict.replace(_:), v67);
    sub_100044014(&qword_1003EF7C8);
    type metadata accessor for Setter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1003677B0;
    if (qword_1003EC248 != -1) {
      swift_once();
    }
    uint64_t v69 = sub_100044014(&qword_1003EF220);
    sub_100044058(v69, (uint64_t)qword_10040BD50);
    *(void *)(v0 + 5184) = 0;
    <- infix<A>(_:_:)();
    if (qword_1003EC250 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_100044014(&qword_1003EF1F0);
    sub_100044058(v70, (uint64_t)qword_10040BD68);
    *(void *)(v0 + 5120) = v87;
    *(void *)(v0 + 5128) = v86;
    <- infix<A>(_:_:)();
    if (qword_1003EC260 != -1) {
      swift_once();
    }
    uint64_t v71 = sub_100044014(&qword_1003EF200);
    sub_100044058(v71, (uint64_t)qword_10040BD98);
    *(void *)(v0 + 5088) = v53;
    *(void *)(v0 + 5096) = v55;
    <- infix<A>(_:_:)();
    if (qword_1003EC258 != -1) {
      swift_once();
    }
    sub_100044058(v71, (uint64_t)qword_10040BD80);
    *(void *)(v0 + 5104) = v84;
    *(void *)(v0 + 5112) = type;
    <- infix<A>(_:_:)();
    if (qword_1003EC268 != -1) {
      swift_once();
    }
    uint64_t v72 = *(void *)(v0 + 5296);
    uint64_t v73 = *(void *)(v0 + 5288);
    uint64_t v74 = *(void *)(v0 + 5280);
    uint64_t v75 = *(void *)(v0 + 5272);
    uint64_t v76 = *(void *)(v0 + 5264);
    uint64_t v91 = *(void *)(v0 + 5256);
    uint64_t v77 = *(void *)(v0 + 5240);
    sub_100044058(v71, (uint64_t)qword_10040BDB0);
    *(void *)(v0 + 5136) = v94;
    *(void *)(v0 + 5144) = v81;
    <- infix<A>(_:_:)();
    QueryType.insert(or:_:)();
    swift_bridgeObjectRelease();
    sub_1000440E8(v94, v81);
    sub_1000440E8(v84, type);
    sub_1000440E8(v88, v85);
    sub_100044090(v87, v86);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v91);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    uint64_t v78 = type metadata accessor for Insert();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 0, 1, v78);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v79 = *(uint64_t (**)(void))(v0 + 8);
  return v79();
}

uint64_t sub_100035180(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000351EC(uint64_t a1)
{
  return a1;
}

void *sub_100035258(void *a1)
{
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[12];
  uint64_t v7 = a1[15];
  uint64_t v8 = a1[14];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[16];
  uint64_t v2 = a1[51];
  uint64_t v4 = a1[50];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037504(v10, v9, v8, v7, v6, v5);
  sub_100037334(v4, v2);
  return a1;
}

void *sub_100035384(void *a1)
{
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[12];
  uint64_t v7 = a1[15];
  uint64_t v8 = a1[14];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[16];
  uint64_t v2 = a1[51];
  uint64_t v4 = a1[50];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000376F4(v10, v9, v8, v7, v6, v5);
  sub_1000372F0(v4, v2);
  return a1;
}

uint64_t sub_1000354B4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v93 = a2;
  uint64_t v4 = sub_100044014(&qword_1003EE298);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100036D10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)a1);
  }
  LOBYTE(v94[0]) = 0;
  sub_10003EFC8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v87 = v5;
  uint64_t v88 = a1;
  uint64_t v9 = *((void *)&v95[0] + 1);
  *(void *)&long long v92 = v4;
  uint64_t v10 = *((void *)&v95[1] + 1);
  uint64_t v11 = *(void *)&v95[2];
  uint64_t v12 = *(void *)&v95[3];
  uint64_t v89 = 0;
  uint64_t v13 = *(void *)&v95[4];
  uint64_t v14 = *((void *)&v95[5] + 1);
  uint64_t v84 = *(void *)&v95[1];
  uint64_t v85 = *(void *)&v95[0];
  v102[0] = v95[0];
  v102[1] = v95[1];
  *(void *)&v102[2] = *(void *)&v95[2];
  int v83 = BYTE8(v95[2]);
  BYTE8(v102[2]) = BYTE8(v95[2]);
  v102[3] = v95[3];
  uint64_t v82 = *((void *)&v95[3] + 1);
  *(void *)&v102[4] = *(void *)&v95[4];
  int v81 = BYTE8(v95[4]);
  BYTE8(v102[4]) = BYTE8(v95[4]);
  uint64_t v80 = *(void *)&v95[5];
  v102[5] = v95[5];
  sub_100044014(&qword_1003EE2B0);
  LOBYTE(v94[0]) = 1;
  sub_10003676C(&qword_1003EE2B8, &qword_1003EE2B0, (void (*)(void))sub_1000C0B44);
  uint64_t v91 = v9;
  uint64_t v15 = v10;
  uint64_t v16 = v92;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v90 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = v89;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v87 + 8))(v7, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v77 = v13;
  uint64_t v78 = v14;
  uint64_t v74 = v15;
  uint64_t v18 = *(void *)&v95[0];
  *(void *)&v102[6] = *(void *)&v95[0];
  LOBYTE(v94[0]) = 2;
  sub_100036D64();
  uint64_t v79 = v18;
  swift_bridgeObjectRetain();
  unint64_t v86 = v7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v20 = *((void *)&v95[0] + 1);
  uint64_t v19 = *(void *)&v95[0];
  long long v21 = v95[1];
  *((void *)&v102[6] + 1) = *(void *)&v95[0];
  unsigned char v102[7] = *(_OWORD *)((char *)v95 + 8);
  *(void *)&v102[8] = *((void *)&v95[1] + 1);
  sub_100044014(&qword_1003EE260);
  LOBYTE(v94[0]) = 3;
  uint64_t v75 = v20;
  uint64_t v76 = v19;
  uint64_t v72 = *((void *)&v21 + 1);
  uint64_t v73 = v21;
  sub_1000372F0(v19, v20);
  sub_10003676C(&qword_1003EE2D0, &qword_1003EE260, (void (*)(void))sub_1000C0B98);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((void *)&v102[8] + 1) = *(void *)&v95[0];
  LOBYTE(v94[0]) = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v102[9] = *(void *)&v95[0];
  sub_100044014(&qword_1003EE2F0);
  LOBYTE(v94[0]) = 5;
  sub_10003676C(&qword_1003EE2F8, &qword_1003EE2F0, (void (*)(void))sub_1000C0C28);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *((void *)&v102[9] + 1) = *(void *)&v95[0];
  LOBYTE(v94[0]) = 6;
  uint64_t v71 = *(void *)&v95[0];
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v22 = *(void *)&v95[0];
  *(void *)&v102[10] = *(void *)&v95[0];
  sub_100044014(&qword_1003EE308);
  LOBYTE(v94[0]) = 7;
  sub_10003676C(&qword_1003EE310, &qword_1003EE308, (void (*)(void))sub_1000C0C7C);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v23 = *(void *)&v95[0];
  uint64_t v89 = v22;
  *((void *)&v102[10] + 1) = *(void *)&v95[0];
  LOBYTE(v94[0]) = 8;
  sub_100036CBC();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v70 = v23;
  uint64_t v24 = *((void *)&v95[0] + 1);
  uint64_t v25 = *(void *)&v95[0];
  long long v26 = v95[1];
  uint64_t v27 = *(void *)&v95[2];
  v102[11] = v95[0];
  v102[12] = v95[1];
  *(void *)&v102[13] = *(void *)&v95[2];
  sub_100044014(&qword_1003EE328);
  LOBYTE(v94[0]) = 9;
  uint64_t v68 = *((void *)&v26 + 1);
  uint64_t v69 = v25;
  uint64_t v66 = v26;
  uint64_t v67 = v24;
  uint64_t v28 = v27;
  sub_100036C68(v25);
  sub_10003676C(&qword_1003EE330, &qword_1003EE328, (void (*)(void))sub_1000C0CD0);
  uint64_t v29 = v86;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v30 = *(void *)&v95[0];
  uint64_t v31 = v91;
  uint64_t v32 = v89;
  *((void *)&v102[13] + 1) = *(void *)&v95[0];
  sub_100044014(&qword_1003EE340);
  char v100 = 10;
  sub_1000C0D24();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v33 = v101;
  *(void *)&v102[14] = v101;
  v97[151] = 12;
  sub_100036EB0();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)&v98, (uint64_t)v95, &qword_1003ED068);
  sub_100013B50((uint64_t)v95, (uint64_t)v99, &qword_1003ED068);
  sub_100013B50((uint64_t)v99, (uint64_t)&v102[15], &qword_1003ED068);
  char v96 = 13;
  sub_100013BB4(v99, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
  sub_100036F04();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v95, (uint64_t)v94, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v94, (uint64_t)v97, &qword_1003ECCD8);
  sub_100013B50((uint64_t)v97, (uint64_t)&v102[25], &qword_1003ECCD8);
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v95[1] + 1) = My;
  *(void *)&v95[2] = sub_1000C0DFC(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v35 = sub_10003E0F4((uint64_t *)v95);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v35, enum case for Feature.FindMy.fencesMigration(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_1000233E4((uint64_t)v95);
  uint64_t v64 = v33;
  uint64_t v65 = v30;
  if (My)
  {
    *(void *)&v102[34] = sub_1000B88A8();
    *((void *)&v102[34] + 1) = sub_1000B88A8();
    *(void *)&v102[35] = sub_1000B88A8();
    uint64_t v36 = sub_1000B88A8();
  }
  else
  {
    uint64_t v36 = 0;
    memset(&v102[34], 0, 24);
  }
  *((void *)&v102[35] + 1) = v36;
  LOBYTE(v95[0]) = 11;
  uint64_t result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v42 = v37;
  if (!v37) {
    goto LABEL_10;
  }
  uint64_t v43 = HIBYTE(v37) & 0xF;
  uint64_t v44 = result & 0xFFFFFFFFFFFFLL;
  if ((v42 & 0x2000000000000000) != 0) {
    uint64_t v45 = HIBYTE(v42) & 0xF;
  }
  else {
    uint64_t v45 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v45)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if ((v42 & 0x1000000000000000) != 0)
  {
    uint64_t v47 = (uint64_t)sub_100362910(result, v42, 10);
    char v63 = v62;
    swift_bridgeObjectRelease();
    if ((v63 & 1) == 0)
    {
      uint64_t v31 = v91;
      uint64_t v29 = v86;
LABEL_51:
      (*(void (**)(char *, void))(v87 + 8))(v29, v92);
      char v39 = sub_100036DB8(v47);
      uint64_t v38 = v32;
      if (v39 == 21)
      {
        char v39 = 0;
        BYTE8(v102[14]) = 0;
        goto LABEL_12;
      }
LABEL_11:
      BYTE8(v102[14]) = v39;
LABEL_12:
      uint64_t v40 = v85;
      uint64_t v85 = *(void *)&v102[9];
      unint64_t v86 = (char *)*((void *)&v102[8] + 1);
      long long v92 = v102[34];
      uint64_t v87 = *((void *)&v102[35] + 1);
      uint64_t v41 = *(void *)&v102[35];
      *(void *)&v94[0] = v40;
      *((void *)&v94[0] + 1) = v31;
      *(void *)&v94[1] = v84;
      *((void *)&v94[1] + 1) = v74;
      *(void *)&v94[2] = v11;
      BYTE8(v94[2]) = v83;
      *(void *)&Swift::Int v94[3] = v90;
      *((void *)&v94[3] + 1) = v82;
      *(void *)&v94[4] = v77;
      BYTE8(v94[4]) = v81;
      *(void *)&v94[5] = v80;
      *((void *)&v94[5] + 1) = v78;
      *(void *)&v94[6] = v79;
      *((void *)&v94[6] + 1) = v76;
      *(void *)&v94[7] = v75;
      *((void *)&v94[7] + 1) = v73;
      *(void *)&v94[8] = v72;
      *((void *)&v94[8] + 1) = *((void *)&v102[8] + 1);
      *(void *)&v94[9] = *(void *)&v102[9];
      *((void *)&v94[9] + 1) = v71;
      *(void *)&v94[10] = v38;
      *((void *)&v94[10] + 1) = v70;
      *(void *)&v94[11] = v69;
      *((void *)&v94[11] + 1) = v67;
      *(void *)&v94[12] = v66;
      *((void *)&v94[12] + 1) = v68;
      *(void *)&v94[13] = v28;
      *((void *)&v94[13] + 1) = v65;
      *(void *)&v94[14] = v64;
      BYTE8(v94[14]) = v39;
      sub_100013B50((uint64_t)v99, (uint64_t)&v94[15], &qword_1003ED068);
      sub_100013B50((uint64_t)v97, (uint64_t)&v94[25], &qword_1003ECCD8);
      v94[34] = v92;
      *(void *)&v94[35] = v41;
      *((void *)&v94[35] + 1) = v87;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100036A4C(v94);
      sub_100013BB4(v99, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000369FC(v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100037334(v76, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000233E4((uint64_t)v88);
      memcpy(v95, v102, sizeof(v95));
      sub_1000367D8(v95);
      return (uint64_t)memcpy(v93, v94, 0x240uLL);
    }
    uint64_t v31 = v91;
    uint64_t v29 = v86;
LABEL_10:
    uint64_t v38 = v32;
    (*(void (**)(char *, void))(v87 + 8))(v29, v92);
    char v39 = 11;
    goto LABEL_11;
  }
  if ((v42 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unint64_t v46 = (unsigned __int8 *)((v42 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v46 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v47 = (uint64_t)sub_1003628F8(v46, v44, 10);
    char v49 = v48 & 1;
LABEL_50:
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0) {
      goto LABEL_51;
    }
    goto LABEL_10;
  }
  *(void *)&v95[0] = result;
  *((void *)&v95[0] + 1) = v42 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v43)
    {
      if (v43 != 1 && (BYTE1(result) - 48) <= 9u)
      {
        uint64_t v47 = (BYTE1(result) - 48);
        uint64_t v54 = v43 - 2;
        if (v54)
        {
          unint64_t v55 = (unsigned __int8 *)v95 + 2;
          while (1)
          {
            unsigned int v56 = *v55 - 48;
            if (v56 > 9) {
              goto LABEL_47;
            }
            uint64_t v57 = 10 * v47;
            if ((unsigned __int128)(v47 * (__int128)10) >> 64 != (10 * v47) >> 63) {
              goto LABEL_47;
            }
            uint64_t v47 = v57 + v56;
            if (__OFADD__(v57, v56)) {
              goto LABEL_47;
            }
            char v49 = 0;
            ++v55;
            if (!--v54) {
              goto LABEL_50;
            }
          }
        }
        goto LABEL_49;
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v43 && (result - 48) <= 9u)
      {
        uint64_t v47 = (result - 48);
        uint64_t v58 = v43 - 1;
        if (v58)
        {
          unint64_t v59 = (unsigned __int8 *)v95 + 1;
          while (1)
          {
            unsigned int v60 = *v59 - 48;
            if (v60 > 9) {
              goto LABEL_47;
            }
            uint64_t v61 = 10 * v47;
            if ((unsigned __int128)(v47 * (__int128)10) >> 64 != (10 * v47) >> 63) {
              goto LABEL_47;
            }
            uint64_t v47 = v61 + v60;
            if (__OFADD__(v61, v60)) {
              goto LABEL_47;
            }
            char v49 = 0;
            ++v59;
            if (!--v58) {
              goto LABEL_50;
            }
          }
        }
        goto LABEL_49;
      }
LABEL_47:
      uint64_t v47 = 0;
      char v49 = 1;
      goto LABEL_50;
    }
    if (v43)
    {
      if (v43 != 1 && (BYTE1(result) - 48) <= 9u)
      {
        uint64_t v47 = -(uint64_t)(BYTE1(result) - 48);
        uint64_t v50 = v43 - 2;
        if (v50)
        {
          uint64_t v51 = (unsigned __int8 *)v95 + 2;
          while (1)
          {
            unsigned int v52 = *v51 - 48;
            if (v52 > 9) {
              goto LABEL_47;
            }
            uint64_t v53 = 10 * v47;
            if ((unsigned __int128)(v47 * (__int128)10) >> 64 != (10 * v47) >> 63) {
              goto LABEL_47;
            }
            uint64_t v47 = v53 - v52;
            if (__OFSUB__(v53, v52)) {
              goto LABEL_47;
            }
            char v49 = 0;
            ++v51;
            if (!--v50) {
              goto LABEL_50;
            }
          }
        }
LABEL_49:
        char v49 = 0;
        goto LABEL_50;
      }
      goto LABEL_47;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003676C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1000367D8(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v5 = a1[22];
  uint64_t v10 = a1[31];
  uint64_t v11 = a1[30];
  uint64_t v8 = a1[33];
  uint64_t v9 = a1[32];
  uint64_t v6 = a1[35];
  uint64_t v7 = a1[34];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037334(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000369FC(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100037504(v11, v10, v9, v8, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000369FC(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100036A4C(void *a1)
{
  uint64_t v2 = a1[14];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[22];
  uint64_t v10 = a1[31];
  uint64_t v11 = a1[30];
  uint64_t v8 = a1[33];
  uint64_t v9 = a1[32];
  uint64_t v6 = a1[35];
  uint64_t v7 = a1[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000372F0(v4, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100036C68(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000376F4(v11, v10, v9, v8, v7, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100036C68(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100036CBC()
{
  unint64_t result = qword_1003EE320;
  if (!qword_1003EE320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE320);
  }
  return result;
}

unint64_t sub_100036D10()
{
  unint64_t result = qword_1003EE2A0;
  if (!qword_1003EE2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE2A0);
  }
  return result;
}

unint64_t sub_100036D64()
{
  unint64_t result = qword_1003EE2C8;
  if (!qword_1003EE2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE2C8);
  }
  return result;
}

uint64_t sub_100036DB8(uint64_t result)
{
  if (result <= 303)
  {
    if (result)
    {
      if (result == 200)
      {
        return 1;
      }
      else if (result == 217)
      {
        return 2;
      }
      else
      {
        return 21;
      }
    }
  }
  else
  {
    switch(result)
    {
      case 400:
        unint64_t result = 4;
        break;
      case 401:
        unint64_t result = 5;
        break;
      case 402:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 410:
      case 413:
      case 414:
      case 415:
      case 416:
      case 417:
      case 418:
      case 419:
      case 420:
      case 421:
      case 422:
      case 424:
      case 425:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
      case 451:
      case 452:
      case 453:
      case 454:
      case 455:
      case 456:
      case 457:
      case 458:
      case 459:
      case 460:
      case 461:
      case 462:
      case 463:
      case 464:
      case 465:
      case 466:
      case 467:
      case 468:
      case 469:
      case 470:
      case 471:
      case 472:
      case 473:
      case 474:
      case 475:
      case 476:
      case 477:
      case 478:
      case 479:
      case 480:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
        return 21;
      case 403:
        unint64_t result = 6;
        break;
      case 409:
        unint64_t result = 7;
        break;
      case 411:
        unint64_t result = 9;
        break;
      case 412:
        unint64_t result = 8;
        break;
      case 423:
        unint64_t result = 10;
        break;
      case 500:
        unint64_t result = 11;
        break;
      case 541:
        unint64_t result = 12;
        break;
      case 542:
        unint64_t result = 13;
        break;
      case 543:
        unint64_t result = 14;
        break;
      case 544:
        unint64_t result = 15;
        break;
      case 545:
        unint64_t result = 16;
        break;
      case 546:
        unint64_t result = 17;
        break;
      case 547:
        unint64_t result = 18;
        break;
      case 548:
        unint64_t result = 19;
        break;
      case 549:
        unint64_t result = 20;
        break;
      default:
        if (result != 304) {
          return 21;
        }
        unint64_t result = 3;
        break;
    }
  }
  return result;
}

unint64_t sub_100036EB0()
{
  unint64_t result = qword_1003ED3F8;
  if (!qword_1003ED3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED3F8);
  }
  return result;
}

unint64_t sub_100036F04()
{
  unint64_t result = qword_1003EE358;
  if (!qword_1003EE358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE358);
  }
  return result;
}

uint64_t sub_100036F58(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v14 = *(_OWORD *)(a1 + 384);
  long long v15 = *(_OWORD *)(a1 + 400);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v13 = *(_OWORD *)(a1 + 368);
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 336);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v9 = *(_OWORD *)(a1 + 304);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    v13,
    *((void *)&v13 + 1),
    v14,
    *((void *)&v14 + 1),
    v15,
    *((void *)&v15 + 1),
    *(void *)(a1 + 416),
    *(void *)(a1 + 424));
  return a1;
}

uint64_t sub_100037004(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100037134(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000370D8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000370D8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000233E4((uint64_t)v12);
  return v7;
}

uint64_t sub_1000370D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100037134(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000377C0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000372F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100037334(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100037378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100037504(a13, a14, a15, a16, a17, a18);
    sub_100037334(a51, a52);
  }
}

uint64_t sub_100037504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100037568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000376F4(a13, a14, a15, a16, a17, a18);
    sub_1000372F0(a51, a52);
  }
}

uint64_t sub_1000376F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100037758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000377C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100037858(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100080318(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100080318(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100037858(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000379D0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000379D0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100044014(&qword_1003ECEA8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100037A38()
{
  uint64_t v1 = *(void *)(LocationRequest.toHandles.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[234];
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = LocationRequest.toHandles.getter();
  }
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v102 = v0;
  if (!v3) {
    goto LABEL_19;
  }
  uint64_t v4 = v0[251];
  size_t v5 = *(void (**)(void, unint64_t, void))(v4 + 16);
  v4 += 16;
  unint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
  char v99 = (void (**)(uint64_t, uint64_t))(v4 - 8);
  char v100 = v5;
  uint64_t v97 = *(void *)(v4 + 56);
  swift_bridgeObjectRetain();
  while (1)
  {
    v100(v0[252], v6, v0[250]);
    uint64_t v9 = Handle.identifier.getter();
    uint64_t v11 = v10;
    Handle.trackingTimestamp.getter();
    uint64_t v13 = v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_10003B888(v9, v11);
    uint64_t v17 = _swiftEmptyDictionarySingleton[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      return daemon.getter();
    }
    char v20 = v15;
    if (_swiftEmptyDictionarySingleton[3] < v19) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v15 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_10012667C();
      if ((v20 & 1) == 0)
      {
LABEL_14:
        _swiftEmptyDictionarySingleton[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v23 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v16);
        *uint64_t v23 = v9;
        v23[1] = v11;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v16) = v13;
        uint64_t v24 = _swiftEmptyDictionarySingleton[2];
        BOOL v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_64;
        }
        _swiftEmptyDictionarySingleton[2] = v26;
        swift_bridgeObjectRetain();
        goto LABEL_6;
      }
    }
LABEL_5:
    *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v16) = v13;
LABEL_6:
    uint64_t v0 = v102;
    uint64_t v7 = v102[252];
    uint64_t v8 = v102[250];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v99)(v7, v8);
    v6 += v97;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      v0[253] = _swiftEmptyDictionarySingleton;
      uint64_t v27 = v0[249];
      uint64_t v28 = v0[248];
      uint64_t v29 = v0[247];
      uint64_t v30 = v0[246];
      uint64_t v31 = v0[245];
      uint64_t v101 = v0[233];
      uint64_t v98 = v0[244];
      int v32 = *((unsigned __int8 *)v0 + 2144);
      swift_bridgeObjectRelease();
      if (v32) {
        uint64_t v33 = 0x646575657571;
      }
      else {
        uint64_t v33 = 0x74616964656D6D69;
      }
      if (v32) {
        unint64_t v34 = 0xE600000000000000;
      }
      else {
        unint64_t v34 = 0xE900000000000065;
      }
      unint64_t v35 = v34;
      String.append(_:)(*(Swift::String *)&v33);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 45;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      LocationRequest.type.getter();
      uint64_t refreshed = LegacyRefreshSchedule.rawValue.getter();
      char v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      v40._countAndFlagsBits = refreshed;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 0x20726574666128;
      v41._object = (void *)0xE700000000000000;
      String.append(_:)(v41);
      unint64_t v42 = v102;
      v43._countAndFlagsBits = Duration.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 41;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v102[254] = 0;
      v102[255] = 0xE000000000000000;
      LocationRequest.refreshReason.getter();
      uint64_t v45 = LegacyRefreshCommandReason.rawValue.getter();
      unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v46(v30, v98);
      v102[226] = v45;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      swift_bridgeObjectRelease();
      uint64_t v103 = v49;
      v50._countAndFlagsBits = 2108704;
      v50._object = (void *)0xE300000000000000;
      String.append(_:)(v50);
      LocationRequest.refreshReason.getter();
      uint64_t v51 = LegacyRefreshCommandReason.reason.getter();
      uint64_t v53 = v52;
      v46(v30, v98);
      v54._countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v102[256] = v47;
      v102[257] = v103;
      *((unsigned char *)v0 + 2145) = LocationRequest.shallowLocatesOnly.getter() & 1;
      uint64_t v55 = *(void *)(v101 + 16);
      if (v55)
      {
        unsigned int v56 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        while (1)
        {
          uint64_t v58 = *(v56 - 1);
          uint64_t v57 = *v56;
          uint64_t v59 = _swiftEmptyDictionarySingleton[2];
          swift_bridgeObjectRetain();
          if (v59 && (unint64_t v60 = sub_10003B888(v58, v57), (v61 & 1) != 0))
          {
            uint64_t v62 = *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v60);
            uint64_t v63 = v62 + 1;
            if (__OFADD__(v62, 1)) {
              goto LABEL_66;
            }
            char v64 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v66 = sub_10003B888(v58, v57);
            uint64_t v67 = _swiftEmptyDictionarySingleton[2];
            BOOL v68 = (v65 & 1) == 0;
            uint64_t v69 = v67 + v68;
            if (__OFADD__(v67, v68)) {
              goto LABEL_67;
            }
            char v70 = v65;
            if (_swiftEmptyDictionarySingleton[3] >= v69)
            {
              if (v64)
              {
                if ((v65 & 1) == 0) {
                  goto LABEL_53;
                }
              }
              else
              {
                sub_1001264CC();
                if ((v70 & 1) == 0) {
                  goto LABEL_53;
                }
              }
            }
            else
            {
              sub_100008140(v69, v64);
              unint64_t v71 = sub_10003B888(v58, v57);
              if ((v70 & 1) != (v72 & 1)) {
                goto LABEL_55;
              }
              unint64_t v66 = v71;
              if ((v70 & 1) == 0)
              {
LABEL_53:
                _swiftEmptyDictionarySingleton[(v66 >> 6) + 8] |= 1 << v66;
                uint64_t v85 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v66);
                *uint64_t v85 = v58;
                v85[1] = v57;
                *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v66) = v63;
                uint64_t v86 = _swiftEmptyDictionarySingleton[2];
                BOOL v25 = __OFADD__(v86, 1);
                uint64_t v84 = v86 + 1;
                if (v25) {
                  goto LABEL_68;
                }
                goto LABEL_54;
              }
            }
            *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v66) = v63;
          }
          else
          {
            char v73 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v75 = sub_10003B888(v58, v57);
            uint64_t v76 = _swiftEmptyDictionarySingleton[2];
            BOOL v77 = (v74 & 1) == 0;
            uint64_t v78 = v76 + v77;
            if (__OFADD__(v76, v77)) {
              goto LABEL_63;
            }
            char v79 = v74;
            if (_swiftEmptyDictionarySingleton[3] >= v78)
            {
              if (v73)
              {
                if ((v74 & 1) == 0) {
                  goto LABEL_44;
                }
              }
              else
              {
                sub_1001264CC();
                if ((v79 & 1) == 0) {
                  goto LABEL_44;
                }
              }
            }
            else
            {
              sub_100008140(v78, v73);
              unint64_t v80 = sub_10003B888(v58, v57);
              if ((v79 & 1) != (v81 & 1)) {
                goto LABEL_55;
              }
              unint64_t v75 = v80;
              if ((v79 & 1) == 0)
              {
LABEL_44:
                _swiftEmptyDictionarySingleton[(v75 >> 6) + 8] |= 1 << v75;
                uint64_t v82 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v75);
                *uint64_t v82 = v58;
                v82[1] = v57;
                *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v75) = 1;
                uint64_t v83 = _swiftEmptyDictionarySingleton[2];
                BOOL v25 = __OFADD__(v83, 1);
                uint64_t v84 = v83 + 1;
                if (v25) {
                  goto LABEL_65;
                }
LABEL_54:
                _swiftEmptyDictionarySingleton[2] = v84;
                swift_bridgeObjectRetain();
                goto LABEL_28;
              }
            }
            *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v75) = 1;
          }
LABEL_28:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v56 += 2;
          if (!--v55)
          {
            unint64_t v42 = v102;
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      v42[258] = _swiftEmptyDictionarySingleton;
      v42[224] = 0;
      v42[225] = 0xE000000000000000;
      uint64_t v88 = swift_bridgeObjectRetain();
      sub_100013450(v88);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      uint64_t v89 = *(void *)(v101 + 16);
      swift_bridgeObjectRelease();
      v42[227] = v89;
      v90._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      v91._countAndFlagsBits = 2065706025;
      v91._object = (void *)0xE400000000000000;
      String.append(_:)(v91);
      uint64_t v92 = v42[224];
      uint64_t v93 = (void *)v42[225];
      swift_bridgeObjectRetain();
      v94._countAndFlagsBits = v92;
      v94._object = v93;
      String.append(_:)(v94);
      swift_bridgeObjectRelease();
      v95._countAndFlagsBits = 125;
      v95._object = (void *)0xE100000000000000;
      String.append(_:)(v95);
      v42[259] = 0x203A6C61746F5428;
      v42[260] = 0xE800000000000000;
      char v96 = (void *)swift_task_alloc();
      v42[261] = v96;
      *char v96 = v42;
      v96[1] = sub_1000049E0;
      return daemon.getter();
    }
  }
  sub_1000382E0(v19, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = sub_10003B888(v9, v11);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_5;
  }
LABEL_55:
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000382E0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100044014(&qword_1003EFF70);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000385E8()
{
  v505 = v0;
  uint64_t v1 = v0[220];
  v0[217] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v483 = v2;
  if (v2)
  {
    uint64_t v499 = *(void *)(v2 + 16);
    if (v499)
    {
      uint64_t v3 = (uint64_t)(v0 + 2);
      uint64_t v492 = v2 + 32;
      swift_bridgeObjectRetain_n();
      uint64_t v4 = 0;
      uint64_t v5 = _swiftEmptyDictionarySingleton;
      while (1)
      {
        uint64_t v7 = v492 + 152 * v4;
        long long v8 = *(_OWORD *)(v7 + 32);
        long long v9 = *(_OWORD *)(v7 + 48);
        long long v10 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(v3 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(v3 + 80) = v10;
        long long v11 = *(_OWORD *)(v7 + 96);
        long long v12 = *(_OWORD *)(v7 + 112);
        long long v13 = *(_OWORD *)(v7 + 128);
        *(_DWORD *)(v3 + 143) = *(_DWORD *)(v7 + 143);
        *(_OWORD *)(v3 + 112) = v12;
        *(_OWORD *)(v3 + 128) = v13;
        *(_OWORD *)(v3 + 96) = v11;
        long long v14 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)uint64_t v3 = *(_OWORD *)v7;
        *(_OWORD *)(v3 + 16) = v14;
        *(_OWORD *)(v3 + 32) = v8;
        *(_OWORD *)(v3 + 48) = v9;
        uint64_t v15 = v0[11];
        sub_10003C140(v3);
        swift_bridgeObjectRetain();
        uint64_t v16 = Set.init(minimumCapacity:)();
        v504[0] = v16;
        uint64_t v17 = *(void *)(v15 + 16);
        if (v17)
        {
          unint64_t v18 = (Swift::Int *)(v15 + 40);
          do
          {
            Swift::Int v19 = *(v18 - 1);
            Swift::Int v20 = *v18;
            swift_bridgeObjectRetain();
            sub_10003B9E4(v503, v19, v20);
            swift_bridgeObjectRelease();
            v18 += 2;
            --v17;
          }
          while (v17);
          swift_bridgeObjectRelease();
          uint64_t v21 = v504[0];
        }
        else
        {
          uint64_t v21 = v16;
          swift_bridgeObjectRelease();
        }
        uint64_t v23 = *(void *)(v502 + 64);
        uint64_t v22 = *(void *)(v502 + 72);
        uint64_t v24 = v5[2];
        swift_bridgeObjectRetain();
        if (v24)
        {
          swift_bridgeObjectRetain();
          unint64_t v25 = sub_10003B888(v23, v22);
          if (v26)
          {
            uint64_t v27 = *(void *)(v5[7] + 8 * v25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v21 = sub_10003C1D4(v21, v27);
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v503[0] = (uint64_t)v5;
        unint64_t v30 = sub_10003B888(v23, v22);
        uint64_t v31 = v5[2];
        BOOL v32 = (v29 & 1) == 0;
        uint64_t v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          swift_once();
          goto LABEL_93;
        }
        char v34 = v29;
        if (v5[3] >= v33)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v29 & 1) == 0) {
              goto LABEL_22;
            }
          }
          else
          {
            sub_100127190();
            uint64_t v5 = (void *)v503[0];
            if ((v34 & 1) == 0) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          sub_10014144C(v33, isUniquelyReferenced_nonNull_native);
          uint64_t v5 = (void *)v503[0];
          unint64_t v35 = sub_10003B888(v23, v22);
          if ((v34 & 1) != (v36 & 1))
          {
LABEL_53:
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v30 = v35;
          if ((v34 & 1) == 0)
          {
LABEL_22:
            v5[(v30 >> 6) + 8] |= 1 << v30;
            char v37 = (uint64_t *)(v5[6] + 16 * v30);
            *char v37 = v23;
            v37[1] = v22;
            *(void *)(v5[7] + 8 * v30) = v21;
            uint64_t v38 = v5[2];
            BOOL v39 = __OFADD__(v38, 1);
            uint64_t v40 = v38 + 1;
            if (v39) {
              goto LABEL_241;
            }
            v5[2] = v40;
            swift_bridgeObjectRetain();
            goto LABEL_5;
          }
        }
        uint64_t v6 = v5[7];
        swift_bridgeObjectRelease();
        *(void *)(v6 + 8 * v30) = v21;
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v4;
        sub_10003C0AC(v3);
        uint64_t v0 = (void *)v502;
        if (v4 == v499)
        {
          uint64_t v2 = v483;
          swift_bridgeObjectRelease_n();
          uint64_t v1 = *(void *)(v502 + 1760);
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v5 = _swiftEmptyDictionarySingleton;
LABEL_28:
  uint64_t v41 = *(void *)(v1 + 144);
  uint64_t v499 = v41;
  if (v41)
  {
    uint64_t v493 = *(void *)(v41 + 16);
    if (v493)
    {
      uint64_t v42 = (uint64_t)(v0 + 59);
      uint64_t v472 = v41 + 32;
      swift_bridgeObjectRetain_n();
      uint64_t v43 = 0;
      while (1)
      {
        uint64_t v45 = v472 + 152 * v43;
        long long v46 = *(_OWORD *)(v45 + 32);
        long long v47 = *(_OWORD *)(v45 + 48);
        long long v48 = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v42 + 64) = *(_OWORD *)(v45 + 64);
        *(_OWORD *)(v42 + 80) = v48;
        long long v49 = *(_OWORD *)(v45 + 96);
        long long v50 = *(_OWORD *)(v45 + 112);
        long long v51 = *(_OWORD *)(v45 + 128);
        *(_DWORD *)(v42 + 143) = *(_DWORD *)(v45 + 143);
        *(_OWORD *)(v42 + 112) = v50;
        *(_OWORD *)(v42 + 128) = v51;
        *(_OWORD *)(v42 + 96) = v49;
        long long v52 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v45;
        *(_OWORD *)(v42 + 16) = v52;
        *(_OWORD *)(v42 + 32) = v46;
        *(_OWORD *)(v42 + 48) = v47;
        uint64_t v53 = v0[67];
        sub_10003C140(v42);
        swift_bridgeObjectRetain();
        uint64_t v54 = Set.init(minimumCapacity:)();
        v504[0] = v54;
        uint64_t v55 = *(void *)(v53 + 16);
        if (v55)
        {
          unsigned int v56 = (Swift::Int *)(v53 + 40);
          do
          {
            Swift::Int v57 = *(v56 - 1);
            Swift::Int v58 = *v56;
            swift_bridgeObjectRetain();
            sub_10003B9E4(v503, v57, v58);
            swift_bridgeObjectRelease();
            v56 += 2;
            --v55;
          }
          while (v55);
          swift_bridgeObjectRelease();
          uint64_t v59 = v504[0];
        }
        else
        {
          uint64_t v59 = v54;
          swift_bridgeObjectRelease();
        }
        uint64_t v60 = *(void *)(v502 + 520);
        uint64_t v61 = *(void *)(v502 + 528);
        uint64_t v62 = v5[2];
        swift_bridgeObjectRetain();
        if (v62)
        {
          swift_bridgeObjectRetain();
          unint64_t v63 = sub_10003B888(v60, v61);
          if (v64)
          {
            uint64_t v65 = *(void *)(v5[7] + 8 * v63);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v59 = sub_10003C1D4(v59, v65);
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        v503[0] = (uint64_t)v5;
        unint64_t v68 = sub_10003B888(v60, v61);
        uint64_t v69 = v5[2];
        BOOL v70 = (v67 & 1) == 0;
        uint64_t v71 = v69 + v70;
        if (__OFADD__(v69, v70)) {
          goto LABEL_240;
        }
        char v72 = v67;
        if (v5[3] >= v71)
        {
          if (v66)
          {
            if ((v67 & 1) == 0) {
              goto LABEL_49;
            }
          }
          else
          {
            sub_100127190();
            uint64_t v5 = (void *)v503[0];
            if ((v72 & 1) == 0) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          sub_10014144C(v71, v66);
          uint64_t v5 = (void *)v503[0];
          unint64_t v73 = sub_10003B888(v60, v61);
          if ((v72 & 1) != (v74 & 1)) {
            goto LABEL_53;
          }
          unint64_t v68 = v73;
          if ((v72 & 1) == 0)
          {
LABEL_49:
            v5[(v68 >> 6) + 8] |= 1 << v68;
            unint64_t v75 = (uint64_t *)(v5[6] + 16 * v68);
            *unint64_t v75 = v60;
            v75[1] = v61;
            *(void *)(v5[7] + 8 * v68) = v59;
            uint64_t v76 = v5[2];
            BOOL v39 = __OFADD__(v76, 1);
            uint64_t v77 = v76 + 1;
            if (v39) {
              goto LABEL_242;
            }
            v5[2] = v77;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          }
        }
        uint64_t v44 = v5[7];
        swift_bridgeObjectRelease();
        *(void *)(v44 + 8 * v68) = v59;
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v43;
        sub_10003C0AC(v42);
        uint64_t v0 = (void *)v502;
        if (v43 == v493)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v41 = v499;
          uint64_t v2 = v483;
          break;
        }
      }
    }
  }
  v456 = (char *)(v0 + 33);
  v384 = v0 + 213;
  v401 = v0 + 214;
  v0[253] = v5;
  if (!v2) {
    goto LABEL_105;
  }
  v451 = v0 + 211;
  v0[211] = _swiftEmptyArrayStorage;
  uint64_t v79 = *(void *)(v2 + 16);
  if (!v79) {
    goto LABEL_92;
  }
  uint64_t v80 = (uint64_t)(v0 + 21);
  v435 = v0 + 78;
  v411 = v0 + 97;
  uint64_t v81 = v0[243];
  v426 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v0[231] + 56);
  v430 = v0 + 116;
  unsigned int v424 = enum case for HandleType.follower(_:);
  v420 = (void (**)(void *, void, uint64_t))(v81 + 104);
  v414 = (void (**)(uint64_t, uint64_t))(v81 + 8);
  swift_bridgeObjectRetain();
  uint64_t v82 = 32;
  do
  {
    long long v83 = *(_OWORD *)(v2 + v82 + 32);
    long long v84 = *(_OWORD *)(v2 + v82 + 48);
    long long v85 = *(_OWORD *)(v2 + v82 + 80);
    *(_OWORD *)(v80 + 64) = *(_OWORD *)(v2 + v82 + 64);
    *(_OWORD *)(v80 + 80) = v85;
    long long v86 = *(_OWORD *)(v2 + v82 + 96);
    long long v87 = *(_OWORD *)(v2 + v82 + 112);
    long long v88 = *(_OWORD *)(v2 + v82 + 128);
    *(_DWORD *)(v80 + 143) = *(_DWORD *)(v2 + v82 + 143);
    *(_OWORD *)(v80 + 112) = v87;
    *(_OWORD *)(v80 + 128) = v88;
    *(_OWORD *)(v80 + 96) = v86;
    long long v89 = *(_OWORD *)(v2 + v82 + 16);
    *(_OWORD *)uint64_t v80 = *(_OWORD *)(v2 + v82);
    *(_OWORD *)(v80 + 16) = v89;
    *(_OWORD *)(v80 + 32) = v83;
    *(_OWORD *)(v80 + 48) = v84;
    if (!*(void *)(v0[30] + 16))
    {
      sub_10003C140(v80);
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      sub_100044058(v102, (uint64_t)qword_10040B708);
      sub_10003C140(v80);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 136315138;
        long long v106 = *(_OWORD *)(v80 + 112);
        *((_OWORD *)v435 + 6) = *(_OWORD *)(v80 + 96);
        *((_OWORD *)v435 + 7) = v106;
        *((_OWORD *)v435 + 8) = *(_OWORD *)(v80 + 128);
        *(_DWORD *)((char *)v435 + 143) = *(_DWORD *)(v80 + 143);
        long long v107 = *(_OWORD *)(v80 + 48);
        *((_OWORD *)v435 + 2) = *(_OWORD *)(v80 + 32);
        *((_OWORD *)v435 + 3) = v107;
        long long v108 = *(_OWORD *)(v80 + 80);
        *((_OWORD *)v435 + 4) = *(_OWORD *)(v80 + 64);
        *((_OWORD *)v435 + 5) = v108;
        long long v109 = *(_OWORD *)(v80 + 16);
        *(_OWORD *)v435 = *(_OWORD *)v80;
        *((_OWORD *)v435 + 1) = v109;
        sub_10003C140(v80);
        uint64_t v110 = String.init<A>(describing:)();
        *(void *)(v105 + 4) = sub_100037004(v110, v111, v503);
        uint64_t v2 = v483;
        swift_bridgeObjectRelease();
        sub_10003C0AC(v80);
        sub_10003C0AC(v80);
LABEL_87:
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    if (!*(void *)(v0[29] + 16))
    {
      sub_10003C140(v80);
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v112 = type metadata accessor for Logger();
      sub_100044058(v112, (uint64_t)qword_10040B708);
      sub_10003C140(v80);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, v113))
      {
        uint64_t v114 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v114 = 136315138;
        long long v115 = *(_OWORD *)(v80 + 112);
        *((_OWORD *)v411 + 6) = *(_OWORD *)(v80 + 96);
        *((_OWORD *)v411 + 7) = v115;
        *((_OWORD *)v411 + 8) = *(_OWORD *)(v80 + 128);
        *(_DWORD *)((char *)v411 + 143) = *(_DWORD *)(v80 + 143);
        long long v116 = *(_OWORD *)(v80 + 48);
        *((_OWORD *)v411 + 2) = *(_OWORD *)(v80 + 32);
        *((_OWORD *)v411 + 3) = v116;
        long long v117 = *(_OWORD *)(v80 + 80);
        *((_OWORD *)v411 + 4) = *(_OWORD *)(v80 + 64);
        *((_OWORD *)v411 + 5) = v117;
        long long v118 = *(_OWORD *)(v80 + 16);
        *(_OWORD *)v411 = *(_OWORD *)v80;
        *((_OWORD *)v411 + 1) = v118;
        sub_10003C140(v80);
        uint64_t v119 = String.init<A>(describing:)();
        *(void *)(v114 + 4) = sub_100037004(v119, v120, v503);
        uint64_t v2 = v483;
        swift_bridgeObjectRelease();
        sub_10003C0AC(v80);
        sub_10003C0AC(v80);
        unint64_t v121 = v103;
        os_log_type_t v122 = v113;
LABEL_86:
        _os_log_impl((void *)&_mh_execute_header, v121, v122, v123, (uint8_t *)v114, 0xCu);
        goto LABEL_87;
      }
LABEL_60:
      sub_10003C0AC(v80);
      sub_10003C0AC(v80);
LABEL_61:

      uint64_t v0 = (void *)v502;
      goto LABEL_62;
    }
    if (!v5[2])
    {
      sub_10003C140(v80);
      goto LABEL_82;
    }
    uint64_t v90 = v0[27];
    uint64_t v91 = v0[28];
    sub_10003C140(v80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v92 = sub_10003B888(v90, v91);
    if ((v93 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = v483;
LABEL_82:
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v124 = type metadata accessor for Logger();
      sub_100044058(v124, (uint64_t)qword_10040B708);
      sub_10003C140(v80);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, v125))
      {
        uint64_t v114 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v114 = 136315138;
        long long v126 = *(_OWORD *)(v80 + 112);
        *((_OWORD *)v430 + 6) = *(_OWORD *)(v80 + 96);
        *((_OWORD *)v430 + 7) = v126;
        *((_OWORD *)v430 + 8) = *(_OWORD *)(v80 + 128);
        *(_DWORD *)((char *)v430 + 143) = *(_DWORD *)(v80 + 143);
        long long v127 = *(_OWORD *)(v80 + 48);
        *((_OWORD *)v430 + 2) = *(_OWORD *)(v80 + 32);
        *((_OWORD *)v430 + 3) = v127;
        long long v128 = *(_OWORD *)(v80 + 80);
        *((_OWORD *)v430 + 4) = *(_OWORD *)(v80 + 64);
        *((_OWORD *)v430 + 5) = v128;
        long long v129 = *(_OWORD *)(v80 + 16);
        *(_OWORD *)v430 = *(_OWORD *)v80;
        *((_OWORD *)v430 + 1) = v129;
        sub_10003C140(v80);
        uint64_t v130 = String.init<A>(describing:)();
        *(void *)(v114 + 4) = sub_100037004(v130, v131, v503);
        uint64_t v2 = v483;
        swift_bridgeObjectRelease();
        sub_10003C0AC(v80);
        sub_10003C0AC(v80);
        unint64_t v121 = v103;
        os_log_type_t v122 = v125;
        goto LABEL_86;
      }
      goto LABEL_60;
    }
    uint64_t v94 = v0[252];
    v466 = (void *)v0[249];
    uint64_t v95 = v0[242];
    uint64_t v96 = v0[230];
    uint64_t v97 = *(void *)(v5[7] + 8 * v92);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10003BF98((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
    (*v426)(v94, 0, 1, v96);
    (*v420)(v466, v424, v95);
    uint64_t v98 = *(void *)(v97 + 16);
    uint64_t v445 = v79;
    if (v98)
    {
      sub_100044014(&qword_1003EE3F0);
      char v99 = (void *)swift_allocObject();
      int64_t v100 = j__malloc_size(v99);
      uint64_t v101 = v100 - 32;
      if (v100 < 32) {
        uint64_t v101 = v100 - 17;
      }
      v99[2] = v98;
      v99[3] = 2 * (v101 >> 4);
      uint64_t v473 = sub_10003BD98((uint64_t)v503, v99 + 4, v98, v97);
      swift_bridgeObjectRetain();
      sub_1001491B4();
      if (v473 != v98) {
        goto LABEL_243;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      char v99 = _swiftEmptyArrayStorage;
    }
    uint64_t v0 = (void *)v502;
    uint64_t v132 = *(void *)(v502 + 2016);
    uint64_t v133 = *(void *)(v502 + 1992);
    uint64_t v474 = *(void *)(v502 + 1936);
    char v467 = *(unsigned char *)(v502 + 312) & 1;
    char v440 = *(unsigned char *)(v502 + 313) & 1;
    char v134 = v456[1];
    char v135 = *v456;
    uint64_t v136 = swift_task_alloc();
    *(void *)(v136 + 16) = v80;
    *(void *)(v136 + 24) = v99;
    *(void *)(v136 + 32) = v133;
    *(unsigned char *)(v136 + 40) = v135;
    *(unsigned char *)(v136 + 41) = v134;
    *(unsigned char *)(v136 + 42) = v467;
    *(unsigned char *)(v136 + 43) = v440;
    *(void *)(v136 + 48) = v132;
    uint64_t v137 = sub_1001497BC((void (*)(void *))sub_10003C354, v136, (uint64_t)v99);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10003C0AC(v80);
    swift_task_dealloc();
    (*v414)(v133, v474);
    sub_10000A520(v132, &qword_1003F3B30);
    sub_10003BB94((uint64_t)v137);
    uint64_t v2 = v483;
    uint64_t v79 = v445;
LABEL_62:
    v82 += 152;
    --v79;
  }
  while (v79);
  swift_bridgeObjectRelease();
LABEL_92:
  if (qword_1003EC030 != -1) {
    goto LABEL_245;
  }
LABEL_93:
  uint64_t v138 = type metadata accessor for Logger();
  sub_100044058(v138, (uint64_t)qword_10040B708);
  uint64_t v139 = *v451;
  swift_bridgeObjectRetain_n();
  uint64_t v140 = Logger.logObject.getter();
  os_log_type_t v141 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v140, v141))
  {
    os_log_type_t v142 = (uint8_t *)swift_slowAlloc();
    v504[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v142 = 136315138;
    int64_t v143 = *(void *)(v139 + 16);
    if (v143)
    {
      os_log_type_t v427 = v141;
      v431 = v142;
      v436 = v140;
      uint64_t v144 = *(void *)(v502 + 1904);
      uint64_t v145 = *(void *)(v502 + 1848);
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_10003CB84(0, v143, 0);
      uint64_t v146 = *(void (**)(uint64_t, unint64_t, uint64_t))(v144 + 16);
      v144 += 16;
      unint64_t v147 = v139 + ((*(unsigned __int8 *)(v144 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 64));
      uint64_t v475 = *(void *)(v144 + 56);
      v484 = v146;
      v460 = (v144 - 8);
      v468 = (void (**)(uint64_t, uint64_t))(v145 + 8);
      do
      {
        uint64_t v148 = *(void *)(v502 + 1928);
        uint64_t v149 = *(void *)(v502 + 1896);
        uint64_t v150 = *(void *)(v502 + 1888);
        uint64_t v151 = *(void *)(v502 + 1840);
        v484(v148, v147, v149);
        Friend.handle.getter();
        uint64_t v152 = Handle.identifier.getter();
        uint64_t v154 = v153;
        (*v468)(v150, v151);
        ((void (*)(uint64_t, uint64_t))v460->isa)(v148, v149);
        uint64_t v155 = v503[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003CB84(0, *(void *)(v155 + 16) + 1, 1);
          uint64_t v155 = v503[0];
        }
        unint64_t v157 = *(void *)(v155 + 16);
        unint64_t v156 = *(void *)(v155 + 24);
        if (v157 >= v156 >> 1)
        {
          sub_10003CB84(v156 > 1, v157 + 1, 1);
          uint64_t v155 = v503[0];
        }
        *(void *)(v155 + 16) = v157 + 1;
        uint64_t v158 = v155 + 16 * v157;
        *(void *)(v158 + 32) = v152;
        *(void *)(v158 + 40) = v154;
        v147 += v475;
        --v143;
      }
      while (v143);
      swift_bridgeObjectRelease();
      uint64_t v140 = v436;
      os_log_type_t v142 = v431;
      os_log_type_t v141 = v427;
    }
    uint64_t v159 = Array.description.getter();
    unint64_t v161 = v160;
    swift_bridgeObjectRelease();
    uint64_t *v384 = sub_100037004(v159, v161, v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "Server response with follower: %s", v142, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  sub_10003BB94(*v451);
  uint64_t v41 = v499;
  uint64_t v0 = (void *)v502;
LABEL_105:
  v383 = v0 + 206;
  v388 = v0 + 216;
  v0[216] = _swiftEmptyArrayStorage;
  if (!v41) {
    goto LABEL_153;
  }
  uint64_t v162 = *(void *)(v41 + 16);
  if (!v162) {
    goto LABEL_139;
  }
  uint64_t v163 = (uint64_t)(v0 + 40);
  v446 = v0 + 135;
  v417 = v0 + 154;
  v437 = v0 + 173;
  uint64_t v164 = v0[243];
  v433 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v0[231] + 56);
  unsigned int v432 = enum case for HandleType.following(_:);
  v428 = (void (**)(uint64_t, void, uint64_t))(v164 + 104);
  v421 = (void (**)(uint64_t, uint64_t))(v164 + 8);
  swift_bridgeObjectRetain();
  uint64_t v165 = v499;
  uint64_t v166 = 32;
  while (2)
  {
    long long v167 = *(_OWORD *)(v165 + v166 + 32);
    long long v168 = *(_OWORD *)(v165 + v166 + 48);
    long long v169 = *(_OWORD *)(v165 + v166 + 80);
    *(_OWORD *)(v163 + 64) = *(_OWORD *)(v165 + v166 + 64);
    *(_OWORD *)(v163 + 80) = v169;
    long long v170 = *(_OWORD *)(v165 + v166 + 96);
    long long v171 = *(_OWORD *)(v165 + v166 + 112);
    long long v172 = *(_OWORD *)(v165 + v166 + 128);
    *(_DWORD *)(v163 + 143) = *(_DWORD *)(v165 + v166 + 143);
    *(_OWORD *)(v163 + 112) = v171;
    *(_OWORD *)(v163 + 128) = v172;
    *(_OWORD *)(v163 + 96) = v170;
    long long v173 = *(_OWORD *)(v165 + v166 + 16);
    *(_OWORD *)uint64_t v163 = *(_OWORD *)(v165 + v166);
    *(_OWORD *)(v163 + 16) = v173;
    *(_OWORD *)(v163 + 32) = v167;
    *(_OWORD *)(v163 + 48) = v168;
    if (!*(void *)(v0[48] + 16))
    {
      sub_10003C140(v163);
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v186 = type metadata accessor for Logger();
      sub_100044058(v186, (uint64_t)qword_10040B708);
      sub_10003C140(v163);
      uint64_t v187 = Logger.logObject.getter();
      os_log_type_t v188 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v187, v188))
      {
        uint64_t v189 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v189 = 136315138;
        long long v190 = *(_OWORD *)(v163 + 112);
        *((_OWORD *)v446 + 6) = *(_OWORD *)(v163 + 96);
        *((_OWORD *)v446 + 7) = v190;
        *((_OWORD *)v446 + 8) = *(_OWORD *)(v163 + 128);
        *(_DWORD *)((char *)v446 + 143) = *(_DWORD *)(v163 + 143);
        long long v191 = *(_OWORD *)(v163 + 48);
        *((_OWORD *)v446 + 2) = *(_OWORD *)(v163 + 32);
        *((_OWORD *)v446 + 3) = v191;
        long long v192 = *(_OWORD *)(v163 + 80);
        *((_OWORD *)v446 + 4) = *(_OWORD *)(v163 + 64);
        *((_OWORD *)v446 + 5) = v192;
        long long v193 = *(_OWORD *)(v163 + 16);
        *(_OWORD *)v446 = *(_OWORD *)v163;
        *((_OWORD *)v446 + 1) = v193;
        sub_10003C140(v163);
        uint64_t v194 = String.init<A>(describing:)();
        *(void *)(v189 + 4) = sub_100037004(v194, v195, v503);
        swift_bridgeObjectRelease();
        sub_10003C0AC(v163);
        sub_10003C0AC(v163);
LABEL_135:
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_109;
      }
      goto LABEL_108;
    }
    if (!*(void *)(v0[49] + 16))
    {
      sub_10003C140(v163);
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v196 = type metadata accessor for Logger();
      sub_100044058(v196, (uint64_t)qword_10040B708);
      sub_10003C140(v163);
      uint64_t v187 = Logger.logObject.getter();
      os_log_type_t v197 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v187, v197))
      {
        uint64_t v198 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v198 = 136315138;
        long long v199 = *(_OWORD *)(v163 + 112);
        *((_OWORD *)v417 + 6) = *(_OWORD *)(v163 + 96);
        *((_OWORD *)v417 + 7) = v199;
        *((_OWORD *)v417 + 8) = *(_OWORD *)(v163 + 128);
        *(_DWORD *)((char *)v417 + 143) = *(_DWORD *)(v163 + 143);
        long long v200 = *(_OWORD *)(v163 + 48);
        *((_OWORD *)v417 + 2) = *(_OWORD *)(v163 + 32);
        *((_OWORD *)v417 + 3) = v200;
        long long v201 = *(_OWORD *)(v163 + 80);
        *((_OWORD *)v417 + 4) = *(_OWORD *)(v163 + 64);
        *((_OWORD *)v417 + 5) = v201;
        long long v202 = *(_OWORD *)(v163 + 16);
        *(_OWORD *)v417 = *(_OWORD *)v163;
        *((_OWORD *)v417 + 1) = v202;
        sub_10003C140(v163);
        uint64_t v203 = String.init<A>(describing:)();
        *(void *)(v198 + 4) = sub_100037004(v203, v204, v503);
        swift_bridgeObjectRelease();
        sub_10003C0AC(v163);
        sub_10003C0AC(v163);
        v205 = v187;
        os_log_type_t v206 = v197;
LABEL_134:
        _os_log_impl((void *)&_mh_execute_header, v205, v206, v207, (uint8_t *)v198, 0xCu);
        goto LABEL_135;
      }
LABEL_108:
      sub_10003C0AC(v163);
      sub_10003C0AC(v163);
LABEL_109:

      goto LABEL_110;
    }
    if (!v5[2])
    {
      sub_10003C140(v163);
      goto LABEL_130;
    }
    uint64_t v174 = v0[46];
    uint64_t v175 = v0[47];
    sub_10003C140(v163);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v176 = sub_10003B888(v174, v175);
    if ((v177 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_130:
      if (qword_1003EC030 != -1) {
        swift_once();
      }
      uint64_t v208 = type metadata accessor for Logger();
      sub_100044058(v208, (uint64_t)qword_10040B708);
      sub_10003C140(v163);
      uint64_t v187 = Logger.logObject.getter();
      os_log_type_t v209 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v187, v209))
      {
        uint64_t v198 = swift_slowAlloc();
        v503[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v198 = 136315138;
        long long v210 = *(_OWORD *)(v163 + 112);
        *((_OWORD *)v437 + 6) = *(_OWORD *)(v163 + 96);
        *((_OWORD *)v437 + 7) = v210;
        *((_OWORD *)v437 + 8) = *(_OWORD *)(v163 + 128);
        *(_DWORD *)((char *)v437 + 143) = *(_DWORD *)(v163 + 143);
        long long v211 = *(_OWORD *)(v163 + 48);
        *((_OWORD *)v437 + 2) = *(_OWORD *)(v163 + 32);
        *((_OWORD *)v437 + 3) = v211;
        long long v212 = *(_OWORD *)(v163 + 80);
        *((_OWORD *)v437 + 4) = *(_OWORD *)(v163 + 64);
        *((_OWORD *)v437 + 5) = v212;
        long long v213 = *(_OWORD *)(v163 + 16);
        *(_OWORD *)v437 = *(_OWORD *)v163;
        *((_OWORD *)v437 + 1) = v213;
        sub_10003C140(v163);
        uint64_t v214 = String.init<A>(describing:)();
        *(void *)(v198 + 4) = sub_100037004(v214, v215, v503);
        swift_bridgeObjectRelease();
        sub_10003C0AC(v163);
        sub_10003C0AC(v163);
        v205 = v187;
        os_log_type_t v206 = v209;
        goto LABEL_134;
      }
      goto LABEL_108;
    }
    uint64_t v178 = v0[251];
    uint64_t v476 = v0[248];
    uint64_t v179 = v0[242];
    uint64_t v180 = v0[230];
    uint64_t v181 = *(void *)(v5[7] + 8 * v176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10003BF98((uint64_t)_swiftEmptyArrayStorage);
    Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
    (*v433)(v178, 0, 1, v180);
    (*v428)(v476, v432, v179);
    uint64_t v182 = *(void *)(v181 + 16);
    if (v182)
    {
      sub_100044014(&qword_1003EE3F0);
      uint64_t v183 = (void *)swift_allocObject();
      int64_t v184 = j__malloc_size(v183);
      uint64_t v185 = v184 - 32;
      if (v184 < 32) {
        uint64_t v185 = v184 - 17;
      }
      v183[2] = v182;
      v183[3] = 2 * (v185 >> 4);
      uint64_t v485 = sub_10003BD98((uint64_t)v503, v183 + 4, v182, v181);
      swift_bridgeObjectRetain();
      sub_1001491B4();
      if (v485 != v182) {
        goto LABEL_244;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v183 = _swiftEmptyArrayStorage;
    }
    uint64_t v216 = *(void *)(v502 + 2008);
    uint64_t v217 = *(void *)(v502 + 1984);
    uint64_t v477 = v217;
    uint64_t v486 = *(void *)(v502 + 1936);
    char v461 = *(unsigned char *)(v502 + 464) & 1;
    LODWORD(v451) = *(unsigned char *)(v502 + 465) & 1;
    char v218 = v456[153];
    char v219 = v456[152];
    uint64_t v220 = swift_task_alloc();
    *(void *)(v220 + 16) = v163;
    *(void *)(v220 + 24) = v183;
    *(void *)(v220 + 32) = v217;
    *(unsigned char *)(v220 + 40) = v219;
    *(unsigned char *)(v220 + 41) = v218;
    *(unsigned char *)(v220 + 42) = v461;
    *(unsigned char *)(v220 + 43) = (_BYTE)v451;
    *(void *)(v220 + 48) = v216;
    v221 = sub_1001497BC((void (*)(void *))sub_10003C354, v220, (uint64_t)v183);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10003C0AC(v163);
    swift_task_dealloc();
    (*v421)(v477, v486);
    sub_10000A520(v216, &qword_1003F3B30);
    sub_10003BB94((uint64_t)v221);
LABEL_110:
    v166 += 152;
    --v162;
    uint64_t v165 = v499;
    uint64_t v0 = (void *)v502;
    if (v162) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_139:
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v222 = type metadata accessor for Logger();
  sub_100044058(v222, (uint64_t)qword_10040B708);
  uint64_t v223 = *v388;
  swift_bridgeObjectRetain_n();
  v224 = Logger.logObject.getter();
  os_log_type_t v225 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v224, v225))
  {
    v226 = (uint8_t *)swift_slowAlloc();
    v504[0] = swift_slowAlloc();
    *(_DWORD *)v226 = 136315138;
    int64_t v227 = *(void *)(v223 + 16);
    if (v227)
    {
      os_log_type_t v447 = v225;
      v452 = v226;
      v462 = v224;
      uint64_t v228 = *(void *)(v502 + 1904);
      uint64_t v229 = *(void *)(v502 + 1848);
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_10003CB84(0, v227, 0);
      v230 = *(void (**)(uint64_t, uint64_t, uint64_t))(v228 + 16);
      v228 += 16;
      uint64_t v231 = v223 + ((*(unsigned __int8 *)(v228 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 64));
      uint64_t v487 = *(void *)(v228 + 56);
      v494 = v230;
      v478 = (void (**)(uint64_t, uint64_t))(v229 + 8);
      v232 = (void (**)(uint64_t, uint64_t))(v228 - 8);
      do
      {
        uint64_t v233 = *(void *)(v502 + 1928);
        uint64_t v234 = *(void *)(v502 + 1896);
        uint64_t v235 = *(void *)(v502 + 1888);
        uint64_t v236 = *(void *)(v502 + 1840);
        v494(v233, v231, v234);
        Friend.handle.getter();
        uint64_t v237 = Handle.identifier.getter();
        uint64_t v239 = v238;
        (*v478)(v235, v236);
        (*v232)(v233, v234);
        uint64_t v240 = v503[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003CB84(0, *(void *)(v240 + 16) + 1, 1);
          uint64_t v240 = v503[0];
        }
        unint64_t v242 = *(void *)(v240 + 16);
        unint64_t v241 = *(void *)(v240 + 24);
        if (v242 >= v241 >> 1)
        {
          sub_10003CB84(v241 > 1, v242 + 1, 1);
          uint64_t v240 = v503[0];
        }
        *(void *)(v240 + 16) = v242 + 1;
        uint64_t v243 = v240 + 16 * v242;
        *(void *)(v243 + 32) = v237;
        *(void *)(v243 + 40) = v239;
        v231 += v487;
        --v227;
      }
      while (v227);
      swift_bridgeObjectRelease();
      v224 = v462;
      v226 = v452;
      os_log_type_t v225 = v447;
    }
    uint64_t v244 = Array.description.getter();
    unint64_t v246 = v245;
    swift_bridgeObjectRelease();
    uint64_t *v383 = sub_100037004(v244, v246, v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v224, v225, "Server response with following: %s", v226, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v247 = swift_bridgeObjectRetain();
  sub_10003BB94(v247);
  uint64_t v0 = (void *)v502;
LABEL_153:
  v382 = v0 + 205;
  v405 = v0 + 210;
  uint64_t v248 = v0[220];
  v0[214] = _swiftEmptyArrayStorage;
  uint64_t v249 = *(void *)(v248 + 152);
  uint64_t v386 = (uint64_t)(v0 + 218);
  if (!v249) {
    goto LABEL_187;
  }
  uint64_t v403 = *(void *)(v249 + 16);
  if (!v403) {
    goto LABEL_173;
  }
  uint64_t v250 = v0[243];
  uint64_t v251 = v0[231];
  uint64_t v402 = v249 + 32;
  unsigned int v399 = enum case for HandleType.futureFollower(_:);
  v397 = (void (**)(void, void, void))(v250 + 104);
  v422 = (void (**)(uint64_t, uint64_t, uint64_t))(v251 + 16);
  v418 = (void (**)(uint64_t, uint64_t, uint8_t *))(v250 + 16);
  unsigned int v392 = enum case for ClientOrigin.messagesApp(_:);
  v415 = (void (**)(NSObject *, void, void *))(v0[223] + 104);
  unsigned int v391 = enum case for ClientOrigin.other(_:);
  v409 = (void (**)(uint64_t, uint64_t))(v251 + 8);
  v412 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v251 + 56);
  uint64_t v425 = v0[238];
  v395 = (void (**)(void, void))(v250 + 8);
  swift_bridgeObjectRetain();
  uint64_t v252 = 0;
  while (2)
  {
    uint64_t v253 = v402 + 96 * v252;
    uint64_t v254 = *(void *)(v253 + 16);
    uint64_t v255 = *(void *)(v253 + 24);
    char v256 = *(unsigned char *)(v253 + 74);
    uint64_t v257 = *(void *)(v253 + 80);
    sub_100044014(&qword_1003EE3F0);
    uint64_t v258 = swift_allocObject();
    *(_OWORD *)(v258 + 16) = xmmword_100367D70;
    *(void *)(v258 + 32) = v254;
    *(void *)(v258 + 40) = v255;
    if (v257)
    {
      uint64_t v259 = *(void *)(v257 + 16);
      swift_bridgeObjectRetain();
      if (v259)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v258 = v257;
        goto LABEL_163;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
LABEL_163:
    v260 = (void *)v502;
    (*v397)(*(void *)(v502 + 1976), v399, *(void *)(v502 + 1936));
    int64_t v261 = *(void *)(v258 + 16);
    if (v261)
    {
      uint64_t v406 = v252;
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10003BD78(0, v261, 0);
      v260 = (void *)v502;
      v262 = (void *)v503[0];
      unsigned int v263 = v392;
      if ((v256 & 1) == 0) {
        unsigned int v263 = v391;
      }
      unsigned int v429 = v263;
      uint64_t v264 = v258 + 40;
      do
      {
        uint64_t v500 = (uint64_t)v262;
        uint64_t v265 = v260[246];
        v441 = (uint8_t *)v260[242];
        uint64_t v448 = v260[247];
        int64_t v495 = v261;
        uint64_t v266 = v260[235];
        uint64_t v267 = v260[234];
        uint64_t v268 = v260[230];
        v453 = v260[229];
        v269 = v260[228];
        v463 = v260[225];
        v469 = (void *)v260[222];
        uint64_t v479 = v260[250];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v457 = v266;
        Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
        (*v422)(v267, v266, v268);
        (*v418)(v265, v448, v441);
        uint64_t v270 = type metadata accessor for Date();
        v271 = *(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(void *)(v270 - 8) + 56);
        v271(v453, 1, 1, v270);
        Date.init(timeIntervalSince1970:)();
        v271(v269, 0, 1, v270);
        v262 = (void *)v500;
        (*v415)(v463, v429, v469);
        (*v412)(v479, 1, 1, v268);
        Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
        (*v409)(v457, v268);
        swift_bridgeObjectRelease();
        v503[0] = v500;
        unint64_t v273 = *(void *)(v500 + 16);
        unint64_t v272 = *(void *)(v500 + 24);
        if (v273 >= v272 >> 1)
        {
          sub_10003BD78(v272 > 1, v273 + 1, 1);
          v262 = (void *)v503[0];
        }
        v260 = (void *)v502;
        uint64_t v274 = *(void *)(v502 + 1920);
        uint64_t v275 = *(void *)(v502 + 1896);
        v262[2] = v273 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v425 + 32))((unint64_t)v262+ ((*(unsigned __int8 *)(v425 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v425 + 80))+ *(void *)(v425 + 72) * v273, v274, v275);
        v264 += 16;
        --v261;
      }
      while (v495 != 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v252 = v406;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v262 = _swiftEmptyArrayStorage;
    }
    ++v252;
    (*v395)(v260[247], v260[242]);
    sub_10003BB94((uint64_t)v262);
    if (v252 != v403) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_173:
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v276 = type metadata accessor for Logger();
  sub_100044058(v276, (uint64_t)qword_10040B708);
  uint64_t v277 = *v401;
  swift_bridgeObjectRetain_n();
  v278 = Logger.logObject.getter();
  os_log_type_t v279 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v278, v279))
  {
    v280 = (uint8_t *)swift_slowAlloc();
    v504[0] = swift_slowAlloc();
    *(_DWORD *)v280 = 136315138;
    int64_t v281 = *(void *)(v277 + 16);
    if (v281)
    {
      os_log_type_t v442 = v279;
      v449 = v280;
      v458 = v278;
      uint64_t v282 = *(void *)(v502 + 1904);
      uint64_t v283 = *(void *)(v502 + 1848);
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_10003CB84(0, v281, 0);
      v284 = *(void (**)(uint64_t, uint64_t, uint64_t))(v282 + 16);
      v282 += 16;
      uint64_t v285 = v277 + ((*(unsigned __int8 *)(v282 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v282 + 64));
      uint64_t v488 = *(void *)(v282 + 56);
      v496 = v284;
      v480 = (void (**)(uint64_t, uint64_t))(v283 + 8);
      v286 = (void (**)(uint64_t, uint64_t))(v282 - 8);
      do
      {
        uint64_t v287 = *(void *)(v502 + 1928);
        uint64_t v288 = *(void *)(v502 + 1896);
        uint64_t v289 = *(void *)(v502 + 1888);
        uint64_t v290 = *(void *)(v502 + 1840);
        v496(v287, v285, v288);
        Friend.handle.getter();
        uint64_t v291 = Handle.identifier.getter();
        uint64_t v293 = v292;
        (*v480)(v289, v290);
        (*v286)(v287, v288);
        uint64_t v294 = v503[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003CB84(0, *(void *)(v294 + 16) + 1, 1);
          uint64_t v294 = v503[0];
        }
        unint64_t v296 = *(void *)(v294 + 16);
        unint64_t v295 = *(void *)(v294 + 24);
        if (v296 >= v295 >> 1)
        {
          sub_10003CB84(v295 > 1, v296 + 1, 1);
          uint64_t v294 = v503[0];
        }
        *(void *)(v294 + 16) = v296 + 1;
        uint64_t v297 = v294 + 16 * v296;
        *(void *)(v297 + 32) = v291;
        *(void *)(v297 + 40) = v293;
        v285 += v488;
        --v281;
      }
      while (v281);
      swift_bridgeObjectRelease();
      v278 = v458;
      v280 = v449;
      os_log_type_t v279 = v442;
    }
    uint64_t v298 = Array.description.getter();
    unint64_t v300 = v299;
    swift_bridgeObjectRelease();
    *(void *)(v502 + 1632) = sub_100037004(v298, v300, v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v278, v279, "Server response with futureFollowers: %s", v280, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v301 = swift_bridgeObjectRetain();
  sub_10003BB94(v301);
  uint64_t v0 = (void *)v502;
  uint64_t v248 = *(void *)(v502 + 1760);
LABEL_187:
  v385 = v0 + 219;
  uint64_t *v405 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v302 = *(void *)(v248 + 160);
  if (!v302) {
    goto LABEL_220;
  }
  uint64_t v400 = *(void *)(v302 + 16);
  if (!v400) {
    goto LABEL_206;
  }
  uint64_t v303 = v0[243];
  uint64_t v304 = v0[231];
  uint64_t v398 = v302 + 32;
  unsigned int v396 = enum case for HandleType.futureFollowing(_:);
  v394 = (void (**)(void, void, void))(v303 + 104);
  v416 = (void (**)(uint64_t, uint64_t, uint64_t))(v304 + 16);
  v413 = (void (**)(uint64_t, uint8_t *, uint64_t))(v303 + 16);
  unsigned int v390 = enum case for ClientOrigin.messagesApp(_:);
  v410 = (void (**)(NSObject *, void, void *))(v0[223] + 104);
  unsigned int v389 = enum case for ClientOrigin.other(_:);
  v407 = (void (**)(uint64_t, uint64_t))(v304 + 8);
  v408 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56);
  uint64_t v419 = v0[238];
  v393 = (void (**)(void, void))(v303 + 8);
  swift_bridgeObjectRetain();
  uint64_t v305 = 0;
  while (2)
  {
    uint64_t v306 = v398 + 96 * v305;
    uint64_t v307 = *(void *)(v306 + 32);
    uint64_t v308 = *(void *)(v306 + 40);
    char v309 = *(unsigned char *)(v306 + 74);
    uint64_t v310 = *(void *)(v306 + 88);
    sub_100044014(&qword_1003EE3F0);
    uint64_t v311 = swift_allocObject();
    *(_OWORD *)(v311 + 16) = xmmword_100367D70;
    *(void *)(v311 + 32) = v307;
    *(void *)(v311 + 40) = v308;
    if (v310)
    {
      uint64_t v312 = *(void *)(v310 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v312)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v311 = v310;
        goto LABEL_196;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_196:
    v313 = (void *)v502;
    (*v394)(*(void *)(v502 + 1960), v396, *(void *)(v502 + 1936));
    int64_t v314 = *(void *)(v311 + 16);
    if (v314)
    {
      uint64_t v404 = v305;
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10003BD78(0, v314, 0);
      v313 = (void *)v502;
      v315 = (void *)v503[0];
      unsigned int v316 = v390;
      if ((v309 & 1) == 0) {
        unsigned int v316 = v389;
      }
      unsigned int v423 = v316;
      uint64_t v317 = v311 + 40;
      do
      {
        int64_t v501 = v314;
        uint64_t v434 = v313[244];
        uint64_t v438 = v313[242];
        v443 = (uint8_t *)v313[245];
        uint64_t v489 = v313[250];
        uint64_t v318 = v313[233];
        uint64_t v319 = v313[232];
        uint64_t v320 = v313[230];
        uint64_t v450 = v313[227];
        uint64_t v321 = v313[226];
        v464 = v313[224];
        v470 = (void *)v313[222];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
        (*v416)(v319, v318, v320);
        (*v413)(v434, v443, v438);
        uint64_t v322 = type metadata accessor for Date();
        v323 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v322 - 8) + 56);
        v323(v450, 1, 1, v322);
        Date.init(timeIntervalSince1970:)();
        v323(v321, 0, 1, v322);
        (*v410)(v464, v423, v470);
        (*v408)(v489, 1, 1, v320);
        Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
        (*v407)(v318, v320);
        swift_bridgeObjectRelease();
        v503[0] = (uint64_t)v315;
        unint64_t v325 = v315[2];
        unint64_t v324 = v315[3];
        if (v325 >= v324 >> 1)
        {
          sub_10003BD78(v324 > 1, v325 + 1, 1);
          v315 = (void *)v503[0];
        }
        v313 = (void *)v502;
        uint64_t v326 = *(void *)(v502 + 1912);
        uint64_t v327 = *(void *)(v502 + 1896);
        v315[2] = v325 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v419 + 32))((unint64_t)v315+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v325, v326, v327);
        v317 += 16;
        --v314;
      }
      while (v501 != 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v305 = v404;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v315 = _swiftEmptyArrayStorage;
    }
    ++v305;
    (*v393)(v313[245], v313[242]);
    sub_10003BB94((uint64_t)v315);
    if (v305 != v400) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_206:
  if (qword_1003EC030 != -1) {
    swift_once();
  }
  uint64_t v328 = type metadata accessor for Logger();
  sub_100044058(v328, (uint64_t)qword_10040B708);
  uint64_t v329 = *v405;
  swift_bridgeObjectRetain_n();
  v330 = Logger.logObject.getter();
  os_log_type_t v331 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v330, v331))
  {
    v332 = (uint8_t *)swift_slowAlloc();
    v504[0] = swift_slowAlloc();
    *(_DWORD *)v332 = 136315138;
    int64_t v333 = *(void *)(v329 + 16);
    if (v333)
    {
      os_log_type_t v439 = v331;
      v444 = v332;
      v454 = v330;
      uint64_t v334 = *(void *)(v502 + 1904);
      uint64_t v335 = *(void *)(v502 + 1848);
      v503[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_10003CB84(0, v333, 0);
      v336 = *(void (**)(uint64_t, uint64_t, uint64_t))(v334 + 16);
      v334 += 16;
      uint64_t v337 = v329 + ((*(unsigned __int8 *)(v334 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v334 + 64));
      uint64_t v490 = *(void *)(v334 + 56);
      v497 = v336;
      v481 = (void (**)(uint64_t, uint64_t))(v335 + 8);
      v338 = (void (**)(uint64_t, uint64_t))(v334 - 8);
      do
      {
        uint64_t v339 = *(void *)(v502 + 1928);
        uint64_t v340 = *(void *)(v502 + 1896);
        uint64_t v341 = *(void *)(v502 + 1888);
        uint64_t v342 = *(void *)(v502 + 1840);
        v497(v339, v337, v340);
        Friend.handle.getter();
        uint64_t v343 = Handle.identifier.getter();
        uint64_t v345 = v344;
        (*v481)(v341, v342);
        (*v338)(v339, v340);
        uint64_t v346 = v503[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003CB84(0, *(void *)(v346 + 16) + 1, 1);
          uint64_t v346 = v503[0];
        }
        unint64_t v348 = *(void *)(v346 + 16);
        unint64_t v347 = *(void *)(v346 + 24);
        if (v348 >= v347 >> 1)
        {
          sub_10003CB84(v347 > 1, v348 + 1, 1);
          uint64_t v346 = v503[0];
        }
        *(void *)(v346 + 16) = v348 + 1;
        uint64_t v349 = v346 + 16 * v348;
        *(void *)(v349 + 32) = v343;
        *(void *)(v349 + 40) = v345;
        v337 += v490;
        --v333;
      }
      while (v333);
      swift_bridgeObjectRelease();
      v330 = v454;
      v332 = v444;
      os_log_type_t v331 = v439;
    }
    uint64_t v350 = Array.description.getter();
    unint64_t v352 = v351;
    swift_bridgeObjectRelease();
    *(void *)(v502 + 1696) = sub_100037004(v350, v352, v504);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v330, v331, "Server response with futureFollowing: %s", v332, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v387 = swift_bridgeObjectRetain();
  sub_10003BB94(v387);
  uint64_t v248 = *(void *)(v502 + 1760);
LABEL_220:
  sub_100013B50(v248 + 168, v386, &qword_1003F04D8);
  sub_100013B50(v386, (uint64_t)v385, &qword_1003F04D8);
  uint64_t v353 = *v385;
  if (*v385)
  {
    swift_retain();
    v354 = sub_10015DAF0(v353);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1003EC030 != -1) {
      swift_once();
    }
    uint64_t v355 = type metadata accessor for Logger();
    sub_100044058(v355, (uint64_t)qword_10040B708);
    swift_bridgeObjectRetain_n();
    v356 = Logger.logObject.getter();
    os_log_type_t v357 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v356, v357))
    {
      v358 = (uint8_t *)swift_slowAlloc();
      v504[0] = swift_slowAlloc();
      *(_DWORD *)v358 = 136315138;
      int64_t v359 = v354[2];
      if (v359)
      {
        os_log_type_t v455 = v357;
        v459 = v358;
        v465 = v356;
        uint64_t v360 = *(void *)(v502 + 1904);
        uint64_t v361 = *(void *)(v502 + 1848);
        v503[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_10003CB84(0, v359, 0);
        v362 = *(void (**)(uint64_t, char *, uint64_t))(v360 + 16);
        v360 += 16;
        v363 = (char *)v354
             + ((*(unsigned __int8 *)(v360 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v360 + 64));
        uint64_t v491 = *(void *)(v360 + 56);
        v498 = v362;
        v471 = v354;
        v482 = (void (**)(uint64_t, uint64_t))(v361 + 8);
        v364 = (void (**)(uint64_t, uint64_t))(v360 - 8);
        do
        {
          uint64_t v365 = *(void *)(v502 + 1928);
          uint64_t v366 = *(void *)(v502 + 1896);
          uint64_t v367 = *(void *)(v502 + 1888);
          uint64_t v368 = *(void *)(v502 + 1840);
          v498(v365, v363, v366);
          Friend.handle.getter();
          uint64_t v369 = Handle.identifier.getter();
          uint64_t v371 = v370;
          (*v482)(v367, v368);
          (*v364)(v365, v366);
          uint64_t v372 = v503[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10003CB84(0, *(void *)(v372 + 16) + 1, 1);
            uint64_t v372 = v503[0];
          }
          unint64_t v374 = *(void *)(v372 + 16);
          unint64_t v373 = *(void *)(v372 + 24);
          if (v374 >= v373 >> 1)
          {
            sub_10003CB84(v373 > 1, v374 + 1, 1);
            uint64_t v372 = v503[0];
          }
          *(void *)(v372 + 16) = v374 + 1;
          uint64_t v375 = v372 + 16 * v374;
          *(void *)(v375 + 32) = v369;
          *(void *)(v375 + 40) = v371;
          v363 += v491;
          --v359;
        }
        while (v359);
        v356 = v465;
        v354 = v471;
        v358 = v459;
        os_log_type_t v357 = v455;
      }
      uint64_t v376 = Array.description.getter();
      unint64_t v378 = v377;
      swift_bridgeObjectRelease();
      uint64_t *v382 = sub_100037004(v376, v378, v504);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v356, v357, "Server response with pendingOffers: %s", v358, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10003BB94((uint64_t)v354);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v379 = *(void *)(v502 + 1736);
  *(void *)(v502 + 2032) = v379;
  v380 = (void *)swift_task_alloc();
  *(void *)(v502 + 2040) = v380;
  void *v380 = v502;
  v380[1] = sub_1000067A8;
  char v381 = *(unsigned char *)(v502 + 163);
  return sub_10001D87C(v379, v381);
}

unint64_t sub_10003B888(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10003B900(a1, a2, v4);
}

unint64_t sub_10003B900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    long long v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        long long v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10003B9E4(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10003BBDC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10003BB94(uint64_t a1)
{
  return sub_10012D680(a1, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
}

Swift::Int sub_10003BBDC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100155144();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100156B34();
      goto LABEL_22;
    }
    sub_1000064F8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_10003BD78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001584F4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003BD98(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_10003BF98(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFF70);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001544D4(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003C0AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003C140(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003C1D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (Swift::Int *)(*(void *)(v2 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10003B9E4(&v17, v12, v13);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10003C354@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003C36C(a1, a2);
}

uint64_t sub_10003C36C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003C3B0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(unsigned __int8 *)(v2 + 41), *(unsigned __int8 *)(v2 + 42), *(unsigned __int8 *)(v2 + 43), a2, *(void *)(v2 + 48));
}

uint64_t sub_10003C3B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v60 = a8;
  int v69 = a7;
  int v61 = a6;
  int v59 = a5;
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v58 = a9;
  uint64_t v12 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v12 - 8);
  Swift::Int v57 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ClientOrigin();
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unint64_t v68 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v77 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  int64_t v19 = (char *)&v51 - v18;
  uint64_t v65 = type metadata accessor for HandleType();
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  char v74 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for GroupID();
  uint64_t v21 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  BOOL v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Handle();
  uint64_t v73 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v71 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  char v72 = (char *)&v51 - v28;
  uint64_t v29 = *a1;
  uint64_t v30 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 24);
  uint64_t v70 = v27;
  uint64_t v63 = v29;
  uint64_t v62 = v30;
  if (v31)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_100044014(&qword_1003F04E8);
    uint64_t inited = swift_initStackObject();
    uint64_t v53 = v19;
    uint64_t v33 = (void *)inited;
    *(_OWORD *)(inited + 16) = xmmword_100367D70;
    uint64_t v34 = v21;
    unint64_t v35 = *(void (**)(char *, void, uint64_t))(v21 + 104);
    uint64_t v36 = v54;
    v35(v23, enum case for GroupID.oneToOne(_:), v54);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = GroupID.rawValue.getter();
    uint64_t v52 = v38;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v36);
    v33[4] = v37;
    uint64_t v24 = v70;
    v33[5] = v52;
    v33[6] = *(void *)(a2 + 16);
    uint64_t v39 = (uint64_t)v33;
    int64_t v19 = v53;
    sub_100101B14(v39);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v72;
  Handle.init(withID:serverID:pushIdentifiers:expiresByGroupId:siblingIdentifiers:)();
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v71, v40, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v74, v67, v65);
  if (*(double *)(a2 + 16) == 0.0)
  {
    uint64_t v41 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v19, 1, 1, v41);
  }
  else
  {
    Date.init(timeIntervalSince1970:)();
    uint64_t v42 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v19, 0, 1, v42);
  }
  uint64_t v43 = (uint64_t)v57;
  if (*(unsigned char *)(a2 + 8) == 1
    && (sub_100013B50(a2 + 120, (uint64_t)v75, &qword_1003EE048),
        sub_100013B50((uint64_t)v75, (uint64_t)v76, &qword_1003EE048),
        (v76[8] & 1) != 0))
  {
    uint64_t v44 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v77, 1, 1, v44);
  }
  else
  {
    uint64_t v45 = v77;
    Date.init(timeIntervalSince1970:)();
    uint64_t v46 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
  }
  if (*(unsigned char *)(a2 + 146))
  {
    long long v49 = (unsigned int *)&enum case for ClientOrigin.messagesApp(_:);
  }
  else
  {
    uint64_t v48 = *(void *)(a2 + 104);
    long long v47 = *(void **)(a2 + 112);
    swift_bridgeObjectRetain();
    v78._countAndFlagsBits = v48;
    v78._object = v47;
    if (((sub_10003CB38(v78) - 3) & 0xFE) != 0) {
      long long v49 = (unsigned int *)&enum case for ClientOrigin.findMyApp(_:);
    }
    else {
      long long v49 = (unsigned int *)&enum case for ClientOrigin.other(_:);
    }
  }
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v68, *v49, v56);
  sub_100013210(a10, v43, &qword_1003F3B30);
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v72, v70);
}

unint64_t sub_10003CB38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCEB8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10003CB84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003CBA4(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003CBA4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003EE3F0);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003CD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Friend();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v19 = a2;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v13 = v14;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v16 = *(void *)(v12 + 56);
    do
    {
      v13(v8, v15, v4);
      sub_100046C40((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v12 - 8))(v10, v4);
      v15 += v16;
      --v11;
    }
    while (v11);
    return v19;
  }
  return a2;
}

uint64_t sub_10003CE70(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  long long v49 = a1;
  uint64_t v5 = sub_100044014(&qword_1003ECFE8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Friend();
  uint64_t v8 = *(void *)(v51 - 8);
  uint64_t v9 = __chkstk_darwin(v51);
  uint64_t v43 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v42 = (char *)&v39 - v11;
  uint64_t v12 = type metadata accessor for FriendInfoOption(0);
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v45 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v46 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v40 = v8;
  uint64_t v41 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v50 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v44 = (unint64_t *)&_swiftEmptyArrayStorage;
  while (1)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    sub_100148858(*(void *)(v50 + 48) + *(void *)(v47 + 72) * v26, (uint64_t)v17, type metadata accessor for FriendInfoOption);
    sub_100148A24((uint64_t)v17, (uint64_t)v15, type metadata accessor for FriendInfoOption);
    v49(v15);
    if (v3)
    {
      sub_100148A8C((uint64_t)v15, type metadata accessor for FriendInfoOption);
      uint64_t v38 = v44;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return (uint64_t)v38;
    }
    sub_100148A8C((uint64_t)v15, type metadata accessor for FriendInfoOption);
    if ((*v22)(v7, 1, v51) == 1)
    {
      uint64_t result = sub_10000A520((uint64_t)v7, &qword_1003ECFE8);
    }
    else
    {
      uint64_t v30 = *v41;
      (*v41)(v42, v7, v51);
      v30(v43, v42, v51);
      uint64_t v31 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v44 = (unint64_t *)sub_10013DE08(0, v44[2] + 1, 1, (unint64_t)v44, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
      }
      unint64_t v33 = v44[2];
      unint64_t v32 = v44[3];
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        unint64_t v39 = v33 + 1;
        uint64_t v37 = (unint64_t *)sub_10013DE08(v32 > 1, v33 + 1, 1, (unint64_t)v44, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
        unint64_t v34 = v39;
        uint64_t v44 = v37;
      }
      unint64_t v35 = v43;
      uint64_t v36 = v44;
      v44[2] = v34;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v31)((char *)v36+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v33, v35, v51);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v46) {
    goto LABEL_32;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v46)
  {
LABEL_32:
    uint64_t v38 = v44;
    goto LABEL_33;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_32;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10003D3C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003D430(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_10003D478(void (*a1)(char *), uint64_t a2)
{
  uint64_t v5 = sub_100044014(&qword_1003ECFE8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Friend();
  uint64_t v28 = *(void *)(v35 - 8);
  uint64_t v8 = __chkstk_darwin(v35);
  unint64_t v32 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v27 = (char *)v26 - v10;
  uint64_t v34 = type metadata accessor for FriendRecord(0);
  uint64_t v11 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100044014(&qword_1003F03B8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v17 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v33 = v17;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v31 = v11 + 48;
  if (v30(v16, 1, v34) == 1)
  {
    uint64_t v18 = (char *)&_swiftEmptyArrayStorage;
  }
  else
  {
    int64_t v29 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    uint64_t v19 = (void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v18 = (char *)&_swiftEmptyArrayStorage;
    v26[0] = a1;
    v26[1] = a2;
    while (1)
    {
      sub_100148A24((uint64_t)v16, (uint64_t)v13, type metadata accessor for FriendRecord);
      a1(v13);
      if (v2) {
        break;
      }
      sub_100148A8C((uint64_t)v13, type metadata accessor for FriendRecord);
      uint64_t v20 = v35;
      if ((*v29)(v7, 1, v35) == 1)
      {
        sub_10000A520((uint64_t)v7, &qword_1003ECFE8);
      }
      else
      {
        unint64_t v21 = *v19;
        uint64_t v22 = v27;
        (*v19)(v27, v7, v20);
        v21(v32, v22, v20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = (char *)sub_10013DE08(0, *((void *)v18 + 2) + 1, 1, (unint64_t)v18, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
        }
        unint64_t v24 = *((void *)v18 + 2);
        unint64_t v23 = *((void *)v18 + 3);
        if (v24 >= v23 >> 1) {
          uint64_t v18 = (char *)sub_10013DE08(v23 > 1, v24 + 1, 1, (unint64_t)v18, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
        }
        *((void *)v18 + 2) = v24 + 1;
        v21(&v18[((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v24], v32, v35);
        a1 = (void (*)(char *))v26[0];
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (v30(v16, 1, v34) == 1) {
        goto LABEL_14;
      }
    }
    sub_100148A8C((uint64_t)v13, type metadata accessor for FriendRecord);
    swift_bridgeObjectRelease();
  }
LABEL_14:
  swift_release();
  return v18;
}

uint64_t sub_10003D91C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DDB48);
}

uint64_t sub_10003D990(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
}

uint64_t sub_10003D9C4()
{
  uint64_t v0 = type metadata accessor for FriendRecord(0);
  uint64_t v53 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v52 = (uint64_t *)((char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v43 - v3;
  uint64_t v5 = sub_100044014(&qword_1003EF6D8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for Row();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (void (*)(void))((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = v54;
  uint64_t result = Connection.prepare(_:)();
  if (!v20)
  {
    uint64_t v22 = result;
    int64_t v46 = v17;
    uint64_t v47 = v4;
    uint64_t v51 = v14;
    uint64_t v45 = v19;
    uint64_t v48 = v10;
    swift_retain();
    uint64_t v23 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    uint64_t v55 = &_swiftEmptyArrayStorage;
    sub_10003E0D0(0, v23 & ~(v23 >> 63), 0);
    swift_retain();
    uint64_t v54 = dispatch thunk of _AnySequenceBox._makeIterator()();
    uint64_t v43 = v22;
    uint64_t result = swift_release();
    if (v23 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v23)
    {
      unint64_t v24 = (void (**)(void (*)(void), char *, uint64_t))(v44 + 16);
      long long v49 = (void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
      unint64_t v25 = (unsigned int (*)(void, void, void))v52;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t result = (*v50)(v8, 1, v11);
        if (result == 1) {
          goto LABEL_22;
        }
        uint64_t v26 = (uint64_t)v51;
        (*v24)(v51, v8, v11);
        sub_100042698(v26, (uint64_t)v25);
        (*v49)(v8, v11);
        uint64_t v27 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003E0D0(0, v27[2] + 1, 1);
          uint64_t v27 = v55;
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_10003E0D0(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v55;
        }
        v27[2] = v29 + 1;
        unint64_t v25 = (unsigned int (*)(void, void, void))v52;
        sub_10003E068((uint64_t)v52, (uint64_t)v27+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v29, type metadata accessor for FriendRecord);
      }
      while (--v23);
    }
    uint64_t v30 = (uint64_t)v48;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v31 = v44;
    uint64_t v52 = *(void **)(v44 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1)
    {
      uint64_t v34 = *(void (**)(void))(v31 + 32);
      uint64_t v33 = v31 + 32;
      uint64_t v51 = v34;
      uint64_t v35 = (void (**)(char *, char *, uint64_t))(v33 - 16);
      uint64_t v36 = (void (**)(char *, uint64_t))(v33 - 24);
      uint64_t v37 = (uint64_t)v47;
      do
      {
        uint64_t v38 = v45;
        v51();
        uint64_t v39 = (uint64_t)v46;
        (*v35)(v46, v38, v11);
        sub_100042698(v39, v37);
        (*v36)(v38, v11);
        uint64_t v40 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003E0D0(0, v40[2] + 1, 1);
          uint64_t v40 = v55;
        }
        unint64_t v42 = v40[2];
        unint64_t v41 = v40[3];
        if (v42 >= v41 >> 1)
        {
          sub_10003E0D0(v41 > 1, v42 + 1, 1);
          uint64_t v40 = v55;
        }
        v40[2] = v42 + 1;
        uint64_t v37 = (uint64_t)v47;
        sub_10003E068((uint64_t)v47, (uint64_t)v40+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(void *)(v53 + 72) * v42, type metadata accessor for FriendRecord);
        uint64_t v30 = (uint64_t)v48;
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v52)(v30, 1, v11) != 1);
    }
    swift_release();
    sub_10000A520(v30, &qword_1003EF6D8);
    swift_release_n();
    unint64_t v32 = v55;
    sub_100044014(&qword_1003F2B30);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v32;
  }
  return result;
}

uint64_t sub_10003E000(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003E068(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003E0D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10015892C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t *sub_10003E0F4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10003E158()
{
  uint64_t v1 = sub_100044014(&qword_1003EF6D8);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)v33 - v5;
  uint64_t v6 = type metadata accessor for Row();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v33 - v13;
  uint64_t result = Connection.prepare(_:)();
  if (!v0)
  {
    uint64_t v16 = result;
    unint64_t v41 = v9;
    uint64_t v34 = v14;
    uint64_t v35 = v12;
    swift_retain();
    uint64_t v17 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
    uint64_t v45 = &_swiftEmptyArrayStorage;
    sub_10003E6BC(0, v17 & ~(v17 >> 63), 0);
    uint64_t v18 = v16;
    uint64_t v19 = v45;
    swift_retain();
    uint64_t v42 = dispatch thunk of _AnySequenceBox._makeIterator()();
    v33[1] = v18;
    uint64_t result = swift_release();
    if (v17 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v17)
    {
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(v37 + 16);
      uint64_t v39 = (void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v40 = (uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()();
        uint64_t result = (*v40)(v4, 1, v6);
        if (result == 1) {
          goto LABEL_22;
        }
        uint64_t v20 = (uint64_t)v41;
        (*v38)(v41, v4, v6);
        sub_10003E864(v20, v44);
        (*v39)(v4, v6);
        uint64_t v19 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003E6BC(0, v19[2] + 1, 1);
          uint64_t v19 = v45;
        }
        unint64_t v22 = v19[2];
        unint64_t v21 = v19[3];
        if (v22 >= v21 >> 1)
        {
          sub_10003E6BC(v21 > 1, v22 + 1, 1);
          uint64_t v19 = v45;
        }
        v19[2] = v22 + 1;
        memcpy(&v19[54 * v22 + 4], v44, 0x1B0uLL);
      }
      while (--v17);
    }
    uint64_t v23 = (uint64_t)v36;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v24 = v37;
    uint64_t v40 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v37 + 48);
    unint64_t v41 = (char *)(v37 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v40)(v23, 1, v6) != 1)
    {
      uint64_t v26 = *(void (***)(char *, uint64_t))(v24 + 32);
      uint64_t v25 = v24 + 32;
      uint64_t v39 = v26;
      uint64_t v27 = (void (**)(char *, char *, uint64_t))(v25 - 16);
      unint64_t v28 = (void (**)(char *, uint64_t))(v25 - 24);
      uint64_t v37 = v25;
      do
      {
        unint64_t v29 = v34;
        ((void (*)(char *, uint64_t, uint64_t))v39)(v34, v23, v6);
        uint64_t v30 = (uint64_t)v35;
        (*v27)(v35, v29, v6);
        sub_10003E864(v30, v43);
        (*v28)(v29, v6);
        uint64_t v19 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003E6BC(0, v19[2] + 1, 1);
          uint64_t v19 = v45;
        }
        unint64_t v32 = v19[2];
        unint64_t v31 = v19[3];
        if (v32 >= v31 >> 1)
        {
          sub_10003E6BC(v31 > 1, v32 + 1, 1);
          uint64_t v19 = v45;
        }
        v19[2] = v32 + 1;
        memcpy(&v19[54 * v32 + 4], v43, 0x1B0uLL);
        uint64_t v23 = (uint64_t)v36;
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v40)(v23, 1, v6) != 1);
    }
    swift_release();
    sub_10000A520(v23, &qword_1003EF6D8);
    swift_release_n();
    sub_100044014(&qword_1003F2BA0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v19;
  }
  return result;
}

uint64_t sub_10003E6BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003E6DC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003E6DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003F04C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 432);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[432 * v8]) {
      memmove(v12, v13, 432 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[432 * v8] || v12 >= &v13[432 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10003E864@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  sub_10008DDB0(v36);
  if (qword_1003EC258 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_100044014(&qword_1003EF200);
  sub_100044058(v6, (uint64_t)qword_10040BD80);
  Row.subscript.getter();
  if (*((void *)&__src[0] + 1) >> 60 == 15)
  {
    int64_t v7 = v36;
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003ED068);
    sub_1002473E0(&qword_1003F2BB8, &qword_1003ED068, (void (*)(void))sub_100036EB0);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v2)
    {
      uint64_t v8 = type metadata accessor for Row();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      swift_release();
      return (void *)sub_1000440E8(*(uint64_t *)&__src[0], *((unint64_t *)&__src[0] + 1));
    }
    sub_1000440E8(*(uint64_t *)&__src[0], *((unint64_t *)&__src[0] + 1));
    swift_release();
    sub_100013B50((uint64_t)__src, (uint64_t)v23, &qword_1003ED068);
    int64_t v7 = v23;
  }
  sub_100013B50((uint64_t)v7, (uint64_t)v35, &qword_1003ED068);
  if (qword_1003EC260 != -1) {
    swift_once();
  }
  sub_100044058(v6, (uint64_t)qword_10040BD98);
  Row.subscript.getter();
  unint64_t v10 = v34;
  if (v34 >> 60 == 15)
  {
    sub_1000C0DC8((uint64_t)__src);
  }
  else
  {
    uint64_t v11 = v33;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003ECCD8);
    sub_1002473E0(&qword_1003F2BB0, &qword_1003ECCD8, (void (*)(void))sub_100036F04);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v2)
    {
      swift_errorRelease();
      sub_1000440E8(v11, v10);
      swift_release();
      sub_1000C0DC8((uint64_t)v24);
      sub_100013B50((uint64_t)v24, (uint64_t)__src, &qword_1003ECCD8);
      uint64_t v3 = 0;
    }
    else
    {
      sub_1000440E8(v11, v10);
      swift_release();
      sub_100013B50((uint64_t)v25, (uint64_t)v24, &qword_1003ECCD8);
      sub_100013B50((uint64_t)v24, (uint64_t)__src, &qword_1003ECCD8);
    }
  }
  sub_100013B50((uint64_t)__src, (uint64_t)v23, &qword_1003ECCD8);
  if (qword_1003EC268 != -1) {
    swift_once();
  }
  sub_100044058(v6, (uint64_t)qword_10040BDB0);
  Row.subscript.getter();
  unint64_t v12 = *((void *)&__src[0] + 1);
  if (*((void *)&__src[0] + 1) >> 60 == 15)
  {
    __dst = a2;
    uint64_t v37 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)&__src[0];
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003EE258);
    sub_1002473E0(&qword_1003F2BA8, &qword_1003EE258, (void (*)(void))sub_100036D64);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v3)
    {
      uint64_t v17 = type metadata accessor for Row();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
      sub_100013BB4(v35, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
      swift_release();
      return (void *)sub_1000440E8(v16, v12);
    }
    __dst = a2;
    sub_1000440E8(v16, v12);
    swift_release();
    uint64_t v13 = *((void *)&__src[0] + 1);
    uint64_t v37 = *(void *)&__src[0];
    uint64_t v15 = *((void *)&__src[1] + 1);
    uint64_t v14 = *(void *)&__src[1];
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  if (qword_1003EC250 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_100044014(&qword_1003EF1F0);
  sub_100044058(v18, (uint64_t)qword_10040BD68);
  Row.subscript.getter();
  uint64_t v19 = v24[0];
  unint64_t v20 = v24[1];
  sub_10003EFC8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v21 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
  if (v3)
  {
    sub_100037334(v37, v13);
    sub_100013BB4(v35, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    sub_100044090(v19, v20);
    return (void *)swift_release();
  }
  else
  {
    swift_release();
    sub_100044090(v19, v20);
    __src[0] = v25[0];
    __src[1] = v25[1];
    *(void *)&void __src[2] = v26;
    BYTE8(__src[2]) = v27;
    __src[3] = v28;
    *(void *)&__src[4] = v29;
    BYTE8(__src[4]) = v30;
    __src[5] = v31;
    sub_100013B50((uint64_t)v35, (uint64_t)&__src[6], &qword_1003ED068);
    sub_100013B50((uint64_t)v23, (uint64_t)&__src[16], &qword_1003ECCD8);
    *(void *)&__src[25] = v37;
    *((void *)&__src[25] + 1) = v13;
    *(void *)&__src[26] = v14;
    *((void *)&__src[26] + 1) = v15;
    return memcpy(__dst, __src, 0x1B0uLL);
  }
}

unint64_t sub_10003EFC8()
{
  unint64_t result = qword_1003EE2A8;
  if (!qword_1003EE2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EE2A8);
  }
  return result;
}

char *sub_10003F01C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  sub_100044014(a2);
  uint64_t v8 = *(void *)(a3(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  unint64_t result = (char *)j__malloc_size(v11);
  if (v9)
  {
    if (&result[-v10] != (char *)0x8000000000000000 || v9 != -1)
    {
      v11[2] = v4;
      v11[3] = 2 * ((uint64_t)&result[-v10] / v9);
      uint64_t v14 = sub_10003F17C(&v15, (uint64_t)v11 + v10, v4, a1, a4);
      swift_bridgeObjectRetain();
      sub_1001491B4();
      if (v14 == v4) {
        return (char *)v11;
      }
      __break(1u);
      return (char *)&_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003F17C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9 = a5(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v43 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v42 = (char *)&v33 - v14;
  uint64_t v44 = a4;
  uint64_t v17 = *(void *)(a4 + 56);
  uint64_t v16 = a4 + 56;
  uint64_t v15 = v17;
  uint64_t v38 = v16;
  uint64_t v18 = -1 << *(unsigned char *)(v16 - 24);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  if (!a2)
  {
    int64_t v21 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v32 = v38;
    *a1 = v44;
    a1[1] = v32;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return a3;
  }
  if (!a3)
  {
    int64_t v21 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v35 = -1 << *(unsigned char *)(v16 - 24);
  uint64_t v36 = a1;
  int64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v39 = v10 + 32;
  uint64_t v40 = v10 + 16;
  int64_t v37 = (unint64_t)(63 - v18) >> 6;
  int64_t v34 = v37 - 1;
  uint64_t v41 = a3;
  uint64_t v23 = v42;
  if (!v20) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  unint64_t v25 = v24 | (v21 << 6);
  while (1)
  {
    ++v22;
    uint64_t v29 = v43;
    uint64_t v30 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v43, *(void *)(v44 + 48) + v30 * v25, v9);
    long long v31 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v31(v23, v29, v9);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(a2, v23, v9);
    a3 = v41;
    if (v22 == v41) {
      goto LABEL_37;
    }
    a2 += v30;
    if (v20) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v37) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v38 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v21 = v26;
  }
  v21 += 2;
  if (v26 + 1 >= v37)
  {
    unint64_t v20 = 0;
    int64_t v21 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v21);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v37) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v21 = v26 + 3;
  if (v26 + 3 >= v37)
  {
    unint64_t v20 = 0;
    int64_t v21 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v21);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v21;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v37)
  {
LABEL_32:
    unint64_t v20 = 0;
LABEL_36:
    a3 = v22;
LABEL_37:
    uint64_t v18 = v35;
    a1 = v36;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v38 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v37)
    {
      unint64_t v20 = 0;
      int64_t v21 = v34;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v38 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *sub_10003F4C8(uint64_t a1)
{
  return sub_10003F01C(a1, &qword_1003F03A8, (uint64_t (*)(void))&type metadata accessor for Friend, (uint64_t (*)(void))&type metadata accessor for Friend);
}

uint64_t sub_10003F4EC()
{
  uint64_t v196 = v0;
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v153 = v0 + 16;
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_100041028(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_100041028(v3);
  swift_bridgeObjectRelease();
  if (qword_1003EC030 != -1) {
    goto LABEL_125;
  }
LABEL_2:
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B708);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v186 = v2;
  uint64_t v166 = v4;
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v152 = v7;
    os_log_t log = v6;
    uint64_t v8 = (_DWORD *)swift_slowAlloc();
    uint64_t v194 = swift_slowAlloc();
    unint64_t v156 = v8;
    *uint64_t v8 = 136315394;
    int64_t v9 = *(void *)(v4 + 16);
    if (v9)
    {
      uint64_t v172 = *(void *)(v0 + 368);
      uint64_t v176 = *(void *)(v0 + 384);
      uint64_t v169 = *(void *)(v0 + 360);
      uint64_t v10 = *(void *)(v0 + 272);
      uint64_t v11 = *(void *)(v0 + 248);
      unint64_t v195 = _swiftEmptyArrayStorage;
      sub_100040DC8(0, v9, 0);
      uint64_t v2 = sub_10015D8B8(v4);
      char v14 = v13 & 1;
      unint64_t v179 = v4 + 56;
      uint64_t v167 = v10;
      uint64_t v159 = (void (**)(uint64_t, uint64_t))(v11 + 8);
      unint64_t v15 = v4;
      do
      {
        if (v2 < 0 || v2 >= 1 << *(unsigned char *)(v15 + 32)) {
          goto LABEL_116;
        }
        if (((*(void *)(v179 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v2) & 1) == 0) {
          goto LABEL_117;
        }
        if (*(_DWORD *)(v15 + 36) != v12) {
          goto LABEL_118;
        }
        char v184 = v14;
        int v187 = v12;
        int64_t v190 = v9;
        uint64_t v16 = *(uint64_t **)(v0 + 384);
        uint64_t v18 = *(void *)(v0 + 344);
        uint64_t v17 = *(void *)(v0 + 352);
        uint64_t v19 = *(void *)(v0 + 256);
        uint64_t v20 = *(void *)(v0 + 264);
        uint64_t v182 = *(void *)(v0 + 240);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 16))(v17, *(void *)(v15 + 48) + *(void *)(v167 + 72) * v2, v20);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 32))(v18, v17, v20);
        unint64_t v4 = (unint64_t)v16 + *(int *)(v169 + 48);
        Friend.handle.getter();
        uint64_t v21 = Handle.identifier.getter();
        uint64_t v23 = v22;
        (*v159)(v19, v182);
        *uint64_t v16 = v21;
        *(void *)(v176 + 8) = v23;
        Friend.type.getter();
        (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v18, v20);
        unint64_t v24 = v195;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040DC8(0, v24[2] + 1, 1);
          unint64_t v24 = v195;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_100040DC8(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v195;
        }
        uint64_t v27 = *(void *)(v0 + 384);
        v24[2] = v26 + 1;
        sub_100013B50(v27, (uint64_t)v24+ ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80))+ *(void *)(v172 + 72) * v26, &qword_1003F04F8);
        unint64_t v15 = v166;
        int64_t v28 = sub_10015D958(v2, v187, v184 & 1, v166);
        uint64_t v2 = v28;
        char v14 = v29 & 1;
        --v9;
      }
      while (v190 != 1);
      sub_10015F040(v28, v12, v14);
      uint64_t v2 = v186;
    }
    uint64_t v30 = Array.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = sub_100037004(v30, v32, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *((_WORD *)v156 + 6) = 2080;
    int64_t v33 = *(void *)(v2 + 16);
    if (v33)
    {
      uint64_t v173 = *(void *)(v0 + 368);
      uint64_t v177 = *(void *)(v0 + 376);
      uint64_t v34 = *(void *)(v0 + 272);
      unint64_t v4 = *(void *)(v0 + 248);
      unint64_t v195 = _swiftEmptyArrayStorage;
      sub_100040DC8(0, v33, 0);
      int64_t v36 = sub_10015D8B8(v2);
      char v38 = v37 & 1;
      uint64_t v180 = v2 + 56;
      unint64_t v160 = (void (**)(uint64_t, uint64_t))(v4 + 8);
      uint64_t v39 = v34;
      do
      {
        if (v36 < 0 || v36 >= 1 << *(unsigned char *)(v2 + 32)) {
          goto LABEL_120;
        }
        if (((*(void *)(v180 + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          goto LABEL_121;
        }
        if (*(_DWORD *)(v2 + 36) != v35) {
          goto LABEL_122;
        }
        char v185 = v38;
        int v188 = v35;
        int64_t v191 = v33;
        uint64_t v40 = v2;
        uint64_t v41 = *(uint64_t **)(v0 + 376);
        uint64_t v43 = *(void *)(v0 + 344);
        uint64_t v42 = *(void *)(v0 + 352);
        uint64_t v45 = *(void *)(v0 + 256);
        uint64_t v44 = *(void *)(v0 + 264);
        uint64_t v183 = *(void *)(v0 + 240);
        (*(void (**)(uint64_t, int64_t, uint64_t))(v39 + 16))(v42, *(void *)(v40 + 48) + *(void *)(v39 + 72) * v36, v44);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v43, v42, v44);
        Friend.handle.getter();
        uint64_t v46 = Handle.identifier.getter();
        uint64_t v48 = v47;
        (*v160)(v45, v183);
        *uint64_t v41 = v46;
        *(void *)(v177 + 8) = v48;
        Friend.type.getter();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v44);
        long long v49 = v195;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040DC8(0, v49[2] + 1, 1);
          long long v49 = v195;
        }
        unint64_t v4 = v49[2];
        unint64_t v50 = v49[3];
        uint64_t v2 = v186;
        if (v4 >= v50 >> 1)
        {
          sub_100040DC8(v50 > 1, v4 + 1, 1);
          long long v49 = v195;
        }
        uint64_t v51 = *(void *)(v0 + 376);
        v49[2] = v4 + 1;
        sub_100013B50(v51, (uint64_t)v49+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(void *)(v173 + 72) * v4, &qword_1003F04F8);
        int64_t v52 = sub_10015D958(v36, v188, v185 & 1, v186);
        int64_t v36 = v52;
        char v38 = v53 & 1;
        int64_t v33 = v191 - 1;
      }
      while (v191 != 1);
      sub_10015F040(v52, v35, v38);
    }
    uint64_t v54 = Array.description.getter();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 40) = sub_100037004(v54, v56, &v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v152, "cachedFriends: %s\ncurrentFriends: %s", (uint8_t *)v156, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v4 = v166;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  Swift::Int v57 = *(void **)(v0 + 272);
  uint64_t v58 = *(void *)(v0 + 200);
  unint64_t v195 = (void *)v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002D2C0(v4);
  int64_t v59 = 0;
  unint64_t v157 = v195 + 7;
  uint64_t v163 = v195;
  uint64_t v60 = -1 << *((unsigned char *)v195 + 32);
  if (-v60 < 64) {
    uint64_t v61 = ~(-1 << -(char)v60);
  }
  else {
    uint64_t v61 = -1;
  }
  unint64_t v62 = v61 & v195[7];
  int64_t v158 = (unint64_t)(63 - v60) >> 6;
  uint64_t v189 = v2 + 56;
  uint64_t v181 = v57;
  long long v192 = v57 + 1;
  unsigned int loga = enum case for FriendshipAction.add(_:);
  uint64_t v165 = (void (**)(uint64_t, uint64_t, uint64_t))(v58 + 104);
  unsigned int v170 = enum case for FriendshipAction.remove(_:);
  long long v168 = (void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32);
  uint64_t v161 = v58;
  while (1)
  {
    if (v62)
    {
      uint64_t v174 = (v62 - 1) & v62;
      int64_t v178 = v59;
      unint64_t v67 = __clz(__rbit64(v62)) | (v59 << 6);
    }
    else
    {
      int64_t v68 = v59 + 1;
      if (__OFADD__(v59, 1)) {
        goto LABEL_115;
      }
      if (v68 >= v158)
      {
LABEL_69:
        swift_release();
        int64_t v107 = 0;
        uint64_t v108 = -1;
        uint64_t v109 = -1 << *(unsigned char *)(v2 + 32);
        if (-v109 < 64) {
          uint64_t v108 = ~(-1 << -(char)v109);
        }
        uint64_t v2 = v108 & *(void *)(v2 + 56);
        int64_t v164 = (unint64_t)(63 - v109) >> 6;
        long long v171 = (unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 272) + 48);
        unsigned int v162 = enum case for FriendshipAction.modify(_:);
        while (2)
        {
          if (v2)
          {
            unint64_t v111 = __clz(__rbit64(v2));
            v2 &= v2 - 1;
            int64_t v175 = v107;
            unint64_t v112 = v111 | (v107 << 6);
            goto LABEL_89;
          }
          int64_t v113 = v107 + 1;
          if (__OFADD__(v107, 1)) {
            goto LABEL_119;
          }
          if (v113 >= v164)
          {
LABEL_94:
            swift_release();
            swift_bridgeObjectRelease();
            if (*(void *)(*(void *)v153 + 16))
            {
              if ((*(unsigned char *)(v0 + 440) & 1) == 0)
              {
                uint64_t v139 = *(void *)(v0 + 56);
                swift_retain();
                uint64_t v140 = swift_bridgeObjectRetain();
                sub_10015E8E8(v140, v139, v153);
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              uint64_t v141 = *(void *)(v0 + 400);
              uint64_t v142 = swift_bridgeObjectRetain();
              int64_t v143 = sub_10015BE0C(v142, (unsigned int *)&enum case for HandleType.follower(_:), (unsigned int *)&enum case for FriendshipAction.add(_:));
              swift_bridgeObjectRelease();
              uint64_t v144 = sub_100149988((uint64_t)v143);
              swift_release();
              swift_bridgeObjectRetain();
              uint64_t v145 = swift_bridgeObjectRetain();
              uint64_t v146 = sub_10015EE64(v145, v144);
              *(void *)(v0 + 408) = 0;
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              *(void *)(v0 + 16) = v146;
              swift_bridgeObjectRelease();
              uint64_t v147 = *(void *)(v141 + 16);
              swift_bridgeObjectRelease();
              if (v147)
              {
                uint64_t v148 = *(void *)(v0 + 16);
                *(void *)(v0 + 424) = v148;
                swift_bridgeObjectRetain();
                uint64_t v149 = (void *)swift_task_alloc();
                *(void *)(v0 + 432) = v149;
                *uint64_t v149 = v0;
                v149[1] = sub_100151134;
                return sub_1001530F8(v148);
              }
              else
              {
                uint64_t v150 = (void *)swift_task_alloc();
                *(void *)(v0 + 416) = v150;
                *uint64_t v150 = v0;
                v150[1] = sub_10015041C;
                uint64_t v151 = *(void *)(v0 + 48);
                return sub_100152780(v151);
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              char v135 = Logger.logObject.getter();
              os_log_type_t v136 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v135, v136))
              {
                uint64_t v137 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v137 = 0;
                _os_log_impl((void *)&_mh_execute_header, v135, v136, "No friends to update.", v137, 2u);
                swift_slowDealloc();
              }

              unint64_t v193 = sub_10004B52C((uint64_t)_swiftEmptyArrayStorage);
              swift_bridgeObjectRelease();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              uint64_t v138 = *(uint64_t (**)(unint64_t))(v0 + 8);
              return v138(v193);
            }
          }
          unint64_t v114 = *(void *)(v189 + 8 * v113);
          int64_t v115 = v107 + 1;
          if (v114) {
            goto LABEL_88;
          }
          int64_t v115 = v107 + 2;
          if (v107 + 2 >= v164) {
            goto LABEL_94;
          }
          unint64_t v114 = *(void *)(v189 + 8 * v115);
          if (v114) {
            goto LABEL_88;
          }
          int64_t v115 = v107 + 3;
          if (v107 + 3 >= v164) {
            goto LABEL_94;
          }
          unint64_t v114 = *(void *)(v189 + 8 * v115);
          if (v114)
          {
LABEL_88:
            uint64_t v2 = (v114 - 1) & v114;
            int64_t v175 = v115;
            unint64_t v112 = __clz(__rbit64(v114)) + (v115 << 6);
LABEL_89:
            uint64_t v117 = *(void *)(v0 + 304);
            uint64_t v118 = *(void *)(v0 + 312);
            uint64_t v119 = *(void *)(v0 + 264);
            unint64_t v120 = *(char **)(v0 + 184);
            unint64_t v121 = (void (*)(uint64_t, unint64_t, uint64_t))v181[2];
            v121(v118, *(void *)(v186 + 48) + v181[9] * v112, v119);
            os_log_type_t v122 = (void (*)(uint64_t, uint64_t, uint64_t))v181[4];
            v122(v117, v118, v119);
            *(void *)(swift_task_alloc() + 16) = v117;
            unint64_t v4 = 0;
            sub_100040A40((uint64_t (*)(char *))sub_100040D98, v166, v120);
            swift_task_dealloc();
            if ((*v171)(v120, 1, v119) == 1)
            {
              uint64_t v110 = *(void *)(v0 + 184);
              ((void (*)(void, void))*v192)(*(void *)(v0 + 304), *(void *)(v0 + 264));
              sub_10000A520(v110, &qword_1003ECFE8);
              int64_t v107 = v175;
            }
            else
            {
              v122(*(void *)(v0 + 296), *(void *)(v0 + 184), *(void *)(v0 + 264));
              if (Friend.checkFriendUpdateNeeded(with:)())
              {
                uint64_t v123 = *(void *)(v0 + 352);
                unint64_t v4 = *(void *)(v0 + 296);
                unint64_t v124 = *(void *)(v0 + 304);
                uint64_t v125 = *(void *)(v0 + 264);
                uint64_t v127 = *(void *)(v0 + 208);
                uint64_t v126 = *(void *)(v0 + 216);
                uint64_t v128 = *(void *)(v0 + 192);
                v121(v123, v124, v125);
                (*v165)(v126, v162, v128);
                (*v168)(v127, v126, v128);
                long long v129 = *(void **)(v0 + 16);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v195 = v129;
                sub_1001432D8(v127, v123, isUniquelyReferenced_nonNull_native);
                *(void *)(v0 + 16) = v195;
                swift_bridgeObjectRelease();
                unint64_t v131 = (void (*)(unint64_t, uint64_t))*v192;
                ((void (*)(uint64_t, uint64_t))*v192)(v123, v125);
                v131(v4, v125);
                v131(v124, v125);
              }
              else
              {
                uint64_t v132 = *(void *)(v0 + 304);
                uint64_t v133 = *(void *)(v0 + 264);
                unint64_t v4 = *v192;
                ((void (*)(void, uint64_t))*v192)(*(void *)(v0 + 296), v133);
                ((void (*)(uint64_t, uint64_t))v4)(v132, v133);
              }
              int64_t v107 = v175;
            }
            continue;
          }
          break;
        }
        uint64_t v116 = v107 + 4;
        if (v107 + 4 >= v164) {
          goto LABEL_94;
        }
        unint64_t v114 = *(void *)(v189 + 8 * v116);
        if (v114)
        {
          int64_t v115 = v107 + 4;
          goto LABEL_88;
        }
        while (1)
        {
          int64_t v115 = v116 + 1;
          if (__OFADD__(v116, 1)) {
            break;
          }
          if (v115 >= v164) {
            goto LABEL_94;
          }
          unint64_t v114 = *(void *)(v189 + 8 * v115);
          ++v116;
          if (v114) {
            goto LABEL_88;
          }
        }
LABEL_124:
        __break(1u);
LABEL_125:
        swift_once();
        goto LABEL_2;
      }
      unint64_t v69 = v157[v68];
      int64_t v70 = v59 + 1;
      if (!v69)
      {
        int64_t v70 = v59 + 2;
        if (v59 + 2 >= v158) {
          goto LABEL_69;
        }
        unint64_t v69 = v157[v70];
        if (!v69)
        {
          int64_t v70 = v59 + 3;
          if (v59 + 3 >= v158) {
            goto LABEL_69;
          }
          unint64_t v69 = v157[v70];
          if (!v69)
          {
            uint64_t v71 = v59 + 4;
            if (v59 + 4 >= v158) {
              goto LABEL_69;
            }
            unint64_t v69 = v157[v71];
            if (!v69)
            {
              while (1)
              {
                int64_t v70 = v71 + 1;
                if (__OFADD__(v71, 1)) {
                  break;
                }
                if (v70 >= v158) {
                  goto LABEL_69;
                }
                unint64_t v69 = v157[v70];
                ++v71;
                if (v69) {
                  goto LABEL_50;
                }
              }
LABEL_123:
              __break(1u);
              goto LABEL_124;
            }
            int64_t v70 = v59 + 4;
          }
        }
      }
LABEL_50:
      uint64_t v174 = (v69 - 1) & v69;
      int64_t v178 = v70;
      unint64_t v67 = __clz(__rbit64(v69)) + (v70 << 6);
    }
    unint64_t v72 = *(void *)(v0 + 328);
    uint64_t v73 = *(void *)(v0 + 336);
    uint64_t v74 = *(void *)(v0 + 320);
    uint64_t v75 = *(void *)(v0 + 264);
    unint64_t v4 = v181[9];
    uint64_t v76 = (void (*)(uint64_t, unint64_t, uint64_t))v181[2];
    v76(v73, v163[6] + v4 * v67, v75);
    ((void (*)(unint64_t, uint64_t, uint64_t))v181[4])(v72, v73, v75);
    v76(v74, v72, v75);
    uint64_t v77 = v170;
    if (*(void *)(v2 + 16))
    {
      sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v78 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v79 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v80 = v78 & ~v79;
      uint64_t v77 = v170;
      if ((*(void *)(v189 + ((v80 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v80))
      {
        uint64_t v81 = ~v79;
        while (1)
        {
          uint64_t v82 = *(void *)(v0 + 352);
          uint64_t v83 = *(void *)(v0 + 264);
          v76(v82, *(void *)(v2 + 48) + v80 * v4, v83);
          sub_1000471EC(&qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend);
          char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
          ((void (*)(uint64_t, uint64_t))*v192)(v82, v83);
          if (v84) {
            break;
          }
          unint64_t v80 = (v80 + 1) & v81;
          if (((*(void *)(v189 + ((v80 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v80) & 1) == 0)
          {
            uint64_t v77 = v170;
            goto LABEL_58;
          }
        }
        uint64_t v77 = loga;
      }
    }
LABEL_58:
    uint64_t v85 = *(void *)(v0 + 320);
    uint64_t v87 = *(void *)(v0 + 224);
    uint64_t v86 = *(void *)(v0 + 232);
    uint64_t v88 = *(void *)(v0 + 192);
    (*v165)(v86, v77, v88);
    long long v89 = *v168;
    (*v168)(v87, v86, v88);
    uint64_t v90 = *(void **)(v0 + 16);
    int v91 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v195 = v90;
    *(void *)(v0 + 16) = 0x8000000000000000;
    unint64_t v93 = sub_1001221BC(v85);
    uint64_t v94 = v90[2];
    BOOL v95 = (v92 & 1) == 0;
    uint64_t v96 = v94 + v95;
    if (__OFADD__(v94, v95))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    uint64_t v2 = v92;
    if (v90[3] < v96) {
      break;
    }
    if (v91)
    {
      if (v92) {
        goto LABEL_33;
      }
    }
    else
    {
      sub_100126860();
      uint64_t v90 = v195;
      if (v2)
      {
LABEL_33:
        (*(void (**)(unint64_t, void, void))(v161 + 40))(v90[7] + *(void *)(v161 + 72) * v93, *(void *)(v0 + 224), *(void *)(v0 + 192));
        goto LABEL_34;
      }
    }
LABEL_65:
    unint64_t v100 = *(void *)(v0 + 320);
    uint64_t v101 = *(void *)(v0 + 264);
    uint64_t v102 = *(void *)(v0 + 224);
    uint64_t v103 = *(void *)(v0 + 192);
    v90[(v93 >> 6) + 8] |= 1 << v93;
    v76(v90[6] + v93 * v4, v100, v101);
    v89(v90[7] + *(void *)(v161 + 72) * v93, v102, v103);
    uint64_t v104 = v90[2];
    BOOL v105 = __OFADD__(v104, 1);
    uint64_t v106 = v104 + 1;
    if (v105) {
      goto LABEL_114;
    }
    v90[2] = v106;
LABEL_34:
    uint64_t v64 = *(void *)(v0 + 320);
    uint64_t v63 = *(void *)(v0 + 328);
    uint64_t v65 = *(void *)(v0 + 264);
    *(void *)(v0 + 16) = v90;
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v192;
    uint64_t v66 = (void (*)(uint64_t, uint64_t))*v192;
    ((void (*)(uint64_t, uint64_t))*v192)(v64, v65);
    v66(v63, v65);
    uint64_t v2 = v186;
    unint64_t v62 = v174;
    int64_t v59 = v178;
  }
  uint64_t v97 = *(void *)(v0 + 320);
  sub_1001402F4(v96, v91);
  uint64_t v90 = v195;
  unint64_t v98 = sub_1001221BC(v97);
  if ((v2 & 1) == (v99 & 1))
  {
    unint64_t v93 = v98;
    if (v2) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_100040A40@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  int64_t v33 = a1;
  int64_t v28 = a3;
  uint64_t v5 = type metadata accessor for Friend();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v29 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v32 = v6 + 16;
  uint64_t v34 = v6 + 32;
  int64_t v30 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v31 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v35 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v35 + 48) + *(void *)(v6 + 72) * i, v5);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v9, v11, v5);
    char v24 = v33(v9);
    if (v3)
    {
      (*v31)(v9, v5);
      return swift_release();
    }
    if (v24)
    {
      swift_release();
      unint64_t v25 = v28;
      v23(v28, v9, v5);
      uint64_t v26 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v31)(v9, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v30) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v29 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v30) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v29 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v30) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v29 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v30) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v29 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v30)
      {
        unint64_t v21 = *(void *)(v29 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_31;
            }
            if (v17 >= v30) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v29 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      unint64_t v25 = v28;
      swift_release();
      uint64_t v26 = 1;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v25, v26, 1, v5);
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100040D98()
{
  return static Friend.== infix(_:_:)() & 1;
}

uint64_t sub_100040DC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100158918(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100040DE8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100044014(a5);
  uint64_t v13 = *(void *)(sub_100044014(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100044014(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  int64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041028(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Friend();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100017ACC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100046C40((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1000411C4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100041328((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_100041328((unint64_t *)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_100041328(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for Device();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = 0;
  uint64_t v27 = a3;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v24 = 0;
  uint64_t v25 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v26) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v25 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v25 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v27 + 48) + *(void *)(v5 + 72) * v15, v4);
    char v16 = Device.isActive.getter();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v16)
    {
      *(unint64_t *)((char *)v23 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v21 = v27;
        swift_retain();
        return sub_100041790(v23, v22, v24, v21);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v26) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v25 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000415B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = a3((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = a3((char *)v13, v9, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_100041790(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Device();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100044014(&qword_1003F0520);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_100017ACC(&qword_1003EEC10, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100041B20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FriendInfoOption.init(from:)(a1, a2);
}

uint64_t FriendInfoOption.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v3 - 8);
  uint64_t v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for ClientOrigin();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HandleType();
  uint64_t v40 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100044014(&qword_1003EEAB8);
  uint64_t v16 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (int *)type metadata accessor for FriendInfoOption(0);
  __chkstk_darwin(v44);
  uint64_t v45 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[3];
  uint64_t v42 = a1;
  sub_100042524(a1, v20);
  sub_100042644();
  uint64_t v36 = v18;
  uint64_t v21 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v37 = v13;
  if (v21) {
    return sub_1000233E4((uint64_t)v42);
  }
  uint64_t v43 = v16;
  LOBYTE(v47) = 0;
  sub_1000424DC(&qword_1003EEAC0, (void (*)(uint64_t))&type metadata accessor for HandleType);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v45;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v45, v15, v13);
  LOBYTE(v47) = 1;
  sub_1000424DC(&qword_1003EEAC8, (void (*)(uint64_t))&type metadata accessor for ClientOrigin);
  uint64_t v23 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v24 = v44;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v22[v44[5]], v12, v23);
  sub_100044014(&qword_1003EEA90);
  char v46 = 2;
  sub_100042568();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v22[v24[6]] = v47;
  type metadata accessor for Date();
  LOBYTE(v47) = 3;
  sub_1000424DC(&qword_1003EEAE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v9, (uint64_t)&v22[v24[7]], (uint64_t *)&unk_1003EE800);
  LOBYTE(v47) = 4;
  uint64_t v25 = (uint64_t)v35;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50(v25, (uint64_t)&v22[v24[8]], (uint64_t *)&unk_1003EE800);
  LOBYTE(v47) = 5;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v27 = (uint64_t *)&v22[v24[9]];
  *char v27 = v26;
  v27[1] = v28;
  type metadata accessor for Handle();
  LOBYTE(v47) = 6;
  sub_1000424DC(&qword_1003EEAE8, (void (*)(uint64_t))&type metadata accessor for Handle);
  uint64_t v29 = (uint64_t)v34;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50(v29, (uint64_t)&v22[v24[10]], &qword_1003F3B30);
  LOBYTE(v47) = 7;
  v22[v24[11]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v47) = 8;
  v22[v24[12]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v47) = 9;
  v45[v44[13]] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v47) = 10;
  char v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v41);
  uint64_t v32 = (uint64_t)v45;
  v45[v44[14]] = v31;
  sub_1000456C0(v32, v33, type metadata accessor for FriendInfoOption);
  sub_1000233E4((uint64_t)v42);
  return sub_100044B7C(v32, type metadata accessor for FriendInfoOption);
}

uint64_t sub_1000424DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100042524(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100042568()
{
  unint64_t result = qword_1003EEAD0;
  if (!qword_1003EEAD0)
  {
    sub_10004AE58(&qword_1003EEA90);
    sub_1000424DC(&qword_1003EEAD8, (void (*)(uint64_t))&type metadata accessor for GroupID);
    sub_1000424DC(&qword_1003EEAE0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEAD0);
  }
  return result;
}

unint64_t sub_100042644()
{
  unint64_t result = qword_1003EEA78;
  if (!qword_1003EEA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEA78);
  }
  return result;
}

uint64_t sub_100042698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100044014(&qword_1003EEBD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v71 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100044014(&qword_1003F3B30);
  __chkstk_darwin(v7 - 8);
  int64_t v70 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (int *)type metadata accessor for FriendRecord(0);
  uint64_t v10 = (void *)(a2 + v9[16]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  uint64_t v11 = a2 + v9[36];
  uint64_t v12 = type metadata accessor for Handle();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(v13 + 56);
  uint64_t v88 = v11;
  uint64_t v74 = (uint8_t *)v12;
  uint64_t v73 = v14;
  uint64_t v72 = v13 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v11, 1, 1);
  if (qword_1003EC110 != -1) {
    swift_once();
  }
  uint64_t v91 = v2;
  uint64_t v90 = sub_100044014(&qword_1003EF230);
  sub_100044058(v90, (uint64_t)qword_10040B9A8);
  Row.subscript.getter();
  uint64_t v15 = *((void *)&v93 + 1);
  *(void *)a2 = v93;
  *(void *)(a2 + 8) = v15;
  if (qword_1003EC118 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_100044014(&qword_1003F2590);
  sub_100044058(v16, (uint64_t)qword_10040B9C0);
  Row.subscript.getter();
  *(_OWORD *)(a2 + 16) = v93;
  if (qword_1003EC120 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100044014(&qword_1003F2598);
  sub_100044058(v17, (uint64_t)qword_10040B9D8);
  Row.subscript.getter();
  if (BYTE8(v93) == 1)
  {
    uint64_t v18 = a2 + v9[6];
    uint64_t v19 = type metadata accessor for IDSStatus();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  }
  else
  {
    IDSStatus.init(rawValue:)();
  }
  if (qword_1003EC128 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040B9F0);
  Row.subscript.getter();
  uint64_t v81 = (_OWORD *)(a2 + v9[7]);
  *uint64_t v81 = v93;
  if (qword_1003EC130 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100044014(&qword_1003F25A0);
  sub_100044058(v20, (uint64_t)qword_10040BA08);
  Row.subscript.getter();
  *(void *)(a2 + v9[8]) = v93;
  if (qword_1003EC138 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BA20);
  Row.subscript.getter();
  unint64_t v80 = (_OWORD *)(a2 + v9[9]);
  *unint64_t v80 = v93;
  if (qword_1003EC140 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BA38);
  Row.subscript.getter();
  uint64_t v79 = (_OWORD *)(a2 + v9[10]);
  _OWORD *v79 = v93;
  if (qword_1003EC148 != -1) {
    swift_once();
  }
  uint64_t v89 = sub_100044014(&qword_1003F25A8);
  sub_100044058(v89, (uint64_t)qword_10040BA50);
  Row.subscript.getter();
  *(unsigned char *)(a2 + v9[11]) = v93;
  if (qword_1003EC158 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BA80);
  Row.subscript.getter();
  uint64_t v78 = (_OWORD *)(a2 + v9[13]);
  *uint64_t v78 = v93;
  if (qword_1003EC160 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BA98);
  Row.subscript.getter();
  uint64_t v77 = (_OWORD *)(a2 + v9[14]);
  *uint64_t v77 = v93;
  if (qword_1003EC170 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BAC8);
  Row.subscript.getter();
  long long v21 = v93;
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v10 = v21;
  uint64_t v82 = v10;
  if (qword_1003EC150 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_100044014(&qword_1003EF200);
  sub_100044058(v22, (uint64_t)qword_10040BA68);
  Row.subscript.getter();
  unint64_t v23 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >> 60 == 15)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v87 = v22;
    uint64_t v25 = v93;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED618);
    uint64_t v26 = v91;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v26)
    {
      swift_errorRelease();
      sub_1000440E8(v25, v23);
      swift_release();
      uint64_t v24 = 0;
      uint64_t v91 = 0;
    }
    else
    {
      uint64_t v91 = 0;
      sub_1000440E8(v25, v23);
      swift_release();
      uint64_t v24 = v93;
    }
    uint64_t v22 = v87;
  }
  *(void *)(a2 + v9[12]) = v24;
  if (qword_1003EC168 != -1) {
    swift_once();
  }
  sub_100044058(v90, (uint64_t)qword_10040BAB0);
  Row.subscript.getter();
  uint64_t v27 = *((void *)&v93 + 1);
  uint64_t v28 = (void *)(a2 + v9[15]);
  *uint64_t v28 = v93;
  v28[1] = v27;
  uint64_t v76 = v28;
  if (qword_1003EC178 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BAE0);
  Row.subscript.getter();
  uint64_t v90 = a2 + v9[17];
  *(_OWORD *)uint64_t v90 = v93;
  if (qword_1003EC180 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BAF8);
  Row.subscript.getter();
  uint64_t v87 = a2 + v9[18];
  *(_OWORD *)uint64_t v87 = v93;
  if (qword_1003EC188 != -1) {
    swift_once();
  }
  sub_100044058(v17, (uint64_t)qword_10040BB10);
  Row.subscript.getter();
  if (BYTE8(v93) == 1)
  {
    uint64_t v29 = a2 + v9[19];
    uint64_t v30 = type metadata accessor for IDSStatus();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  }
  else
  {
    IDSStatus.init(rawValue:)();
  }
  if (qword_1003EC190 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BB28);
  Row.subscript.getter();
  uint64_t v86 = (_OWORD *)(a2 + v9[20]);
  *uint64_t v86 = v93;
  if (qword_1003EC1A0 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_100044014(&qword_1003F25B0);
  sub_100044058(v31, (uint64_t)qword_10040BB58);
  Row.subscript.getter();
  char v32 = BYTE8(v93);
  uint64_t v33 = a2 + v9[22];
  *(void *)uint64_t v33 = v93;
  *(unsigned char *)(v33 + 8) = v32;
  if (qword_1003EC1A8 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BB70);
  Row.subscript.getter();
  uint64_t v75 = (_OWORD *)(a2 + v9[23]);
  *uint64_t v75 = v93;
  if (qword_1003EC1B0 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BB88);
  Row.subscript.getter();
  uint64_t v85 = a2 + v9[24];
  *(_OWORD *)uint64_t v85 = v93;
  if (qword_1003EC1B8 != -1) {
    swift_once();
  }
  sub_100044058(v89, (uint64_t)qword_10040BBA0);
  Row.subscript.getter();
  uint64_t v69 = v9[25];
  *(unsigned char *)(a2 + v69) = v93;
  if (qword_1003EC1C8 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BBD0);
  Row.subscript.getter();
  uint64_t v89 = a2 + v9[27];
  *(_OWORD *)uint64_t v89 = v93;
  if (qword_1003EC1D0 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BBE8);
  Row.subscript.getter();
  char v84 = (_OWORD *)(a2 + v9[28]);
  _OWORD *v84 = v93;
  if (qword_1003EC1D8 != -1) {
    swift_once();
  }
  sub_100044058(v16, (uint64_t)qword_10040BC00);
  Row.subscript.getter();
  uint64_t v83 = (uint64_t *)(a2 + v9[29]);
  *(_OWORD *)uint64_t v83 = v93;
  if (qword_1003EC1C0 != -1) {
    swift_once();
  }
  sub_100044058(v22, (uint64_t)qword_10040BBB8);
  Row.subscript.getter();
  unint64_t v34 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >> 60 == 15)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v91;
  }
  else
  {
    uint64_t v37 = v93;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED618);
    uint64_t v38 = v91;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v36 = v38;
    if (v38)
    {
      swift_errorRelease();
      sub_1000440E8(v37, v34);
      swift_release();
      uint64_t v35 = 0;
      uint64_t v36 = 0;
    }
    else
    {
      sub_1000440E8(v37, v34);
      swift_release();
      uint64_t v35 = v93;
    }
  }
  *(void *)(a2 + v9[26]) = v35;
  if (qword_1003EC198 != -1) {
    swift_once();
  }
  sub_100044058(v22, (uint64_t)qword_10040BB40);
  Row.subscript.getter();
  unint64_t v39 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1) >> 60 == 15)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = v93;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100044014(&qword_1003EEA90);
    sub_100042568();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v36)
    {
      swift_errorRelease();
      sub_1000440E8(v41, v39);
      swift_release();
      uint64_t v40 = 0;
      uint64_t v36 = 0;
    }
    else
    {
      sub_1000440E8(v41, v39);
      swift_release();
      uint64_t v40 = v93;
    }
  }
  *(void *)(a2 + v9[21]) = v40;
  if (qword_1003EC1E0 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_100044014(&qword_1003EF278);
  sub_100044058(v42, (uint64_t)qword_10040BC18);
  Row.subscript.getter();
  *(unsigned char *)(a2 + v9[30]) = v93;
  if (qword_1003EC1E8 != -1) {
    swift_once();
  }
  sub_100044058(v42, (uint64_t)qword_10040BC30);
  Row.subscript.getter();
  *(unsigned char *)(a2 + v9[31]) = v93;
  if (qword_1003EC1F0 != -1) {
    swift_once();
  }
  sub_100044058(v42, (uint64_t)qword_10040BC48);
  Row.subscript.getter();
  *(unsigned char *)(a2 + v9[32]) = v93;
  if (qword_1003EC1F8 != -1) {
    swift_once();
  }
  sub_100044058(v42, (uint64_t)qword_10040BC60);
  Row.subscript.getter();
  *(unsigned char *)(a2 + v9[33]) = v93;
  if (qword_1003EC200 != -1) {
    swift_once();
  }
  uint64_t v43 = sub_100044014(&qword_1003EF1F0);
  sub_100044058(v43, (uint64_t)qword_10040BC78);
  Row.subscript.getter();
  long long v44 = v93;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_100044014(&qword_1003F2B38);
  sub_100047898();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v36)
  {
    swift_release();
    uint64_t v51 = sub_1000465B4(v93);
    swift_bridgeObjectRelease();
    *(void *)(a2 + v9[34]) = v51;
    if (qword_1003EC208 != -1) {
      swift_once();
    }
    uint64_t v52 = sub_100044014(&qword_1003F25B8);
    sub_100044058(v52, (uint64_t)qword_10040BC90);
    sub_100046560();
    Row.subscript.getter();
    *(void *)(a2 + v9[35]) = v93;
    if (*(void *)(v90 + 8))
    {
      if (*(void *)(a2 + v9[21]))
      {
        if ((*(unsigned char *)(v33 + 8) & 1) == 0)
        {
          uint64_t v61 = *(void **)v90;
          uint64_t v62 = *(void *)(v87 + 8);
          uint64_t v81 = *(_OWORD **)v87;
          uint64_t v82 = v61;
          uint64_t v63 = v83[1];
          uint64_t v87 = *v83;
          uint64_t v90 = v63;
          uint64_t v91 = v62;
          sub_100013210(a2 + v9[19], v71, &qword_1003EEBD0);
          uint64_t v83 = *(uint64_t **)v86;
          uint64_t v64 = *(_OWORD **)(v85 + 8);
          uint64_t v86 = *(_OWORD **)v85;
          uint64_t v77 = v64;
          LODWORD(v85) = *(unsigned __int8 *)(a2 + v69);
          uint64_t v65 = *(_OWORD **)(a2 + v9[26]);
          uint64_t v66 = *(_OWORD **)(v89 + 8);
          unint64_t v80 = *(_OWORD **)v89;
          uint64_t v78 = v65;
          uint64_t v79 = v66;
          uint64_t v89 = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v67 = (uint64_t)v70;
          Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)();
          sub_100044090(v44, *((unint64_t *)&v44 + 1));
          uint64_t v68 = type metadata accessor for Row();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(a1, v68);
          v73(v67, 0, 1, v74);
          return sub_10004793C(v67, v88);
        }
        uint64_t v53 = type metadata accessor for Row();
        uint64_t v54 = *(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54(a1, v53);
        sub_100044090(v44, *((unint64_t *)&v44 + 1));
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v58 = type metadata accessor for Row();
        int64_t v59 = *(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8);
        swift_bridgeObjectRetain();
        v59(a1, v58);
        sub_100044090(v44, *((unint64_t *)&v44 + 1));
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v57 = type metadata accessor for Row();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(a1, v57);
      sub_100044090(v44, *((unint64_t *)&v44 + 1));
    }
    uint64_t v60 = v88;
    sub_10000A520(v88, &qword_1003F3B30);
    return v73(v60, 1, 1, v74);
  }
  sub_100044090(v44, *((unint64_t *)&v44 + 1));
  swift_release();
  if (qword_1003EC3F0 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  sub_100044058(v45, (uint64_t)qword_10040C248);
  swift_errorRetain();
  swift_errorRetain();
  char v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    uint64_t v92 = v36;
    *(void *)&long long v93 = v91;
    *(_DWORD *)uint64_t v48 = 136446210;
    uint64_t v74 = v48 + 4;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v49 = String.init<A>(describing:)();
    uint64_t v92 = sub_100037004(v49, v50, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Read FriendRecord error: %{public}s", v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v55 = type metadata accessor for Row();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(a1, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A520(a2 + v9[6], &qword_1003EEBD0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A520(a2 + v9[19], &qword_1003EEBD0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000A520(v88, &qword_1003F3B30);
}

uint64_t sub_100044014(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100044058(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100044090(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000440E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100044090(a1, a2);
  }
  return a1;
}

uint64_t sub_1000440FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004415C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for ClientOrigin();
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v71 = v3;
  __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100044014((uint64_t *)&unk_1003EE800);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v80 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v79 = (uint64_t)&v62 - v8;
  uint64_t v67 = type metadata accessor for HandleType();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v78 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FriendRecord(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v74 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v62 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v69 = (void (**)(char *, uint64_t))((char *)&v62 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v68 = (uint64_t)&v62 - v18;
  __chkstk_darwin(v17);
  uint64_t v65 = (uint64_t)&v62 - v19;
  uint64_t v20 = sub_100044014(&qword_1003F3B30);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v64 = (uint64_t)&v62 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v77 = (char *)&v62 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v62 - v27;
  uint64_t v29 = type metadata accessor for Handle();
  uint64_t v30 = *(char **)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v76 = (char *)&v62 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v83 = (char *)&v62 - v33;
  uint64_t v34 = sub_100044014(&qword_1003EEBC8);
  __chkstk_darwin(v34 - 8);
  uint64_t v36 = (char *)&v62 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (int *)type metadata accessor for FriendInfoOption(0);
  uint64_t v38 = *((void *)v37 - 1);
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v62 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v10;
  uint64_t v82 = v2;
  uint64_t v41 = *(void *)(v2 + *(int *)(v10 + 136));
  uint64_t v42 = v85;
  uint64_t v86 = v85;
  swift_bridgeObjectRetain();
  sub_100046194((uint64_t (*)(char *))sub_1000464DC, v41, (uint64_t)v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37) == 1)
  {
    uint64_t v43 = &qword_1003EEBC8;
    uint64_t v44 = (uint64_t)v36;
LABEL_5:
    sub_10000A520(v44, v43);
    uint64_t v46 = type metadata accessor for Friend();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v84, 1, 1, v46);
  }
  sub_1000457F4((uint64_t)v36, (uint64_t)v40);
  sub_100045BE4(v42, (uint64_t)v28);
  uint64_t v45 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v30 + 6);
  if (v45(v28, 1, v29) == 1)
  {
    sub_100044B7C((uint64_t)v40, type metadata accessor for FriendInfoOption);
    uint64_t v43 = &qword_1003F3B30;
    uint64_t v44 = (uint64_t)v28;
    goto LABEL_5;
  }
  uint64_t v48 = (void (*)(char *, char *, uint64_t))*((void *)v30 + 4);
  v48(v83, v28, v29);
  uint64_t v49 = v37[10];
  uint64_t v62 = v40;
  uint64_t v50 = v64;
  sub_100013210((uint64_t)&v40[v49], v64, &qword_1003F3B30);
  uint64_t v51 = v82;
  uint64_t v52 = v65;
  sub_1000456C0(v82, v65, type metadata accessor for FriendRecord);
  if (v45((char *)v50, 1, v29) == 1)
  {
    sub_100013210(v52 + *(int *)(v81 + 144), (uint64_t)v77, &qword_1003F3B30);
    sub_100044B7C(v52, type metadata accessor for FriendRecord);
    sub_10000A520(v50, &qword_1003F3B30);
  }
  else
  {
    sub_100044B7C(v52, type metadata accessor for FriendRecord);
    uint64_t v53 = (uint64_t)v77;
    v48(v77, (char *)v50, v29);
    (*((void (**)(uint64_t, void, uint64_t, uint64_t))v30 + 7))(v53, 0, 1, v29);
  }
  uint64_t v54 = (uint64_t)v69;
  uint64_t v69 = (void (**)(char *, uint64_t))v30;
  (*((void (**)(char *, char *, uint64_t))v30 + 2))(v76, v83, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v78, v85, v67);
  uint64_t v55 = (uint64_t)v62;
  sub_100013210((uint64_t)&v62[v37[8]], v79, (uint64_t *)&unk_1003EE800);
  sub_100013210(v55 + v37[7], v80, (uint64_t *)&unk_1003EE800);
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v75, v55 + v37[5], v71);
  uint64_t v56 = v68;
  sub_1000456C0(v51, v68, type metadata accessor for FriendRecord);
  uint64_t v63 = v29;
  uint64_t v57 = (uint64_t)v72;
  sub_100044B7C(v56, type metadata accessor for FriendRecord);
  sub_1000456C0(v51, v54, type metadata accessor for FriendRecord);
  sub_100044B7C(v54, type metadata accessor for FriendRecord);
  sub_1000456C0(v51, v57, type metadata accessor for FriendRecord);
  uint64_t v58 = v84;
  sub_100044B7C(v57, type metadata accessor for FriendRecord);
  uint64_t v59 = v74;
  sub_1000456C0(v51, v74, type metadata accessor for FriendRecord);
  sub_100044B7C(v59, type metadata accessor for FriendRecord);
  uint64_t v60 = (uint64_t)v77;
  sub_100013210((uint64_t)v77, v73, &qword_1003F3B30);
  Friend.init(handle:type:expiry:createdAt:origin:secureLocationsCapable:shallowOrLiveSecureLocationsCapable:fallbackToLegacyAllowed:fallbackToLegacy:ownerHandle:)();
  sub_10000A520(v60, &qword_1003F3B30);
  v69[1](v83, v63);
  sub_100044B7C(v55, type metadata accessor for FriendInfoOption);
  uint64_t v61 = type metadata accessor for Friend();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v58, 0, 1, v61);
}

uint64_t sub_100044B7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100044BDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for FriendRecord(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003EEC80);
}

uint64_t destroy for FriendInfoOption(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for HandleType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for ClientOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = a1 + a2[8];
  if (!v10(v11, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[10];
  uint64_t v13 = type metadata accessor for Handle();
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v13);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v12, v13);
  }
  return result;
}

void *sub_100044E98(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  __dst = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  uint64_t v10 = type metadata accessor for IDSStatus();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v97 = v12;
  uint64_t v95 = v10;
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100044014(&qword_1003EEBD0);
    memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)((char *)a1 + v19);
  uint64_t v22 = (void *)((char *)a2 + v19);
  uint64_t v88 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v88;
  uint64_t v23 = (void *)((char *)a1 + v20);
  uint64_t v24 = (void *)((char *)a2 + v20);
  uint64_t v90 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v90;
  uint64_t v25 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v26 = a3[13];
  uint64_t v27 = a3[14];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)((char *)a1 + v27);
  uint64_t v32 = (void *)((char *)a2 + v27);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a3[15];
  uint64_t v35 = a3[16];
  uint64_t v36 = (void *)((char *)a1 + v34);
  uint64_t v37 = (void *)((char *)a2 + v34);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  uint64_t v39 = (void *)((char *)a1 + v35);
  uint64_t v40 = (void *)((char *)a2 + v35);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = a3[17];
  uint64_t v43 = a3[18];
  uint64_t v44 = (void *)((char *)a1 + v42);
  uint64_t v45 = (void *)((char *)a2 + v42);
  uint64_t v46 = v45[1];
  *uint64_t v44 = *v45;
  v44[1] = v46;
  os_log_type_t v47 = (void *)((char *)a1 + v43);
  uint64_t v48 = (void *)((char *)a2 + v43);
  uint64_t v49 = v48[1];
  void *v47 = *v48;
  v47[1] = v49;
  uint64_t v50 = a3[19];
  __dsta = (char *)a1 + v50;
  uint64_t v87 = (char *)a2 + v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v97(v87, 1, v95))
  {
    uint64_t v51 = sub_100044014(&qword_1003EEBD0);
    memcpy(__dsta, v87, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dsta, v87, v95);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dsta, 0, 1, v95);
  }
  uint64_t v52 = a3[20];
  uint64_t v53 = a3[21];
  uint64_t v54 = (void *)((char *)a1 + v52);
  uint64_t v55 = (void *)((char *)a2 + v52);
  uint64_t v96 = v55[1];
  void *v54 = *v55;
  v54[1] = v96;
  *(void *)((char *)a1 + v53) = *(void *)((char *)a2 + v53);
  uint64_t v56 = a3[22];
  uint64_t v57 = a3[23];
  uint64_t v58 = (char *)a1 + v56;
  uint64_t v59 = (char *)a2 + v56;
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  uint64_t v60 = (void *)((char *)a1 + v57);
  uint64_t v61 = (void *)((char *)a2 + v57);
  __dstb = (void *)v61[1];
  *uint64_t v60 = *v61;
  v60[1] = __dstb;
  uint64_t v62 = a3[24];
  uint64_t v63 = a3[25];
  uint64_t v64 = (void *)((char *)a1 + v62);
  uint64_t v65 = (void *)((char *)a2 + v62);
  uint64_t v66 = v65[1];
  *uint64_t v64 = *v65;
  v64[1] = v66;
  *((unsigned char *)a1 + v63) = *((unsigned char *)a2 + v63);
  uint64_t v67 = a3[27];
  *(void *)((char *)a1 + a3[26]) = *(void *)((char *)a2 + a3[26]);
  uint64_t v68 = (void *)((char *)a1 + v67);
  uint64_t v69 = (void *)((char *)a2 + v67);
  uint64_t v70 = v69[1];
  *uint64_t v68 = *v69;
  v68[1] = v70;
  uint64_t v71 = a3[28];
  uint64_t v72 = a3[29];
  uint64_t v73 = (void *)((char *)a1 + v71);
  uint64_t v74 = (void *)((char *)a2 + v71);
  uint64_t v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  uint64_t v76 = (void *)((char *)a1 + v72);
  uint64_t v77 = (void *)((char *)a2 + v72);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  v76[1] = v78;
  uint64_t v79 = a3[31];
  *((unsigned char *)a1 + a3[30]) = *((unsigned char *)a2 + a3[30]);
  *((unsigned char *)a1 + v79) = *((unsigned char *)a2 + v79);
  uint64_t v80 = a3[33];
  *((unsigned char *)a1 + a3[32]) = *((unsigned char *)a2 + a3[32]);
  *((unsigned char *)a1 + v80) = *((unsigned char *)a2 + v80);
  uint64_t v81 = a3[35];
  *(void *)((char *)a1 + a3[34]) = *(void *)((char *)a2 + a3[34]);
  uint64_t v82 = a3[36];
  unint64_t v98 = (char *)a1 + v82;
  uint64_t v91 = (char *)a2 + v82;
  *(void *)((char *)a1 + v81) = *(void *)((char *)a2 + v81);
  uint64_t v83 = type metadata accessor for Handle();
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v89(v91, 1, v83))
  {
    uint64_t v85 = sub_100044014(&qword_1003F3B30);
    memcpy(v98, v91, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v98, v91, v83);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v98, 0, 1, v83);
  }
  return a1;
}

uint64_t sub_1000453E8(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for IDSStatus();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[19];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[36];
  uint64_t v10 = type metadata accessor for Handle();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

uint64_t sub_1000456C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100045728(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100045790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000457F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FriendInfoOption(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003EEB50);
}

uint64_t initializeWithCopy for FriendInfoOption(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for HandleType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for ClientOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v16((const void *)(a2 + v18), 1, v14))
  {
    uint64_t v21 = sub_100044014((uint64_t *)&unk_1003EE800);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v19, v20, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  uint64_t v22 = a3[9];
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v22);
  uint64_t v25 = (void *)(a2 + v22);
  uint64_t v26 = v25[1];
  void *v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)(a1 + v23);
  uint64_t v28 = (const void *)(a2 + v23);
  uint64_t v29 = type metadata accessor for Handle();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  if (v31(v28, 1, v29))
  {
    uint64_t v32 = sub_100044014(&qword_1003F3B30);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v33 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  uint64_t v34 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v34) = *(unsigned char *)(a2 + v34);
  return a1;
}

uint64_t sub_100045BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v51 = a2;
  uint64_t v5 = sub_100044014(&qword_1003EEBD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for FriendRecord(0);
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HandleType();
  os_log_type_t v47 = *(char **)(v10 - 8);
  uint64_t v48 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100044014(&qword_1003EEBC8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for FriendInfoOption(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(uint64_t *)((char *)v3 + v8[34]);
  uint64_t v50 = a1;
  uint64_t v52 = a1;
  swift_bridgeObjectRetain();
  sub_100046194((uint64_t (*)(char *))sub_1000464C0, v20, (uint64_t)v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000A520((uint64_t)v15, &qword_1003EEBC8);
    uint64_t v21 = type metadata accessor for Handle();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v51, 1, 1, v21);
  }
  else
  {
    uint64_t v23 = v7;
    sub_1000457F4((uint64_t)v15, (uint64_t)v19);
    uint64_t v24 = (uint64_t *)((char *)v3 + v8[15]);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    uint64_t v55 = v26;
    uint64_t v56 = v25;
    uint64_t v53 = 44;
    unint64_t v54 = 0xE100000000000000;
    sub_10004650C();
    uint64_t v46 = StringProtocol.components<A>(separatedBy:)();
    uint64_t v28 = (uint64_t)v47;
    uint64_t v27 = v48;
    (*((void (**)(char *, void, uint64_t))v47 + 13))(v12, enum case for HandleType.pendingOffer(_:), v48);
    char v29 = static HandleType.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v27);
    uint64_t v30 = &v19[*(int *)(v16 + 36)];
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *((void *)v30 + 1);
    uint64_t v33 = v49;
    sub_1000456C0((uint64_t)v3, v49, type metadata accessor for FriendRecord);
    if (v31) {
      uint64_t v34 = v32;
    }
    else {
      uint64_t v34 = 0;
    }
    if (v31)
    {
      uint64_t v50 = v31;
      uint64_t v35 = (uint64_t)v23;
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v35 = (uint64_t)v23;
      if ((v29 & 1) == 0)
      {
        uint64_t v36 = (uint64_t *)(v33 + v8[16]);
        uint64_t v34 = *v36;
        uint64_t v50 = v36[1];
        swift_bridgeObjectRetain();
      }
    }
    uint64_t v44 = v35;
    uint64_t v45 = v34;
    swift_bridgeObjectRetain();
    sub_100044B7C(v33, type metadata accessor for FriendRecord);
    uint64_t v37 = v3[1];
    uint64_t v49 = *v3;
    v41[0] = v37;
    uint64_t v48 = v3[2];
    v41[1] = v3[3];
    sub_100013210((uint64_t)v3 + v8[6], v35, &qword_1003EEBD0);
    uint64_t v38 = (uint64_t *)((char *)v3 + v8[10]);
    int v42 = *((unsigned __int8 *)v3 + v8[11]);
    uint64_t v43 = *v38;
    os_log_type_t v47 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v39 = v51;
    Handle.init(withID:qualifiedIdentifier:serverID:idsStatus:dsid:expiresByGroupId:trackingTimestamp:hashedDSID:favoriteOrder:reachable:pushIdentifiers:prettyName:contactIdentifier:siblingIdentifiers:)();
    sub_100044B7C((uint64_t)v47, type metadata accessor for FriendInfoOption);
    uint64_t v40 = type metadata accessor for Handle();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
  }
}

uint64_t getEnumTagSinglePayload for FriendInfoOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6804);
}

uint64_t sub_100046194@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v28 = type metadata accessor for FriendInfoOption(0);
  uint64_t v6 = *(void *)(v28 - 8);
  uint64_t v7 = __chkstk_darwin(v28);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v30 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_1000456C0(*(void *)(a2 + 48) + *(void *)(v6 + 72) * i, (uint64_t)v11, type metadata accessor for FriendInfoOption);
    sub_1000457F4((uint64_t)v11, (uint64_t)v9);
    char v23 = a1(v9);
    if (v3)
    {
      sub_100044B7C((uint64_t)v9, type metadata accessor for FriendInfoOption);
      return swift_release();
    }
    if (v23)
    {
      swift_release();
      uint64_t v24 = v29;
      sub_1000457F4((uint64_t)v9, v29);
      uint64_t v25 = 0;
      uint64_t v26 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
    uint64_t result = sub_100044B7C((uint64_t)v9, type metadata accessor for FriendInfoOption);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v30 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v31) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v31)
      {
        unint64_t v21 = *(void *)(v30 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_31;
            }
            if (v17 >= v31) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v30 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      uint64_t v26 = v28;
      uint64_t v24 = v29;
      swift_release();
      uint64_t v25 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v24, v25, 1, v26);
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for FriendInfoOption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D69D8);
}

uint64_t sub_1000464C0()
{
  return sub_1000464DC() & 1;
}

uint64_t sub_1000464DC()
{
  return static HandleType.== infix(_:_:)() & 1;
}

unint64_t sub_10004650C()
{
  unint64_t result = qword_1003ECAA0;
  if (!qword_1003ECAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECAA0);
  }
  return result;
}

unint64_t sub_100046560()
{
  unint64_t result = qword_1003F25C0;
  if (!qword_1003F25C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F25C0);
  }
  return result;
}

uint64_t sub_1000465B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FriendInfoOption(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_100017ACC(&qword_1003F2820, (void (*)(uint64_t))type metadata accessor for FriendInfoOption);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_100045728(v11, (uint64_t)v6, type metadata accessor for FriendInfoOption);
      sub_1000467A0((uint64_t)v8, (uint64_t)v6);
      sub_100044BDC((uint64_t)v8, type metadata accessor for FriendInfoOption);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_100046744(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FriendInfoOption(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000467A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FriendInfoOption(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for HandleType();
  sub_1000471EC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_100045790(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      char v16 = static HandleType.== infix(_:_:)();
      sub_100046744((uint64_t)v9);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100046744(a2);
    sub_100045790(*(void *)(*v3 + 48) + v15 * v13, v19);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100045790(a2, (uint64_t)v9);
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000469F8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    sub_1000457F4(a2, a1);
    return 1;
  }
}

uint64_t sub_1000469F8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for FriendInfoOption(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100155424();
  }
  else
  {
    if (v13 > v12)
    {
      sub_100156CE8();
      goto LABEL_12;
    }
    sub_1001573A0();
  }
  uint64_t v14 = *v4;
  Hasher.init(_seed:)();
  type metadata accessor for HandleType();
  sub_1000471EC(&qword_1003EEA68, (void (*)(uint64_t))&type metadata accessor for HandleType);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v25 = v8;
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v9 + 72);
    do
    {
      sub_100045790(*(void *)(v14 + 48) + v18 * a2, (uint64_t)v11);
      char v19 = static HandleType.== infix(_:_:)();
      sub_100046744((uint64_t)v11);
      if (v19) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v20 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1000457F4(a1, *(void *)(v20 + 48) + *(void *)(v9 + 72) * a2);
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (!v23)
  {
    *(void *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100046C40(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Friend();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1000471EC(&qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000475DC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100046F64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100046FAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100046FF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004703C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047084(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000470CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047114(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004715C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000471A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000471EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047234(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004727C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000472C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004730C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047354(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004739C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000473E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004742C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047474(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000474BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047504(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004754C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047594(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000475DC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Friend();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000479A4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100156F44((uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003F04B8);
      goto LABEL_12;
    }
    sub_100047DA0();
  }
  uint64_t v12 = *v3;
  sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000471EC(&qword_1003EEC08, (void (*)(uint64_t))&type metadata accessor for Friend);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100047898()
{
  unint64_t result = qword_1003F2B40;
  if (!qword_1003F2B40)
  {
    sub_10004AE58(&qword_1003F2B38);
    sub_100017ACC(&qword_1003EED60, (void (*)(uint64_t))type metadata accessor for FriendInfoOption);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003F2B40);
  }
  return result;
}

uint64_t sub_10004793C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F3B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000479A4()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Friend();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100044014(&qword_1003F04B8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      BOOL v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100047DA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Friend();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100044014(&qword_1003F04B8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000471EC(&qword_1003EEC00, (void (*)(uint64_t))&type metadata accessor for Friend);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for FencesReliabilityMetric.Field(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t sub_100048160()
{
  return sub_100048168(*v0);
}

unint64_t sub_100048168(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E696769726FLL;
      break;
    case 2:
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x7441657461657263;
      break;
    case 4:
      unint64_t result = 0x797269707865;
      break;
    case 5:
      unint64_t result = 0x4449726576726573;
      break;
    case 6:
      unint64_t result = 0x6E614872656E776FLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000023;
      break;
    case 8:
      unint64_t result = 0xD000000000000016;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10004828C()
{
  return sub_100048294(*v0);
}

unint64_t sub_100048294(char a1)
{
  unint64_t result = 0x6954657461657263;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73657269707865;
      break;
    case 2:
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x7250646E65697266;
      break;
    case 4:
      unint64_t result = 25705;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x656369766544656DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000016;
      break;
    case 9:
      unint64_t result = 0xD000000000000023;
      break;
    case 10:
      unint64_t result = 0x656372756F73;
      break;
    case 11:
      unint64_t result = 0x6954657461647075;
      break;
    case 12:
      unint64_t result = 0x6E65644968737570;
      break;
    case 13:
      unint64_t result = 0xD000000000000017;
      break;
    case 15:
      unint64_t result = 0x654D6D6F72467369;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerFriend.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

__n128 initializeWithTake for ServerDevice(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

unint64_t sub_10004854C()
{
  unint64_t result = 0x6143654D6F747561;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 25705;
      break;
    case 3:
      unint64_t result = 0x6369766544736469;
      break;
    case 4:
      unint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000485E8()
{
  return sub_1000485F0(*v0);
}

unint64_t sub_1000485F0(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F6C6C6F4678616DLL;
      break;
    case 2:
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x6E6569724678616DLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0x464D466B636F6C62;
      break;
    case 13:
      unint64_t result = 0xD000000000000016;
      break;
    case 14:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000022;
      break;
    case 16:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000018;
      break;
    case 18:
      unint64_t result = 0xD000000000000015;
      break;
    case 19:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 20:
      unint64_t result = 0x5465636172474C65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000487D8()
{
  return sub_1000487E0(*v0);
}

unint64_t sub_1000487E0(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 7562610;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0x6449746E65696C63;
      break;
    case 4:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000020;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 9:
      unint64_t result = 0x6449737270;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
    case 16:
      unint64_t result = 0xD000000000000014;
      break;
    case 12:
      unint64_t result = 0xD000000000000015;
      break;
    case 13:
      unint64_t result = 0xD000000000000018;
      break;
    case 14:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x6F69746172657469;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerDevice.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

__n128 initializeWithTake for ServerFriend(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 143) = *(_DWORD *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ServerFriend.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100048AE4()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
    case 2:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 3:
      uint64_t result = 0x737574617473;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100048B50()
{
  return sub_100048B58(*v0);
}

unint64_t sub_100048B58(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6449656369766564;
      break;
    case 2:
      unint64_t result = 0x6954656369766564;
      break;
    case 3:
      unint64_t result = 0x656C626967696C65;
      break;
    case 4:
      unint64_t result = 0x736C69616D65;
      break;
    case 5:
      unint64_t result = 0x6D614E7473726966;
      break;
    case 7:
      unint64_t result = 0x656369766544656DLL;
      break;
    default:
      return result;
  }
  return result;
}

__n128 initializeWithTake for ServerLocationInProgress(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ServerContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ServerLocationInProgress(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100048CF4()
{
  if (*v0) {
    return 0x737574617473;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100048D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DDC7C);
}

unint64_t sub_100048D34()
{
  return sub_100048D3C(*v0);
}

unint64_t sub_100048D3C(char a1)
{
  unint64_t result = 0x6F666E49796DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73656369766564;
      break;
    case 2:
      unint64_t result = 0x7366657270;
      break;
    case 3:
      unint64_t result = 0x7265776F6C6C6F66;
      break;
    case 4:
      unint64_t result = 0x6E69776F6C6C6F66;
      break;
    case 5:
    case 6:
      unint64_t result = 0x6F46657275747566;
      break;
    case 7:
      unint64_t result = 0x4F676E69646E6570;
      break;
    case 8:
      unint64_t result = 0x52646E616D6D6F63;
      break;
    case 9:
    case 14:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 11:
      unint64_t result = 0x6174536863746566;
      break;
    case 12:
      unint64_t result = 0x6F43726576726573;
      break;
    case 13:
      unint64_t result = 0x6769666E6F63;
      break;
    case 15:
      unint64_t result = 0xD000000000000015;
      break;
    case 16:
      unint64_t result = 0x7365636E6546796DLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerLocationInProgress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 initializeWithCopy for ServerConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerLocationInProgress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *__n128 result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 16;
        break;
    }
  }
  return result;
}

__n128 initializeWithTake for ServerContext(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *__n128 result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 20;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerBaseResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *__n128 result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 17;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServerConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t getEnumTagSinglePayload for ServerBaseResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t sub_10004945C()
{
  return sub_100049464(*v0);
}

unint64_t sub_100049464(char a1)
{
  unint64_t result = 0x656D614E707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x707041464D467369;
      break;
    case 2:
      unint64_t result = 0x4455656369766564;
      break;
    case 3:
      unint64_t result = 0x6C43656369766564;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x54746375646F7270;
      break;
    case 6:
      unint64_t result = 0x6F6973726556736FLL;
      break;
    case 7:
      unint64_t result = 0x726556646C697562;
      break;
    case 8:
      unint64_t result = 0x74536B636F6C6E75;
      break;
    case 9:
      unint64_t result = 0x54746E6572727563;
      break;
    case 10:
      unint64_t result = 0x656E6F7A656D6974;
      break;
    case 11:
      unint64_t result = 0x45676E69636E6566;
      break;
    case 12:
      unint64_t result = 0x6973726556707061;
      break;
    case 13:
      unint64_t result = 0x6D726F6674616C70;
      break;
    case 14:
      unint64_t result = 0x437972746E756F63;
      break;
    case 15:
      unint64_t result = 0x6F436E6F69676572;
      break;
    case 16:
      unint64_t result = 0x6E4964656E676973;
      break;
    case 17:
      unint64_t result = 0x6E656B6F54737061;
      break;
    case 18:
      unint64_t result = 0x644972656C6C6163;
      break;
    case 19:
    case 23:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
      unint64_t result = 0xD000000000000016;
      break;
    case 21:
      unint64_t result = 0xD000000000000012;
      break;
    case 22:
      unint64_t result = 0xD000000000000012;
      break;
    case 24:
      unint64_t result = 1701869940;
      break;
    case 25:
      unint64_t result = 0x6E6F73616572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100049768()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x61636F4C65646968;
  }
}

unsigned char *storeEnumTagSinglePayload for ServerLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LegacyLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B3C2C);
}

uint64_t storeEnumTagSinglePayload for ServerConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000498F8()
{
  return sub_100022AA0(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t storeEnumTagSinglePayload for ServerSettingsRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 424) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 432) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 432) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ServerMyInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

__n128 initializeWithTake for ServerFutureFriend(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerMyInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServerMyInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100049B40()
{
  uint64_t v29 = v0;
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037568);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v27 = v2;
    uint64_t v25 = (const void *)(v0 + 1744);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136447747;
    sub_100013B50(v0 + 3040, v0 + 448, &qword_1003ECCD0);
    if (sub_10005F070(v0 + 448) == 1)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0xE000000000000000;
    }
    else
    {
      long long v6 = *(_OWORD *)(v0 + 496);
      *(_OWORD *)(v0 + 4720) = *(_OWORD *)(v0 + 480);
      *(_OWORD *)(v0 + 4736) = v6;
      long long v7 = *(_OWORD *)(v0 + 528);
      *(_OWORD *)(v0 + 4752) = *(_OWORD *)(v0 + 512);
      *(_OWORD *)(v0 + 4768) = v7;
      long long v8 = *(_OWORD *)(v0 + 464);
      *(_OWORD *)(v0 + 4688) = *(_OWORD *)(v0 + 448);
      *(_OWORD *)(v0 + 4704) = v8;
      uint64_t v4 = sub_100033B78();
      unint64_t v5 = v9;
    }
    uint64_t v26 = (const void *)(v0 + 2608);
    *(void *)(v0 + 4864) = sub_100037004(v4, v5, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    *(_WORD *)(v3 + 12) = 2160;
    *(void *)(v0 + 4856) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2081;
    sub_100013B50(v0 + 3040, v0 + 880, &qword_1003ECCD0);
    if (sub_10005F070(v0 + 880) == 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 1280);
      uint64_t v11 = *(void *)(v0 + 1288);
      uint64_t v12 = *(void *)(v0 + 1296);
      uint64_t v13 = *(void *)(v0 + 1304);
      sub_1000372F0(v10, v11);
    }
    *(void *)(v0 + 4784) = v10;
    uint64_t v24 = v0 + 4544;
    *(void *)(v0 + 4792) = v11;
    *(void *)(v0 + 4800) = v12;
    *(void *)(v0 + 4808) = v13;
    sub_100044014(&qword_1003EE258);
    uint64_t v14 = String.init<A>(describing:)();
    *(void *)(v0 + 4816) = sub_100037004(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    *(_WORD *)(v3 + 32) = 2160;
    *(void *)(v0 + 4824) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 42) = 2081;
    sub_100013B50(v0 + 3040, (uint64_t)v25, &qword_1003ECCD0);
    if (sub_10005F070((uint64_t)v25) == 1)
    {
      uint64_t v16 = v0 + 3632;
      sub_10008DDB0((_OWORD *)(v0 + 3632));
    }
    else
    {
      uint64_t v16 = v0 + 3472;
      memcpy((void *)(v0 + 1312), v25, 0x1B0uLL);
      sub_100013B50(v0 + 1408, v0 + 3472, &qword_1003ED068);
      sub_10000CDBC((uint64_t *)(v0 + 3472));
    }
    sub_100013B50(v16, v0 + 3952, &qword_1003ED068);
    sub_100013B50(v0 + 3952, v0 + 3792, &qword_1003ED068);
    sub_100044014(&qword_1003ED068);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 4840) = sub_100037004(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    *(_WORD *)(v3 + 52) = 2160;
    *(void *)(v0 + 4848) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 62) = 2081;
    sub_100013B50(v0 + 3040, (uint64_t)v26, &qword_1003ECCD0);
    if (sub_10005F070((uint64_t)v26) == 1)
    {
      uint64_t v19 = v0 + 4256;
      sub_1000C0DC8(v0 + 4256);
    }
    else
    {
      uint64_t v19 = v0 + 4400;
      memcpy((void *)(v0 + 2176), v26, 0x1B0uLL);
      sub_100013B50(v0 + 2432, v0 + 4400, &qword_1003ECCD8);
    }
    sub_100013B50(v19, v24, &qword_1003ECCD8);
    sub_100013B50(v24, v0 + 4112, &qword_1003ECCD8);
    sub_100044014(&qword_1003ECCD8);
    uint64_t v20 = String.init<A>(describing:)();
    *(void *)(v0 + 4872) = sub_100037004(v20, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    _os_log_impl((void *)&_mh_execute_header, v1, v27, "Read LocalStorage serverSettings:\nmyInfo: %{public}s\nprefs: %{private,mask.hash}s\ncontext: %{private,mask.hash}s\nconfig: %{private,mask.hash}s", (uint8_t *)v3, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
    sub_100036F58(v0 + 3040, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037378);
  }

  sub_100013B50(v0 + 3040, v0 + 16, &qword_1003ECCD0);
  sub_100044014(&qword_1003F28E8);
  CheckedContinuation.resume(returning:)();
  int64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10004A278()
{
  type metadata accessor for LocalStorageDatabase();
  sub_100017ACC(&qword_1003F2578, (void (*)(uint64_t))type metadata accessor for LocalStorageDatabase);
  *(void *)(v0 + 952) = Database.readConnection.getter();
  return _swift_task_switch(sub_10001123C, 0, 0);
}

uint64_t sub_10004A32C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 928) + 112);
  *(void *)(v0 + 936) = v1;
  return _swift_task_switch(sub_100017A18, v1, 0);
}

uint64_t sub_10004A350()
{
  uint64_t v1 = sub_100044014(&qword_1003F3988);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t getEnumTagSinglePayload for ServerCommandResponse(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for ServerSettingsRecord(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 432)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for ServerPreferences.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10004A5B4(uint64_t a1)
{
  *(void *)(v2 + 928) = v1;
  *(void *)(v2 + 920) = a1;
  return _swift_task_switch(sub_10004A32C, 0, 0);
}

uint64_t sub_10004A5D8()
{
  type metadata accessor for LocalStorageDatabase();
  sub_100017ACC(&qword_1003F2578, (void (*)(uint64_t))type metadata accessor for LocalStorageDatabase);
  *(void *)(v0 + 208) = Database.readConnection.getter();
  return _swift_task_switch(sub_10000F800, 0, 0);
}

uint64_t sub_10004A68C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 112);
  *(void *)(v0 + 192) = v1;
  return _swift_task_switch(sub_100017924, v1, 0);
}

void *initializeWithTake for ServerSettingsRecord(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t sub_10004A6C0()
{
  if (*v0) {
    return 0x6F43746E65696C63;
  }
  else {
    return 0x6F43726576726573;
  }
}

uint64_t sub_10004A700()
{
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for ServerCommandResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

unsigned char *_s13findmylocated21LocationServerRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IDSMessageValidityMetric.Field(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10004A8C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    int v4 = sub_10022065C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_task_dealloc();
    int v4 = sub_100220640;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10004A9E8()
{
  type metadata accessor for LocalStorageDatabase();
  sub_100017ACC(&qword_1003F2578, (void (*)(uint64_t))type metadata accessor for LocalStorageDatabase);
  *(void *)(v0 + 80) = Database.readConnection.getter();
  return _swift_task_switch(sub_100004D6C, 0, 0);
}

uint64_t sub_10004AA9C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_1000177BC, v1, 0);
}

uint64_t sub_10004AAC0()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_10004AA9C, 0, 0);
}

uint64_t sub_10004AAE0()
{
  type metadata accessor for LocalStorageDatabase();
  sub_100017ACC(&qword_1003F2578, (void (*)(uint64_t))type metadata accessor for LocalStorageDatabase);
  *(void *)(v0 + 80) = Database.readConnection.getter();
  return _swift_task_switch(sub_1000076AC, 0, 0);
}

uint64_t sub_10004AB94()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_100017870, v1, 0);
}

uint64_t sub_10004ABB8()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_10004AB94, 0, 0);
}

uint64_t getEnumTagSinglePayload for ServerContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClientContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *__n128 result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 25;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ClientContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for ServerPendingOfferFriend.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10004AE58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10004AEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003F5890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004AF08(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a6[6];
  uint64_t Priority = type metadata accessor for LocatePriority();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(Priority - 8) + 32))(v12 + *(void *)(*(void *)(Priority - 8) + 72) * a1, a2, Priority);
  unint64_t v15 = (void *)(a6[7] + 24 * a1);
  *unint64_t v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

void *sub_10004AFDC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100044014(&qword_1003EE3F0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004B154(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004B0EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F0400, (uint64_t (*)(void))&type metadata accessor for LocationRequest, (uint64_t (*)(void))&type metadata accessor for LocationRequest);
}

uint64_t sub_10004B120(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10013DE08(a1, a2, a3, a4, &qword_1003F0460, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_10004B154(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10004B248()
{
  return sub_100156F44((uint64_t (*)(void))&type metadata accessor for Friend, &qword_1003F04B8);
}

void *sub_10004B268()
{
  return sub_100156F44((uint64_t (*)(void))&type metadata accessor for Device, &qword_1003F0520);
}

void sub_10004B28C(uint64_t a1)
{
  sub_10004B294(a1, *(void *)(v1 + 16));
}

void sub_10004B294(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

unint64_t sub_10004B2F8(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003F0028);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFEC0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100013210(v12, (uint64_t)v5, &qword_1003F0028);
    unint64_t result = sub_100025614((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Handle();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for Location();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004B52C(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EFED8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003EFEE0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100013210(v12, (uint64_t)v5, &qword_1003EFED8);
    unint64_t result = sub_1001221BC((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Friend();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for FriendshipAction();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004B760(void *a1)
{
  return sub_1000041EC(a1);
}

unint64_t sub_10004B778()
{
  unint64_t result = qword_1003EDDD0;
  if (!qword_1003EDDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDDD0);
  }
  return result;
}

uint64_t sub_10004B7CC()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1632;
    sub_10008DDB0((_OWORD *)(v0 + 1632));
  }
  else
  {
    uint64_t v1 = v0 + 1312;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1312, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1312), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1472, &qword_1003ED068);
  return _swift_task_switch(sub_100013020, 0, 0);
}

uint64_t sub_10004B8D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2112);
  swift_task_dealloc();
  return _swift_task_switch(sub_10004B7CC, v1, 0);
}

uint64_t sub_10004B9E0()
{
  type metadata accessor for FriendshipServiceClient();
  sub_10004CAA0(&qword_1003F1250, v0, (void (*)(uint64_t))type metadata accessor for FriendshipServiceClient);
  return XPCAcceptedClient.hash(into:)();
}

uint64_t *sub_10004BA58(uint64_t *a1)
{
  return a1;
}

uint64_t type metadata accessor for RefreshClientEndpoint()
{
  uint64_t result = qword_1003EDB50;
  if (!qword_1003EDB50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004BAD8()
{
  type metadata accessor for LocationServiceClient();
  sub_1000207A4(&qword_1003F31A0, v0, (void (*)(uint64_t))type metadata accessor for LocationServiceClient);
  return XPCAcceptedClient.hash(into:)();
}

uint64_t sub_10004BB50(uint64_t a1)
{
  unint64_t v2 = sub_1000853A4();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10004BB8C()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    unint64_t v2 = sub_1000A8BD4;
  }
  else
  {
    unint64_t v2 = sub_100027D90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004BCA8()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_10001A248();
}

uint64_t sub_10004BCE4()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100226ED0;
  }
  else {
    unint64_t v2 = sub_100009384;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004BDF8()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F2828) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10004A274;
  *(void *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 48) = v5;
  return _swift_task_switch(sub_10000F340, 0, 0);
}

uint64_t sub_10004BEE8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return _swift_task_switch(sub_100004C28, v1, 0);
}

uint64_t sub_10004BF30()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002272DC;
  }
  else {
    uint64_t v2 = sub_100009630;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004C044()
{
  uint64_t v2 = *(void *)(sub_100044014(&qword_1003F2828) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + 24;
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 456) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10004A274;
  v6[6] = v4;
  v6[7] = v5;
  v6[5] = v3;
  return _swift_task_switch(sub_10000F1E4, 0, 0);
}

uint64_t sub_10004C140(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return _swift_task_switch(sub_100009CA8, v1, 0);
}

unint64_t sub_10004C188()
{
  unint64_t result = qword_1003EFE08;
  if (!qword_1003EFE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EFE08);
  }
  return result;
}

uint64_t sub_10004C1E0(void *a1)
{
  return sub_10000A3AC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10004C200()
{
  *(void *)(*(void *)v1 + 5312) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100240B50;
  }
  else {
    uint64_t v2 = sub_100033F0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004C314()
{
  if (v0[10])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[11] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1002381AC;
    uint64_t v2 = v0[4];
    uint64_t v3 = v0[2];
    return sub_10000AB0C(v2, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for DatabaseError.notConnected(_:), v5);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10004C4A4()
{
  type metadata accessor for LocalStorageDatabase();
  sub_100017ACC(&qword_1003F2578, (void (*)(uint64_t))type metadata accessor for LocalStorageDatabase);
  *(void *)(v0 + 80) = Database.writeConnection.getter();
  return _swift_task_switch(sub_10004C314, 0, 0);
}

uint64_t sub_10004C558()
{
  sub_100215780();
  *(void *)(v0 + 72) = 0;
  uint64_t v1 = *(void *)(v0 + 64);
  return _swift_task_switch(sub_10004C4A4, v1, 0);
}

uint64_t sub_10004C620()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 64) = v1;
  return _swift_task_switch(sub_10004C558, v1, 0);
}

uint64_t sub_10004C644()
{
  if (v0[39])
  {
    if (qword_1003EC0C0 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[37];
    uint64_t v2 = v0[34];
    uint64_t v3 = v0[35];
    uint64_t v4 = sub_100044058(v2, (uint64_t)qword_10040B8A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v5 = swift_bridgeObjectRetain();
    v0[40] = sub_1000287F8(v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[41] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1002364FC;
    v6[7] = v0[10];
    return _swift_task_switch(sub_10004AA9C, 0, 0);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DatabaseError();
    sub_100017ACC(&qword_1003EF6D0, (void (*)(uint64_t))&type metadata accessor for DatabaseError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for DatabaseError.notConnected(_:), v7);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10004C920()
{
  sub_100215780();
  uint64_t v1 = *(void *)(v0 + 304);
  return _swift_task_switch(sub_100236448, v1, 0);
}

uint64_t sub_10004CAA0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004CAE8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10004CBE4(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004CAE8;
  return sub_10004CC7C(a1, v1);
}

uint64_t sub_10004CC7C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_10001172C, 0, 0);
}

uint64_t sub_10004CD10()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                       + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100006084;
  uint64_t v2 = *(void *)(v0 + 24);
  return v4(v2);
}

uint64_t sub_10004CDC8()
{
  return sub_1001E7C24(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004CE04()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100006A38;
    return dispatch thunk of FriendshipProtocol.startFriendsUpdate()(v2, v3);
  }
  else
  {
    (*(void (**)(void))(v0 + 32))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10004CF10()
{
  *(void *)(v0 + 104) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10004CE04, 0, 0);
}

uint64_t sub_10004CF80()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10004A274;
  return sub_10000B354(v2, v3, v4);
}

uint64_t sub_10004D028(int a1, int a2, void *a3)
{
  return sub_10000C020(a1, a2, a3, (uint64_t)&unk_1003E22B0, (uint64_t)sub_10004B288, (void (*)(uint64_t, uint64_t))sub_10004D05C);
}

uint64_t sub_10004D05C(uint64_t a1, uint64_t a2)
{
  return sub_10000A758(a1, a2);
}

uint64_t getEnumTagSinglePayload for ServerStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10004D11C()
{
  return sub_100010CF4(*v0);
}

uint64_t type metadata accessor for LocationEndpoint()
{
  uint64_t result = qword_1003EDCD0;
  if (!qword_1003EDCD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004D170(uint64_t a1)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = sub_10004CAE8;
  return sub_10024F4C8(a1, v1);
}

uint64_t sub_10004D208()
{
  int v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:)
                                       + async function pointer to dispatch thunk of XPCClientConnectionPool.add(connection:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100007418;
  uint64_t v2 = *(void *)(v0 + 24);
  return v4(v2);
}

uint64_t sub_10004D2C0(uint64_t a1)
{
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *int v3 = v1;
  v3[1] = sub_1000CF3B8;
  return sub_10001CEC0(a1);
}

uint64_t sub_10004D354()
{
  if (v0[15])
  {
    uint64_t v1 = v0[11];
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = *(void *)(v1 + 88);
    int v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *int v4 = v0;
    v4[1] = sub_100293354;
    uint64_t v5 = v0[14];
    return dispatch thunk of LocationProtocol.startRefreshingLocation(_:)(v5, v2, v3);
  }
  else
  {
    uint64_t v6 = (void (*)(void, unint64_t, uint64_t))v0[9];
    sub_100085350();
    uint64_t v7 = swift_allocError();
    *int v8 = 0;
    v6(0, 0xF000000000000000, v7);
    swift_errorRelease();
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10004D4A4()
{
  *(void *)(v0 + 120) = swift_unknownObjectWeakLoadStrong();
  return _swift_task_switch(sub_10004D354, 0, 0);
}

uint64_t sub_10004D514()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  int v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10004A274;
  return sub_10000A230(v2, v3, v4, v5, v6);
}

uint64_t sub_10004D5D0(int a1, int a2, void *a3, void *a4)
{
  return sub_100011658(a1, a2, a3, a4, (uint64_t)&unk_1003E41A0, (uint64_t)sub_1001F5CD4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10004D604);
}

uint64_t sub_10004D604(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000F5A4(a1, a2, a3, a4);
}

uint64_t sub_10004D630()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10000C77C, v1, 0);
}

uint64_t sub_10004D740(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(unsigned char *)(*(void *)v1 + 276) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000169F4, v2, 0);
}

uint64_t type metadata accessor for CommandManager()
{
  uint64_t result = qword_1003ECB08;
  if (!qword_1003ECB08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004D8A4()
{
  uint64_t v13 = v0;
  uint64_t v1 = v0[116];
  uint64_t v2 = OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
  v0[192] = OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands;
  uint64_t v3 = v1 + v2;
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16))
  {
    uint64_t v4 = v0[190];
    v0[105] = &_swiftEmptySetSingleton;
    return _swift_task_switch(sub_1000068DC, v4, 0);
  }
  else
  {
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B4B8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)int v8 = 136446210;
      v0[113] = sub_100037004(0xD00000000000002FLL, 0x8000000100373C10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CommandManager %{public}s no refresh request left in the coalescedCommands", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v11 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(unint64_t))v0[1];
    return v9(v11);
  }
}

uint64_t sub_10004DCFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 928);
  swift_task_dealloc();
  return _swift_task_switch(sub_100029AA8, v1, 0);
}

uint64_t sub_10004DE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[209] = a1;
  v5[210] = a2;
  v5[211] = a3;
  v5[212] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[116];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v7 = sub_10000EDCC;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = v5[116];
    os_log_type_t v7 = sub_10000E498;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_10004DF60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2016);
  swift_task_dealloc();
  return _swift_task_switch(sub_10001397C, v1, 0);
}

uint64_t sub_10004E070(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1840);
  *(unsigned char *)(*(void *)v1 + 2216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000158F0, v2, 0);
}

uint64_t type metadata accessor for AccountService(uint64_t a1)
{
  return sub_1000306A4(a1, (uint64_t *)&unk_1003F55F8);
}

uint64_t sub_10004E1A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100007AD8, v1, 0);
}

ValueMetadata *type metadata accessor for ServerContext()
{
  return &type metadata for ServerContext;
}

unint64_t sub_10004E2E4()
{
  unint64_t result = qword_1003ED3E8;
  if (!qword_1003ED3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED3E8);
  }
  return result;
}

uint64_t sub_10004E338@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100019C24(a1, a2);
}

unsigned char *storeEnumTagSinglePayload for FMFAPSMessage.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        break;
      case 2:
        *(_WORD *)unint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = 0;
        break;
      case 2:
        *(_WORD *)unint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)unint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_10004E3EC()
{
  return 0x54646E6553706174;
}

unint64_t sub_10004E408()
{
  unint64_t result = qword_1003F02E8;
  if (!qword_1003F02E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003F02E8);
  }
  return result;
}

uint64_t sub_10004E45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E4C0(void *a1)
{
  return sub_10001C630(a1);
}

uint64_t sub_10004E4D8()
{
  uint64_t v1 = (uint64_t *)(v0[31] + OBJC_IVAR____TtC13findmylocated11DataManager_apnsToken);
  uint64_t v2 = *v1;
  v0[33] = *v1;
  unint64_t v3 = v1[1];
  v0[34] = v3;
  sub_1000287E4(v2, v3);
  return _swift_task_switch(sub_1000105D0, 0, 0);
}

unint64_t sub_10004E560()
{
  unint64_t result = qword_1003EDFF8;
  if (!qword_1003EDFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDFF8);
  }
  return result;
}

uint64_t sub_10004E5B4(void *a1)
{
  return sub_100014674(a1);
}

unint64_t sub_10004E5CC()
{
  unint64_t result = qword_1003EEFE0;
  if (!qword_1003EEFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EEFE0);
  }
  return result;
}

uint64_t sub_10004E620(void *a1)
{
  return sub_1000197CC(a1);
}

uint64_t sub_10004E638(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 64) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100010224, v2, 0);
}

uint64_t sub_10004E750()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v3 = sub_1001632C0;
  }
  else {
    unint64_t v3 = sub_1000104B0;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10004E878(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  v2[6] = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_10000C3C4;
  return daemon.getter();
}

uint64_t sub_10004E90C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004E968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DataManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E9CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2936);
  swift_task_dealloc();
  return _swift_task_switch(sub_10001F734, v1, 0);
}

uint64_t sub_10004EADC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2936);
  swift_task_dealloc();
  return _swift_task_switch(sub_10001F48C, v1, 0);
}

uint64_t sub_10004EBEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2936);
  *(void *)(*(void *)v1 + 3048) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001DCA0, v2, 0);
}

uint64_t sub_10004ED04()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10004F170(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10003F4EC, v2, 0);
}

uint64_t sub_10004F288()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100162E70;
  }
  else {
    uint64_t v3 = sub_100015194;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10004F3B0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[7] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10000A57C;
  return daemon.getter();
}

uint64_t sub_10004F444()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10004F4A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004F4EC()
{
  unint64_t result = qword_1003EDEF0;
  if (!qword_1003EDEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003EDEF0);
  }
  return result;
}

unint64_t sub_10004F540()
{
  unint64_t result = qword_1003EF0A0;
  if (!qword_1003EF0A0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EF0A0);
  }
  return result;
}

uint64_t sub_10004F598(char a1)
{
  uint64_t result = 0x4B43747065636361;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x747065636361;
      goto LABEL_12;
    case 2:
      return 0x65636E6546646461;
    case 3:
      return 0x616E614D61746164;
    case 4:
      uint64_t v4 = 1701602660;
      goto LABEL_11;
    case 5:
      return 0x636E65466574756DLL;
    case 6:
      return 0xD000000000000013;
    case 7:
      return 0x54534449646E6573;
    case 8:
      return 0x766E496572616873;
    case 9:
      return 0x4672656767697274;
    case 10:
      uint64_t v4 = 1633972341;
LABEL_11:
      unint64_t v3 = v4 & 0xFFFF0000FFFFFFFFLL | 0x657400000000;
LABEL_12:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6546000000000000;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10004F724(char a1)
{
  unint64_t result = 0x65636E6546646461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x5672656767697274;
      break;
    case 2:
      unint64_t result = 0x4264657461657263;
      break;
    case 3:
      unint64_t result = 0x7265646E6966;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 9:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000020;
      break;
    case 12:
    case 15:
    case 17:
    case 24:
    case 28:
    case 37:
      unint64_t result = 0xD000000000000012;
      break;
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 14:
      unint64_t result = 0xD000000000000011;
      break;
    case 16:
      unint64_t result = 0x6567676972547369;
      break;
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 19:
      unint64_t result = 0x636E65466574756DLL;
      break;
    case 20:
      unint64_t result = 0x5072656767697274;
      break;
    case 21:
      unint64_t result = 0xD000000000000010;
      break;
    case 22:
      unint64_t result = 0xD000000000000018;
      break;
    case 23:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 25:
      unint64_t result = 0xD000000000000013;
      break;
    case 26:
      unint64_t result = 0xD000000000000015;
      break;
    case 27:
      unint64_t result = 0xD000000000000010;
      break;
    case 29:
      unint64_t result = 0xD000000000000011;
      break;
    case 30:
      unint64_t result = 0xD000000000000013;
      break;
    case 31:
      unint64_t result = 0x7573734961746164;
      break;
    case 32:
      unint64_t result = 0x444965636E6566;
      break;
    case 33:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 34:
      unint64_t result = 0xD000000000000027;
      break;
    case 35:
      unint64_t result = 0xD000000000000022;
      break;
    case 36:
      unint64_t result = 0x756F4365636E6566;
      break;
    case 38:
      unint64_t result = 0xD000000000000013;
      break;
    case 39:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004FBC8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004FBD0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10004F724(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10004F724(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10004FC5C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004F724(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10004FCC0()
{
  sub_10004F724(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004FD14()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004F724(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10004FD74@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100050714();
  *a1 = result;
  return result;
}

unint64_t sub_10004FDA4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004F724(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_10004FDD0()
{
  return *v0;
}

uint64_t sub_10004FDD8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10004FDE0(uint64_t a1)
{
  uint64_t v2 = sub_1000523B4(&qword_1003EC6A0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004FE4C(uint64_t a1)
{
  uint64_t v2 = sub_1000523B4(&qword_1003EC6A0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10004FEBC(uint64_t a1)
{
  uint64_t v2 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

Swift::Int sub_10004FF28()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10004FF70()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10004FF9C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10004FFE0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10004FFF0(uint64_t a1)
{
  uint64_t v2 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10005005C(uint64_t a1)
{
  uint64_t v2 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000500C8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100050158()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100050190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10005020C()
{
  return Hasher._finalize()();
}

void *sub_10005026C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10005027C(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100050288(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10005029C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100050320(char a1, uint64_t a2)
{
  v3._countAndFlagsBits = sub_10004F598(a1);
  *(void *)&v44[0] = 0xD000000000000030;
  *((void *)&v44[0] + 1) = 0x8000000100372F30;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)sub_100101294((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v35 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  uint64_t v37 = a2;
  char v8 = &v42;
  int64_t v36 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v9 << 6);
    }
    else
    {
      int64_t v13 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_40;
      }
      if (v13 >= v36)
      {
LABEL_37:
        swift_release();
        return 0xD000000000000030;
      }
      unint64_t v14 = *(void *)(v35 + 8 * v13);
      ++v9;
      if (!v14)
      {
        int64_t v9 = v13 + 1;
        if (v13 + 1 >= v36) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v35 + 8 * v9);
        if (!v14)
        {
          int64_t v9 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v35 + 8 * v9);
          if (!v14)
          {
            int64_t v9 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v35 + 8 * v9);
            if (!v14)
            {
              int64_t v9 = v13 + 4;
              if (v13 + 4 >= v36) {
                goto LABEL_37;
              }
              unint64_t v14 = *(void *)(v35 + 8 * v9);
              if (!v14)
              {
                int64_t v15 = v13 + 5;
                if (v15 >= v36) {
                  goto LABEL_37;
                }
                unint64_t v14 = *(void *)(v35 + 8 * v15);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v9 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_41;
                    }
                    if (v9 >= v36) {
                      goto LABEL_37;
                    }
                    unint64_t v14 = *(void *)(v35 + 8 * v9);
                    ++v15;
                    if (v14) {
                      goto LABEL_25;
                    }
                  }
                }
                int64_t v9 = v15;
              }
            }
          }
        }
      }
LABEL_25:
      unint64_t v7 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
    }
    char v16 = *(unsigned char *)(*(void *)(v37 + 48) + v12);
    sub_100050C1C(*(void *)(v37 + 56) + 40 * v12, (uint64_t)v44 + 8);
    LOBYTE(v44[0]) = v16;
    v43[0] = v44[0];
    v43[1] = v44[1];
    v43[2] = v44[2];
    char v41 = v16;
    uint64_t v17 = (uint64_t)v8;
    sub_100050C1C((uint64_t)v43 + 8, (uint64_t)v8);
    unint64_t v18 = sub_10004F724(v16);
    uint64_t v20 = v19;
    char v39 = v16;
    sub_100050C1C((uint64_t)v43 + 8, (uint64_t)v40);
    sub_100022CC0(v40, (uint64_t)v38);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = sub_10003B888(v18, v20);
    uint64_t v24 = v4[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v4[3] >= v26)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v22) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100125468();
        if (v27) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_10013E610(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = sub_10003B888(v18, v20);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_42;
      }
      unint64_t v23 = v28;
      if (v27)
      {
LABEL_4:
        uint64_t v10 = v4[7] + 40 * v23;
        sub_1000233E4(v10);
        sub_100022CC0(v38, v10);
        goto LABEL_5;
      }
    }
    v4[(v23 >> 6) + 8] |= 1 << v23;
    uint64_t v30 = (unint64_t *)(v4[6] + 16 * v23);
    *uint64_t v30 = v18;
    v30[1] = v20;
    sub_100022CC0(v38, v4[7] + 40 * v23);
    uint64_t v31 = v4[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_39;
    }
    void v4[2] = v33;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v8 = (uint64_t *)v17;
    sub_1000233E4(v17);
    sub_100050C80((uint64_t)v43);
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100050714()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x28) {
    return 40;
  }
  else {
    return v0;
  }
}

uint64_t sub_100050768(uint64_t a1)
{
  if (!a1) {
    return 1701736270;
  }
  swift_errorRetain();
  id v1 = (void *)_convertErrorToNSError(_:)();
  id v2 = [v1 domain];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v6 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_10:
    [v1 code];
    id v17 = (id)stringForCKErrorCode();
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_errorRelease();
    return v16;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  strcpy((char *)v19, "Error Domain: ");
  HIBYTE(v19[1]) = -18;
  id v9 = [v1 domain];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x203A65646F43202ELL;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  [v1 code];
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);

  swift_bridgeObjectRelease();
  swift_errorRelease();
  return v19[0];
}

uint64_t sub_100050974(uint64_t a1, char a2, uint64_t a3, char a4)
{
  BOOL v6 = (a4 & 1) == 0;
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367790;
  *(unsigned char *)(inited + 32) = 14;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 72) = &off_1003DDA88;
  *(void *)(inited + 40) = a1;
  *(unsigned char *)(inited + 80) = 13;
  *(void *)(inited + 112) = &type metadata for Bool;
  *(void *)(inited + 120) = &off_1003DDAA8;
  *(unsigned char *)(inited + 88) = a2;
  *(unsigned char *)(inited + 128) = 15;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v8 = sub_100050768(v14);
  uint64_t v10 = v9;
  swift_errorRelease();
  *(void *)(inited + 160) = &type metadata for String;
  *(void *)(inited + 168) = &off_1003DDA78;
  *(void *)(inited + 136) = v8;
  *(void *)(inited + 144) = v10;
  *(unsigned char *)(inited + 176) = 10;
  *(void *)(inited + 208) = &type metadata for Bool;
  *(void *)(inited + 216) = &off_1003DDAA8;
  *(unsigned char *)(inited + 184) = v6;
  unint64_t v11 = sub_1001013D8(inited);
  uint64_t v12 = sub_100050320(0, v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100050AD4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 27, 28, 1);
}

uint64_t sub_100050AE4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 0, 11, 2);
}

uint64_t sub_100050AF4(uint64_t a1, unint64_t a2)
{
  return sub_100050B2C(a1, a2, 0xD000000000000016, 0x8000000100372EF0);
}

uint64_t sub_100050B10(uint64_t a1, unint64_t a2)
{
  return sub_100050B2C(a1, a2, 0xD000000000000014, 0x8000000100372F10);
}

uint64_t sub_100050B2C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1003677A0;
  *(unsigned char *)(inited + 32) = 31;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 48) = a4;
  *(unsigned char *)(inited + 80) = 32;
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  uint64_t v10 = 7104878;
  if (a2) {
    uint64_t v10 = a1;
  }
  unint64_t v11 = 0xE300000000000000;
  if (a2) {
    unint64_t v11 = a2;
  }
  *(void *)(inited + 88) = v10;
  *(void *)(inited + 96) = v11;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1001013D8(v9);
  uint64_t v13 = sub_100050320(3, v12);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_100050C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100050C80(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EC588);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100050CE0()
{
  uint64_t v0 = type metadata accessor for Fence.Variant();
  uint64_t v25 = *(void *)(v0 - 8);
  uint64_t v26 = v0;
  __chkstk_darwin(v0);
  uint64_t v24 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Fence.Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  BOOL v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677B0;
  *(unsigned char *)(inited + 32) = 2;
  Fence.createdBy.getter();
  uint64_t v10 = Fence.Participant.description.getter();
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = v12;
  *(unsigned char *)(inited + 80) = 3;
  Fence.finder.getter();
  uint64_t v14 = Fence.Participant.description.getter();
  uint64_t v16 = v15;
  v13(v6, v2);
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 96) = v16;
  *(unsigned char *)(inited + 128) = 1;
  id v17 = v24;
  Fence.variant.getter();
  uint64_t v18 = Fence.Variant.descriptionForAnalytics.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v26);
  *(void *)(inited + 160) = &type metadata for String;
  *(void *)(inited + 168) = &off_1003DDA78;
  *(void *)(inited + 136) = v18;
  *(void *)(inited + 144) = v20;
  *(unsigned char *)(inited + 176) = 6;
  *(void *)(inited + 208) = &type metadata for String;
  *(void *)(inited + 216) = &off_1003DDA78;
  *(void *)(inited + 184) = 0xD000000000000014;
  *(void *)(inited + 192) = 0x8000000100372F70;
  *(unsigned char *)(inited + 224) = 17;
  *(void *)(inited + 256) = &type metadata for Bool;
  *(void *)(inited + 264) = &off_1003DDAA8;
  *(unsigned char *)(inited + 232) = 0;
  unint64_t v21 = sub_1001013D8(inited);
  uint64_t v22 = sub_100050320(4, v21);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_100050FE4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 6, 17, 4);
}

uint64_t sub_100050FF4(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3 & 1;
  BOOL v20 = (a3 & 1) == 0;
  uint64_t v5 = type metadata accessor for Fence.Variant();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  *(unsigned char *)(inited + 32) = 19;
  uint64_t v21 = a2;
  char v22 = v4;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v10 = sub_100050768(v23);
  uint64_t v12 = v11;
  swift_errorRelease();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = v12;
  *(unsigned char *)(inited + 80) = 1;
  Fence.variant.getter();
  uint64_t v13 = Fence.Variant.descriptionForAnalytics.getter();
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 96) = v15;
  *(unsigned char *)(inited + 128) = 18;
  *(void *)(inited + 160) = &type metadata for Bool;
  *(void *)(inited + 168) = &off_1003DDAA8;
  *(unsigned char *)(inited + 136) = v20;
  unint64_t v16 = sub_1001013D8(inited);
  uint64_t v17 = sub_100050320(5, v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1000511F8(uint64_t a1)
{
  return sub_100051640(a1, 4, 5, 6);
}

uint64_t sub_100051208(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v3 = (a3 & 1) == 0;
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  *(unsigned char *)(inited + 32) = 20;
  uint64_t v5 = Fence.TriggerPosition.description.getter();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 48) = v6;
  *(unsigned char *)(inited + 80) = 4;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v7 = sub_100050768(v13);
  uint64_t v9 = v8;
  swift_errorRelease();
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v7;
  *(void *)(inited + 96) = v9;
  *(unsigned char *)(inited + 128) = 5;
  *(void *)(inited + 160) = &type metadata for Bool;
  *(void *)(inited + 168) = &off_1003DDAA8;
  *(unsigned char *)(inited + 136) = v3;
  unint64_t v10 = sub_1001013D8(inited);
  uint64_t v11 = sub_100050320(6, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100051340(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10005175C(a1, a2, a3, a4, 24, 25, 26, 7);
}

uint64_t sub_100051354(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 22, 23, 8);
}

uint64_t sub_100051364(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 8, 9, 9);
}

uint64_t sub_100051374()
{
  uint64_t v26 = type metadata accessor for Fence.Participant();
  uint64_t v0 = *(void *)(v26 - 8);
  uint64_t v1 = __chkstk_darwin(v26);
  BOOL v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v26 - v4;
  uint64_t v6 = type metadata accessor for Fence.Variant();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100367790;
  *(unsigned char *)(inited + 32) = 1;
  Fence.variant.getter();
  uint64_t v11 = Fence.Variant.descriptionForAnalytics.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 48) = v13;
  *(unsigned char *)(inited + 80) = 2;
  Fence.createdBy.getter();
  uint64_t v14 = Fence.Participant.description.getter();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v0 + 8);
  uint64_t v18 = v5;
  uint64_t v19 = v26;
  v17(v18, v26);
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 96) = v16;
  *(unsigned char *)(inited + 128) = 3;
  Fence.finder.getter();
  uint64_t v20 = Fence.Participant.description.getter();
  uint64_t v22 = v21;
  v17(v3, v19);
  *(void *)(inited + 160) = &type metadata for String;
  *(void *)(inited + 168) = &off_1003DDA78;
  *(void *)(inited + 136) = v20;
  *(void *)(inited + 144) = v22;
  *(unsigned char *)(inited + 176) = 16;
  *(void *)(inited + 208) = &type metadata for Bool;
  *(void *)(inited + 216) = &off_1003DDAA8;
  *(unsigned char *)(inited + 184) = 1;
  unint64_t v23 = sub_1001013D8(inited);
  uint64_t v24 = sub_100050320(9, v23);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_100051630(uint64_t a1)
{
  return sub_100051640(a1, 29, 30, 9);
}

uint64_t sub_100051640(uint64_t a1, char a2, char a3, char a4)
{
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677C0;
  *(unsigned char *)(inited + 32) = 20;
  uint64_t v8 = Fence.TriggerPosition.description.getter();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = v9;
  *(unsigned char *)(inited + 80) = a2;
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  strcpy((char *)(inited + 88), "NoFenceFound");
  *(unsigned char *)(inited + 101) = 0;
  *(_WORD *)(inited + 102) = -5120;
  *(unsigned char *)(inited + 128) = a3;
  *(void *)(inited + 160) = &type metadata for Bool;
  *(void *)(inited + 168) = &off_1003DDAA8;
  *(unsigned char *)(inited + 136) = 0;
  unint64_t v10 = sub_1001013D8(inited);
  uint64_t v11 = sub_100050320(a4, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100051748(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10005175C(a1, a2, a3, a4, 20, 29, 30, 9);
}

uint64_t sub_10005175C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6, int a7, int a8)
{
  int v57 = a7;
  int v58 = a8;
  uint64_t v54 = a3;
  uint64_t v51 = a2;
  int v52 = a5;
  int v53 = a4 & 1;
  int v55 = a6;
  BOOL v56 = v53 == 0;
  uint64_t v8 = type metadata accessor for Fence.AcceptanceStatus();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Fence.Variant();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  __chkstk_darwin(v10);
  uint64_t v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Fence.Participant();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v44 - v17;
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677D0;
  *(unsigned char *)(inited + 32) = 2;
  Fence.createdBy.getter();
  uint64_t v20 = Fence.Participant.description.getter();
  uint64_t v22 = v21;
  unint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v18, v12);
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = v22;
  *(unsigned char *)(inited + 80) = 3;
  Fence.finder.getter();
  uint64_t v24 = Fence.Participant.description.getter();
  uint64_t v26 = v25;
  v23(v16, v12);
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v24;
  *(void *)(inited + 96) = v26;
  *(unsigned char *)(inited + 128) = 1;
  char v27 = v45;
  Fence.variant.getter();
  uint64_t v28 = Fence.Variant.descriptionForAnalytics.getter();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v47);
  *(void *)(inited + 160) = &type metadata for String;
  *(void *)(inited + 168) = &off_1003DDA78;
  *(void *)(inited + 136) = v28;
  *(void *)(inited + 144) = v30;
  *(unsigned char *)(inited + 176) = 21;
  uint64_t v31 = v48;
  Fence.acceptanceStatus.getter();
  BOOL v32 = v31;
  uint64_t v33 = Fence.AcceptanceStatus.description.getter();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  *(void *)(inited + 208) = &type metadata for String;
  *(void *)(inited + 216) = &off_1003DDA78;
  *(void *)(inited + 184) = v33;
  *(void *)(inited + 192) = v35;
  *(unsigned char *)(inited + 224) = v52;
  uint64_t v36 = Fence.TriggerPosition.description.getter();
  *(void *)(inited + 256) = &type metadata for String;
  *(void *)(inited + 264) = &off_1003DDA78;
  *(void *)(inited + 232) = v36;
  *(void *)(inited + 240) = v37;
  *(unsigned char *)(inited + 272) = v55;
  uint64_t v59 = v54;
  char v60 = v53;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v38 = sub_100050768(v61);
  uint64_t v40 = v39;
  swift_errorRelease();
  *(void *)(inited + 304) = &type metadata for String;
  *(void *)(inited + 312) = &off_1003DDA78;
  *(void *)(inited + 280) = v38;
  *(void *)(inited + 288) = v40;
  *(unsigned char *)(inited + 320) = v57;
  *(void *)(inited + 352) = &type metadata for Bool;
  *(void *)(inited + 360) = &off_1003DDAA8;
  *(unsigned char *)(inited + 328) = v56;
  unint64_t v41 = sub_1001013D8(inited);
  uint64_t v42 = sub_100050320(v58, v41);
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_100051B68(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100051B78(a1, a2, a3, 7, 12, 10);
}

uint64_t sub_100051B78(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6)
{
  int v41 = a5;
  int v42 = a6;
  uint64_t v38 = a2;
  int v37 = a3 & 1;
  int v39 = a4;
  BOOL v40 = v37 == 0;
  uint64_t v6 = type metadata accessor for Fence.Variant();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Fence.Participant();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  sub_100044014(&qword_1003EC580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003677B0;
  *(unsigned char *)(inited + 32) = 2;
  Fence.createdBy.getter();
  uint64_t v16 = Fence.Participant.description.getter();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &off_1003DDA78;
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = v18;
  *(unsigned char *)(inited + 80) = 3;
  Fence.finder.getter();
  uint64_t v20 = Fence.Participant.description.getter();
  uint64_t v22 = v21;
  v19(v12, v8);
  *(void *)(inited + 112) = &type metadata for String;
  *(void *)(inited + 120) = &off_1003DDA78;
  *(void *)(inited + 88) = v20;
  *(void *)(inited + 96) = v22;
  *(unsigned char *)(inited + 128) = 1;
  unint64_t v23 = v34;
  Fence.variant.getter();
  uint64_t v24 = Fence.Variant.descriptionForAnalytics.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
  *(void *)(inited + 160) = &type metadata for String;
  *(void *)(inited + 168) = &off_1003DDA78;
  *(void *)(inited + 136) = v24;
  *(void *)(inited + 144) = v26;
  *(unsigned char *)(inited + 176) = v39;
  uint64_t v43 = v38;
  char v44 = v37;
  sub_100044014(&qword_1003EC590);
  Result.error.getter();
  uint64_t v27 = sub_100050768(v45);
  uint64_t v29 = v28;
  swift_errorRelease();
  *(void *)(inited + 208) = &type metadata for String;
  *(void *)(inited + 216) = &off_1003DDA78;
  *(void *)(inited + 184) = v27;
  *(void *)(inited + 192) = v29;
  *(unsigned char *)(inited + 224) = v41;
  *(void *)(inited + 256) = &type metadata for Bool;
  *(void *)(inited + 264) = &off_1003DDAA8;
  *(unsigned char *)(inited + 232) = v40;
  unint64_t v30 = sub_1001013D8(inited);
  uint64_t v31 = sub_100050320(v42, v30);
  swift_bridgeObjectRelease();
  return v31;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t destroy for FencesReliabilityMetric()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s13findmylocated23FencesReliabilityMetricVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FencesReliabilityMetric(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FencesReliabilityMetric(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FencesReliabilityMetric(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FencesReliabilityMetric(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FencesReliabilityMetric(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FencesReliabilityMetric()
{
  return &type metadata for FencesReliabilityMetric;
}

uint64_t getEnumTagSinglePayload for FencesReliabilityMetric.Field(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD9) {
    goto LABEL_17;
  }
  if (a2 + 39 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 39) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 39;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 39;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 39;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x28;
  int v8 = v6 - 40;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FencesReliabilityMetric.Field(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 39 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 39) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD8)
  {
    unsigned int v6 = ((a2 - 217) >> 8) + 1;
    *__n128 result = a2 + 39;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100052224);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 39;
        break;
    }
  }
  return result;
}

uint64_t sub_10005224C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100052258(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FencesReliabilityMetric.Field()
{
  return &type metadata for FencesReliabilityMetric.Field;
}

void type metadata accessor for NIFindingRole(uint64_t a1)
{
}

void sub_100052284(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_1000522D0()
{
  unint64_t result = qword_1003EC678;
  if (!qword_1003EC678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EC678);
  }
  return result;
}

uint64_t sub_100052324()
{
  return sub_1000523B4(&qword_1003EC680, type metadata accessor for CKError);
}

uint64_t sub_10005236C()
{
  return sub_1000523B4(&qword_1003EC688, type metadata accessor for CKError);
}

uint64_t sub_1000523B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000523FC()
{
  return sub_1000523B4(&qword_1003EC690, type metadata accessor for Code);
}

uint64_t sub_100052444()
{
  return sub_1000523B4(&qword_1003EC698, type metadata accessor for CKError);
}

uint64_t sub_10005248C()
{
  return sub_1000523B4(&qword_1003EC6A0, type metadata accessor for CKError);
}

uint64_t sub_1000524D4()
{
  return sub_1000523B4(&qword_1003EC6A8, type metadata accessor for CKError);
}

uint64_t sub_10005251C()
{
  return sub_1000523B4(&qword_1003EC6B0, type metadata accessor for CKError);
}

uint64_t sub_100052564()
{
  return sub_1000523B4(&qword_1003EC6B8, type metadata accessor for Code);
}

uint64_t sub_1000525AC()
{
  return sub_1000523B4(&qword_1003EC6C0, type metadata accessor for Code);
}

unint64_t sub_1000525F8()
{
  unint64_t result = qword_1003EC6C8;
  if (!qword_1003EC6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EC6C8);
  }
  return result;
}

uint64_t sub_100052654(char *a1, char *a2)
{
  return sub_100102644(*a1, *a2);
}

Swift::Int sub_100052660()
{
  return Hasher._finalize()();
}

uint64_t sub_1000526F8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005277C()
{
  return Hasher._finalize()();
}

uint64_t sub_100052810@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCC20, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100052870(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7265646E65537369;
  if (*v1) {
    uint64_t v2 = 0x546567617373656DLL;
  }
  unint64_t v3 = 0xED000064696C6156;
  if (*v1) {
    unint64_t v3 = 0xEB00000000657079;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000528C4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100101294((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  uint64_t v34 = a1;
  unsigned int v6 = &v39;
  int64_t v33 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
    }
    else
    {
      int64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_46;
      }
      if (v11 >= v33)
      {
LABEL_43:
        swift_release();
        return 0xD000000000000030;
      }
      unint64_t v12 = *(void *)(v32 + 8 * v11);
      ++v7;
      if (!v12)
      {
        int64_t v7 = v11 + 1;
        if (v11 + 1 >= v33) {
          goto LABEL_43;
        }
        unint64_t v12 = *(void *)(v32 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 2;
          if (v11 + 2 >= v33) {
            goto LABEL_43;
          }
          unint64_t v12 = *(void *)(v32 + 8 * v7);
          if (!v12)
          {
            int64_t v7 = v11 + 3;
            if (v11 + 3 >= v33) {
              goto LABEL_43;
            }
            unint64_t v12 = *(void *)(v32 + 8 * v7);
            if (!v12)
            {
              int64_t v7 = v11 + 4;
              if (v11 + 4 >= v33) {
                goto LABEL_43;
              }
              unint64_t v12 = *(void *)(v32 + 8 * v7);
              if (!v12)
              {
                int64_t v13 = v11 + 5;
                if (v13 >= v33) {
                  goto LABEL_43;
                }
                unint64_t v12 = *(void *)(v32 + 8 * v13);
                if (!v12)
                {
                  while (1)
                  {
                    int64_t v7 = v13 + 1;
                    if (__OFADD__(v13, 1)) {
                      goto LABEL_47;
                    }
                    if (v7 >= v33) {
                      goto LABEL_43;
                    }
                    unint64_t v12 = *(void *)(v32 + 8 * v7);
                    ++v13;
                    if (v12) {
                      goto LABEL_25;
                    }
                  }
                }
                int64_t v7 = v13;
              }
            }
          }
        }
      }
LABEL_25:
      unint64_t v5 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    char v14 = *(unsigned char *)(*(void *)(v34 + 48) + v10);
    sub_100050C1C(*(void *)(v34 + 56) + 40 * v10, (uint64_t)v41 + 8);
    LOBYTE(v41[0]) = v14;
    v40[0] = v41[0];
    v40[1] = v41[1];
    long long v40[2] = v41[2];
    char v38 = v14;
    uint64_t v15 = (uint64_t)v6;
    sub_100050C1C((uint64_t)v40 + 8, (uint64_t)v6);
    uint64_t v16 = v14 ? 0x546567617373656DLL : 0x7265646E65537369;
    uint64_t v17 = v14 ? 0xEB00000000657079 : 0xED000064696C6156;
    char v36 = v14;
    sub_100050C1C((uint64_t)v40 + 8, (uint64_t)v37);
    sub_100022CC0(v37, (uint64_t)v35);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = sub_10003B888(v16, v17);
    uint64_t v21 = v2[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22)) {
      break;
    }
    char v24 = v19;
    if (v2[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v19) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100125468();
        if (v24) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_10013E610(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_10003B888(v16, v17);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_48;
      }
      unint64_t v20 = v25;
      if (v24)
      {
LABEL_4:
        uint64_t v8 = v2[7] + 40 * v20;
        sub_1000233E4(v8);
        sub_100022CC0(v35, v8);
        goto LABEL_5;
      }
    }
    v2[(v20 >> 6) + 8] |= 1 << v20;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * v20);
    *uint64_t v27 = v16;
    v27[1] = v17;
    sub_100022CC0(v35, v2[7] + 40 * v20);
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_45;
    }
    v2[2] = v30;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v6 = (uint64_t *)v15;
    sub_1000233E4(v15);
    sub_100052CC4((uint64_t)v40);
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100052CC4(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003EC7F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for IDSMessageValidityMetric()
{
  return &type metadata for IDSMessageValidityMetric;
}

unsigned char *storeEnumTagSinglePayload for IDSMessageValidityMetric.Field(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100052E00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100052E28(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSMessageValidityMetric.Field()
{
  return &type metadata for IDSMessageValidityMetric.Field;
}

unint64_t sub_100052E48()
{
  unint64_t result = qword_1003EC7F8;
  if (!qword_1003EC7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EC7F8);
  }
  return result;
}

uint64_t sub_100052E9C(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100042524(a1, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  uint64_t v4 = sub_100053010(v3);
  swift_bridgeObjectRelease();
  return v4;
}

NSString sub_100052F10()
{
  return String._bridgeToObjectiveC()();
}

NSNumber sub_100052F18()
{
  return Int._bridgeToObjectiveC()();
}

NSNumber sub_100052F20()
{
  return Double._bridgeToObjectiveC()();
}

NSNumber sub_100052F28()
{
  return Bool._bridgeToObjectiveC()();
}

uint64_t sub_100052F30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B450);
  sub_100044058(v0, (uint64_t)qword_10040B450);
  return Logger.init(subsystem:category:)();
}

uint64_t *sub_100052FAC(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100053010(uint64_t a1)
{
  sub_100044014(&qword_1003EC800);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v30 = (void *)result;
  uint64_t v31 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v27 = v5;
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v29 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v35 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    sub_100050C1C(*(void *)(v31 + 56) + 40 * i, (uint64_t)v32);
    uint64_t v19 = v33;
    uint64_t v20 = v34;
    sub_100042524(v32, v33);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    swift_bridgeObjectRetain();
    uint64_t v22 = v21(v19, v20);
    sub_1000233E4((uint64_t)v32);
    uint64_t result = (uint64_t)v30;
    *(void *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v30[6] + 16 * i);
    *uint64_t v23 = v17;
    v23[1] = v18;
    *(void *)(v30[7] + 8 * i) = v22;
    uint64_t v24 = v30[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v30[2] = v26;
    int64_t v3 = v35;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v28) {
      return result;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v12);
    int64_t v14 = v3 + 1;
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v28) {
        return result;
      }
      unint64_t v13 = *(void *)(v27 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v3 + 3;
        if (v3 + 3 >= v28) {
          return result;
        }
        unint64_t v13 = *(void *)(v27 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v35 = v14;
  }
  uint64_t v15 = v3 + 4;
  if (v3 + 4 >= v28) {
    return result;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v28) {
      return result;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Analytics()
{
  return &type metadata for Analytics;
}

uint64_t sub_100053268()
{
  return 1;
}

Swift::Int sub_100053270()
{
  return Hasher._finalize()();
}

void sub_1000532B4()
{
}

Swift::Int sub_1000532DC()
{
  return Hasher._finalize()();
}

uint64_t sub_100053328(uint64_t a1, uint64_t a2)
{
  v3[122] = v2;
  v3[121] = a2;
  v3[120] = a1;
  return _swift_task_switch(sub_100053350, v2, 0);
}

uint64_t sub_100053350()
{
  int64_t v14 = v0;
  if (qword_1003EBF60 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[122];
  uint64_t v2 = qword_10040B480;
  uint64_t v4 = *(void *)(v1 + 120);
  unint64_t v3 = *(void *)(v1 + 128);
  swift_bridgeObjectRetain();
  LOBYTE(v2) = sub_100022CD8(v4, v3, v2);
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (qword_1003EBF58 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B468);
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      swift_bridgeObjectRetain();
      v0[119] = sub_100037004(v4, v3, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    int64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    int64_t v12 = (uint64_t (*)(void))(v0[120] + *(int *)v0[120]);
    unint64_t v9 = (void *)swift_task_alloc();
    v0[123] = v9;
    *unint64_t v9 = v0;
    v9[1] = sub_100053658;
    return v12();
  }
}

uint64_t sub_100053658(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 976);
  *(void *)(*(void *)v1 + 992) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100053770, v2, 0);
}

uint64_t sub_100053770()
{
  uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
  unint64_t v120 = (_OWORD *)(v0 + 80);
  int64_t v115 = (long long *)(v0 + 144);
  uint64_t v2 = (_OWORD *)(v0 + 192);
  uint64_t v110 = (long long *)(v0 + 240);
  uint64_t v116 = (long long *)(v0 + 288);
  unint64_t v121 = (_OWORD *)(v0 + 336);
  uint64_t v96 = (long long *)(v0 + 432);
  uint64_t v118 = (long long *)(v0 + 480);
  unint64_t v112 = (_OWORD *)(v0 + 528);
  uint64_t v117 = (_OWORD *)(v0 + 576);
  int64_t v113 = (long long *)(v0 + 624);
  int64_t v107 = (long long *)(v0 + 672);
  uint64_t v103 = (void *)(v0 + 768);
  uint64_t v95 = (void *)(v0 + 808);
  uint64_t v97 = (uint64_t *)(v0 + 920);
  long long v93 = (uint64_t *)(v0 + 936);
  uint64_t v3 = *(void *)(v0 + 992);
  uint64_t v114 = v3;
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v102 = v3 + 64;
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v0 + 976) + 112;
  swift_beginAccess();
  int64_t v119 = 0;
  int64_t v109 = (unint64_t)(63 - v4) >> 6;
  uint64_t v94 = v7;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      uint64_t v10 = (v6 - 1) & v6;
      unint64_t v11 = v9 | (v119 << 6);
LABEL_10:
      int64_t v12 = (void *)(*(void *)(v114 + 48) + 16 * v11);
      uint64_t v13 = v12[1];
      *(void *)(v0 + 80) = *v12;
      *(void *)(v0 + 88) = v13;
      sub_100058CC4(*(void *)(v114 + 56) + 48 * v11, v0 + 96);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    int64_t v14 = v119 + 1;
    if (__OFADD__(v119, 1)) {
      goto LABEL_119;
    }
    if (v14 < v109)
    {
      unint64_t v15 = *(void *)(v102 + 8 * v14);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v119 + 2;
      ++v119;
      if (v14 + 1 < v109)
      {
        unint64_t v15 = *(void *)(v102 + 8 * v16);
        if (v15) {
          goto LABEL_17;
        }
        int64_t v119 = v14 + 1;
        if (v14 + 2 < v109)
        {
          unint64_t v15 = *(void *)(v102 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2;
LABEL_14:
            uint64_t v10 = (v15 - 1) & v15;
            unint64_t v11 = __clz(__rbit64(v15)) + (v14 << 6);
            int64_t v119 = v14;
            goto LABEL_10;
          }
          int64_t v16 = v14 + 3;
          int64_t v119 = v14 + 2;
          if (v14 + 3 < v109)
          {
            unint64_t v15 = *(void *)(v102 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v14 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  break;
                }
                if (v14 >= v109)
                {
                  int64_t v119 = v109 - 1;
                  goto LABEL_28;
                }
                unint64_t v15 = *(void *)(v102 + 8 * v14);
                ++v16;
                if (v15) {
                  goto LABEL_14;
                }
              }
LABEL_125:
              __break(1u);
LABEL_126:
              ((void (*)(uint64_t, uint64_t))v6)(v4, isUniquelyReferenced_nonNull_native);
              uint64_t result = swift_task_dealloc();
LABEL_127:
              __break(1u);
              return result;
            }
LABEL_17:
            int64_t v14 = v16;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = 0;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *unint64_t v120 = 0u;
LABEL_29:
    sub_100013B50((uint64_t)v120, isUniquelyReferenced_nonNull_native, &qword_1003ECA40);
    uint64_t v17 = *(void *)(v0 + 24);
    if (!v17)
    {
      swift_release();
      uint64_t v89 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_115;
    }
    unint64_t v122 = v10;
    uint64_t v18 = *(void *)isUniquelyReferenced_nonNull_native;
    sub_100058CFC((long long *)(v0 + 32), v2);
    uint64_t v19 = *(void *)v7;
    if (!*(void *)(*(void *)v7 + 16))
    {
      unint64_t v6 = v0 + 288;
      *(void *)(v0 + 320) = 0;
      *uint64_t v116 = 0u;
      *(_OWORD *)(v0 + 304) = 0u;
      *(unsigned char *)(v0 + 328) = -1;
LABEL_44:
      sub_10000A520(v6, &qword_1003ECA48);
      sub_100058CC4((uint64_t)v2, (uint64_t)v115);
      if (*(unsigned char *)(v0 + 185))
      {
        if (*(unsigned char *)(v0 + 185) == 1)
        {
          uint64_t v36 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_100058D14();
          *(void *)(v0 + 336) = v36;
          char v37 = 2;
        }
        else
        {
          uint64_t v38 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_100058E64();
          *(void *)(v0 + 336) = v38;
          char v37 = 3;
        }
        *(unsigned char *)(v0 + 376) = v37;
      }
      else
      {
        sub_100058DA0(v115, v121);
      }
      swift_beginAccess();
      sub_100058D68((uint64_t)v121, (uint64_t)v118);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v4 = *(void *)v7;
      uint64_t v123 = *(void *)v7;
      *(void *)uint64_t v7 = 0x8000000000000000;
      unint64_t v40 = sub_10003B888(v18, v17);
      uint64_t v41 = *(void *)(v4 + 16);
      BOOL v42 = (v39 & 1) == 0;
      uint64_t v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      char v44 = v39;
      if (*(void *)(v4 + 24) >= v43)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v39 & 1) == 0) {
            goto LABEL_57;
          }
        }
        else
        {
          sub_10012563C();
          uint64_t v4 = v123;
          uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
          if ((v44 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        sub_10013E904(v43, isUniquelyReferenced_nonNull_native);
        uint64_t v4 = v123;
        unint64_t v45 = sub_10003B888(v18, v17);
        if ((v44 & 1) != (v46 & 1)) {
          goto LABEL_111;
        }
        unint64_t v40 = v45;
        uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v44 & 1) == 0)
        {
LABEL_57:
          *(void *)(v4 + 8 * (v40 >> 6) + 64) |= 1 << v40;
          uint64_t v47 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v40);
          uint64_t *v47 = v18;
          v47[1] = v17;
          sub_100058DA0(v118, (_OWORD *)(*(void *)(v4 + 56) + 48 * v40));
          uint64_t v48 = *(void *)(v4 + 16);
          BOOL v49 = __OFADD__(v48, 1);
          uint64_t v50 = v48 + 1;
          if (v49) {
            goto LABEL_121;
          }
          *(void *)(v4 + 16) = v50;
          swift_bridgeObjectRetain();
          goto LABEL_6;
        }
      }
      sub_100058E2C((uint64_t)v118, *(void *)(v4 + 56) + 48 * v40);
LABEL_6:
      *(void *)uint64_t v7 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v8 = v0 + 336;
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_10003B888(v18, v17);
    unint64_t v6 = v0 + 288;
    if (v21)
    {
      sub_100058D68(*(void *)(v19 + 56) + 48 * v20, (uint64_t)v116);
    }
    else
    {
      *(void *)(v0 + 320) = 0;
      *uint64_t v116 = 0u;
      *(_OWORD *)(v0 + 304) = 0u;
      *(unsigned char *)(v0 + 328) = -1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned __int8 *)(v0 + 328) == 255) {
      goto LABEL_44;
    }
    sub_100058DA0(v116, v117);
    sub_100058CC4((uint64_t)v2, (uint64_t)v110);
    uint64_t v22 = v0 + 672;
    if (!*(unsigned char *)(v0 + 281))
    {
      uint64_t v51 = v0 + 528;
      sub_100058DA0(v110, v112);
      goto LABEL_96;
    }
    if (*(unsigned char *)(v0 + 281) == 1)
    {
      uint64_t v23 = *(void *)(v0 + 240);
      sub_100058D68((uint64_t)v117, (uint64_t)v107);
      if (*(unsigned char *)(v0 + 712) != 2) {
        break;
      }
      uint64_t v98 = v23;
      sub_100022CC0(v107, (uint64_t)v103);
      uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 792);
      uint64_t v24 = sub_100042524(v103, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
      uint64_t v26 = swift_task_alloc();
      uint64_t v111 = v25;
      uint64_t v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      v27(v26, (unint64_t)v24, isUniquelyReferenced_nonNull_native);
      char v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v29 = swift_task_alloc();
      unint64_t v108 = v26;
      uint64_t v104 = v27;
      v27(v29, v26, isUniquelyReferenced_nonNull_native);
      unint64_t v101 = v29;
      if (v28)
      {
        uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v31(v29, isUniquelyReferenced_nonNull_native);
        if (v30 > 64)
        {
          uint64_t v32 = swift_task_alloc();
          v104(v32, v108, isUniquelyReferenced_nonNull_native);
          *long long v93 = 0x8000000000000000;
          uint64_t v7 = v94;
          if (dispatch thunk of static BinaryInteger.isSigned.getter())
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
            {
              uint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
              uint64_t v34 = v32;
              uint64_t v35 = isUniquelyReferenced_nonNull_native;
LABEL_73:
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v31)(v34, v35);
              if (v33 < *v93) {
                goto LABEL_127;
              }
              goto LABEL_79;
            }
            uint64_t v92 = v32;
            uint64_t v62 = v31;
            uint64_t v63 = swift_task_alloc();
            sub_100058D14();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v61 = dispatch thunk of static Comparable.< infix(_:_:)();
            v62(v63, isUniquelyReferenced_nonNull_native);
            v62(v92, isUniquelyReferenced_nonNull_native);
            uint64_t v31 = v62;
LABEL_68:
            uint64_t result = swift_task_dealloc();
            if (v61) {
              goto LABEL_127;
            }
            goto LABEL_79;
          }
          char v99 = v31;
          char v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v91 = v32;
          uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v58)
          {
            if (v59 <= 64)
            {
              swift_getAssociatedTypeWitness();
              swift_task_alloc();
              swift_getAssociatedConformanceWitness();
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              uint64_t v65 = swift_task_alloc();
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
              unint64_t v6 = (unint64_t)v99;
              v99(v65, isUniquelyReferenced_nonNull_native);
              swift_task_dealloc();
              swift_task_dealloc();
              uint64_t v4 = swift_task_alloc();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v4, v91, isUniquelyReferenced_nonNull_native);
              if (v90) {
                goto LABEL_126;
              }
              uint64_t v66 = *v93;
              uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
              v99(v4, isUniquelyReferenced_nonNull_native);
              uint64_t result = swift_task_dealloc();
              BOOL v68 = v67 < v66;
              uint64_t v31 = v99;
              if (v68) {
                goto LABEL_127;
              }
              goto LABEL_79;
            }
            uint64_t v60 = swift_task_alloc();
            sub_100058D14();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v61 = dispatch thunk of static Comparable.< infix(_:_:)();
            v99(v60, isUniquelyReferenced_nonNull_native);
            v99(v32, isUniquelyReferenced_nonNull_native);
            uint64_t v31 = v99;
            goto LABEL_68;
          }
          if (v59 < 64)
          {
            uint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
            uint64_t v34 = v32;
            uint64_t v35 = isUniquelyReferenced_nonNull_native;
            uint64_t v31 = v99;
            goto LABEL_73;
          }
          uint64_t v31 = v99;
          v99(v32, isUniquelyReferenced_nonNull_native);
LABEL_79:
          swift_task_dealloc();
LABEL_80:
          uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v70 = swift_task_alloc();
          v104(v70, v108, isUniquelyReferenced_nonNull_native);
          if (v69 >= 65)
          {
            v31(v70, isUniquelyReferenced_nonNull_native);
            goto LABEL_84;
          }
          uint64_t v71 = dispatch thunk of BinaryInteger.bitWidth.getter();
          v31(v70, isUniquelyReferenced_nonNull_native);
          if (v71 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
            goto LABEL_93;
          }
LABEL_84:
          unint64_t v100 = v31;
          uint64_t v72 = swift_task_alloc();
          v104(v72, v108, isUniquelyReferenced_nonNull_native);
          *uint64_t v97 = 0x7FFFFFFFFFFFFFFFLL;
          char v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v73)
          {
            if (v74 > 64)
            {
              uint64_t v75 = swift_task_alloc();
              sub_100058D14();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              char v106 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v4 = v111 + 8;
              v100(v75, isUniquelyReferenced_nonNull_native);
              v100(v72, isUniquelyReferenced_nonNull_native);
LABEL_91:
              swift_task_dealloc();
              unint64_t v6 = v101;
              if (v106) {
                goto LABEL_124;
              }
LABEL_92:
              swift_task_dealloc();
              uint64_t v31 = v100;
LABEL_93:
              swift_task_dealloc();
              swift_task_dealloc();
              unint64_t v6 = v108;
              uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
              v31(v108, isUniquelyReferenced_nonNull_native);
              swift_task_dealloc();
              BOOL v49 = __OFADD__(v77, v98);
              uint64_t v4 = v77 + v98;
              if (v49) {
                goto LABEL_123;
              }
              *(void *)(v0 + 744) = &type metadata for Int64;
              *(void *)(v0 + 752) = sub_100058D14();
              *(void *)(v0 + 720) = v4;
              *(unsigned char *)(v0 + 760) = 2;
              uint64_t v51 = v0 + 528;
              sub_100058DA0((long long *)(v0 + 720), v112);
              uint64_t v57 = v0 + 768;
              goto LABEL_95;
            }
          }
          else if (v74 > 63)
          {
            *(void *)(v0 + 928) = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v105 = swift_task_alloc();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v105, v72, isUniquelyReferenced_nonNull_native);
            uint64_t v76 = swift_task_alloc();
            sub_100058D14();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v106 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v4 = v111 + 8;
            v100(v76, isUniquelyReferenced_nonNull_native);
            v100(v105, isUniquelyReferenced_nonNull_native);
            swift_task_dealloc();
            goto LABEL_91;
          }
          uint64_t v4 = dispatch thunk of BinaryInteger._lowWord.getter();
          v100(v72, isUniquelyReferenced_nonNull_native);
          unint64_t v6 = v101;
          if (*v97 < v4) {
            goto LABEL_124;
          }
          goto LABEL_92;
        }
      }
      else
      {
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v31(v29, isUniquelyReferenced_nonNull_native);
      }
      uint64_t v7 = v94;
      goto LABEL_80;
    }
    double v52 = *(double *)(v0 + 240);
    uint64_t v22 = v0 + 432;
    sub_100058D68((uint64_t)v117, (uint64_t)v96);
    if (*(unsigned char *)(v0 + 472) != 3) {
      break;
    }
    sub_100022CC0(v96, (uint64_t)v95);
    uint64_t v53 = *(void *)(v0 + 832);
    sub_100042524(v95, v53);
    uint64_t v54 = *(void *)(v53 - 8);
    swift_task_alloc();
    (*(void (**)(void))(v54 + 16))();
    unint64_t v55 = sub_100058E64();
    unint64_t v6 = (unint64_t)&type metadata for Double;
    BinaryFloatingPoint.init<A>(_:)();
    swift_task_dealloc();
    double v56 = v52 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 416) = v55;
    *(double *)(v0 + 384) = v56;
    *(unsigned char *)(v0 + 424) = 3;
    uint64_t v51 = v0 + 528;
    sub_100058DA0((long long *)(v0 + 384), v112);
    uint64_t v57 = v0 + 808;
LABEL_95:
    sub_1000233E4(v57);
LABEL_96:
    swift_beginAccess();
    sub_100058D68(v51, (uint64_t)v113);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v4 = *(void *)v7;
    uint64_t v124 = *(void *)v7;
    *(void *)uint64_t v7 = 0x8000000000000000;
    unint64_t v79 = sub_10003B888(v18, v17);
    uint64_t v80 = *(void *)(v4 + 16);
    BOOL v81 = (v78 & 1) == 0;
    uint64_t v82 = v80 + v81;
    if (__OFADD__(v80, v81)) {
      goto LABEL_120;
    }
    char v83 = v78;
    if (*(void *)(v4 + 24) >= v82)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v78 & 1) == 0) {
          goto LABEL_100;
        }
      }
      else
      {
        sub_10012563C();
        uint64_t v4 = v124;
        uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
        if ((v83 & 1) == 0) {
          goto LABEL_100;
        }
      }
    }
    else
    {
      sub_10013E904(v82, isUniquelyReferenced_nonNull_native);
      uint64_t v4 = v124;
      unint64_t v84 = sub_10003B888(v18, v17);
      if ((v83 & 1) != (v85 & 1))
      {
LABEL_111:
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v79 = v84;
      uint64_t isUniquelyReferenced_nonNull_native = v0 + 16;
      if ((v83 & 1) == 0)
      {
LABEL_100:
        *(void *)(v4 + 8 * (v79 >> 6) + 64) |= 1 << v79;
        uint64_t v86 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v79);
        *uint64_t v86 = v18;
        v86[1] = v17;
        sub_100058DA0(v113, (_OWORD *)(*(void *)(v4 + 56) + 48 * v79));
        uint64_t v87 = *(void *)(v4 + 16);
        BOOL v49 = __OFADD__(v87, 1);
        uint64_t v88 = v87 + 1;
        if (v49) {
          goto LABEL_122;
        }
        *(void *)(v4 + 16) = v88;
        swift_bridgeObjectRetain();
        goto LABEL_105;
      }
    }
    sub_100058E2C((uint64_t)v113, *(void *)(v4 + 56) + 48 * v79);
LABEL_105:
    *(void *)uint64_t v7 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_100058DB8((uint64_t)v112);
    uint64_t v8 = v0 + 576;
LABEL_7:
    sub_100058DB8(v8);
    uint64_t v2 = (_OWORD *)(v0 + 192);
    sub_100058DFC(v0 + 192);
    unint64_t v6 = v122;
  }
  swift_bridgeObjectRelease();
  sub_100058DB8(v22);
  sub_100058EB8();
  swift_allocError();
  swift_willThrow();
  sub_100058DB8((uint64_t)v117);
  sub_100058DFC((uint64_t)v2);
  swift_release();
  uint64_t v89 = *(uint64_t (**)(void))(v0 + 8);
LABEL_115:
  return v89();
}

uint64_t sub_10005499C(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return _swift_task_switch(sub_1000549BC, v1, 0);
}

uint64_t sub_1000549BC()
{
  unint64_t v15 = v0;
  v0[2] = v0[13];
  swift_errorRetain();
  sub_100044014(&qword_1003F4B30);
  uint64_t v1 = String.init<A>(describing:)();
  uint64_t v3 = v2;
  int64_t v12 = &type metadata for String;
  unint64_t v4 = sub_10004650C();
  unint64_t v13 = v4;
  uint64_t v10 = v1;
  uint64_t v11 = v3;
  char v14 = 1;
  swift_beginAccess();
  sub_10012BBDC((uint64_t)&v10, 0xD000000000000010, 0x80000001003731A0);
  swift_endAccess();
  swift_getErrorValue();
  uint64_t v5 = Error.code.getter();
  int64_t v12 = &type metadata for Int;
  unint64_t v13 = sub_10005A654();
  uint64_t v10 = v5;
  char v14 = 2;
  swift_beginAccess();
  sub_10012BBDC((uint64_t)&v10, 0x646F43726F727265, 0xE900000000000065);
  swift_endAccess();
  swift_getErrorValue();
  uint64_t v6 = Error.domain.getter();
  int64_t v12 = &type metadata for String;
  unint64_t v13 = v4;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  char v14 = 1;
  swift_beginAccess();
  sub_10012BBDC((uint64_t)&v10, 0x6D6F44726F727265, 0xEB000000006E6961);
  swift_endAccess();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100054BDC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_identifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime, &qword_1003ECA90);
  sub_10000A520(v0 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime, &qword_1003ECA90);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100054C98()
{
  return type metadata accessor for AnalyticsEvent();
}

uint64_t type metadata accessor for AnalyticsEvent()
{
  uint64_t result = qword_1003EC848;
  if (!qword_1003EC848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100054CEC()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100054DDC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100054DDC()
{
  if (!qword_1003EC868)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003EC868);
    }
  }
}

uint64_t sub_100054E34()
{
  return v0;
}

unint64_t sub_100054E40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100044014(&qword_1003ECA90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v47 = (uint64_t)&v44 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  char v46 = (char *)&v44 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  char v14 = (char *)&v44 - v13;
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v48 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v44 - v19;
  sub_100044014(&qword_1003ECA98);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100367D70;
  id v22 = [objc_allocWithZone((Class)NSDate) init];
  [v22 timeIntervalSince1970];
  uint64_t v24 = v23;

  *(void *)(v21 + 56) = &type metadata for Double;
  *(void *)(v21 + 64) = &protocol witness table for Double;
  *(void *)(v21 + 32) = v24;
  uint64_t v25 = String.init(format:_:)();
  uint64_t v27 = v26;
  uint64_t v53 = &type metadata for String;
  unint64_t v54 = sub_10004650C();
  *(void *)&long long v52 = v25;
  *((void *)&v52 + 1) = v27;
  __int16 v55 = 1;
  sub_100058CFC(&v52, v51);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = _swiftEmptyDictionarySingleton;
  sub_100142690(v51, 0x6D695468636F7065, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  uint64_t v29 = v50;
  swift_bridgeObjectRelease();
  sub_10005A584(v1 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_startTime, (uint64_t)v14);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v30(v14, 1, v15) == 1)
  {
    sub_10000A520((uint64_t)v14, &qword_1003ECA90);
    return (unint64_t)v29;
  }
  uint64_t v31 = *(void (**)(void))(v16 + 32);
  unint64_t v45 = v20;
  char v44 = v31;
  v31();
  uint64_t v32 = v1 + OBJC_IVAR____TtC13findmylocated14AnalyticsEvent_endTime;
  swift_beginAccess();
  sub_10005A584(v32, (uint64_t)v12);
  unsigned int v33 = v30(v12, 1, v15);
  sub_10000A520((uint64_t)v12, &qword_1003ECA90);
  if (v33 == 1)
  {
    uint64_t v34 = v46;
    static DispatchTime.now()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v34, 0, 1, v15);
    uint64_t v35 = (uint64_t)v34;
    uint64_t v36 = v47;
    sub_100013B50(v35, v47, &qword_1003ECA90);
    swift_beginAccess();
    sub_10005A5EC(v36, v32);
    swift_endAccess();
  }
  sub_10005A584(v32, (uint64_t)v5);
  if (v30(v5, 1, v15) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v45, v15);
    sub_10000A520((uint64_t)v5, &qword_1003ECA90);
    return (unint64_t)v29;
  }
  char v37 = v48;
  ((void (*)(char *, char *, uint64_t))v44)(v48, v5, v15);
  unint64_t v38 = DispatchTime.uptimeNanoseconds.getter();
  char v39 = v45;
  unint64_t result = DispatchTime.uptimeNanoseconds.getter();
  if (v38 >= result)
  {
    double v41 = (double)(v38 - result) / 1000000000.0;
    uint64_t v53 = &type metadata for Double;
    unint64_t v54 = sub_100058E64();
    *(double *)&long long v52 = v41;
    __int16 v55 = 3;
    sub_100058CFC(&v52, v51);
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    BOOL v49 = v29;
    sub_100142690(v51, 0x6E6F697461727564, 0xE800000000000000, v42);
    uint64_t v29 = v49;
    swift_bridgeObjectRelease();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v16 + 8);
    v43(v37, v15);
    v43(v39, v15);
    return (unint64_t)v29;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000553A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B468);
  sub_100044058(v0, (uint64_t)qword_10040B468);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100055424()
{
  uint64_t result = Set.init(minimumCapacity:)();
  qword_10040B480 = result;
  return result;
}

uint64_t sub_100055458()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_1003EC808);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_1003EC808);
  if (qword_1003EBF58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B468);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100055520(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return _swift_task_switch(sub_100055540, v1, 0);
}

uint64_t sub_100055540()
{
  uint64_t v16 = v0;
  if (static SystemInfo.underTest.getter())
  {
    if (qword_1003EBF68 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100044058(v1, (uint64_t)qword_1003EC808);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v2, v3)) {
      goto LABEL_18;
    }
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SPAnalytics not submitting analytics during unit tests.", v4, 2u);
    goto LABEL_13;
  }
  if (qword_1003EBF60 != -1) {
    swift_once();
  }
  uint64_t v5 = v0[8];
  uint64_t v6 = qword_10040B480;
  uint64_t v7 = *(void *)(v5 + 120);
  v0[10] = v7;
  unint64_t v8 = *(void *)(v5 + 128);
  v0[11] = v8;
  swift_bridgeObjectRetain();
  LOBYTE(v6) = sub_100022CD8(v7, v8, v6);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (qword_1003EBF68 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100044058(v9, (uint64_t)qword_1003EC808);
    swift_retain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v2, v10))
    {
      swift_release();
      goto LABEL_18;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain();
    v0[7] = sub_100037004(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v10, "AnalyticsPublisher not submitting disallowed analytics event %{public}s to CA.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_13:
    swift_slowDealloc();
LABEL_18:

    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  uint64_t v12 = v0[8];
  return _swift_task_switch(sub_100055898, v12, 0);
}

uint64_t sub_100055898()
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003ECA68 + dword_1003ECA68);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005594C;
  uint64_t v2 = *(void *)(v0 + 64);
  return v4(v2, v2);
}

uint64_t sub_10005594C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_10005AE14;
  }
  else
  {
    uint64_t v4 = sub_100055A8C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100055A8C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  swift_beginAccess();
  v0[13] = *(void *)(v1 + 112);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100055B14, v2, 0);
}

uint64_t sub_100055B14()
{
  uint64_t v15 = v0;
  sub_100058F0C(v0[13]);
  swift_bridgeObjectRelease();
  if (qword_1003EBF68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_1003EC808);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = v0[10];
    unint64_t v4 = v0[11];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    swift_bridgeObjectRetain();
    v0[5] = sub_100037004(v5, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    sub_10005A548(0, &qword_1003ECA70);
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[6] = sub_100037004(v7, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Analytics: %{public}s, %s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  NSString v10 = String._bridgeToObjectiveC()();
  sub_10005A548(0, &qword_1003ECA70);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent();

  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100055E28()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AnalyticsPublisher()
{
  return self;
}

uint64_t destroy for AnalyticsEvent.DiscreteType(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)a1 + 4;
  }
  if (v1) {
    return sub_1000233E4(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 4) {
    unsigned int v3 = *(_DWORD *)a2 + 4;
  }
  switch(v3)
  {
    case 1u:
      long long v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v4 = 1;
      break;
    case 2u:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
      char v4 = 2;
      break;
    case 3u:
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      char v4 = 3;
      break;
    default:
      char v4 = 0;
      *(unsigned char *)a1 = *(unsigned char *)a2;
      break;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4) {
      sub_1000233E4(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 1u:
        uint64_t v7 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
        char v6 = 1;
        break;
      case 2u:
        uint64_t v8 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v8;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        char v6 = 2;
        break;
      case 3u:
        uint64_t v9 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
        char v6 = 3;
        break;
      default:
        char v6 = 0;
        *(unsigned char *)a1 = *(unsigned char *)a2;
        break;
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4) {
      sub_1000233E4(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 1u:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v6 = 1;
        break;
      case 2u:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v6 = 2;
        break;
      case 3u:
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v6 = 3;
        break;
      default:
        char v6 = 0;
        *(unsigned char *)a1 = *(unsigned char *)a2;
        break;
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.DiscreteType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.DiscreteType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000562E4(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t sub_100056300(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.DiscreteType()
{
  return &type metadata for AnalyticsEvent.DiscreteType;
}

uint64_t sub_100056338(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 968) = a2;
  *(void *)(v2 + 960) = a1;
  return _swift_task_switch(sub_100056360, a1, 0);
}

uint64_t sub_100056360()
{
  uint64_t v13 = v0;
  if (qword_1003EBF60 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[120];
  uint64_t v2 = qword_10040B480;
  uint64_t v4 = *(void *)(v1 + 120);
  unint64_t v3 = *(void *)(v1 + 128);
  swift_bridgeObjectRetain();
  LOBYTE(v2) = sub_100022CD8(v4, v3, v2);
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (qword_1003EBF58 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100044058(v5, (uint64_t)qword_10040B468);
    swift_retain();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      long long v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)long long v8 = 136446210;
      swift_bridgeObjectRetain();
      v0[119] = sub_100037004(v4, v3, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    NSString v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v9 = v0[121];
    return _swift_task_switch(sub_100056600, v9, 0);
  }
}

uint64_t sub_100056600()
{
  uint64_t v1 = *(void *)(v0 + 960);
  *(void *)(v0 + 976) = sub_100054E40();
  return _swift_task_switch(sub_100056670, v1, 0);
}

uint64_t sub_100056670()
{
  uint64_t v1 = (uint64_t *)(v0 + 16);
  uint64_t v124 = (_OWORD *)(v0 + 80);
  unint64_t v120 = (long long *)(v0 + 144);
  uint64_t v2 = (void (*)(uint64_t, uint64_t))(v0 + 192);
  int64_t v115 = (long long *)(v0 + 240);
  uint64_t v3 = v0 + 288;
  uint64_t v125 = (_OWORD *)(v0 + 336);
  unint64_t v101 = (long long *)(v0 + 432);
  unint64_t v122 = (long long *)(v0 + 480);
  uint64_t v117 = (_OWORD *)(v0 + 528);
  unint64_t v121 = (_OWORD *)(v0 + 576);
  uint64_t v118 = (long long *)(v0 + 624);
  unint64_t v100 = (long long *)(v0 + 672);
  int64_t v107 = (void *)(v0 + 768);
  char v99 = (void *)(v0 + 808);
  uint64_t v102 = (uint64_t *)(v0 + 920);
  uint64_t v97 = (uint64_t *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 976);
  uint64_t v119 = v4;
  uint64_t v5 = -1 << *(unsigned char *)(v4 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v106 = v4 + 64;
  unint64_t v7 = v6 & *(void *)(v4 + 64);
  uint64_t v8 = *(void *)(v0 + 960) + 112;
  swift_beginAccess();
  int64_t v123 = 0;
  int64_t v114 = (unint64_t)(63 - v5) >> 6;
  uint64_t isUniquelyReferenced_nonNull_native = 48;
  uint64_t v98 = v8;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = v11 | (v123 << 6);
LABEL_10:
      unint64_t v126 = v12;
      uint64_t v14 = (void *)(*(void *)(v119 + 48) + 16 * v13);
      uint64_t v15 = v14[1];
      *(void *)(v0 + 80) = *v14;
      *(void *)(v0 + 88) = v15;
      sub_100058CC4(*(void *)(v119 + 56) + 48 * v13, v0 + 96);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    int64_t v16 = v123 + 1;
    if (__OFADD__(v123, 1)) {
      goto LABEL_118;
    }
    if (v16 < v114)
    {
      unint64_t v17 = *(void *)(v106 + 8 * v16);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v123 + 2;
      ++v123;
      if (v16 + 1 < v114)
      {
        unint64_t v17 = *(void *)(v106 + 8 * v18);
        if (v17) {
          goto LABEL_17;
        }
        int64_t v123 = v16 + 1;
        if (v16 + 2 < v114)
        {
          unint64_t v17 = *(void *)(v106 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
LABEL_14:
            uint64_t v12 = (v17 - 1) & v17;
            unint64_t v13 = __clz(__rbit64(v17)) + (v16 << 6);
            int64_t v123 = v16;
            goto LABEL_10;
          }
          int64_t v18 = v16 + 3;
          int64_t v123 = v16 + 2;
          if (v16 + 3 < v114)
          {
            unint64_t v17 = *(void *)(v106 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v16 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  break;
                }
                if (v16 >= v114)
                {
                  int64_t v123 = v114 - 1;
                  goto LABEL_28;
                }
                unint64_t v17 = *(void *)(v106 + 8 * v16);
                ++v18;
                if (v17) {
                  goto LABEL_14;
                }
              }
LABEL_124:
              __break(1u);
LABEL_125:
              v2(v5, isUniquelyReferenced_nonNull_native);
              uint64_t result = swift_task_dealloc();
LABEL_126:
              __break(1u);
              return result;
            }
LABEL_17:
            int64_t v16 = v18;
            goto LABEL_14;
          }
        }
      }
    }
LABEL_28:
    unint64_t v126 = 0;
    *(_OWORD *)(v0 + 122) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *uint64_t v124 = 0u;
LABEL_29:
    sub_100013B50((uint64_t)v124, (uint64_t)v1, &qword_1003ECA40);
    uint64_t v19 = *(void *)(v0 + 24);
    if (!v19)
    {
      swift_release();
      long long v93 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_114;
    }
    uint64_t v20 = *v1;
    sub_100058CFC((long long *)(v0 + 32), v2);
    uint64_t v21 = *(void *)v8;
    if (!*(void *)(*(void *)v8 + 16))
    {
      *(void *)(v3 + 32) = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(unsigned char *)(v0 + 328) = -1;
LABEL_44:
      sub_10000A520(v3, &qword_1003ECA48);
      sub_100058CC4((uint64_t)v2, (uint64_t)v120);
      if (*(unsigned char *)(v0 + 185))
      {
        if (*(unsigned char *)(v0 + 185) == 1)
        {
          uint64_t v35 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Int64;
          *(void *)(v0 + 368) = sub_100058D14();
          *(void *)(v0 + 336) = v35;
          char v36 = 2;
        }
        else
        {
          uint64_t v37 = *(void *)(v0 + 144);
          *(void *)(v0 + 360) = &type metadata for Double;
          *(void *)(v0 + 368) = sub_100058E64();
          *(void *)(v0 + 336) = v37;
          char v36 = 3;
        }
        *(unsigned char *)(v0 + 376) = v36;
      }
      else
      {
        sub_100058DA0(v120, v125);
      }
      swift_beginAccess();
      sub_100058D68((uint64_t)v125, (uint64_t)v122);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5 = *(void *)v8;
      uint64_t v127 = *(void *)v8;
      *(void *)uint64_t v8 = 0x8000000000000000;
      uint64_t v38 = v20;
      unint64_t v40 = sub_10003B888(v20, v19);
      uint64_t v41 = *(void *)(v5 + 16);
      BOOL v42 = (v39 & 1) == 0;
      uint64_t v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
      char v44 = v39;
      if (*(void *)(v5 + 24) >= v43)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t isUniquelyReferenced_nonNull_native = 48;
          if ((v39 & 1) == 0) {
            goto LABEL_57;
          }
        }
        else
        {
          sub_10012563C();
          uint64_t v5 = v127;
          uint64_t isUniquelyReferenced_nonNull_native = 48;
          if ((v44 & 1) == 0) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        sub_10013E904(v43, isUniquelyReferenced_nonNull_native);
        uint64_t v5 = v127;
        unint64_t v45 = sub_10003B888(v38, v19);
        if ((v44 & 1) != (v46 & 1)) {
          goto LABEL_110;
        }
        unint64_t v40 = v45;
        uint64_t isUniquelyReferenced_nonNull_native = 48;
        if ((v44 & 1) == 0)
        {
LABEL_57:
          *(void *)(v5 + 8 * (v40 >> 6) + 64) |= 1 << v40;
          uint64_t v47 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
          uint64_t *v47 = v38;
          v47[1] = v19;
          sub_100058DA0(v122, (_OWORD *)(*(void *)(v5 + 56) + 48 * v40));
          uint64_t v48 = *(void *)(v5 + 16);
          BOOL v49 = __OFADD__(v48, 1);
          uint64_t v50 = v48 + 1;
          if (v49) {
            goto LABEL_120;
          }
          *(void *)(v5 + 16) = v50;
          swift_bridgeObjectRetain();
          goto LABEL_6;
        }
      }
      sub_100058E2C((uint64_t)v122, *(void *)(v5 + 56) + 48 * v40);
LABEL_6:
      *(void *)uint64_t v8 = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v10 = v0 + 336;
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_10003B888(v20, v19);
    if (v23)
    {
      sub_100058D68(*(void *)(v21 + 56) + 48 * v22, v3);
    }
    else
    {
      *(void *)(v3 + 32) = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(unsigned char *)(v0 + 328) = -1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(unsigned __int8 *)(v0 + 328) == 255) {
      goto LABEL_44;
    }
    sub_100058DA0((long long *)v3, v121);
    sub_100058CC4((uint64_t)v2, (uint64_t)v115);
    if (!*(unsigned char *)(v0 + 281))
    {
      uint64_t v51 = v0 + 528;
      sub_100058DA0(v115, v117);
      goto LABEL_95;
    }
    if (*(unsigned char *)(v0 + 281) != 1) {
      break;
    }
    uint64_t v24 = *(void *)(v0 + 240);
    uint64_t v25 = v0 + 672;
    sub_100058D68((uint64_t)v121, (uint64_t)v100);
    if (*(unsigned char *)(v0 + 712) != 2) {
      goto LABEL_113;
    }
    uint64_t v104 = v24;
    sub_100022CC0(v100, (uint64_t)v107);
    uint64_t v26 = *(void *)(v0 + 792);
    uint64_t v27 = (void (*)(uint64_t, uint64_t))sub_100042524(v107, v26);
    uint64_t v28 = *(void *)(v26 - 8);
    uint64_t v29 = swift_task_alloc();
    uint64_t v116 = v28;
    uint64_t v30 = *(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(v28 + 16);
    v30(v29, v27, v26);
    LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t isUniquelyReferenced_nonNull_native = v26;
    uint64_t v31 = swift_task_alloc();
    int64_t v113 = (void (*)(uint64_t, uint64_t))v29;
    unint64_t v108 = v30;
    v30(v31, (void (*)(uint64_t, uint64_t))v29, isUniquelyReferenced_nonNull_native);
    uint64_t v105 = (void (*)(uint64_t, uint64_t))v31;
    if ((v27 & 1) == 0)
    {
      unsigned int v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v33(v31, isUniquelyReferenced_nonNull_native);
LABEL_63:
      uint64_t v8 = v98;
      goto LABEL_79;
    }
    uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unsigned int v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v33(v31, isUniquelyReferenced_nonNull_native);
    if (v32 <= 64) {
      goto LABEL_63;
    }
    uint64_t v34 = swift_task_alloc();
    v108(v34, v113, isUniquelyReferenced_nonNull_native);
    *uint64_t v97 = 0x8000000000000000;
    uint64_t v8 = v98;
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
        goto LABEL_71;
      }
      uint64_t v96 = v34;
      uint64_t v62 = v33;
      uint64_t v63 = v20;
      uint64_t v64 = swift_task_alloc();
      sub_100058D14();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
      v62(v64, isUniquelyReferenced_nonNull_native);
      v62(v96, isUniquelyReferenced_nonNull_native);
      uint64_t v20 = v63;
      unsigned int v33 = v62;
      uint64_t result = swift_task_dealloc();
      if (v65) {
        goto LABEL_126;
      }
    }
    else
    {
      uint64_t v111 = v20;
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v57)
      {
        uint64_t v95 = v34;
        if (v58 <= 64)
        {
          swift_getAssociatedTypeWitness();
          swift_task_alloc();
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v67 = swift_task_alloc();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v94 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v2 = v33;
          v33(v67, isUniquelyReferenced_nonNull_native);
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v5 = swift_task_alloc();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v5, v95, isUniquelyReferenced_nonNull_native);
          if (v94) {
            goto LABEL_125;
          }
          uint64_t v68 = *v97;
          uint64_t v69 = dispatch thunk of BinaryInteger._lowWord.getter();
          v33(v5, isUniquelyReferenced_nonNull_native);
          uint64_t result = swift_task_dealloc();
          BOOL v70 = v69 < v68;
          uint64_t v20 = v111;
          if (v70) {
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v59 = swift_task_alloc();
          sub_100058D14();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v60 = dispatch thunk of static Comparable.< infix(_:_:)();
          v33(v59, isUniquelyReferenced_nonNull_native);
          v33(v34, isUniquelyReferenced_nonNull_native);
          uint64_t result = swift_task_dealloc();
          uint64_t v20 = v111;
          if (v60) {
            goto LABEL_126;
          }
        }
        goto LABEL_78;
      }
      uint64_t v20 = v111;
      if (v58 < 64)
      {
LABEL_71:
        uint64_t v66 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v33)(v34, isUniquelyReferenced_nonNull_native);
        if (v66 < *v97) {
          goto LABEL_126;
        }
        goto LABEL_78;
      }
      v33(v34, isUniquelyReferenced_nonNull_native);
    }
LABEL_78:
    swift_task_dealloc();
LABEL_79:
    uint64_t v71 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v72 = swift_task_alloc();
    v108(v72, v113, isUniquelyReferenced_nonNull_native);
    if (v71 < 65)
    {
      uint64_t v73 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v33(v72, isUniquelyReferenced_nonNull_native);
      if (v73 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_93;
      }
    }
    else
    {
      v33(v72, isUniquelyReferenced_nonNull_native);
    }
    uint64_t v103 = v33;
    uint64_t v112 = v20;
    uint64_t v74 = swift_task_alloc();
    v108(v74, v113, isUniquelyReferenced_nonNull_native);
    *uint64_t v102 = 0x7FFFFFFFFFFFFFFFLL;
    char v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v75 & 1) == 0)
    {
      if (v76 >= 64)
      {
        *(void *)(v0 + 928) = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v109 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v109, v74, isUniquelyReferenced_nonNull_native);
        uint64_t v79 = swift_task_alloc();
        sub_100058D14();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v110 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v5 = v116 + 8;
        v103(v79, isUniquelyReferenced_nonNull_native);
        v103(v109, isUniquelyReferenced_nonNull_native);
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v2 = v105;
        if (v110) {
          goto LABEL_123;
        }
        goto LABEL_92;
      }
LABEL_89:
      uint64_t v5 = dispatch thunk of BinaryInteger._lowWord.getter();
      v33(v74, isUniquelyReferenced_nonNull_native);
      uint64_t v2 = v105;
      if (*v102 < v5) {
        goto LABEL_123;
      }
      goto LABEL_92;
    }
    if (v76 <= 64) {
      goto LABEL_89;
    }
    uint64_t v77 = swift_task_alloc();
    sub_100058D14();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v78 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v5 = v116 + 8;
    v103(v77, isUniquelyReferenced_nonNull_native);
    v103(v74, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc();
    uint64_t v2 = v105;
    if (v78) {
      goto LABEL_123;
    }
LABEL_92:
    swift_task_dealloc();
    uint64_t v20 = v112;
    unsigned int v33 = v103;
LABEL_93:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = v113;
    uint64_t v80 = dispatch thunk of BinaryInteger._lowWord.getter();
    v33((uint64_t)v113, isUniquelyReferenced_nonNull_native);
    swift_task_dealloc();
    BOOL v49 = __OFADD__(v80, v104);
    uint64_t v5 = v80 + v104;
    if (v49) {
      goto LABEL_122;
    }
    *(void *)(v0 + 744) = &type metadata for Int64;
    *(void *)(v0 + 752) = sub_100058D14();
    *(void *)(v0 + 720) = v5;
    *(unsigned char *)(v0 + 760) = 2;
    uint64_t v51 = v0 + 528;
    sub_100058DA0((long long *)(v0 + 720), v117);
    sub_1000233E4((uint64_t)v107);
    uint64_t v2 = (void (*)(uint64_t, uint64_t))(v0 + 192);
LABEL_95:
    swift_beginAccess();
    sub_100058D68(v51, (uint64_t)v118);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v5 = *(void *)v8;
    uint64_t v128 = *(void *)v8;
    *(void *)uint64_t v8 = 0x8000000000000000;
    uint64_t v81 = v20;
    unint64_t v83 = sub_10003B888(v20, v19);
    uint64_t v84 = *(void *)(v5 + 16);
    BOOL v85 = (v82 & 1) == 0;
    uint64_t v86 = v84 + v85;
    if (__OFADD__(v84, v85)) {
      goto LABEL_119;
    }
    char v87 = v82;
    if (*(void *)(v5 + 24) >= v86)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t isUniquelyReferenced_nonNull_native = 48;
        if ((v82 & 1) == 0) {
          goto LABEL_99;
        }
      }
      else
      {
        sub_10012563C();
        uint64_t v5 = v128;
        uint64_t isUniquelyReferenced_nonNull_native = 48;
        if ((v87 & 1) == 0) {
          goto LABEL_99;
        }
      }
    }
    else
    {
      sub_10013E904(v86, isUniquelyReferenced_nonNull_native);
      uint64_t v5 = v128;
      unint64_t v88 = sub_10003B888(v81, v19);
      if ((v87 & 1) != (v89 & 1))
      {
LABEL_110:
        swift_release();
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v83 = v88;
      uint64_t isUniquelyReferenced_nonNull_native = 48;
      if ((v87 & 1) == 0)
      {
LABEL_99:
        *(void *)(v5 + 8 * (v83 >> 6) + 64) |= 1 << v83;
        char v90 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v83);
        *char v90 = v81;
        v90[1] = v19;
        sub_100058DA0(v118, (_OWORD *)(*(void *)(v5 + 56) + 48 * v83));
        uint64_t v91 = *(void *)(v5 + 16);
        BOOL v49 = __OFADD__(v91, 1);
        uint64_t v92 = v91 + 1;
        if (v49) {
          goto LABEL_121;
        }
        *(void *)(v5 + 16) = v92;
        swift_bridgeObjectRetain();
        goto LABEL_104;
      }
    }
    sub_100058E2C((uint64_t)v118, *(void *)(v5 + 56) + 48 * v83);
LABEL_104:
    *(void *)uint64_t v8 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_100058DB8((uint64_t)v117);
    uint64_t v10 = v0 + 576;
LABEL_7:
    sub_100058DB8(v10);
    sub_100058DFC((uint64_t)v2);
    uint64_t v3 = v0 + 288;
    uint64_t v1 = (uint64_t *)(v0 + 16);
    unint64_t v7 = v126;
  }
  double v52 = *(double *)(v0 + 240);
  uint64_t v25 = v0 + 432;
  sub_100058D68((uint64_t)v121, (uint64_t)v101);
  if (*(unsigned char *)(v0 + 472) == 3)
  {
    sub_100022CC0(v101, (uint64_t)v99);
    uint64_t v53 = *(void *)(v0 + 832);
    sub_100042524(v99, v53);
    uint64_t v54 = *(void *)(v53 - 8);
    swift_task_alloc();
    (*(void (**)(void))(v54 + 16))();
    uint64_t v2 = (void (*)(uint64_t, uint64_t))(v0 + 192);
    unint64_t v55 = sub_100058E64();
    BinaryFloatingPoint.init<A>(_:)();
    swift_task_dealloc();
    double v56 = v52 + *(double *)(v0 + 944);
    *(void *)(v0 + 408) = &type metadata for Double;
    *(void *)(v0 + 416) = v55;
    *(double *)(v0 + 384) = v56;
    *(unsigned char *)(v0 + 424) = 3;
    uint64_t v51 = v0 + 528;
    sub_100058DA0((long long *)(v0 + 384), v117);
    sub_1000233E4((uint64_t)v99);
    goto LABEL_95;
  }
LABEL_113:
  swift_bridgeObjectRelease();
  sub_100058DB8(v25);
  sub_100058EB8();
  swift_allocError();
  swift_willThrow();
  sub_100058DB8((uint64_t)v121);
  sub_100058DFC((uint64_t)v2);
  swift_release();
  long long v93 = *(uint64_t (**)(void))(v0 + 8);
LABEL_114:
  return v93();
}

uint64_t sub_10005788C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 968) = a2;
  *(void *)(v2 + 960) = a1;
  return _swift_task_switch(sub_1000578B4, a1, 0);
}

uint64_t sub_1000578B4()
{
  uint64_t v142 = v0;
  if (qword_1003EBF60 != -1) {
LABEL_130:
  }
    swift_once();
  uint64_t v2 = *(void *)(v0 + 960);
  uint64_t v3 = qword_10040B480;
  uint64_t v5 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 128);
  swift_bridgeObjectRetain();
  LOBYTE(v3) = sub_100022CD8(v5, v4, v3);
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
  {
    uint64_t v130 = (long long *)(v0 + 144);
    unint64_t v126 = (long long *)(v0 + 240);
    uint64_t v139 = (_OWORD *)(v0 + 336);
    uint64_t v111 = (long long *)(v0 + 384);
    int64_t v113 = (long long *)(v0 + 432);
    char v135 = (long long *)(v0 + 480);
    uint64_t v10 = (_OWORD *)(v0 + 528);
    char v134 = (_OWORD *)(v0 + 576);
    uint64_t v127 = (long long *)(v0 + 624);
    uint64_t v112 = (long long *)(v0 + 672);
    int64_t v107 = (long long *)(v0 + 720);
    uint64_t v117 = (void *)(v0 + 768);
    char v110 = (void *)(v0 + 808);
    unint64_t v11 = (void *)(v0 + 896);
    uint64_t v12 = (uint64_t *)(v0 + 16);
    uint64_t v138 = (_OWORD *)(v0 + 80);
    uint64_t v133 = v0 + 288;
    int64_t v114 = (uint64_t *)(v0 + 920);
    uint64_t v105 = (void *)(v0 + 928);
    uint64_t v106 = (uint64_t *)(v0 + 936);
    uint64_t v13 = *(void *)(v0 + 968);
    uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
    if (-v14 < 64) {
      uint64_t v15 = ~(-1 << -(char)v14);
    }
    else {
      uint64_t v15 = -1;
    }
    uint64_t v116 = v13 + 64;
    unint64_t v16 = v15 & *(void *)(v13 + 64);
    uint64_t v17 = *(void *)(v0 + 960);
    uint64_t v129 = *(void *)(v0 + 968);
    swift_bridgeObjectRetain();
    int64_t v18 = (uint64_t *)(v17 + 112);
    swift_beginAccess();
    uint64_t v137 = 0;
    unint64_t v19 = 63 - v14;
    uint64_t v20 = (_OWORD *)(v0 + 192);
    unint64_t v21 = v16;
    uint64_t v128 = v0 + 96;
    uint64_t v132 = (long long *)(v0 + 32);
    int64_t v125 = v19 >> 6;
    uint64_t v104 = (v19 >> 6) - 1;
    uint64_t v118 = (_OWORD *)(v0 + 192);
    os_log_type_t v136 = (_OWORD *)(v0 + 528);
    unint64_t v131 = (uint64_t *)(v0 + 16);
    uint64_t v108 = v0;
    uint64_t v109 = (uint64_t *)(v17 + 112);
    while (!v21)
    {
      uint64_t v27 = v137 + 1;
      uint64_t v24 = v133;
      if (__OFADD__(v137, 1)) {
        goto LABEL_125;
      }
      if (v27 < v125)
      {
        unint64_t v28 = *(void *)(v116 + 8 * v27);
        if (v28) {
          goto LABEL_19;
        }
        uint64_t v29 = v137 + 2;
        ++v137;
        if (v27 + 1 < v125)
        {
          unint64_t v28 = *(void *)(v116 + 8 * v29);
          if (v28) {
            goto LABEL_22;
          }
          uint64_t v137 = v27 + 1;
          if (v27 + 2 < v125)
          {
            unint64_t v28 = *(void *)(v116 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_19;
            }
            uint64_t v29 = v27 + 3;
            uint64_t v137 = v27 + 2;
            if (v27 + 3 < v125)
            {
              unint64_t v28 = *(void *)(v116 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  uint64_t v27 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    break;
                  }
                  if (v27 >= v125)
                  {
                    uint64_t v137 = v104;
                    goto LABEL_33;
                  }
                  unint64_t v28 = *(void *)(v116 + 8 * v27);
                  ++v29;
                  if (v28) {
                    goto LABEL_19;
                  }
                }
                __break(1u);
LABEL_134:
                v1((uint64_t)v11, v10);
                uint64_t result = swift_task_dealloc();
LABEL_135:
                __break(1u);
                return result;
              }
LABEL_22:
              uint64_t v27 = v29;
LABEL_19:
              uint64_t v140 = (v28 - 1) & v28;
              unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
              uint64_t v137 = v27;
LABEL_15:
              uint64_t v25 = (void *)(*(void *)(v129 + 48) + 16 * v23);
              uint64_t v26 = v25[1];
              *(void *)(v0 + 80) = *v25;
              *(void *)(v0 + 88) = v26;
              sub_100058CC4(*(void *)(v129 + 56) + 48 * v23, v128);
              swift_bridgeObjectRetain();
              goto LABEL_34;
            }
          }
        }
      }
LABEL_33:
      uint64_t v140 = 0;
      *(_OWORD *)((char *)v138 + 42) = 0u;
      v138[1] = 0u;
      v138[2] = 0u;
      *uint64_t v138 = 0u;
LABEL_34:
      sub_100013B50((uint64_t)v138, (uint64_t)v12, &qword_1003ECA40);
      uint64_t v5 = *(void *)(v0 + 24);
      if (!v5)
      {
        swift_release();
        goto LABEL_116;
      }
      uint64_t v30 = *v12;
      sub_100058CFC(v132, v20);
      uint64_t v31 = *v18;
      if (!*(void *)(*v18 + 16))
      {
        *(void *)(v24 + 32) = 0;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(unsigned char *)(v0 + 328) = -1;
LABEL_49:
        sub_10000A520(v24, &qword_1003ECA48);
        sub_100058CC4((uint64_t)v20, (uint64_t)v130);
        if (*(unsigned char *)(v0 + 185))
        {
          if (*(unsigned char *)(v0 + 185) == 1)
          {
            uint64_t v44 = *(void *)(v0 + 144);
            *(void *)(v0 + 360) = &type metadata for Int64;
            *(void *)(v0 + 368) = sub_100058D14();
            *(void *)(v0 + 336) = v44;
            char v45 = 2;
          }
          else
          {
            uint64_t v46 = *(void *)(v0 + 144);
            *(void *)(v0 + 360) = &type metadata for Double;
            *(void *)(v0 + 368) = sub_100058E64();
            *(void *)(v0 + 336) = v46;
            char v45 = 3;
          }
          *(unsigned char *)(v0 + 376) = v45;
        }
        else
        {
          sub_100058DA0(v130, v139);
        }
        swift_beginAccess();
        sub_100058D68((uint64_t)v139, (uint64_t)v135);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v141[0] = *v18;
        unint64_t v11 = (void *)v141[0];
        *int64_t v18 = 0x8000000000000000;
        uint64_t v48 = v30;
        unint64_t v50 = sub_10003B888(v30, v5);
        uint64_t v51 = v11[2];
        BOOL v52 = (v49 & 1) == 0;
        uint64_t v53 = v51 + v52;
        if (__OFADD__(v51, v52))
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
        char v54 = v49;
        if (v11[3] >= v53)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v10 = v136;
            if ((v49 & 1) == 0) {
              goto LABEL_62;
            }
          }
          else
          {
            sub_10012563C();
            unint64_t v11 = (void *)v141[0];
            uint64_t v10 = v136;
            if ((v54 & 1) == 0) {
              goto LABEL_62;
            }
          }
        }
        else
        {
          sub_10013E904(v53, isUniquelyReferenced_nonNull_native);
          unint64_t v11 = (void *)v141[0];
          unint64_t v55 = sub_10003B888(v48, v5);
          if ((v54 & 1) != (v56 & 1)) {
            goto LABEL_120;
          }
          unint64_t v50 = v55;
          uint64_t v10 = v136;
          if ((v54 & 1) == 0)
          {
LABEL_62:
            v11[(v50 >> 6) + 8] |= 1 << v50;
            char v57 = (uint64_t *)(v11[6] + 16 * v50);
            *char v57 = v48;
            v57[1] = v5;
            sub_100058DA0(v135, (_OWORD *)(v11[7] + 48 * v50));
            uint64_t v58 = v11[2];
            BOOL v59 = __OFADD__(v58, 1);
            uint64_t v60 = v58 + 1;
            if (v59) {
              goto LABEL_127;
            }
            v11[2] = v60;
            swift_bridgeObjectRetain();
            goto LABEL_11;
          }
        }
        sub_100058E2C((uint64_t)v135, v11[7] + 48 * v50);
LABEL_11:
        *int64_t v18 = (uint64_t)v11;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v22 = (uint64_t)v139;
        goto LABEL_12;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_10003B888(v30, v5);
      if (v33)
      {
        sub_100058D68(*(void *)(v31 + 56) + 48 * v32, v24);
      }
      else
      {
        *(void *)(v24 + 32) = 0;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(unsigned char *)(v0 + 328) = -1;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(unsigned __int8 *)(v0 + 328) == 255) {
        goto LABEL_49;
      }
      sub_100058DA0((long long *)v24, v134);
      sub_100058CC4((uint64_t)v20, (uint64_t)v126);
      if (!*(unsigned char *)(v0 + 281))
      {
        sub_100058DA0(v126, v10);
        goto LABEL_99;
      }
      uint64_t v124 = v30;
      if (*(unsigned char *)(v0 + 281) != 1)
      {
        double v61 = *(double *)(v0 + 240);
        uint64_t v35 = (uint64_t)v113;
        sub_100058D68((uint64_t)v134, (uint64_t)v113);
        if (*(unsigned char *)(v0 + 472) != 3)
        {
LABEL_123:
          swift_bridgeObjectRelease();
          sub_100058DB8(v35);
          sub_100058EB8();
          swift_allocError();
          swift_willThrow();
          sub_100058DB8((uint64_t)v134);
          sub_100058DFC((uint64_t)v20);
          swift_release();
          unint64_t v101 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_117;
        }
        uint64_t v1 = (void (*)(uint64_t, _OWORD *))v110;
        sub_100022CC0(v113, (uint64_t)v110);
        uint64_t v62 = *(void *)(v0 + 832);
        sub_100042524(v110, v62);
        uint64_t v63 = *(void *)(v62 - 8);
        swift_task_alloc();
        (*(void (**)(void))(v63 + 16))();
        uint64_t v20 = v118;
        unint64_t v64 = sub_100058E64();
        BinaryFloatingPoint.init<A>(_:)();
        uint64_t v10 = v136;
        swift_task_dealloc();
        double v65 = v61 + *(double *)(v0 + 944);
        *(void *)(v0 + 408) = &type metadata for Double;
        *(void *)(v0 + 416) = v64;
        uint64_t v30 = v124;
        *(double *)(v0 + 384) = v65;
        *(unsigned char *)(v0 + 424) = 3;
        sub_100058DA0(v111, v136);
        sub_1000233E4((uint64_t)v110);
        goto LABEL_99;
      }
      uint64_t v34 = *(void *)(v0 + 240);
      uint64_t v35 = (uint64_t)v112;
      sub_100058D68((uint64_t)v134, (uint64_t)v112);
      if (*(unsigned char *)(v0 + 712) != 2) {
        goto LABEL_123;
      }
      uint64_t v115 = v34;
      sub_100022CC0(v112, (uint64_t)v117);
      uint64_t v10 = *(_OWORD **)(v0 + 792);
      char v36 = sub_100042524(v117, (uint64_t)v10);
      uint64_t v37 = *((void *)v10 - 1);
      uint64_t v38 = swift_task_alloc();
      uint64_t v122 = v37;
      char v39 = *(void (**)(uint64_t, uint64_t, _OWORD *))(v37 + 16);
      v39(v38, (uint64_t)v36, v10);
      char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v41 = swift_task_alloc();
      uint64_t v123 = v38;
      uint64_t v119 = v39;
      v39(v41, v38, v10);
      if ((v40 & 1) == 0)
      {
        unint64_t v120 = *(void (**)(uint64_t, _OWORD *))(v37 + 8);
        v120(v41, v10);
LABEL_68:
        uint64_t v0 = v108;
        int64_t v18 = v109;
        goto LABEL_83;
      }
      uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v1 = *(void (**)(uint64_t, _OWORD *))(v37 + 8);
      v1(v41, v10);
      unint64_t v120 = v1;
      if (v42 <= 64) {
        goto LABEL_68;
      }
      uint64_t v43 = swift_task_alloc();
      v119(v43, v123, v10);
      *uint64_t v106 = 0x8000000000000000;
      uint64_t v0 = v108;
      int64_t v18 = v109;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
          goto LABEL_78;
        }
        uint64_t v71 = v43;
        uint64_t v72 = swift_task_alloc();
        sub_100058D14();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
        v1(v72, v10);
        v1(v71, v10);
        goto LABEL_73;
      }
      uint64_t v66 = v43;
      char v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v103 = v66;
      uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v67)
      {
        if (v68 <= 64)
        {
          swift_getAssociatedTypeWitness();
          swift_task_alloc();
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v75 = swift_task_alloc();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v102 = dispatch thunk of static Comparable.< infix(_:_:)();
          v1(v75, v10);
          swift_task_dealloc();
          swift_task_dealloc();
          unint64_t v11 = (void *)swift_task_alloc();
          (*(void (**)(void *, uint64_t, _OWORD *))(v122 + 32))(v11, v103, v10);
          if (v102) {
            goto LABEL_134;
          }
          uint64_t v76 = *v106;
          uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
          v1((uint64_t)v11, v10);
          uint64_t result = swift_task_dealloc();
          if (v77 < v76) {
            goto LABEL_135;
          }
          goto LABEL_82;
        }
        uint64_t v69 = swift_task_alloc();
        sub_100058D14();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
        v1(v69, v10);
        v1(v103, v10);
LABEL_73:
        uint64_t result = swift_task_dealloc();
        if (v70) {
          goto LABEL_135;
        }
        goto LABEL_82;
      }
      if (v68 < 64)
      {
        uint64_t v43 = v66;
LABEL_78:
        uint64_t v74 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t result = ((uint64_t (*)(uint64_t, _OWORD *))v1)(v43, v10);
        if (v74 < *v106) {
          goto LABEL_135;
        }
        goto LABEL_82;
      }
      v1(v66, v10);
LABEL_82:
      swift_task_dealloc();
LABEL_83:
      uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v79 = swift_task_alloc();
      v119(v79, v123, v10);
      if (v78 < 65)
      {
        uint64_t v80 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v1 = v120;
        v120(v79, v10);
        if (v80 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
          goto LABEL_97;
        }
      }
      else
      {
        v120(v79, v10);
      }
      uint64_t v81 = swift_task_alloc();
      v119(v81, v123, v10);
      uint64_t *v114 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v82 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v4 & 1) == 0)
      {
        if (v82 >= 64)
        {
          void *v105 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v85 = swift_task_alloc();
          (*(void (**)(uint64_t, uint64_t, _OWORD *))(v122 + 32))(v85, v81, v10);
          uint64_t v4 = swift_task_alloc();
          sub_100058D14();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v121 = dispatch thunk of static Comparable.< infix(_:_:)();
          v120(v4, v10);
          v120(v85, v10);
          swift_task_dealloc();
          swift_task_dealloc();
          if (v121)
          {
LABEL_131:
            __break(1u);
            goto LABEL_132;
          }
          goto LABEL_96;
        }
LABEL_93:
        uint64_t v84 = dispatch thunk of BinaryInteger._lowWord.getter();
        v120(v81, v10);
        if (*v114 < v84) {
          goto LABEL_131;
        }
        goto LABEL_96;
      }
      if (v82 <= 64) {
        goto LABEL_93;
      }
      uint64_t v4 = swift_task_alloc();
      sub_100058D14();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v83 = dispatch thunk of static Comparable.< infix(_:_:)();
      v120(v4, v10);
      v120(v81, v10);
      swift_task_dealloc();
      if (v83) {
        goto LABEL_131;
      }
LABEL_96:
      swift_task_dealloc();
      uint64_t v30 = v124;
      uint64_t v1 = v120;
LABEL_97:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v86 = dispatch thunk of BinaryInteger._lowWord.getter();
      v1(v123, v10);
      swift_task_dealloc();
      BOOL v59 = __OFADD__(v86, v115);
      uint64_t v87 = v86 + v115;
      if (v59) {
        goto LABEL_129;
      }
      *(void *)(v0 + 744) = &type metadata for Int64;
      *(void *)(v0 + 752) = sub_100058D14();
      *(void *)(v0 + 720) = v87;
      *(unsigned char *)(v0 + 760) = 2;
      uint64_t v10 = v136;
      sub_100058DA0(v107, v136);
      sub_1000233E4((uint64_t)v117);
      uint64_t v20 = v118;
LABEL_99:
      swift_beginAccess();
      sub_100058D68((uint64_t)v10, (uint64_t)v127);
      int v88 = swift_isUniquelyReferenced_nonNull_native();
      v141[0] = *v18;
      unint64_t v11 = (void *)v141[0];
      *int64_t v18 = 0x8000000000000000;
      uint64_t v89 = v30;
      unint64_t v91 = sub_10003B888(v30, v5);
      uint64_t v92 = v11[2];
      BOOL v93 = (v90 & 1) == 0;
      uint64_t v94 = v92 + v93;
      if (__OFADD__(v92, v93)) {
        goto LABEL_126;
      }
      char v95 = v90;
      if (v11[3] >= v94)
      {
        if (v88)
        {
          uint64_t v10 = v136;
          if ((v90 & 1) == 0) {
            goto LABEL_103;
          }
        }
        else
        {
          sub_10012563C();
          unint64_t v11 = (void *)v141[0];
          uint64_t v10 = v136;
          if ((v95 & 1) == 0) {
            goto LABEL_103;
          }
        }
      }
      else
      {
        sub_10013E904(v94, v88);
        unint64_t v11 = (void *)v141[0];
        unint64_t v96 = sub_10003B888(v89, v5);
        if ((v95 & 1) != (v97 & 1))
        {
LABEL_120:
          swift_bridgeObjectRelease();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v91 = v96;
        uint64_t v10 = v136;
        if ((v95 & 1) == 0)
        {
LABEL_103:
          v11[(v91 >> 6) + 8] |= 1 << v91;
          uint64_t v98 = (uint64_t *)(v11[6] + 16 * v91);
          uint64_t *v98 = v89;
          v98[1] = v5;
          sub_100058DA0(v127, (_OWORD *)(v11[7] + 48 * v91));
          uint64_t v99 = v11[2];
          BOOL v59 = __OFADD__(v99, 1);
          uint64_t v100 = v99 + 1;
          if (v59) {
            goto LABEL_128;
          }
          v11[2] = v100;
          swift_bridgeObjectRetain();
          goto LABEL_108;
        }
      }
      sub_100058E2C((uint64_t)v127, v11[7] + 48 * v91);
LABEL_108:
      *int64_t v18 = (uint64_t)v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_100058DB8((uint64_t)v10);
      uint64_t v22 = (uint64_t)v134;
LABEL_12:
      sub_100058DB8(v22);
      sub_100058DFC((uint64_t)v20);
      uint64_t v12 = v131;
      unint64_t v21 = v140;
    }
    uint64_t v140 = (v21 - 1) & v21;
    unint64_t v23 = __clz(__rbit64(v21)) | (v137 << 6);
    uint64_t v24 = v133;
    goto LABEL_15;
  }
  if (qword_1003EBF58 != -1) {
LABEL_132:
  }
    swift_once();
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040B468);
  swift_retain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v141[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 952) = sub_100037004(v5, v4, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "AnalyticsEvent not computing disallowed analytics event %{public}s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

LABEL_116:
  unint64_t v101 = *(uint64_t (**)(void))(v0 + 8);
LABEL_117:
  return v101();
}

uint64_t sub_100058CC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_100058CFC(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(long long *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_100058D14()
{
  unint64_t result = qword_1003ECA50;
  if (!qword_1003ECA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECA50);
  }
  return result;
}

uint64_t sub_100058D68(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_100058DA0(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_100058DB8(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 4) {
    unsigned int v2 = *(_DWORD *)a1 + 4;
  }
  if (v2) {
    sub_1000233E4(a1);
  }
  return a1;
}

uint64_t sub_100058DFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100058E2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100058E64()
{
  unint64_t result = qword_1003ECA58;
  if (!qword_1003ECA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECA58);
  }
  return result;
}

unint64_t sub_100058EB8()
{
  unint64_t result = qword_1003ECA60;
  if (!qword_1003ECA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECA60);
  }
  return result;
}

void *sub_100058F0C(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v152 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v160 = v169;
  unsigned int v162 = (long long *)&v172;
  unint64_t v142 = v8 - 1;
  unint64_t v9 = 0;
  int64_t v159 = v8;
  unint64_t v144 = v8 - 5;
  uint64_t v161 = swift_bridgeObjectRetain();
  uint64_t v143 = v161 + 104;
  uint64_t v10 = _swiftEmptyDictionarySingleton;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v13 = v12 | (v9 << 6);
LABEL_9:
  uint64_t v14 = *(void *)(v161 + 56);
  uint64_t v15 = (void *)(*(void *)(v161 + 48) + 16 * v13);
  uint64_t v16 = v15[1];
  *(void *)&long long v168 = *v15;
  *((void *)&v168 + 1) = v16;
  sub_100058D68(v14 + 48 * v13, (uint64_t)v160);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100013B50((uint64_t)&v168, (uint64_t)&v170, &qword_1003ECA78);
    uint64_t v20 = v171;
    if (!v171) {
      break;
    }
    uint64_t v21 = v170;
    sub_100058DA0(v162, &v168);
    switch(BYTE8(v169[1]))
    {
      case 1:
        sub_100022CC0(&v168, (uint64_t)&v165);
        unint64_t v50 = sub_100042524(&v165, v166);
        __chkstk_darwin(v50);
        (*(void (**)(char *))(v52 + 16))((char *)&v136 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
        String.init<A>(_:)();
        v42.super.super.Class isa = (Class)String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v163[0] = v10;
        uint64_t v1 = (uint64_t)v10;
        unint64_t v2 = sub_10003B888(v21, v20);
        uint64_t v54 = v10[2];
        BOOL v55 = (v53 & 1) == 0;
        uint64_t v56 = v54 + v55;
        if (__OFADD__(v54, v55)) {
          goto LABEL_122;
        }
        char v57 = v53;
        if (v10[3] >= v56)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v1 = (uint64_t)v163;
            sub_100125A14();
          }
        }
        else
        {
          sub_10013EF54(v56, isUniquelyReferenced_nonNull_native);
          uint64_t v1 = v163[0];
          unint64_t v58 = sub_10003B888(v21, v20);
          if ((v57 & 1) != (v59 & 1)) {
            goto LABEL_133;
          }
          unint64_t v2 = v58;
        }
        uint64_t v10 = (void *)v163[0];
        if (v57)
        {
LABEL_5:
          uint64_t v11 = v10[7];
          uint64_t v1 = 8 * v2;

          *(NSNumber *)(v11 + 8 * v2) = v42;
        }
        else
        {
          *(void *)(v163[0] + 8 * (v2 >> 6) + 64) |= 1 << v2;
          char v83 = (uint64_t *)(v10[6] + 16 * v2);
          *char v83 = v21;
          v83[1] = v20;
          *(NSNumber *)(v10[7] + 8 * v2) = v42;
          uint64_t v84 = v10[2];
          BOOL v80 = __OFADD__(v84, 1);
          uint64_t v81 = v84 + 1;
          if (v80) {
            goto LABEL_126;
          }
LABEL_55:
          v10[2] = v81;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2:
        unint64_t v158 = v9;
        sub_100022CC0(&v168, (uint64_t)&v165);
        sub_100050C1C((uint64_t)&v165, (uint64_t)v163);
        sub_100044014(&qword_1003ECA80);
        if (swift_dynamicCast())
        {
          v31.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v163[0] = v10;
          uint64_t v1 = (uint64_t)v10;
          unint64_t v2 = sub_10003B888(v21, v20);
          uint64_t v33 = v10[2];
          BOOL v34 = (v32 & 1) == 0;
          uint64_t v35 = v33 + v34;
          if (__OFADD__(v33, v34)) {
            goto LABEL_123;
          }
          char v36 = v32;
          if (v10[3] >= v35)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v1 = (uint64_t)v163;
              sub_100125A14();
            }
          }
          else
          {
            sub_10013EF54(v35, isUniquelyReferenced_nonNull_native);
            uint64_t v1 = v163[0];
            unint64_t v37 = sub_10003B888(v21, v20);
            if ((v36 & 1) != (v38 & 1)) {
              goto LABEL_133;
            }
            unint64_t v2 = v37;
          }
          uint64_t v10 = (void *)v163[0];
          if (v36) {
            goto LABEL_108;
          }
          *(void *)(v163[0] + 8 * (v2 >> 6) + 64) |= 1 << v2;
          int v88 = (uint64_t *)(v10[6] + 16 * v2);
          *int v88 = v21;
          v88[1] = v20;
          *(NSNumber *)(v10[7] + 8 * v2) = v31;
          uint64_t v89 = v10[2];
          BOOL v80 = __OFADD__(v89, 1);
          uint64_t v90 = v89 + 1;
          if (v80) {
            goto LABEL_129;
          }
          goto LABEL_110;
        }
        uint64_t v149 = (char **)v20;
        unint64_t v151 = v7;
        uint64_t v147 = v21;
        uint64_t isUniquelyReferenced_nonNull_native = v166;
        uint64_t v60 = v167;
        double v61 = sub_100042524(&v165, v166);
        uint64_t v148 = &v136;
        uint64_t v62 = *(void **)(isUniquelyReferenced_nonNull_native - 8);
        uint64_t v63 = v62[8];
        __chkstk_darwin(v61);
        unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
        double v65 = (char **)v62[2];
        ((void (*)(char *))v65)((char *)&v136 - v64);
        uint64_t v150 = v60;
        uint64_t v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
        LOBYTE(v60) = v66;
        uint64_t v146 = &v136;
        uint64_t v156 = v63;
        __chkstk_darwin(v66);
        char v67 = (char *)&v136 - v64;
        unint64_t v157 = (char *)&v136 - v64;
        uint64_t v153 = (char **)(v62 + 2);
        uint64_t v155 = v65;
        ((void (*)(char *, char *, uint64_t))v65)((char *)&v136 - v64, (char *)&v136 - v64, isUniquelyReferenced_nonNull_native);
        uint64_t v154 = v62;
        if ((v60 & 1) == 0)
        {
          unint64_t v2 = v62[1];
          ((void (*)(char *, uint64_t))v2)((char *)&v136 - v64, isUniquelyReferenced_nonNull_native);
LABEL_64:
          unint64_t v7 = v151;
          uint64_t v76 = (uint64_t)v149;
          goto LABEL_88;
        }
        uint64_t v68 = v150;
        uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v71 = (uint64_t (*)(char *, uint64_t))v62[1];
        char v70 = (char **)(v62 + 1);
        unint64_t v2 = (unint64_t)v71;
        uint64_t v72 = v71(v67, isUniquelyReferenced_nonNull_native);
        if (v69 <= 64) {
          goto LABEL_64;
        }
        __chkstk_darwin(v72);
        uint64_t v74 = (char *)&v136 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v155)(v74, v157, isUniquelyReferenced_nonNull_native);
        v163[0] = 0x8000000000000000;
        char v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
        unint64_t v7 = v151;
        uint64_t v76 = (uint64_t)v149;
        if (v75)
        {
          uint64_t v77 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v77 >= 64)
          {
            uint64_t v145 = v70;
            uint64_t v141 = &v136;
            __chkstk_darwin(v77);
            uint64_t v98 = v74;
            uint64_t v99 = (char *)&v136 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
            sub_100058D14();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            uint64_t v1 = dispatch thunk of static Comparable.< infix(_:_:)();
            ((void (*)(char *, uint64_t))v2)(v99, isUniquelyReferenced_nonNull_native);
            ((void (*)(char *, uint64_t))v2)(v98, isUniquelyReferenced_nonNull_native);
            if (v1) {
              goto LABEL_131;
            }
          }
          else
          {
            uint64_t v1 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(char *, uint64_t))v2)(v74, isUniquelyReferenced_nonNull_native);
            if (v1 < v163[0]) {
              goto LABEL_131;
            }
          }
        }
        else
        {
          uint64_t v141 = &v136;
          unint64_t v91 = v74;
          char v92 = dispatch thunk of static BinaryInteger.isSigned.getter();
          BOOL v93 = v91;
          uint64_t v94 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v92)
          {
            uint64_t v145 = v70;
            if (v94 > 64)
            {
              uint64_t v140 = &v136;
              __chkstk_darwin(v94);
              unint64_t v96 = (char *)&v136 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
              sub_100058D14();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              uint64_t v1 = dispatch thunk of static Comparable.< infix(_:_:)();
              ((void (*)(char *, uint64_t))v2)(v96, isUniquelyReferenced_nonNull_native);
              ((void (*)(char *, uint64_t))v2)(v93, isUniquelyReferenced_nonNull_native);
              if (v1) {
                goto LABEL_131;
              }
              goto LABEL_88;
            }
            uint64_t v137 = *(void *)(*(void *)(v68 + 24) + 16);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            uint64_t v140 = &v136;
            __chkstk_darwin(AssociatedTypeWitness);
            swift_getAssociatedConformanceWitness();
            uint64_t v102 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            uint64_t v138 = &v136;
            uint64_t v103 = v156;
            __chkstk_darwin(v102);
            int64_t v139 = (v103 + 15) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v104 = (char *)&v136 - v139;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            os_log_type_t v136 = v91;
            LODWORD(v137) = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v105 = ((uint64_t (*)(char *, uint64_t))v2)(v104, isUniquelyReferenced_nonNull_native);
            uint64_t v140 = &v136;
            __chkstk_darwin(v105);
            uint64_t v1 = (uint64_t)&v136 - v139;
            ((void (*)(char *, char *, uint64_t))v154[4])((char *)&v136 - v139, v136, isUniquelyReferenced_nonNull_native);
            if (v137) {
              goto LABEL_132;
            }
            int64_t v139 = v163[0];
            uint64_t v106 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(uint64_t, uint64_t))v2)(v1, isUniquelyReferenced_nonNull_native);
            BOOL v100 = v106 < v139;
          }
          else
          {
            if (v94 >= 64)
            {
              ((void (*)(char *, uint64_t))v2)(v91, isUniquelyReferenced_nonNull_native);
              goto LABEL_88;
            }
            uint64_t v1 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(char *, uint64_t))v2)(v93, isUniquelyReferenced_nonNull_native);
            BOOL v100 = v1 < v163[0];
          }
          if (v100) {
            goto LABEL_131;
          }
        }
LABEL_88:
        int64_t v107 = v157;
        uint64_t v108 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v149 = &v136;
        __chkstk_darwin(v108);
        char v110 = (char *)&v136 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v155)(v110, v107, isUniquelyReferenced_nonNull_native);
        if (v108 < 65)
        {
          uint64_t v118 = dispatch thunk of BinaryInteger.bitWidth.getter();
          ((void (*)(char *, uint64_t))v2)(v110, isUniquelyReferenced_nonNull_native);
          if (v118 != 64) {
            goto LABEL_101;
          }
          uint64_t v111 = dispatch thunk of static BinaryInteger.isSigned.getter();
          if (v111) {
            goto LABEL_101;
          }
        }
        else
        {
          uint64_t v111 = ((uint64_t (*)(char *, uint64_t))v2)(v110, isUniquelyReferenced_nonNull_native);
        }
        uint64_t v145 = &v136;
        __chkstk_darwin(v111);
        int64_t v113 = (char *)&v136 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v155)(v113, v157, isUniquelyReferenced_nonNull_native);
        v163[0] = 0x7FFFFFFFFFFFFFFFLL;
        char v114 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v115 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v114)
        {
          if (v115 > 64)
          {
            uint64_t v155 = &v136;
            __chkstk_darwin(v115);
            uint64_t v117 = (char *)&v136 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
            sub_100058D14();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            uint64_t v1 = dispatch thunk of static Comparable.< infix(_:_:)();
            ((void (*)(char *, uint64_t))v2)(v117, isUniquelyReferenced_nonNull_native);
            ((void (*)(char *, uint64_t))v2)(v113, isUniquelyReferenced_nonNull_native);
            if (v1) {
              goto LABEL_128;
            }
            goto LABEL_101;
          }
LABEL_98:
          uint64_t v1 = (uint64_t)v113;
          uint64_t v119 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v2)(v113, isUniquelyReferenced_nonNull_native);
          if (v163[0] < v119) {
            goto LABEL_128;
          }
          goto LABEL_101;
        }
        if (v115 <= 63) {
          goto LABEL_98;
        }
        uint64_t v155 = &v136;
        uint64_t v164 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v120 = v156;
        __chkstk_darwin(v115);
        char v121 = (char *)&v136 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v122 = ((uint64_t (*)(char *, char *, uint64_t))v154[4])(v121, v113, isUniquelyReferenced_nonNull_native);
        uint64_t v153 = &v136;
        unint64_t v7 = v151;
        __chkstk_darwin(v122);
        sub_100058D14();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v1 = dispatch thunk of static Comparable.< infix(_:_:)();
        ((void (*)(char *, uint64_t))v2)(v121, isUniquelyReferenced_nonNull_native);
        ((void (*)(char *, uint64_t))v2)(v121, isUniquelyReferenced_nonNull_native);
        if (v1) {
          goto LABEL_128;
        }
LABEL_101:
        uint64_t v123 = v157;
        dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v2)(v123, isUniquelyReferenced_nonNull_native);
        v31.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v163[0] = v10;
        uint64_t v124 = v147;
        uint64_t v1 = (uint64_t)v10;
        unint64_t v2 = sub_10003B888(v147, v76);
        uint64_t v126 = v10[2];
        BOOL v127 = (v125 & 1) == 0;
        uint64_t v128 = v126 + v127;
        if (__OFADD__(v126, v127)) {
          goto LABEL_124;
        }
        char v129 = v125;
        if (v10[3] >= v128)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v1 = (uint64_t)v163;
            sub_100125A14();
          }
        }
        else
        {
          sub_10013EF54(v128, isUniquelyReferenced_nonNull_native);
          uint64_t v1 = v163[0];
          unint64_t v130 = sub_10003B888(v124, v76);
          if ((v129 & 1) != (v131 & 1)) {
            goto LABEL_133;
          }
          unint64_t v2 = v130;
        }
        uint64_t v10 = (void *)v163[0];
        if (v129)
        {
LABEL_108:
          uint64_t v132 = v10[7];
          uint64_t v1 = 8 * v2;

          *(NSNumber *)(v132 + 8 * v2) = v31;
          goto LABEL_111;
        }
        *(void *)(v163[0] + 8 * (v2 >> 6) + 64) |= 1 << v2;
        uint64_t v133 = (uint64_t *)(v10[6] + 16 * v2);
        *uint64_t v133 = v124;
        v133[1] = v76;
        *(NSNumber *)(v10[7] + 8 * v2) = v31;
        uint64_t v134 = v10[2];
        BOOL v80 = __OFADD__(v134, 1);
        uint64_t v90 = v134 + 1;
        if (v80) {
          goto LABEL_130;
        }
LABEL_110:
        v10[2] = v90;
        swift_bridgeObjectRetain();
LABEL_111:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v9 = v158;
LABEL_7:
        sub_1000233E4((uint64_t)&v165);
        if (v7) {
          goto LABEL_8;
        }
LABEL_10:
        int64_t v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          ((void (*)(uint64_t, uint64_t))v2)(v1, isUniquelyReferenced_nonNull_native);
          __break(1u);
LABEL_133:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x10005A538);
        }
        if (v17 >= v159)
        {
          unint64_t v19 = v9;
        }
        else
        {
          unint64_t v18 = *(void *)(v152 + 8 * v17);
          if (v18) {
            goto LABEL_13;
          }
          unint64_t v19 = v9 + 1;
          if ((uint64_t)(v9 + 2) < v159)
          {
            unint64_t v18 = *(void *)(v152 + 8 * (v9 + 2));
            if (v18)
            {
              int64_t v17 = v9 + 2;
LABEL_13:
              unint64_t v7 = (v18 - 1) & v18;
              unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
              unint64_t v9 = v17;
              goto LABEL_9;
            }
            unint64_t v19 = v9 + 2;
            if ((uint64_t)(v9 + 3) < v159)
            {
              unint64_t v18 = *(void *)(v152 + 8 * (v9 + 3));
              if (v18)
              {
                int64_t v17 = v9 + 3;
                goto LABEL_13;
              }
              int64_t v17 = v9 + 4;
              unint64_t v19 = v9 + 3;
              if ((uint64_t)(v9 + 4) < v159)
              {
                unint64_t v18 = *(void *)(v152 + 8 * v17);
                if (v18) {
                  goto LABEL_13;
                }
                while (v144 != v9)
                {
                  unint64_t v18 = *(void *)(v143 + 8 * v9++);
                  if (v18)
                  {
                    int64_t v17 = v9 + 4;
                    goto LABEL_13;
                  }
                }
                unint64_t v19 = v142;
              }
            }
          }
        }
        unint64_t v7 = 0;
        memset(v169, 0, 41);
        unint64_t v9 = v19;
        long long v168 = 0u;
        break;
      case 3:
        sub_100022CC0(&v168, (uint64_t)&v165);
        char v39 = sub_100042524(&v165, v166);
        __chkstk_darwin(v39);
        (*(void (**)(char *))(v41 + 16))((char *)&v136 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        sub_100058E64();
        BinaryFloatingPoint.init<A>(_:)();
        v42.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v164 = (uint64_t)v10;
        uint64_t v1 = (uint64_t)v10;
        unint64_t v2 = sub_10003B888(v21, v20);
        uint64_t v44 = v10[2];
        BOOL v45 = (v43 & 1) == 0;
        uint64_t v46 = v44 + v45;
        if (__OFADD__(v44, v45)) {
          goto LABEL_121;
        }
        char v47 = v43;
        if (v10[3] >= v46)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v1 = (uint64_t)&v164;
            sub_100125A14();
          }
        }
        else
        {
          sub_10013EF54(v46, isUniquelyReferenced_nonNull_native);
          uint64_t v1 = v164;
          unint64_t v48 = sub_10003B888(v21, v20);
          if ((v47 & 1) != (v49 & 1)) {
            goto LABEL_133;
          }
          unint64_t v2 = v48;
        }
        uint64_t v10 = (void *)v164;
        if (v47) {
          goto LABEL_5;
        }
        *(void *)(v164 + 8 * (v2 >> 6) + 64) |= 1 << v2;
        uint64_t v78 = (uint64_t *)(v10[6] + 16 * v2);
        *uint64_t v78 = v21;
        v78[1] = v20;
        *(NSNumber *)(v10[7] + 8 * v2) = v42;
        uint64_t v79 = v10[2];
        BOOL v80 = __OFADD__(v79, 1);
        uint64_t v81 = v79 + 1;
        if (!v80) {
          goto LABEL_55;
        }
        goto LABEL_125;
      default:
        char v22 = v168;
        sub_10005A548(0, &qword_1003ECA88);
        v23.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(v22).super.super.isa;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v165 = v10;
        uint64_t v1 = (uint64_t)v10;
        unint64_t v2 = sub_10003B888(v21, v20);
        uint64_t v25 = v10[2];
        BOOL v26 = (v24 & 1) == 0;
        uint64_t v27 = v25 + v26;
        if (__OFADD__(v25, v26)) {
          goto LABEL_120;
        }
        char v28 = v24;
        if (v10[3] >= v27)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v1 = (uint64_t)&v165;
            sub_100125A14();
          }
        }
        else
        {
          sub_10013EF54(v27, isUniquelyReferenced_nonNull_native);
          uint64_t v1 = (uint64_t)v165;
          unint64_t v29 = sub_10003B888(v21, v20);
          if ((v28 & 1) != (v30 & 1)) {
            goto LABEL_133;
          }
          unint64_t v2 = v29;
        }
        uint64_t v10 = v165;
        if (v28)
        {
          uint64_t v82 = v165[7];
          uint64_t v1 = 8 * v2;

          *(NSNumber *)(v82 + 8 * v2) = v23;
        }
        else
        {
          v165[(v2 >> 6) + 8] |= 1 << v2;
          uint64_t v85 = (uint64_t *)(v10[6] + 16 * v2);
          *uint64_t v85 = v21;
          v85[1] = v20;
          *(NSNumber *)(v10[7] + 8 * v2) = v23;
          uint64_t v86 = v10[2];
          BOOL v80 = __OFADD__(v86, 1);
          uint64_t v87 = v86 + 1;
          if (v80) {
            goto LABEL_127;
          }
          v10[2] = v87;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v7) {
          goto LABEL_10;
        }
        goto LABEL_8;
    }
  }
  swift_release();
  return v10;
}

uint64_t sub_10005A548(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10005A584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005A5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005A654()
{
  unint64_t result = qword_1003ECAA8;
  if (!qword_1003ECAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECAA8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.AnalyticsEventError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsEvent.AnalyticsEventError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005A794);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005A7BC()
{
  return 0;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.AnalyticsEventError()
{
  return &type metadata for AnalyticsEvent.AnalyticsEventError;
}

uint64_t destroy for AnalyticsEvent.Mode(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (!v1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
    if (v2 >= 4) {
      unsigned int v2 = *(_DWORD *)a1 + 4;
    }
    if (v2) {
      return sub_1000233E4(a1);
    }
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    *(void *)a1 = *(void *)a2;
    char v4 = 2;
  }
  else if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v4 = 1;
  }
  else
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 1u:
        long long v7 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v7;
        (**(void (***)(uint64_t))(v7 - 8))(a1);
        char v6 = 1;
        break;
      case 2u:
        long long v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v8;
        (**(void (***)(uint64_t))(v8 - 8))(a1);
        char v6 = 2;
        break;
      case 3u:
        long long v9 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v9;
        (**(void (***)(uint64_t))(v9 - 8))(a1);
        char v6 = 3;
        break;
      default:
        char v6 = 0;
        *(unsigned char *)a1 = *(unsigned char *)a2;
        break;
    }
    char v4 = 0;
    *(unsigned char *)(a1 + 40) = v6;
  }
  *(unsigned char *)(a1 + 41) = v4;
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 4) {
        unsigned int v5 = *(_DWORD *)a1 + 4;
      }
      if (v5) {
        sub_1000233E4(a1);
      }
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 3) {
      unsigned int v6 = *(_DWORD *)a2 + 3;
    }
    if (v6 == 2)
    {
      *(void *)a1 = *(void *)a2;
      char v7 = 2;
    }
    else if (v6 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v7 = 1;
    }
    else
    {
      unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
      if (v8 >= 4) {
        unsigned int v8 = *(_DWORD *)a2 + 4;
      }
      switch(v8)
      {
        case 1u:
          uint64_t v10 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v10;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
          char v9 = 1;
          break;
        case 2u:
          uint64_t v11 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v11;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
          char v9 = 2;
          break;
        case 3u:
          uint64_t v12 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v12;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
          char v9 = 3;
          break;
        default:
          char v9 = 0;
          *(unsigned char *)a1 = *(unsigned char *)a2;
          break;
      }
      char v7 = 0;
      *(unsigned char *)(a1 + 40) = v9;
    }
    *(unsigned char *)(a1 + 41) = v7;
  }
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent.Mode(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 4) {
        unsigned int v5 = *(_DWORD *)a1 + 4;
      }
      if (v5) {
        sub_1000233E4(a1);
      }
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 3) {
      unsigned int v6 = *(_DWORD *)a2 + 3;
    }
    if (v6 == 2)
    {
      *(void *)a1 = *(void *)a2;
      char v7 = 2;
    }
    else if (v6 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v7 = 1;
    }
    else
    {
      unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
      if (v8 >= 4) {
        unsigned int v8 = *(_DWORD *)a2 + 4;
      }
      switch(v8)
      {
        case 1u:
          long long v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v10;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          char v9 = 1;
          break;
        case 2u:
          long long v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v11;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          char v9 = 2;
          break;
        case 3u:
          long long v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v12;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          char v9 = 3;
          break;
        default:
          char v9 = 0;
          *(unsigned char *)a1 = *(unsigned char *)a2;
          break;
      }
      char v7 = 0;
      *(unsigned char *)(a1 + 40) = v9;
    }
    *(unsigned char *)(a1 + 41) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.Mode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10005AD68(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_10005AD84(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.Mode()
{
  return &type metadata for AnalyticsEvent.Mode;
}

unint64_t sub_10005ADC0()
{
  unint64_t result = qword_1003ECAB0;
  if (!qword_1003ECAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECAB0);
  }
  return result;
}

void sub_10005AE1C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for MotionActivityState();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocationType();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100044014(&qword_1003ECAB8);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  __chkstk_darwin(v14 - 8);
  [a1 latitude];
  [a1 longitude];
  [a1 horizontalAccuracy];
  [a1 verticalAccuracy];
  [a1 speed];
  [a1 altitude];
  id v15 = [a1 floor];
  if (v15)
  {
    uint64_t v16 = v15;
    id v25 = [v15 integerValue];
  }
  else
  {
    id v25 = 0;
  }
  id v17 = [a1 timestamp:v25, v26];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = type metadata accessor for PlaceMark();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  uint64_t v19 = (uint64_t)[a1 publishReason];
  if (v19 <= 7)
  {
    if (v19 == 7)
    {
      uint64_t v20 = (unsigned int *)&enum case for LocationType.live(_:);
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v20 = (unsigned int *)&enum case for LocationType.proactiveOrShallow(_:);
    goto LABEL_12;
  }
  if (v19 != 8)
  {
    if (v19 == 100)
    {
      uint64_t v20 = (unsigned int *)&enum case for LocationType.legacy(_:);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v20 = (unsigned int *)&enum case for LocationType.satellite(_:);
LABEL_12:
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *v20, v7);
  uint64_t v21 = (char *)[a1 motionActivityState];
  if ((unint64_t)(v21 - 1) > 4) {
    char v22 = (unsigned int *)&enum case for MotionActivityState.unknown(_:);
  }
  else {
    char v22 = (unsigned int *)*(&off_1003DDC88 + (void)(v21 - 1));
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *v22, v3);
  id v23 = [a1 locationLabel];
  if (v23)
  {
    char v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  Location.init(latitude:longitude:horizontalAccuracy:verticalAccuracy:speed:altitude:floor:timestamp:placemark:locationType:motionActivityState:customLabel:)();
}

uint64_t sub_10005B260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v38 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v10 = (char *)v36 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v36 - v11;
  unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v37 = a1;
  v13((char *)v36 - v11, a1, v4);
  static Fence.DaysOfWeek.sunday.getter();
  sub_10005D2F0(&qword_1003ECAC0);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  if (a1)
  {
    v14(v12, v4);
    uint64_t v15 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v15 + 16))
    {
      uint64_t v16 = *(void *)(v15 + 32);
LABEL_22:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v16;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v36[1] = a2;
  static Fence.DaysOfWeek.monday.getter();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  if (v17)
  {
    v14(v12, v4);
    uint64_t v18 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v18 + 16) >= 2uLL)
    {
      uint64_t v16 = *(void *)(v18 + 48);
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  static Fence.DaysOfWeek.tuesday.getter();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  if (v19)
  {
    v14(v12, v4);
    uint64_t v20 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v20 + 16) >= 3uLL)
    {
      uint64_t v16 = *(void *)(v20 + 64);
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  static Fence.DaysOfWeek.wednesday.getter();
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  if (v21)
  {
    v14(v12, v4);
    uint64_t v22 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v22 + 16) >= 4uLL)
    {
      uint64_t v16 = *(void *)(v22 + 80);
      goto LABEL_22;
    }
    goto LABEL_32;
  }
  static Fence.DaysOfWeek.thursday.getter();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  if (v23)
  {
    v14(v12, v4);
    uint64_t v24 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v24 + 16) >= 5uLL)
    {
      uint64_t v16 = *(void *)(v24 + 96);
      goto LABEL_22;
    }
    goto LABEL_33;
  }
  static Fence.DaysOfWeek.friday.getter();
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  if (v25)
  {
    v14(v12, v4);
    uint64_t v26 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v26 + 16) >= 6uLL)
    {
      uint64_t v16 = *(void *)(v26 + 112);
      goto LABEL_22;
    }
    goto LABEL_34;
  }
  static Fence.DaysOfWeek.saturday.getter();
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v14(v10, v4);
  v14(v12, v4);
  if (v27)
  {
    uint64_t v28 = Calendar.weekdaySymbols.getter();
    if (*(void *)(v28 + 16) >= 7uLL)
    {
      uint64_t v16 = *(void *)(v28 + 128);
      goto LABEL_22;
    }
    goto LABEL_35;
  }
  if (qword_1003EC060 != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v30 = type metadata accessor for Logger();
  sub_100044058(v30, (uint64_t)qword_10040B770);
  NSNumber v31 = v38;
  v13(v38, v37, v4);
  char v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v39 = sub_100037004(0xD00000000000002BLL, 0x8000000100373560, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 258;
    char v35 = Fence.DaysOfWeek.rawValue.getter();
    v14(v31, v4);
    LOBYTE(v39) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s called with unrecognized weekday %{public}hhu", (uint8_t *)v34, 0xFu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v14(v31, v4);
  }

  return 0;
}

void *sub_10005B8B0()
{
  uint64_t v0 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Calendar.firstWeekday.getter();
  if (__OFADD__(v4, 6))
  {
    __break(1u);
    JUMPOUT(0x10005BADCLL);
  }
  uint64_t v5 = (v4 + 6) % 7;
  uint64_t v12 = &_swiftEmptyArrayStorage;
  sub_100245D68(0, 7, 0);
  uint64_t v6 = 0;
  uint64_t v7 = v12;
  do
  {
    switch((v5 + v6) % 7)
    {
      case 0:
        static Fence.DaysOfWeek.sunday.getter();
        break;
      case 1:
        static Fence.DaysOfWeek.monday.getter();
        break;
      case 2:
        static Fence.DaysOfWeek.tuesday.getter();
        break;
      case 3:
        static Fence.DaysOfWeek.wednesday.getter();
        break;
      case 4:
        static Fence.DaysOfWeek.thursday.getter();
        break;
      case 5:
        static Fence.DaysOfWeek.friday.getter();
        break;
      default:
        static Fence.DaysOfWeek.saturday.getter();
        break;
    }
    uint64_t v12 = v7;
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    if (v9 >= v8 >> 1)
    {
      sub_100245D68(v8 > 1, v9 + 1, 1);
      uint64_t v7 = v12;
    }
    ++v6;
    v7[2] = v9 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v9, v3, v0);
  }
  while (v6 != 7);
  return v7;
}

void *sub_10005BAF4()
{
  uint64_t v0 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v34 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100044014(&qword_1003ECAD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ECAD8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  unint64_t result = sub_10005B8B0();
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v31 = v1;
  char v32 = result;
  unint64_t v15 = result[2];
  uint64_t v29 = v1 + 16;
  uint64_t v37 = (unint64_t *)v9;
  char v38 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  char v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  char v36 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  os_log_type_t v33 = (uint64_t (**)(char *, uint64_t))(v1 + 8);
  int v16 = 1;
  while (2)
  {
    while (2)
    {
      int v28 = v16;
      uint64_t v27 = v13;
      do
      {
        if (v14 == v15)
        {
          uint64_t v17 = 1;
          unint64_t v14 = v15;
          uint64_t v18 = v37;
        }
        else
        {
          uint64_t v18 = v37;
          if (v14 >= v32[2])
          {
            __break(1u);
            goto LABEL_14;
          }
          uint64_t v19 = v31;
          uint64_t v20 = &v30[*(int *)(v3 + 48)];
          (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v20, (unint64_t)v32+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v14, v0);
          char v21 = (char *)v18 + *(int *)(v3 + 48);
          *uint64_t v18 = v14;
          (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v20, v0);
          uint64_t v17 = 0;
          ++v14;
        }
        (*v36)(v18, v17, 1, v3);
        sub_10005D3BC((uint64_t)v18, (uint64_t)v11);
        int v22 = (*v35)(v11, 1, v3);
        if (v22 == 1) {
          goto LABEL_12;
        }
        uint64_t v13 = *(void *)v11;
        unint64_t v23 = v15;
        uint64_t v24 = v34;
        (*v38)(v34, &v11[*(int *)(v3 + 48)], v0);
        sub_10005D2F0((unint64_t *)&unk_1003EE850);
        char v25 = dispatch thunk of SetAlgebra.isSuperset(of:)();
        uint64_t v26 = v24;
        unint64_t v15 = v23;
        unint64_t result = (void *)(*v33)(v26, v0);
      }
      while ((v25 & 1) == 0);
      int v16 = 0;
      if (v28) {
        continue;
      }
      break;
    }
    if (!__OFADD__(v27, 1))
    {
      int v16 = 0;
      if (v13 == v27 + 1) {
        continue;
      }
LABEL_12:
      swift_bridgeObjectRelease();
      return (void *)(v22 == 1);
    }
    break;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10005BEAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v21 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = sub_10005B8B0();
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t result = v29(v11, v1, v2);
  uint64_t v30 = &_swiftEmptyArrayStorage;
  uint64_t v28 = v12[2];
  if (v28)
  {
    unint64_t v14 = 0;
    int v22 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v23 = v3 + 16;
    uint64_t v26 = v3;
    uint64_t v27 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v24 = v11;
    char v25 = v6;
    while (v14 < v12[2])
    {
      unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v16 = *(void *)(v3 + 72);
      v29(v9, (uint64_t)v12 + v15 + v16 * v14, v2);
      sub_10005D2F0((unint64_t *)&unk_1003EE850);
      if (dispatch thunk of SetAlgebra.isSuperset(of:)())
      {
        uint64_t v17 = *v27;
        (*v27)(v6, v9, v2);
        uint64_t v18 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100245D68(0, v18[2] + 1, 1);
          uint64_t v18 = v30;
        }
        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_100245D68(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v30;
        }
        v18[2] = v20 + 1;
        uint64_t v6 = v25;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v17)((char *)v18 + v15 + v20 * v16, v25, v2);
        uint64_t v30 = v18;
        uint64_t v3 = v26;
        uint64_t v11 = v24;
      }
      else
      {
        uint64_t result = (*v22)(v9, v2);
      }
      if (v28 == ++v14) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    swift_bridgeObjectRelease();
    return (uint64_t)v30;
  }
  return result;
}

uint64_t sub_10005C18C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v126 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v4 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  char v125 = &v122[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Fence.DaysOfWeek();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v124 = &v122[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v11 = &v122[-v10];
  sub_10005D2F0((unint64_t *)&unk_1003EE850);
  dispatch thunk of SetAlgebra.init()();
  sub_10005D2F0(&qword_1003ECAC0);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v13(v11, v6);
  if ((v12 & 1) == 0)
  {
    static Fence.DaysOfWeek.all.getter();
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13(v11, v6);
    if (v19)
    {
      uint64_t v21 = v125;
      uint64_t v20 = v126;
      (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
      uint64_t v18 = static LocalizationUtility.localizedString(key:table:)();
      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v21, v20);
      return v18;
    }
    unsigned int v123 = sub_10005BAF4();
    uint64_t v22 = sub_10005BEAC();
    __chkstk_darwin(v22);
    *(void *)&v122[-16] = a1;
    uint64_t v23 = sub_100149658((void (*)(void *__return_ptr, uint64_t))sub_10005D334, (uint64_t)&v122[-32], v22);
    swift_bridgeObjectRelease();
    switch(v23[2])
    {
      case 1uLL:
        uint64_t v13 = (void (*)(unsigned char *, uint64_t))v125;
        uint64_t v24 = v126;
        (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
        static LocalizationUtility.localizedString(key:table:)();
        (*(void (**)(void, uint64_t))(v4 + 8))(v13, v24);
        sub_100044014(&qword_1003ECA98);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_100367D70;
        *(void *)(v25 + 56) = &type metadata for String;
        *(void *)(v25 + 64) = sub_10005D368();
        if (v23[2])
        {
          unint64_t v27 = v23[4];
          unint64_t v26 = v23[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v25 + 32) = v27;
          *(void *)(v25 + 40) = v26;
          goto LABEL_66;
        }
        __break(1u);
LABEL_69:
        swift_once();
LABEL_14:
        uint64_t v28 = type metadata accessor for Logger();
        sub_100044058(v28, (uint64_t)qword_10040B770);
        uint64_t v29 = v124;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v124, v2, v6);
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v30))
        {
          uint64_t v31 = v29;
          uint64_t v32 = swift_slowAlloc();
          uint64_t v128 = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 136446466;
          uint64_t v127 = sub_100037004(0xD00000000000001ALL, 0x8000000100373480, &v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v32 + 12) = 258;
          char v33 = Fence.DaysOfWeek.rawValue.getter();
          v13(v31, v6);
          LOBYTE(v127) = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v15, v30, "%{public}s called on an invalid DaysOfWeek: %{public}hhu", (uint8_t *)v32, 0xFu);
          swift_arrayDestroy();
          swift_slowDealloc();
          goto LABEL_6;
        }
        v13(v29, v6);
        goto LABEL_7;
      case 2uLL:
        uint64_t v34 = *(void (**)(unsigned char *, void, uint64_t))(v4 + 104);
        v4 += 104;
        char v36 = v125;
        uint64_t v35 = v126;
        v34(v125, enum case for LocalizationUtility.Table.default(_:), v126);
        uint64_t v37 = (void (**)(unsigned char *, uint64_t))(v4 - 96);
        if (v123)
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v37)(v36, v35);
          sub_100044014(&qword_1003ECA98);
          uint64_t v38 = swift_allocObject();
          *(_OWORD *)(v38 + 16) = xmmword_1003677A0;
          *(void *)(v38 + 56) = &type metadata for String;
          unint64_t v39 = sub_10005D368();
          *(void *)(v38 + 64) = v39;
          unint64_t v40 = v23[2];
          if (!v40)
          {
            __break(1u);
            goto LABEL_71;
          }
          unint64_t v41 = v39;
          unint64_t v42 = v23[5];
          *(void *)(v38 + 32) = v23[4];
          *(void *)(v38 + 40) = v42;
          *(void *)(v38 + 96) = &type metadata for String;
          *(void *)(v38 + 104) = v41;
          if (v40 == 1)
          {
            __break(1u);
LABEL_20:
            uint64_t v44 = v125;
            uint64_t v43 = v126;
            (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
            BOOL v45 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
            if ((v123 & 1) == 0)
            {
              static LocalizationUtility.localizedString(key:table:)();
              (*v45)(v44, v43);
              sub_100044014(&qword_1003ECA98);
              uint64_t v46 = swift_allocObject();
              *(_OWORD *)(v46 + 16) = xmmword_1003677C0;
              *(void *)(v46 + 56) = &type metadata for String;
              unint64_t v95 = sub_10005D368();
              *(void *)(v46 + 64) = v95;
              unint64_t v96 = v23[2];
              if (v96)
              {
                unint64_t v97 = v95;
                unint64_t v98 = v23[5];
                *(void *)(v46 + 32) = v23[4];
                *(void *)(v46 + 40) = v98;
                *(void *)(v46 + 96) = &type metadata for String;
                *(void *)(v46 + 104) = v97;
                if (v96 != 1)
                {
                  unint64_t v99 = v23[7];
                  *(void *)(v46 + 72) = v23[6];
                  *(void *)(v46 + 80) = v99;
                  *(void *)(v46 + 136) = &type metadata for String;
                  *(void *)(v46 + 144) = v97;
                  if (v96 >= 3)
                  {
                    unint64_t v52 = v23[8];
                    unint64_t v51 = v23[9];
                    goto LABEL_44;
                  }
                  goto LABEL_83;
                }
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
                goto LABEL_84;
              }
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
            static LocalizationUtility.localizedString(key:table:)();
            (*v45)(v44, v43);
            sub_100044014(&qword_1003ECA98);
            uint64_t v46 = swift_allocObject();
            *(_OWORD *)(v46 + 16) = xmmword_1003677C0;
            *(void *)(v46 + 56) = &type metadata for String;
            unint64_t v47 = sub_10005D368();
            *(void *)(v46 + 64) = v47;
            unint64_t v48 = v23[2];
            if (v48)
            {
              unint64_t v49 = v23[5];
              *(void *)(v46 + 32) = v23[4];
              *(void *)(v46 + 40) = v49;
              *(void *)(v46 + 96) = &type metadata for String;
              *(void *)(v46 + 104) = v47;
              if (v48 >= 3)
              {
                unint64_t v50 = v23[9];
                *(void *)(v46 + 72) = v23[8];
                *(void *)(v46 + 80) = v50;
                *(void *)(v46 + 136) = &type metadata for String;
                *(void *)(v46 + 144) = v47;
                unint64_t v52 = v23[6];
                unint64_t v51 = v23[7];
LABEL_44:
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(void *)(v46 + 112) = v52;
                *(void *)(v46 + 120) = v51;
                goto LABEL_66;
              }
              goto LABEL_72;
            }
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
        }
        else
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v37)(v36, v35);
          sub_100044014(&qword_1003ECA98);
          uint64_t v38 = swift_allocObject();
          *(_OWORD *)(v38 + 16) = xmmword_1003677A0;
          *(void *)(v38 + 56) = &type metadata for String;
          unint64_t v89 = sub_10005D368();
          *(void *)(v38 + 64) = v89;
          unint64_t v90 = v23[2];
          if (!v90)
          {
LABEL_79:
            __break(1u);
            goto LABEL_80;
          }
          unint64_t v91 = v89;
          unint64_t v92 = v23[5];
          *(void *)(v38 + 32) = v23[4];
          *(void *)(v38 + 40) = v92;
          *(void *)(v38 + 96) = &type metadata for String;
          *(void *)(v38 + 104) = v91;
          if (v90 == 1)
          {
LABEL_80:
            __break(1u);
            goto LABEL_81;
          }
        }
        unint64_t v94 = v23[6];
        unint64_t v93 = v23[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v38 + 72) = v94;
        *(void *)(v38 + 80) = v93;
LABEL_66:
        uint64_t v18 = String.init(format:arguments:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v18;
      case 3uLL:
        goto LABEL_20;
      case 4uLL:
        uint64_t v54 = v125;
        uint64_t v53 = v126;
        (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
        BOOL v55 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
        if (v123)
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v55)(v54, v53);
          sub_100044014(&qword_1003ECA98);
          uint64_t v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_100367790;
          *(void *)(v56 + 56) = &type metadata for String;
          unint64_t v57 = sub_10005D368();
          *(void *)(v56 + 64) = v57;
          unint64_t v58 = v23[2];
          if (!v58)
          {
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          unint64_t v59 = v23[5];
          *(void *)(v56 + 32) = v23[4];
          *(void *)(v56 + 40) = v59;
          *(void *)(v56 + 96) = &type metadata for String;
          *(void *)(v56 + 104) = v57;
          if (v58 < 4)
          {
LABEL_74:
            __break(1u);
            goto LABEL_75;
          }
          unint64_t v60 = v23[11];
          *(void *)(v56 + 72) = v23[10];
          *(void *)(v56 + 80) = v60;
          *(void *)(v56 + 136) = &type metadata for String;
          *(void *)(v56 + 144) = v57;
          unint64_t v61 = v23[7];
          *(void *)(v56 + 112) = v23[6];
          *(void *)(v56 + 120) = v61;
          *(void *)(v56 + 176) = &type metadata for String;
          *(void *)(v56 + 184) = v57;
          unint64_t v63 = v23[8];
          unint64_t v62 = v23[9];
        }
        else
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v55)(v54, v53);
          sub_100044014(&qword_1003ECA98);
          uint64_t v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_100367790;
          *(void *)(v56 + 56) = &type metadata for String;
          unint64_t v100 = sub_10005D368();
          *(void *)(v56 + 64) = v100;
          unint64_t v101 = v23[2];
          if (!v101)
          {
LABEL_84:
            __break(1u);
            goto LABEL_85;
          }
          unint64_t v102 = v100;
          unint64_t v103 = v23[5];
          *(void *)(v56 + 32) = v23[4];
          *(void *)(v56 + 40) = v103;
          *(void *)(v56 + 96) = &type metadata for String;
          *(void *)(v56 + 104) = v102;
          if (v101 == 1)
          {
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
          unint64_t v104 = v23[7];
          *(void *)(v56 + 72) = v23[6];
          *(void *)(v56 + 80) = v104;
          *(void *)(v56 + 136) = &type metadata for String;
          *(void *)(v56 + 144) = v102;
          if (v101 < 3)
          {
LABEL_86:
            __break(1u);
            goto LABEL_87;
          }
          unint64_t v105 = v23[9];
          *(void *)(v56 + 112) = v23[8];
          *(void *)(v56 + 120) = v105;
          *(void *)(v56 + 176) = &type metadata for String;
          *(void *)(v56 + 184) = v102;
          if (v101 == 3)
          {
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          unint64_t v63 = v23[10];
          unint64_t v62 = v23[11];
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v56 + 152) = v63;
        *(void *)(v56 + 160) = v62;
        goto LABEL_66;
      case 5uLL:
        double v65 = v125;
        uint64_t v64 = v126;
        (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
        uint64_t v66 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
        if (v123)
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v66)(v65, v64);
          sub_100044014(&qword_1003ECA98);
          uint64_t v67 = swift_allocObject();
          *(_OWORD *)(v67 + 16) = xmmword_1003677B0;
          *(void *)(v67 + 56) = &type metadata for String;
          unint64_t v68 = sub_10005D368();
          *(void *)(v67 + 64) = v68;
          unint64_t v69 = v23[2];
          if (!v69)
          {
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          unint64_t v70 = v23[5];
          *(void *)(v67 + 32) = v23[4];
          *(void *)(v67 + 40) = v70;
          *(void *)(v67 + 96) = &type metadata for String;
          *(void *)(v67 + 104) = v68;
          if (v69 < 5)
          {
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
          unint64_t v71 = v23[13];
          *(void *)(v67 + 72) = v23[12];
          *(void *)(v67 + 80) = v71;
          *(void *)(v67 + 136) = &type metadata for String;
          *(void *)(v67 + 144) = v68;
          unint64_t v72 = v23[7];
          *(void *)(v67 + 112) = v23[6];
          *(void *)(v67 + 120) = v72;
          *(void *)(v67 + 176) = &type metadata for String;
          *(void *)(v67 + 184) = v68;
          unint64_t v73 = v23[9];
          *(void *)(v67 + 152) = v23[8];
          *(void *)(v67 + 160) = v73;
          *(void *)(v67 + 216) = &type metadata for String;
          *(void *)(v67 + 224) = v68;
          unint64_t v75 = v23[10];
          unint64_t v74 = v23[11];
        }
        else
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v66)(v65, v64);
          sub_100044014(&qword_1003ECA98);
          uint64_t v67 = swift_allocObject();
          *(_OWORD *)(v67 + 16) = xmmword_1003677B0;
          *(void *)(v67 + 56) = &type metadata for String;
          unint64_t v106 = sub_10005D368();
          *(void *)(v67 + 64) = v106;
          unint64_t v107 = v23[2];
          if (!v107)
          {
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
          unint64_t v108 = v106;
          unint64_t v109 = v23[5];
          *(void *)(v67 + 32) = v23[4];
          *(void *)(v67 + 40) = v109;
          *(void *)(v67 + 96) = &type metadata for String;
          *(void *)(v67 + 104) = v108;
          if (v107 == 1)
          {
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          unint64_t v110 = v23[7];
          *(void *)(v67 + 72) = v23[6];
          *(void *)(v67 + 80) = v110;
          *(void *)(v67 + 136) = &type metadata for String;
          *(void *)(v67 + 144) = v108;
          if (v107 < 3)
          {
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
          unint64_t v111 = v23[9];
          *(void *)(v67 + 112) = v23[8];
          *(void *)(v67 + 120) = v111;
          *(void *)(v67 + 176) = &type metadata for String;
          *(void *)(v67 + 184) = v108;
          if (v107 == 3)
          {
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
          unint64_t v112 = v23[11];
          *(void *)(v67 + 152) = v23[10];
          *(void *)(v67 + 160) = v112;
          *(void *)(v67 + 216) = &type metadata for String;
          *(void *)(v67 + 224) = v108;
          if (v107 < 5)
          {
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
          unint64_t v75 = v23[12];
          unint64_t v74 = v23[13];
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v67 + 192) = v75;
        *(void *)(v67 + 200) = v74;
        goto LABEL_66;
      case 6uLL:
        uint64_t v77 = v125;
        uint64_t v76 = v126;
        (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v125, enum case for LocalizationUtility.Table.default(_:), v126);
        uint64_t v78 = (void (**)(unsigned char *, uint64_t))(v4 + 8);
        if (v123)
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v78)(v77, v76);
          sub_100044014(&qword_1003ECA98);
          uint64_t v79 = swift_allocObject();
          *(_OWORD *)(v79 + 16) = xmmword_100367F20;
          *(void *)(v79 + 56) = &type metadata for String;
          unint64_t v80 = sub_10005D368();
          *(void *)(v79 + 64) = v80;
          unint64_t v81 = v23[2];
          if (!v81)
          {
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          unint64_t v82 = v23[5];
          *(void *)(v79 + 32) = v23[4];
          *(void *)(v79 + 40) = v82;
          *(void *)(v79 + 96) = &type metadata for String;
          *(void *)(v79 + 104) = v80;
          if (v81 < 6)
          {
LABEL_78:
            __break(1u);
            goto LABEL_79;
          }
          unint64_t v83 = v23[15];
          *(void *)(v79 + 72) = v23[14];
          *(void *)(v79 + 80) = v83;
          *(void *)(v79 + 136) = &type metadata for String;
          *(void *)(v79 + 144) = v80;
          unint64_t v84 = v23[7];
          *(void *)(v79 + 112) = v23[6];
          *(void *)(v79 + 120) = v84;
          *(void *)(v79 + 176) = &type metadata for String;
          *(void *)(v79 + 184) = v80;
          unint64_t v85 = v23[9];
          *(void *)(v79 + 152) = v23[8];
          *(void *)(v79 + 160) = v85;
          *(void *)(v79 + 216) = &type metadata for String;
          *(void *)(v79 + 224) = v80;
          unint64_t v86 = v23[11];
          *(void *)(v79 + 192) = v23[10];
          *(void *)(v79 + 200) = v86;
          *(void *)(v79 + 256) = &type metadata for String;
          *(void *)(v79 + 264) = v80;
          unint64_t v88 = v23[12];
          unint64_t v87 = v23[13];
        }
        else
        {
          static LocalizationUtility.localizedString(key:table:)();
          (*v78)(v77, v76);
          sub_100044014(&qword_1003ECA98);
          uint64_t v79 = swift_allocObject();
          *(_OWORD *)(v79 + 16) = xmmword_100367F20;
          *(void *)(v79 + 56) = &type metadata for String;
          unint64_t v113 = sub_10005D368();
          *(void *)(v79 + 64) = v113;
          unint64_t v114 = v23[2];
          if (!v114)
          {
LABEL_93:
            __break(1u);
            goto LABEL_94;
          }
          unint64_t v115 = v113;
          unint64_t v116 = v23[5];
          *(void *)(v79 + 32) = v23[4];
          *(void *)(v79 + 40) = v116;
          *(void *)(v79 + 96) = &type metadata for String;
          *(void *)(v79 + 104) = v115;
          if (v114 == 1)
          {
LABEL_94:
            __break(1u);
            goto LABEL_95;
          }
          unint64_t v117 = v23[7];
          *(void *)(v79 + 72) = v23[6];
          *(void *)(v79 + 80) = v117;
          *(void *)(v79 + 136) = &type metadata for String;
          *(void *)(v79 + 144) = v115;
          if (v114 < 3)
          {
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          unint64_t v118 = v23[9];
          *(void *)(v79 + 112) = v23[8];
          *(void *)(v79 + 120) = v118;
          *(void *)(v79 + 176) = &type metadata for String;
          *(void *)(v79 + 184) = v115;
          if (v114 == 3)
          {
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          unint64_t v119 = v23[11];
          *(void *)(v79 + 152) = v23[10];
          *(void *)(v79 + 160) = v119;
          *(void *)(v79 + 216) = &type metadata for String;
          *(void *)(v79 + 224) = v115;
          if (v114 < 5)
          {
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          unint64_t v120 = v23[13];
          *(void *)(v79 + 192) = v23[12];
          *(void *)(v79 + 200) = v120;
          *(void *)(v79 + 256) = &type metadata for String;
          *(void *)(v79 + 264) = v115;
          if (v114 == 5)
          {
LABEL_98:
            __break(1u);
            JUMPOUT(0x10005D2D8);
          }
          unint64_t v88 = v23[14];
          unint64_t v87 = v23[15];
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v79 + 232) = v88;
        *(void *)(v79 + 240) = v87;
        goto LABEL_66;
      default:
        swift_bridgeObjectRelease();
        if (qword_1003EC060 == -1) {
          goto LABEL_14;
        }
        goto LABEL_69;
    }
  }
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040B770);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v128 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v127 = sub_100037004(0xD00000000000001ALL, 0x8000000100373480, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s called on an empty DaysOfWeek", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_6:
    swift_slowDealloc();
  }
LABEL_7:

  return 0;
}

uint64_t sub_10005D2F0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Fence.DaysOfWeek();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D334@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10005B260(a1, *(void *)(v2 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

unint64_t sub_10005D368()
{
  unint64_t result = qword_1003ECAC8;
  if (!qword_1003ECAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECAC8);
  }
  return result;
}

uint64_t sub_10005D3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECAD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D424()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B4A0);
  sub_100044058(v0, (uint64_t)qword_10040B4A0);
  return Logger.init(subsystem:category:)();
}

BOOL sub_10005D4A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10005D4BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10005D504()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10005D530()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10005D574()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B4B8);
  uint64_t v1 = sub_100044058(v0, (uint64_t)qword_10040B4B8);
  if (qword_1003EBF70 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100044058(v0, (uint64_t)qword_10040B4A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10005D63C()
{
  *(void *)(v1 + 1608) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 1616) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10005D6D0;
  return daemon.getter();
}

uint64_t sub_10005D6D0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1624) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1632) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10005F028(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10005F028(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10005D8AC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10005D8AC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[205] = a1;
  v3[206] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[201];
    return _swift_task_switch(sub_10005DD80, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[207] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10005DA40;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_10005DA40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1640);
  swift_task_dealloc();
  return _swift_task_switch(sub_10005DB50, v1, 0);
}

uint64_t sub_10005DB50()
{
  sub_100013B50((uint64_t)(v0 + 110), (uint64_t)(v0 + 56), &qword_1003ECCD0);
  if (sub_10005F070((uint64_t)(v0 + 56)) == 1)
  {
    uint64_t v1 = v0[201];
    uint64_t v2 = sub_10005DCF8;
  }
  else
  {
    uint64_t v3 = v0[201];
    memcpy(v0 + 2, v0 + 56, 0x1B0uLL);
    sub_10000E224((uint64_t)(v0 + 110));
    sub_100013B50((uint64_t)(v0 + 34), (uint64_t)(v0 + 182), &qword_1003ECCD8);
    uint64_t v2 = sub_10005DC30;
    uint64_t v1 = v3;
  }
  return _swift_task_switch(v2, v1, 0);
}

uint64_t sub_10005DC30()
{
  sub_100013B50(v0 + 1456, v0 + 1312, &qword_1003ECCD8);
  sub_10005F088(v0 + 1312);
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v1, v3);
}

uint64_t sub_10005DCF8()
{
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v1, v3);
}

uint64_t sub_10005DD80()
{
  swift_release();
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 1600) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ERROR: %{public}@", v4, 0xCu);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }
  swift_errorRelease();

  uint64_t v7 = *(uint64_t (**)(uint64_t, void))(v0 + 8);
  return v7(5000000000000000000, 0);
}

uint64_t sub_10005DF70()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_10005E030, v0, 0);
}

uint64_t sub_10005E030()
{
  if (static SystemInfo.underTest.getter())
  {
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_10005E104;
    return daemon.getter();
  }
}

uint64_t sub_10005E104(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 96) = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 104) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_10005F028(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10005F028(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *os_log_type_t v3 = v9;
  v3[1] = sub_10005E2E0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10005E2E0(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[7];
    uint64_t v5 = sub_10005E6B4;
  }
  else
  {
    uint64_t v6 = v3[7];
    swift_release();
    uint64_t v5 = sub_10005E408;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10005E408()
{
  uint64_t v1 = v0[7];
  v0[5] = type metadata accessor for CommandManager();
  v0[6] = sub_10005F028(&qword_1003ECCB8, (void (*)(uint64_t))type metadata accessor for CommandManager);
  v0[2] = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10005E508;
  uint64_t v3 = v0[10];
  return sub_10020A628(v3, (uint64_t)(v0 + 2));
}

uint64_t sub_10005E508()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[7];
    uint64_t v4 = sub_10005E720;
  }
  else
  {
    uint64_t v5 = (uint64_t)(v2 + 2);
    uint64_t v7 = v2[9];
    uint64_t v6 = v2[10];
    uint64_t v9 = v2 + 7;
    uint64_t v8 = v2[7];
    (*(void (**)(uint64_t, void))(v7 + 8))(v6, v9[1]);
    sub_1000233E4(v5);
    uint64_t v4 = sub_10005E648;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10005E648()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E6B4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E720()
{
  swift_release();
  sub_1000233E4(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E798()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_coleasedRefreshPriority;
  uint64_t Priority = type metadata accessor for LocatePriority();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Priority - 8) + 8))(v3, Priority);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  uint64_t refreshed = type metadata accessor for LegacyRefreshSchedule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(refreshed - 8) + 8))(v5, refreshed);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10005E8C4()
{
  return type metadata accessor for CommandManager();
}

uint64_t sub_10005E8CC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LocatePriority();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for LegacyRefreshSchedule();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_10005EA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CommandManager();
  *uint64_t v4 = v2;
  v4[1] = sub_10004A274;
  return ActorServiceProtocol.initialLaunchProcessing()(v5, a2);
}

uint64_t sub_10005EAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CommandManager();
  *uint64_t v8 = v4;
  v8[1] = sub_10004A274;
  return ActorServiceProtocol.migrate(from:to:)(a1, a2, v9, a4);
}

uint64_t sub_10005EB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CommandManager();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.firstLaunchSinceReboot()(v5, a2);
}

uint64_t sub_10005EC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = type metadata accessor for CommandManager();
  *uint64_t v4 = v2;
  v4[1] = sub_100018CD0;
  return ActorServiceProtocol.startup()(v5, a2);
}

uint64_t sub_10005ECCC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10005ECEC, v0, 0);
}

uint64_t sub_10005ECEC()
{
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CommandManager: run", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  void *v5 = v0;
  v5[1] = sub_10005EE38;
  return sub_10005DF70();
}

uint64_t sub_10005EE38()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10005EF2C()
{
  return ActorServiceProtocol.description.getter();
}

uint64_t sub_10005EF98()
{
  return sub_10005F028(&qword_1003ECC68, (void (*)(uint64_t))type metadata accessor for CommandManager);
}

uint64_t sub_10005EFE0()
{
  return sub_10005F028(qword_1003ECC70, (void (*)(uint64_t))type metadata accessor for CommandManager);
}

uint64_t sub_10005F028(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005F070(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10005F088(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for CommandManagerError()
{
  return &type metadata for CommandManagerError;
}

uint64_t getEnumTagSinglePayload for UpdateFenceRequestContent.Address.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13findmylocated19CommandManagerErrorV8CategoryOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005F218);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandManagerError.Category()
{
  return &type metadata for CommandManagerError.Category;
}

unint64_t sub_10005F254()
{
  unint64_t result = qword_1003ECCE0;
  if (!qword_1003ECCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003ECCE0);
  }
  return result;
}

uint64_t sub_10005F2A8(uint64_t a1, uint64_t a2)
{
  v3[560] = v2;
  v3[559] = a2;
  v3[558] = a1;
  uint64_t v4 = type metadata accessor for ClientOrigin();
  v3[561] = v4;
  v3[562] = *(void *)(v4 - 8);
  v3[563] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v3[564] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Fence();
  v3[565] = v5;
  v3[566] = *(void *)(v5 - 8);
  v3[567] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URLComponents();
  v3[568] = v6;
  v3[569] = *(void *)(v6 - 8);
  v3[570] = swift_task_alloc();
  v3[571] = type metadata accessor for UpdateFenceEndpoint();
  v3[572] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[573] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v3[574] = v7;
  v3[575] = *(void *)(v7 - 8);
  v3[576] = swift_task_alloc();
  v3[577] = swift_task_alloc();
  v3[578] = swift_task_alloc();
  int v8 = (void *)swift_task_alloc();
  v3[579] = v8;
  *int v8 = v3;
  v8[1] = sub_10005F55C;
  return daemon.getter();
}

uint64_t sub_10005F55C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[580] = a1;
  swift_task_dealloc();
  int v3 = (void *)swift_task_alloc();
  v2[581] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[582] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100046F64(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[583] = v6;
  uint64_t v7 = sub_100046F64(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *int v3 = v9;
  v3[1] = sub_10005F73C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10005F73C(uint64_t a1)
{
  int v3 = (void *)*v2;
  v3[584] = a1;
  v3[585] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[560];
    return _swift_task_switch(sub_1000615D0, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[586] = v5;
    void *v5 = v3;
    v5[1] = sub_10005F8B4;
    return daemon.getter();
  }
}

uint64_t sub_10005F8B4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 4696) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 4704) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100046F64(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  void *v5 = v4;
  v5[1] = sub_10005FA68;
  uint64_t v8 = *(void *)(v2 + 4664);
  uint64_t v9 = *(void *)(v2 + 4656);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10005FA68(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 4480);
  *(void *)(v3 + 4712) = a1;
  *(void *)(v3 + 4720) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000616BC;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10005FBAC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10005FBAC()
{
  uint64_t v1 = v0[566];
  uint64_t v2 = v0[565];
  uint64_t v3 = v0[559];
  uint64_t v4 = v0[558];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[591] = v5;
  v0[592] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v4, v3, v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[593] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10005FC74;
  uint64_t v7 = v0[573];
  return sub_1000078BC(v7);
}

uint64_t sub_10005FC74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 4480);
  swift_task_dealloc();
  return _swift_task_switch(sub_10005FD84, v1, 0);
}

uint64_t sub_10005FD84()
{
  uint64_t v1 = v0[575];
  uint64_t v2 = v0[574];
  uint64_t v3 = v0[573];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = v0[566];
    uint64_t v5 = v0[565];
    uint64_t v6 = v0[558];
    sub_10000A520(v3, &qword_1003ECCF0);
    uint64_t v7 = type metadata accessor for GenericError();
    sub_100046F64((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    *uint64_t v8 = 0xD00000000000002DLL;
    v8[1] = 0x8000000100373650;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for GenericError.error(_:), v7);
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[578], v3, v2);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[594] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100060030;
    return sub_100005710();
  }
}

uint64_t sub_100060030(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 4480);
  *(void *)(*(void *)v1 + 4760) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100060148, v2, 0);
}

uint64_t sub_100060148()
{
  uint64_t v19 = v0[595];
  unint64_t v26 = (void (*)(uint64_t, uint64_t, uint64_t))v0[591];
  uint64_t v14 = v0[578];
  uint64_t v1 = v0[577];
  uint64_t v2 = v0[575];
  uint64_t v3 = v0[574];
  uint64_t v4 = v0[570];
  uint64_t v5 = v0[569];
  uint64_t v16 = v0[568];
  uint64_t v17 = v0[572];
  uint64_t v20 = v0[567];
  uint64_t v21 = v0[565];
  uint64_t v22 = v0[576];
  uint64_t v23 = v0[562];
  uint64_t v24 = v0[563];
  uint64_t v25 = v0[561];
  uint64_t v15 = v0[559];
  uint64_t v18 = *(void (**)(uint64_t))(v2 + 16);
  v18(v1);
  sub_100061F60();
  uint64_t v6 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v7._countAndFlagsBits = 0x476574616470752FLL;
  v7._object = (void *)0xEF65636E65466F65;
  String.append(_:)(v7);
  v6(v0 + 552, 0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[596] = (uint64_t)v8;
  v0[597] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v17, v4, v16);
  sub_100163710(v19, v0 + 526);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v22, v14, v3);
  v26(v20, v15, v21);
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, enum case for ClientOrigin.other(_:), v25);
  RequestOrigin.init(_:)();
  unint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, uint64_t))((char *)&dword_1003ED108 + dword_1003ED108);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[598] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000603E0;
  uint64_t v10 = v0[576];
  uint64_t v11 = v0[567];
  uint64_t v12 = v0[564];
  return v27(v10, v11, v0 + 526, v12);
}

uint64_t sub_1000603E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[599] = a1;
  v6[600] = a2;
  v6[601] = a3;
  v6[602] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[560];
  if (v3) {
    uint64_t v8 = sub_100060864;
  }
  else {
    uint64_t v8 = sub_100060520;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100060520()
{
  unint64_t v1 = v0[601];
  uint64_t v2 = v0[600];
  uint64_t v3 = v0[599];
  uint64_t v4 = v0[572];
  v0[545] = v0[571];
  v0[546] = sub_100046F64(&qword_1003ECD08, (void (*)(uint64_t))type metadata accessor for UpdateFenceEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 542);
  sub_100062138(v4, (uint64_t)v5);
  v0[540] = &type metadata for UpdateFenceRequest;
  v0[541] = sub_10006219C();
  v0[537] = v3;
  v0[538] = v2;
  v0[539] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[550] = type metadata accessor for BasicCredential();
  v0[551] = &protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 547);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[603] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000606F0;
  return sub_100103CA0((uint64_t)(v0 + 367), (uint64_t)(v0 + 542), (uint64_t)(v0 + 537), (uint64_t)(v0 + 547));
}

uint64_t sub_1000606F0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 4376;
  *(void *)(*v1 + 4832) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 4480);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_1000617B4;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 4336;
    uint64_t v8 = v2 + 4296;
    uint64_t v9 = *(void *)(v2 + 4480);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v8);
    sub_1000233E4(v7);
    uint64_t v5 = sub_1000609A8;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100060864()
{
  unint64_t v1 = (void (*)(uint64_t, uint64_t))v0[596];
  uint64_t v2 = v0[578];
  uint64_t v3 = v0[574];
  uint64_t v4 = v0[572];
  uint64_t v5 = v0[566];
  uint64_t v6 = v0[565];
  uint64_t v7 = v0[558];
  swift_release();
  swift_release();
  sub_1000620DC(v4);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000609A8()
{
  unint64_t v1 = v0 + 128;
  uint64_t v2 = *((char *)v0 + 3168);
  if (v2 != 1)
  {
    uint64_t v8 = type metadata accessor for GenericError();
    sub_100046F64((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v10 = v9;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    sub_1000367D8(v0 + 367);
    uint64_t v11 = 0;
    if (v2 != 21) {
      uint64_t v11 = qword_100368118[v2];
    }
    unint64_t v113 = v0[601];
    BOOL v12 = v2 == 21;
    uint64_t v110 = v0[600];
    uint64_t v127 = (void (*)(uint64_t, uint64_t))v0[596];
    uint64_t v116 = v0[574];
    uint64_t v119 = v0[578];
    uint64_t v13 = v0[572];
    uint64_t v14 = v0[566];
    uint64_t v122 = v0[558];
    uint64_t v125 = v0[565];
    v0[556] = v11;
    *((unsigned char *)v0 + 4456) = v12;
    sub_100044014(&qword_1003ECD20);
    v15._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    *uint64_t v10 = 0xD00000000000001FLL;
    v10[1] = 0x8000000100373680;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, enum case for GenericError.error(_:), v8);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v110, v113);
    sub_1000620DC(v13);
    v127(v119, v116);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v122, v125);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    goto LABEL_26;
  }
  uint64_t v3 = sub_1000B5330();
  sub_1000367D8(v0 + 367);
  if (!v3)
  {
LABEL_11:
    swift_release();
    swift_release();
    unint64_t v17 = v0[601];
    uint64_t v18 = v0[600];
    swift_bridgeObjectRelease();
    uint64_t v19 = v18;
    unint64_t v20 = v17;
    goto LABEL_25;
  }
  uint64_t v4 = v3[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v5 = v0 + 2;
  uint64_t v6 = v0 + 294;
  uint64_t v7 = (uint64_t)(v0 + 497);
  memcpy(v0 + 221, v3 + 4, 0x241uLL);
  uint64_t v126 = v0[292];
  char v124 = *((unsigned char *)v0 + 2344);
  uint64_t v118 = v0[291];
  uint64_t v121 = v0[290];
  uint64_t v112 = v0[289];
  uint64_t v115 = v0[288];
  uint64_t v107 = v0[287];
  uint64_t v109 = v0[286];
  uint64_t v103 = v0[285];
  uint64_t v105 = v0[284];
  uint64_t v101 = v0[282];
  char v99 = *((unsigned char *)v0 + 2264);
  uint64_t v95 = v0[281];
  uint64_t v97 = v0[280];
  uint64_t v93 = v0[279];
  char v91 = *((unsigned char *)v0 + 2225);
  uint64_t v90 = v0[277];
  char v89 = *((unsigned char *)v0 + 2224);
  uint64_t v87 = v0[276];
  uint64_t v88 = v0[275];
  uint64_t v86 = v0[273];
  char v85 = *((unsigned char *)v0 + 2192);
  uint64_t v83 = v0[272];
  uint64_t v84 = v0[271];
  uint64_t v81 = v0[270];
  uint64_t v82 = v0[269];
  char v80 = *((unsigned char *)v0 + 2144);
  uint64_t v78 = v0[267];
  uint64_t v79 = v0[266];
  uint64_t v76 = v0[236];
  uint64_t v77 = v0[235];
  uint64_t v74 = v0[232];
  uint64_t v75 = v0[234];
  uint64_t v72 = v0[231];
  uint64_t v73 = v0[233];
  uint64_t v70 = v0[230];
  uint64_t v71 = v0[229];
  uint64_t v68 = v0[228];
  uint64_t v69 = v0[227];
  uint64_t v66 = v0[226];
  uint64_t v67 = v0[225];
  uint64_t v64 = v0[224];
  uint64_t v65 = v0[223];
  uint64_t v62 = v0[222];
  uint64_t v63 = v0[221];
  if (v4 == 1)
  {
    sub_1000621F0((uint64_t)(v0 + 221));
    swift_bridgeObjectRelease();
    sub_100062514((uint64_t)(v0 + 237), (uint64_t)(v0 + 497));
    goto LABEL_24;
  }
  __dst = v0 + 148;
  uint64_t v21 = (uint64_t)(v0 + 439);
  uint64_t v39 = (uint64_t)(v0 + 468);
  swift_bridgeObjectRetain();
  sub_1000621F0((uint64_t)(v0 + 221));
  sub_100062514((uint64_t)(v0 + 237), (uint64_t)(v0 + 439));
  uint64_t v38 = (char *)(v0 + 220);
  uint64_t v130 = v4 - 2;
  uint64_t v22 = 616;
  unint64_t v40 = v3;
  while (1)
  {
    uint64_t v128 = v22;
    memcpy(__dst, (char *)v3 + v22, 0x241uLL);
    v0[75] = v63;
    uint64_t v23 = (v124 & 1) != 0 ? 0 : v126;
    v0[76] = v62;
    v0[77] = v65;
    v0[78] = v64;
    v0[79] = v67;
    v0[80] = v66;
    v0[81] = v69;
    v0[82] = v68;
    v0[83] = v71;
    v0[84] = v70;
    v0[85] = v72;
    v0[86] = v74;
    v0[87] = v73;
    v0[88] = v75;
    v0[89] = v77;
    v0[90] = v76;
    sub_100062514(v21, (uint64_t)(v0 + 91));
    v0[120] = v79;
    v0[121] = v78;
    *((unsigned char *)v0 + 976) = v80;
    v0[123] = v82;
    v0[124] = v81;
    v0[125] = v84;
    v0[126] = v83;
    v0[127] = v86;
    *unint64_t v1 = v85 & 1;
    v0[129] = v88;
    v0[130] = v87;
    v0[131] = v90;
    v1[32] = v89 & 1;
    *((unsigned char *)v0 + 1057) = v91;
    v0[133] = v93;
    v0[134] = v97;
    v0[135] = v95;
    v0[136] = v101;
    v1[72] = v99 & 1;
    v0[138] = v105;
    v0[139] = v103;
    v0[140] = v109;
    v0[141] = v107;
    v0[142] = v115;
    v0[143] = v112;
    v0[144] = v121;
    v0[145] = v118;
    v0[146] = v126;
    v1[152] = v124 & 1;
    uint64_t v47 = v0[217];
    uint64_t v45 = v0[218];
    uint64_t v43 = v0[215];
    uint64_t v41 = v0[216];
    uint64_t v24 = v0[200];
    uint64_t v25 = v0[198];
    uint64_t v26 = v0[199];
    uint64_t v27 = v0[196];
    uint64_t v60 = v0[197];
    char v59 = *((unsigned char *)v0 + 1560);
    uint64_t v58 = v0[193];
    uint64_t v57 = v0[194];
    uint64_t v56 = v0[162];
    uint64_t v55 = v0[163];
    uint64_t v54 = v0[161];
    uint64_t v53 = v0[159];
    uint64_t v52 = v0[160];
    uint64_t v51 = v0[158];
    uint64_t v50 = v0[156];
    uint64_t v49 = v0[157];
    uint64_t v28 = v21;
    uint64_t v29 = v0[154];
    uint64_t v48 = v0[155];
    uint64_t v46 = v0[153];
    uint64_t v44 = v0[151];
    uint64_t v42 = v0[149];
    if (*v38)
    {
      if ((v23 & 0x8000000000000000) == 0) {
        goto LABEL_21;
      }
    }
    else if (v23 >= v0[219])
    {
      goto LABEL_21;
    }
    uint64_t v126 = v0[219];
    char v124 = *v38;
    uint64_t v120 = v0[213];
    uint64_t v123 = v0[214];
    uint64_t v114 = v0[211];
    uint64_t v117 = v0[212];
    uint64_t v106 = v0[208];
    uint64_t v108 = v0[209];
    uint64_t v100 = v0[202];
    uint64_t v102 = v0[206];
    char v111 = *((unsigned char *)v0 + 1680);
    uint64_t v104 = v0[207];
    char v96 = *((unsigned char *)v0 + 1640);
    uint64_t v92 = v0[204];
    uint64_t v94 = v0[203];
    char v98 = *((unsigned char *)v0 + 1641);
    char v30 = *((unsigned char *)v0 + 1608);
    uint64_t v31 = v0[152];
    uint64_t v32 = v0[150];
    uint64_t v33 = v0[148];
    sub_1000621F0((uint64_t)__dst);
    sub_10006257C((uint64_t)(v0 + 75));
    uint64_t v62 = v42;
    uint64_t v63 = v33;
    uint64_t v64 = v44;
    uint64_t v65 = v32;
    uint64_t v66 = v46;
    uint64_t v67 = v31;
    uint64_t v68 = v48;
    uint64_t v69 = v29;
    uint64_t v70 = v49;
    uint64_t v71 = v50;
    uint64_t v72 = v51;
    uint64_t v73 = v52;
    uint64_t v74 = v53;
    uint64_t v75 = v54;
    uint64_t v76 = v55;
    uint64_t v77 = v56;
    uint64_t v78 = v57;
    uint64_t v79 = v58;
    char v80 = v59;
    uint64_t v81 = v60;
    uint64_t v82 = v27;
    uint64_t v83 = v26;
    uint64_t v84 = v25;
    uint64_t v86 = v24;
    char v85 = v30;
    uint64_t v88 = v100;
    uint64_t v87 = v94;
    uint64_t v90 = v92;
    char v89 = v96;
    char v91 = v98;
    uint64_t v97 = v104;
    uint64_t v93 = v102;
    uint64_t v95 = v106;
    char v99 = v111;
    uint64_t v101 = v108;
    uint64_t v103 = v117;
    uint64_t v109 = v120;
    uint64_t v105 = v114;
    uint64_t v107 = v123;
    uint64_t v115 = v43;
    uint64_t v112 = v41;
    uint64_t v121 = v47;
    uint64_t v118 = v45;
    uint64_t v28 = (uint64_t)(v0 + 164);
LABEL_21:
    sub_100062514(v28, v39);
    if (!v130) {
      break;
    }
    uint64_t v21 = (uint64_t)(v0 + 439);
    sub_100062514(v39, (uint64_t)(v0 + 439));
    --v130;
    uint64_t v22 = v128 + 584;
    uint64_t v3 = v40;
    unint64_t v1 = v0 + 128;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v7 = (uint64_t)(v0 + 497);
  sub_100062514(v39, (uint64_t)(v0 + 497));
  unint64_t v1 = v0 + 128;
  uint64_t v5 = v0 + 2;
  uint64_t v6 = v0 + 294;
LABEL_24:
  uint64_t v129 = v0[600];
  unint64_t v131 = v0[601];
  v0[294] = v63;
  v0[295] = v62;
  v0[296] = v65;
  v0[297] = v64;
  v0[298] = v67;
  v0[299] = v66;
  v0[300] = v69;
  v0[301] = v68;
  v0[302] = v71;
  v0[303] = v70;
  v0[304] = v72;
  v0[305] = v74;
  v0[306] = v73;
  v0[307] = v75;
  v0[308] = v77;
  v0[309] = v76;
  sub_100062514(v7, (uint64_t)(v0 + 310));
  v0[339] = v79;
  v0[340] = v78;
  *((unsigned char *)v0 + 2728) = v80;
  v0[342] = v82;
  v0[343] = v81;
  v0[344] = v84;
  v0[345] = v83;
  v0[346] = v86;
  v1[1752] = v85 & 1;
  v0[348] = v88;
  v0[349] = v87;
  v0[350] = v90;
  v1[1784] = v89 & 1;
  *((unsigned char *)v0 + 2809) = v91;
  v0[352] = v93;
  v0[353] = v97;
  v0[354] = v95;
  v0[355] = v101;
  v1[1824] = v99 & 1;
  v0[357] = v105;
  v0[358] = v103;
  v0[359] = v109;
  v0[360] = v107;
  v0[361] = v115;
  v0[362] = v112;
  v0[363] = v121;
  v0[364] = v118;
  v0[365] = v126;
  v1[1904] = v124 & 1;
  memcpy(v5, v6, 0x241uLL);
  sub_10006194C((uint64_t *)v5);
  swift_release();
  swift_release();
  sub_10006257C((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v19 = v129;
  unint64_t v20 = v131;
LABEL_25:
  sub_1000440E8(v19, v20);
  uint64_t v34 = (void (*)(uint64_t, uint64_t))v0[596];
  uint64_t v35 = v0[578];
  uint64_t v36 = v0[574];
  sub_1000620DC(v0[572]);
  v34(v35, v36);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
LABEL_26:
  return v16();
}

uint64_t sub_1000615D0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000616BC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000617B4()
{
  unint64_t v1 = v0[601];
  uint64_t v2 = v0[600];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[596];
  uint64_t v3 = v0[578];
  uint64_t v4 = v0[574];
  uint64_t v5 = v0[572];
  uint64_t v6 = v0[566];
  uint64_t v10 = v0[565];
  uint64_t v7 = v0[558];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_1000620DC(v5);
  v11(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v10);
  sub_1000233E4((uint64_t)(v0 + 537));
  sub_1000233E4((uint64_t)(v0 + 542));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10006194C(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for PlaceMark();
  __chkstk_darwin(v2 - 8);
  uint64_t v44 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100044014(&qword_1003ECD30);
  __chkstk_darwin(v4 - 8);
  uint64_t v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Fence.AcceptanceStatus();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = sub_100044014(&qword_1003ECD38);
  __chkstk_darwin(v13 - 8);
  Swift::String v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Fence.ID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v36 - v21;
  uint64_t v43 = a1;
  swift_bridgeObjectRetain();
  Fence.ID.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000A520((uint64_t)v15, &qword_1003ECD38);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    Fence.id.getter();
    Fence.ID.uuid.getter();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v17 + 8);
    v36(v20, v16);
    static UUID.nilUUID.getter();
    char v23 = static UUID.== infix(_:_:)();
    uint64_t v24 = v38;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v37 + 8);
    v25(v10, v38);
    v25(v12, v24);
    if (v23) {
      Fence.update(id:)();
    }
    v36(v22, v16);
  }
  uint64_t v26 = (uint64_t)v41;
  uint64_t v27 = v43;
  unint64_t v28 = v43[49];
  if (v28)
  {
    uint64_t v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v29 = v43[48] & 0xFFFFFFFFFFFFLL;
    }
    if (v29)
    {
      swift_bridgeObjectRetain();
      Fence.label.setter();
    }
  }
  uint64_t v31 = *v27;
  uint64_t v30 = v27[1];
  swift_bridgeObjectRetain();
  sub_1001646A0(v31, v30, v26);
  uint64_t v32 = v40;
  uint64_t v33 = v42;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v26, 1, v42) == 1)
  {
    sub_10000A520(v26, &qword_1003ECD30);
  }
  else
  {
    uint64_t v34 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v39, v26, v33);
    Fence.update(acceptanceStatus:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v33);
  }
  sub_100062514((uint64_t)(v27 + 16), (uint64_t)v46);
  sub_100062514((uint64_t)v46, (uint64_t)v47);
  if (sub_10006289C((uint64_t)v47) != 1)
  {
    uint64_t v43 = (uint64_t *)v47[9];
    sub_100062514((uint64_t)v46, (uint64_t)v45);
    uint64_t v41 = (char *)v45[2];
    uint64_t v42 = v45[0];
    uint64_t v40 = v45[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  PlaceMark.init(locality:administrativeArea:country:stateCode:streetAddress:streetName:formattedAddressLines:formattedAddressLinesWithoutCountry:coarseAddress:poiAddress:smallAddress:mediumAddress:largeAddress:)();
  return Fence.placemark.setter();
}

uint64_t sub_100061F60()
{
  URLComponents.init()();
  URLComponents.scheme.setter();
  Account.appHostName.getter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v11 = 47;
  unint64_t v12 = 0xE100000000000000;
  v0._countAndFlagsBits = Account.dsid.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  uint64_t v1 = v11;
  uint64_t v2 = (void *)v12;
  uint64_t v3 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v3(&v11, 0);
  uint64_t v11 = 47;
  unint64_t v12 = 0xE100000000000000;
  v5._countAndFlagsBits = static SystemInfo.uniqueDeviceID.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v11;
  uint64_t v7 = (void *)v12;
  uint64_t v8 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v8(&v11, 0);
}

uint64_t sub_1000620DC(uint64_t a1)
{
  uint64_t updated = type metadata accessor for UpdateFenceEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_100062138(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for UpdateFenceEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

unint64_t sub_10006219C()
{
  unint64_t result = qword_1003ECD10;
  if (!qword_1003ECD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD10);
  }
  return result;
}

uint64_t sub_1000621F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000623F8(v4, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000623F8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100062514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECD28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006257C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100062780(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100062780(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006289C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000628C0(uint64_t a1, uint64_t a2)
{
  v3[100] = v2;
  v3[99] = a2;
  v3[98] = a1;
  uint64_t v4 = type metadata accessor for FriendshipRequestStatus();
  v3[101] = v4;
  v3[102] = *(void *)(v4 - 8);
  v3[103] = swift_task_alloc();
  v3[104] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Handle();
  v3[105] = v5;
  v3[106] = *(void *)(v5 - 8);
  v3[107] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FriendshipRequestResult();
  v3[108] = v6;
  v3[109] = *(void *)(v6 - 8);
  v3[110] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  v3[111] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for FriendshipRequest();
  v3[112] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[113] = v8;
  v3[114] = *(void *)(v8 + 64);
  v3[115] = swift_task_alloc();
  v3[116] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URLComponents();
  v3[117] = v9;
  v3[118] = *(void *)(v9 - 8);
  v3[119] = swift_task_alloc();
  v3[120] = type metadata accessor for FriendshipEndpoint();
  v3[121] = swift_task_alloc();
  sub_100044014(&qword_1003ECDB8);
  v3[122] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for FriendshipRequestType();
  v3[123] = v10;
  v3[124] = *(void *)(v10 - 8);
  v3[125] = swift_task_alloc();
  v3[126] = swift_task_alloc();
  v3[127] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[128] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Account();
  v3[129] = v11;
  v3[130] = *(void *)(v11 - 8);
  v3[131] = swift_task_alloc();
  v3[132] = swift_task_alloc();
  v3[133] = swift_task_alloc();
  unint64_t v12 = (void *)swift_task_alloc();
  v3[134] = v12;
  *unint64_t v12 = v3;
  v12[1] = sub_100062D00;
  return daemon.getter();
}

uint64_t sub_100062D00(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[135] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[136] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[137] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100046FAC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[138] = v6;
  uint64_t v7 = sub_100046FAC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_100062EE0;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100062EE0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[139] = a1;
  v3[140] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[100];
    return _swift_task_switch(sub_1000650F8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[141] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100063070;
    uint64_t v7 = v3[128];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_100063070()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 800);
  swift_task_dealloc();
  return _swift_task_switch(sub_100063180, v1, 0);
}

uint64_t sub_100063180()
{
  uint64_t v1 = v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = v0[128];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B4B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to send friendship offer!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100072410();
    swift_allocError();
    *uint64_t v8 = 1;
    swift_willThrow();
    swift_release();
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  uint64_t v9 = v0[124];
  uint64_t v10 = v0[123];
  uint64_t v11 = v0[122];
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[133], v3, v2);
  FriendshipRequest.requestType.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) == 1)
  {
    sub_10000A520(v0[122], &qword_1003ECDB8);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100044058(v12, (uint64_t)qword_10040B4B8);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      Swift::String v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing request Type (invite or offer)", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v16 = v0[133];
    uint64_t v17 = v0[130];
    uint64_t v18 = v0[129];

    sub_100072410();
    swift_allocError();
    *uint64_t v19 = 1;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_13;
  }
  (*(void (**)(void, void, void))(v0[124] + 32))(v0[127], v0[122], v0[123]);
  uint64_t v22 = FriendshipRequest.toHandles.getter();
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = v0[106];
    uint64_t v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    uint64_t v26 = *(void *)(v24 + 72);
    do
    {
      sub_100071E5C(v25, v0[99]);
      v25 += v26;
      --v23;
    }
    while (v23);
  }
  swift_bridgeObjectRelease();
  uint64_t v49 = v0[133];
  uint64_t v57 = v0[131];
  uint64_t v27 = v0[130];
  uint64_t v46 = v0[129];
  uint64_t v52 = v0[127];
  uint64_t v28 = v0[126];
  uint64_t v58 = v0[125];
  uint64_t v29 = v0[124];
  uint64_t v30 = v0[123];
  uint64_t v47 = v30;
  uint64_t v53 = v0[121];
  uint64_t v59 = v0[119];
  uint64_t v50 = v0[118];
  uint64_t v51 = v0[117];
  uint64_t v31 = v0[113];
  uint64_t v55 = v0[112];
  uint64_t v56 = v0[116];
  uint64_t v54 = v0[99];
  uint64_t v48 = *(void (**)(uint64_t))(v27 + 16);
  uint64_t v45 = v0[132];
  v48(v45);
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for FriendshipRequestType.offer(_:), v30);
  char v32 = static FriendshipRequestType.== infix(_:_:)();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v0[142] = v33;
  v0[143] = (v29 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v33(v28, v30);
  sub_100071040(v59);
  BOOL v34 = (v32 & 1) == 0;
  if (v32) {
    uint64_t v35 = 0x636F4C726566666FLL;
  }
  else {
    uint64_t v35 = 0x657469766E69;
  }
  if (v34) {
    uint64_t v36 = (void *)0xE600000000000000;
  }
  else {
    uint64_t v36 = (void *)0xED00006E6F697461;
  }
  uint64_t v37 = (void (*)(void *, void))URLComponents.path.modify();
  v38._countAndFlagsBits = v35;
  v38._object = v36;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v37(v0 + 89, 0);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v0[144] = v39;
  v0[145] = (v27 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v39(v45, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v53, v59, v51);
  ((void (*)(uint64_t, uint64_t, uint64_t))v48)(v57, v49, v46);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  v0[146] = v40;
  v0[147] = (v31 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v40(v56, v54, v55);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v58, v52, v47);
  uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003ED478 + dword_1003ED478);
  uint64_t v41 = (void *)swift_task_alloc();
  v0[148] = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1000638B8;
  uint64_t v42 = v0[131];
  uint64_t v43 = v0[125];
  uint64_t v44 = v0[116];
  return v60(v42, v44, v43);
}

uint64_t sub_1000638B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[149] = a1;
  v5[150] = a2;
  v5[151] = a3;
  v5[152] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[100];
    return _swift_task_switch(sub_100063D38, v6, 0);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v5[153] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_100063A30;
    return daemon.getter();
  }
}

uint64_t sub_100063A30(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1232) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1240) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100046FAC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  void *v5 = v4;
  v5[1] = sub_100063BE4;
  uint64_t v8 = *(void *)(v2 + 1104);
  uint64_t v9 = *(void *)(v2 + 1096);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100063BE4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1248) = a1;
  *(void *)(v4 + 1256) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 800);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_10006525C;
  }
  else {
    uint64_t v6 = sub_100063EF4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100063D38()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[144];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[142];
  uint64_t v3 = v0[133];
  uint64_t v4 = v0[129];
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[123];
  uint64_t v7 = v0[121];
  swift_release();
  sub_100072800(v7, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v2(v5, v6);
  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100063EF4()
{
  unint64_t v1 = v0[151];
  uint64_t v2 = v0[150];
  uint64_t v3 = v0[149];
  uint64_t v4 = v0[121];
  v0[77] = v0[120];
  v0[78] = sub_100046FAC(&qword_1003ECD50, (void (*)(uint64_t))type metadata accessor for FriendshipEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 74);
  sub_100072860(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v0[82] = (uint64_t)&type metadata for FriendshipServerRequest;
  v0[83] = sub_100072464();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = (uint64_t)&protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[158] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000640CC;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_1000640CC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 800);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_100065448;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 632;
    uint64_t v8 = v2 + 592;
    uint64_t v9 = *(void *)(v2 + 800);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v7);
    sub_1000233E4(v8);
    uint64_t v5 = sub_100064234;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100064234()
{
  uint64_t v118 = v0;
  unint64_t v1 = v0 + 2;
  if (qword_1003EBF78 != -1) {
LABEL_52:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B4B8);
  sub_100036A4C(v1);
  sub_100036A4C(v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v117[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[96] = sub_100037004(0xD00000000000001ALL, 0x8000000100373740, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    sub_100036A4C(v1);
    uint64_t v6 = sub_10003338C();
    uint64_t v7 = v1;
    unint64_t v9 = v8;
    sub_1000367D8(v7);
    v0[97] = sub_100037004(v6, v9, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v7;
    swift_bridgeObjectRelease();
    sub_1000367D8(v7);
    sub_1000367D8(v7);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CommandManager %{public}s response: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000367D8(v1);
    sub_1000367D8(v1);
  }

  uint64_t v10 = v0[24];
  if (v10 == 1)
  {
    sub_1000367D8(v1);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v117[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446210;
      v0[93] = sub_100037004(0xD00000000000001ALL, 0x8000000100373740, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "CommandManager %{public}s with invalidResponse", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v14 = v0[151];
    uint64_t v15 = v0[150];
    uint64_t v108 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v102 = v0[133];
    char v96 = (void (*)(uint64_t, uint64_t))v0[142];
    uint64_t v98 = v0[129];
    uint64_t v16 = v0[127];
    uint64_t v17 = v0[123];
    uint64_t v18 = v0[121];
    sub_1000724B8();
    swift_allocError();
    *uint64_t v19 = 5;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v15, v14);
    sub_100072800(v18, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
    v96(v16, v17);
    v108(v102, v98);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
    goto LABEL_44;
  }
  __src = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = FriendshipRequest.toHandles.getter();
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v106 = v10;
  if (!v22)
  {
LABEL_40:
    uint64_t v63 = (void (*)(uint64_t, uint64_t, uint64_t))v0[146];
    uint64_t v100 = v63;
    uint64_t v64 = v0[115];
    uint64_t v65 = v0[113];
    uint64_t v89 = v0[112];
    uint64_t v66 = v0[111];
    uint64_t v91 = v0[114];
    uint64_t v110 = v0[109];
    uint64_t v113 = v0[108];
    uint64_t v115 = v0[110];
    uint64_t v67 = v0[100];
    uint64_t v68 = v0[99];
    uint64_t v95 = v68;
    uint64_t v104 = v0[98];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v69 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v66, 1, 1, v69);
    v63(v64, v68, v89);
    uint64_t v70 = sub_100046FAC(qword_1003ECC70, (void (*)(uint64_t))type metadata accessor for CommandManager);
    unint64_t v71 = (*(unsigned __int8 *)(v65 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    uint64_t v72 = (char *)swift_allocObject();
    *((void *)v72 + 2) = v67;
    *((void *)v72 + 3) = v70;
    *((void *)v72 + 4) = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(&v72[v71], v64, v89);
    memcpy(&v72[(v91 + v71 + 7) & 0xFFFFFFFFFFFFFFF8], __src, 0x240uLL);
    swift_retain_n();
    sub_10010405C(v66, (uint64_t)&unk_1003ECDE0, (uint64_t)v72);
    swift_release();
    v100(v64, v95, v89);
    FriendshipRequestResult.init(request:result:requestIds:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v115, v104, v113);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t typea = static os_log_type_t.default.getter();
    BOOL v74 = os_log_type_enabled(v73, typea);
    uint64_t v105 = v0[150];
    unint64_t v107 = v0[151];
    uint64_t v75 = (void (*)(uint64_t, uint64_t))v0[144];
    uint64_t v116 = (void (*)(uint64_t, uint64_t))v0[142];
    uint64_t v76 = v0[133];
    uint64_t v77 = v0[129];
    uint64_t v111 = v0[123];
    uint64_t v114 = v0[127];
    uint64_t v101 = v0[121];
    uint64_t v78 = v0[110];
    uint64_t v79 = v0[109];
    uint64_t v80 = v0[108];
    if (v74)
    {
      uint64_t v90 = v0[133];
      uint64_t v81 = swift_slowAlloc();
      v117[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v81 = 136446466;
      v0[94] = sub_100037004(0xD00000000000001ALL, 0x8000000100373740, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v81 + 12) = 2080;
      sub_100046FAC(&qword_1003ECDE8, (void (*)(uint64_t))&type metadata accessor for FriendshipRequestResult);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[95] = sub_100037004(v82, v83, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      _os_log_impl((void *)&_mh_execute_header, v73, typea, "CommandManager %{public}s result: %s", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      sub_1000440E8(v105, v107);
      sub_100072800(v101, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
      v116(v114, v111);
      v75(v90, v77);
    }
    else
    {
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      swift_bridgeObjectRelease();
      sub_1000440E8(v105, v107);
      sub_100072800(v101, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
      v116(v114, v111);
      v75(v76, v77);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
LABEL_44:
    return v20();
  }
  uint64_t v23 = v0[106];
  uint64_t v24 = v0[102];
  uint64_t v25 = *(void (**)(void, unint64_t, void))(v23 + 16);
  v23 += 16;
  uint64_t v112 = v25;
  unint64_t v26 = v21 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
  uint64_t v109 = *(void *)(v23 + 56);
  unsigned int v86 = enum case for FriendshipRequestStatus.pending(_:);
  uint64_t v103 = (void (**)(uint64_t, uint64_t, uint64_t))(v24 + 104);
  unsigned int v85 = enum case for FriendshipRequestStatus.success(_:);
  unsigned int v88 = enum case for FriendshipRequestError.commandFailed(_:);
  unsigned int v94 = enum case for FriendshipRequestStatus.failure(_:);
  unsigned int type = enum case for FriendshipRequestError.invalidResponse(_:);
  unint64_t v1 = (void *)(v24 + 32);
  uint64_t v99 = v24;
  uint64_t v97 = (void (**)(uint64_t, uint64_t))(v23 - 8);
  swift_bridgeObjectRetain();
  uint64_t v27 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    v112(v0[107], v26, v0[105]);
    if (!v10) {
      goto LABEL_23;
    }
    uint64_t v30 = Handle.identifier.getter();
    if (!*(void *)(v10 + 16) || (unint64_t v32 = sub_10003B888(v30, v31), (v33 & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v38 = v0[104];
      uint64_t v39 = type metadata accessor for FriendshipRequestError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v38, type, v39);
LABEL_24:
      uint64_t v40 = v94;
      goto LABEL_25;
    }
    int v34 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v32);
    swift_bridgeObjectRelease();
    if ((v34 - 3) < 0x12 || v34 == 0)
    {
      uint64_t v36 = v0[104];
      uint64_t v37 = type metadata accessor for FriendshipRequestError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v36, v88, v37);
      goto LABEL_24;
    }
    uint64_t v40 = v34 == 1 ? v85 : v86;
LABEL_25:
    uint64_t v41 = v0[107];
    uint64_t v42 = v0[104];
    uint64_t v43 = v0[103];
    uint64_t v44 = v0[101];
    (*v103)(v42, v40, v44);
    uint64_t v45 = (void (*)(unint64_t, uint64_t, uint64_t))*v1;
    ((void (*)(uint64_t, uint64_t, uint64_t))*v1)(v43, v42, v44);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v117[0] = (uint64_t)v27;
    unint64_t v48 = sub_100025614(v41);
    uint64_t v49 = v27[2];
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    char v52 = v47;
    if (v27[3] < v51) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v47) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_100125DC4();
      uint64_t v27 = (void *)v117[0];
      if (v52)
      {
LABEL_11:
        (*(void (**)(unint64_t, void, void))(v99 + 40))(v27[7] + *(void *)(v99 + 72) * v48, v0[103], v0[101]);
        goto LABEL_12;
      }
    }
LABEL_32:
    unint64_t v56 = v0[107];
    uint64_t v57 = v0[105];
    uint64_t v58 = v0[103];
    uint64_t v59 = v0[101];
    v27[(v48 >> 6) + 8] |= 1 << v48;
    v112(v27[6] + v48 * v109, v56, v57);
    v45(v27[7] + *(void *)(v99 + 72) * v48, v58, v59);
    uint64_t v60 = v27[2];
    BOOL v61 = __OFADD__(v60, 1);
    uint64_t v62 = v60 + 1;
    if (v61) {
      goto LABEL_51;
    }
    v27[2] = v62;
LABEL_12:
    uint64_t v28 = v0[107];
    uint64_t v29 = v0[105];
    swift_bridgeObjectRelease();
    (*v97)(v28, v29);
    v26 += v109;
    --v22;
    uint64_t v10 = v106;
    if (!v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  uint64_t v53 = v0[107];
  sub_10013F284(v51, isUniquelyReferenced_nonNull_native);
  uint64_t v27 = (void *)v117[0];
  unint64_t v54 = sub_100025614(v53);
  if ((v52 & 1) == (v55 & 1))
  {
    unint64_t v48 = v54;
    if (v52) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000650F8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006525C()
{
  unint64_t v1 = v0[151];
  uint64_t v2 = v0[150];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[144];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[142];
  uint64_t v4 = v0[133];
  uint64_t v5 = v0[129];
  uint64_t v6 = v0[127];
  uint64_t v7 = v0[123];
  uint64_t v8 = v0[121];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100072800(v8, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v3(v6, v7);
  v11(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100065448()
{
  unint64_t v1 = v0[151];
  uint64_t v2 = v0[150];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[144];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[142];
  uint64_t v10 = v0[133];
  uint64_t v4 = v0[129];
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[123];
  uint64_t v7 = v0[121];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100072800(v7, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v3(v5, v6);
  v11(v10, v4);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 74));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10006565C(int a1, int a2, int a3, uint64_t a4, uint64_t a5, void *__src)
{
  v6[219] = a5;
  v6[218] = a4;
  memcpy(v6 + 2, __src, 0x240uLL);
  uint64_t v8 = type metadata accessor for Date();
  v6[220] = v8;
  v6[221] = *(void *)(v8 - 8);
  v6[222] = swift_task_alloc();
  v6[223] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v6[224] = swift_task_alloc();
  return _swift_task_switch(sub_100065774, a4, 0);
}

uint64_t sub_100065774()
{
  uint64_t v1 = v0[224];
  uint64_t v2 = v0[221];
  uint64_t v3 = v0[220];
  uint64_t v4 = FriendshipRequest.toHandles.getter();
  v0[225] = v4;
  FriendshipRequest.endDate.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    double v5 = 2592000.0;
  }
  else
  {
    uint64_t v6 = v0[223];
    uint64_t v7 = v0[222];
    uint64_t v8 = v0[221];
    uint64_t v9 = v0[220];
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 32))(v6, v0[224], v9);
    static Date.trustedNow.getter(v7);
    Date.timeIntervalSince(_:)();
    double v5 = v10;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v11(v7, v9);
    v11(v6, v9);
  }
  memcpy(v0 + 146, v0 + 2, 0x240uLL);
  nullsub_1(v0 + 146);
  sub_100013B50((uint64_t)(v0 + 146), (uint64_t)(v0 + 74), &qword_1003ECDF0);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[226] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100065924;
  return sub_100072D80(v4, (uint64_t)(v0 + 74), v5);
}

uint64_t sub_100065924()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100065A90(uint64_t a1, uint64_t a2)
{
  v3[97] = v2;
  v3[96] = a2;
  v3[95] = a1;
  uint64_t v4 = type metadata accessor for FriendshipRequest();
  v3[98] = v4;
  v3[99] = *(void *)(v4 - 8);
  v3[100] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v3[101] = swift_task_alloc();
  sub_100044014(&qword_1003ECE00);
  v3[102] = swift_task_alloc();
  v3[103] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendshipRequestStatus();
  v3[104] = v5;
  v3[105] = *(void *)(v5 - 8);
  v3[106] = swift_task_alloc();
  v3[107] = swift_task_alloc();
  v3[108] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HandleType();
  v3[109] = v6;
  v3[110] = *(void *)(v6 - 8);
  v3[111] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[112] = swift_task_alloc();
  v3[113] = swift_task_alloc();
  v3[114] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Handle();
  v3[115] = v7;
  v3[116] = *(void *)(v7 - 8);
  v3[117] = swift_task_alloc();
  v3[118] = swift_task_alloc();
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  v3[121] = swift_task_alloc();
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  v3[124] = swift_task_alloc();
  v3[125] = type metadata accessor for RespondToInviteEndpoint();
  v3[126] = swift_task_alloc();
  sub_100044014(&qword_1003ECE08);
  v3[127] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FriendshipResponseToInviteType();
  v3[128] = v8;
  v3[129] = *(void *)(v8 - 8);
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[132] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Account();
  v3[133] = v9;
  v3[134] = *(void *)(v9 - 8);
  v3[135] = swift_task_alloc();
  v3[136] = swift_task_alloc();
  v3[137] = swift_task_alloc();
  double v10 = (void *)swift_task_alloc();
  v3[138] = v10;
  *double v10 = v3;
  v10[1] = sub_100065F3C;
  return daemon.getter();
}

uint64_t sub_100065F3C(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[139] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[140] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[141] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100046FAC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[142] = v6;
  uint64_t v7 = sub_100046FAC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_10006611C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10006611C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[143] = a1;
  v3[144] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[97];
    return _swift_task_switch(sub_10006AAF8, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[145] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_1000662AC;
    uint64_t v7 = v3[132];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_1000662AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 776);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000663BC, v1, 0);
}

uint64_t sub_1000663BC()
{
  uint64_t v1 = v0[134];
  uint64_t v2 = v0[133];
  uint64_t v3 = v0[132];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B4B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to respond to invite request!", v7, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v8 = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[137], v3, v2);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[146] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100066764;
    return daemon.getter();
  }
}

uint64_t sub_100066764(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[147] = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[148] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  v2[149] = v5;
  uint64_t v6 = sub_100046FAC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  v2[150] = v6;
  *uint64_t v4 = v3;
  v4[1] = sub_100066920;
  uint64_t v7 = v2[142];
  uint64_t v8 = v2[141];
  return ActorServiceDaemon.getService<A>()(v8, v5, v7, v6);
}

uint64_t sub_100066920(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1208) = a1;
  *(void *)(v4 + 1216) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 776);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_10006ACE8;
  }
  else {
    uint64_t v6 = sub_100066A74;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100066A74()
{
  uint64_t v1 = *(void *)(v0 + 1032);
  uint64_t v2 = *(void *)(v0 + 1024);
  uint64_t v3 = *(void *)(v0 + 1016);
  FriendshipRequest.respondType.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(*(void *)(v0 + 1016), &qword_1003ECE08);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B4B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing respond Type (accept or decline or notNow)", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 1096);
    uint64_t v9 = *(void *)(v0 + 1072);
    uint64_t v10 = *(void *)(v0 + 1064);

    sub_100072410();
    swift_allocError();
    *uint64_t v11 = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_42;
  }
  uint64_t v13 = *(void *)(v0 + 1096);
  uint64_t v14 = *(void *)(v0 + 1088);
  uint64_t v15 = *(void *)(v0 + 1072);
  uint64_t v16 = *(void *)(v0 + 1064);
  uint64_t v17 = *(void *)(v0 + 1048);
  uint64_t v18 = *(void *)(v0 + 1040);
  uint64_t v19 = *(void *)(v0 + 1032);
  uint64_t v20 = *(void *)(v0 + 1024);
  uint64_t v21 = *(void *)(v0 + 1008);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v17, *(void *)(v0 + 1016), v20);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(void *)(v0 + 1224) = v22;
  *(void *)(v0 + 1232) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v22(v14, v13, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  sub_10009F860(v14, v18, v21);
  uint64_t v23 = FriendshipRequest.toHandles.getter();
  *(void *)(v0 + 1240) = v23;
  uint64_t v24 = *(void *)(v23 + 16);
  *(void *)(v0 + 1248) = v24;
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(v0 + 928);
    *(_DWORD *)(v0 + 1528) = *(_DWORD *)(v26 + 80);
    *(void *)(v0 + 1256) = *(void *)(v26 + 72);
    *(_DWORD *)(v0 + 1532) = enum case for HandleType.futureFollower(_:);
    *(_DWORD *)(v0 + 1536) = enum case for HandleType.following(_:);
    *(_DWORD *)(v0 + 1540) = enum case for FriendshipRequestError.missingServerId(_:);
    *(_DWORD *)(v0 + 1544) = enum case for FriendshipRequestStatus.failure(_:);
    *(void *)(v0 + 1264) = *(void *)(v26 + 16);
    uint64_t v27 = (char *)_swiftEmptyDictionarySingleton;
    while (1)
    {
      *(void *)(v0 + 1288) = v25;
      *(void *)(v0 + 1280) = v27;
      *(void *)(v0 + 1272) = _swiftEmptyDictionarySingleton;
      uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1264);
      uint64_t v32 = *(void *)(v0 + 992);
      uint64_t v33 = *(void *)(v0 + 920);
      unint64_t v34 = *(void *)(v0 + 1240)
          + ((*(unsigned __int8 *)(v0 + 1528) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1528))
          + *(void *)(v0 + 1256) * v25;
      *(void *)(v0 + 1296) = (*(void *)(v0 + 928) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v31(v32, v34, v33);
      uint64_t v35 = Handle.serverID.getter();
      if (!v36) {
        break;
      }
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      (*(void (**)(void, void, void))(v0 + 1264))(*(void *)(v0 + 984), *(void *)(v0 + 992), *(void *)(v0 + 920));
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 752) = v27;
      uint64_t v40 = v27;
      unint64_t v43 = sub_10003B888(v37, v38);
      uint64_t v44 = *((void *)v27 + 2);
      BOOL v45 = (v41 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45))
      {
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      char v47 = v41;
      if (*((void *)v27 + 3) >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v40 = (char *)(v0 + 752);
          sub_100125DF8();
        }
      }
      else
      {
        sub_10013F2A4(v46, isUniquelyReferenced_nonNull_native);
        uint64_t v40 = *(char **)(v0 + 752);
        unint64_t v48 = sub_10003B888(v37, v38);
        if ((v47 & 1) != (v49 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v43 = v48;
      }
      uint64_t v27 = *(char **)(v0 + 752);
      uint64_t v50 = *(void *)(v0 + 1256);
      uint64_t v51 = *(void *)(v0 + 984);
      uint64_t v52 = *(void *)(v0 + 928);
      uint64_t v53 = *(void *)(v0 + 920);
      if (v47)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 40))(*((void *)v27 + 7) + v50 * v43, v51, v53);
      }
      else
      {
        *(void *)&v27[8 * (v43 >> 6) + 64] |= 1 << v43;
        unint64_t v54 = (uint64_t *)(*((void *)v27 + 6) + 16 * v43);
        uint64_t *v54 = v37;
        v54[1] = v38;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 32))(*((void *)v27 + 7) + v50 * v43, v51, v53);
        uint64_t v55 = *((void *)v27 + 2);
        BOOL v56 = __OFADD__(v55, 1);
        uint64_t v57 = v55 + 1;
        if (v56) {
          goto LABEL_57;
        }
        *((void *)v27 + 2) = v57;
        swift_bridgeObjectRetain();
      }
      uint64_t v28 = *(void *)(v0 + 992);
      uint64_t v29 = *(void *)(v0 + 928);
      uint64_t v30 = *(void *)(v0 + 920);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      uint64_t v25 = *(void *)(v0 + 1288) + 1;
      if (v25 == *(void *)(v0 + 1248))
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = (int *)(v0 + 1544);
        goto LABEL_26;
      }
    }
    uint64_t v59 = *(unsigned int *)(v0 + 1532);
    uint64_t v60 = *(void *)(v0 + 888);
    uint64_t v61 = *(void *)(v0 + 880);
    uint64_t v62 = *(void *)(v0 + 872);
    uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 104);
    *(void *)(v0 + 1304) = v63;
    *(void *)(v0 + 1312) = (v61 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v63(v60, v59, v62);
    uint64_t v64 = (void *)swift_task_alloc();
    *(void *)(v0 + 1320) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_1000678D8;
    uint64_t v65 = *(void *)(v0 + 992);
    uint64_t v66 = *(void *)(v0 + 912);
    uint64_t v67 = *(void *)(v0 + 888);
    return sub_100110598(v66, v65, v67, 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = (char *)_swiftEmptyDictionarySingleton;
  uint64_t v58 = (int *)&enum case for FriendshipRequestStatus.failure(_:);
LABEL_26:
  int v69 = *v58;
  *(void *)(v0 + 1368) = v27;
  *(_DWORD *)(v0 + 1548) = v69;
  unint64_t v43 = *(void *)(v0 + 928);
  uint64_t v40 = *(char **)(v0 + 816);
  LOBYTE(v69) = v27[32];
  *(unsigned char *)(v0 + 1572) = v69;
  uint64_t v70 = -1;
  uint64_t v71 = -1 << v69;
  uint64_t v72 = *((void *)v27 + 8);
  if (-v71 < 64) {
    uint64_t v70 = ~(-1 << -(char)v71);
  }
  *(_DWORD *)(v0 + 1552) = enum case for FriendshipResponseToInviteType.decline(_:);
  *(_DWORD *)(v0 + 1556) = enum case for FriendshipRequestStatus.pending(_:);
  *(_DWORD *)(v0 + 1560) = enum case for FriendshipRequestStatus.success(_:);
  *(_DWORD *)(v0 + 1564) = enum case for FriendshipRequestError.commandFailed(_:);
  *(_DWORD *)(v0 + 1568) = enum case for FriendshipRequestError.invalidResponse(_:);
  *(void *)(v0 + 1376) = _swiftEmptyDictionarySingleton;
  unint64_t v73 = v70 & v72;
  if (!v73)
  {
    unint64_t v42 = 63 - v71;
    if ((unint64_t)(63 - v71) <= 0x7F)
    {
      uint64_t v74 = 0;
    }
    else
    {
      unint64_t v82 = *((void *)v27 + 9);
      if (v82)
      {
        uint64_t v74 = 1;
LABEL_34:
        uint64_t v76 = (v82 - 1) & v82;
        unint64_t v75 = __clz(__rbit64(v82)) + (v74 << 6);
        goto LABEL_30;
      }
      if (v42 < 0xC0)
      {
        uint64_t v74 = 1;
      }
      else
      {
        unint64_t v82 = *((void *)v27 + 10);
        if (v82)
        {
          uint64_t v74 = 2;
          goto LABEL_34;
        }
        if (v42 < 0x100)
        {
          uint64_t v74 = 2;
        }
        else
        {
          unint64_t v82 = *((void *)v27 + 11);
          if (v82)
          {
            uint64_t v74 = 3;
            goto LABEL_34;
          }
LABEL_58:
          if (v42 < 0x140)
          {
            uint64_t v74 = 3;
          }
          else
          {
            unint64_t v82 = *((void *)v27 + 12);
            if (v82)
            {
              uint64_t v74 = 4;
              goto LABEL_34;
            }
            uint64_t v111 = 0;
            uint64_t v112 = v42 >> 6;
            uint64_t v113 = 5;
            if (v112 > 5) {
              uint64_t v113 = v112;
            }
            uint64_t v114 = v113 - 5;
            while (v114 != v111)
            {
              unint64_t v82 = *(void *)&v27[8 * v111++ + 104];
              if (v82)
              {
                uint64_t v74 = v111 + 4;
                goto LABEL_34;
              }
            }
            uint64_t v74 = v112 - 1;
          }
        }
      }
    }
    uint64_t v83 = sub_100044014(&qword_1003ECE10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v40, 1, 1, v83);
    uint64_t v76 = 0;
    goto LABEL_40;
  }
  uint64_t v74 = 0;
  unint64_t v75 = __clz(__rbit64(v73));
  uint64_t v76 = (v73 - 1) & v73;
LABEL_30:
  uint64_t v77 = *(void *)(v0 + 920);
  uint64_t v78 = (void *)(*((void *)v27 + 6) + 16 * v75);
  uint64_t v79 = v78[1];
  *(void *)uint64_t v40 = *v78;
  *((void *)v40 + 1) = v79;
  unint64_t v80 = *((void *)v27 + 7) + *(void *)(v43 + 72) * v75;
  uint64_t v81 = sub_100044014(&qword_1003ECE10);
  (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(&v40[*(int *)(v81 + 48)], v80, v77);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v40, 0, 1, v81);
  swift_bridgeObjectRetain();
LABEL_40:
  *(void *)(v0 + 1392) = v76;
  *(void *)(v0 + 1384) = v74;
  uint64_t v84 = *(void *)(v0 + 824);
  sub_100013B50(*(void *)(v0 + 816), v84, &qword_1003ECE00);
  uint64_t v85 = sub_100044014(&qword_1003ECE10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48))(v84, 1, v85) == 1)
  {
    uint64_t v86 = *(void *)(v0 + 1096);
    uint64_t v87 = *(void *)(v0 + 1072);
    uint64_t v88 = *(void *)(v0 + 1048);
    uint64_t v89 = *(void *)(v0 + 1032);
    uint64_t v116 = *(void *)(v0 + 1024);
    uint64_t v117 = *(void *)(v0 + 1064);
    uint64_t v115 = *(void *)(v0 + 1008);
    uint64_t v90 = *(void *)(v0 + 800);
    uint64_t v91 = *(void *)(v0 + 792);
    uint64_t v92 = *(void *)(v0 + 784);
    uint64_t v93 = *(void *)(v0 + 768);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v93, v92);
    sub_100071610((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)();
    swift_release();
    swift_release();
    sub_100072800(v115, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v116);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v117);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
LABEL_42:
    return v12();
  }
  unsigned int v119 = *(_DWORD *)(v0 + 1552);
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
  uint64_t v94 = *(void *)(v0 + 1096);
  uint64_t v95 = *(void *)(v0 + 1080);
  uint64_t v96 = *(void *)(v0 + 1064);
  uint64_t v97 = *(void *)(v0 + 1040);
  uint64_t v98 = *(void *)(v0 + 1032);
  uint64_t v99 = *(void *)(v0 + 1024);
  uint64_t v100 = *(void *)(v0 + 944);
  uint64_t v101 = *(void *)(v0 + 928);
  uint64_t v102 = *(void *)(v0 + 920);
  uint64_t v103 = *(char **)(v0 + 824);
  uint64_t v121 = *(void *)v103;
  *(void *)(v0 + 1400) = *(void *)v103;
  uint64_t v104 = *((void *)v103 + 1);
  *(void *)(v0 + 1408) = v104;
  (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v100, &v103[*(int *)(v85 + 48)], v102);
  v118(v95, v94, v96);
  (*(void (**)(uint64_t, void, uint64_t))(v98 + 104))(v97, v119, v99);
  char v105 = static FriendshipResponseToInviteType.== infix(_:_:)();
  uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  *(void *)(v0 + 1416) = v106;
  *(void *)(v0 + 1424) = (v98 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v106(v97, v99);
  FriendshipRequest.callerHandle.getter();
  FriendshipRequest.origin.getter();
  uint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))((char *)&dword_1003ED888
                                                                                   + dword_1003ED888);
  swift_bridgeObjectRetain();
  unint64_t v107 = (void *)swift_task_alloc();
  *(void *)(v0 + 1432) = v107;
  *unint64_t v107 = v0;
  v107[1] = sub_100069560;
  uint64_t v108 = *(void *)(v0 + 1080);
  uint64_t v109 = *(void *)(v0 + 896);
  uint64_t v110 = *(void *)(v0 + 808);
  return v120(v108, v121, v104, (v105 & 1) == 0, v109, v110);
}

uint64_t sub_1000678D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 888);
  uint64_t v3 = *(void *)(*v0 + 880);
  uint64_t v4 = *(void *)(*v0 + 872);
  uint64_t v5 = *(void *)(*v0 + 776);
  swift_task_dealloc();
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 1328) = v6;
  *(void *)(v1 + 1336) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v4);
  return _swift_task_switch(sub_100067A5C, v5, 0);
}

uint64_t sub_100067A5C()
{
  uint64_t v1 = *(void *)(v0 + 928);
  uint64_t v2 = *(void *)(v0 + 920);
  uint64_t v3 = *(void *)(v0 + 912);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 1344) = v4;
  *(void *)(v0 + 1352) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003F3B30);
    goto LABEL_11;
  }
  uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32);
  unint64_t v5 = v1 + 32;
  os_log_type_t v6 = v7;
  v7(*(void *)(v0 + 976), v3, v2);
  uint64_t v8 = Handle.serverID.getter();
  if (!v9)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 928) + 8))(*(void *)(v0 + 976), *(void *)(v0 + 920));
LABEL_11:
    (*(void (**)(void, void, void))(v0 + 1304))(*(void *)(v0 + 888), *(unsigned int *)(v0 + 1536), *(void *)(v0 + 872));
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 1360) = v24;
    void *v24 = v0;
    v24[1] = sub_100068748;
    uint64_t v25 = *(void *)(v0 + 992);
    uint64_t v26 = *(void *)(v0 + 904);
LABEL_12:
    uint64_t v27 = *(void *)(v0 + 888);
    return sub_100110598(v26, v25, v27, 0);
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  uint64_t v12 = *(char **)(v0 + 1280);
  (*(void (**)(void, void, void))(v0 + 1264))(*(void *)(v0 + 968), *(void *)(v0 + 976), *(void *)(v0 + 920));
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 744) = v12;
  unint64_t v16 = sub_10003B888(v10, v11);
  uint64_t v17 = *((void *)v12 + 2);
  BOOL v18 = (v14 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_70:
    uint64_t v118 = 0;
    uint64_t v32 = v15 >> 6;
    uint64_t v119 = 5;
    if (v32 > 5) {
      uint64_t v119 = v32;
    }
    uint64_t v120 = v119 - 5;
    while (v120 != v118)
    {
      unint64_t v82 = *(void *)(isUniquelyReferenced_nonNull_native + 104 + 8 * v118++);
      if (v82)
      {
        uint64_t v83 = v118 + 4;
        goto LABEL_44;
      }
    }
    goto LABEL_77;
  }
  char v20 = v14;
  uint64_t v12 = (char *)(v0 + 744);
  if (*(void *)(*(void *)(v0 + 1280) + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100125DF8();
    }
  }
  else
  {
    sub_10013F2A4(v19, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = *(char **)v12;
    unint64_t v21 = sub_10003B888(v10, v11);
    if ((v20 & 1) != (v22 & 1))
    {
LABEL_7:
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v16 = v21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 744);
  uint64_t v28 = *(void *)(v0 + 1256);
  uint64_t v29 = *(void *)(v0 + 968);
  if (v20)
  {
    (*(void (**)(unint64_t, uint64_t, void))(*(void *)(v0 + 928) + 40))(*(void *)(isUniquelyReferenced_nonNull_native + 56) + v28 * v16, v29, *(void *)(v0 + 920));
  }
  else
  {
    uint64_t v30 = *(void *)(v0 + 920);
    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v31 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v16);
    *uint64_t v31 = v10;
    v31[1] = v11;
    v6(*(void *)(isUniquelyReferenced_nonNull_native + 56) + v28 * v16, v29, v30);
    uint64_t v33 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_77:
      uint64_t v55 = v32 - 1;
      goto LABEL_47;
    }
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v35;
    swift_bridgeObjectRetain();
  }
  uint64_t v36 = *(void *)(v0 + 992);
  uint64_t v37 = *(void *)(v0 + 976);
  uint64_t v38 = *(void *)(v0 + 928);
  uint64_t v39 = *(void *)(v0 + 920);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v40(v37, v39);
  v40(v36, v39);
  uint64_t v41 = *(void *)(v0 + 1272);
  uint64_t v42 = *(void *)(v0 + 1288) + 1;
  if (v42 == *(void *)(v0 + 1248))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    int v43 = *(_DWORD *)(v0 + 1544);
    *(void *)(v0 + 1368) = isUniquelyReferenced_nonNull_native;
    *(_DWORD *)(v0 + 1548) = v43;
    unint64_t v5 = *(void *)(v0 + 928);
    uint64_t v12 = *(char **)(v0 + 816);
    LOBYTE(v43) = *(unsigned char *)(isUniquelyReferenced_nonNull_native + 32);
    *(unsigned char *)(v0 + 1572) = v43;
    uint64_t v44 = -1;
    uint64_t v45 = -1 << v43;
    uint64_t v46 = *(void *)(isUniquelyReferenced_nonNull_native + 64);
    if (-v45 < 64) {
      uint64_t v44 = ~(-1 << -(char)v45);
    }
    *(_DWORD *)(v0 + 1552) = enum case for FriendshipResponseToInviteType.decline(_:);
    *(_DWORD *)(v0 + 1556) = enum case for FriendshipRequestStatus.pending(_:);
    *(_DWORD *)(v0 + 1560) = enum case for FriendshipRequestStatus.success(_:);
    *(_DWORD *)(v0 + 1564) = enum case for FriendshipRequestError.commandFailed(_:);
    *(_DWORD *)(v0 + 1568) = enum case for FriendshipRequestError.invalidResponse(_:);
    *(void *)(v0 + 1376) = v41;
    unint64_t v47 = v44 & v46;
    if (v47)
    {
      uint64_t v128 = 0;
      unint64_t v48 = __clz(__rbit64(v47));
      uint64_t v49 = (v47 - 1) & v47;
LABEL_27:
      uint64_t v50 = *(void *)(v0 + 920);
      uint64_t v51 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v48);
      uint64_t v52 = v51[1];
      *(void *)uint64_t v12 = *v51;
      *((void *)v12 + 1) = v52;
      unint64_t v53 = *(void *)(isUniquelyReferenced_nonNull_native + 56) + *(void *)(v5 + 72) * v48;
      uint64_t v54 = sub_100044014(&qword_1003ECE10);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v12[*(int *)(v54 + 48)], v53, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v12, 0, 1, v54);
      swift_bridgeObjectRetain();
      uint64_t v55 = v128;
      goto LABEL_48;
    }
    unint64_t v15 = 63 - v45;
    if ((unint64_t)(63 - v45) <= 0x7F)
    {
      uint64_t v55 = 0;
      goto LABEL_47;
    }
    unint64_t v82 = *(void *)(isUniquelyReferenced_nonNull_native + 72);
    if (v82)
    {
      uint64_t v83 = 1;
LABEL_44:
      uint64_t v49 = (v82 - 1) & v82;
      uint64_t v128 = v83;
      unint64_t v48 = __clz(__rbit64(v82)) + (v83 << 6);
      goto LABEL_27;
    }
    if (v15 < 0xC0)
    {
      uint64_t v55 = 1;
      goto LABEL_47;
    }
    unint64_t v82 = *(void *)(isUniquelyReferenced_nonNull_native + 80);
    if (v82)
    {
      uint64_t v83 = 2;
      goto LABEL_44;
    }
    if (v15 < 0x100)
    {
      uint64_t v55 = 2;
      goto LABEL_47;
    }
    unint64_t v82 = *(void *)(isUniquelyReferenced_nonNull_native + 88);
    if (v82)
    {
      uint64_t v83 = 3;
      goto LABEL_44;
    }
LABEL_64:
    if (v15 < 0x140) {
      goto LABEL_68;
    }
    unint64_t v82 = *(void *)(isUniquelyReferenced_nonNull_native + 96);
    if (v82)
    {
      uint64_t v83 = 4;
      goto LABEL_44;
    }
    goto LABEL_70;
  }
  while (1)
  {
    *(void *)(v0 + 1288) = v42;
    *(void *)(v0 + 1280) = isUniquelyReferenced_nonNull_native;
    *(void *)(v0 + 1272) = v41;
    uint64_t v59 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1264);
    uint64_t v60 = *(void *)(v0 + 992);
    uint64_t v61 = *(void *)(v0 + 920);
    unint64_t v62 = *(void *)(v0 + 1240)
        + ((*(unsigned __int8 *)(v0 + 1528) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1528))
        + *(void *)(v0 + 1256) * v42;
    *(void *)(v0 + 1296) = (*(void *)(v0 + 928) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v59(v60, v62, v61);
    uint64_t v63 = Handle.serverID.getter();
    if (!v64)
    {
      uint64_t v84 = *(unsigned int *)(v0 + 1532);
      uint64_t v85 = *(void *)(v0 + 888);
      uint64_t v86 = *(void *)(v0 + 880);
      uint64_t v87 = *(void *)(v0 + 872);
      uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 104);
      *(void *)(v0 + 1304) = v88;
      *(void *)(v0 + 1312) = (v86 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
      v88(v85, v84, v87);
      uint64_t v89 = (void *)swift_task_alloc();
      *(void *)(v0 + 1320) = v89;
      *uint64_t v89 = v0;
      v89[1] = sub_1000678D8;
      uint64_t v25 = *(void *)(v0 + 992);
      uint64_t v26 = *(void *)(v0 + 912);
      goto LABEL_12;
    }
    uint64_t v65 = v63;
    uint64_t v66 = v64;
    (*(void (**)(void, void, void))(v0 + 1264))(*(void *)(v0 + 984), *(void *)(v0 + 992), *(void *)(v0 + 920));
    int v67 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 752) = isUniquelyReferenced_nonNull_native;
    uint64_t v12 = (char *)isUniquelyReferenced_nonNull_native;
    unint64_t v5 = sub_10003B888(v65, v66);
    uint64_t v69 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    BOOL v70 = (v68 & 1) == 0;
    uint64_t v71 = v69 + v70;
    if (__OFADD__(v69, v70))
    {
      __break(1u);
      goto LABEL_64;
    }
    char v72 = v68;
    if (*(void *)(isUniquelyReferenced_nonNull_native + 24) >= v71)
    {
      if ((v67 & 1) == 0)
      {
        uint64_t v12 = (char *)(v0 + 752);
        sub_100125DF8();
      }
    }
    else
    {
      sub_10013F2A4(v71, v67);
      uint64_t v12 = *(char **)(v0 + 752);
      unint64_t v73 = sub_10003B888(v65, v66);
      if ((v72 & 1) != (v74 & 1)) {
        goto LABEL_7;
      }
      unint64_t v5 = v73;
    }
    uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 752);
    uint64_t v75 = *(void *)(v0 + 1256);
    uint64_t v76 = *(void *)(v0 + 984);
    uint64_t v77 = *(void *)(v0 + 928);
    uint64_t v78 = *(void *)(v0 + 920);
    if ((v72 & 1) == 0) {
      break;
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 40))(*(void *)(isUniquelyReferenced_nonNull_native + 56) + v75 * v5, v76, v78);
LABEL_30:
    uint64_t v56 = *(void *)(v0 + 992);
    uint64_t v57 = *(void *)(v0 + 928);
    uint64_t v58 = *(void *)(v0 + 920);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    uint64_t v42 = *(void *)(v0 + 1288) + 1;
    if (v42 == *(void *)(v0 + 1248)) {
      goto LABEL_23;
    }
  }
  *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v5 >> 6) + 64) |= 1 << v5;
  uint64_t v79 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v5);
  uint64_t *v79 = v65;
  v79[1] = v66;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 32))(*(void *)(isUniquelyReferenced_nonNull_native + 56) + v75 * v5, v76, v78);
  uint64_t v80 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
  BOOL v34 = __OFADD__(v80, 1);
  uint64_t v81 = v80 + 1;
  if (!v34)
  {
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v81;
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  __break(1u);
LABEL_68:
  uint64_t v55 = 3;
LABEL_47:
  uint64_t v90 = sub_100044014(&qword_1003ECE10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v12, 1, 1, v90);
  uint64_t v49 = 0;
LABEL_48:
  *(void *)(v0 + 1392) = v49;
  *(void *)(v0 + 1384) = v55;
  uint64_t v91 = *(void *)(v0 + 824);
  sub_100013B50(*(void *)(v0 + 816), v91, &qword_1003ECE00);
  uint64_t v92 = sub_100044014(&qword_1003ECE10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v91, 1, v92) == 1)
  {
    uint64_t v93 = *(void *)(v0 + 1096);
    uint64_t v94 = *(void *)(v0 + 1072);
    uint64_t v123 = *(void *)(v0 + 1048);
    uint64_t v124 = *(void *)(v0 + 1064);
    uint64_t v95 = *(void *)(v0 + 1032);
    uint64_t v122 = *(void *)(v0 + 1024);
    uint64_t v121 = *(void *)(v0 + 1008);
    uint64_t v96 = *(void *)(v0 + 800);
    uint64_t v97 = *(void *)(v0 + 792);
    uint64_t v98 = *(void *)(v0 + 784);
    uint64_t v99 = *(void *)(v0 + 768);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v96, v99, v98);
    sub_100071610((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)();
    swift_release();
    swift_release();
    sub_100072800(v121, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v123, v122);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v124);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
    return v100();
  }
  else
  {
    unsigned int v126 = *(_DWORD *)(v0 + 1552);
    uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
    uint64_t v101 = *(void *)(v0 + 1096);
    uint64_t v102 = *(void *)(v0 + 1080);
    uint64_t v103 = *(void *)(v0 + 1064);
    uint64_t v104 = *(void *)(v0 + 1040);
    uint64_t v105 = *(void *)(v0 + 1032);
    uint64_t v106 = *(void *)(v0 + 1024);
    uint64_t v107 = *(void *)(v0 + 944);
    uint64_t v108 = *(void *)(v0 + 928);
    uint64_t v109 = *(void *)(v0 + 920);
    uint64_t v110 = *(char **)(v0 + 824);
    uint64_t v129 = *(void *)v110;
    *(void *)(v0 + 1400) = *(void *)v110;
    uint64_t v111 = *((void *)v110 + 1);
    *(void *)(v0 + 1408) = v111;
    (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v107, &v110[*(int *)(v92 + 48)], v109);
    v125(v102, v101, v103);
    (*(void (**)(uint64_t, void, uint64_t))(v105 + 104))(v104, v126, v106);
    char v112 = static FriendshipResponseToInviteType.== infix(_:_:)();
    uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
    *(void *)(v0 + 1416) = v113;
    *(void *)(v0 + 1424) = (v105 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v113(v104, v106);
    FriendshipRequest.callerHandle.getter();
    FriendshipRequest.origin.getter();
    uint64_t v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))((char *)&dword_1003ED888
                                                                                     + dword_1003ED888);
    swift_bridgeObjectRetain();
    uint64_t v114 = (void *)swift_task_alloc();
    *(void *)(v0 + 1432) = v114;
    void *v114 = v0;
    v114[1] = sub_100069560;
    uint64_t v115 = *(void *)(v0 + 1080);
    uint64_t v116 = *(void *)(v0 + 896);
    uint64_t v117 = *(void *)(v0 + 808);
    return v127(v115, v129, v111, (v112 & 1) == 0, v116, v117);
  }
}

uint64_t sub_100068748()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1328);
  uint64_t v2 = *(void *)(*(void *)v0 + 888);
  uint64_t v3 = *(void *)(*(void *)v0 + 872);
  uint64_t v4 = *(void *)(*(void *)v0 + 776);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_1000688C4, v4, 0);
}

uint64_t sub_1000688C4()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v0 + 904);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344))(v2, 1, v1) == 1)
  {
    sub_10000A520(v2, &qword_1003F3B30);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 928) + 32))(*(void *)(v0 + 960), v2, v1);
    uint64_t v3 = Handle.serverID.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      uint64_t v7 = *(void *)(v0 + 1280);
      uint64_t v8 = *(void *)(v0 + 992);
      uint64_t v9 = *(void *)(v0 + 960);
      uint64_t v10 = *(void *)(v0 + 952);
      uint64_t v11 = *(void *)(v0 + 928);
      uint64_t v12 = *(void *)(v0 + 920);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1264))(v10, v9, v12);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100142C1C(v10, v5, v6, isUniquelyReferenced_nonNull_native);
      uint64_t v14 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v15(v9, v12);
      v15(v8, v12);
      uint64_t v16 = *(void *)(v0 + 1272);
      goto LABEL_7;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 928) + 8))(*(void *)(v0 + 960), *(void *)(v0 + 920));
  }
  uint64_t v17 = *(void *)(v0 + 1272);
  unsigned int v123 = *(_DWORD *)(v0 + 1544);
  uint64_t v18 = *(unsigned int *)(v0 + 1540);
  uint64_t v125 = *(void *)(v0 + 992);
  uint64_t v19 = *(void *)(v0 + 952);
  uint64_t v20 = *(void *)(v0 + 928);
  uint64_t v21 = *(void *)(v0 + 920);
  uint64_t v22 = *(void *)(v0 + 864);
  uint64_t v23 = *(void *)(v0 + 856);
  uint64_t v24 = *(void *)(v0 + 840);
  uint64_t v25 = *(void *)(v0 + 832);
  (*(void (**)(uint64_t))(v0 + 1264))(v19);
  uint64_t v26 = type metadata accessor for FriendshipRequestError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v22, v18, v26);
  (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v22, v123, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  sub_1001429D4(v23, v19, v27);
  uint64_t v16 = v17;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v28(v19, v21);
  v28(v125, v21);
  uint64_t v14 = *(void *)(v0 + 1280);
LABEL_7:
  uint64_t v29 = *(void *)(v0 + 1288) + 1;
  if (v29 == *(void *)(v0 + 1248))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    int v30 = *(_DWORD *)(v0 + 1544);
    *(void *)(v0 + 1368) = v14;
    *(_DWORD *)(v0 + 1548) = v30;
    unint64_t v31 = *(void *)(v0 + 928);
    uint64_t v32 = *(char **)(v0 + 816);
    LOBYTE(v30) = *(unsigned char *)(v14 + 32);
    *(unsigned char *)(v0 + 1572) = v30;
    uint64_t v33 = -1;
    uint64_t v34 = -1 << v30;
    uint64_t v35 = *(void *)(v14 + 64);
    if (-v34 < 64) {
      uint64_t v33 = ~(-1 << -(char)v34);
    }
    *(_DWORD *)(v0 + 1552) = enum case for FriendshipResponseToInviteType.decline(_:);
    *(_DWORD *)(v0 + 1556) = enum case for FriendshipRequestStatus.pending(_:);
    *(_DWORD *)(v0 + 1560) = enum case for FriendshipRequestStatus.success(_:);
    *(_DWORD *)(v0 + 1564) = enum case for FriendshipRequestError.commandFailed(_:);
    *(_DWORD *)(v0 + 1568) = enum case for FriendshipRequestError.invalidResponse(_:);
    *(void *)(v0 + 1376) = v16;
    unint64_t v36 = v33 & v35;
    if (v36)
    {
      uint64_t v126 = 0;
      unint64_t v37 = __clz(__rbit64(v36));
      uint64_t v38 = (v36 - 1) & v36;
LABEL_12:
      uint64_t v39 = *(void *)(v0 + 920);
      uint64_t v40 = (void *)(*(void *)(v14 + 48) + 16 * v37);
      uint64_t v41 = v40[1];
      *(void *)uint64_t v32 = *v40;
      *((void *)v32 + 1) = v41;
      unint64_t v42 = *(void *)(v14 + 56) + *(void *)(v31 + 72) * v37;
      uint64_t v43 = sub_100044014(&qword_1003ECE10);
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(&v32[*(int *)(v43 + 48)], v42, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v32, 0, 1, v43);
      swift_bridgeObjectRetain();
      uint64_t v44 = v126;
      goto LABEL_35;
    }
    unint64_t v58 = 63 - v34;
    if ((unint64_t)(63 - v34) <= 0x7F)
    {
      uint64_t v44 = 0;
    }
    else
    {
      unint64_t v73 = *(void *)(v14 + 72);
      if (v73)
      {
        uint64_t v74 = 1;
LABEL_29:
        uint64_t v38 = (v73 - 1) & v73;
        uint64_t v126 = v74;
        unint64_t v37 = __clz(__rbit64(v73)) + (v74 << 6);
        goto LABEL_12;
      }
      if (v58 < 0xC0)
      {
        uint64_t v44 = 1;
      }
      else
      {
        unint64_t v73 = *(void *)(v14 + 80);
        if (v73)
        {
          uint64_t v74 = 2;
          goto LABEL_29;
        }
        if (v58 < 0x100)
        {
          uint64_t v44 = 2;
        }
        else
        {
          unint64_t v73 = *(void *)(v14 + 88);
          if (v73)
          {
            uint64_t v74 = 3;
            goto LABEL_29;
          }
LABEL_54:
          if (v58 < 0x140)
          {
LABEL_58:
            uint64_t v44 = 3;
          }
          else
          {
            unint64_t v73 = *(void *)(v14 + 96);
            if (v73)
            {
              uint64_t v74 = 4;
              goto LABEL_29;
            }
            uint64_t v113 = 0;
            uint64_t v114 = v58 >> 6;
            uint64_t v115 = 5;
            if (v114 > 5) {
              uint64_t v115 = v114;
            }
            uint64_t v116 = v115 - 5;
            while (v116 != v113)
            {
              unint64_t v73 = *(void *)(v14 + 104 + 8 * v113++);
              if (v73)
              {
                uint64_t v74 = v113 + 4;
                goto LABEL_29;
              }
            }
            uint64_t v44 = v114 - 1;
          }
        }
      }
    }
    uint64_t v85 = sub_100044014(&qword_1003ECE10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v32, 1, 1, v85);
    uint64_t v38 = 0;
LABEL_35:
    *(void *)(v0 + 1392) = v38;
    *(void *)(v0 + 1384) = v44;
    uint64_t v86 = *(void *)(v0 + 824);
    sub_100013B50(*(void *)(v0 + 816), v86, &qword_1003ECE00);
    uint64_t v87 = sub_100044014(&qword_1003ECE10);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 1, v87) == 1)
    {
      uint64_t v88 = *(void *)(v0 + 1096);
      uint64_t v89 = *(void *)(v0 + 1072);
      uint64_t v119 = *(void *)(v0 + 1048);
      uint64_t v120 = *(void *)(v0 + 1064);
      uint64_t v90 = *(void *)(v0 + 1032);
      uint64_t v118 = *(void *)(v0 + 1024);
      uint64_t v117 = *(void *)(v0 + 1008);
      uint64_t v91 = *(void *)(v0 + 800);
      uint64_t v92 = *(void *)(v0 + 792);
      uint64_t v93 = *(void *)(v0 + 784);
      uint64_t v94 = *(void *)(v0 + 768);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v91, v94, v93);
      sub_100071610((uint64_t)_swiftEmptyArrayStorage);
      FriendshipRequestResult.init(request:result:requestIds:)();
      swift_release();
      swift_release();
      sub_100072800(v117, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v119, v118);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v120);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
      return v95();
    }
    else
    {
      unsigned int v122 = *(_DWORD *)(v0 + 1552);
      uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
      uint64_t v96 = *(void *)(v0 + 1096);
      uint64_t v97 = *(void *)(v0 + 1080);
      uint64_t v98 = *(void *)(v0 + 1064);
      uint64_t v99 = *(void *)(v0 + 1040);
      uint64_t v100 = *(void *)(v0 + 1032);
      uint64_t v101 = *(void *)(v0 + 1024);
      uint64_t v102 = *(void *)(v0 + 944);
      uint64_t v103 = *(void *)(v0 + 928);
      uint64_t v104 = *(void *)(v0 + 920);
      uint64_t v105 = *(char **)(v0 + 824);
      uint64_t v127 = *(void *)v105;
      *(void *)(v0 + 1400) = *(void *)v105;
      uint64_t v106 = *((void *)v105 + 1);
      *(void *)(v0 + 1408) = v106;
      (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v102, &v105[*(int *)(v87 + 48)], v104);
      v121(v97, v96, v98);
      (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))(v99, v122, v101);
      char v107 = static FriendshipResponseToInviteType.== infix(_:_:)();
      uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      *(void *)(v0 + 1416) = v108;
      *(void *)(v0 + 1424) = (v100 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v108(v99, v101);
      FriendshipRequest.callerHandle.getter();
      FriendshipRequest.origin.getter();
      uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))((char *)&dword_1003ED888
                                                                                       + dword_1003ED888);
      swift_bridgeObjectRetain();
      uint64_t v109 = (void *)swift_task_alloc();
      *(void *)(v0 + 1432) = v109;
      *uint64_t v109 = v0;
      v109[1] = sub_100069560;
      uint64_t v110 = *(void *)(v0 + 1080);
      uint64_t v111 = *(void *)(v0 + 896);
      uint64_t v112 = *(void *)(v0 + 808);
      return v124(v110, v127, v106, (v107 & 1) == 0, v111, v112);
    }
  }
  while (1)
  {
    *(void *)(v0 + 1288) = v29;
    *(void *)(v0 + 1280) = v14;
    *(void *)(v0 + 1272) = v16;
    unint64_t v48 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1264);
    uint64_t v49 = *(void *)(v0 + 992);
    uint64_t v50 = *(void *)(v0 + 920);
    unint64_t v51 = *(void *)(v0 + 1240)
        + ((*(unsigned __int8 *)(v0 + 1528) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1528))
        + *(void *)(v0 + 1256) * v29;
    *(void *)(v0 + 1296) = (*(void *)(v0 + 928) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v48(v49, v51, v50);
    uint64_t v52 = Handle.serverID.getter();
    if (!v53) {
      break;
    }
    uint64_t v54 = v52;
    uint64_t v55 = v53;
    (*(void (**)(void, void, void))(v0 + 1264))(*(void *)(v0 + 984), *(void *)(v0 + 992), *(void *)(v0 + 920));
    int v56 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 752) = v14;
    uint64_t v32 = (char *)v14;
    unint64_t v31 = sub_10003B888(v54, v55);
    uint64_t v59 = *(void *)(v14 + 16);
    BOOL v60 = (v57 & 1) == 0;
    uint64_t v61 = v59 + v60;
    if (__OFADD__(v59, v60))
    {
      __break(1u);
      goto LABEL_54;
    }
    char v62 = v57;
    if (*(void *)(v14 + 24) >= v61)
    {
      if ((v56 & 1) == 0)
      {
        uint64_t v32 = (char *)(v0 + 752);
        sub_100125DF8();
      }
    }
    else
    {
      sub_10013F2A4(v61, v56);
      uint64_t v32 = *(char **)(v0 + 752);
      unint64_t v63 = sub_10003B888(v54, v55);
      if ((v62 & 1) != (v64 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v31 = v63;
    }
    uint64_t v14 = *(void *)(v0 + 752);
    uint64_t v65 = *(void *)(v0 + 1256);
    uint64_t v66 = *(void *)(v0 + 984);
    uint64_t v67 = *(void *)(v0 + 928);
    uint64_t v68 = *(void *)(v0 + 920);
    if (v62)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v67 + 40))(*(void *)(v14 + 56) + v65 * v31, v66, v68);
    }
    else
    {
      *(void *)(v14 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v69 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v31);
      *uint64_t v69 = v54;
      v69[1] = v55;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v67 + 32))(*(void *)(v14 + 56) + v65 * v31, v66, v68);
      uint64_t v70 = *(void *)(v14 + 16);
      BOOL v71 = __OFADD__(v70, 1);
      uint64_t v72 = v70 + 1;
      if (v71)
      {
        __break(1u);
        goto LABEL_58;
      }
      *(void *)(v14 + 16) = v72;
      swift_bridgeObjectRetain();
    }
    uint64_t v45 = *(void *)(v0 + 992);
    uint64_t v46 = *(void *)(v0 + 928);
    uint64_t v47 = *(void *)(v0 + 920);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    uint64_t v29 = *(void *)(v0 + 1288) + 1;
    if (v29 == *(void *)(v0 + 1248)) {
      goto LABEL_8;
    }
  }
  uint64_t v75 = *(unsigned int *)(v0 + 1532);
  uint64_t v76 = *(void *)(v0 + 888);
  uint64_t v77 = *(void *)(v0 + 880);
  uint64_t v78 = *(void *)(v0 + 872);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 104);
  *(void *)(v0 + 1304) = v79;
  *(void *)(v0 + 1312) = (v77 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v79(v76, v75, v78);
  uint64_t v80 = (void *)swift_task_alloc();
  *(void *)(v0 + 1320) = v80;
  *uint64_t v80 = v0;
  v80[1] = sub_1000678D8;
  uint64_t v81 = *(void *)(v0 + 992);
  uint64_t v82 = *(void *)(v0 + 912);
  uint64_t v83 = *(void *)(v0 + 888);
  return sub_100110598(v82, v81, v83, 0);
}

uint64_t sub_100069560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[180] = a1;
  v5[181] = a2;
  v5[182] = a3;
  v5[183] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[97];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1000699F0, v6, 0);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v5[184] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1000696F0;
    return daemon.getter();
  }
}

uint64_t sub_1000696F0(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[185] = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[186] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10006987C;
  uint64_t v5 = v2[150];
  uint64_t v6 = v2[149];
  uint64_t v7 = v2[142];
  uint64_t v8 = v2[141];
  return ActorServiceDaemon.getService<A>()(v8, v6, v7, v5);
}

uint64_t sub_10006987C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[187] = a1;
  v3[188] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[97];
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10006AEFC;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v3[97];
    swift_release();
    uint64_t v5 = sub_100069C8C;
    uint64_t v6 = v7;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000699F0()
{
  uint64_t v12 = v0[137];
  uint64_t v1 = v0[134];
  uint64_t v10 = v0[133];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[177];
  uint64_t v2 = v0[131];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[126];
  uint64_t v5 = v0[118];
  uint64_t v6 = v0[116];
  uint64_t v7 = v0[115];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  sub_100072800(v4, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
  v11(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100069C8C()
{
  unint64_t v1 = v0[182];
  uint64_t v2 = v0[181];
  uint64_t v3 = v0[180];
  uint64_t v4 = v0[126];
  v0[77] = v0[125];
  v0[78] = sub_100046FAC(&qword_1003ECE18, (void (*)(uint64_t))type metadata accessor for RespondToInviteEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 74);
  sub_100072860(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
  v0[82] = (uint64_t)&type metadata for RespondToInviteRequest;
  v0[83] = sub_1000728C8();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = (uint64_t)&protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[189] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100069E64;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_100069E64()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 776);
    swift_bridgeObjectRelease();
    sub_10000A520(v3, &qword_1003ECD18);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10006B1C4;
  }
  else
  {
    uint64_t v6 = v2 + 632;
    uint64_t v7 = v2 + 592;
    uint64_t v4 = *(void *)(v2 + 776);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v6);
    sub_1000233E4(v7);
    uint64_t v5 = sub_100069FD8;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100069FD8()
{
  uint64_t v92 = v0;
  (*(void (**)(void, void, void))(*(void *)(v0 + 928) + 16))(*(void *)(v0 + 936), *(void *)(v0 + 944), *(void *)(v0 + 920));
  if (*(void *)(v0 + 192) == 1)
  {
    uint64_t v1 = *(unsigned int *)(v0 + 1568);
LABEL_9:
    uint64_t v4 = *(void *)(v0 + 848);
    uint64_t v5 = type metadata accessor for FriendshipRequestError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v4, v1, v5);
    uint64_t v6 = 1548;
    goto LABEL_10;
  }
  int v2 = *(unsigned __int8 *)(v0 + 208);
  BOOL v3 = (v2 - 3) < 0x12 || v2 == 0;
  if (v3)
  {
    uint64_t v1 = *(unsigned int *)(v0 + 1564);
    goto LABEL_9;
  }
  BOOL v3 = v2 == 1;
  uint64_t v6 = 1560;
  if (!v3) {
    uint64_t v6 = 1556;
  }
LABEL_10:
  uint64_t v7 = *(void *)(v0 + 1376);
  uint64_t v8 = *(void *)(v0 + 936);
  uint64_t v9 = *(void *)(v0 + 928);
  uint64_t v10 = *(void *)(v0 + 920);
  uint64_t v11 = *(void *)(v0 + 864);
  uint64_t v12 = *(void *)(v0 + 848);
  uint64_t v13 = *(void *)(v0 + 840);
  uint64_t v14 = *(void *)(v0 + 832);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, *(unsigned int *)(v0 + v6), v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v14);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v91[0] = v7;
  sub_1001429D4(v11, v8, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = v7;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(v8, v10);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100044058(v18, (uint64_t)qword_10040B4B8);
  swift_bridgeObjectRetain();
  sub_100036A4C((void *)(v0 + 16));
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v22 = *(void *)(v0 + 1456);
  uint64_t v88 = *(void *)(v0 + 1448);
  unint64_t v23 = *(void *)(v0 + 1408);
  uint64_t v86 = v16;
  if (v21)
  {
    uint64_t v81 = *(void *)(v0 + 1400);
    uint64_t v84 = *(void *)(v0 + 944);
    uint64_t v83 = *(void *)(v0 + 920);
    os_log_type_t type = v20;
    uint64_t v24 = swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136446979;
    *(void *)(v0 + 712) = sub_100037004(0xD00000000000001DLL, 0x8000000100373760, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2160;
    *(void *)(v0 + 720) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 728) = sub_100037004(v81, v23, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 32) = 2080;
    sub_100036A4C((void *)(v0 + 16));
    uint64_t v25 = sub_10003338C();
    unint64_t v27 = v26;
    sub_1000367D8((void *)(v0 + 16));
    *(void *)(v0 + 736) = sub_100037004(v25, v27, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v16 = v86;
    swift_bridgeObjectRelease();
    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v19, type, "CommandManager %{public}s with\nserverId:%{private,mask.hash}s\nresponse: %s", (uint8_t *)v24, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_bridgeObjectRelease();
    sub_1000440E8(v88, v22);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v84, v83);
  }
  else
  {
    uint64_t v29 = *(void *)(v0 + 944);
    uint64_t v30 = *(void *)(v0 + 920);
    swift_release();

    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1000440E8(v88, v22);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v17)(v29, v30);
  }
  unint64_t v31 = *(void *)(v0 + 1392);
  int64_t v32 = *(void *)(v0 + 1384);
  *(void *)(v0 + 1376) = v16;
  if (v31)
  {
    uint64_t v33 = (v31 - 1) & v31;
    unint64_t v34 = __clz(__rbit64(v31)) | (v32 << 6);
    uint64_t v35 = *(void *)(v0 + 1368);
LABEL_17:
    uint64_t v36 = *(void *)(v0 + 928);
    uint64_t v37 = *(void *)(v0 + 920);
    uint64_t v38 = *(char **)(v0 + 816);
    uint64_t v39 = (void *)(*(void *)(v35 + 48) + 16 * v34);
    uint64_t v40 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v40;
    unint64_t v41 = *(void *)(v35 + 56) + *(void *)(v36 + 72) * v34;
    uint64_t v42 = sub_100044014(&qword_1003ECE10);
    (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(&v38[*(int *)(v42 + 48)], v41, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v38, 0, 1, v42);
    swift_bridgeObjectRetain();
    goto LABEL_39;
  }
  int64_t v43 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  int64_t v44 = (unint64_t)((1 << *(unsigned char *)(v0 + 1572)) + 63) >> 6;
  if (v43 < v44)
  {
    uint64_t v35 = *(void *)(v0 + 1368);
    uint64_t v45 = v35 + 64;
    unint64_t v46 = *(void *)(v35 + 64 + 8 * v43);
    if (v46)
    {
LABEL_21:
      uint64_t v33 = (v46 - 1) & v46;
      unint64_t v34 = __clz(__rbit64(v46)) + (v43 << 6);
      int64_t v32 = v43;
      goto LABEL_17;
    }
    int64_t v47 = v32 + 2;
    ++v32;
    if (v43 + 1 < v44)
    {
      unint64_t v46 = *(void *)(v45 + 8 * v47);
      if (v46)
      {
LABEL_24:
        int64_t v43 = v47;
        goto LABEL_21;
      }
      int64_t v32 = v43 + 1;
      if (v43 + 2 < v44)
      {
        unint64_t v46 = *(void *)(v45 + 8 * (v43 + 2));
        if (v46)
        {
          v43 += 2;
          goto LABEL_21;
        }
        int64_t v47 = v43 + 3;
        int64_t v32 = v43 + 2;
        if (v43 + 3 < v44)
        {
          unint64_t v46 = *(void *)(v45 + 8 * v47);
          if (v46) {
            goto LABEL_24;
          }
          while (1)
          {
            int64_t v43 = v47 + 1;
            if (__OFADD__(v47, 1)) {
              break;
            }
            if (v43 >= v44)
            {
              int64_t v32 = v44 - 1;
              goto LABEL_38;
            }
            unint64_t v46 = *(void *)(v45 + 8 * v43);
            ++v47;
            if (v46) {
              goto LABEL_21;
            }
          }
LABEL_47:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_38:
  uint64_t v48 = *(void *)(v0 + 816);
  uint64_t v49 = sub_100044014(&qword_1003ECE10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 1, 1, v49);
  uint64_t v33 = 0;
LABEL_39:
  *(void *)(v0 + 1392) = v33;
  *(void *)(v0 + 1384) = v32;
  uint64_t v50 = *(void *)(v0 + 824);
  sub_100013B50(*(void *)(v0 + 816), v50, &qword_1003ECE00);
  uint64_t v51 = sub_100044014(&qword_1003ECE10);
  int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51);
  uint64_t v89 = *(void *)(v0 + 1096);
  if (v52 == 1)
  {
    uint64_t v53 = *(void *)(v0 + 1072);
    uint64_t v54 = *(void *)(v0 + 1048);
    uint64_t v55 = *(void *)(v0 + 1032);
    uint64_t v79 = *(void *)(v0 + 1024);
    uint64_t v80 = *(void *)(v0 + 1064);
    uint64_t v56 = *(void *)(v0 + 1008);
    uint64_t v57 = *(void *)(v0 + 800);
    uint64_t v58 = *(void *)(v0 + 792);
    uint64_t v59 = *(void *)(v0 + 784);
    uint64_t v60 = *(void *)(v0 + 768);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v60, v59);
    sub_100071610((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)();
    swift_release();
    swift_release();
    sub_100072800(v56, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v79);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v89, v80);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v61 = *(uint64_t (**)(void))(v0 + 8);
    return v61();
  }
  else
  {
    unsigned int v85 = *(_DWORD *)(v0 + 1552);
    char v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1224);
    uint64_t v63 = *(void *)(v0 + 1080);
    uint64_t v64 = *(void *)(v0 + 1064);
    uint64_t v65 = *(void *)(v0 + 1040);
    uint64_t v66 = *(void *)(v0 + 1032);
    uint64_t v67 = *(void *)(v0 + 1024);
    uint64_t v68 = *(void *)(v0 + 944);
    uint64_t v69 = *(void *)(v0 + 928);
    uint64_t v70 = *(void *)(v0 + 920);
    BOOL v71 = *(char **)(v0 + 824);
    uint64_t v87 = *(void *)v71;
    *(void *)(v0 + 1400) = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)(v0 + 1408) = v72;
    (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v68, &v71[*(int *)(v51 + 48)], v70);
    v62(v63, v89, v64);
    (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))(v65, v85, v67);
    char v73 = static FriendshipResponseToInviteType.== infix(_:_:)();
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    *(void *)(v0 + 1416) = v74;
    *(void *)(v0 + 1424) = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v74(v65, v67);
    FriendshipRequest.callerHandle.getter();
    FriendshipRequest.origin.getter();
    uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))((char *)&dword_1003ED888
                                                                                    + dword_1003ED888);
    swift_bridgeObjectRetain();
    uint64_t v75 = (void *)swift_task_alloc();
    *(void *)(v0 + 1432) = v75;
    *uint64_t v75 = v0;
    v75[1] = sub_100069560;
    uint64_t v76 = *(void *)(v0 + 1080);
    uint64_t v77 = *(void *)(v0 + 896);
    uint64_t v78 = *(void *)(v0 + 808);
    return v90(v76, v87, v72, (v73 & 1) == 0, v77, v78);
  }
}

uint64_t sub_10006AAF8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006ACE8()
{
  uint64_t v1 = v0[137];
  uint64_t v2 = v0[134];
  uint64_t v3 = v0[133];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10006AEFC()
{
  unint64_t v1 = v0[182];
  uint64_t v2 = v0[181];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[177];
  uint64_t v14 = v0[137];
  uint64_t v3 = v0[134];
  uint64_t v12 = v0[133];
  uint64_t v10 = v0[128];
  uint64_t v11 = v0[131];
  uint64_t v4 = v0[126];
  uint64_t v5 = v0[118];
  uint64_t v6 = v0[116];
  uint64_t v7 = v0[115];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  sub_100072800(v4, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
  v13(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10006B1C4()
{
  unint64_t v1 = v0[182];
  uint64_t v2 = v0[181];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[177];
  uint64_t v14 = v0[137];
  uint64_t v3 = v0[134];
  uint64_t v11 = v0[131];
  uint64_t v12 = v0[133];
  uint64_t v10 = v0[128];
  uint64_t v9 = v0[126];
  uint64_t v4 = v0[118];
  uint64_t v5 = v0[116];
  uint64_t v6 = v0[115];
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();
  sub_100072800(v9, (uint64_t (*)(void))type metadata accessor for RespondToInviteEndpoint);
  v13(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v12);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 74));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006B4B8(uint64_t a1, uint64_t a2)
{
  v3[109] = v2;
  v3[108] = a2;
  v3[107] = a1;
  uint64_t v4 = type metadata accessor for FriendshipRequest();
  v3[110] = v4;
  v3[111] = *(void *)(v4 - 8);
  v3[112] = swift_task_alloc();
  v3[113] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLComponents();
  v3[114] = v5;
  v3[115] = *(void *)(v5 - 8);
  v3[116] = swift_task_alloc();
  v3[117] = type metadata accessor for FriendshipEndpoint();
  v3[118] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FriendshipRequestStatus();
  v3[119] = v6;
  v3[120] = *(void *)(v6 - 8);
  v3[121] = swift_task_alloc();
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  v3[124] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for HandleType();
  v3[125] = v7;
  v3[126] = *(void *)(v7 - 8);
  v3[127] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[128] = swift_task_alloc();
  v3[129] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Handle();
  v3[130] = v8;
  v3[131] = *(void *)(v8 - 8);
  v3[132] = swift_task_alloc();
  v3[133] = swift_task_alloc();
  v3[134] = swift_task_alloc();
  v3[135] = swift_task_alloc();
  v3[136] = swift_task_alloc();
  v3[137] = swift_task_alloc();
  v3[138] = swift_task_alloc();
  v3[139] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[140] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Account();
  v3[141] = v9;
  v3[142] = *(void *)(v9 - 8);
  v3[143] = swift_task_alloc();
  v3[144] = swift_task_alloc();
  v3[145] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v3[146] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10006B8C8;
  return daemon.getter();
}

uint64_t sub_10006B8C8(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[147] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[148] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[149] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100046FAC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[150] = v6;
  uint64_t v7 = sub_100046FAC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_10006BAA8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10006BAA8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[151] = a1;
  v3[152] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[109];
    return _swift_task_switch(sub_10006EF44, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[153] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10006BC38;
    uint64_t v7 = v3[140];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_10006BC38()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 872);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006BD48, v1, 0);
}

uint64_t sub_10006BD48()
{
  uint64_t v1 = v0[142];
  uint64_t v2 = v0[141];
  uint64_t v3 = v0[140];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B4B8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to stop sharing!", v7, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v8 = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[145], v3, v2);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[154] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_10006C0B8;
    return daemon.getter();
  }
}

uint64_t sub_10006C0B8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1240) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1248) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100046FAC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  void *v5 = v4;
  v5[1] = sub_10006C26C;
  uint64_t v8 = *(void *)(v2 + 1200);
  uint64_t v9 = *(void *)(v2 + 1192);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_10006C26C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1256) = a1;
  *(void *)(v4 + 1264) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 872);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_10006F0FC;
  }
  else {
    uint64_t v6 = sub_10006C3C0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006C3C0()
{
  uint64_t v101 = v0;
  *(void *)(v0 + 824) = _swiftEmptyArrayStorage;
  uint64_t v1 = FriendshipRequest.toHandles.getter();
  *(void *)(v0 + 1272) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1280) = v2;
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v30 = FriendshipRequest.toHandles.getter();
    unint64_t v31 = sub_100071A5C(v30, (uint64_t *)(v0 + 824));
    swift_bridgeObjectRelease();
    uint64_t v32 = *((void *)v31 + 2);
    if (!v32)
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = _swiftEmptyDictionarySingleton;
LABEL_30:
      *(void *)(v0 + 1400) = v37;
      if (*(void *)(*(void *)(v0 + 824) + 16))
      {
        uint64_t v63 = *(void *)(v0 + 1152);
        uint64_t v64 = *(void *)(v0 + 1136);
        uint64_t v84 = *(void *)(v0 + 1128);
        uint64_t v91 = *(void *)(v0 + 944);
        uint64_t v93 = *(void *)(v0 + 1144);
        uint64_t v65 = *(void *)(v0 + 928);
        uint64_t v66 = *(void *)(v0 + 920);
        uint64_t v88 = *(void *)(v0 + 1160);
        uint64_t v89 = *(void *)(v0 + 912);
        uint64_t v98 = *(void *)(v0 + 904);
        uint64_t v67 = *(void *)(v0 + 888);
        uint64_t v95 = *(void *)(v0 + 864);
        uint64_t v97 = *(void *)(v0 + 880);
        uint64_t v86 = *(void (**)(uint64_t))(v64 + 16);
        v86(v63);
        sub_100071040(v65);
        uint64_t v68 = (void (*)(uint64_t, void))URLComponents.path.modify();
        v69._countAndFlagsBits = 0x6566664F706F7473;
        v69._object = (void *)0xE900000000000072;
        String.append(_:)(v69);
        v68(v0 + 792, 0);
        uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
        *(void *)(v0 + 1408) = v70;
        *(void *)(v0 + 1416) = (v64 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v70(v63, v84);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v91, v65, v89);
        ((void (*)(uint64_t, uint64_t, uint64_t))v86)(v93, v88, v84);
        uint64_t v71 = *(void *)(v0 + 824);
        uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
        *(void *)(v0 + 1424) = v72;
        *(void *)(v0 + 1432) = (v67 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v72(v98, v95, v97);
        uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003ED6C8 + dword_1003ED6C8);
        swift_bridgeObjectRetain();
        char v73 = (void *)swift_task_alloc();
        *(void *)(v0 + 1440) = v73;
        *char v73 = v0;
        v73[1] = sub_10006E068;
        uint64_t v74 = *(void *)(v0 + 1144);
        uint64_t v75 = *(void *)(v0 + 904);
        return v99(v74, v71, v75);
      }
      else
      {
        if (qword_1003EBF78 != -1) {
LABEL_45:
        }
          swift_once();
        uint64_t v76 = type metadata accessor for Logger();
        sub_100044058(v76, (uint64_t)qword_10040B4B8);
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          uint64_t v100 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136446210;
          *(void *)(v0 + 848) = sub_100037004(0xD00000000000001CLL, 0x8000000100373720, (uint64_t *)&v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "%{public}s no handle with serverID!", v79, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v80 = *(void *)(v0 + 1160);
        uint64_t v81 = *(void *)(v0 + 1136);
        uint64_t v82 = *(void *)(v0 + 1128);
        (*(void (**)(void, void, void))(*(void *)(v0 + 888) + 16))(*(void *)(v0 + 896), *(void *)(v0 + 864), *(void *)(v0 + 880));
        swift_bridgeObjectRetain();
        sub_100071610((uint64_t)_swiftEmptyArrayStorage);
        FriendshipRequestResult.init(request:result:requestIds:)();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v83 = *(uint64_t (**)(void))(v0 + 8);
        return v83();
      }
    }
    uint64_t v33 = *(void *)(v0 + 1048);
    unint64_t v34 = *(void (**)(uint64_t, char *, void))(v33 + 16);
    v33 += 16;
    uint64_t v96 = v34;
    uint64_t v35 = &v31[(*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64)];
    uint64_t v94 = *(void *)(v33 + 56);
    unsigned int v92 = enum case for FriendshipRequestError.missingServerId(_:);
    unsigned int v90 = enum case for FriendshipRequestStatus.failure(_:);
    uint64_t v87 = *(void *)(v0 + 960);
    uint64_t v36 = (void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32);
    unsigned int v85 = (void (**)(uint64_t, uint64_t))(v33 - 8);
    uint64_t v37 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v40 = *(void *)(v0 + 1064);
      uint64_t v41 = *(void *)(v0 + 992);
      uint64_t v42 = *(void *)(v0 + 984);
      uint64_t v43 = *(void *)(v0 + 952);
      v96(v40, v35, *(void *)(v0 + 1040));
      uint64_t v44 = type metadata accessor for FriendshipRequestError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104))(v41, v92, v44);
      (*(void (**)(uint64_t, void, uint64_t))(v87 + 104))(v41, v90, v43);
      uint64_t v45 = *v36;
      (*v36)(v42, v41, v43);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v100 = v37;
      unint64_t v48 = sub_100025614(v40);
      uint64_t v49 = v37[2];
      BOOL v50 = (v47 & 1) == 0;
      uint64_t v51 = v49 + v50;
      if (__OFADD__(v49, v50))
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      char v52 = v47;
      if (v37[3] >= v51)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v47) {
            goto LABEL_15;
          }
        }
        else
        {
          sub_100125DC4();
          uint64_t v37 = v100;
          if (v52) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        uint64_t v53 = *(void *)(v0 + 1064);
        sub_10013F284(v51, isUniquelyReferenced_nonNull_native);
        uint64_t v37 = v100;
        unint64_t v54 = sub_100025614(v53);
        if ((v52 & 1) != (v55 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v48 = v54;
        if (v52)
        {
LABEL_15:
          (*(void (**)(unint64_t, void, void))(v87 + 40))(v37[7] + *(void *)(v87 + 72) * v48, *(void *)(v0 + 984), *(void *)(v0 + 952));
          goto LABEL_16;
        }
      }
      uint64_t v56 = *(char **)(v0 + 1064);
      uint64_t v57 = *(void *)(v0 + 1040);
      uint64_t v58 = *(void *)(v0 + 984);
      uint64_t v59 = *(void *)(v0 + 952);
      v37[(v48 >> 6) + 8] |= 1 << v48;
      v96(v37[6] + v48 * v94, v56, v57);
      v45(v37[7] + *(void *)(v87 + 72) * v48, v58, v59);
      uint64_t v60 = v37[2];
      BOOL v61 = __OFADD__(v60, 1);
      uint64_t v62 = v60 + 1;
      if (v61) {
        goto LABEL_44;
      }
      long long v37[2] = v62;
LABEL_16:
      uint64_t v38 = *(void *)(v0 + 1064);
      uint64_t v39 = *(void *)(v0 + 1040);
      swift_bridgeObjectRelease();
      (*v85)(v38, v39);
      v35 += v94;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(v0 + 1048);
  *(_DWORD *)(v0 + 1496) = *(_DWORD *)(v4 + 80);
  *(void *)(v0 + 1288) = *(void *)(v4 + 72);
  *(void *)(v0 + 1296) = *(void *)(v4 + 16);
  *(_DWORD *)(v0 + 1500) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v0 + 1504) = enum case for HandleType.pendingOffer(_:);
  uint64_t v5 = _swiftEmptyArrayStorage;
  while (1)
  {
    *(void *)(v0 + 1312) = v3;
    *(void *)(v0 + 1304) = v5;
    uint64_t v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1296);
    uint64_t v7 = *(void *)(v0 + 1112);
    uint64_t v8 = *(void *)(v0 + 1040);
    unint64_t v9 = *(void *)(v0 + 1272)
       + ((*(unsigned __int8 *)(v0 + 1496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1496))
       + *(void *)(v0 + 1288) * v3;
    *(void *)(v0 + 1320) = (*(void *)(v0 + 1048) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v6(v7, v9, v8);
    Handle.serverID.getter();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    if (!v11) {
      break;
    }
    (*(void (**)(void, void, void))(v0 + 1296))(*(void *)(v0 + 1104), *(void *)(v0 + 1112), *(void *)(v0 + 1040));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = (void *)sub_10013DC78(0, v5[2] + 1, 1, (unint64_t)v5);
    }
    unint64_t v13 = v5[2];
    unint64_t v12 = v5[3];
    if (v13 >= v12 >> 1) {
      uint64_t v5 = (void *)sub_10013DC78(v12 > 1, v13 + 1, 1, (unint64_t)v5);
    }
    uint64_t v14 = *(void *)(v0 + 1288);
    uint64_t v15 = *(unsigned __int8 *)(v0 + 1496);
    uint64_t v16 = *(void *)(v0 + 1112);
    uint64_t v17 = *(void *)(v0 + 1104);
    uint64_t v18 = *(void *)(v0 + 1048);
    uint64_t v19 = *(void *)(v0 + 1040);
    v5[2] = v13 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))((unint64_t)v5 + ((v15 + 32) & ~v15) + v14 * v13, v17, v19);
    *(void *)(v0 + 824) = v5;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
    uint64_t v3 = *(void *)(v0 + 1312) + 1;
    if (v3 == *(void *)(v0 + 1280)) {
      goto LABEL_13;
    }
  }
  uint64_t v20 = *(unsigned int *)(v0 + 1500);
  uint64_t v21 = *(void *)(v0 + 1016);
  uint64_t v22 = *(void *)(v0 + 1008);
  uint64_t v23 = *(void *)(v0 + 1000);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104);
  *(void *)(v0 + 1328) = v24;
  *(void *)(v0 + 1336) = (v22 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v24(v21, v20, v23);
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 1344) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_10006CEF8;
  uint64_t v26 = *(void *)(v0 + 1112);
  uint64_t v27 = *(void *)(v0 + 1032);
  uint64_t v28 = *(void *)(v0 + 1016);
  return sub_100110598(v27, v26, v28, 0);
}

uint64_t sub_10006CEF8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1016);
  uint64_t v3 = *(void *)(*v0 + 1008);
  uint64_t v4 = *(void *)(*v0 + 1000);
  uint64_t v5 = *(void *)(*v0 + 872);
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 1352) = v6;
  *(void *)(v1 + 1360) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v2, v4);
  return _swift_task_switch(sub_10006D07C, v5, 0);
}

uint64_t sub_10006D07C()
{
  uint64_t v1 = *(void *)(v0 + 1048);
  uint64_t v2 = *(void *)(v0 + 1040);
  uint64_t v3 = *(void *)(v0 + 1032);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 1368) = v4;
  *(void *)(v0 + 1376) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003F3B30);
    unint64_t v5 = *(void *)(v0 + 1304);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
    uint64_t v7 = *(void *)(v0 + 1096);
    uint64_t v8 = *(void *)(v0 + 1088);
    unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
    v9(v7, v3, v2);
    v6(v8, v7, v2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = *(void *)(v0 + 1304);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_10013DC78(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 1304));
    }
    unint64_t v12 = *(void *)(v5 + 16);
    unint64_t v11 = *(void *)(v5 + 24);
    if (v12 >= v11 >> 1) {
      unint64_t v5 = sub_10013DC78(v11 > 1, v12 + 1, 1, v5);
    }
    uint64_t v13 = *(void *)(v0 + 1288);
    uint64_t v14 = *(unsigned __int8 *)(v0 + 1496);
    uint64_t v15 = *(void *)(v0 + 1096);
    uint64_t v16 = *(void *)(v0 + 1088);
    uint64_t v17 = *(void *)(v0 + 1048);
    uint64_t v18 = *(void *)(v0 + 1040);
    *(void *)(v5 + 16) = v12 + 1;
    v9(v5 + ((v14 + 32) & ~v14) + v13 * v12, v16, v18);
    *(void *)(v0 + 824) = v5;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
  }
  *(void *)(v0 + 1384) = v5;
  (*(void (**)(void, void, void))(v0 + 1328))(*(void *)(v0 + 1016), *(unsigned int *)(v0 + 1504), *(void *)(v0 + 1000));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 1392) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10006D2B0;
  uint64_t v20 = *(void *)(v0 + 1112);
  uint64_t v21 = *(void *)(v0 + 1024);
  uint64_t v22 = *(void *)(v0 + 1016);
  return sub_100110598(v21, v20, v22, 0);
}

uint64_t sub_10006D2B0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1352);
  uint64_t v2 = *(void *)(*(void *)v0 + 1016);
  uint64_t v3 = *(void *)(*(void *)v0 + 1000);
  uint64_t v4 = *(void *)(*(void *)v0 + 872);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_10006D42C, v4, 0);
}

uint64_t sub_10006D42C()
{
  uint64_t v113 = v0;
  uint64_t v1 = *(void *)(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 1024);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1368))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 1048) + 8))(*(void *)(v0 + 1112), v1);
    sub_10000A520(v2, &qword_1003F3B30);
    uint64_t v3 = *(void **)(v0 + 1384);
  }
  else
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1296);
    uint64_t v5 = *(void *)(v0 + 1080);
    uint64_t v6 = *(void *)(v0 + 1072);
    unint64_t v7 = *(void *)(*(void *)(v0 + 1048) + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v5, v2, v1);
    v4(v6, v5, v1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v3 = *(void **)(v0 + 1384);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_50:
    }
      uint64_t v3 = (void *)sub_10013DC78(0, v3[2] + 1, 1, (unint64_t)v3);
    unint64_t v10 = v3[2];
    unint64_t v9 = v3[3];
    if (v10 >= v9 >> 1) {
      uint64_t v3 = (void *)sub_10013DC78(v9 > 1, v10 + 1, 1, (unint64_t)v3);
    }
    uint64_t v11 = *(void *)(v0 + 1288);
    uint64_t v12 = *(unsigned __int8 *)(v0 + 1496);
    uint64_t v13 = *(void *)(v0 + 1112);
    uint64_t v14 = *(void *)(v0 + 1080);
    uint64_t v15 = *(void *)(v0 + 1072);
    uint64_t v16 = *(void *)(v0 + 1048);
    uint64_t v17 = *(void *)(v0 + 1040);
    v3[2] = v10 + 1;
    ((void (*)(char *, uint64_t, uint64_t))v7)((char *)v3 + ((v12 + 32) & ~v12) + v11 * v10, v15, v17);
    *(void *)(v0 + 824) = v3;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v14, v17);
    v18(v13, v17);
  }
  while (1)
  {
    uint64_t v19 = *(void *)(v0 + 1312) + 1;
    if (v19 == *(void *)(v0 + 1280)) {
      break;
    }
    *(void *)(v0 + 1312) = v19;
    *(void *)(v0 + 1304) = v3;
    uint64_t v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1296);
    uint64_t v21 = *(void *)(v0 + 1112);
    uint64_t v22 = *(void *)(v0 + 1040);
    unint64_t v23 = *(void *)(v0 + 1272)
        + ((*(unsigned __int8 *)(v0 + 1496) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1496))
        + *(void *)(v0 + 1288) * v19;
    *(void *)(v0 + 1320) = (*(void *)(v0 + 1048) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v20(v21, v23, v22);
    Handle.serverID.getter();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    if (!v25)
    {
      uint64_t v79 = *(unsigned int *)(v0 + 1500);
      uint64_t v80 = *(void *)(v0 + 1016);
      uint64_t v81 = *(void *)(v0 + 1008);
      uint64_t v82 = *(void *)(v0 + 1000);
      uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 104);
      *(void *)(v0 + 1328) = v83;
      *(void *)(v0 + 1336) = (v81 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
      v83(v80, v79, v82);
      uint64_t v84 = (void *)swift_task_alloc();
      *(void *)(v0 + 1344) = v84;
      void *v84 = v0;
      v84[1] = sub_10006CEF8;
      uint64_t v85 = *(void *)(v0 + 1112);
      uint64_t v86 = *(void *)(v0 + 1032);
      uint64_t v87 = *(void *)(v0 + 1016);
      return sub_100110598(v86, v85, v87, 0);
    }
    (*(void (**)(void, void, void))(v0 + 1296))(*(void *)(v0 + 1104), *(void *)(v0 + 1112), *(void *)(v0 + 1040));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = (void *)sub_10013DC78(0, v3[2] + 1, 1, (unint64_t)v3);
    }
    unint64_t v27 = v3[2];
    unint64_t v26 = v3[3];
    if (v27 >= v26 >> 1) {
      uint64_t v3 = (void *)sub_10013DC78(v26 > 1, v27 + 1, 1, (unint64_t)v3);
    }
    uint64_t v28 = *(void *)(v0 + 1288);
    uint64_t v29 = *(unsigned __int8 *)(v0 + 1496);
    uint64_t v30 = *(void *)(v0 + 1112);
    uint64_t v31 = *(void *)(v0 + 1104);
    uint64_t v32 = *(void *)(v0 + 1048);
    uint64_t v33 = *(void *)(v0 + 1040);
    v3[2] = v27 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))((unint64_t)v3 + ((v29 + 32) & ~v29) + v28 * v27, v31, v33);
    *(void *)(v0 + 824) = v3;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v33);
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = FriendshipRequest.toHandles.getter();
  uint64_t v35 = sub_100071A5C(v34, (uint64_t *)(v0 + 824));
  swift_bridgeObjectRelease();
  uint64_t v36 = *((void *)v35 + 2);
  if (v36)
  {
    uint64_t v37 = *(void *)(v0 + 1048);
    uint64_t v38 = *(void (**)(uint64_t, char *, void))(v37 + 16);
    v37 += 16;
    uint64_t v108 = v38;
    uint64_t v39 = &v35[(*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64)];
    uint64_t v106 = *(void *)(v37 + 56);
    unsigned int v104 = enum case for FriendshipRequestError.missingServerId(_:);
    unsigned int v102 = enum case for FriendshipRequestStatus.failure(_:);
    uint64_t v99 = *(void *)(v0 + 960);
    uint64_t v40 = (void (**)(uint64_t, uint64_t, uint64_t))(v99 + 32);
    uint64_t v97 = (void (**)(uint64_t, uint64_t))(v37 - 8);
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v43 = *(void *)(v0 + 1064);
      uint64_t v44 = *(void *)(v0 + 992);
      uint64_t v45 = *(void *)(v0 + 984);
      uint64_t v46 = *(void *)(v0 + 952);
      v108(v43, v39, *(void *)(v0 + 1040));
      uint64_t v47 = type metadata accessor for FriendshipRequestError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v47 - 8) + 104))(v44, v104, v47);
      (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v44, v102, v46);
      unint64_t v48 = *v40;
      (*v40)(v45, v44, v46);
      int v49 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v112 = v3;
      unint64_t v7 = sub_100025614(v43);
      uint64_t v51 = v3[2];
      BOOL v52 = (v50 & 1) == 0;
      uint64_t v53 = v51 + v52;
      if (__OFADD__(v51, v52))
      {
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      char v54 = v50;
      if (v3[3] >= v53)
      {
        if (v49)
        {
          if (v50) {
            goto LABEL_16;
          }
        }
        else
        {
          sub_100125DC4();
          uint64_t v3 = v112;
          if (v54) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v55 = *(void *)(v0 + 1064);
        sub_10013F284(v53, v49);
        uint64_t v3 = v112;
        unint64_t v56 = sub_100025614(v55);
        if ((v54 & 1) != (v57 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v7 = v56;
        if (v54)
        {
LABEL_16:
          (*(void (**)(unint64_t, void, void))(v99 + 40))(v3[7] + *(void *)(v99 + 72) * v7, *(void *)(v0 + 984), *(void *)(v0 + 952));
          goto LABEL_17;
        }
      }
      uint64_t v58 = *(char **)(v0 + 1064);
      uint64_t v59 = *(void *)(v0 + 1040);
      uint64_t v60 = *(void *)(v0 + 984);
      uint64_t v61 = *(void *)(v0 + 952);
      v3[(v7 >> 6) + 8] |= 1 << v7;
      v108(v3[6] + v7 * v106, v58, v59);
      v48(v3[7] + *(void *)(v99 + 72) * v7, v60, v61);
      uint64_t v62 = v3[2];
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_49;
      }
      v3[2] = v64;
LABEL_17:
      uint64_t v41 = *(void *)(v0 + 1064);
      uint64_t v42 = *(void *)(v0 + 1040);
      swift_bridgeObjectRelease();
      (*v97)(v41, v42);
      v39 += v106;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = _swiftEmptyDictionarySingleton;
LABEL_31:
  *(void *)(v0 + 1400) = v3;
  if (*(void *)(*(void *)(v0 + 824) + 16))
  {
    uint64_t v65 = *(void *)(v0 + 1152);
    uint64_t v66 = *(void *)(v0 + 1136);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v103 = *(void *)(v0 + 944);
    uint64_t v105 = *(void *)(v0 + 1144);
    uint64_t v67 = *(void *)(v0 + 928);
    uint64_t v68 = *(void *)(v0 + 920);
    uint64_t v100 = *(void *)(v0 + 1160);
    uint64_t v101 = *(void *)(v0 + 912);
    uint64_t v110 = *(void *)(v0 + 904);
    uint64_t v69 = *(void *)(v0 + 888);
    uint64_t v107 = *(void *)(v0 + 864);
    uint64_t v109 = *(void *)(v0 + 880);
    uint64_t v98 = *(void (**)(uint64_t))(v66 + 16);
    v98(v65);
    sub_100071040(v67);
    uint64_t v70 = (void (*)(uint64_t, void))URLComponents.path.modify();
    v71._countAndFlagsBits = 0x6566664F706F7473;
    v71._object = (void *)0xE900000000000072;
    String.append(_:)(v71);
    v70(v0 + 792, 0);
    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    *(void *)(v0 + 1408) = v72;
    *(void *)(v0 + 1416) = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v72(v65, v96);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v103, v67, v101);
    ((void (*)(uint64_t, uint64_t, uint64_t))v98)(v105, v100, v96);
    uint64_t v73 = *(void *)(v0 + 824);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
    *(void *)(v0 + 1424) = v74;
    *(void *)(v0 + 1432) = (v69 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v74(v110, v107, v109);
    uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003ED6C8 + dword_1003ED6C8);
    swift_bridgeObjectRetain();
    uint64_t v75 = (void *)swift_task_alloc();
    *(void *)(v0 + 1440) = v75;
    *uint64_t v75 = v0;
    v75[1] = sub_10006E068;
    uint64_t v76 = *(void *)(v0 + 1144);
    uint64_t v77 = *(void *)(v0 + 904);
    return v111(v76, v73, v77);
  }
  else
  {
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    sub_100044058(v88, (uint64_t)qword_10040B4B8);
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      uint64_t v112 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v91 = 136446210;
      *(void *)(v0 + 848) = sub_100037004(0xD00000000000001CLL, 0x8000000100373720, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "%{public}s no handle with serverID!", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v92 = *(void *)(v0 + 1160);
    uint64_t v93 = *(void *)(v0 + 1136);
    uint64_t v94 = *(void *)(v0 + 1128);
    (*(void (**)(void, void, void))(*(void *)(v0 + 888) + 16))(*(void *)(v0 + 896), *(void *)(v0 + 864), *(void *)(v0 + 880));
    swift_bridgeObjectRetain();
    sub_100071610((uint64_t)_swiftEmptyArrayStorage);
    FriendshipRequestResult.init(request:result:requestIds:)();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
    return v95();
  }
}

uint64_t sub_10006E068(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = *v5;
  uint64_t v8 = *v5;
  *(void *)(v8 + 1448) = a1;
  *(void *)(v8 + 1456) = a2;
  *(void *)(v8 + 1464) = a3;
  *(void *)(v8 + 1472) = v4;
  swift_task_dealloc();
  uint64_t v9 = *(void *)(v7 + 872);
  if (v4)
  {
    unint64_t v10 = sub_10006E51C;
  }
  else
  {
    *(unsigned char *)(v8 + 1508) = a4 & 1;
    unint64_t v10 = sub_10006E1BC;
  }
  return _swift_task_switch(v10, v9, 0);
}

uint64_t sub_10006E1BC()
{
  char v1 = *(unsigned char *)(v0 + 1508);
  unint64_t v2 = *(void *)(v0 + 1464);
  uint64_t v3 = *(void *)(v0 + 1456);
  uint64_t v4 = *(void *)(v0 + 1448);
  uint64_t v5 = *(void *)(v0 + 944);
  *(void *)(v0 + 776) = *(void *)(v0 + 936);
  *(void *)(v0 + 784) = sub_100046FAC(&qword_1003ECD50, (void (*)(uint64_t))type metadata accessor for FriendshipEndpoint);
  uint64_t v6 = sub_10003E0F4((uint64_t *)(v0 + 752));
  sub_100072860(v5, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  *(void *)(v0 + 736) = &type metadata for FriendshipStopOfferRequest;
  *(void *)(v0 + 744) = sub_100072304();
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 712) = v7;
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v3;
  *(void *)(v7 + 32) = v2;
  *(unsigned char *)(v7 + 40) = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v3, v2);
  Account.dsid.getter();
  Account.appToken.getter();
  *(void *)(v0 + 696) = type metadata accessor for BasicCredential();
  *(void *)(v0 + 704) = &protocol witness table for BasicCredential;
  sub_10003E0F4((uint64_t *)(v0 + 672));
  BasicCredential.init(username:password:)();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 1480) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10006E3B4;
  return sub_100103CA0(v0 + 16, v0 + 752, v0 + 712, v0 + 672);
}

uint64_t sub_10006E3B4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 872);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_10006F2D8;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 752;
    uint64_t v8 = v2 + 712;
    uint64_t v9 = *(void *)(v2 + 872);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v8);
    sub_1000233E4(v7);
    uint64_t v5 = sub_10006E730;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10006E51C()
{
  char v1 = (void (*)(uint64_t, uint64_t))v0[176];
  uint64_t v2 = v0[145];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[118];
  swift_release();
  swift_release();
  sub_100072800(v4, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v1(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10006E730()
{
  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 1048);
    uint64_t v4 = *(void *)(v0 + 960);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    sub_100013B50(v0 + 192, v0 + 592, &qword_1003ECD88);
    uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
    v3 += 16;
    BOOL v63 = v6;
    uint64_t v61 = *(void *)(v3 + 56);
    unsigned int v52 = enum case for FriendshipRequestStatus.pending(_:);
    uint64_t v59 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
    unsigned int v53 = enum case for FriendshipRequestStatus.success(_:);
    unsigned int v54 = enum case for FriendshipRequestError.commandFailed(_:);
    unsigned int v56 = enum case for FriendshipRequestStatus.failure(_:);
    unsigned int v55 = enum case for FriendshipRequestError.invalidResponse(_:);
    uint64_t v7 = (void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
    uint64_t v58 = v4;
    char v57 = (void (**)(uint64_t, uint64_t))(v3 - 8);
    uint64_t v8 = *(void **)(v0 + 1400);
    swift_bridgeObjectRetain();
    while (1)
    {
      v63(*(void *)(v0 + 1056), v5, *(void *)(v0 + 1040));
      sub_100013B50(v0 + 592, v0 + 632, &qword_1003ECD88);
      if (*(void *)(v0 + 632) == 1) {
        break;
      }
      int v13 = *(unsigned __int8 *)(v0 + 648);
      if ((v13 - 3) < 0x12 || v13 == 0)
      {
        uint64_t v15 = *(void *)(v0 + 976);
        uint64_t v16 = type metadata accessor for FriendshipRequestError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v15, v54, v16);
        goto LABEL_13;
      }
      uint64_t v17 = v53;
      if (v13 != 1) {
        uint64_t v17 = v52;
      }
LABEL_14:
      uint64_t v18 = *(void *)(v0 + 1056);
      uint64_t v19 = *(void *)(v0 + 976);
      unint64_t v20 = *(void *)(v0 + 968);
      uint64_t v21 = *(void *)(v0 + 952);
      (*v59)(v19, v17, v21);
      uint64_t v22 = *v7;
      (*v7)(v20, v19, v21);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = v8;
      unint64_t v25 = sub_100025614(v18);
      uint64_t v26 = v8[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      char v29 = v24;
      if (v8[3] >= v28)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v24) {
            goto LABEL_3;
          }
        }
        else
        {
          sub_100125DC4();
          uint64_t v8 = v65;
          if (v29) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        uint64_t v30 = *(void *)(v0 + 1056);
        sub_10013F284(v28, isUniquelyReferenced_nonNull_native);
        uint64_t v8 = v65;
        unint64_t v31 = sub_100025614(v30);
        if ((v29 & 1) != (v32 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v25 = v31;
        if (v29)
        {
LABEL_3:
          (*(void (**)(unint64_t, void, void))(v58 + 40))(v8[7] + *(void *)(v58 + 72) * v25, *(void *)(v0 + 968), *(void *)(v0 + 952));
          goto LABEL_4;
        }
      }
      uint64_t v33 = *(void *)(v0 + 1056);
      uint64_t v34 = *(void *)(v0 + 1040);
      uint64_t v35 = *(void *)(v0 + 968);
      uint64_t v36 = *(void *)(v0 + 952);
      v8[(v25 >> 6) + 8] |= 1 << v25;
      v63(v8[6] + v25 * v61, v33, v34);
      v22(v8[7] + *(void *)(v58 + 72) * v25, v35, v36);
      uint64_t v37 = v8[2];
      BOOL v38 = __OFADD__(v37, 1);
      uint64_t v39 = v37 + 1;
      if (v38) {
        goto LABEL_39;
      }
      v8[2] = v39;
LABEL_4:
      uint64_t v9 = *(void *)(v0 + 1056);
      uint64_t v10 = *(void *)(v0 + 1040);
      swift_bridgeObjectRelease();
      (*v57)(v9, v10);
      v5 += v61;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
    }
    uint64_t v11 = *(void *)(v0 + 976);
    uint64_t v12 = type metadata accessor for FriendshipRequestError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v11, v55, v12);
LABEL_13:
    uint64_t v17 = v56;
    goto LABEL_14;
  }
LABEL_28:
  uint64_t v22 = (void (*)(unint64_t, uint64_t, uint64_t))(v0 + 16);
  if (qword_1003EC070 != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v40 = type metadata accessor for Logger();
  sub_100044058(v40, (uint64_t)qword_10040B7C8);
  sub_100036A4C(v22);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v65 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446466;
    *(void *)(v0 + 832) = sub_100037004(0xD00000000000001CLL, 0x8000000100373720, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2080;
    sub_100036A4C(v22);
    uint64_t v44 = sub_10003338C();
    unint64_t v46 = v45;
    sub_1000367D8(v22);
    *(void *)(v0 + 840) = sub_100037004(v44, v46, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8(v22);
    sub_1000367D8(v22);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "CommandManager %{public}s\nresponse: %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000367D8(v22);
    sub_1000367D8(v22);
  }

  unint64_t v47 = *(void *)(v0 + 1464);
  uint64_t v48 = *(void *)(v0 + 1456);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v0 + 1408);
  uint64_t v60 = *(void *)(v0 + 1128);
  uint64_t v62 = *(void *)(v0 + 1160);
  uint64_t v49 = *(void *)(v0 + 944);
  (*(void (**)(void, void, void))(v0 + 1424))(*(void *)(v0 + 896), *(void *)(v0 + 864), *(void *)(v0 + 880));
  swift_bridgeObjectRetain();
  sub_100071610((uint64_t)_swiftEmptyArrayStorage);
  FriendshipRequestResult.init(request:result:requestIds:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v48, v47);
  sub_100072800(v49, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v64(v62, v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v50 = *(uint64_t (**)(void))(v0 + 8);
  return v50();
}

uint64_t sub_10006EF44()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006F0FC()
{
  uint64_t v1 = v0[145];
  uint64_t v2 = v0[142];
  uint64_t v3 = v0[141];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10006F2D8()
{
  unint64_t v1 = v0[183];
  uint64_t v2 = v0[182];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[176];
  uint64_t v4 = v0[145];
  uint64_t v5 = v0[141];
  uint64_t v6 = v0[118];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100072800(v6, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 89));
  sub_1000233E4((uint64_t)(v0 + 94));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006F52C(uint64_t a1, uint64_t a2)
{
  v3[105] = v2;
  v3[104] = a2;
  v3[103] = a1;
  uint64_t v4 = type metadata accessor for URLComponents();
  v3[106] = v4;
  v3[107] = *(void *)(v4 - 8);
  v3[108] = swift_task_alloc();
  v3[109] = type metadata accessor for FriendshipEndpoint();
  v3[110] = swift_task_alloc();
  sub_100044014(&qword_1003ECCF0);
  v3[111] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v3[112] = v5;
  v3[113] = *(void *)(v5 - 8);
  v3[114] = swift_task_alloc();
  v3[115] = swift_task_alloc();
  v3[116] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[117] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10006F6FC;
  return daemon.getter();
}

uint64_t sub_10006F6FC(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[118] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[119] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[120] = v4;
  uint64_t v5 = type metadata accessor for AccountService(0);
  uint64_t v6 = sub_100046FAC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[121] = v6;
  uint64_t v7 = sub_100046FAC(&qword_1003ECCF8, (void (*)(uint64_t))type metadata accessor for AccountService);
  *uint64_t v3 = v9;
  v3[1] = sub_10006F8DC;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10006F8DC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[122] = a1;
  v3[123] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[105];
    return _swift_task_switch(sub_100070D20, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[124] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10006FA6C;
    uint64_t v7 = v3[111];
    return sub_1000078BC(v7);
  }
}

uint64_t sub_10006FA6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 840);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006FB7C, v1, 0);
}

uint64_t sub_10006FB7C()
{
  uint64_t v1 = v0[113];
  uint64_t v2 = v0[112];
  uint64_t v3 = v0[111];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003ECCF0);
    if (qword_1003EC080 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100044058(v4, (uint64_t)qword_10040B7F8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary account to stop sharing!", v7, 2u);
      swift_slowDealloc();
    }

    sub_1000715BC();
    swift_allocError();
    *uint64_t v8 = 3;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[116];
    uint64_t v12 = v0[115];
    uint64_t v25 = v0[110];
    uint64_t v26 = v0[114];
    uint64_t v13 = v0[108];
    uint64_t v14 = v0[107];
    uint64_t v23 = v11;
    uint64_t v24 = v0[106];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v11, v3, v2);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    v22(v12, v11, v2);
    sub_100071040(v13);
    uint64_t v15 = (void (*)(void *, void))URLComponents.path.modify();
    v16._countAndFlagsBits = 0x74726F706D69;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
    v15(v0 + 89, 0);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v0[125] = v17;
    v0[126] = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v17(v12, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v25, v13, v24);
    v22(v26, v23, v2);
    BOOL v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003ED320 + dword_1003ED320);
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)swift_task_alloc();
    v0[127] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10006FF24;
    uint64_t v19 = v0[114];
    uint64_t v20 = v0[104];
    uint64_t v21 = v0[103];
    return v27(v19, v21, v20);
  }
}

uint64_t sub_10006FF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[128] = a1;
  v5[129] = a2;
  v5[130] = a3;
  v5[131] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[105];
    return _swift_task_switch(sub_1000703A4, v6, 0);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v5[132] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_10007009C;
    return daemon.getter();
  }
}

uint64_t sub_10007009C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 1064) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 1072) = v5;
  uint64_t v6 = type metadata accessor for DataManager(0);
  uint64_t v7 = sub_100046FAC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  void *v5 = v4;
  v5[1] = sub_100070250;
  uint64_t v8 = *(void *)(v2 + 968);
  uint64_t v9 = *(void *)(v2 + 960);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100070250(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1080) = a1;
  *(void *)(v4 + 1088) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 840);
  swift_release();
  if (v1) {
    uint64_t v6 = sub_100070DD8;
  }
  else {
    uint64_t v6 = sub_100070498;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000703A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[125];
  uint64_t v2 = v0[116];
  uint64_t v3 = v0[112];
  uint64_t v4 = v0[110];
  swift_release();
  sub_100072800(v4, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100070498()
{
  unint64_t v1 = v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[110];
  v0[77] = v0[109];
  v0[78] = sub_100046FAC(&qword_1003ECD50, (void (*)(uint64_t))type metadata accessor for FriendshipEndpoint);
  uint64_t v5 = sub_10003E0F4(v0 + 74);
  sub_100072860(v4, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v0[82] = (uint64_t)&type metadata for FriendshipImportRequest;
  v0[83] = sub_10007225C();
  v0[79] = v3;
  v0[80] = v2;
  v0[81] = v1;
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  Account.dsid.getter();
  Account.appToken.getter();
  v0[87] = type metadata accessor for BasicCredential();
  v0[88] = (uint64_t)&protocol witness table for BasicCredential;
  sub_10003E0F4(v0 + 84);
  BasicCredential.init(username:password:)();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[137] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100070670;
  return sub_100103CA0((uint64_t)(v0 + 2), (uint64_t)(v0 + 74), (uint64_t)(v0 + 79), (uint64_t)(v0 + 84));
}

uint64_t sub_100070670()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 672;
  *(void *)(*v1 + 1104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 840);
    sub_10000A520(v3, &qword_1003ECD18);
    uint64_t v5 = sub_100070EF4;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = v2 + 632;
    uint64_t v8 = v2 + 592;
    uint64_t v9 = *(void *)(v2 + 840);
    sub_10000A520(v3, &qword_1003ECD18);
    sub_1000233E4(v7);
    sub_1000233E4(v8);
    uint64_t v5 = sub_1000707D8;
    uint64_t v6 = v9;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000707D8()
{
  uint64_t v37 = v0;
  if (qword_1003EC070 != -1) {
    swift_once();
  }
  unint64_t v1 = v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B7C8);
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  sub_100036A4C(v0 + 2);
  swift_bridgeObjectRetain();
  sub_1000287E4(v2, v1);
  sub_100036A4C(v0 + 2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[130];
  uint64_t v8 = v0[129];
  uint64_t v9 = v0[128];
  if (v6)
  {
    unsigned int loga = v4;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446722;
    v0[100] = sub_100037004(0xD000000000000014, 0x80000001003736E0, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2082;
    v0[93] = v9;
    v0[94] = v8;
    v0[95] = v7;
    sub_1000722B0();
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[101] = sub_100037004(v11, v12, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000440E8(v8, v7);
    swift_bridgeObjectRelease();
    sub_1000440E8(v8, v7);
    *(_WORD *)(v10 + 22) = 2080;
    sub_100036A4C(v0 + 2);
    uint64_t v13 = sub_10003338C();
    unint64_t v15 = v14;
    sub_1000367D8(v0 + 2);
    v0[102] = sub_100037004(v13, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8(v0 + 2);
    sub_1000367D8(v0 + 2);
    uint64_t v4 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v5, "CommandManager %{public}s\nrequest: %{public}s\nresponse: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1000440E8(v8, v7);
    swift_bridgeObjectRelease();
    sub_1000440E8(v8, v7);
    sub_1000367D8(v0 + 2);
    sub_1000367D8(v0 + 2);
  }

  if (v0[24] == 1)
  {
    unint64_t v16 = v0[130];
    uint64_t v17 = v0[129];
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v17, v16);
    sub_1000367D8(v0 + 2);
  }
  else
  {
    uint64_t v19 = v0[27];
    uint64_t v18 = v0[28];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000367D8(v0 + 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18)
    {
      v0[98] = v19;
      v0[99] = v18;
      v0[96] = 47;
      v0[97] = 0xE100000000000000;
      sub_10004650C();
      uint64_t v20 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        uint64_t v22 = *(NSObject **)(v20 + 16 * v21 + 16);
        uint64_t v23 = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v33 = v23;
      os_log_t log = v22;
      unint64_t v26 = v0[130];
      uint64_t v27 = v0[129];
      swift_bridgeObjectRelease();
      sub_1000440E8(v27, v26);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_15;
    }
    unint64_t v24 = v0[130];
    uint64_t v25 = v0[129];
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000440E8(v25, v24);
  }
  uint64_t v33 = 0;
  os_log_t log = 0;
LABEL_15:
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v0[125];
  uint64_t v29 = v0[116];
  uint64_t v30 = v0[112];
  sub_100072800(v0[110], (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v28(v29, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v31 = (uint64_t (*)(os_log_t, uint64_t))v0[1];
  return v31(log, v33);
}

uint64_t sub_100070D20()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100070DD8()
{
  unint64_t v1 = v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[125];
  uint64_t v4 = v0[116];
  uint64_t v5 = v0[112];
  uint64_t v6 = v0[110];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100072800(v6, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v3(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100070EF4()
{
  unint64_t v1 = v0[130];
  uint64_t v2 = v0[129];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v0[125];
  uint64_t v4 = v0[116];
  uint64_t v5 = v0[112];
  uint64_t v6 = v0[110];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_100072800(v6, (uint64_t (*)(void))type metadata accessor for FriendshipEndpoint);
  v3(v4, v5);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 74));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100071040@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v1 = sub_100044014(&qword_1003ECD68);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = Account.peopleURL.getter();
  if (!v12) {
    goto LABEL_4;
  }
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  URLComponents.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A520((uint64_t)v3, &qword_1003ECD68);
LABEL_4:
    URLComponents.init()();
    URLComponents.scheme.setter();
    Account.appHostName.getter();
    URLComponents.host.setter();
    URLComponents.path.setter();
    if (qword_1003EC4B8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100044058(v15, (uint64_t)qword_10040C440);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_beginAccess();
      sub_100046FAC(&qword_1003ECD70, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_100037004(v19, v20, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fallback to hardcoded URL: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v30, v8, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v22(v10, v3, v4);
  if (qword_1003EC4B8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100044058(v23, (uint64_t)qword_10040C440);
  swift_bridgeObjectRetain();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v29 = v4;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v22;
    uint64_t v27 = (uint8_t *)v26;
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100037004(v13, v14, v33);
    uint64_t v4 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Using people URL: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v22 = v28;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(v30, v10, v4);
}

unint64_t sub_1000715BC()
{
  unint64_t result = qword_1003ECD48;
  if (!qword_1003ECD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD48);
  }
  return result;
}

unint64_t sub_100071610(uint64_t a1)
{
  uint64_t v2 = sub_100044014(&qword_1003ECD90);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100044014(&qword_1003ECD98);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000723A8(v12, (uint64_t)v5);
    unint64_t result = sub_100071804((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Handle();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    *uint64_t v19 = *(void *)v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100071804(uint64_t a1)
{
  type metadata accessor for Handle();
  sub_100046FAC(&qword_1003ECDA0, (void (*)(uint64_t))&type metadata accessor for Handle);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10007189C(a1, v2);
}

unint64_t sub_10007189C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for Handle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    unint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100046FAC(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

char *sub_100071A5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Handle();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v31 - v11;
  unint64_t result = (char *)_swiftEmptyArrayStorage;
  unint64_t v46 = (char *)_swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(a1 + 16);
  if (!v37) {
    return result;
  }
  uint64_t v14 = 0;
  unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v15 = v5 + 16;
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64);
  uint64_t v18 = *(void *)(v15 + 56);
  uint64_t v35 = a2;
  uint64_t v36 = a1 + v17;
  os_log_type_t v42 = (char *)&v31 - v11;
  uint64_t v43 = (void (**)(char *, uint64_t))(v15 - 8);
  uint64_t v38 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  unint64_t v39 = v17;
  uint64_t v44 = v18;
  unint64_t v45 = v16;
  uint64_t v32 = v18 + v17;
  uint64_t v41 = v15;
  v16(v12, a1 + v17, v4);
  while (1)
  {
    uint64_t v19 = *a2;
    uint64_t v20 = *(void *)(*a2 + 16);
    if (!v20) {
      goto LABEL_16;
    }
    v45(v10, v19 + v39, v4);
    sub_100046FAC(&qword_1003ECDA8, (void (*)(uint64_t))&type metadata accessor for Handle);
    swift_bridgeObjectRetain();
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    BOOL v22 = *v43;
    (*v43)(v10, v4);
    if ((v21 & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    a2 = v35;
LABEL_4:
    v22(v12, v4);
LABEL_5:
    if (++v14 == v37) {
      return v46;
    }
    v45(v12, v36 + v44 * v14, v4);
  }
  uint64_t v34 = v19;
  if (v20 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v27 = *v38;
    (*v38)(v40, v12, v4);
    uint64_t v28 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100020D44(0, *((void *)v28 + 2) + 1, 1);
      uint64_t v28 = v46;
    }
    unint64_t v30 = *((void *)v28 + 2);
    unint64_t v29 = *((void *)v28 + 3);
    if (v30 >= v29 >> 1)
    {
      sub_100020D44(v29 > 1, v30 + 1, 1);
      uint64_t v28 = v46;
    }
    *((void *)v28 + 2) = v30 + 1;
    v27(&v28[v39 + v30 * v44], v40, v4);
    unint64_t v46 = v28;
    uint64_t v12 = v42;
    a2 = v35;
    goto LABEL_5;
  }
  uint64_t v33 = v14;
  uint64_t v23 = v34 + v32;
  uint64_t v24 = 1;
  while (1)
  {
    unint64_t result = (char *)((uint64_t (*)(char *, uint64_t, uint64_t))v45)(v10, v23, v4);
    uint64_t v25 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    v22(v10, v4);
    if (v26)
    {
      swift_bridgeObjectRelease();
      a2 = v35;
      uint64_t v12 = v42;
      uint64_t v14 = v33;
      goto LABEL_4;
    }
    ++v24;
    v23 += v44;
    if (v25 == v20)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = v42;
      uint64_t v14 = v33;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

void sub_100071E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = sub_100044014(&qword_1003ECDB8);
  __chkstk_darwin(v26);
  uint64_t v4 = type metadata accessor for Handle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v27 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FriendshipRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B4B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v27, a1, v4);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = v4;
    int v24 = v14;
    uint64_t v16 = v15;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v29 = v25;
    *(_DWORD *)uint64_t v16 = 136446723;
    FriendshipRequest.requestType.getter();
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v28 = sub_100037004(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    *(_WORD *)(v16 + 12) = 2160;
    uint64_t v28 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    uint64_t v19 = v27;
    uint64_t v20 = Handle.identifier.getter();
    uint64_t v28 = sub_100037004(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v23);
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v24, "sendFriendshipOffer type: %{public}s\nto handle: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
  }
}

unint64_t sub_10007225C()
{
  unint64_t result = qword_1003ECD58;
  if (!qword_1003ECD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD58);
  }
  return result;
}

unint64_t sub_1000722B0()
{
  unint64_t result = qword_1003ECD60;
  if (!qword_1003ECD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD60);
  }
  return result;
}

unint64_t sub_100072304()
{
  unint64_t result = qword_1003ECD80;
  if (!qword_1003ECD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECD80);
  }
  return result;
}

uint64_t sub_100072358()
{
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_100044090(*(void *)(v0 + 24), v1);
  }

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000723A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014(&qword_1003ECD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100072410()
{
  unint64_t result = qword_1003ECDC0;
  if (!qword_1003ECDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECDC0);
  }
  return result;
}

unint64_t sub_100072464()
{
  unint64_t result = qword_1003ECDC8;
  if (!qword_1003ECDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECDC8);
  }
  return result;
}

unint64_t sub_1000724B8()
{
  unint64_t result = qword_1003ECDD0;
  if (!qword_1003ECDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003ECDD0);
  }
  return result;
}

uint64_t sub_10007250C()
{
  uint64_t v1 = type metadata accessor for FriendshipRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v6 = v0 + v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 176) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 280))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 576, v3 | 7);
}

uint64_t sub_1000726D4(int a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FriendshipRequest() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100018CD0;
  return sub_10006565C(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100072800(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100072860(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000728C8()
{
  unint64_t result = qword_1003ECE20;
  if (!qword_1003ECE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECE20);
  }
  return result;
}

unint64_t sub_100072920()
{
  unint64_t result = qword_1003ECE28;
  if (!qword_1003ECE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECE28);
  }
  return result;
}

void *sub_100072974(uint64_t a1)
{
  uint64_t v20 = type metadata accessor for Handle();
  uint64_t v3 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v18[1] = v1;
    unint64_t v21 = _swiftEmptyArrayStorage;
    sub_10003CB84(0, v6, 0);
    uint64_t v8 = *(void *)(type metadata accessor for Friend() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v19 = *(void *)(v8 + 72);
    uint64_t v10 = (void (**)(char *, uint64_t))(v3 + 8);
    do
    {
      Friend.handle.getter();
      uint64_t v11 = Handle.identifier.getter();
      uint64_t v13 = v12;
      (*v10)(v5, v20);
      uint64_t v7 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003CB84(0, v7[2] + 1, 1);
        uint64_t v7 = v21;
      }
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_10003CB84(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v21;
      }
      v7[2] = v15 + 1;
      uint64_t v16 = &v7[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      v9 += v19;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_100072B80(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for Destination();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v14[1] = v1;
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100245DE8(0, v6, 0);
    uint64_t v7 = v17;
    uint64_t v8 = *(void *)(type metadata accessor for Handle() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v15 = *(void *)(v8 + 72);
    do
    {
      char v10 = Handle.isPhoneNumber.getter();
      Handle.identifier.getter();
      if (v10) {
        Destination.init(phoneNumber:)();
      }
      else {
        Destination.init(email:)();
      }
      uint64_t v17 = v7;
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_100245DE8(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v17;
      }
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v12, v5, v16);
      v9 += v15;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_100072D80(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(v4 + 1328) = v3;
  *(double *)(v4 + 1320) = a3;
  *(void *)(v4 + 1312) = a2;
  *(void *)(v4 + 1304) = a1;
  *(void *)(v4 + 1336) = *v3;
  uint64_t v5 = type metadata accessor for Handle();
  *(void *)(v4 + 1344) = v5;
  *(void *)(v4 + 1352) = *(void *)(v5 - 8);
  *(void *)(v4 + 1360) = swift_task_alloc();
  return _swift_task_switch(sub_100072E74, v3, 0);
}

uint64_t sub_100072E74()
{
  sub_100013B50(*(void *)(v0 + 1312), v0 + 16, &qword_1003ECDF0);
  if (sub_10005F070(v0 + 16) == 1) {
    goto LABEL_27;
  }
  memcpy((void *)(v0 + 592), (const void *)(v0 + 16), 0x240uLL);
  sub_100013B50(v0 + 768, v0 + 1248, &qword_1003ECD88);
  sub_100013B50(v0 + 1248, v0 + 1208, &qword_1003ECD88);
  if (*(void *)(v0 + 1208) == 1) {
    goto LABEL_27;
  }
  long long v1 = *(_OWORD *)(v0 + 1224);
  *(_OWORD *)(v0 + 1168) = *(_OWORD *)(v0 + 1208);
  *(_OWORD *)(v0 + 1184) = v1;
  *(void *)(v0 + 1200) = *(void *)(v0 + 1240);
  sub_100013B50(v0 + 1176, v0 + 1288, &qword_1003ECF78);
  sub_100013B50(v0 + 1288, v0 + 1296, &qword_1003ECF78);
  uint64_t v2 = *(void *)(v0 + 1296);
  if (!v2) {
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = (void *)sub_100101784((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 1352);
    unint64_t v7 = *(void *)(v0 + 1304)
       + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    char v50 = (void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    unint64_t v46 = (void (**)(unint64_t, uint64_t, uint64_t))(v6 + 40);
    unint64_t v47 = (uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 32);
    swift_bridgeObjectRetain();
    uint64_t v48 = v2;
    uint64_t v49 = v8;
    while (1)
    {
      uint64_t v9 = Handle.identifier.getter();
      if (*(void *)(v2 + 16) && (unint64_t v11 = sub_10003B888(v9, v10), (v12 & 1) != 0))
      {
        uint64_t v13 = *(void *)(v0 + 1360);
        uint64_t v14 = *(void *)(v0 + 1344);
        uint64_t v15 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v11);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        (*v50)(v13, v7, v14);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v26 = sub_10003B888(v17, v16);
        uint64_t v27 = v4[2];
        BOOL v28 = (v19 & 1) == 0;
        uint64_t v29 = (void *)(v27 + v28);
        if (__OFADD__(v27, v28))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return withTaskGroup<A, B>(of:returning:isolation:body:)(v29, v19, v20, v21, v22, v23, v24, v25);
        }
        char v30 = (char)v19;
        if (v4[3] >= (uint64_t)v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100125DF8();
          }
        }
        else
        {
          sub_10013F2A4((uint64_t)v29, isUniquelyReferenced_nonNull_native);
          unint64_t v31 = sub_10003B888(v17, v16);
          if ((v30 & 1) != (v32 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v26 = v31;
        }
        uint64_t v33 = *(void *)(v0 + 1360);
        uint64_t v34 = *(void *)(v0 + 1344);
        if (v30)
        {
          uint64_t v8 = v49;
          (*v46)(v4[7] + v26 * v49, v33, v34);
        }
        else
        {
          v4[(v26 >> 6) + 8] |= 1 << v26;
          uint64_t v35 = (uint64_t *)(v4[6] + 16 * v26);
          *uint64_t v35 = v17;
          v35[1] = v16;
          uint64_t v8 = v49;
          uint64_t v29 = (void *)(*v47)(v4[7] + v26 * v49, v33, v34);
          uint64_t v36 = v4[2];
          BOOL v37 = __OFADD__(v36, 1);
          uint64_t v38 = v36 + 1;
          if (v37) {
            goto LABEL_34;
          }
          void v4[2] = v38;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v7 += v8;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  *(void *)(v0 + 1368) = v4;
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
LABEL_27:
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  uint64_t v39 = *(void *)(v0 + 1336);
  uint64_t v40 = *(void *)(v0 + 1328);
  uint64_t v41 = *(void *)(v0 + 1320);
  uint64_t v42 = sub_100080EA0(qword_1003ECC70, (void (*)(uint64_t))type metadata accessor for CommandManager);
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 1376) = v43;
  v43[2] = v4;
  _OWORD v43[3] = v40;
  v43[4] = v41;
  v43[5] = v39;
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 1384) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_100073344;
  uint64_t v19 = (char *)&type metadata for () + 8;
  uint64_t v23 = &unk_1003ECF88;
  uint64_t v20 = (char *)&type metadata for () + 8;
  uint64_t v21 = v40;
  uint64_t v22 = v42;
  int v24 = v43;
  uint64_t v25 = (char *)&type metadata for () + 8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v29, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_100073344()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1328);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100073494, v1, 0);
}

uint64_t sub_100073494()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000734F4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 104) = a6;
  *(double *)(v6 + 96) = a1;
  *(void *)(v6 + 80) = a4;
  *(void *)(v6 + 88) = a5;
  *(void *)(v6 + 72) = a3;
  uint64_t v8 = type metadata accessor for Handle();
  *(void *)(v6 + 112) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 120) = v9;
  *(void *)(v6 + 128) = *(void *)(v9 + 64);
  *(void *)(v6 + 136) = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003F3C10);
  *(void *)(v6 + 144) = swift_task_alloc();
  *(void *)(v6 + 152) = swift_task_alloc();
  sub_100044014(&qword_1003ECE00);
  *(void *)(v6 + 160) = swift_task_alloc();
  *(void *)(v6 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_10007364C, a5, 0);
}

uint64_t sub_10007364C()
{
  unint64_t v47 = v0 + 2;
  uint64_t v51 = v0[21];
  uint64_t v49 = v0[20];
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v45 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & v2;
  uint64_t v48 = v0[10];
  uint64_t v53 = v0[15];
  uint64_t v50 = v0[16] + 7;
  int64_t v46 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v52 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v52 << 6);
LABEL_7:
      uint64_t v10 = *(char **)(v61 + 160);
      uint64_t v11 = *(void *)(v61 + 112);
      char v12 = (void *)(*(void *)(v48 + 48) + 16 * v9);
      uint64_t v13 = v12[1];
      *(void *)uint64_t v10 = *v12;
      *(void *)(v49 + 8) = v13;
      unint64_t v14 = *(void *)(v48 + 56) + *(void *)(v53 + 72) * v9;
      uint64_t v15 = sub_100044014(&qword_1003ECE10);
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(&v10[*(int *)(v15 + 48)], v14, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v16 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 < v46)
    {
      unint64_t v17 = *(void *)(v45 + 8 * v16);
      if (v17) {
        goto LABEL_11;
      }
      int64_t v18 = v52 + 2;
      ++v52;
      if (v16 + 1 < v46)
      {
        unint64_t v17 = *(void *)(v45 + 8 * v18);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v52 = v16 + 1;
        if (v16 + 2 < v46)
        {
          unint64_t v17 = *(void *)(v45 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
            goto LABEL_11;
          }
          int64_t v18 = v16 + 3;
          int64_t v52 = v16 + 2;
          if (v16 + 3 < v46)
          {
            unint64_t v17 = *(void *)(v45 + 8 * v18);
            if (v17)
            {
LABEL_14:
              int64_t v16 = v18;
LABEL_11:
              unint64_t v5 = (v17 - 1) & v17;
              unint64_t v9 = __clz(__rbit64(v17)) + (v16 << 6);
              int64_t v52 = v16;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v16 >= v46)
              {
                int64_t v52 = v46 - 1;
                goto LABEL_25;
              }
              unint64_t v17 = *(void *)(v45 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_11;
              }
            }
LABEL_39:
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_25:
    uint64_t v19 = *(void *)(v61 + 160);
    uint64_t v20 = sub_100044014(&qword_1003ECE10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    unint64_t v5 = 0;
LABEL_26:
    uint64_t v21 = *(void *)(v61 + 168);
    sub_100013B50(*(void *)(v61 + 160), v21, &qword_1003ECE00);
    uint64_t v22 = sub_100044014(&qword_1003ECE10);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
    int v24 = *(uint64_t **)(v61 + 168);
    if (v23 == 1) {
      break;
    }
    uint64_t v25 = *(void *)(v61 + 152);
    uint64_t v55 = v25;
    uint64_t v60 = *(void *)(v61 + 144);
    unint64_t v26 = *(char **)(v61 + 136);
    uint64_t v27 = *(void *)(v61 + 112);
    uint64_t v54 = v27;
    uint64_t v28 = *(void *)(v61 + 96);
    uint64_t v58 = *(void *)(v61 + 88);
    uint64_t v59 = *(void *)(v61 + 104);
    uint64_t v57 = *v24;
    uint64_t v56 = *(void *)(v51 + 8);
    uint64_t v29 = (char *)v24 + *(int *)(v22 + 48);
    uint64_t v30 = type metadata accessor for TaskPriority();
    uint64_t v31 = *(void *)(v30 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v25, 1, 1, v30);
    char v32 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
    v32((uint64_t)v26, v29, v27);
    unint64_t v33 = (*(unsigned __int8 *)(v53 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    unint64_t v34 = (v50 + v33) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = (void *)swift_allocObject();
    void v36[2] = 0;
    v36[3] = 0;
    v36[4] = v57;
    v36[5] = v56;
    v32((uint64_t)v36 + v33, v26, v54);
    *(void *)((char *)v36 + v34) = v58;
    *(void *)((char *)v36 + v35) = v28;
    *(void *)((char *)v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8)) = v59;
    sub_100081214(v55, v60);
    LODWORD(v35) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v60, 1, v30);
    swift_retain();
    uint64_t v37 = *(void *)(v61 + 144);
    if (v35 == 1)
    {
      sub_10000A520(*(void *)(v61 + 144), (uint64_t *)&unk_1003F3C10);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v37, v30);
    }
    if (v36[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v38 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v40 = v39;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v41 = **(void **)(v61 + 72);
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = &unk_1003ECF98;
    *(void *)(v42 + 24) = v36;
    uint64_t v43 = (void *)(v40 | v38);
    if (v40 | v38)
    {
      uint64_t v43 = v47;
      void *v47 = 0;
      v47[1] = 0;
      *(void *)(v61 + 32) = v38;
      *(void *)(v61 + 40) = v40;
    }
    uint64_t v7 = *(void *)(v61 + 152);
    *(void *)(v61 + 48) = 1;
    *(void *)(v61 + 56) = v43;
    *(void *)(v61 + 64) = v41;
    swift_task_create();
    swift_release();
    uint64_t result = sub_10000A520(v7, (uint64_t *)&unk_1003F3C10);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v61 + 8);
  return v44();
}

uint64_t sub_100073CD4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(double *)(v8 + 104) = a1;
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a5;
  *(void *)(v8 + 80) = a6;
  uint64_t v9 = type metadata accessor for Handle();
  *(void *)(v8 + 112) = v9;
  *(void *)(v8 + 120) = *(void *)(v9 - 8);
  *(void *)(v8 + 128) = swift_task_alloc();
  *(void *)(v8 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100073DAC, 0, 0);
}

uint64_t sub_100073DAC()
{
  uint64_t v27 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = *((void *)v0 + 17);
  uint64_t v2 = *((void *)v0 + 14);
  uint64_t v3 = *((void *)v0 + 15);
  uint64_t v4 = *((void *)v0 + 11);
  uint64_t v5 = type metadata accessor for Logger();
  *((void *)v0 + 18) = sub_100044058(v5, (uint64_t)qword_10040B4B8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *((void *)v0 + 19) = v6;
  *((void *)v0 + 20) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *((void *)v0 + 17);
  uint64_t v11 = *((void *)v0 + 14);
  uint64_t v12 = *((void *)v0 + 15);
  unint64_t v13 = *((void *)v0 + 10);
  if (v9)
  {
    uint64_t v24 = *((void *)v0 + 9);
    uint64_t v25 = *((void *)v0 + 14);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558787;
    *((void *)v0 + 5) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    swift_bridgeObjectRetain();
    *((void *)v0 + 6) = sub_100037004(v24, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2160;
    *((void *)v0 + 7) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 32) = 2081;
    uint64_t v15 = Handle.identifier.getter();
    *((void *)v0 + 8) = sub_100037004(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v25);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CommandManager server response contains mapping packet with token %{private,mask.hash}s for handleId:%{private,mask.hash}s", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v10, v11);
  }

  *((void *)v0 + 21) = v17;
  int64_t v18 = (void *)swift_task_alloc();
  *((void *)v0 + 22) = v18;
  *int64_t v18 = v0;
  v18[1] = sub_1000740F0;
  double v19 = v0[13];
  uint64_t v20 = *((void *)v0 + 11);
  uint64_t v22 = *((void *)v0 + 9);
  uint64_t v21 = *((void *)v0 + 10);
  return sub_100074518(v22, v21, v20, v19);
}

uint64_t sub_1000740F0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100074234, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100074234()
{
  uint64_t v18 = v0;
  (*(void (**)(void, void, void))(v0 + 152))(*(void *)(v0 + 128), *(void *)(v0 + 88), *(void *)(v0 + 112));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_t log = v1;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v4 = swift_slowAlloc();
    unint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(void *)(v0 + 16) = 1752392040;
    *(_DWORD *)uint64_t v4 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    uint64_t v5 = Handle.identifier.getter();
    *(void *)(v0 + 24) = sub_100037004(v5, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v15(v3, v13);
    *(_WORD *)(v4 + 22) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v16 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "Unable to send IDS Mapping packet for handleId:%{private,mask.hash}s due to %{public}@", (uint8_t *)v4, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    os_log_type_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 112);
    swift_errorRelease();
    v8(v9, v10);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100074518(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(v5 + 136) = v4;
  *(double *)(v5 + 128) = a4;
  *(void *)(v5 + 112) = a2;
  *(void *)(v5 + 120) = a3;
  *(void *)(v5 + 104) = a1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 144) = v6;
  *(void *)(v5 + 152) = *(void *)(v6 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  sub_100044014(&qword_1003ECFB8);
  *(void *)(v5 + 168) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MessagingOptions();
  *(void *)(v5 + 176) = v7;
  *(void *)(v5 + 184) = *(void *)(v7 - 8);
  *(void *)(v5 + 192) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  *(void *)(v5 + 200) = v8;
  *(void *)(v5 + 208) = *(void *)(v8 - 8);
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 232) = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_10007470C;
  return daemon.getter();
}

uint64_t sub_10007470C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 240) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 248) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_1000748E8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000748E8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[17];
    uint64_t v5 = sub_100075368;
  }
  else
  {
    uint64_t v6 = v3[17];
    swift_release();
    uint64_t v5 = sub_100074A10;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100074A10()
{
  uint64_t v34 = v0;
  *(void *)(v0 + 16) = *(void *)(v0 + 104);
  *(void *)(v0 + 24) = *(void *)(v0 + 112);
  strcpy((char *)(v0 + 32), "mappingPacket");
  *(_WORD *)(v0 + 46) = -4864;
  *(void *)(v0 + 48) = 49;
  *(void *)(v0 + 56) = 0xE100000000000000;
  swift_bridgeObjectRetain();
  char v1 = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v1) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  unint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040B4B8);
  char v32 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16);
  v32(v3, v2, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 200);
  if (v9)
  {
    os_log_type_t typea = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136447235;
    uint64_t v29 = v12;
    *(void *)(v0 + 64) = sub_100037004(0xD00000000000002CLL, 0x8000000100373B50, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    *(void *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100206714();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = sub_100037004(v14, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 32) = 2160;
    *(void *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 42) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 96) = sub_100037004(v17, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v19(v11, v29);
    _os_log_impl((void *)&_mh_execute_header, v7, typea, "CommandManager %{public}s with\npayload: %{private,mask.hash}s\nto destination: %{private,mask.hash}s", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v19(v11, v12);
  }
  *(void *)(v0 + 272) = v19;
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v23 = *(void *)(v0 + 168);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v24 = *(void *)(v0 + 152);
  *(void *)os_log_type_t type = *(void *)(v0 + 256);
  sub_100044014(&qword_1003ECFC0);
  unint64_t v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100367D70;
  v32(v27 + v26, v20, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v23, 1, 1, v25);
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
  *(void *)(v0 + 280) = sub_100206340();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100074F2C, *(void *)type, 0);
}

uint64_t sub_100074F2C()
{
  char v1 = (void *)swift_task_alloc();
  v0[36] = v1;
  *char v1 = v0;
  v1[1] = sub_100074FD4;
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[20];
  return InternetMessaging.send(dictionary:messageOptions:)(v4, v2, v3);
}

uint64_t sub_100074FD4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[32];
    uint64_t v4 = sub_10007520C;
  }
  else
  {
    uint64_t v6 = v2[19];
    uint64_t v5 = v2[20];
    os_log_type_t v8 = v2 + 17;
    uint64_t v7 = v2[17];
    (*(void (**)(uint64_t, void))(v6 + 8))(v5, v8[1]);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100075114;
    uint64_t v3 = v7;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100075114()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007520C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100075278, v1, 0);
}

uint64_t sub_100075278()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100075368()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007540C(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return _swift_task_switch(sub_10007542C, v1, 0);
}

uint64_t sub_10007542C()
{
  uint64_t v16 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 96) = sub_100044058(v2, (uint64_t)qword_10040B4B8);
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_100033EAC(v0 + 16);
  sub_100033EAC(v0 + 32);
  swift_bridgeObjectRetain();
  sub_100033EAC(v0 + 16);
  sub_100033EAC(v0 + 32);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_t log = v5;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    swift_bridgeObjectRetain();
    sub_100033EAC(v0 + 16);
    sub_100033EAC(v0 + 32);
    uint64_t v8 = sub_100206714();
    uint64_t v9 = v4;
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_10001FA28(v0 + 16);
    sub_10001FA28(v0 + 32);
    *(void *)(v0 + 72) = sub_100037004(v8, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001FA28(v0 + 16);
    sub_10001FA28(v0 + 32);
    swift_bridgeObjectRelease();
    sub_10001FA28(v0 + 16);
    sub_10001FA28(v0 + 32);
    uint64_t v5 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v6, "CommandManager IDS messageReceived payload extract:%{private,mask.hash}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001FA28(v0 + 16);
    sub_10001FA28(v0 + 32);
    swift_bridgeObjectRelease();
    sub_10001FA28(v0 + 16);
    sub_10001FA28(v0 + 32);
  }

  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100075758;
  return sub_10006F52C(v4, v3);
}

uint64_t sub_100075758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v4[14] = a1;
  v4[15] = a2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v4[11];
    return _swift_task_switch(sub_1000758A0, v8, 0);
  }
}

uint64_t sub_1000758A0()
{
  uint64_t v9 = v0;
  unint64_t v1 = v0[15];
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = v0[14];
      uint64_t v5 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 141558275;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2081;
      swift_bridgeObjectRetain();
      v0[7] = sub_100037004(v4, v1, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CommandManager send import packet to server and get reponse ID: %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100075A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a2;
  v4[11] = a3;
  v4[9] = a1;
  uint64_t v5 = type metadata accessor for Destination();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_100075BF0, v3, 0);
}

uint64_t sub_100075BF0()
{
  int64_t v46 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v36 = v0[15];
  uint64_t v38 = v0[17];
  uint64_t v6 = v0[13];
  uint64_t v41 = v0[12];
  uint64_t v43 = v0[14];
  uint64_t v7 = v0[10];
  uint64_t v40 = v0[11];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040B4B8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v35(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v38, v7, v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v43, v40, v41);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[21];
  if (v11)
  {
    uint64_t v42 = v9;
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[20];
    os_log_type_t v44 = v10;
    uint64_t v15 = v0[18];
    uint64_t v33 = v0[16];
    uint64_t v31 = v0[15];
    uint64_t v32 = v0[17];
    uint64_t v37 = v0[14];
    uint64_t v39 = v0[13];
    uint64_t v34 = v0[12];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136447747;
    v0[2] = sub_100037004(0xD00000000000002CLL, 0x8000000100373B20, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    v35(v14, v12, v15);
    uint64_t v17 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
    *(_WORD *)(v16 + 32) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 2081;
    sub_100080EA0(&qword_1003ECF68, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_100037004(v19, v20, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v31);
    *(_WORD *)(v16 + 52) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 62) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_100037004(v21, v22, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v34);
    _os_log_impl((void *)&_mh_execute_header, v42, v44, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\nid: %{private,mask.hash}s\nfrom: %{private,mask.hash}s", (uint8_t *)v16, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v26 = v0[14];
    uint64_t v25 = v0[15];
    uint64_t v27 = v0[12];
    uint64_t v28 = v0[13];
    (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100076144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[56] = a4;
  v5[57] = v4;
  v5[54] = a2;
  v5[55] = a3;
  v5[53] = a1;
  type metadata accessor for FenceTriggerEnvelopeV1();
  v5[58] = swift_task_alloc();
  type metadata accessor for FenceShareInviteEnvelopeV1();
  v5[59] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Destination();
  v5[60] = v6;
  v5[61] = *(void *)(v6 - 8);
  v5[62] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v5[63] = v7;
  v5[64] = *(void *)(v7 - 8);
  v5[65] = swift_task_alloc();
  v5[66] = swift_task_alloc();
  return _swift_task_switch(sub_1000762D0, v4, 0);
}

uint64_t sub_1000762D0()
{
  uint64_t v75 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[64];
  uint64_t v5 = v0[61];
  uint64_t v4 = v0[62];
  uint64_t v6 = v0[60];
  uint64_t v7 = v0[54];
  uint64_t v8 = v0[53];
  uint64_t v9 = type metadata accessor for Logger();
  v0[67] = sub_100044058(v9, (uint64_t)qword_10040B4B8);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v70(v1, v8, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  swift_bridgeObjectRetain_n();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  Swift::String v71 = v10;
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[66];
  if (v12)
  {
    uint64_t v14 = v0[65];
    uint64_t v16 = v0[63];
    uint64_t v15 = v0[64];
    uint64_t v68 = v0[62];
    uint64_t v69 = v0[61];
    uint64_t v67 = v0[60];
    uint64_t v17 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136447747;
    v0[46] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    v0[47] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    v70(v14, v13, v16);
    uint64_t v18 = String.init<A>(describing:)();
    v0[48] = sub_100037004(v18, v19, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
    *(_WORD *)(v17 + 32) = 2160;
    v0[49] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 42) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[50] = sub_100037004(v20, v21, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v67);
    *(_WORD *)(v17 + 52) = 2160;
    v0[51] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 62) = 2081;
    swift_bridgeObjectRetain();
    sub_100044014(&qword_1003ECF00);
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    v0[52] = sub_100037004(v22, v24, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v71, v11, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\ndictionary: %{private,mask.hash}s", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = v0[61];
    uint64_t v25 = v0[62];
    uint64_t v27 = v0[60];
    (*(void (**)(void, void))(v0[64] + 8))(v0[66], v0[63]);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = sub_1001F5E14(v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRetain();
  v77._countAndFlagsBits = v29;
  v77._object = v31;
  if (sub_100080468(v77) == 4)
  {
    uint64_t v32 = type metadata accessor for GenericError();
    sub_100080EA0((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    uint64_t v33 = swift_allocError();
    uint64_t v35 = v34;
    uint64_t v73 = 0;
    unint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t v73 = 0xD00000000000001ELL;
    unint64_t v74 = 0x8000000100373A00;
    v36._countAndFlagsBits = v29;
    v36._object = v31;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    unint64_t v37 = v74;
    *uint64_t v35 = v73;
    v35[1] = v37;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v35, enum case for GenericError.error(_:), v32);
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446466;
      v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 12) = 2082;
      v0[42] = v33;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v41 = String.init<A>(describing:)();
      v0[41] = sub_100037004(v41, v42, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s error: %{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = (uint64_t (*)(void))v0[1];
    return v43();
  }
  else
  {
    uint64_t v45 = v0 + 2;
    int64_t v46 = v0 + 14;
    uint64_t v47 = v0 + 19;
    uint64_t v72 = v0 + 24;
    swift_bridgeObjectRetain();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136446466;
      v0[44] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[45] = sub_100037004(v29, (unint64_t)v31, &v73);
      uint64_t v47 = v0 + 19;
      int64_t v46 = v0 + 14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s received: %{public}s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v45 = v0 + 2;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    switch(v51)
    {
      case 1:
        uint64_t My = type metadata accessor for Feature.FindMy();
        v0[22] = My;
        v0[23] = sub_100080EA0(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        uint64_t v56 = sub_10003E0F4(v47);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v56, enum case for Feature.FindMy.fencesMigration(_:), My);
        LOBYTE(My) = isFeatureEnabled(_:)();
        sub_1000233E4((uint64_t)v47);
        if ((My & 1) == 0) {
          goto LABEL_10;
        }
        uint64_t v57 = (void *)swift_task_alloc();
        v0[70] = v57;
        *uint64_t v57 = v0;
        v57[1] = sub_100077254;
        uint64_t v58 = v0[56];
        uint64_t v59 = 1;
        char v60 = 1;
        goto LABEL_26;
      case 2:
        uint64_t v61 = type metadata accessor for Feature.FindMy();
        v0[27] = v61;
        v0[28] = sub_100080EA0(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        uint64_t v62 = sub_10003E0F4(v72);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v61 - 8) + 104))(v62, enum case for Feature.FindMy.fencesMigration(_:), v61);
        LOBYTE(v61) = isFeatureEnabled(_:)();
        sub_1000233E4((uint64_t)v72);
        if ((v61 & 1) == 0) {
          goto LABEL_10;
        }
        BOOL v63 = (void *)swift_task_alloc();
        v0[74] = v63;
        void *v63 = v0;
        v63[1] = sub_100077844;
        uint64_t v58 = v0[56];
        uint64_t v59 = 2;
        char v60 = 2;
        goto LABEL_26;
      case 3:
        uint64_t v64 = type metadata accessor for Feature.FindMy();
        v0[17] = v64;
        v0[18] = sub_100080EA0(&qword_1003ECEC8, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        uint64_t v65 = sub_10003E0F4(v46);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v64 - 8) + 104))(v65, enum case for Feature.FindMy.fencesMigration(_:), v64);
        LOBYTE(v64) = isFeatureEnabled(_:)();
        sub_1000233E4((uint64_t)v46);
        if ((v64 & 1) == 0) {
          goto LABEL_10;
        }
        uint64_t v66 = (void *)swift_task_alloc();
        v0[78] = v66;
        void *v66 = v0;
        v66[1] = sub_100077E34;
        uint64_t v58 = v0[56];
        uint64_t v59 = 2;
        char v60 = 3;
LABEL_26:
        uint64_t result = sub_1000794B4(v58, v59, v60);
        break;
      default:
        uint64_t v52 = swift_bridgeObjectRetain();
        sub_100206814(v52, v45);
        uint64_t v53 = (void *)swift_task_alloc();
        v0[68] = v53;
        void *v53 = v0;
        v53[1] = sub_10007705C;
        uint64_t v54 = v0[57];
        v53[10] = v45;
        v53[11] = v54;
        uint64_t result = _swift_task_switch(sub_10007542C, v54, 0);
        break;
    }
  }
  return result;
}

uint64_t sub_10007705C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_10007840C;
  }
  else {
    uint64_t v4 = sub_100077188;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077188()
{
  *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 16);
  sub_10001FA28(v0 + 264);
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 32);
  sub_10001FA28(v0 + 248);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 48);
  sub_10001FA28(v0 + 232);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077254()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_100078694;
  }
  else {
    uint64_t v4 = sub_100077380;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077380()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[71];
  uint64_t v2 = (void *)v0[59];
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1001F87E8(v3, v2);
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2082;
      v0[42] = v1;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v7 = String.init<A>(describing:)();
      v0[41] = sub_100037004(v7, v8, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[72] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100077668;
    uint64_t v10 = v0[59];
    return sub_10007B318(v10);
  }
}

uint64_t sub_100077668()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_1000788E4;
  }
  else {
    uint64_t v4 = sub_100077794;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077794()
{
  sub_100080504(*(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077844()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_100078B50;
  }
  else {
    uint64_t v4 = sub_100077970;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077970()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[58];
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1001FA990(v3, v2);
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2082;
      v0[42] = v1;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v7 = String.init<A>(describing:)();
      v0[41] = sub_100037004(v7, v8, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error: %{public}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[76] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100077C58;
    uint64_t v10 = v0[58];
    return sub_10007BB58(v10);
  }
}

uint64_t sub_100077C58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_100078DA0;
  }
  else {
    uint64_t v4 = sub_100077D84;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077D84()
{
  sub_100080504(*(void *)(v0 + 464), (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100077E34()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 632) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    uint64_t v4 = sub_10007900C;
  }
  else {
    uint64_t v4 = sub_100077F60;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100077F60()
{
  BOOL v12 = v0;
  uint64_t v1 = v0[79];
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1001F7AE4(v2, (uint64_t)(v0 + 8));
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      v11[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446466;
      v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2082;
      v0[42] = v1;
      swift_errorRetain();
      sub_100044014(&qword_1003F4B30);
      uint64_t v6 = String.init<A>(describing:)();
      v0[41] = sub_100037004(v6, v7, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error: %{public}s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    unint64_t v8 = (void *)swift_task_alloc();
    v0[80] = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_100078244;
    return sub_10007C4C0((uint64_t)(v0 + 8));
  }
}

uint64_t sub_100078244()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 648) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 456);
  if (v0) {
    os_log_type_t v4 = sub_10007925C;
  }
  else {
    os_log_type_t v4 = sub_100078370;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100078370()
{
  sub_1000804B4(v0 + 64);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007840C()
{
  uint64_t v10 = v0;
  *(_OWORD *)(v0 + 312) = *(_OWORD *)(v0 + 16);
  sub_10001FA28(v0 + 312);
  *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 32);
  sub_10001FA28(v0 + 280);
  *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 48);
  sub_10001FA28(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 552);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    *(void *)(v0 + 344) = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    *(void *)(v0 + 336) = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    *(void *)(v0 + 328) = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100078694()
{
  uint64_t v10 = v0;
  uint64_t v1 = v0[71];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000788E4()
{
  uint64_t v10 = v0;
  sub_100080504(v0[59], (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  uint64_t v1 = v0[73];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100078B50()
{
  uint64_t v10 = v0;
  uint64_t v1 = v0[75];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100078DA0()
{
  uint64_t v10 = v0;
  sub_100080504(v0[58], (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  uint64_t v1 = v0[77];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007900C()
{
  uint64_t v10 = v0;
  uint64_t v1 = v0[79];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007925C()
{
  uint64_t v10 = v0;
  sub_1000804B4((uint64_t)(v0 + 8));
  uint64_t v1 = v0[81];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[43] = sub_100037004(0xD00000000000003BLL, 0x80000001003739C0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[42] = v1;
    swift_errorRetain();
    sub_100044014(&qword_1003F4B30);
    uint64_t v5 = String.init<A>(describing:)();
    v0[41] = sub_100037004(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s error: %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000794B4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 304) = a2;
  *(void *)(v4 + 312) = v3;
  *(unsigned char *)(v4 + 552) = a3;
  *(void *)(v4 + 296) = a1;
  *(void *)(v4 + 320) = *v3;
  uint64_t v5 = type metadata accessor for Destination();
  *(void *)(v4 + 328) = v5;
  *(void *)(v4 + 336) = *(void *)(v5 - 8);
  *(void *)(v4 + 344) = swift_task_alloc();
  *(void *)(v4 + 352) = swift_task_alloc();
  sub_100044014(&qword_1003ECF10);
  *(void *)(v4 + 360) = swift_task_alloc();
  *(void *)(v4 + 368) = swift_task_alloc();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 376) = v6;
  *unint64_t v6 = v4;
  v6[1] = sub_100079624;
  return daemon.getter();
}

uint64_t sub_100079624(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[48] = a1;
  swift_task_dealloc();
  os_log_type_t v3 = (void *)swift_task_alloc();
  v2[49] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[50] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[51] = v6;
  uint64_t v7 = sub_100080EA0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *os_log_type_t v3 = v9;
  v3[1] = sub_100079804;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100079804(uint64_t a1)
{
  os_log_type_t v3 = (void *)*v2;
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[39];
    return _swift_task_switch(sub_10007B1EC, v4, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[54] = v5;
    void *v5 = v3;
    v5[1] = sub_100079978;
    return daemon.getter();
  }
}

uint64_t sub_100079978(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *(void *)(v3 + 440) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 448) = v5;
  uint64_t v6 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v7 = sub_100080EA0(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  void *v5 = v4;
  v5[1] = sub_100079B2C;
  uint64_t v8 = *(void *)(v2 + 408);
  uint64_t v9 = *(void *)(v2 + 400);
  return ActorServiceDaemon.getService<A>()(v9, v6, v8, v7);
}

uint64_t sub_100079B2C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[57] = a1;
  v3[58] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[39];
    uint64_t v5 = sub_10007B27C;
  }
  else
  {
    uint64_t v6 = v3[39];
    swift_release();
    uint64_t v5 = sub_100079C54;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100079C54()
{
  uint64_t v1 = v0[38];
  v0[34] = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v20 = v0[52];
    unint64_t v21 = sub_100079FCC;
  }
  else
  {
    if ((v1 & 2) == 0)
    {
      uint64_t v2 = (char *)_swiftEmptyArrayStorage;
      uint64_t v3 = swift_bridgeObjectRetain();
      uint64_t v4 = sub_100072974(v3);
      swift_bridgeObjectRelease();
      uint64_t v5 = v4[2];
      if (v5)
      {
        uint64_t v6 = v0[42];
        uint64_t v7 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
        uint64_t v32 = v6;
        uint64_t v8 = (void (**)(char *, char *, uint64_t))(v6 + 32);
        swift_bridgeObjectRetain();
        uint64_t v9 = v4 + 5;
        do
        {
          uint64_t v10 = v0[45];
          uint64_t v11 = v0[41];
          swift_bridgeObjectRetain();
          Destination.init(string:)();
          if ((*v7)(v10, 1, v11) == 1)
          {
            sub_10000A520(v0[45], &qword_1003ECF10);
          }
          else
          {
            uint64_t v13 = (char *)v0[43];
            BOOL v12 = (char *)v0[44];
            uint64_t v14 = v0[41];
            uint64_t v15 = *v8;
            (*v8)(v12, (char *)v0[45], v14);
            v15(v13, v12, v14);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v2 = (char *)sub_10013DDD4(0, *((void *)v2 + 2) + 1, 1, (unint64_t)v2);
            }
            unint64_t v17 = *((void *)v2 + 2);
            unint64_t v16 = *((void *)v2 + 3);
            if (v17 >= v16 >> 1) {
              uint64_t v2 = (char *)sub_10013DDD4(v16 > 1, v17 + 1, 1, (unint64_t)v2);
            }
            uint64_t v18 = (char *)v0[43];
            uint64_t v19 = v0[41];
            *((void *)v2 + 2) = v17 + 1;
            v15(&v2[((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v17], v18, v19);
          }
          v9 += 2;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease_n();
        uint64_t v22 = (void *)v0[34];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = _swiftEmptyArrayStorage;
        uint64_t v2 = (char *)_swiftEmptyArrayStorage;
      }
      v0[66] = v2;
      v0[65] = v22;
      uint64_t v23 = v0[57];
      uint64_t v24 = v0[40];
      uint64_t v25 = v0[37];
      v0[36] = v2;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[67] = v26;
      void v26[2] = v23;
      v26[3] = v25;
      v26[4] = v24;
      uint64_t v27 = (void *)swift_task_alloc();
      v0[68] = v27;
      uint64_t v28 = sub_100044014(&qword_1003ECF28);
      uint64_t v29 = sub_100014FFC(&qword_1003ECF30, &qword_1003ECF28);
      *uint64_t v27 = v0;
      v27[1] = sub_10007AB54;
      uint64_t v30 = v0[46];
      return Sequence.asyncFirst(where:)(v30, &unk_1003ECF20, v26, v28, v29);
    }
    uint64_t v20 = v0[52];
    unint64_t v21 = sub_10007A5B8;
  }
  return _swift_task_switch(v21, v20, 0);
}

uint64_t sub_100079FCC()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 472) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.follower(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v5;
  void *v5 = v0;
  v5[1] = sub_10007A128;
  return sub_100021584(v4, 1);
}

uint64_t sub_10007A128(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(void *)(*(void *)v1 + 488) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007A25C, v2, 0);
}

uint64_t sub_10007A25C()
{
  sub_10003BB94(*(void *)(v0 + 488));
  if ((*(unsigned char *)(v0 + 304) & 2) != 0)
  {
    uint64_t v20 = *(void *)(v0 + 416);
    return _swift_task_switch(sub_10007A5B8, v20, 0);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 272);
    uint64_t v2 = swift_bridgeObjectRetain();
    unint64_t v3 = sub_100072974(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = v3[2];
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 336);
      uint64_t v6 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      uint64_t v30 = v5;
      uint64_t v7 = (void (**)(char *, char *, uint64_t))(v5 + 32);
      swift_bridgeObjectRetain();
      uint64_t v8 = v3 + 5;
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v10 = *(void *)(v0 + 360);
        uint64_t v11 = *(void *)(v0 + 328);
        swift_bridgeObjectRetain();
        Destination.init(string:)();
        if ((*v6)(v10, 1, v11) == 1)
        {
          sub_10000A520(*(void *)(v0 + 360), &qword_1003ECF10);
        }
        else
        {
          uint64_t v13 = *(char **)(v0 + 344);
          BOOL v12 = *(char **)(v0 + 352);
          uint64_t v14 = *(void *)(v0 + 328);
          uint64_t v15 = *v7;
          (*v7)(v12, *(char **)(v0 + 360), v14);
          v15(v13, v12, v14);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = (char *)sub_10013DDD4(0, *((void *)v9 + 2) + 1, 1, (unint64_t)v9);
          }
          unint64_t v17 = *((void *)v9 + 2);
          unint64_t v16 = *((void *)v9 + 3);
          if (v17 >= v16 >> 1) {
            uint64_t v9 = (char *)sub_10013DDD4(v16 > 1, v17 + 1, 1, (unint64_t)v9);
          }
          uint64_t v18 = *(char **)(v0 + 344);
          uint64_t v19 = *(void *)(v0 + 328);
          *((void *)v9 + 2) = v17 + 1;
          v15(&v9[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v17], v18, v19);
        }
        v8 += 2;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease_n();
      uint64_t v1 = *(void *)(v0 + 272);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    }
    *(void *)(v0 + 528) = v9;
    *(void *)(v0 + 520) = v1;
    uint64_t v21 = *(void *)(v0 + 456);
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 296);
    *(void *)(v0 + 288) = v9;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v24;
    void v24[2] = v21;
    v24[3] = v23;
    v24[4] = v22;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v25;
    uint64_t v26 = sub_100044014(&qword_1003ECF28);
    uint64_t v27 = sub_100014FFC(&qword_1003ECF30, &qword_1003ECF28);
    *uint64_t v25 = v0;
    v25[1] = sub_10007AB54;
    uint64_t v28 = *(void *)(v0 + 368);
    return Sequence.asyncFirst(where:)(v28, &unk_1003ECF20, v24, v26, v27);
  }
}

uint64_t sub_10007A5B8()
{
  sub_100044014(&qword_1003ECF40);
  uint64_t v1 = type metadata accessor for HandleType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(void *)(v0 + 496) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100367D70;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v4 + v3, enum case for HandleType.following(_:), v1);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v5;
  void *v5 = v0;
  v5[1] = sub_10007A714;
  return sub_100021584(v4, 1);
}

uint64_t sub_10007A714(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(void *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007A848, v2, 0);
}

uint64_t sub_10007A848()
{
  sub_10003BB94(v0[64]);
  uint64_t v1 = v0[34];
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = sub_100072974(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = v0[42];
    uint64_t v6 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v29 = v5;
    uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    swift_bridgeObjectRetain();
    uint64_t v8 = v3 + 5;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = v0[45];
      uint64_t v11 = v0[41];
      swift_bridgeObjectRetain();
      Destination.init(string:)();
      if ((*v6)(v10, 1, v11) == 1)
      {
        sub_10000A520(v0[45], &qword_1003ECF10);
      }
      else
      {
        uint64_t v13 = v0[43];
        uint64_t v12 = v0[44];
        uint64_t v14 = v0[41];
        uint64_t v15 = *v7;
        (*v7)(v12, v0[45], v14);
        v15(v13, v12, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = (void *)sub_10013DDD4(0, v9[2] + 1, 1, (unint64_t)v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v16 = v9[3];
        if (v17 >= v16 >> 1) {
          uint64_t v9 = (void *)sub_10013DDD4(v16 > 1, v17 + 1, 1, (unint64_t)v9);
        }
        uint64_t v18 = v0[43];
        uint64_t v19 = v0[41];
        v9[2] = v17 + 1;
        v15((uint64_t)v9+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v17, v18, v19);
      }
      v8 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v0[34];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  v0[66] = v9;
  v0[65] = v1;
  uint64_t v20 = v0[57];
  uint64_t v21 = v0[40];
  uint64_t v22 = v0[37];
  v0[36] = v9;
  uint64_t v23 = (void *)swift_task_alloc();
  v0[67] = v23;
  v23[2] = v20;
  v23[3] = v22;
  v23[4] = v21;
  uint64_t v24 = (void *)swift_task_alloc();
  v0[68] = v24;
  uint64_t v25 = sub_100044014(&qword_1003ECF28);
  uint64_t v26 = sub_100014FFC(&qword_1003ECF30, &qword_1003ECF28);
  void *v24 = v0;
  v24[1] = sub_10007AB54;
  uint64_t v27 = v0[46];
  return Sequence.asyncFirst(where:)(v27, &unk_1003ECF20, v23, v25, v26);
}

uint64_t sub_10007AB54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007ACC0, v1, 0);
}

uint64_t sub_10007ACC0()
{
  unint64_t v1 = 0xED000074656B6361;
  unint64_t v2 = 0x50676E697070616DLL;
  uint64_t v3 = *(void *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 336) + 48))(v3, 1, *(void *)(v0 + 328)) == 1)
  {
    switch(*(unsigned char *)(v0 + 552))
    {
      case 1:
        unint64_t v2 = 0xD000000000000024;
        unint64_t v1 = 0x8000000100372AD0;
        break;
      case 2:
        unint64_t v2 = 0x69725465636E6566;
        unint64_t v1 = 0xEC00000072656767;
        break;
      case 3:
        unint64_t v1 = 0x8000000100372B10;
        unint64_t v2 = 0xD000000000000017;
        break;
      default:
        break;
    }
    sub_100044014(&qword_1003ECF38);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003677A0;
    *(unsigned char *)(inited + 32) = 0;
    *(void *)(inited + 64) = &type metadata for Bool;
    *(void *)(inited + 72) = &off_1003DDAA8;
    *(unsigned char *)(inited + 40) = 0;
    *(unsigned char *)(inited + 80) = 1;
    *(void *)(inited + 112) = &type metadata for String;
    *(void *)(inited + 120) = &off_1003DDA78;
    *(void *)(inited + 88) = v2;
    *(void *)(inited + 96) = v1;
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_10010150C(inited);
    uint64_t v6 = sub_1000528C4(v5);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100146154(v6, v8, v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v11 = type metadata accessor for GenericError();
    sub_100080EA0((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v13 = v12;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = MessageContext.senderCorrelationIdentifier.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *uint64_t v13 = 0xD000000000000026;
    v13[1] = 0x8000000100373AB0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for GenericError.error(_:), v11);
    swift_willThrow();
    swift_release();
    swift_release();
    sub_10000A520(v3, &qword_1003ECF10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    switch(*(unsigned char *)(v0 + 552))
    {
      case 1:
        unint64_t v2 = 0xD000000000000024;
        unint64_t v1 = 0x8000000100372AD0;
        break;
      case 2:
        unint64_t v2 = 0x69725465636E6566;
        unint64_t v1 = 0xEC00000072656767;
        break;
      case 3:
        unint64_t v1 = 0x8000000100372B10;
        unint64_t v2 = 0xD000000000000017;
        break;
      default:
        break;
    }
    sub_100044014(&qword_1003ECF38);
    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_1003677A0;
    *(unsigned char *)(v16 + 32) = 0;
    *(void *)(v16 + 64) = &type metadata for Bool;
    *(void *)(v16 + 72) = &off_1003DDAA8;
    *(unsigned char *)(v16 + 40) = 1;
    *(unsigned char *)(v16 + 80) = 1;
    *(void *)(v16 + 112) = &type metadata for String;
    *(void *)(v16 + 120) = &off_1003DDA78;
    *(void *)(v16 + 88) = v2;
    *(void *)(v16 + 96) = v1;
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_10010150C(v16);
    uint64_t v18 = sub_1000528C4(v17);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100146154(v18, v20, v22);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release();
    sub_10000A520(v3, &qword_1003ECF10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v15();
}

uint64_t sub_10007B1EC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007B27C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007B318(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for FenceShareInviteEnvelopeV1();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10007B3AC, v1, 0);
}

uint64_t sub_10007B3AC()
{
  Swift::String v14 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4B8);
  sub_100080564(v1, v2, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[8];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446723;
    v0[2] = sub_100037004(0xD000000000000031, 0x8000000100373A20, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    uint64_t v9 = sub_1001F9C18();
    v0[4] = sub_100037004(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100080504(v7, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s payload:%{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100080504(v0[8], (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  }

  uint64_t v11 = (void *)swift_task_alloc();
  v0[9] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10007B670;
  return daemon.getter();
}

uint64_t sub_10007B670(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for FenceService(0);
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v3 = v9;
  v3[1] = sub_10007B84C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10007B84C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[6];
    uint64_t v5 = sub_1000813D4;
  }
  else
  {
    uint64_t v6 = v3[6];
    swift_release();
    uint64_t v5 = sub_10007B974;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007B974()
{
  uint64_t v1 = (uint64_t *)v0[5];
  uint64_t v2 = (uint64_t)v1 + *(int *)(v0[7] + 20);
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  void *v5 = v0;
  v5[1] = sub_10007BA2C;
  return sub_100172D54(v2, v3, v4);
}

uint64_t sub_10007BA2C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1000813D8;
  }
  else {
    uint64_t v4 = sub_1000813D0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007BB58(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for FenceTriggerEnvelopeV1();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_10007BBEC, v1, 0);
}

uint64_t sub_10007BBEC()
{
  Swift::String v14 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4B8);
  sub_100080564(v1, v2, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[8];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446723;
    v0[2] = sub_100037004(0xD00000000000002ALL, 0x8000000100373A60, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    uint64_t v9 = sub_1001FD0A0();
    v0[4] = sub_100037004(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100080504(v7, (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s payload: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100080504(v0[8], (uint64_t (*)(void))type metadata accessor for FenceTriggerEnvelopeV1);
  }

  uint64_t v11 = (void *)swift_task_alloc();
  v0[9] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10007BEB0;
  return daemon.getter();
}

uint64_t sub_10007BEB0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for FenceService(0);
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v3 = v9;
  v3[1] = sub_10007C08C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10007C08C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[6];
    return _swift_task_switch(sub_10007C3E0, v5, 0);
  }
  else
  {
    uint64_t v6 = v3[7];
    uint64_t v7 = v3[5];
    swift_release();
    uint64_t v8 = *(int *)(v6 + 24);
    uint64_t v9 = v7 + *(int *)(v6 + 20);
    uint64_t v10 = v7 + v8;
    uint64_t v11 = (void *)swift_task_alloc();
    v3[14] = v11;
    *uint64_t v11 = v4;
    v11[1] = sub_10007C244;
    uint64_t v12 = v3[5];
    return sub_1001962F8(v12, v9, v10);
  }
}

uint64_t sub_10007C244()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_10007C450;
  }
  else {
    uint64_t v4 = sub_10007C370;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007C370()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007C3E0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007C450()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007C4C0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  sub_100044014(&qword_1003ECD38);
  v2[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Fence.ID();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10007C60C, v1, 0);
}

uint64_t sub_10007C60C()
{
  uint64_t v30 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100044058(v2, (uint64_t)qword_10040B4B8);
  sub_1000805CC(v1);
  sub_1000805CC(v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[4];
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_1000805CC(v6);
    uint64_t v8 = sub_1001F78C8();
    unint64_t v10 = v9;
    sub_1000804B4(v6);
    v0[3] = sub_100037004(v8, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000804B4(v6);
    sub_1000804B4(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CommandManager Fence delete IDS messageReceived:%{private,mask.hash}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000804B4(v0[4]);
    sub_1000804B4(v6);
  }

  sub_1001F6EB4(v0[12]);
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  uint64_t v13 = v0[6];
  uint64_t v14 = (uint64_t *)v0[4];
  uint64_t v16 = *v14;
  uint64_t v15 = (void *)v14[1];
  swift_bridgeObjectRetain();
  Fence.ID.init(string:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    uint64_t v18 = v0[11];
    uint64_t v17 = v0[12];
    uint64_t v19 = v0[10];
    sub_10000A520(v0[6], &qword_1003ECD38);
    uint64_t v20 = type metadata accessor for GenericError();
    sub_100080EA0((unint64_t *)&qword_1003ECD00, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v22 = v21;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v28 = 0xD000000000000011;
    unint64_t v29 = 0x8000000100373A90;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v16;
    v23._object = v15;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = v29;
    *uint64_t v22 = v28;
    v22[1] = v24;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, enum case for GenericError.error(_:), v20);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[6], v0[7]);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[13] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10007CA88;
    return daemon.getter();
  }
}

uint64_t sub_10007CA88(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 112) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 120) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for FenceService(0);
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECF08, (void (*)(uint64_t))type metadata accessor for FenceService);
  *uint64_t v3 = v9;
  v3[1] = sub_10007CC64;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10007CC64(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v3[5];
    swift_release();
    return _swift_task_switch(sub_10007D018, v5, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = (void *)swift_task_alloc();
    v3[18] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10007CE18;
    uint64_t v7 = v3[12];
    uint64_t v8 = v3[9];
    return sub_100182114(v8, v7);
  }
}

uint64_t sub_10007CE18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_10007D0D0;
  }
  else {
    uint64_t v4 = sub_10007CF44;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007CF44()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007D018()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10007D0D0()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10007D1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a3;
  v6[10] = a4;
  v6[7] = a1;
  v6[8] = a2;
  sub_100044014(&qword_1003ECFB8);
  v6[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MessagingOptions();
  v6[14] = v7;
  v6[15] = *(void *)(v7 - 8);
  v6[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Destination();
  v6[17] = v8;
  v6[18] = *(void *)(v8 - 8);
  v6[19] = swift_task_alloc();
  v6[20] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[21] = v9;
  v6[22] = *(void *)(v9 - 8);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v6[25] = v10;
  v6[26] = *(void *)(v10 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = type metadata accessor for FenceShareInviteEnvelopeV1();
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  v6[31] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v6[32] = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_10007D448;
  return daemon.getter();
}

uint64_t sub_10007D448(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 264) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 272) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_10007D624;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10007D624(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[12];
    uint64_t v5 = sub_10007E264;
  }
  else
  {
    uint64_t v6 = v3[12];
    swift_release();
    uint64_t v5 = sub_10007D74C;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007D74C()
{
  uint64_t v56 = v0;
  uint64_t v1 = v0 + 7;
  uint64_t v2 = (void *)v0[30];
  uint64_t v53 = v0[31];
  int64_t v46 = (int *)v0[28];
  uint64_t v47 = v0[7];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[24];
  uint64_t v48 = v5;
  os_log_t log = (os_log_t)v0[27];
  uint64_t v6 = v0[22];
  *(void *)os_log_type_t typea = v0[21];
  uint64_t v44 = v0[11];
  uint64_t v45 = v0[8];
  uint64_t v7 = *(void (**)(os_log_t, os_log_t, uint64_t))(v4 + 16);
  v7(log, (os_log_t)v0[10], v3);
  (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v6 + 16))(v5, v44, *(os_log_type_t **)typea);
  *uint64_t v2 = v47;
  v2[1] = v45;
  v7((os_log_t)((char *)v2 + v46[5]), log, v3);
  uint64_t v8 = (void *)((char *)v2 + v46[6]);
  *uint64_t v8 = 0xD000000000000024;
  v8[1] = 0x8000000100372AD0;
  uint64_t v9 = (void *)((char *)v2 + v46[7]);
  *uint64_t v9 = 49;
  v9[1] = 0xE100000000000000;
  swift_bridgeObjectRetain();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, void))(v6 + 8);
  v0[37] = v13;
  v0[38] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v48, *(void *)typea);
  (*(void (**)(os_log_t, uint64_t))(v4 + 8))(log, v3);
  uint64_t v14 = (void *)((char *)v2 + v46[8]);
  *uint64_t v14 = v10;
  v14[1] = v12;
  sub_10008136C((uint64_t)v2, v53);
  LOBYTE(v10) = Handle.isPhoneNumber.getter();
  Handle.identifier.getter();
  if (v10) {
    Destination.init(phoneNumber:)();
  }
  else {
    Destination.init(email:)();
  }
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v15 = v54[31];
  uint64_t v16 = v54[29];
  uint64_t v18 = v54[19];
  uint64_t v17 = v54[20];
  uint64_t v19 = v54[17];
  uint64_t v20 = v54[18];
  uint64_t v21 = type metadata accessor for Logger();
  sub_100044058(v21, (uint64_t)qword_10040B4B8);
  sub_100080564(v15, v16, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v52(v18, v17, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = v54[29];
  uint64_t v26 = v54[18];
  uint64_t v27 = v54[19];
  uint64_t v28 = v54[17];
  if (v24)
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136447235;
    *(v1 - 5) = sub_100037004(0xD000000000000040, 0x8000000100373B80, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2160;
    *(v1 - 4) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 22) = 2081;
    uint64_t v30 = sub_1001F9C18();
    *(v1 - 3) = sub_100037004(v30, v31, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100080504(v25, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
    *(_WORD *)(v29 + 32) = 2160;
    *(v1 - 2) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 42) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    *(v1 - 1) = sub_100037004(v32, v33, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v34(v27, v28);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "FenceService %{public}s with\npayload: %{private,mask.hash}s\nto destination: %{private,mask.hash}s", (uint8_t *)v29, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100080504(v25, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v34(v27, v28);
  }
  v54[39] = v34;
  *(void *)os_log_type_t type = v54[35];
  uint64_t v36 = v54[21];
  uint64_t v35 = v54[22];
  uint64_t v37 = v54[20];
  uint64_t v38 = v54[17];
  uint64_t v39 = v54[18];
  uint64_t v40 = v54[13];
  sub_100044014(&qword_1003ECFC0);
  unint64_t v41 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_100367D70;
  v52(v42 + v41, v37, v38);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v40, 1, 1, v36);
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
  MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
  v54[40] = sub_1001F90A0();
  return _swift_task_switch(sub_10007DD68, *(void *)type, 0);
}

uint64_t sub_10007DD68()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[41] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007DE10;
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[16];
  return InternetMessaging.send(dictionary:messageOptions:)(v3, v2, v4);
}

uint64_t sub_10007DE10()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[35];
    uint64_t v4 = sub_10007E0A0;
  }
  else
  {
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[37];
    uint64_t v6 = v2[23];
    uint64_t v7 = v2[21];
    uint64_t v8 = v2[12];
    v5(v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10007DF4C;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007DF4C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[14];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  sub_100080504(v2, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10007E0A0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007E10C, v1, 0);
}

uint64_t sub_10007E10C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[39];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[14];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  sub_100080504(v2, (uint64_t (*)(void))type metadata accessor for FenceShareInviteEnvelopeV1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10007E264()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007E358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  sub_100044014(&qword_1003ECFB8);
  v5[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MessagingOptions();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[23] = v7;
  v5[24] = *(void *)(v7 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[27] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10007E4EC;
  return daemon.getter();
}

uint64_t sub_10007E4EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 224) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 232) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for IDSTransportServiceFMF();
  uint64_t v6 = sub_100080EA0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100080EA0(&qword_1003ECCB0, (void (*)(uint64_t))type metadata accessor for IDSTransportServiceFMF);
  *uint64_t v3 = v9;
  v3[1] = sub_10007E6C8;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10007E6C8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 144);
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10007F090;
  }
  else
  {
    swift_release();
    uint64_t v5 = sub_10007E808;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007E808()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[15];
  (*(void (**)(uint64_t, void, void))(v0[24] + 16))(v3, v0[16], v0[23]);
  swift_bridgeObjectRetain();
  sub_1001F7E2C(v1, v4, v3, v0 + 2);
  if (v2)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    sub_100072B80(v0[17]);
    if (qword_1003EBF78 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100044058(v7, (uint64_t)qword_10040B4B8);
    sub_1000805CC((uint64_t)(v0 + 2));
    swift_bridgeObjectRetain();
    sub_1000805CC((uint64_t)(v0 + 2));
    swift_bridgeObjectRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_t log = v8;
      uint64_t v10 = swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136447235;
      os_log_type_t type = v9;
      v0[9] = sub_100037004(0xD00000000000003DLL, 0x8000000100373BD0, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2160;
      v0[10] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2081;
      sub_1000805CC((uint64_t)(v0 + 2));
      uint64_t v11 = sub_1001F78C8();
      unint64_t v13 = v12;
      sub_1000804B4((uint64_t)(v0 + 2));
      v0[11] = sub_100037004(v11, v13, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000804B4((uint64_t)(v0 + 2));
      sub_1000804B4((uint64_t)(v0 + 2));
      *(_WORD *)(v10 + 32) = 2160;
      v0[12] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 42) = 2081;
      type metadata accessor for Destination();
      swift_bridgeObjectRetain();
      uint64_t v14 = Array.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v0[13] = sub_100037004(v14, v16, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v8 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "FenceService %{public}s with\npayload: %{private,mask.hash}s\nto destinations: %{private,mask.hash}s", (uint8_t *)v10, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000804B4((uint64_t)(v0 + 2));
      sub_1000804B4((uint64_t)(v0 + 2));
      swift_bridgeObjectRelease_n();
    }

    uint64_t v17 = v0[30];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[19], 1, 1, v0[23]);
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    sub_1002D689C((uint64_t)_swiftEmptyArrayStorage);
    MessagingOptions.init(destinations:expectsPeerResponse:responseIdentifier:timeToLive:fireAndForget:requiredCapabilities:lackingCapabilities:queueOneIdentifier:)();
    v0[32] = sub_1001F6DC0();
    return _swift_task_switch(sub_10007ECAC, v17, 0);
  }
}

uint64_t sub_10007ECAC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007ED54;
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[22];
  return InternetMessaging.send(dictionary:messageOptions:)(v3, v2, v4);
}

uint64_t sub_10007ED54()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[30];
    uint64_t v4 = sub_10007EF64;
  }
  else
  {
    uint64_t v6 = v2[24];
    uint64_t v5 = v2[25];
    uint64_t v7 = v2[23];
    uint64_t v8 = v2[18];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10007EE98;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007EE98()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  swift_release();
  sub_1000804B4((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10007EF64()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007EFD0, v1, 0);
}

uint64_t sub_10007EFD0()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  swift_release();
  sub_1000804B4((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10007F090()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007F124(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_10007F144, v1, 0);
}

uint64_t sub_10007F144()
{
  uint64_t v11 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    type metadata accessor for Account();
    sub_100080EA0(&qword_1003ECEB8, (void (*)(uint64_t))&type metadata accessor for Account);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging accounts changed. Accounts: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10007F3B8(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_10007F3D8, v1, 0);
}

uint64_t sub_10007F3D8()
{
  uint64_t v11 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    type metadata accessor for Device();
    sub_100080EA0(&qword_1003ECEA0, (void (*)(uint64_t))&type metadata accessor for Device);
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100037004(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging devices changed. Devices: %{private,mask.hash}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10007F64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Destination();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10007F714, a2, 0);
}

uint64_t sub_10007F714()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of QueryController.correlationIdentifier(destination:)
                                       + async function pointer to dispatch thunk of QueryController.correlationIdentifier(destination:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007F7C4;
  uint64_t v2 = *(void *)(v0 + 40);
  return v4(v2);
}

uint64_t sub_10007F7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[14] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10007F9A4;
  }
  else {
    uint64_t v5 = sub_10007F8DC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10007F8DC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = MessageContext.senderCorrelationIdentifier.getter();
  if (v1)
  {
    if (v2 == v0[12] && v0[13] == v3) {
      char v5 = 1;
    }
    else {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(v5 & 1);
}

uint64_t sub_10007F9A4()
{
  uint64_t v21 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100044058(v5, (uint64_t)qword_10040B4B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138543875;
    swift_errorRetain();
    os_log_t log = v6;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v13;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_100037004(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "error in destinationCorrelationIdentifier: %{public}@ for destination: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t sub_10007FD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = sub_10004A274;
  return sub_100075A64(a1, a2, a3);
}

uint64_t sub_10007FDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003ECF48 + dword_1003ECF48);
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = sub_10004A274;
  return v9(a1, a2, a3);
}

uint64_t sub_10007FEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10004A274;
  return sub_100076144(a1, a2, a3, a4);
}

uint64_t sub_10007FF68(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10004A274;
  v5[3] = a1;
  return _swift_task_switch(sub_10007F144, v4, 0);
}

uint64_t sub_100080018(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10004A274;
  v5[3] = a1;
  return _swift_task_switch(sub_10007F3D8, v4, 0);
}

uint64_t sub_1000800C8(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000801A4;
  return v6(a1);
}

uint64_t sub_1000801A4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008029C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_100080318(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100044014(&qword_1003ECEA8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100080468(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DCC70, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000804B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100044090(v2, v3);
  return a1;
}

uint64_t sub_100080504(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100080564(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000805CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100022C64(v2, v3);
  return a1;
}

uint64_t sub_10008061C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_1000806CC;
  return sub_10007F64C(a1, v4, v5);
}

uint64_t sub_1000806CC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1000807C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a2;
  v4[11] = a3;
  v4[9] = a1;
  uint64_t v5 = sub_100044014(&qword_1003ECF50);
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Destination();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_100080958, v3, 0);
}

uint64_t sub_100080958()
{
  int64_t v46 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[16];
  uint64_t v36 = v0[15];
  uint64_t v38 = v0[17];
  uint64_t v6 = v0[13];
  uint64_t v41 = v0[12];
  uint64_t v43 = v0[14];
  uint64_t v7 = v0[10];
  uint64_t v40 = v0[11];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100044058(v8, (uint64_t)qword_10040B4B8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v35(v2, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v38, v7, v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v43, v40, v41);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[21];
  if (v11)
  {
    uint64_t v42 = v9;
    uint64_t v13 = v0[19];
    uint64_t v14 = v0[20];
    os_log_type_t v44 = v10;
    uint64_t v15 = v0[18];
    uint64_t v33 = v0[16];
    uint64_t v31 = v0[15];
    uint64_t v32 = v0[17];
    uint64_t v37 = v0[14];
    uint64_t v39 = v0[13];
    uint64_t v34 = v0[12];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136447747;
    v0[2] = sub_100037004(0xD00000000000003ELL, 0x8000000100373AE0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    v35(v14, v12, v15);
    uint64_t v17 = String.init<A>(describing:)();
    v0[4] = sub_100037004(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
    *(_WORD *)(v16 + 32) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 2081;
    sub_100080EA0(&qword_1003ECEF8, (void (*)(uint64_t))&type metadata accessor for Destination);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_100037004(v19, v20, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v31);
    *(_WORD *)(v16 + 52) = 2160;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 62) = 2081;
    sub_100014FFC(&qword_1003ECF58, &qword_1003ECF50);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_100037004(v21, v22, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v34);
    _os_log_impl((void *)&_mh_execute_header, v42, v44, "CommandManager IDS %{public}s with\naccount: %{private,mask.hash}s\ndestination %{private,mask.hash}s\nmessage: %{private,mask.hash}s", (uint8_t *)v16, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v26 = v0[14];
    uint64_t v25 = v0[15];
    uint64_t v27 = v0[12];
    uint64_t v28 = v0[13];
    (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100080EA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100080EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  double v8 = v2[4];
  uint64_t v9 = *((void *)v2 + 5);
  os_log_type_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *os_log_type_t v10 = v3;
  v10[1] = sub_100018CD0;
  return sub_1000734F4(v8, a1, a2, v6, v7, v9);
}

uint64_t sub_100080FB4()
{
  uint64_t v1 = type metadata accessor for Handle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000810B4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Handle() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + v6);
  double v13 = *(double *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10004A274;
  return sub_100073CD4(v13, a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100081214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100044014((uint64_t *)&unk_1003F3C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008127C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000812B4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100018CD0;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1003ECFA0 + dword_1003ECFA0);
  return v6(a1, v4);
}

uint64_t sub_10008136C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FenceShareInviteEnvelopeV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000813DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t sub_100081548(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 1840);
  *(void *)(v3 + 2144) = a1;
  *(void *)(v3 + 2152) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100081664, v4, 0);
}

uint64_t sub_100081664()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0 + 2152);
  uint64_t v2 = *(void *)(v0 + 2144);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4B8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v26 = *(void *)(v0 + 2120) == *(void *)(v0 + 2128);
    uint64_t v30 = v1;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446722;
    *(void *)(v0 + 1816) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v7 = Duration.description.getter();
    *(void *)(v0 + 1824) = sub_100037004(v7, v8, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 1024;
    *(_DWORD *)(v0 + 2208) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s scheduleInterval: %{public}s isHighPriority: %{BOOL}d", (uint8_t *)v6, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v30;
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(v0 + 1936);
  uint64_t v10 = *(void *)(v0 + 1928);
  uint64_t v11 = *(void *)(v0 + 1920);
  uint64_t v12 = *(void *)(v0 + 1840) + *(void *)(v0 + 2080);
  if (*(void *)(v0 + 2120) == *(void *)(v0 + 2128)) {
    double v13 = (unsigned int *)(v0 + 2212);
  }
  else {
    double v13 = (unsigned int *)&enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
  }
  (*(void (**)(void, void, void))(v0 + 2088))(*(void *)(v0 + 1936), *v13, *(void *)(v0 + 1920));
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v12, v9, v11);
  swift_endAccess();
  if (Duration.milliseconds.getter() < 1)
  {
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      *(void *)(v0 + 1808) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s Refreshing legacy location now.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_100081C74;
    return sub_100020D64(0, v2, v1);
  }
  else
  {
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 2104);
    uint64_t v14 = *(void *)(v0 + 2016);
    uint64_t v28 = *(void *)(v0 + 1912);
    uint64_t v27 = *(void *)(v0 + 1888);
    uint64_t v15 = *(void *)(v0 + 1848);
    uint64_t v16 = *(void *)(v0 + 1840);
    BOOL v17 = *(void *)(v0 + 2120) == *(void *)(v0 + 2128);
    type metadata accessor for WorkItemQueue.WorkItem();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    *(void *)(v18 + 24) = v1;
    *(unsigned char *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = v14;
    *(void *)(v18 + 48) = v16;
    *(void *)(v18 + 56) = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    unint64_t v19 = sub_10004B2F8((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_release();
    v29(v28, v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v20(v19);
  }
}

uint64_t sub_100081C74(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[274] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[230];
  if (v1)
  {
    uint64_t v6 = sub_1000820B0;
  }
  else
  {
    v4[275] = a1;
    uint64_t v6 = sub_100081DB0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100081DB0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[263];
  uint64_t v2 = v0[239];
  uint64_t v3 = v0[236];
  swift_release();
  swift_release();
  v1(v2, v3);
  uint64_t v4 = v0[275];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  return v5(v4);
}

uint64_t sub_100081ECC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081FB8()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000820B0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[263];
  uint64_t v2 = v0[239];
  uint64_t v3 = v0[236];
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000821C4()
{
  uint64_t v68 = v0;
  sub_100036A4C((void *)(v0 + 16));
  sub_100036A4C((void *)(v0 + 16));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    v67[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 864) = sub_100037004(0xD00000000000002FLL, 0x8000000100373C10, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    sub_100036A4C((void *)(v0 + 16));
    uint64_t v4 = sub_10003338C();
    unint64_t v6 = v5;
    sub_1000367D8((void *)(v0 + 16));
    *(void *)(v0 + 872) = sub_100037004(v4, v6, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "CommandManager %{public}s response: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000367D8((void *)(v0 + 16));
    sub_1000367D8((void *)(v0 + 16));
  }

  uint64_t v7 = *(void *)(v0 + 1120);
  uint64_t v8 = *(void *)(v0 + 928);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  uint64_t v10 = sub_100046FF4(qword_1003ECC70, (void (*)(uint64_t))type metadata accessor for CommandManager);
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v11[2] = v8;
  v11[3] = v10;
  v11[4] = v8;
  swift_retain_n();
  sub_10012EF80(v7, (uint64_t)&unk_1003ED018, (uint64_t)v11);
  swift_release();
  if (*(unsigned char *)(v0 + 248) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 240);
    *(void *)(v0 + 1720) = v12;
    if (v12)
    {
      swift_bridgeObjectRetain();
      sub_1000367D8((void *)(v0 + 16));
      swift_bridgeObjectRetain_n();
      double v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134218242;
        int64_t v16 = *(void *)(v12 + 16);
        *(void *)(v0 + 848) = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 12) = 2082;
        if (v16)
        {
          os_log_type_t v54 = v14;
          uint64_t v57 = v15;
          char v60 = v13;
          uint64_t v17 = *(void *)(v0 + 1112);
          uint64_t v18 = *(void *)(v0 + 1096);
          v67[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_10003CB84(0, v16, 0);
          uint64_t v63 = v12;
          uint64_t v19 = v12 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
          uint64_t v20 = *(void *)(v18 + 72);
          uint64_t v21 = v67[0];
          do
          {
            unint64_t v22 = *(uint64_t **)(v0 + 1112);
            sub_1000306DC(v19, (uint64_t)v22, type metadata accessor for ServerLocation);
            uint64_t v23 = *v22;
            uint64_t v24 = *(void *)(v17 + 8);
            swift_bridgeObjectRetain();
            sub_10002EFF8((uint64_t)v22, type metadata accessor for ServerLocation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_10003CB84(0, *(void *)(v21 + 16) + 1, 1);
              uint64_t v21 = v67[0];
            }
            unint64_t v26 = *(void *)(v21 + 16);
            unint64_t v25 = *(void *)(v21 + 24);
            if (v26 >= v25 >> 1)
            {
              sub_10003CB84(v25 > 1, v26 + 1, 1);
              uint64_t v21 = v67[0];
            }
            *(void *)(v21 + 16) = v26 + 1;
            uint64_t v27 = v21 + 16 * v26;
            *(void *)(v27 + 32) = v23;
            *(void *)(v27 + 40) = v24;
            v19 += v20;
            --v16;
          }
          while (v16);
          double v13 = v60;
          uint64_t v12 = v63;
          uint64_t v15 = v57;
          os_log_type_t v14 = v54;
        }
        uint64_t v33 = Array.description.getter();
        unint64_t v35 = v34;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 856) = sub_100037004(v33, v35, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received legacy locations [%ld] for ids: %{public}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v36 = *(void *)(v12 + 16);
      *(void *)(v0 + 1728) = v36;
      if (v36)
      {
        uint64_t v37 = *(void *)(v0 + 1104);
        int v38 = *(_DWORD *)(*(void *)(v0 + 1096) + 80);
        *(_DWORD *)(v0 + 1768) = v38;
        *(_DWORD *)(v0 + 1772) = enum case for LocationType.legacy(_:);
        *(_DWORD *)(v0 + 1776) = enum case for MotionActivityState.unknown(_:);
        *(void *)(v0 + 1744) = 0;
        *(void *)(v0 + 1736) = _swiftEmptyDictionarySingleton;
        uint64_t v39 = *(void *)(v0 + 1720);
        if (*(void *)(v39 + 16))
        {
          sub_1000306DC(v39 + ((v38 + 32) & ~(unint64_t)v38), v37, type metadata accessor for ServerLocation);
          uint64_t v40 = (void *)swift_task_alloc();
          *(void *)(v0 + 1752) = v40;
          void *v40 = v0;
          v40[1] = sub_100082EC4;
          sub_100005710();
        }
        else
        {
          __break(1u);
        }
        return;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000367D8((void *)(v0 + 16));
    }
    swift_bridgeObjectRelease();
    uint64_t v48 = *(void *)(v0 + 1680);
    unint64_t v49 = *(void *)(v0 + 1688);
    uint64_t v41 = *(void *)(v0 + 1328);
    uint64_t v51 = *(void *)(v0 + 1320);
    uint64_t v53 = *(void *)(v0 + 1352);
    uint64_t v42 = *(void *)(v0 + 1240);
    uint64_t v59 = *(void *)(v0 + 1232);
    uint64_t v62 = *(void *)(v0 + 1264);
    uint64_t v43 = *(void *)(v0 + 1160);
    uint64_t v44 = *(void *)(v0 + 1008);
    uint64_t v45 = *(void *)(v0 + 1000);
    uint64_t v65 = *(void *)(v0 + 992);
    uint64_t v56 = *(void *)(v0 + 928);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Date.now.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000440E8(v48, v49);
    sub_10002EFF8(v43, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v53, v51);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v62, v59);
    uint64_t v46 = v56 + OBJC_IVAR____TtC13findmylocated14CommandManager_lastRefreshDate;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 40))(v46, v44, v65);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(void (**)(void *))(v0 + 8);
    v47(_swiftEmptyDictionarySingleton);
  }
  else
  {
    uint64_t v50 = *(void *)(v0 + 1680);
    unint64_t v52 = *(void *)(v0 + 1688);
    uint64_t v28 = *(void *)(v0 + 1328);
    uint64_t v55 = *(void *)(v0 + 1320);
    uint64_t v58 = *(void *)(v0 + 1352);
    uint64_t v29 = *(void *)(v0 + 1240);
    uint64_t v61 = *(void *)(v0 + 1232);
    uint64_t v64 = *(void *)(v0 + 1264);
    uint64_t v30 = *(void *)(v0 + 1160);
    sub_1000367D8((void *)(v0 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100085350();
    swift_allocError();
    *uint64_t v31 = 6;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000440E8(v50, v52);
    sub_10002EFF8(v30, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v58, v55);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v64, v61);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(void (**)(void))(v0 + 8);
    v32();
  }
}

uint64_t sub_100082EC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 928);
  *(void *)(*(void *)v1 + 1760) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E624, v2, 0);
}

uint64_t sub_100082FDC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100083258()
{
  unint64_t v1 = v0[211];
  uint64_t v2 = v0[210];
  uint64_t v3 = v0[169];
  uint64_t v4 = v0[166];
  uint64_t v5 = v0[165];
  uint64_t v6 = v0[155];
  uint64_t v10 = v0[154];
  uint64_t v11 = v0[158];
  uint64_t v7 = v0[145];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000440E8(v2, v1);
  sub_10002EFF8(v7, (uint64_t (*)(void))type metadata accessor for LocationEndpoint);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v10);
  sub_1000233E4((uint64_t)(v0 + 79));
  sub_1000233E4((uint64_t)(v0 + 84));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100083584(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 1800) = a5;
  *(void *)(v5 + 1792) = a4;
  *(unsigned char *)(v5 + 2020) = a3;
  *(void *)(v5 + 1784) = a2;
  *(void *)(v5 + 1776) = a1;
  uint64_t refreshed = type metadata accessor for LegacyRefreshSchedule();
  *(void *)(v5 + 1808) = refreshed;
  *(void *)(v5 + 1816) = *(void *)(refreshed - 8);
  *(void *)(v5 + 1824) = swift_task_alloc();
  *(void *)(v5 + 1832) = swift_task_alloc();
  *(void *)(v5 + 1840) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v5 + 1848) = v7;
  *(void *)(v5 + 1856) = *(void *)(v7 - 8);
  *(void *)(v5 + 1864) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  *(void *)(v5 + 1872) = v8;
  *(void *)(v5 + 1880) = *(void *)(v8 - 8);
  *(void *)(v5 + 1888) = swift_task_alloc();
  return _swift_task_switch(sub_100083728, 0, 0);
}

uint64_t sub_100083728()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003F0B58 + dword_1003F0B58);
  unint64_t v1 = (void *)swift_task_alloc();
  v0[237] = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1000837EC;
  uint64_t v2 = v0[223];
  uint64_t v3 = v0[222];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_1000837EC()
{
  uint64_t v2 = *(void *)(*v1 + 1888);
  uint64_t v3 = *(void *)(*v1 + 1880);
  uint64_t v4 = *(void *)(*v1 + 1872);
  uint64_t v5 = *v1;
  *(void *)(v5 + 1904) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = sub_1000839F8;
    uint64_t v7 = 0;
LABEL_5:
    return _swift_task_switch(v6, v7, 0);
  }
  if (*(unsigned char *)(v5 + 2020))
  {
    *(unsigned char *)(v5 + 2021) = 1;
    uint64_t v7 = *(void *)(v5 + 1800);
    uint64_t v6 = sub_100084014;
    goto LABEL_5;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 1912) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_100083CBC;
  return sub_10000E400(v5 + 880);
}

uint64_t sub_1000839F8()
{
  uint64_t v12 = v0;
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v6 = Duration.description.getter();
    v0[218] = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[217] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100083CBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1792);
  swift_task_dealloc();
  return _swift_task_switch(sub_100083DCC, v1, 0);
}

uint64_t sub_100083DCC()
{
  sub_100013B50((uint64_t)(v0 + 110), (uint64_t)(v0 + 56), &qword_1003ECCD0);
  if (sub_10005F070((uint64_t)(v0 + 56)) != 1)
  {
    memcpy(v0 + 2, v0 + 56, 0x1B0uLL);
    sub_100013B50((uint64_t)(v0 + 14), (uint64_t)(v0 + 184), &qword_1003ED068);
    sub_100013BB4(v0 + 184, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224((uint64_t)(v0 + 110));
    sub_100013B50((uint64_t)(v0 + 184), (uint64_t)(v0 + 164), &qword_1003ED068);
    if (sub_100085654((uint64_t)(v0 + 164)) != 1) {
      sub_100013BB4(v0 + 184, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100037504);
    }
  }
  uint64_t v1 = v0[233];
  uint64_t v2 = v0[232];
  uint64_t v3 = v0[231];
  static Duration.seconds(_:)();
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static Duration.seconds(_:)();
  v0[240] = static Duration.- infix(_:_:)();
  v0[241] = v4;
  return _swift_task_switch(sub_100083F9C, 0, 0);
}

uint64_t sub_100083F9C()
{
  *(unsigned char *)(v0 + 2021) = Duration.milliseconds.getter() > 0;
  uint64_t v1 = *(void *)(v0 + 1800);
  return _swift_task_switch(sub_100084014, v1, 0);
}

uint64_t sub_100084014()
{
  uint64_t v1 = v0[230];
  uint64_t v2 = v0[227];
  uint64_t v3 = v0[226];
  uint64_t v4 = v0[225];
  uint64_t v5 = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  v0[242] = OBJC_IVAR____TtC13findmylocated14CommandManager_refreshScheduled;
  uint64_t v6 = v4 + v5;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  return _swift_task_switch(sub_1000840D0, 0, 0);
}

uint64_t sub_1000840D0()
{
  if (*(unsigned char *)(v0 + 2021) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 1944) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000843A0;
    uint64_t v2 = *(void *)(v0 + 1784);
    uint64_t v3 = *(void *)(v0 + 1776);
    return sub_100020D64(1, v3, v2);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 1832);
    uint64_t v6 = *(void *)(v0 + 1816);
    *(_DWORD *)(v0 + 2016) = enum case for LegacyRefreshSchedule.lowPriorityScheduled(_:);
    unint64_t v7 = *(void (**)(uint64_t))(v6 + 104);
    *(void *)(v0 + 1960) = v7;
    *(void *)(v0 + 1968) = (v6 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v7(v5);
    sub_100046FF4(&qword_1003ED048, (void (*)(uint64_t))&type metadata accessor for LegacyRefreshSchedule);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 1704) == *(void *)(v0 + 1720) && *(void *)(v0 + 1712) == *(void *)(v0 + 1728)) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v9 = *(void *)(v0 + 1832);
    uint64_t v10 = *(void *)(v0 + 1816);
    uint64_t v11 = *(void *)(v0 + 1808);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    *(void *)(v0 + 1976) = v12;
    *(void *)(v0 + 1984) = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v12(v9, v11);
    if (v8)
    {
      uint64_t v13 = *(void *)(v0 + 1800);
      ((void (*)(void, void, void))v7)(*(void *)(v0 + 1824), enum case for LegacyRefreshSchedule.notScheduled(_:), *(void *)(v0 + 1808));
      return _swift_task_switch(sub_100084578, v13, 0);
    }
    else
    {
      os_log_type_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 2000) = v14;
      *os_log_type_t v14 = v0;
      v14[1] = sub_100084984;
      return sub_10001BB04();
    }
  }
}

uint64_t sub_1000843A0()
{
  *(void *)(*(void *)v1 + 1952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100084B60;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000844C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000844C0()
{
  (*(void (**)(void, void))(v0[227] + 8))(v0[230], v0[226]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100084578()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[247];
  uint64_t v2 = v0[228];
  uint64_t v3 = v0[227];
  uint64_t v4 = v0[226];
  uint64_t v5 = v0[225];
  uint64_t v6 = v5 + v0[242];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(v6, v2, v4);
  swift_endAccess();
  v1(v2, v4);
  unint64_t v7 = (void *)(v5 + OBJC_IVAR____TtC13findmylocated14CommandManager_coalescedCommands);
  swift_beginAccess();
  v0[249] = *v7;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100084698, 0, 0);
}

uint64_t sub_100084698()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1976);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1960);
  uint64_t v3 = (unsigned int *)(v0 + 2016);
  uint64_t v4 = *(void *)(v0 + 1824);
  uint64_t v5 = *(void *)(v0 + 1808);
  uint64_t v6 = *(void *)(*(void *)(v0 + 1992) + 16);
  if (*(unsigned char *)(v0 + 2020)) {
    uint64_t v3 = (unsigned int *)&enum case for LegacyRefreshSchedule.highPriorityScheduled(_:);
  }
  uint64_t v7 = *v3;
  swift_bridgeObjectRelease();
  v2(v4, v7, v5);
  uint64_t refreshed = LegacyRefreshSchedule.rawValue.getter();
  unint64_t v10 = v9;
  v1(v4, v5);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100044058(v11, (uint64_t)qword_10040B4B8);
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446722;
    *(void *)(v0 + 1752) = sub_100037004(0xD000000000000011, 0x8000000100373C40, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1760) = sub_100037004(refreshed, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2048;
    *(void *)(v0 + 1768) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Discarding queued request priority: [%s],\ncurrent Tasks count: [%ld]", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 2000) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100084984;
  return sub_10001BB04();
}

uint64_t sub_100084984()
{
  *(void *)(*(void *)v1 + 2008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100084E40;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100084AA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100084AA4()
{
  (*(void (**)(void, void))(v0 + 1976))(*(void *)(v0 + 1840), *(void *)(v0 + 1808));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100084B60()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void))(v0[227] + 8))(v0[230], v0[226]);
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v6 = Duration.description.getter();
    v0[218] = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[217] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100084E40()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void))(v0 + 1976))(*(void *)(v0 + 1840), *(void *)(v0 + 1808));
  if (qword_1003EBF78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100044058(v1, (uint64_t)qword_10040B4B8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v6 = Duration.description.getter();
    *(void *)(v0 + 1744) = sub_100037004(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 1736) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "scheduleRefresh with scheduleInterval: %{public}s. Error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_100044014(&qword_1003ECCC8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100085118()
{
  return sub_10008566C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[4] = v5;
  void *v5 = v4;
  v5[1] = sub_1000851E0;
  return sub_10001BB04();
}

uint64_t sub_1000851E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 24);
    *(void *)(v4 + 40) = a1;
    return _swift_task_switch(sub_10008532C, v8, 0);
  }
}

uint64_t sub_10008532C()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100085350()
{
  unint64_t result = qword_1003ECFF8;
  if (!qword_1003ECFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ECFF8);
  }
  return result;
}

unint64_t sub_1000853A4()
{
  unint64_t result = qword_1003ED008;
  if (!qword_1003ED008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1003ED008);
  }
  return result;
}

uint64_t sub_1000853F8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100085438(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10004A274;
  return sub_10008514C(a1, v4, v5, v6);
}

uint64_t sub_1000854EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100085550()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100085590()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100018CD0;
  return sub_100083584(v2, v3, v4, v5, v6);
}

uint64_t sub_100085654(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10008566C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100085674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000856D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10008573C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000857A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000857B4);
}

uint64_t sub_1000857B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100085820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085834);
}

uint64_t sub_100085834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UpdateFenceEndpoint()
{
  uint64_t result = qword_1003ED0D0;
  if (!qword_1003ED0D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000858F0()
{
  uint64_t result = type metadata accessor for URLComponents();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10008597C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_1000859E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v122 = (void *)a3;
  uint64_t v116 = type metadata accessor for Fence.MonitorRegion.Source();
  uint64_t v124 = *(void *)(v116 - 8);
  uint64_t v7 = __chkstk_darwin(v116);
  uint64_t v115 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unsigned int v123 = (char *)&v111 - v9;
  uint64_t v119 = type metadata accessor for Fence.MonitorRegion();
  uint64_t v118 = *(void *)(v119 - 8);
  uint64_t v10 = __chkstk_darwin(v119);
  uint64_t v117 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v114 = (char *)&v111 - v12;
  uint64_t v112 = type metadata accessor for PlaceMark();
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v113 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100044014(&qword_1003ECFB8);
  __chkstk_darwin(v14 - 8);
  uint64_t v121 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for Fence.AcceptanceStatus();
  uint64_t v16 = *(void *)(v120 - 8);
  uint64_t v17 = __chkstk_darwin(v120);
  uint64_t v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v111 - v20;
  uint64_t v22 = type metadata accessor for Fence.Variant();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = a1;
  sub_10008806C(a1, a4, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v26 = a2;
  BOOL v27 = (Fence.shouldDeleteFence.getter() & 1) == 0;
  uint64_t updated = (int *)type metadata accessor for UpdateFenceRequestContent();
  *(unsigned char *)(a4 + updated[10]) = v27;
  uint64_t v126 = v26;
  Fence.variant.getter();
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v25, v22);
  if (v29 != enum case for Fence.Variant.oneTime(_:)
    && v29 != enum case for Fence.Variant.recurring(_:)
    && v29 != enum case for Fence.Variant.scheduled(_:))
  {
    goto LABEL_33;
  }
  BOOL v30 = v29 == enum case for Fence.Variant.oneTime(_:);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  *(unsigned char *)(a4 + updated[15]) = v30;
  Fence.acceptanceStatus.getter();
  uint64_t v31 = v120;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v120);
  int v32 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v31);
  if (v32 == enum case for Fence.AcceptanceStatus.pendingHidden(_:))
  {
    unint64_t v33 = 0xE600000000000000;
    uint64_t v34 = 0x6E6564646948;
  }
  else if (v32 == enum case for Fence.AcceptanceStatus.pending(_:))
  {
    unint64_t v33 = 0xE700000000000000;
    uint64_t v34 = 0x676E69646E6550;
  }
  else
  {
    if (v32 != enum case for Fence.AcceptanceStatus.accepted(_:)) {
      goto LABEL_33;
    }
    unint64_t v33 = 0xE800000000000000;
    uint64_t v34 = 0x6465747065636341;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v31);
  unint64_t v35 = (uint64_t *)(a4 + updated[24]);
  *unint64_t v35 = v34;
  v35[1] = v33;
  uint64_t v36 = (uint64_t)v121;
  Fence.ckRecordIdentifier.getter();
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
  {
    sub_10000A520(v36, &qword_1003ECFB8);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v39 = UUID.uuidString.getter();
    uint64_t v40 = v41;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  uint64_t v42 = (uint64_t *)(a4 + updated[22]);
  uint64_t *v42 = v39;
  v42[1] = v40;
  uint64_t v43 = Fence.ckRecordZoneOwnerName.getter();
  uint64_t v44 = (uint64_t *)(a4 + updated[23]);
  *uint64_t v44 = v43;
  v44[1] = v45;
  uint64_t v46 = v122;
  sub_100013B50((uint64_t)v122, (uint64_t)v130, &qword_1003ED120);
  sub_100013B50((uint64_t)v130, a4 + updated[25], &qword_1003ED120);
  sub_100013B50((uint64_t)(v46 + 2), (uint64_t)v129, &qword_1003ED120);
  sub_100013B50((uint64_t)v129, a4 + updated[9], &qword_1003ED120);
  uint64_t v47 = v46[5];
  uint64_t v48 = (void *)(a4 + updated[19]);
  void *v48 = v46[4];
  v48[1] = v47;
  uint64_t v49 = v46[9];
  *(void *)(a4 + updated[6]) = v46[8];
  *(void *)(a4 + updated[7]) = v49;
  *(void *)(a4 + updated[8]) = v46[10];
  uint64_t v51 = v46[6];
  uint64_t v50 = v46[7];
  sub_100033EAC((uint64_t)v130);
  sub_100033EAC((uint64_t)v129);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100088134((uint64_t)v46);
  unint64_t v52 = (void *)(a4 + updated[20]);
  *unint64_t v52 = v51;
  v52[1] = v50;
  uint64_t v53 = v126;
  char v54 = sub_100164A9C();
  if ((v54 & 1) == 0)
  {
    uint64_t v67 = Fence.label.getter();
    uint64_t v68 = (uint64_t *)(a4 + updated[11]);
    *uint64_t v68 = v67;
    v68[1] = v69;
    uint64_t v70 = (uint64_t)v113;
    Fence.placemark.getter();
    uint64_t v71 = PlaceMark.streetAddress.getter();
    uint64_t v73 = v72;
    unint64_t v74 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    uint64_t v75 = v112;
    v74(v70, v112);
    uint64_t v76 = (uint64_t *)(a4 + updated[5]);
    *uint64_t v76 = v71;
    v76[1] = v73;
    Fence.placemark.getter();
    uint64_t v77 = PlaceMark.streetName.getter();
    uint64_t v79 = v78;
    v74(v70, v75);
    uint64_t v80 = (uint64_t *)(a4 + updated[18]);
    *uint64_t v80 = v77;
    v80[1] = v79;
    Fence.placemark.getter();
    sub_1000874B4(v70, (uint64_t *)v127);
    uint64_t v81 = v128;
    uint64_t v82 = a4 + updated[21];
    long long v83 = v127[1];
    *(_OWORD *)uint64_t v82 = v127[0];
    *(_OWORD *)(v82 + 16) = v83;
    long long v84 = v127[3];
    *(_OWORD *)(v82 + 32) = v127[2];
    *(_OWORD *)(v82 + 48) = v84;
    long long v85 = v127[5];
    *(_OWORD *)(v82 + 64) = v127[4];
    *(_OWORD *)(v82 + 80) = v85;
    *(void *)(v82 + 96) = v81;
    uint64_t v86 = Fence.label.getter();
    uint64_t v87 = (uint64_t *)(a4 + updated[16]);
    *uint64_t v87 = v86;
    v87[1] = v88;
    uint64_t v89 = v114;
    Fence.region.getter();
    os_log_type_t v90 = v123;
    Fence.MonitorRegion.source.getter();
    uint64_t v91 = *(void (**)(char *, uint64_t))(v118 + 8);
    uint64_t v92 = v89;
    uint64_t v93 = v119;
    v91(v92, v119);
    uint64_t v94 = v124;
    uint64_t v95 = v115;
    uint64_t v96 = v90;
    uint64_t v97 = v116;
    (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v115, v96, v116);
    int v98 = (*(uint64_t (**)(char *, uint64_t))(v94 + 88))(v95, v97);
    if (v98 == enum case for Fence.MonitorRegion.Source.unknown(_:))
    {
      uint64_t v99 = 0;
LABEL_31:
      (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v97);
      uint64_t v100 = a4 + updated[13];
      *(void *)uint64_t v100 = v99;
      *(unsigned char *)(v100 + 8) = 0;
      uint64_t v101 = v117;
      Fence.region.getter();
      Fence.MonitorRegion.center.getter();
      uint64_t v103 = v102;
      v91(v101, v93);
      uint64_t v104 = a4 + updated[12];
      *(void *)uint64_t v104 = v103;
      *(unsigned char *)(v104 + 8) = 0;
      Fence.region.getter();
      Fence.MonitorRegion.center.getter();
      uint64_t v106 = v105;
      v91(v101, v93);
      uint64_t v107 = a4 + updated[14];
      *(void *)uint64_t v107 = v106;
      *(unsigned char *)(v107 + 8) = 0;
      Fence.region.getter();
      Fence.MonitorRegion.radius.getter();
      uint64_t v109 = v108;
      uint64_t v110 = type metadata accessor for Fence();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v53, v110);
      sub_1000880D4(v125, (uint64_t (*)(void))type metadata accessor for ClientContext);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v91)(v101, v93);
      uint64_t v66 = updated[17];
      *(void *)(a4 + v66) = v109;
      goto LABEL_32;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.currentLocation(_:))
    {
      uint64_t v99 = 1;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.friendLocation(_:))
    {
      uint64_t v99 = 2;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.labelledLocation(_:))
    {
      uint64_t v99 = 3;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.addressBook(_:))
    {
      uint64_t v99 = 4;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.custom(_:))
    {
      uint64_t v99 = 5;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.droppedPin(_:))
    {
      uint64_t v99 = 6;
      goto LABEL_31;
    }
    if (v98 == enum case for Fence.MonitorRegion.Source.tool(_:))
    {
      uint64_t v99 = 7;
      goto LABEL_31;
    }
    while (1)
    {
LABEL_33:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  uint64_t v55 = (void *)(a4 + updated[11]);
  *uint64_t v55 = 0;
  v55[1] = 0;
  uint64_t v56 = (void *)(a4 + updated[5]);
  *uint64_t v56 = 0;
  v56[1] = 0;
  uint64_t v57 = (void *)(a4 + updated[18]);
  *uint64_t v57 = 0;
  v57[1] = 0;
  uint64_t v58 = a4 + updated[21];
  *(_OWORD *)uint64_t v58 = xmmword_100368320;
  *(_OWORD *)(v58 + 16) = 0u;
  *(_OWORD *)(v58 + 32) = 0u;
  *(_OWORD *)(v58 + 48) = 0u;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 80) = 0u;
  *(void *)(v58 + 96) = 0;
  uint64_t v59 = (void *)(a4 + updated[16]);
  *uint64_t v59 = 0;
  v59[1] = 0;
  uint64_t v60 = a4 + updated[13];
  *(void *)uint64_t v60 = 0;
  *(unsigned char *)(v60 + 8) = 0;
  uint64_t v61 = a4 + updated[12];
  CLLocationDegrees longitude = kCLLocationCoordinate2DInvalid.longitude;
  *(CLLocationDegrees *)uint64_t v61 = kCLLocationCoordinate2DInvalid.latitude;
  *(unsigned char *)(v61 + 8) = 0;
  uint64_t v63 = type metadata accessor for Fence();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v53, v63);
  uint64_t result = sub_1000880D4(v125, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v65 = a4 + updated[14];
  *(CLLocationDegrees *)uint64_t v65 = longitude;
  *(unsigned char *)(v65 + 8) = 0;
  uint64_t v66 = updated[17];
  *(void *)(a4 + v66) = 0;
LABEL_32:
  *(unsigned char *)(a4 + v66 + 8) = v54 & 1;
  return result;
}

uint64_t sub_100086640()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_1000287E4(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100086678()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100086680(uint64_t a1)
{
  unint64_t v2 = sub_10006219C();

  return RequestContentRepresentable.description.getter(a1, v2);
}

unint64_t sub_1000866BC(char a1)
{
  unint64_t result = 0x6F43746E65696C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73736572646461;
      break;
    case 2:
      unint64_t result = 0x736C69616D65;
      break;
    case 3:
      unint64_t result = 0x6D754E656E6F6870;
      break;
    case 4:
      unint64_t result = 7562345;
      break;
    case 5:
      unint64_t result = 0x6449646E65697266;
      break;
    case 6:
      unint64_t result = 1850700649;
      break;
    case 7:
      unint64_t result = 0x6C6562616CLL;
      break;
    case 8:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 9:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 10:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 11:
      unint64_t result = 0x6F656D6974656E6FLL;
      break;
    case 12:
      unint64_t result = 0x6441797474657270;
      break;
    case 13:
      unint64_t result = 0x737569646172;
      break;
    case 14:
      unint64_t result = 0x614E746565727473;
      break;
    case 15:
      unint64_t result = 1701869940;
      break;
    case 16:
      unint64_t result = 0x72656767697274;
      break;
    case 17:
      unint64_t result = 0x726464416C6C7566;
      break;
    case 18:
      unint64_t result = 0x64726F6365526B63;
      break;
    case 19:
      unint64_t result = 0xD000000000000015;
      break;
    case 20:
      unint64_t result = 0xD000000000000010;
      break;
    case 21:
      unint64_t result = 25705;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100086978()
{
  return sub_1000866BC(*v0);
}

uint64_t sub_100086980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008B018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000869A8()
{
  return 0;
}

void sub_1000869B4(unsigned char *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_1000869C0(uint64_t a1)
{
  unint64_t v2 = sub_10008A9C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000869FC(uint64_t a1)
{
  unint64_t v2 = sub_10008A9C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100086A38(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED218);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10008A9C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16[0]) = 0;
  type metadata accessor for ClientContext();
  sub_10008AA14(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t updated = (int *)type metadata accessor for UpdateFenceRequestContent();
    LOBYTE(v16[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&v16[0] = *(void *)(v3 + updated[6]);
    char v18 = 2;
    sub_100044014(&qword_1003ED230);
    sub_10008AA5C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v16[0] = *(void *)(v3 + updated[7]);
    char v18 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&v16[0] = *(void *)(v3 + updated[8]);
    char v18 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = v3 + updated[21];
    uint64_t v11 = *(void *)(v10 + 96);
    long long v12 = *(_OWORD *)(v10 + 16);
    v16[0] = *(_OWORD *)v10;
    v16[1] = v12;
    long long v13 = *(_OWORD *)(v10 + 48);
    v16[2] = *(_OWORD *)(v10 + 32);
    v16[3] = v13;
    long long v14 = *(_OWORD *)(v10 + 80);
    v16[4] = *(_OWORD *)(v10 + 64);
    v16[5] = v14;
    uint64_t v17 = v11;
    char v18 = 17;
    sub_10008AAC8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16[0]) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16[0]) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100087030(void *a1)
{
  return sub_100086A38(a1);
}

unint64_t sub_100087048(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7972746E756F63;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0x7974696C61636F6CLL;
      break;
    case 4:
      unint64_t result = 0x646F436574617473;
      break;
    case 5:
      unint64_t result = 0x6441746565727473;
      break;
    case 6:
      unint64_t result = 0x614E746565727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100087148(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED248);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100042524(a1, a1[3]);
  sub_10008AB1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100013B50(v3 + 32, (uint64_t)v12, &qword_1003ED258);
    sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED258);
    v10[15] = 2;
    sub_100044014(&qword_1003ED230);
    sub_10008AA5C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000873B4()
{
  return sub_100087048(*v0);
}

uint64_t sub_1000873BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008B948(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000873E4(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1000873F0(uint64_t a1)
{
  unint64_t v2 = sub_10008AB1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008742C(uint64_t a1)
{
  unint64_t v2 = sub_10008AB1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100087468(void *a1)
{
  return sub_100087148(a1);
}

uint64_t sub_1000874B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = PlaceMark.administrativeArea.getter();
  uint64_t v25 = v5;
  uint64_t v26 = v4;
  uint64_t v6 = PlaceMark.country.getter();
  uint64_t v23 = v7;
  uint64_t v24 = v6;
  uint64_t v22 = PlaceMark.formattedAddressLines.getter();
  uint64_t v8 = PlaceMark.locality.getter();
  uint64_t v10 = v9;
  uint64_t v11 = PlaceMark.stateCode.getter();
  uint64_t v13 = v12;
  uint64_t v14 = PlaceMark.streetAddress.getter();
  uint64_t v16 = v15;
  uint64_t v17 = PlaceMark.streetName.getter();
  uint64_t v19 = v18;
  uint64_t v20 = type metadata accessor for PlaceMark();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  *a2 = v26;
  a2[1] = v25;
  a2[2] = v24;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v8;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v13;
  a2[9] = v14;
  a2[10] = v16;
  a2[11] = v17;
  a2[12] = v19;
  return result;
}

uint64_t sub_1000875B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Fence();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = type metadata accessor for UpdateFenceRequestContent();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  return _swift_task_switch(sub_100087834, 0, 0);
}

uint64_t sub_100087834()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v17 = v0[20];
  uint64_t v18 = v0[22];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[3];
  v0[26] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  v0[27] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v0[28] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v6, v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v7, v5);
  sub_100013210(v2, v17, &qword_1003ED110);
  sub_100013210(v1, v18, &qword_1003F3B30);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[29] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100087A20;
  uint64_t v12 = v0[25];
  uint64_t v13 = v0[22];
  uint64_t v14 = v0[19];
  uint64_t v15 = v0[20];
  return sub_1000AD580(v12, v14, v15, v13);
}

uint64_t sub_100087A20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  sub_10000A520(v2, &qword_1003ED110);
  sub_10000A520(v1, &qword_1003F3B30);
  return _swift_task_switch(sub_100087B64, 0, 0);
}

uint64_t sub_100087B64()
{
  uint64_t v39 = v0;
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  sub_10008806C(v0[25], v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  sub_1000859E4(v1, v3, v6, v2);
  if (qword_1003EC060 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100044058(v10, (uint64_t)qword_10040B770);
  sub_10008806C(v9, v8, (uint64_t (*)(void))type metadata accessor for UpdateFenceRequestContent);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[15];
  if (v13)
  {
    uint64_t v15 = v0[14];
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    sub_10008806C(v14, v15, (uint64_t (*)(void))type metadata accessor for UpdateFenceRequestContent);
    uint64_t v17 = String.init<A>(describing:)();
    v0[2] = sub_100037004(v17, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000880D4(v14, (uint64_t (*)(void))type metadata accessor for UpdateFenceRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Update Fence Request content: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000880D4(v0[15], (uint64_t (*)(void))type metadata accessor for UpdateFenceRequestContent);
  }

  uint64_t v20 = v0[8];
  uint64_t v19 = (void *)v0[9];
  uint64_t v21 = v0[7];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v19 = sub_1000CA550;
  v19[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v19, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_10008AA14(&qword_1003ED118, (void (*)(uint64_t))type metadata accessor for UpdateFenceRequestContent);
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v24 = v23;
  swift_release();
  uint64_t v36 = v22;
  uint64_t v37 = v24;
  uint64_t v25 = v0[25];
  uint64_t v26 = v0[18];
  uint64_t v28 = v0[16];
  uint64_t v27 = v0[17];
  uint64_t v29 = v0[11];
  uint64_t v30 = v0[10];
  uint64_t v31 = v0[3];
  uint64_t v32 = v0[4];
  (*(void (**)(void, void))(v0[28] + 8))(v0[6], v0[27]);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v30);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v31, v27);
  sub_1000880D4(v28, (uint64_t (*)(void))type metadata accessor for UpdateFenceRequestContent);
  sub_1000880D4(v25, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v34 = v0[26];
  return v33(v34, v36, v37);
}

uint64_t type metadata accessor for UpdateFenceRequestContent()
{
  uint64_t result = qword_1003ED180;
  if (!qword_1003ED180) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008806C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000880D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100088134(uint64_t a1)
{
  return a1;
}

void *sub_1000881B8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v102 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v102 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v141 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v141;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v10;
    uint64_t v11 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v11;
    os_log_type_t v12 = (int *)type metadata accessor for ClientContext();
    uint64_t v13 = v12[12];
    uint64_t v137 = (uint64_t)a2 + v13;
    int64_t v139 = (char *)v4 + v13;
    uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
    char v135 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v135(v139, v137, v14);
    *(void *)((char *)v4 + v12[13]) = *(uint64_t *)((char *)a2 + v12[13]);
    uint64_t v15 = v12[14];
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    *((unsigned char *)v4 + v12[15]) = *((unsigned char *)a2 + v12[15]);
    uint64_t v19 = v12[16];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v142 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v142;
    uint64_t v22 = v12[17];
    uint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v140 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v140;
    uint64_t v25 = v12[18];
    uint64_t v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v138 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v138;
    uint64_t v28 = v12[19];
    uint64_t v29 = (void *)((char *)v4 + v28);
    uint64_t v30 = (uint64_t *)((char *)a2 + v28);
    uint64_t v136 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v136;
    uint64_t v31 = v12[20];
    uint64_t v32 = (void *)((char *)v4 + v31);
    unint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v134 = v33[1];
    void *v32 = *v33;
    v32[1] = v134;
    uint64_t v34 = v12[21];
    unint64_t v35 = (void *)((char *)v4 + v34);
    uint64_t v36 = (uint64_t *)((char *)a2 + v34);
    uint64_t v133 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v133;
    uint64_t v37 = v12[22];
    uint64_t v38 = (void *)((char *)v4 + v37);
    uint64_t v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v132 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v132;
    uint64_t v40 = v12[23];
    uint64_t v41 = (void *)((char *)v4 + v40);
    uint64_t v42 = (uint64_t *)((char *)a2 + v40);
    uint64_t v131 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v131;
    uint64_t v43 = v12[24];
    uint64_t v44 = (char *)v4 + v43;
    uint64_t v45 = (uint64_t)a2 + v43;
    *(void *)uint64_t v44 = *(void *)v45;
    unsigned char v44[8] = *(unsigned char *)(v45 + 8);
    *((unsigned char *)v4 + v12[25]) = *((unsigned char *)a2 + v12[25]);
    *(void *)((char *)v4 + v12[26]) = *(uint64_t *)((char *)a2 + v12[26]);
    uint64_t v46 = v12[27];
    uint64_t v47 = (void *)((char *)v4 + v46);
    uint64_t v48 = (uint64_t *)((char *)a2 + v46);
    uint64_t v130 = v48[1];
    void *v47 = *v48;
    v47[1] = v130;
    uint64_t v49 = v12[28];
    uint64_t v50 = (void *)((char *)v4 + v49);
    uint64_t v51 = (uint64_t *)((char *)a2 + v49);
    uint64_t v129 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v129;
    uint64_t v52 = v12[29];
    uint64_t v53 = (void *)((char *)v4 + v52);
    char v54 = (uint64_t *)((char *)a2 + v52);
    uint64_t v128 = v54[1];
    void *v53 = *v54;
    v53[1] = v128;
    uint64_t v55 = a3[5];
    uint64_t v56 = a3[6];
    uint64_t v57 = (void *)((char *)v4 + v55);
    uint64_t v58 = (uint64_t *)((char *)a2 + v55);
    uint64_t v127 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v127;
    *(void *)((char *)v4 + v56) = *(uint64_t *)((char *)a2 + v56);
    uint64_t v59 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)((char *)v4 + v59) = *(uint64_t *)((char *)a2 + v59);
    uint64_t v60 = a3[9];
    uint64_t v61 = a3[10];
    uint64_t v62 = (void *)((char *)v4 + v60);
    uint64_t v63 = (uint64_t *)((char *)a2 + v60);
    uint64_t v126 = v63[1];
    void *v62 = *v63;
    v62[1] = v126;
    *((unsigned char *)v4 + v61) = *((unsigned char *)a2 + v61);
    uint64_t v64 = a3[11];
    uint64_t v65 = a3[12];
    uint64_t v66 = (void *)((char *)v4 + v64);
    uint64_t v67 = (uint64_t *)((char *)a2 + v64);
    uint64_t v68 = v67[1];
    void *v66 = *v67;
    v66[1] = v68;
    uint64_t v69 = (char *)v4 + v65;
    uint64_t v70 = (uint64_t)a2 + v65;
    *(void *)uint64_t v69 = *(void *)v70;
    v69[8] = *(unsigned char *)(v70 + 8);
    uint64_t v71 = a3[13];
    uint64_t v72 = a3[14];
    uint64_t v73 = (char *)v4 + v71;
    uint64_t v74 = (uint64_t)a2 + v71;
    *(void *)uint64_t v73 = *(void *)v74;
    v73[8] = *(unsigned char *)(v74 + 8);
    uint64_t v75 = (char *)v4 + v72;
    uint64_t v76 = (uint64_t)a2 + v72;
    *(void *)uint64_t v75 = *(void *)v76;
    v75[8] = *(unsigned char *)(v76 + 8);
    uint64_t v77 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v78 = (void *)((char *)v4 + v77);
    uint64_t v79 = (uint64_t *)((char *)a2 + v77);
    uint64_t v80 = v79[1];
    *uint64_t v78 = *v79;
    v78[1] = v80;
    uint64_t v81 = a3[17];
    uint64_t v82 = a3[18];
    long long v83 = (char *)v4 + v81;
    uint64_t v84 = (uint64_t)a2 + v81;
    *(void *)long long v83 = *(void *)v84;
    v83[8] = *(unsigned char *)(v84 + 8);
    long long v85 = (void *)((char *)v4 + v82);
    uint64_t v86 = (uint64_t *)((char *)a2 + v82);
    uint64_t v87 = v86[1];
    *long long v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = a3[19];
    uint64_t v89 = a3[20];
    os_log_type_t v90 = (void *)((char *)v4 + v88);
    uint64_t v91 = (uint64_t *)((char *)a2 + v88);
    uint64_t v92 = v91[1];
    *os_log_type_t v90 = *v91;
    v90[1] = v92;
    uint64_t v93 = (void *)((char *)v4 + v89);
    uint64_t v94 = (uint64_t *)((char *)a2 + v89);
    uint64_t v95 = v94[1];
    *uint64_t v93 = *v94;
    v93[1] = v95;
    uint64_t v96 = a3[21];
    uint64_t v97 = (char *)v4 + v96;
    uint64_t v98 = (uint64_t)a2 + v96;
    uint64_t v125 = *(uint64_t *)((char *)a2 + v96 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v125 == 1)
    {
      long long v99 = *(_OWORD *)(v98 + 80);
      *((_OWORD *)v97 + 4) = *(_OWORD *)(v98 + 64);
      *((_OWORD *)v97 + 5) = v99;
      *((void *)v97 + 12) = *(void *)(v98 + 96);
      long long v100 = *(_OWORD *)(v98 + 16);
      *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
      *((_OWORD *)v97 + 1) = v100;
      long long v101 = *(_OWORD *)(v98 + 48);
      *((_OWORD *)v97 + 2) = *(_OWORD *)(v98 + 32);
      *((_OWORD *)v97 + 3) = v101;
    }
    else
    {
      *(void *)uint64_t v97 = *(void *)v98;
      *((void *)v97 + 1) = v125;
      uint64_t v103 = *(void *)(v98 + 24);
      *((void *)v97 + 2) = *(void *)(v98 + 16);
      *((void *)v97 + 3) = v103;
      uint64_t v104 = *(void *)(v98 + 40);
      *((void *)v97 + 4) = *(void *)(v98 + 32);
      *((void *)v97 + 5) = v104;
      uint64_t v105 = *(void *)(v98 + 56);
      *((void *)v97 + 6) = *(void *)(v98 + 48);
      *((void *)v97 + 7) = v105;
      uint64_t v106 = *(void *)(v98 + 72);
      *((void *)v97 + 8) = *(void *)(v98 + 64);
      *((void *)v97 + 9) = v106;
      uint64_t v107 = *(void *)(v98 + 88);
      *((void *)v97 + 10) = *(void *)(v98 + 80);
      *((void *)v97 + 11) = v107;
      *((void *)v97 + 12) = *(void *)(v98 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v108 = a3[22];
    uint64_t v109 = a3[23];
    uint64_t v110 = (void *)((char *)v4 + v108);
    uint64_t v111 = (uint64_t *)((char *)a2 + v108);
    uint64_t v112 = v111[1];
    void *v110 = *v111;
    v110[1] = v112;
    uint64_t v113 = (void *)((char *)v4 + v109);
    uint64_t v114 = (uint64_t *)((char *)a2 + v109);
    uint64_t v115 = v114[1];
    *uint64_t v113 = *v114;
    v113[1] = v115;
    uint64_t v116 = a3[24];
    uint64_t v117 = a3[25];
    uint64_t v118 = (void *)((char *)v4 + v116);
    uint64_t v119 = (uint64_t *)((char *)a2 + v116);
    uint64_t v120 = v119[1];
    void *v118 = *v119;
    v118[1] = v120;
    uint64_t v121 = (void *)((char *)v4 + v117);
    unsigned int v122 = (uint64_t *)((char *)a2 + v117);
    uint64_t v123 = v122[1];
    *uint64_t v121 = *v122;
    v121[1] = v123;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100088788(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 84) + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100088A24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  os_log_type_t v12 = (int *)type metadata accessor for ClientContext();
  uint64_t v13 = v12[12];
  uint64_t v136 = a2 + v13;
  uint64_t v138 = a1 + v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v134(v138, v136, v14);
  *(void *)(a1 + v12[13]) = *(void *)(a2 + v12[13]);
  uint64_t v15 = v12[14];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(unsigned char *)(a1 + v12[15]) = *(unsigned char *)(a2 + v12[15]);
  uint64_t v19 = v12[16];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v140 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v140;
  uint64_t v22 = v12[17];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v139 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v139;
  uint64_t v25 = v12[18];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v137 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v137;
  uint64_t v28 = v12[19];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v135 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v135;
  uint64_t v31 = v12[20];
  uint64_t v32 = (void *)(a1 + v31);
  unint64_t v33 = (void *)(a2 + v31);
  uint64_t v133 = v33[1];
  void *v32 = *v33;
  v32[1] = v133;
  uint64_t v34 = v12[21];
  unint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v132 = v36[1];
  *unint64_t v35 = *v36;
  v35[1] = v132;
  uint64_t v37 = v12[22];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  uint64_t v131 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v131;
  uint64_t v40 = v12[23];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (void *)(a2 + v40);
  uint64_t v130 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v130;
  uint64_t v43 = v12[24];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  *(unsigned char *)(a1 + v12[25]) = *(unsigned char *)(a2 + v12[25]);
  *(void *)(a1 + v12[26]) = *(void *)(a2 + v12[26]);
  uint64_t v46 = v12[27];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  uint64_t v129 = v48[1];
  void *v47 = *v48;
  v47[1] = v129;
  uint64_t v49 = v12[28];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (void *)(a2 + v49);
  uint64_t v128 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v128;
  uint64_t v52 = v12[29];
  uint64_t v53 = (void *)(a1 + v52);
  char v54 = (void *)(a2 + v52);
  uint64_t v127 = v54[1];
  void *v53 = *v54;
  v53[1] = v127;
  uint64_t v55 = a3[5];
  uint64_t v56 = a3[6];
  uint64_t v57 = (void *)(a1 + v55);
  uint64_t v58 = (void *)(a2 + v55);
  uint64_t v126 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v126;
  *(void *)(a1 + v56) = *(void *)(a2 + v56);
  uint64_t v59 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v59) = *(void *)(a2 + v59);
  uint64_t v60 = a3[9];
  uint64_t v61 = a3[10];
  uint64_t v62 = (void *)(a1 + v60);
  uint64_t v63 = (void *)(a2 + v60);
  uint64_t v125 = v63[1];
  void *v62 = *v63;
  v62[1] = v125;
  *(unsigned char *)(a1 + v61) = *(unsigned char *)(a2 + v61);
  uint64_t v64 = a3[11];
  uint64_t v65 = a3[12];
  uint64_t v66 = (void *)(a1 + v64);
  uint64_t v67 = (void *)(a2 + v64);
  uint64_t v68 = v67[1];
  void *v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = a1 + v65;
  uint64_t v70 = a2 + v65;
  *(void *)uint64_t v69 = *(void *)v70;
  *(unsigned char *)(v69 + 8) = *(unsigned char *)(v70 + 8);
  uint64_t v71 = a3[13];
  uint64_t v72 = a3[14];
  uint64_t v73 = a1 + v71;
  uint64_t v74 = a2 + v71;
  *(void *)uint64_t v73 = *(void *)v74;
  *(unsigned char *)(v73 + 8) = *(unsigned char *)(v74 + 8);
  uint64_t v75 = a1 + v72;
  uint64_t v76 = a2 + v72;
  *(void *)uint64_t v75 = *(void *)v76;
  *(unsigned char *)(v75 + 8) = *(unsigned char *)(v76 + 8);
  uint64_t v77 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(a2 + v77);
  uint64_t v80 = v79[1];
  *uint64_t v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = a3[17];
  uint64_t v82 = a3[18];
  uint64_t v83 = a1 + v81;
  uint64_t v84 = a2 + v81;
  *(void *)uint64_t v83 = *(void *)v84;
  *(unsigned char *)(v83 + 8) = *(unsigned char *)(v84 + 8);
  long long v85 = (void *)(a1 + v82);
  uint64_t v86 = (void *)(a2 + v82);
  uint64_t v87 = v86[1];
  *long long v85 = *v86;
  v85[1] = v87;
  uint64_t v88 = a3[19];
  uint64_t v89 = a3[20];
  os_log_type_t v90 = (void *)(a1 + v88);
  uint64_t v91 = (void *)(a2 + v88);
  uint64_t v92 = v91[1];
  *os_log_type_t v90 = *v91;
  v90[1] = v92;
  uint64_t v93 = (void *)(a1 + v89);
  uint64_t v94 = (void *)(a2 + v89);
  uint64_t v95 = v94[1];
  *uint64_t v93 = *v94;
  v93[1] = v95;
  uint64_t v96 = a3[21];
  uint64_t v97 = a1 + v96;
  uint64_t v98 = a2 + v96;
  uint64_t v124 = *(void *)(a2 + v96 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v124 == 1)
  {
    long long v99 = *(_OWORD *)(v98 + 80);
    *(_OWORD *)(v97 + 64) = *(_OWORD *)(v98 + 64);
    *(_OWORD *)(v97 + 80) = v99;
    *(void *)(v97 + 96) = *(void *)(v98 + 96);
    long long v100 = *(_OWORD *)(v98 + 16);
    *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
    *(_OWORD *)(v97 + 16) = v100;
    long long v101 = *(_OWORD *)(v98 + 48);
    *(_OWORD *)(v97 + 32) = *(_OWORD *)(v98 + 32);
    *(_OWORD *)(v97 + 48) = v101;
  }
  else
  {
    *(void *)uint64_t v97 = *(void *)v98;
    *(void *)(v97 + 8) = v124;
    uint64_t v102 = *(void *)(v98 + 24);
    *(void *)(v97 + 16) = *(void *)(v98 + 16);
    *(void *)(v97 + 24) = v102;
    uint64_t v103 = *(void *)(v98 + 40);
    *(void *)(v97 + 32) = *(void *)(v98 + 32);
    *(void *)(v97 + 40) = v103;
    uint64_t v104 = *(void *)(v98 + 56);
    *(void *)(v97 + 48) = *(void *)(v98 + 48);
    *(void *)(v97 + 56) = v104;
    uint64_t v105 = *(void *)(v98 + 72);
    *(void *)(v97 + 64) = *(void *)(v98 + 64);
    *(void *)(v97 + 72) = v105;
    uint64_t v106 = *(void *)(v98 + 88);
    *(void *)(v97 + 80) = *(void *)(v98 + 80);
    *(void *)(v97 + 88) = v106;
    *(void *)(v97 + 96) = *(void *)(v98 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v107 = a3[22];
  uint64_t v108 = a3[23];
  uint64_t v109 = (void *)(a1 + v107);
  uint64_t v110 = (void *)(a2 + v107);
  uint64_t v111 = v110[1];
  *uint64_t v109 = *v110;
  v109[1] = v111;
  uint64_t v112 = (void *)(a1 + v108);
  uint64_t v113 = (void *)(a2 + v108);
  uint64_t v114 = v113[1];
  void *v112 = *v113;
  v112[1] = v114;
  uint64_t v115 = a3[24];
  uint64_t v116 = a3[25];
  uint64_t v117 = (void *)(a1 + v115);
  uint64_t v118 = (void *)(a2 + v115);
  uint64_t v119 = v118[1];
  *uint64_t v117 = *v118;
  v117[1] = v119;
  uint64_t v120 = (void *)(a1 + v116);
  uint64_t v121 = (void *)(a2 + v116);
  uint64_t v122 = v121[1];
  *uint64_t v120 = *v121;
  v120[1] = v122;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100088FA4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for ClientContext();
  uint64_t v7 = v6[12];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + v6[13]) = *(void *)(a2 + v6[13]);
  uint64_t v11 = v6[14];
  os_log_type_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *os_log_type_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v6[15]) = *(unsigned char *)(a2 + v6[15]);
  uint64_t v14 = v6[16];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v6[17];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = v6[18];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = v6[19];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  void *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v6[20];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v6[21];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v6[22];
  unint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  *unint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v6[23];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v6[24];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v41 = *v40;
  *(unsigned char *)(v39 + 8) = *((unsigned char *)v40 + 8);
  *(void *)uint64_t v39 = v41;
  *(unsigned char *)(a1 + v6[25]) = *(unsigned char *)(a2 + v6[25]);
  *(void *)(a1 + v6[26]) = *(void *)(a2 + v6[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v6[27];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (void *)(a2 + v42);
  *uint64_t v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = v6[28];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (void *)(a2 + v45);
  *uint64_t v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v6[29];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)(a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[5];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  *uint64_t v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[9];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (void *)(a2 + v54);
  *uint64_t v55 = *v56;
  v55[1] = v56[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v57 = a3[11];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (void *)(a2 + v57);
  *uint64_t v58 = *v59;
  v58[1] = v59[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = a3[12];
  uint64_t v61 = a1 + v60;
  uint64_t v62 = (uint64_t *)(a2 + v60);
  uint64_t v63 = *v62;
  *(unsigned char *)(v61 + 8) = *((unsigned char *)v62 + 8);
  *(void *)uint64_t v61 = v63;
  uint64_t v64 = a3[13];
  uint64_t v65 = a1 + v64;
  uint64_t v66 = (uint64_t *)(a2 + v64);
  uint64_t v67 = *v66;
  *(unsigned char *)(v65 + 8) = *((unsigned char *)v66 + 8);
  *(void *)uint64_t v65 = v67;
  uint64_t v68 = a3[14];
  uint64_t v69 = a1 + v68;
  uint64_t v70 = (uint64_t *)(a2 + v68);
  uint64_t v71 = *v70;
  *(unsigned char *)(v69 + 8) = *((unsigned char *)v70 + 8);
  *(void *)uint64_t v69 = v71;
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  uint64_t v72 = a3[16];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (void *)(a2 + v72);
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[17];
  uint64_t v76 = a1 + v75;
  uint64_t v77 = (uint64_t *)(a2 + v75);
  uint64_t v78 = *v77;
  *(unsigned char *)(v76 + 8) = *((unsigned char *)v77 + 8);
  *(void *)uint64_t v76 = v78;
  uint64_t v79 = a3[18];
  uint64_t v80 = (void *)(a1 + v79);
  uint64_t v81 = (void *)(a2 + v79);
  *uint64_t v80 = *v81;
  v80[1] = v81[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[19];
  uint64_t v83 = (void *)(a1 + v82);
  uint64_t v84 = (void *)(a2 + v82);
  *uint64_t v83 = *v84;
  v83[1] = v84[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v85 = a3[20];
  uint64_t v86 = (void *)(a1 + v85);
  uint64_t v87 = (void *)(a2 + v85);
  *uint64_t v86 = *v87;
  v86[1] = v87[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[21];
  uint64_t v89 = a1 + v88;
  os_log_type_t v90 = (long long *)(a2 + v88);
  uint64_t v91 = *(void *)(a1 + v88 + 8);
  uint64_t v92 = *(void *)(a2 + v88 + 8);
  if (v91 == 1)
  {
    if (v92 == 1)
    {
      long long v93 = *v90;
      long long v94 = v90[2];
      *(_OWORD *)(v89 + 16) = v90[1];
      *(_OWORD *)(v89 + 32) = v94;
      *(_OWORD *)uint64_t v89 = v93;
      long long v95 = v90[3];
      long long v96 = v90[4];
      long long v97 = v90[5];
      *(void *)(v89 + 96) = *((void *)v90 + 12);
      *(_OWORD *)(v89 + 64) = v96;
      *(_OWORD *)(v89 + 80) = v97;
      *(_OWORD *)(v89 + 48) = v95;
    }
    else
    {
      *(void *)uint64_t v89 = *(void *)v90;
      *(void *)(v89 + 8) = *((void *)v90 + 1);
      *(void *)(v89 + 16) = *((void *)v90 + 2);
      *(void *)(v89 + 24) = *((void *)v90 + 3);
      *(void *)(v89 + 32) = *((void *)v90 + 4);
      *(void *)(v89 + 40) = *((void *)v90 + 5);
      *(void *)(v89 + 48) = *((void *)v90 + 6);
      *(void *)(v89 + 56) = *((void *)v90 + 7);
      *(void *)(v89 + 64) = *((void *)v90 + 8);
      *(void *)(v89 + 72) = *((void *)v90 + 9);
      *(void *)(v89 + 80) = *((void *)v90 + 10);
      *(void *)(v89 + 88) = *((void *)v90 + 11);
      *(void *)(v89 + 96) = *((void *)v90 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v92 == 1)
  {
    sub_100089840(v89);
    long long v99 = v90[1];
    long long v98 = v90[2];
    *(_OWORD *)uint64_t v89 = *v90;
    *(_OWORD *)(v89 + 16) = v99;
    *(_OWORD *)(v89 + 32) = v98;
    long long v101 = v90[4];
    long long v100 = v90[5];
    long long v102 = v90[3];
    *(void *)(v89 + 96) = *((void *)v90 + 12);
    *(_OWORD *)(v89 + 64) = v101;
    *(_OWORD *)(v89 + 80) = v100;
    *(_OWORD *)(v89 + 48) = v102;
  }
  else
  {
    *(void *)uint64_t v89 = *(void *)v90;
    *(void *)(v89 + 8) = *((void *)v90 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 16) = *((void *)v90 + 2);
    *(void *)(v89 + 24) = *((void *)v90 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 32) = *((void *)v90 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 40) = *((void *)v90 + 5);
    *(void *)(v89 + 48) = *((void *)v90 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 56) = *((void *)v90 + 7);
    *(void *)(v89 + 64) = *((void *)v90 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 72) = *((void *)v90 + 9);
    *(void *)(v89 + 80) = *((void *)v90 + 10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v89 + 88) = *((void *)v90 + 11);
    *(void *)(v89 + 96) = *((void *)v90 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v103 = a3[22];
  uint64_t v104 = (void *)(a1 + v103);
  uint64_t v105 = (void *)(a2 + v103);
  *uint64_t v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v106 = a3[23];
  uint64_t v107 = (void *)(a1 + v106);
  uint64_t v108 = (void *)(a2 + v106);
  *uint64_t v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v109 = a3[24];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = (void *)(a2 + v109);
  void *v110 = *v111;
  v110[1] = v111[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = a3[25];
  uint64_t v113 = (void *)(a1 + v112);
  uint64_t v114 = (void *)(a2 + v112);
  *uint64_t v113 = *v114;
  v113[1] = v114[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100089840(uint64_t a1)
{
  return a1;
}

uint64_t sub_100089870(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v7 = (int *)type metadata accessor for ClientContext();
  uint64_t v8 = v7[12];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(_OWORD *)(a1 + v7[14]) = *(_OWORD *)(a2 + v7[14]);
  *(unsigned char *)(a1 + v7[15]) = *(unsigned char *)(a2 + v7[15]);
  *(_OWORD *)(a1 + v7[16]) = *(_OWORD *)(a2 + v7[16]);
  *(_OWORD *)(a1 + v7[17]) = *(_OWORD *)(a2 + v7[17]);
  *(_OWORD *)(a1 + v7[18]) = *(_OWORD *)(a2 + v7[18]);
  *(_OWORD *)(a1 + v7[19]) = *(_OWORD *)(a2 + v7[19]);
  *(_OWORD *)(a1 + v7[20]) = *(_OWORD *)(a2 + v7[20]);
  *(_OWORD *)(a1 + v7[21]) = *(_OWORD *)(a2 + v7[21]);
  *(_OWORD *)(a1 + v7[22]) = *(_OWORD *)(a2 + v7[22]);
  *(_OWORD *)(a1 + v7[23]) = *(_OWORD *)(a2 + v7[23]);
  uint64_t v12 = v7[24];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(a1 + v7[25]) = *(unsigned char *)(a2 + v7[25]);
  *(void *)(a1 + v7[26]) = *(void *)(a2 + v7[26]);
  *(_OWORD *)(a1 + v7[27]) = *(_OWORD *)(a2 + v7[27]);
  *(_OWORD *)(a1 + v7[28]) = *(_OWORD *)(a2 + v7[28]);
  *(_OWORD *)(a1 + v7[29]) = *(_OWORD *)(a2 + v7[29]);
  uint64_t v15 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a3[13];
  uint64_t v22 = a3[14];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  uint64_t v25 = a1 + v22;
  uint64_t v26 = a2 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  uint64_t v27 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  uint64_t v28 = a3[17];
  uint64_t v29 = a3[18];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(void *)uint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v32 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  uint64_t v33 = a3[21];
  uint64_t v34 = a3[22];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  long long v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  long long v38 = *(_OWORD *)(v36 + 32);
  long long v39 = *(_OWORD *)(v36 + 48);
  long long v40 = *(_OWORD *)(v36 + 64);
  long long v41 = *(_OWORD *)(v36 + 80);
  *(void *)(v35 + 96) = *(void *)(v36 + 96);
  *(_OWORD *)(v35 + 64) = v40;
  *(_OWORD *)(v35 + 80) = v41;
  *(_OWORD *)(v35 + 32) = v38;
  *(_OWORD *)(v35 + 48) = v39;
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  uint64_t v42 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v42) = *(_OWORD *)(a2 + v42);
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  return a1;
}

uint64_t sub_100089B48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for ClientContext();
  uint64_t v13 = v12[12];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  *(void *)(a1 + v12[13]) = *(void *)(a2 + v12[13]);
  uint64_t v17 = v12[14];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v12[15]) = *(unsigned char *)(a2 + v12[15]);
  uint64_t v22 = v12[16];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = v12[17];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = v12[18];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = v12[19];
  long long v38 = (void *)(a1 + v37);
  long long v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *long long v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = v12[20];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v44;
  uint64_t v45 = v44[1];
  *uint64_t v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  uint64_t v47 = v12[21];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  void *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = v12[22];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  void *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v12[23];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = v12[24];
  uint64_t v63 = a1 + v62;
  uint64_t v64 = a2 + v62;
  *(void *)uint64_t v63 = *(void *)v64;
  *(unsigned char *)(v63 + 8) = *(unsigned char *)(v64 + 8);
  *(unsigned char *)(a1 + v12[25]) = *(unsigned char *)(a2 + v12[25]);
  *(void *)(a1 + v12[26]) = *(void *)(a2 + v12[26]);
  swift_bridgeObjectRelease();
  uint64_t v65 = v12[27];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (uint64_t *)(a2 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v12[28];
  uint64_t v71 = (void *)(a1 + v70);
  uint64_t v72 = (uint64_t *)(a2 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v12[29];
  uint64_t v76 = (void *)(a1 + v75);
  uint64_t v77 = (uint64_t *)(a2 + v75);
  uint64_t v79 = *v77;
  uint64_t v78 = v77[1];
  *uint64_t v76 = v79;
  v76[1] = v78;
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[5];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (uint64_t *)(a2 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *uint64_t v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v85 = a3[9];
  uint64_t v86 = (void *)(a1 + v85);
  uint64_t v87 = (uint64_t *)(a2 + v85);
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  *uint64_t v86 = v89;
  v86[1] = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v91 = (void *)(a1 + v90);
  uint64_t v92 = (uint64_t *)(a2 + v90);
  uint64_t v94 = *v92;
  uint64_t v93 = v92[1];
  *uint64_t v91 = v94;
  v91[1] = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = a3[12];
  uint64_t v96 = a3[13];
  uint64_t v97 = a1 + v95;
  uint64_t v98 = a2 + v95;
  *(void *)uint64_t v97 = *(void *)v98;
  *(unsigned char *)(v97 + 8) = *(unsigned char *)(v98 + 8);
  uint64_t v99 = a1 + v96;
  uint64_t v100 = a2 + v96;
  *(void *)uint64_t v99 = *(void *)v100;
  *(unsigned char *)(v99 + 8) = *(unsigned char *)(v100 + 8);
  uint64_t v101 = a3[14];
  uint64_t v102 = a3[15];
  uint64_t v103 = a1 + v101;
  uint64_t v104 = a2 + v101;
  *(void *)uint64_t v103 = *(void *)v104;
  *(unsigned char *)(v103 + 8) = *(unsigned char *)(v104 + 8);
  *(unsigned char *)(a1 + v102) = *(unsigned char *)(a2 + v102);
  uint64_t v105 = a3[16];
  uint64_t v106 = (void *)(a1 + v105);
  uint64_t v107 = (uint64_t *)(a2 + v105);
  uint64_t v109 = *v107;
  uint64_t v108 = v107[1];
  *uint64_t v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease();
  uint64_t v110 = a3[17];
  uint64_t v111 = a3[18];
  uint64_t v112 = a1 + v110;
  uint64_t v113 = a2 + v110;
  *(void *)uint64_t v112 = *(void *)v113;
  *(unsigned char *)(v112 + 8) = *(unsigned char *)(v113 + 8);
  uint64_t v114 = (void *)(a1 + v111);
  uint64_t v115 = (uint64_t *)(a2 + v111);
  uint64_t v117 = *v115;
  uint64_t v116 = v115[1];
  void *v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease();
  uint64_t v118 = a3[19];
  uint64_t v119 = (void *)(a1 + v118);
  uint64_t v120 = (uint64_t *)(a2 + v118);
  uint64_t v122 = *v120;
  uint64_t v121 = v120[1];
  *uint64_t v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease();
  uint64_t v123 = a3[20];
  uint64_t v124 = (void *)(a1 + v123);
  uint64_t v125 = (uint64_t *)(a2 + v123);
  uint64_t v127 = *v125;
  uint64_t v126 = v125[1];
  *uint64_t v124 = v127;
  v124[1] = v126;
  swift_bridgeObjectRelease();
  uint64_t v128 = a3[21];
  uint64_t v129 = (void *)(a1 + v128);
  uint64_t v130 = (void *)(a2 + v128);
  if (*(void *)(a1 + v128 + 8) != 1)
  {
    uint64_t v131 = v130[1];
    if (v131 != 1)
    {
      *uint64_t v129 = *v130;
      v129[1] = v131;
      swift_bridgeObjectRelease();
      uint64_t v135 = v130[3];
      v129[2] = v130[2];
      v129[3] = v135;
      swift_bridgeObjectRelease();
      v129[4] = v130[4];
      swift_bridgeObjectRelease();
      uint64_t v136 = v130[6];
      v129[5] = v130[5];
      v129[6] = v136;
      swift_bridgeObjectRelease();
      uint64_t v137 = v130[8];
      v129[7] = v130[7];
      v129[8] = v137;
      swift_bridgeObjectRelease();
      uint64_t v138 = v130[10];
      v129[9] = v130[9];
      v129[10] = v138;
      swift_bridgeObjectRelease();
      uint64_t v139 = v130[12];
      v129[11] = v130[11];
      v129[12] = v139;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100089840((uint64_t)v129);
  }
  long long v132 = *((_OWORD *)v130 + 5);
  *((_OWORD *)v129 + 4) = *((_OWORD *)v130 + 4);
  *((_OWORD *)v129 + 5) = v132;
  v129[12] = v130[12];
  long long v133 = *((_OWORD *)v130 + 1);
  *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
  *((_OWORD *)v129 + 1) = v133;
  long long v134 = *((_OWORD *)v130 + 3);
  *((_OWORD *)v129 + 2) = *((_OWORD *)v130 + 2);
  *((_OWORD *)v129 + 3) = v134;
LABEL_6:
  uint64_t v140 = a3[22];
  uint64_t v141 = (void *)(a1 + v140);
  uint64_t v142 = (uint64_t *)(a2 + v140);
  uint64_t v144 = *v142;
  uint64_t v143 = v142[1];
  *uint64_t v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  uint64_t v145 = a3[23];
  uint64_t v146 = (void *)(a1 + v145);
  uint64_t v147 = (uint64_t *)(a2 + v145);
  uint64_t v149 = *v147;
  uint64_t v148 = v147[1];
  *uint64_t v146 = v149;
  v146[1] = v148;
  swift_bridgeObjectRelease();
  uint64_t v150 = a3[24];
  unint64_t v151 = (void *)(a1 + v150);
  uint64_t v152 = (uint64_t *)(a2 + v150);
  uint64_t v154 = *v152;
  uint64_t v153 = v152[1];
  *unint64_t v151 = v154;
  v151[1] = v153;
  swift_bridgeObjectRelease();
  uint64_t v155 = a3[25];
  uint64_t v156 = (void *)(a1 + v155);
  unint64_t v157 = (uint64_t *)(a2 + v155);
  uint64_t v159 = *v157;
  uint64_t v158 = v157[1];
  *uint64_t v156 = v159;
  v156[1] = v158;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008A090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008A0A4);
}

uint64_t sub_10008A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10008A174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008A188);
}

uint64_t sub_10008A188(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_10008A248()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for UpdateFenceRequestContent.Address()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for UpdateFenceRequestContent.Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UpdateFenceRequestContent.Address(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for UpdateFenceRequestContent.Address(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for UpdateFenceRequestContent.Address(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateFenceRequestContent.Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateFenceRequestContent.Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateFenceRequestContent.Address()
{
  return &type metadata for UpdateFenceRequestContent.Address;
}

void *assignWithCopy for UpdateFenceRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = a2 + 1;
  unint64_t v5 = a2[2];
  if (a1[2] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100022C64(*v4, v5);
      uint64_t v8 = a1[1];
      unint64_t v9 = a1[2];
      a1[1] = v7;
      a1[2] = v5;
      sub_100044090(v8, v9);
      return a1;
    }
    sub_10008A798((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_100022C64(*v4, v5);
  a1[1] = v6;
  a1[2] = v5;
  return a1;
}

uint64_t sub_10008A798(uint64_t a1)
{
  return a1;
}

void *assignWithTake for UpdateFenceRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  int v4 = a2 + 1;
  unint64_t v5 = a1[2];
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = a2[2];
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = a1[1];
      a1[1] = *v4;
      a1[2] = v6;
      sub_100044090(v7, v5);
      return a1;
    }
    sub_10008A798((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateFenceRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateFenceRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateFenceRequest()
{
  return &type metadata for UpdateFenceRequest;
}

unint64_t sub_10008A914()
{
  unint64_t result = qword_1003ED208;
  if (!qword_1003ED208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED208);
  }
  return result;
}

unint64_t sub_10008A96C()
{
  unint64_t result = qword_1003ED210;
  if (!qword_1003ED210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED210);
  }
  return result;
}

unint64_t sub_10008A9C0()
{
  unint64_t result = qword_1003ED220;
  if (!qword_1003ED220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED220);
  }
  return result;
}

uint64_t sub_10008AA14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008AA5C()
{
  unint64_t result = qword_1003ED238;
  if (!qword_1003ED238)
  {
    sub_10004AE58(&qword_1003ED230);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED238);
  }
  return result;
}

unint64_t sub_10008AAC8()
{
  unint64_t result = qword_1003ED240;
  if (!qword_1003ED240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED240);
  }
  return result;
}

unint64_t sub_10008AB1C()
{
  unint64_t result = qword_1003ED250;
  if (!qword_1003ED250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED250);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UpdateFenceRequestContent.Address.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008AC3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateFenceRequestContent.Address.CodingKeys()
{
  return &type metadata for UpdateFenceRequestContent.Address.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UpdateFenceRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UpdateFenceRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *unint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008ADD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateFenceRequestContent.CodingKeys()
{
  return &type metadata for UpdateFenceRequestContent.CodingKeys;
}

unint64_t sub_10008AE0C()
{
  unint64_t result = qword_1003ED260;
  if (!qword_1003ED260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED260);
  }
  return result;
}

unint64_t sub_10008AE64()
{
  unint64_t result = qword_1003ED268;
  if (!qword_1003ED268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED268);
  }
  return result;
}

unint64_t sub_10008AEBC()
{
  unint64_t result = qword_1003ED270;
  if (!qword_1003ED270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED270);
  }
  return result;
}

unint64_t sub_10008AF14()
{
  unint64_t result = qword_1003ED278;
  if (!qword_1003ED278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED278);
  }
  return result;
}

unint64_t sub_10008AF6C()
{
  unint64_t result = qword_1003ED280;
  if (!qword_1003ED280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED280);
  }
  return result;
}

unint64_t sub_10008AFC4()
{
  unint64_t result = qword_1003ED288;
  if (!qword_1003ED288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED288);
  }
  return result;
}

uint64_t sub_10008B018(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEC00000073726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6449646E65697266 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1850700649 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6F656D6974656E6FLL && a2 == 0xEB00000000796C6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6441797474657270 && a2 == 0xED00007373657264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x72656767697274 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x726464416C6C7566 && a2 == 0xEB00000000737365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x64726F6365526B63 && a2 == 0xEC000000656D614ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100373C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100372870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 21;
    }
    else {
      return 22;
    }
  }
}

uint64_t sub_10008B948(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100373CB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100373CD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7974696C61636F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F436574617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6441746565727473 && a2 == 0xED00007373657264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x614E746565727473 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10008BC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008BC88);
}

uint64_t sub_10008BC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10008BCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008BD08);
}

uint64_t sub_10008BD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FriendshipEndpoint()
{
  uint64_t result = qword_1003ED2E8;
  if (!qword_1003ED2E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10008BDC4()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10001EB18(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100373D10, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v1 = [self currentDevice];
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  BOOL v2 = v1;
  id v3 = [v1 serverFriendlyDescription];

  if (!v3)
  {
LABEL_8:
    __break(1u);
    return;
  }
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  char v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_10001EB18(v4, v6, 0xD000000000000011, 0x8000000100373D30, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100018DC4();
  uint64_t v10 = v9;
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_10001EB18(v8, v10, 0x6567412D72657355, 0xEA0000000000746ELL, v11);
  swift_bridgeObjectRelease();
  if (static SystemInfo.isInternalBuild.getter())
  {
    id v12 = [self standardUserDefaults];
    NSString v13 = String._bridgeToObjectiveC()();
    unsigned int v14 = [v12 BOOLForKey:v13];

    if (v14)
    {
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      sub_10001EB18(1702195828, 0xE400000000000000, 0xD000000000000018, 0x8000000100373D70, v15);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10008BFFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100052FAC(v0, qword_10040B4F8);
  sub_100044058(v0, (uint64_t)qword_10040B4F8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10008C084(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_100044014(&qword_1003ED430);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10008FB10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_100044014(&qword_1003ED418);
  sub_10008FBB8(&qword_1003ED438);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_10008FC1C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10008C250(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED3D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_10008F750();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for FriendshipImportContent();
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_10004703C(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10008C480@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ED3F0);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FriendshipImportContent();
  __chkstk_darwin(v9);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  sub_100042524(a1, v12);
  sub_10008F750();
  uint64_t v26 = v8;
  uint64_t v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v27);
  }
  uint64_t v14 = v24;
  uint64_t v28 = v9;
  v31[183] = 0;
  sub_100036EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v31, (uint64_t)v30, &qword_1003ED068);
  sub_100013B50((uint64_t)v30, (uint64_t)v11, &qword_1003ED068);
  char v29 = 1;
  sub_10004703C(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  uint64_t v15 = (uint64_t)v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v28;
  sub_10004E45C(v15, (uint64_t)&v11[*(int *)(v28 + 20)]);
  char v29 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v25);
  uint64_t v20 = (uint64_t *)&v11[*(int *)(v16 + 24)];
  *uint64_t v20 = v17;
  v20[1] = v19;
  sub_10008DDCC((uint64_t)v11, v23, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
  sub_1000233E4((uint64_t)v27);
  return sub_10008DE34((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
}

BOOL sub_10008C85C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10008C874()
{
  if (*v0) {
    return 2036625250;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10008C8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008F7A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008C8D4(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10008C8E0(uint64_t a1)
{
  unint64_t v2 = sub_10008FB10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C91C(uint64_t a1)
{
  unint64_t v2 = sub_10008FB10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008C958@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008F884(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10008C988(void *a1)
{
  return sub_10008C084(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10008C9A8(uint64_t a1)
{
  unint64_t v2 = sub_10007225C();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10008C9E4()
{
  uint64_t v1 = 0x6F43746E65696C63;
  if (*v0 != 1) {
    uint64_t v1 = 7107189;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F43726576726573;
  }
}

uint64_t sub_10008CA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100090118(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008CA68(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10008CA74(uint64_t a1)
{
  unint64_t v2 = sub_10008F750();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008CAB0(uint64_t a1)
{
  unint64_t v2 = sub_10008F750();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008CAEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008C480(a1, a2);
}

uint64_t sub_10008CB04(void *a1)
{
  return sub_10008C250(a1);
}

uint64_t sub_10008CB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[227] = a3;
  v3[226] = a2;
  v3[225] = a1;
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v3[228] = v4;
  v3[229] = *(void *)(v4 - 8);
  v3[230] = swift_task_alloc();
  v3[231] = type metadata accessor for FriendshipImportContent();
  v3[232] = swift_task_alloc();
  v3[233] = swift_task_alloc();
  v3[234] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Account();
  v3[235] = v5;
  v3[236] = *(void *)(v5 - 8);
  v3[237] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ClientOrigin();
  v3[238] = v6;
  v3[239] = *(void *)(v6 - 8);
  v3[240] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v3[241] = swift_task_alloc();
  v3[242] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[243] = swift_task_alloc();
  v3[244] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v3[245] = swift_task_alloc();
  v3[246] = swift_task_alloc();
  return _swift_task_switch(sub_10008CDA4, 0, 0);
}

uint64_t sub_10008CDA4()
{
  uint64_t v1 = v0[244];
  uint64_t v2 = v0[242];
  uint64_t v19 = v0[241];
  uint64_t v20 = v0[243];
  uint64_t v3 = v0[240];
  uint64_t v4 = v0[239];
  uint64_t v5 = v0[238];
  uint64_t v18 = v0[237];
  uint64_t v6 = v0[236];
  uint64_t v7 = v0[235];
  uint64_t v8 = v0[225];
  sub_10008BDC4();
  v0[247] = v9;
  uint64_t v10 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v1, 1, 1, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for ClientOrigin.other(_:), v5);
  swift_bridgeObjectRetain();
  RequestOrigin.init(_:)();
  uint64_t v11 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v2, 0, 1, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v18, v8, v7);
  sub_100013210(v2, v19, &qword_1003ED110);
  sub_100013210(v1, v20, &qword_1003F3B30);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[248] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10008CFA8;
  uint64_t v13 = v0[246];
  uint64_t v14 = v0[243];
  uint64_t v15 = v0[241];
  uint64_t v16 = v0[237];
  return sub_1000AD580(v13, v16, v15, v14);
}

uint64_t sub_10008CFA8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1968);
  uint64_t v3 = *(void *)(*v0 + 1960);
  uint64_t v4 = *(void *)(*v0 + 1952);
  uint64_t v5 = *(void *)(*v0 + 1936);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_10008DDCC(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 1992) = v6;
  *uint64_t v6 = v8;
  v6[1] = sub_10008D174;
  return daemon.getter();
}

uint64_t sub_10008D174(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 2000) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 2008) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10004703C(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10004703C(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_10008D350;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10008D350(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[252] = a1;
  v3[253] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10008D6F8, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[254] = v5;
    void *v5 = v4;
    v5[1] = sub_10008D4E4;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_10008D4E4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2016);
  swift_task_dealloc();
  return _swift_task_switch(sub_10008D5F4, v1, 0);
}

uint64_t sub_10008D5F4()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_10008D898, 0, 0);
}

uint64_t sub_10008D6F8()
{
  uint64_t v1 = v0[246];
  uint64_t v2 = v0[245];
  uint64_t v3 = v0[236];
  uint64_t v4 = v0[235];
  uint64_t v5 = v0[225];
  swift_release();
  swift_bridgeObjectRelease();
  sub_10008DE34(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  sub_10008DE34(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  sub_1000440E8(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10008D898()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[245];
  uint64_t v2 = v0[234];
  uint64_t v3 = v0[231];
  uint64_t v4 = v0[227];
  uint64_t v5 = v0[226];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v2, &qword_1003ED068);
  sub_10004E45C(v1, v2 + *(int *)(v3 + 20));
  uint64_t v6 = (void *)(v2 + *(int *)(v3 + 24));
  *uint64_t v6 = v5;
  v6[1] = v4;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v7 = v0[234];
  uint64_t v8 = v0[233];
  uint64_t v9 = type metadata accessor for Logger();
  sub_100044058(v9, (uint64_t)qword_10040B4F8);
  sub_10008DDCC(v7, v8, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[233];
  if (v12)
  {
    uint64_t v14 = v0[232];
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    sub_10008DDCC(v13, v14, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
    uint64_t v16 = String.init<A>(describing:)();
    v0[224] = sub_100037004(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10008DE34(v13, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request content: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10008DE34(v0[233], (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
  }

  uint64_t v18 = v0[253];
  uint64_t v19 = (void *)v0[230];
  uint64_t v20 = v0[229];
  uint64_t v21 = v0[228];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v19 = sub_1000CA550;
  v19[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v19, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v21);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_10004703C(&qword_1003ED328, (void (*)(uint64_t))type metadata accessor for FriendshipImportContent);
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v24 = v23;
  swift_release();
  if (v18)
  {
    swift_errorRelease();
    uint64_t v22 = 0;
    unint64_t v24 = 0xF000000000000000;
  }
  uint64_t v25 = v0[246];
  uint64_t v26 = v0[234];
  (*(void (**)(void, void))(v0[236] + 8))(v0[225], v0[235]);
  sub_10008DE34(v26, (uint64_t (*)(void))type metadata accessor for FriendshipImportContent);
  sub_10008DE34(v25, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_1000287E4(v22, v24);
  sub_1000440E8(0, 0xF000000000000000);
  swift_bridgeObjectRetain();
  sub_1000287E4(v22, v24);
  sub_1000440E8(v22, v24);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v22, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v28 = v0[247];
  return v27(v28, v22, v24);
}

uint64_t type metadata accessor for FriendshipImportContent()
{
  uint64_t result = qword_1003ED388;
  if (!qword_1003ED388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double sub_10008DDB0(_OWORD *a1)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10008DDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008DE34(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10008DE94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    uint64_t v86 = a3;
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    unint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v80 = v17 + v25;
    uint64_t v82 = &v16[v25];
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78(v82, v80, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    uint64_t v28 = &v16[v27];
    char v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v85 = v33[1];
    *(void *)uint64_t v32 = *v33;
    *((void *)v32 + 1) = v85;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v84 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v84;
    uint64_t v37 = v24[18];
    long long v38 = &v16[v37];
    long long v39 = (void *)(v17 + v37);
    uint64_t v83 = v39[1];
    *(void *)long long v38 = *v39;
    *((void *)v38 + 1) = v83;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v81 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v81;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v79 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v79;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v77 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v77;
    uint64_t v49 = v24[22];
    uint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v52 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = v24[23];
    uint64_t v54 = &v16[v53];
    uint64_t v55 = (void *)(v17 + v53);
    uint64_t v56 = v55[1];
    *(void *)uint64_t v54 = *v55;
    *((void *)v54 + 1) = v56;
    uint64_t v57 = v24[24];
    uint64_t v58 = &v16[v57];
    uint64_t v59 = v17 + v57;
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = *(unsigned char *)(v59 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v60 = v24[27];
    uint64_t v61 = &v16[v60];
    uint64_t v62 = (void *)(v17 + v60);
    uint64_t v63 = v62[1];
    *(void *)uint64_t v61 = *v62;
    *((void *)v61 + 1) = v63;
    uint64_t v64 = v24[28];
    uint64_t v65 = &v16[v64];
    uint64_t v66 = (void *)(v17 + v64);
    uint64_t v67 = v66[1];
    *(void *)uint64_t v65 = *v66;
    *((void *)v65 + 1) = v67;
    uint64_t v68 = v24[29];
    uint64_t v69 = &v16[v68];
    uint64_t v70 = (void *)(v17 + v68);
    uint64_t v71 = v70[1];
    *(void *)uint64_t v69 = *v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = *(int *)(v86 + 24);
    uint64_t v73 = (void *)((char *)v4 + v72);
    uint64_t v74 = (uint64_t *)((char *)a2 + v72);
    uint64_t v75 = v74[1];
    *uint64_t v73 = *v74;
    v73[1] = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10008E29C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10008E464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v84 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v78 = v15 + v23;
  uint64_t v80 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v80, v78, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v83 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v83;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v82 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v82;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v81 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v81;
  uint64_t v38 = v22[19];
  long long v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v79 = v40[1];
  *long long v39 = *v40;
  v39[1] = v79;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v77 = v43[1];
  void *v42 = *v43;
  v42[1] = v77;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v75 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v75;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v50 = v49[1];
  void *v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = v22[23];
  uint64_t v52 = (void *)(v14 + v51);
  uint64_t v53 = (void *)(v15 + v51);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = v22[24];
  uint64_t v56 = v14 + v55;
  uint64_t v57 = v15 + v55;
  *(void *)uint64_t v56 = *(void *)v57;
  *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v58 = v22[27];
  uint64_t v59 = (void *)(v14 + v58);
  uint64_t v60 = (void *)(v15 + v58);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = v22[28];
  uint64_t v63 = (void *)(v14 + v62);
  uint64_t v64 = (void *)(v15 + v62);
  uint64_t v65 = v64[1];
  void *v63 = *v64;
  v63[1] = v65;
  uint64_t v66 = v22[29];
  uint64_t v67 = (void *)(v14 + v66);
  uint64_t v68 = (void *)(v15 + v66);
  uint64_t v69 = v68[1];
  void *v67 = *v68;
  v67[1] = v69;
  uint64_t v70 = *(int *)(v84 + 24);
  uint64_t v71 = (void *)(a1 + v70);
  uint64_t v72 = (void *)(a2 + v70);
  uint64_t v73 = v72[1];
  void *v71 = *v72;
  v71[1] = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10008E81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  long long v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *long long v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = *(int *)(a3 + 24);
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  void *v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008EE3C(uint64_t a1)
{
  return a1;
}

_OWORD *sub_10008EE90(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = *(int *)(a3 + 20);
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10008F07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = *(int *)(a3 + 24);
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008F40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F420);
}

uint64_t sub_10008F420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10008F4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F4FC);
}

uint64_t sub_10008F4FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10008F5C0()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportRequest()
{
  return &type metadata for FriendshipImportRequest;
}

uint64_t sub_10008F674(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10004703C(&qword_1003ED3C8, (void (*)(uint64_t))type metadata accessor for FriendshipImportContent);
  uint64_t result = sub_10004703C(&qword_1003ED328, (void (*)(uint64_t))type metadata accessor for FriendshipImportContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10008F6FC()
{
  unint64_t result = qword_1003ED3D0;
  if (!qword_1003ED3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED3D0);
  }
  return result;
}

unint64_t sub_10008F750()
{
  unint64_t result = qword_1003ED3E0;
  if (!qword_1003ED3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED3E0);
  }
  return result;
}

uint64_t sub_10008F7A4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100373D90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008F884(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003ED408);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100042524(a1, v7);
  sub_10008FB10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
    sub_1000440E8(0, 0xF000000000000000);
  }
  else
  {
    sub_100044014(&qword_1003ED418);
    char v14 = 0;
    sub_10008FBB8((unint64_t *)&qword_1003ED420);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_10008FB64();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    sub_1000287E4(v12, v13);
    sub_1000440E8(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    sub_1000287E4(v9, v10);
    sub_1000440E8(v9, v10);
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1000440E8(v9, v10);
  }
  return v7;
}

unint64_t sub_10008FB10()
{
  unint64_t result = qword_1003ED410;
  if (!qword_1003ED410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED410);
  }
  return result;
}

unint64_t sub_10008FB64()
{
  unint64_t result = qword_1003ED428;
  if (!qword_1003ED428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED428);
  }
  return result;
}

uint64_t sub_10008FBB8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10004AE58(&qword_1003ED418);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008FC1C()
{
  unint64_t result = qword_1003ED440;
  if (!qword_1003ED440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED440);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FriendshipImportRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008FD3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportRequest.CodingKeys()
{
  return &type metadata for FriendshipImportRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FriendshipImportContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendshipImportContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008FED0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipImportContent.CodingKeys()
{
  return &type metadata for FriendshipImportContent.CodingKeys;
}

unint64_t sub_10008FF0C()
{
  unint64_t result = qword_1003ED448;
  if (!qword_1003ED448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED448);
  }
  return result;
}

unint64_t sub_10008FF64()
{
  unint64_t result = qword_1003ED450;
  if (!qword_1003ED450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED450);
  }
  return result;
}

unint64_t sub_10008FFBC()
{
  unint64_t result = qword_1003ED458;
  if (!qword_1003ED458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED458);
  }
  return result;
}

unint64_t sub_100090014()
{
  unint64_t result = qword_1003ED460;
  if (!qword_1003ED460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED460);
  }
  return result;
}

unint64_t sub_10009006C()
{
  unint64_t result = qword_1003ED468;
  if (!qword_1003ED468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED468);
  }
  return result;
}

unint64_t sub_1000900C4()
{
  unint64_t result = qword_1003ED470;
  if (!qword_1003ED470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED470);
  }
  return result;
}

uint64_t sub_100090118(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1000902A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10003CB84(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for Handle() - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = Handle.identifier.getter();
      uint64_t v8 = v7;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10003CB84(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000903D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[227] = a4;
  v4[226] = a3;
  v4[225] = a2;
  v4[224] = a1;
  uint64_t v5 = type metadata accessor for IDSStatus();
  v4[228] = v5;
  v4[229] = *(void *)(v5 - 8);
  v4[230] = swift_task_alloc();
  v4[231] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Handle();
  v4[232] = v6;
  v4[233] = *(void *)(v6 - 8);
  v4[234] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientOrigin();
  v4[235] = v7;
  v4[236] = *(void *)(v7 - 8);
  v4[237] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestOrigin();
  v4[238] = v8;
  v4[239] = *(void *)(v8 - 8);
  v4[240] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GroupID();
  v4[241] = v9;
  v4[242] = *(void *)(v9 - 8);
  v4[243] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v4[244] = swift_task_alloc();
  unint64_t v10 = (void *)swift_task_alloc();
  v4[245] = v10;
  *unint64_t v10 = v4;
  v10[1] = sub_100090684;
  return daemon.getter();
}

uint64_t sub_100090684(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1968) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1976) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000962EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000962EC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_100090860;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_100090860(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[248] = a1;
  v3[249] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100090C08, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[250] = v5;
    void *v5 = v4;
    v5[1] = sub_1000909F4;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000909F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1984);
  swift_task_dealloc();
  return _swift_task_switch(sub_100090B04, v1, 0);
}

uint64_t sub_100090B04()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_100090D7C, 0, 0);
}

uint64_t sub_100090C08()
{
  uint64_t v1 = v0[227];
  uint64_t v2 = v0[226];
  uint64_t v3 = v0[225];
  swift_release();
  uint64_t v4 = type metadata accessor for FriendshipRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v1, v4);
  uint64_t v5 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  sub_100099624(v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100090D7C()
{
  uint64_t v1 = v0[244];
  uint64_t v2 = v0[225];
  uint64_t v3 = v0[224];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v3, &qword_1003ED068);
  uint64_t v4 = (int *)type metadata accessor for FriendshipOfferContent(0);
  sub_1000995BC(v2, v3 + v4[5], (uint64_t (*)(void))type metadata accessor for ClientContext);
  FriendshipRequest.endDate.getter();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v0;
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5);
  uint64_t v9 = v0[244];
  if (v8 == 1)
  {
    sub_10000A520(v0[244], (uint64_t *)&unk_1003EE800);
    double v10 = 0.0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    double v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    double v10 = v12 * 1000.0;
  }
  uint64_t v13 = v0[237];
  uint64_t v14 = v0[236];
  uint64_t v15 = v7[235];
  *(double *)(v7[224] + v4[6]) = v10;
  FriendshipRequest.origin.getter();
  char v16 = FriendshipRequest.isFromGroup.getter();
  RequestOrigin.origin.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15) == enum case for ClientOrigin.messagesApp(_:))
  {
    if (v16) {
      uint64_t v17 = (unsigned int *)&enum case for GroupID.group(_:);
    }
    else {
      uint64_t v17 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    }
    (*(void (**)(void, void, void))(v7[242] + 104))(v7[243], *v17, v7[241]);
  }
  else
  {
    uint64_t v18 = v7[237];
    uint64_t v19 = v7[236];
    uint64_t v20 = v7[235];
    (*(void (**)(void, void, void))(v7[242] + 104))(v7[243], enum case for GroupID.oneToOne(_:), v7[241]);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  uint64_t v21 = v7[243];
  uint64_t v22 = v7[242];
  uint64_t v23 = v7[241];
  uint64_t v24 = v7[240];
  uint64_t v25 = v7[239];
  uint64_t v26 = v7[238];
  uint64_t v27 = v7;
  uint64_t v28 = v7[224];
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  uint64_t v29 = GroupID.rawValue.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  uint64_t v32 = (uint64_t *)(v28 + v4[7]);
  uint64_t *v32 = v29;
  v32[1] = v31;
  uint64_t v33 = FriendshipRequest.toHandles.getter();
  uint64_t v34 = *(void *)(v33 + 16);
  uint64_t v70 = v4;
  if (v34)
  {
    uint64_t v35 = v27[233];
    uint64_t v36 = *(void (**)(void, unint64_t, void))(v35 + 16);
    v35 += 16;
    uint64_t v75 = v36;
    unint64_t v37 = v33 + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    unsigned int v74 = enum case for IDSStatus.valid(_:);
    uint64_t v73 = v27[229];
    uint64_t v76 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
    uint64_t v72 = (void (**)(uint64_t, uint64_t))(v35 - 8);
    uint64_t v71 = *(void *)(v35 + 56);
    uint64_t v38 = v27;
    while (1)
    {
      uint64_t v77 = v34;
      uint64_t v41 = v38[231];
      uint64_t v42 = v38[230];
      uint64_t v43 = v38[228];
      v75(v38[234], v37, v38[232]);
      uint64_t v44 = Handle.identifier.getter();
      uint64_t v46 = v45;
      (*(void (**)(uint64_t, void, uint64_t))(v73 + 104))(v41, v74, v43);
      uint64_t v47 = *v76;
      (*v76)(v42, v41, v43);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v50 = sub_10003B888(v44, v46);
      uint64_t v51 = _swiftEmptyDictionarySingleton[2];
      BOOL v52 = (v49 & 1) == 0;
      uint64_t result = v51 + v52;
      if (__OFADD__(v51, v52))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        return result;
      }
      char v54 = v49;
      if (_swiftEmptyDictionarySingleton[3] >= result)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100125DA4();
        }
      }
      else
      {
        sub_10013F264(result, isUniquelyReferenced_nonNull_native);
        unint64_t v55 = sub_10003B888(v44, v46);
        if ((v54 & 1) != (v56 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v50 = v55;
      }
      uint64_t v57 = v38[230];
      uint64_t v58 = v38[228];
      if (v54)
      {
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 40))(_swiftEmptyDictionarySingleton[7] + *(void *)(v73 + 72) * v50, v57, v58);
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v50 >> 6) + 8] |= 1 << v50;
        uint64_t v59 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v50);
        *uint64_t v59 = v44;
        v59[1] = v46;
        uint64_t result = v47(_swiftEmptyDictionarySingleton[7] + *(void *)(v73 + 72) * v50, v57, v58);
        uint64_t v60 = _swiftEmptyDictionarySingleton[2];
        BOOL v61 = __OFADD__(v60, 1);
        uint64_t v62 = v60 + 1;
        if (v61) {
          goto LABEL_31;
        }
        _swiftEmptyDictionarySingleton[2] = v62;
        swift_bridgeObjectRetain();
      }
      uint64_t v39 = v38[234];
      uint64_t v40 = v38[232];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v72)(v39, v40);
      v37 += v71;
      uint64_t v34 = v77 - 1;
      if (v77 == 1) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v38 = v27;
LABEL_24:
  uint64_t v63 = v38[227];
  uint64_t v64 = v38[226];
  uint64_t v65 = v38[225];
  uint64_t v66 = v38[224];
  uint64_t v67 = type metadata accessor for FriendshipRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v63, v67);
  uint64_t v68 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v64, v68);
  sub_100099624(v65, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  *(void *)(v66 + v70[8]) = _swiftEmptyDictionarySingleton;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = (uint64_t (*)(void))v38[1];
  return v69();
}

uint64_t sub_10009142C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[228] = a4;
  v4[227] = a3;
  v4[226] = a2;
  v4[225] = a1;
  uint64_t v5 = type metadata accessor for HandleType();
  v4[229] = v5;
  v4[230] = *(void *)(v5 - 8);
  v4[231] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v4[232] = swift_task_alloc();
  v4[233] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Handle();
  v4[234] = v6;
  v4[235] = *(void *)(v6 - 8);
  v4[236] = swift_task_alloc();
  v4[237] = swift_task_alloc();
  v4[238] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ClientOrigin();
  v4[239] = v7;
  v4[240] = *(void *)(v7 - 8);
  v4[241] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for RequestOrigin();
  v4[242] = v8;
  v4[243] = *(void *)(v8 - 8);
  v4[244] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GroupID();
  v4[245] = v9;
  v4[246] = *(void *)(v9 - 8);
  v4[247] = swift_task_alloc();
  sub_100044014((uint64_t *)&unk_1003EE800);
  v4[248] = swift_task_alloc();
  double v10 = (void *)swift_task_alloc();
  v4[249] = v10;
  *double v10 = v4;
  v10[1] = sub_100091724;
  return daemon.getter();
}

uint64_t sub_100091724(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = (void *)*v1;
  v2[250] = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[251] = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  v2[252] = v4;
  uint64_t v5 = type metadata accessor for DataManager(0);
  v2[253] = v5;
  uint64_t v6 = sub_1000962EC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  v2[254] = v6;
  uint64_t v7 = sub_1000962EC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  v2[255] = v7;
  *uint64_t v3 = v9;
  v3[1] = sub_10009190C;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10009190C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[256] = a1;
  v3[257] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100091CB4, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[258] = v5;
    void *v5 = v4;
    v5[1] = sub_100091AA0;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_100091AA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2048);
  swift_task_dealloc();
  return _swift_task_switch(sub_100091BB0, v1, 0);
}

uint64_t sub_100091BB0()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_100091E50, 0, 0);
}

uint64_t sub_100091CB4()
{
  uint64_t v1 = v0[228];
  uint64_t v2 = v0[227];
  uint64_t v3 = v0[226];
  swift_release();
  uint64_t v4 = type metadata accessor for FriendshipRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v1, v4);
  uint64_t v5 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  sub_100099624(v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100091E50()
{
  uint64_t v1 = v0[248];
  uint64_t v2 = v0[226];
  uint64_t v3 = v0[225];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v3, &qword_1003ED068);
  uint64_t v4 = (int *)type metadata accessor for FriendshipRequestContent(0);
  v0[259] = v4;
  sub_1000995BC(v2, v3 + v4[5], (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v5 = FriendshipRequest.toHandles.getter();
  uint64_t v6 = sub_1000902A0(v5);
  swift_bridgeObjectRelease();
  *(void *)(v3 + v4[8]) = v6;
  FriendshipRequest.endDate.getter();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v1, 1, v7);
  uint64_t v10 = v0[248];
  if (v9 == 1)
  {
    sub_10000A520(v0[248], (uint64_t *)&unk_1003EE800);
    double v11 = 0.0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    double v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    double v11 = v13 * 1000.0;
  }
  uint64_t v14 = v0[241];
  uint64_t v15 = v0[240];
  uint64_t v16 = v0[239];
  *(double *)(v0[225] + v4[6]) = v11;
  FriendshipRequest.origin.getter();
  char v17 = FriendshipRequest.isFromGroup.getter();
  RequestOrigin.origin.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 88))(v14, v16) == enum case for ClientOrigin.messagesApp(_:))
  {
    if (v17) {
      uint64_t v18 = (unsigned int *)&enum case for GroupID.group(_:);
    }
    else {
      uint64_t v18 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    }
    (*(void (**)(void, void, void))(v0[246] + 104))(v0[247], *v18, v0[245]);
  }
  else
  {
    uint64_t v19 = v0[241];
    uint64_t v20 = v0[240];
    uint64_t v21 = v0[239];
    (*(void (**)(void, void, void))(v0[246] + 104))(v0[247], enum case for GroupID.oneToOne(_:), v0[245]);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  uint64_t v22 = v0[247];
  uint64_t v23 = v0[246];
  uint64_t v24 = v0[245];
  uint64_t v25 = v0[225];
  (*(void (**)(void, void))(v0[243] + 8))(v0[244], v0[242]);
  uint64_t v26 = GroupID.rawValue.getter();
  uint64_t v28 = v27;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v29 = (uint64_t *)(v25 + v4[7]);
  *uint64_t v29 = v26;
  v29[1] = v28;
  uint64_t v30 = (void *)swift_task_alloc();
  v0[260] = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_100092190;
  return daemon.getter();
}

uint64_t sub_100092190(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[261] = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[262] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10009231C;
  uint64_t v5 = v2[255];
  uint64_t v6 = v2[254];
  uint64_t v7 = v2[253];
  uint64_t v8 = v2[252];
  return ActorServiceDaemon.getService<A>()(v8, v7, v6, v5);
}

uint64_t sub_10009231C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 2104) = a1;
  *(void *)(v3 + 2112) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1) {
    uint64_t v4 = sub_100093398;
  }
  else {
    uint64_t v4 = sub_10009245C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10009245C()
{
  uint64_t v1 = FriendshipRequest.toHandles.getter();
  *(void *)(v0 + 2120) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2128) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 1880);
    uint64_t v4 = *(void *)(v0 + 1840);
    uint64_t v5 = *(void (**)(void, unint64_t, void))(v3 + 16);
    v3 += 16;
    int v6 = *(_DWORD *)(v3 + 64);
    *(_DWORD *)(v0 + 2232) = v6;
    uint64_t v7 = enum case for HandleType.follower(_:);
    *(_DWORD *)(v0 + 2236) = enum case for HandleType.follower(_:);
    *(_DWORD *)(v0 + 2240) = enum case for HandleType.following(_:);
    *(void *)(v0 + 2136) = *(void *)(v3 + 56);
    *(void *)(v0 + 2144) = v5;
    *(void *)(v0 + 2160) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 2152) = 0;
    uint64_t v8 = *(void *)(v0 + 1848);
    uint64_t v9 = *(void *)(v0 + 1832);
    v5(*(void *)(v0 + 1904), v1 + ((v6 + 32) & ~(unint64_t)v6), *(void *)(v0 + 1872));
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
    *(void *)(v0 + 2168) = v10;
    *(void *)(v0 + 2176) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v10(v8, v7, v9);
    double v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v11;
    *double v11 = v0;
    v11[1] = sub_100092790;
    uint64_t v12 = *(void *)(v0 + 1904);
    uint64_t v13 = *(void *)(v0 + 1864);
    uint64_t v14 = *(void *)(v0 + 1848);
    return sub_100110598(v13, v12, v14, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v0 + 1824);
    uint64_t v17 = *(void *)(v0 + 1816);
    uint64_t v18 = *(void *)(v0 + 1808);
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    uint64_t v21 = FriendshipRequest.toHandles.getter();
    swift_release();
    uint64_t v22 = *(void *)(v21 + 16);
    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for FriendshipRequestType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
    uint64_t v24 = type metadata accessor for FriendshipRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v17, v24);
    sub_100099624(v18, (uint64_t (*)(void))type metadata accessor for ClientContext);
    if (v20 != v22)
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = 0;
    }
    *(void *)(*(void *)(v0 + 1800) + *(int *)(*(void *)(v0 + 2072) + 36)) = v19;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

uint64_t sub_100092790()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1848);
  uint64_t v3 = *(void *)(*v0 + 1840);
  uint64_t v4 = *(void *)(*v0 + 1832);
  swift_task_dealloc();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 2192) = v5;
  *(void *)(v1 + 2200) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  return _swift_task_switch(sub_1000928F8, 0, 0);
}

uint64_t sub_1000928F8()
{
  uint64_t v1 = *(void *)(v0 + 1880);
  uint64_t v2 = *(void *)(v0 + 1872);
  uint64_t v3 = *(void *)(v0 + 1864);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 2208) = v4;
  *(void *)(v0 + 2216) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v2) == 1)
  {
    sub_10000A520(v3, &qword_1003F3B30);
LABEL_15:
    (*(void (**)(void, void, void))(v0 + 2168))(*(void *)(v0 + 1848), *(unsigned int *)(v0 + 2240), *(void *)(v0 + 1832));
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 2224) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_100092DAC;
    uint64_t v31 = *(void *)(v0 + 1904);
    uint64_t v32 = *(void *)(v0 + 1856);
LABEL_16:
    uint64_t v33 = *(void *)(v0 + 1848);
    return sub_100110598(v32, v31, v33, 0);
  }
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v0 + 1896), v3, v2);
  uint64_t v5 = Handle.serverID.getter();
  if (!v6)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1880) + 8))(*(void *)(v0 + 1896), *(void *)(v0 + 1872));
    goto LABEL_15;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void **)(v0 + 2160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v10 = sub_10004AFDC(0, v10[2] + 1, 1, *(void **)(v0 + 2160));
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    uint64_t v10 = sub_10004AFDC((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  uint64_t v13 = *(void *)(v0 + 1904);
  uint64_t v14 = *(void *)(v0 + 1896);
  uint64_t v15 = *(void *)(v0 + 1880);
  uint64_t v16 = *(void *)(v0 + 1872);
  v10[2] = v12 + 1;
  uint64_t v17 = &v10[2 * v12];
  v17[4] = v7;
  v17[5] = v8;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v18(v14, v16);
  v18(v13, v16);
  uint64_t v19 = *(void *)(v0 + 2152) + 1;
  if (v19 != *(void *)(v0 + 2128))
  {
    *(void *)(v0 + 2160) = v10;
    *(void *)(v0 + 2152) = v19;
    uint64_t v34 = *(unsigned int *)(v0 + 2236);
    uint64_t v35 = *(void *)(v0 + 1848);
    uint64_t v36 = *(void *)(v0 + 1840);
    uint64_t v37 = *(void *)(v0 + 1832);
    (*(void (**)(void, unint64_t, void))(v0 + 2144))(*(void *)(v0 + 1904), *(void *)(v0 + 2120)+ ((*(unsigned __int8 *)(v0 + 2232) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2232))+ *(void *)(v0 + 2136) * v19, *(void *)(v0 + 1872));
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104);
    *(void *)(v0 + 2168) = v38;
    *(void *)(v0 + 2176) = (v36 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v38(v35, v34, v37);
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 2184) = v39;
    *uint64_t v39 = v0;
    v39[1] = sub_100092790;
    uint64_t v31 = *(void *)(v0 + 1904);
    uint64_t v32 = *(void *)(v0 + 1864);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v0 + 1824);
  uint64_t v21 = *(void *)(v0 + 1816);
  uint64_t v22 = *(void *)(v0 + 1808);
  uint64_t v23 = v10[2];
  uint64_t v24 = FriendshipRequest.toHandles.getter();
  swift_release();
  uint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for FriendshipRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v20, v26);
  uint64_t v27 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v21, v27);
  sub_100099624(v22, (uint64_t (*)(void))type metadata accessor for ClientContext);
  if (v23 != v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
  }
  *(void *)(*(void *)(v0 + 1800) + *(int *)(*(void *)(v0 + 2072) + 36)) = v10;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100092DAC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 2192);
  uint64_t v2 = *(void *)(*(void *)v0 + 1848);
  uint64_t v3 = *(void *)(*(void *)v0 + 1832);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_100092F0C, 0, 0);
}

uint64_t sub_100092F0C()
{
  uint64_t v1 = *(void *)(v0 + 1872);
  uint64_t v2 = *(void *)(v0 + 1856);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2208))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 1880) + 8))(*(void *)(v0 + 1904), v1);
    swift_bridgeObjectRelease();
    sub_10000A520(v2, &qword_1003F3B30);
LABEL_11:
    uint64_t v8 = *(void **)(v0 + 2160);
    goto LABEL_12;
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 1880) + 32))(*(void *)(v0 + 1888), v2, v1);
  uint64_t v3 = Handle.serverID.getter();
  if (!v4)
  {
    uint64_t v18 = *(void *)(v0 + 1904);
    uint64_t v19 = *(void *)(v0 + 1872);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 1880) + 8);
    v20(*(void *)(v0 + 1888), v19);
    v20(v18, v19);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void **)(v0 + 2160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v8 = sub_10004AFDC(0, v8[2] + 1, 1, *(void **)(v0 + 2160));
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    uint64_t v8 = sub_10004AFDC((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  uint64_t v11 = *(void *)(v0 + 1904);
  uint64_t v12 = *(void *)(v0 + 1888);
  uint64_t v13 = *(void *)(v0 + 1880);
  uint64_t v14 = *(void *)(v0 + 1872);
  v8[2] = v10 + 1;
  uint64_t v15 = &v8[2 * v10];
  v15[4] = v5;
  v15[5] = v6;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v16(v12, v14);
  v16(v11, v14);
  uint64_t v17 = *(void *)(v0 + 2152) + 1;
  if (v17 == *(void *)(v0 + 2128))
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v21 = *(void *)(v0 + 1824);
    uint64_t v22 = *(void *)(v0 + 1816);
    uint64_t v23 = *(void *)(v0 + 1808);
    uint64_t v24 = v8[2];
    uint64_t v25 = FriendshipRequest.toHandles.getter();
    swift_release();
    uint64_t v26 = *(void *)(v25 + 16);
    swift_bridgeObjectRelease();
    uint64_t v27 = type metadata accessor for FriendshipRequestType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v21, v27);
    uint64_t v28 = type metadata accessor for FriendshipRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v22, v28);
    sub_100099624(v23, (uint64_t (*)(void))type metadata accessor for ClientContext);
    if (v24 == v26)
    {
      uint64_t v29 = v8;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = 0;
    }
    *(void *)(*(void *)(v0 + 1800) + *(int *)(*(void *)(v0 + 2072) + 36)) = v29;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
  *(void *)(v0 + 2160) = v8;
  *(void *)(v0 + 2152) = v17;
  uint64_t v32 = *(unsigned int *)(v0 + 2236);
  uint64_t v33 = *(void *)(v0 + 1848);
  uint64_t v34 = *(void *)(v0 + 1840);
  uint64_t v35 = *(void *)(v0 + 1832);
  (*(void (**)(void, unint64_t, void))(v0 + 2144))(*(void *)(v0 + 1904), *(void *)(v0 + 2120)+ ((*(unsigned __int8 *)(v0 + 2232) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2232))+ *(void *)(v0 + 2136) * v17, *(void *)(v0 + 1872));
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 104);
  *(void *)(v0 + 2168) = v36;
  *(void *)(v0 + 2176) = (v34 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v36(v33, v32, v35);
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 2184) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_100092790;
  uint64_t v38 = *(void *)(v0 + 1904);
  uint64_t v39 = *(void *)(v0 + 1864);
  uint64_t v40 = *(void *)(v0 + 1848);
  return sub_100110598(v39, v38, v40, 0);
}

uint64_t sub_100093398()
{
  uint64_t v1 = v0[228];
  uint64_t v2 = v0[227];
  uint64_t v3 = v0[226];
  uint64_t v4 = type metadata accessor for FriendshipRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v1, v4);
  uint64_t v5 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
  sub_100099624(v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_errorRelease();
  *(void *)(v0[225] + *(int *)(v0[259] + 36)) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10009353C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_100044014(&qword_1003ED678);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100099ABC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v17 = 0;
  sub_100044014(&qword_1003ED418);
  sub_10008FBB8(&qword_1003ED438);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_10008FC1C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100093708(uint64_t a1)
{
  unint64_t v2 = sub_100099ABC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100093744(uint64_t a1)
{
  unint64_t v2 = sub_100099ABC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100093780@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100099830(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000937B0(void *a1)
{
  return sub_10009353C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1000937D0(uint64_t a1)
{
  unint64_t v2 = sub_100072464();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10009380C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100099684();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v13, &qword_1003ED068);
  sub_100013B50((uint64_t)v13, (uint64_t)v12, &qword_1003ED068);
  char v14 = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FriendshipOfferContent(0);
    LOBYTE(v12[0]) = 1;
    type metadata accessor for ClientContext();
    sub_1000962EC(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[0] = *(void *)(v3 + *(int *)(v9 + 32));
    char v14 = 4;
    sub_100044014(&qword_1003ED638);
    sub_100099784();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100093AB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ED628);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FriendshipOfferContent(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  sub_100042524(a1, v12);
  sub_100099684();
  uint64_t v26 = v8;
  uint64_t v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v27);
  }
  uint64_t v28 = v3;
  uint64_t v22 = (int *)v9;
  v31[183] = 0;
  sub_100036EB0();
  uint64_t v14 = v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v31, (uint64_t)v30, &qword_1003ED068);
  sub_100013B50((uint64_t)v30, (uint64_t)v11, &qword_1003ED068);
  LOBYTE(v29) = 1;
  sub_1000962EC(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  uint64_t v15 = (uint64_t)v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v22;
  sub_10004E45C(v15, (uint64_t)&v11[v22[5]]);
  LOBYTE(v29) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v11[v16[6]] = v17;
  LOBYTE(v29) = 3;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = (uint64_t *)&v11[v16[7]];
  *uint64_t v19 = v18;
  v19[1] = v20;
  sub_100044014(&qword_1003ED638);
  v31[182] = 4;
  sub_1000996D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  MEMORY[8](v26, v14);
  *(void *)&v11[v16[8]] = v29;
  sub_1000995BC((uint64_t)v11, v23, type metadata accessor for FriendshipOfferContent);
  sub_1000233E4((uint64_t)v27);
  return sub_100099624((uint64_t)v11, type metadata accessor for FriendshipOfferContent);
}

unint64_t sub_100093F58()
{
  unint64_t result = 0x6F43726576726573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F43746E65696C63;
      break;
    case 2:
      unint64_t result = 0x73657269707865;
      break;
    case 3:
      unint64_t result = 0x644970756F7267;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100094010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009A254(a1, a2);
  *a3 = result;
  return result;
}

void sub_100094038(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100094044(uint64_t a1)
{
  unint64_t v2 = sub_100099684();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100094080(uint64_t a1)
{
  unint64_t v2 = sub_100099684();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000940BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100093AB8(a1, a2);
}

uint64_t sub_1000940D4(void *a1)
{
  return sub_10009380C(a1);
}

uint64_t sub_1000940EC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED620);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_100099568();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v14, &qword_1003ED068);
  sub_100013B50((uint64_t)v14, (uint64_t)v13, &qword_1003ED068);
  char v15 = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FriendshipRequestContent(0);
    LOBYTE(v13[0]) = 1;
    type metadata accessor for ClientContext();
    sub_1000962EC(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13[0] = *(void *)(v3 + *(int *)(v9 + 32));
    char v15 = 4;
    uint64_t v10 = sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED238);
    uint64_t v12 = v10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13[0] = *(void *)(v3 + *(int *)(v9 + 36));
    char v15 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100094400@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ED608);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FriendshipRequestContent(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v25 = a1;
  sub_100042524(a1, v12);
  sub_100099568();
  uint64_t v24 = v8;
  uint64_t v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v25);
  }
  uint64_t v14 = v22;
  uint64_t v26 = (int *)v9;
  char v31 = 0;
  sub_100036EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)&v29, (uint64_t)v28, &qword_1003ED068);
  sub_100013B50((uint64_t)v28, (uint64_t)v11, &qword_1003ED068);
  LOBYTE(v27) = 1;
  sub_1000962EC(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v15 = v26;
  sub_10004E45C((uint64_t)v5, (uint64_t)&v11[v26[5]]);
  LOBYTE(v27) = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v11[v15[6]] = v16;
  LOBYTE(v27) = 3;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v11[v15[7]];
  *uint64_t v18 = v17;
  v18[1] = v19;
  sub_100044014(&qword_1003ED230);
  char v30 = 4;
  sub_100032194((unint64_t *)&qword_1003ED618);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v11[v15[8]] = v27;
  char v30 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v24, v23);
  *(void *)&v11[v15[9]] = v27;
  sub_1000995BC((uint64_t)v11, v21, type metadata accessor for FriendshipRequestContent);
  sub_1000233E4((uint64_t)v25);
  return sub_100099624((uint64_t)v11, type metadata accessor for FriendshipRequestContent);
}

uint64_t sub_100094970()
{
  uint64_t result = 0x6F43726576726573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F43746E65696C63;
      break;
    case 2:
      uint64_t result = 0x73657269707865;
      break;
    case 3:
      uint64_t result = 0x644970756F7267;
      break;
    case 4:
      uint64_t result = 0x736C69616D65;
      break;
    case 5:
      uint64_t result = 7562345;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100094A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009A4B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100094A5C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100094A68(uint64_t a1)
{
  unint64_t v2 = sub_100099568();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100094AA4(uint64_t a1)
{
  unint64_t v2 = sub_100099568();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100094AE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100094400(a1, a2);
}

uint64_t sub_100094AF8(void *a1)
{
  return sub_1000940EC(a1);
}

uint64_t sub_100094B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[40] = a2;
  v3[41] = a3;
  v3[39] = a1;
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v3[42] = v4;
  v3[43] = *(void *)(v4 - 8);
  v3[44] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FriendshipRequest();
  v3[45] = v5;
  v3[46] = *(void *)(v5 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FriendshipRequestType();
  v3[49] = v6;
  v3[50] = *(void *)(v6 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Account();
  v3[54] = v7;
  v3[55] = *(void *)(v7 - 8);
  v3[56] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  return _swift_task_switch(sub_100094DDC, 0, 0);
}

uint64_t sub_100094DDC()
{
  uint64_t v2 = v0[59];
  uint64_t v1 = v0[60];
  uint64_t v4 = v0[57];
  uint64_t v3 = v0[58];
  uint64_t v6 = v0[55];
  uint64_t v5 = v0[56];
  uint64_t v7 = v0[54];
  uint64_t v8 = v0[39];
  v0[64] = sub_10004D088();
  swift_bridgeObjectRetain();
  FriendshipRequest.callerHandle.getter();
  FriendshipRequest.origin.getter();
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 0, 1, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  sub_100013210(v3, v4, &qword_1003ED110);
  sub_100013210(v1, v2, &qword_1003F3B30);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[65] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100094F54;
  uint64_t v11 = v0[63];
  uint64_t v12 = v0[59];
  uint64_t v13 = v0[56];
  uint64_t v14 = v0[57];
  return sub_1000AD580(v11, v13, v14, v12);
}

uint64_t sub_100094F54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 480);
  uint64_t v2 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  sub_10000A520(v2, &qword_1003ED110);
  sub_10000A520(v1, &qword_1003F3B30);
  return _swift_task_switch(sub_100095098, 0, 0);
}

uint64_t sub_100095098()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[46];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for FriendshipRequestType.offer(_:), v2);
  char v5 = static FriendshipRequestType.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v3 += 8;
  v0[66] = (uint64_t)v6;
  v0[67] = v3 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v8 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8);
  uint64_t v9 = v0[63];
  uint64_t v10 = v0[49];
  uint64_t v11 = v0[45];
  uint64_t v13 = v0[40];
  uint64_t v12 = v0[41];
  if (v5)
  {
    uint64_t v14 = v0[52];
    uint64_t v15 = v0[48];
    sub_1000995BC(v9, v0[62], (uint64_t (*)(void))type metadata accessor for ClientContext);
    (*v7)(v15, v13, v11);
    (*v8)(v14, v12, v10);
    v0[29] = type metadata accessor for FriendshipOfferContent(0);
    v0[30] = sub_1000962EC(&qword_1003ED4A8, (void (*)(uint64_t))type metadata accessor for FriendshipOfferContent);
    v0[31] = sub_1000962EC(&qword_1003ED4B0, (void (*)(uint64_t))type metadata accessor for FriendshipOfferContent);
    uint64_t v16 = sub_10003E0F4(v0 + 26);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[68] = (uint64_t)v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100095424;
    uint64_t v18 = v0[62];
    uint64_t v19 = v0[52];
    uint64_t v20 = v0[48];
    return sub_1000903D8((uint64_t)v16, v18, v20, v19);
  }
  else
  {
    uint64_t v22 = v0[51];
    uint64_t v23 = v0[47];
    sub_1000995BC(v9, v0[61], (uint64_t (*)(void))type metadata accessor for ClientContext);
    (*v7)(v23, v13, v11);
    (*v8)(v22, v12, v10);
    v0[11] = type metadata accessor for FriendshipRequestContent(0);
    v0[12] = sub_1000962EC(&qword_1003ED488, (void (*)(uint64_t))type metadata accessor for FriendshipRequestContent);
    v0[13] = sub_1000962EC(&qword_1003ED490, (void (*)(uint64_t))type metadata accessor for FriendshipRequestContent);
    uint64_t v24 = sub_10003E0F4(v0 + 8);
    uint64_t v25 = (void *)swift_task_alloc();
    v0[70] = (uint64_t)v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1000959C8;
    uint64_t v26 = v0[61];
    uint64_t v27 = v0[51];
    uint64_t v28 = v0[47];
    return sub_10009142C((uint64_t)v24, v26, v28, v27);
  }
}

uint64_t sub_100095424()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100095F6C;
  }
  else
  {
    uint64_t v2 = sub_100095540;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100095540()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v25 = (void *)(v0 + 160);
  sub_100096388((long long *)(v0 + 208), (_OWORD *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 552);
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_beginAccess();
    sub_1000963A0(v1, v0 + 112);
    sub_100044014(&qword_1003ED498);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 304) = sub_100037004(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = *(void **)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 336);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v10 = sub_1000CA550;
  v10[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v10, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v11);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  swift_beginAccess();
  sub_1000963A0(v1, (uint64_t)v25);
  sub_100042524(v25, *(void *)(v0 + 184));
  uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v14 = v13;
  swift_release();
  if (v2)
  {
    swift_errorRelease();
    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 328), *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v21, v17);
  sub_100099624(v15, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_1000233E4((uint64_t)v25);
  sub_1000287E4(v12, v14);
  sub_1000440E8(0, 0xF000000000000000);
  sub_1000233E4(v0 + 16);
  swift_bridgeObjectRetain();
  sub_1000287E4(v12, v14);
  sub_1000440E8(v12, v14);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v12, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v0 + 8);
  uint64_t v23 = *(void *)(v0 + 512);
  return v22(v23, v12, v14);
}

uint64_t sub_1000959C8()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10009611C;
  }
  else
  {
    uint64_t v2 = sub_100095AE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100095AE4()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v25 = (void *)(v0 + 160);
  sub_100096388((long long *)(v0 + 64), (_OWORD *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 568);
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_beginAccess();
    sub_1000963A0(v1, v0 + 112);
    sub_100044014(&qword_1003ED498);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 304) = sub_100037004(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = *(void **)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 336);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v10 = sub_1000CA550;
  v10[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v10, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v11);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  swift_beginAccess();
  sub_1000963A0(v1, (uint64_t)v25);
  sub_100042524(v25, *(void *)(v0 + 184));
  uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v14 = v13;
  swift_release();
  if (v2)
  {
    swift_errorRelease();
    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v18 = *(void *)(v0 + 368);
  uint64_t v19 = *(void *)(v0 + 360);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 328), *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v21, v17);
  sub_100099624(v15, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_1000233E4((uint64_t)v25);
  sub_1000287E4(v12, v14);
  sub_1000440E8(0, 0xF000000000000000);
  sub_1000233E4(v0 + 16);
  swift_bridgeObjectRetain();
  sub_1000287E4(v12, v14);
  sub_1000440E8(v12, v14);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v12, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v0 + 8);
  uint64_t v23 = *(void *)(v0 + 512);
  return v22(v23, v12, v14);
}

uint64_t sub_100095F6C()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 328), *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  sub_100099624(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_100096334(v0 + 208);
  swift_bridgeObjectRelease();
  sub_1000440E8(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10009611C()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v7 = *(void *)(v0 + 312);
  (*(void (**)(void, void))(v0 + 528))(*(void *)(v0 + 328), *(void *)(v0 + 392));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v2);
  sub_100099624(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_100096334(v0 + 64);
  swift_bridgeObjectRelease();
  sub_1000440E8(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t type metadata accessor for FriendshipRequestContent(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003ED5B0);
}

uint64_t sub_1000962EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100096334(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

_OWORD *sub_100096388(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1000963A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for FriendshipOfferContent(uint64_t a1)
{
  return sub_1000306A4(a1, qword_1003ED510);
}

void *sub_100096424(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = a3[5];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    uint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v80 = v17 + v25;
    uint64_t v82 = &v16[v25];
    uint64_t v86 = a3;
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78(v82, v80, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v85 = v33[1];
    *(void *)uint64_t v32 = *v33;
    *((void *)v32 + 1) = v85;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v84 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v84;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    uint64_t v39 = (void *)(v17 + v37);
    uint64_t v83 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v83;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v81 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v81;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v79 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v79;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v77 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v77;
    uint64_t v49 = v24[22];
    unint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v76 = v51[1];
    *(void *)unint64_t v50 = *v51;
    *((void *)v50 + 1) = v76;
    uint64_t v52 = v24[23];
    uint64_t v53 = &v16[v52];
    char v54 = (void *)(v17 + v52);
    uint64_t v55 = v54[1];
    *(void *)uint64_t v53 = *v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = v24[24];
    uint64_t v57 = &v16[v56];
    uint64_t v58 = v17 + v56;
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = *(unsigned char *)(v58 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v59 = v24[27];
    uint64_t v60 = &v16[v59];
    BOOL v61 = (void *)(v17 + v59);
    uint64_t v62 = v61[1];
    *(void *)uint64_t v60 = *v61;
    *((void *)v60 + 1) = v62;
    uint64_t v63 = v24[28];
    uint64_t v64 = &v16[v63];
    uint64_t v65 = (void *)(v17 + v63);
    uint64_t v66 = v65[1];
    *(void *)uint64_t v64 = *v65;
    *((void *)v64 + 1) = v66;
    uint64_t v67 = v24[29];
    uint64_t v68 = &v16[v67];
    uint64_t v69 = (void *)(v17 + v67);
    uint64_t v70 = v69[1];
    *(void *)uint64_t v68 = *v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = v86[7];
    *(void *)((char *)v4 + v86[6]) = *(uint64_t *)((char *)a2 + v86[6]);
    uint64_t v72 = (void *)((char *)v4 + v71);
    uint64_t v73 = (uint64_t *)((char *)a2 + v71);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    *(void *)((char *)v4 + v86[8]) = *(uint64_t *)((char *)a2 + v86[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100096854(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100096A28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v84 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v78 = v15 + v23;
  uint64_t v80 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v80, v78, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v83 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v83;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v82 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v82;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v81 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v81;
  uint64_t v38 = v22[19];
  uint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v79 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v79;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v77 = v43[1];
  void *v42 = *v43;
  v42[1] = v77;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v75 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v75;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v74 = v49[1];
  void *v48 = *v49;
  v48[1] = v74;
  uint64_t v50 = v22[23];
  uint64_t v51 = (void *)(v14 + v50);
  uint64_t v52 = (void *)(v15 + v50);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = v22[24];
  uint64_t v55 = v14 + v54;
  uint64_t v56 = v15 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v57 = v22[27];
  uint64_t v58 = (void *)(v14 + v57);
  uint64_t v59 = (void *)(v15 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v22[28];
  uint64_t v62 = (void *)(v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  uint64_t v64 = v63[1];
  void *v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = v22[29];
  uint64_t v66 = (void *)(v14 + v65);
  uint64_t v67 = (void *)(v15 + v65);
  uint64_t v68 = v67[1];
  void *v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = v84[7];
  *(void *)(a1 + v84[6]) = *(void *)(a2 + v84[6]);
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  uint64_t v72 = v71[1];
  void *v70 = *v71;
  v70[1] = v72;
  *(void *)(a1 + v84[8]) = *(void *)(a2 + v84[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100096E04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = a3[5];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v69 = a3[7];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  void *v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10009744C(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = a3[5];
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  uint64_t v23 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_10009764C(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = a3[5];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000979F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097A0C);
}

uint64_t sub_100097A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097A24);
}

uint64_t sub_100097A28()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100097AE4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = a3[5];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    uint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v81 = v17 + v25;
    uint64_t v83 = &v16[v25];
    uint64_t v87 = a3;
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v79(v83, v81, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v86 = v33[1];
    *(void *)uint64_t v32 = *v33;
    *((void *)v32 + 1) = v86;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v85 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v85;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    uint64_t v39 = (void *)(v17 + v37);
    uint64_t v84 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v84;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v82 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v82;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v80 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v80;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v78 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v78;
    uint64_t v49 = v24[22];
    uint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v77 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v77;
    uint64_t v52 = v24[23];
    uint64_t v53 = &v16[v52];
    uint64_t v54 = (void *)(v17 + v52);
    uint64_t v76 = v54[1];
    *(void *)uint64_t v53 = *v54;
    *((void *)v53 + 1) = v76;
    uint64_t v55 = v24[24];
    uint64_t v56 = &v16[v55];
    uint64_t v57 = v17 + v55;
    *(void *)uint64_t v56 = *(void *)v57;
    v56[8] = *(unsigned char *)(v57 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v58 = v24[27];
    uint64_t v59 = &v16[v58];
    uint64_t v60 = (void *)(v17 + v58);
    uint64_t v61 = v60[1];
    *(void *)uint64_t v59 = *v60;
    *((void *)v59 + 1) = v61;
    uint64_t v62 = v24[28];
    uint64_t v63 = &v16[v62];
    uint64_t v64 = (void *)(v17 + v62);
    uint64_t v65 = v64[1];
    *(void *)uint64_t v63 = *v64;
    *((void *)v63 + 1) = v65;
    uint64_t v66 = v24[29];
    uint64_t v67 = &v16[v66];
    uint64_t v68 = (void *)(v17 + v66);
    uint64_t v69 = v68[1];
    *(void *)uint64_t v67 = *v68;
    *((void *)v67 + 1) = v69;
    uint64_t v70 = v87[7];
    *(void *)((char *)v4 + v87[6]) = *(uint64_t *)((char *)a2 + v87[6]);
    uint64_t v71 = (void *)((char *)v4 + v70);
    uint64_t v72 = (uint64_t *)((char *)a2 + v70);
    uint64_t v73 = v72[1];
    void *v71 = *v72;
    v71[1] = v73;
    uint64_t v74 = v87[9];
    *(void *)((char *)v4 + v87[8]) = *(uint64_t *)((char *)a2 + v87[8]);
    *(void *)((char *)v4 + v74) = *(uint64_t *)((char *)a2 + v74);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100097F24(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100098104(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v85 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v79 = v15 + v23;
  uint64_t v81 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77(v81, v79, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v84 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v84;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v83 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v83;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v82 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v82;
  uint64_t v38 = v22[19];
  uint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v80 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v80;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v78 = v43[1];
  void *v42 = *v43;
  v42[1] = v78;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v76 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v76;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v75 = v49[1];
  void *v48 = *v49;
  v48[1] = v75;
  uint64_t v50 = v22[23];
  uint64_t v51 = (void *)(v14 + v50);
  uint64_t v52 = (void *)(v15 + v50);
  uint64_t v74 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v74;
  uint64_t v53 = v22[24];
  uint64_t v54 = v14 + v53;
  uint64_t v55 = v15 + v53;
  *(void *)uint64_t v54 = *(void *)v55;
  *(unsigned char *)(v54 + 8) = *(unsigned char *)(v55 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v56 = v22[27];
  uint64_t v57 = (void *)(v14 + v56);
  uint64_t v58 = (void *)(v15 + v56);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  uint64_t v60 = v22[28];
  uint64_t v61 = (void *)(v14 + v60);
  uint64_t v62 = (void *)(v15 + v60);
  uint64_t v63 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v63;
  uint64_t v64 = v22[29];
  uint64_t v65 = (void *)(v14 + v64);
  uint64_t v66 = (void *)(v15 + v64);
  uint64_t v67 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v67;
  uint64_t v68 = v85[7];
  *(void *)(a1 + v85[6]) = *(void *)(a2 + v85[6]);
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (void *)(a2 + v68);
  uint64_t v71 = v70[1];
  *uint64_t v69 = *v70;
  v69[1] = v71;
  uint64_t v72 = v85[9];
  *(void *)(a1 + v85[8]) = *(void *)(a2 + v85[8]);
  *(void *)(a1 + v72) = *(void *)(a2 + v72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000984F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = a3[5];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v69 = a3[7];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  void *v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100098B54(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = a3[5];
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  uint64_t v23 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  uint64_t v24 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  return a1;
}

uint64_t sub_100098D5C(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = a3[5];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009911C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099130);
}

uint64_t sub_100099134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000991FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099210);
}

uint64_t sub_100099214(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000992D8()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServerRequest()
{
  return &type metadata for FriendshipServerRequest;
}

unint64_t sub_1000993B4()
{
  unint64_t result = qword_1003ED5F8;
  if (!qword_1003ED5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED5F8);
  }
  return result;
}

uint64_t sub_100099408(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000962EC(&qword_1003ED488, (void (*)(uint64_t))type metadata accessor for FriendshipRequestContent);
  uint64_t result = sub_1000962EC(&qword_1003ED490, (void (*)(uint64_t))type metadata accessor for FriendshipRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10009948C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000962EC(&qword_1003ED4A8, (void (*)(uint64_t))type metadata accessor for FriendshipOfferContent);
  uint64_t result = sub_1000962EC(&qword_1003ED4B0, (void (*)(uint64_t))type metadata accessor for FriendshipOfferContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100099514()
{
  unint64_t result = qword_1003ED600;
  if (!qword_1003ED600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED600);
  }
  return result;
}

unint64_t sub_100099568()
{
  unint64_t result = qword_1003ED610;
  if (!qword_1003ED610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED610);
  }
  return result;
}

uint64_t sub_1000995BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100099624(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100099684()
{
  unint64_t result = qword_1003ED630;
  if (!qword_1003ED630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED630);
  }
  return result;
}

unint64_t sub_1000996D8()
{
  unint64_t result = qword_1003ED640;
  if (!qword_1003ED640)
  {
    sub_10004AE58(&qword_1003ED638);
    sub_1000962EC(&qword_1003ED648, (void (*)(uint64_t))&type metadata accessor for IDSStatus);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED640);
  }
  return result;
}

unint64_t sub_100099784()
{
  unint64_t result = qword_1003ED658;
  if (!qword_1003ED658)
  {
    sub_10004AE58(&qword_1003ED638);
    sub_1000962EC(&qword_1003ED660, (void (*)(uint64_t))&type metadata accessor for IDSStatus);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED658);
  }
  return result;
}

uint64_t sub_100099830(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003ED668);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100042524(a1, v7);
  sub_100099ABC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
    sub_1000440E8(0, 0xF000000000000000);
  }
  else
  {
    sub_100044014(&qword_1003ED418);
    char v14 = 0;
    sub_10008FBB8((unint64_t *)&qword_1003ED420);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    char v14 = 1;
    sub_10008FB64();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    unint64_t v10 = v13;
    sub_1000287E4(v12, v13);
    sub_1000440E8(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    sub_1000287E4(v9, v10);
    sub_1000440E8(v9, v10);
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1000440E8(v9, v10);
  }
  return v7;
}

unint64_t sub_100099ABC()
{
  unint64_t result = qword_1003ED670;
  if (!qword_1003ED670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED670);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FriendshipServerRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100099BDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipServerRequest.CodingKeys()
{
  return &type metadata for FriendshipServerRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FriendshipOfferContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendshipOfferContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100099D70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipOfferContent.CodingKeys()
{
  return &type metadata for FriendshipOfferContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FriendshipRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FriendshipRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100099F04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipRequestContent.CodingKeys()
{
  return &type metadata for FriendshipRequestContent.CodingKeys;
}

unint64_t sub_100099F40()
{
  unint64_t result = qword_1003ED680;
  if (!qword_1003ED680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED680);
  }
  return result;
}

unint64_t sub_100099F98()
{
  unint64_t result = qword_1003ED688;
  if (!qword_1003ED688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED688);
  }
  return result;
}

unint64_t sub_100099FF0()
{
  unint64_t result = qword_1003ED690;
  if (!qword_1003ED690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED690);
  }
  return result;
}

unint64_t sub_10009A048()
{
  unint64_t result = qword_1003ED698;
  if (!qword_1003ED698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED698);
  }
  return result;
}

unint64_t sub_10009A0A0()
{
  unint64_t result = qword_1003ED6A0;
  if (!qword_1003ED6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED6A0);
  }
  return result;
}

unint64_t sub_10009A0F8()
{
  unint64_t result = qword_1003ED6A8;
  if (!qword_1003ED6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED6A8);
  }
  return result;
}

unint64_t sub_10009A150()
{
  unint64_t result = qword_1003ED6B0;
  if (!qword_1003ED6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED6B0);
  }
  return result;
}

unint64_t sub_10009A1A8()
{
  unint64_t result = qword_1003ED6B8;
  if (!qword_1003ED6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED6B8);
  }
  return result;
}

unint64_t sub_10009A200()
{
  unint64_t result = qword_1003ED6C0;
  if (!qword_1003ED6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED6C0);
  }
  return result;
}

uint64_t sub_10009A254(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73657269707865 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100373DB0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10009A4B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73657269707865 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736C69616D65 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10009A75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[227] = a4;
  v4[226] = a3;
  v4[225] = a2;
  v4[224] = a1;
  uint64_t v5 = type metadata accessor for Handle();
  v4[228] = v5;
  v4[229] = *(void *)(v5 - 8);
  v4[230] = swift_task_alloc();
  v4[231] = swift_task_alloc();
  char v6 = (void *)swift_task_alloc();
  v4[232] = v6;
  *char v6 = v4;
  v6[1] = sub_10009A868;
  return daemon.getter();
}

uint64_t sub_10009A868(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1864) = a1;
  swift_task_dealloc();
  int v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1872) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_10009ECF0(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_10009ECF0(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *int v3 = v9;
  v3[1] = sub_10009AA44;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_10009AA44(uint64_t a1)
{
  int v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[235] = a1;
  v3[236] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10009ADEC, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[237] = v5;
    void *v5 = v4;
    v5[1] = sub_10009ABD8;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_10009ABD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1880);
  swift_task_dealloc();
  return _swift_task_switch(sub_10009ACE8, v1, 0);
}

uint64_t sub_10009ACE8()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_10009AEE0, 0, 0);
}

uint64_t sub_10009ADEC()
{
  uint64_t v1 = v0[227];
  uint64_t v2 = v0[225];
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for GroupID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  sub_10009CFF4(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10009AEE0()
{
  uint64_t v1 = v0[226];
  uint64_t v2 = v0[225];
  uint64_t v3 = v0[224];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v3, &qword_1003ED068);
  uint64_t v4 = (int *)type metadata accessor for FriendshipStopOfferContent();
  sub_10009CF8C(v2, v3 + v4[5], (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v5 = GroupID.rawValue.getter();
  uint64_t v6 = (uint64_t *)(v3 + v4[6]);
  *uint64_t v6 = v5;
  v6[1] = v7;
  int64_t v8 = *(void *)(v1 + 16);
  if (v8)
  {
    uint64_t v40 = v4;
    uint64_t v9 = v0[229];
    uint64_t v10 = v0[226];
    sub_10003CB84(0, v8, 0);
    uint64_t v12 = *(void (**)(void, uint64_t, void))(v9 + 16);
    v9 += 16;
    uint64_t v11 = v12;
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v43 = *(void *)(v9 + 56);
    uint64_t v44 = (void (**)(uint64_t, uint64_t))(v9 - 8);
    int64_t v14 = v8;
    uint64_t v15 = v13;
    uint64_t v41 = v12;
    while (1)
    {
      v11(v0[231], v15, v0[228]);
      uint64_t v16 = Handle.serverID.getter();
      uint64_t v18 = v17;
      uint64_t v19 = v0[231];
      uint64_t v20 = v0[228];
      if (!v18) {
        break;
      }
      uint64_t v42 = *v44;
      (*v44)(v19, v20);
      uint64_t v21 = _swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003CB84(0, _swiftEmptyArrayStorage[2] + 1, 1);
        uint64_t v21 = _swiftEmptyArrayStorage;
      }
      unint64_t v23 = _swiftEmptyArrayStorage[2];
      unint64_t v22 = _swiftEmptyArrayStorage[3];
      if (v23 >= v22 >> 1)
      {
        sub_10003CB84(v22 > 1, v23 + 1, 1);
        uint64_t v21 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v23 + 1;
      uint64_t v24 = &_swiftEmptyArrayStorage[2 * v23];
      v24[4] = v16;
      v24[5] = v18;
      v15 += v43;
      --v14;
      uint64_t v11 = v41;
      if (!v14) {
        goto LABEL_12;
      }
    }
    uint64_t v42 = *v44;
    (*v44)(v19, v20);
    swift_release();
    uint64_t v21 = 0;
LABEL_12:
    *(void *)(v0[224] + v40[7]) = v21;
    sub_10003CB84(0, v8, 0);
    do
    {
      uint64_t v26 = v0[230];
      uint64_t v27 = v0[228];
      v11(v26, v13, v27);
      uint64_t v28 = Handle.identifier.getter();
      uint64_t v30 = v29;
      v42(v26, v27);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10003CB84(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v32 = _swiftEmptyArrayStorage[2];
      unint64_t v31 = _swiftEmptyArrayStorage[3];
      if (v32 >= v31 >> 1) {
        sub_10003CB84(v31 > 1, v32 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v32 + 1;
      uint64_t v33 = &_swiftEmptyArrayStorage[2 * v32];
      v33[4] = v28;
      v33[5] = v30;
      v13 += v43;
      --v8;
    }
    while (v8);
    uint64_t v25 = v40;
  }
  else
  {
    *(void *)(v0[224] + v4[7]) = _swiftEmptyArrayStorage;
    uint64_t v25 = v4;
  }
  uint64_t v34 = v0[227];
  uint64_t v35 = v0[225];
  uint64_t v36 = v0[224];
  uint64_t v37 = type metadata accessor for GroupID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v34, v37);
  sub_10009CFF4(v35, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  *(void *)(v36 + v25[8]) = _swiftEmptyArrayStorage;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

uint64_t sub_10009B2BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v18 = a5;
  uint64_t v15 = a4;
  uint64_t v9 = sub_100044014(&qword_1003ED7C0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10009F188();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  char v19 = 0;
  sub_100044014(&qword_1003ED418);
  sub_10008FBB8(&qword_1003ED438);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v16 = a3;
    uint64_t v17 = v15;
    char v19 = 1;
    sub_10008FC1C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_10009B4B8()
{
  uint64_t v1 = 2036625250;
  if (*v0 != 1) {
    uint64_t v1 = 0x6341726573557369;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10009B518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009ED38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009B540(uint64_t a1)
{
  unint64_t v2 = sub_10009F188();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009B57C(uint64_t a1)
{
  unint64_t v2 = sub_10009F188();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009B5B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10009EE94(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_10009B5F0(void *a1)
{
  return sub_10009B2BC(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_10009B614(uint64_t a1)
{
  unint64_t v2 = sub_100072304();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10009B650(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED798);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100042524(a1, a1[3]);
  sub_10009EC9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v14, &qword_1003ED068);
  sub_100013B50((uint64_t)v14, (uint64_t)v13, &qword_1003ED068);
  char v15 = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for FriendshipStopOfferContent();
    LOBYTE(v13[0]) = 1;
    type metadata accessor for ClientContext();
    sub_10009ECF0(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13[0] = *(void *)(v3 + *(int *)(v9 + 28));
    char v15 = 3;
    uint64_t v10 = sub_100044014(&qword_1003ED230);
    sub_100032194((unint64_t *)&qword_1003ED238);
    uint64_t v12 = v10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13[0] = *(void *)(v3 + *(int *)(v9 + 32));
    char v15 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10009B938@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ED7A8);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FriendshipStopOfferContent();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v25 = a1;
  sub_100042524(a1, v12);
  sub_10009EC9C();
  uint64_t v24 = v8;
  uint64_t v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v25);
  }
  uint64_t v26 = (int *)v9;
  char v31 = 0;
  sub_100036EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v29, (uint64_t)v28, &qword_1003ED068);
  sub_100013B50((uint64_t)v28, (uint64_t)v11, &qword_1003ED068);
  LOBYTE(v27) = 1;
  sub_10009ECF0(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v26;
  sub_10004E45C((uint64_t)v5, (uint64_t)&v11[v26[5]]);
  LOBYTE(v27) = 2;
  uint64_t v20 = 0;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = (uint64_t *)&v11[v14[6]];
  *uint64_t v16 = v15;
  v16[1] = v17;
  sub_100044014(&qword_1003ED230);
  char v30 = 3;
  sub_100032194((unint64_t *)&qword_1003ED618);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)&v11[v14[7]] = v27;
  char v30 = 4;
  int v18 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v23);
  *(void *)&v11[v14[8]] = v27;
  sub_10009CF8C((uint64_t)v11, v21, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
  sub_1000233E4((uint64_t)v25);
  return sub_10009CFF4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
}

uint64_t sub_10009BE74()
{
  uint64_t result = 0x6F43726576726573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F43746E65696C63;
      break;
    case 2:
      uint64_t result = 0x644970756F7267;
      break;
    case 3:
      uint64_t result = 0x6449646E65697266;
      break;
    case 4:
      uint64_t result = 0x73656C646E6168;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10009BF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009F5F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009BF54(uint64_t a1)
{
  unint64_t v2 = sub_10009EC9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009BF90(uint64_t a1)
{
  unint64_t v2 = sub_10009EC9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009BFCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009B938(a1, a2);
}

uint64_t sub_10009BFE4(void *a1)
{
  return sub_10009B650(a1);
}

uint64_t sub_10009BFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ClientOrigin();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RequestOrigin();
  v3[12] = v6;
  v3[13] = *(void *)(v6 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GroupID();
  v3[15] = v7;
  v3[16] = *(void *)(v7 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = type metadata accessor for FriendshipStopOfferContent();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Account();
  v3[22] = v8;
  v3[23] = *(void *)(v8 - 8);
  v3[24] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_10009C338, 0, 0);
}

uint64_t sub_10009C338()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[26];
  uint64_t v15 = v0[25];
  uint64_t v16 = v0[27];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[22];
  uint64_t v7 = v0[12];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[3];
  v0[31] = sub_10004D088();
  swift_bridgeObjectRetain();
  FriendshipRequest.callerHandle.getter();
  FriendshipRequest.origin.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v8, v5);
  sub_100013210(v2, v15, &qword_1003ED110);
  sub_100013210(v1, v16, &qword_1003F3B30);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[32] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10009C49C;
  uint64_t v10 = v0[30];
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[24];
  uint64_t v13 = v0[25];
  return sub_1000AD580(v10, v12, v13, v11);
}

uint64_t sub_10009C49C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  uint64_t v2 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  sub_10000A520(v2, &qword_1003ED110);
  sub_10000A520(v1, &qword_1003F3B30);
  return _swift_task_switch(sub_10009C5E0, 0, 0);
}

uint64_t sub_10009C5E0()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  sub_10009CF8C(v0[30], v0[29], (uint64_t (*)(void))type metadata accessor for ClientContext);
  FriendshipRequest.origin.getter();
  char v4 = FriendshipRequest.isFromGroup.getter();
  RequestOrigin.origin.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3) == enum case for ClientOrigin.messagesApp(_:))
  {
    if (v4) {
      uint64_t v5 = (unsigned int *)&enum case for GroupID.group(_:);
    }
    else {
      uint64_t v5 = (unsigned int *)&enum case for GroupID.oneToOne(_:);
    }
    (*(void (**)(void, void, void))(v0[16] + 104))(v0[17], *v5, v0[15]);
  }
  else
  {
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    uint64_t v8 = v0[9];
    (*(void (**)(void, void, void))(v0[16] + 104))(v0[17], enum case for GroupID.oneToOne(_:), v0[15]);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[33] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10009C798;
  uint64_t v10 = v0[29];
  uint64_t v11 = v0[21];
  uint64_t v12 = v0[17];
  uint64_t v13 = v0[4];
  return sub_10009A75C(v11, v10, v13, v12);
}

uint64_t sub_10009C798()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10009CD84;
  }
  else
  {
    uint64_t v2 = sub_10009C8B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10009C8B4()
{
  char v30 = v0;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100044058(v3, (uint64_t)qword_10040B4F8);
  sub_10009CF8C(v2, v1, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[20];
  if (v6)
  {
    uint64_t v8 = v0[19];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_10009CF8C(v7, v8, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
    uint64_t v10 = String.init<A>(describing:)();
    v0[2] = sub_100037004(v10, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10009CFF4(v7, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Request content: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10009CFF4(v0[20], (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
  }

  uint64_t v12 = v0[34];
  uint64_t v14 = v0[7];
  uint64_t v13 = (void *)v0[8];
  uint64_t v15 = v0[6];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v13 = sub_1000CA550;
  v13[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v13, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v15);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_10009ECF0(&qword_1003ED6D8, (void (*)(uint64_t))type metadata accessor for FriendshipStopOfferContent);
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v18 = v17;
  swift_release();
  if (v12)
  {
    swift_errorRelease();
    uint64_t v16 = 0;
    unint64_t v18 = 0xF000000000000000;
  }
  uint64_t v19 = v0[30];
  uint64_t v20 = v0[23];
  uint64_t v22 = v0[21];
  uint64_t v21 = v0[22];
  uint64_t v23 = v0[5];
  uint64_t v24 = v0[3];
  uint64_t v25 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v23, v25);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v21);
  sub_10009CFF4(v22, (uint64_t (*)(void))type metadata accessor for FriendshipStopOfferContent);
  sub_10009CFF4(v19, (uint64_t (*)(void))type metadata accessor for ClientContext);
  sub_1000287E4(v16, v18);
  sub_1000440E8(0, 0xF000000000000000);
  swift_bridgeObjectRetain();
  sub_1000287E4(v16, v18);
  sub_1000440E8(v16, v18);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t))v0[1];
  uint64_t v27 = v0[31];
  return v26(v27, v16, v18, 1);
}

uint64_t sub_10009CD84()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  uint64_t v6 = type metadata accessor for FriendshipRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v3);
  sub_10009CFF4(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  sub_1000440E8(0, 0xF000000000000000);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t type metadata accessor for FriendshipStopOfferContent()
{
  uint64_t result = qword_1003ED738;
  if (!qword_1003ED738) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009CF8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009CFF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10009D054(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = a3[5];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    uint64_t v87 = a3;
    *(void *)uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    uint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v81 = v17 + v25;
    uint64_t v83 = &v16[v25];
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v79(v83, v81, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    unint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v86 = v33[1];
    *(void *)unint64_t v32 = *v33;
    *((void *)v32 + 1) = v86;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v85 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v85;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    uint64_t v39 = (void *)(v17 + v37);
    uint64_t v84 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v84;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v82 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v82;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v80 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v80;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v78 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v78;
    uint64_t v49 = v24[22];
    uint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v77 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v77;
    uint64_t v52 = v24[23];
    uint64_t v53 = &v16[v52];
    uint64_t v54 = (void *)(v17 + v52);
    uint64_t v55 = v54[1];
    *(void *)uint64_t v53 = *v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = v24[24];
    uint64_t v57 = &v16[v56];
    uint64_t v58 = v17 + v56;
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = *(unsigned char *)(v58 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v59 = v24[27];
    uint64_t v60 = &v16[v59];
    uint64_t v61 = (void *)(v17 + v59);
    uint64_t v62 = v61[1];
    *(void *)uint64_t v60 = *v61;
    *((void *)v60 + 1) = v62;
    uint64_t v63 = v24[28];
    uint64_t v64 = &v16[v63];
    uint64_t v65 = (void *)(v17 + v63);
    uint64_t v66 = v65[1];
    *(void *)uint64_t v64 = *v65;
    *((void *)v64 + 1) = v66;
    uint64_t v67 = v24[29];
    uint64_t v68 = &v16[v67];
    uint64_t v69 = (void *)(v17 + v67);
    uint64_t v70 = v69[1];
    *(void *)uint64_t v68 = *v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = v87[6];
    uint64_t v72 = v87[7];
    uint64_t v73 = (void *)((char *)v4 + v71);
    uint64_t v74 = (uint64_t *)((char *)a2 + v71);
    uint64_t v75 = v74[1];
    *uint64_t v73 = *v74;
    v73[1] = v75;
    *(void *)((char *)v4 + v72) = *(uint64_t *)((char *)a2 + v72);
    *(void *)((char *)v4 + v87[8]) = *(uint64_t *)((char *)a2 + v87[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10009D488(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10009D668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v85 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v79 = v15 + v23;
  uint64_t v81 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77(v81, v79, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v84 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v84;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v83 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v83;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v82 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v82;
  uint64_t v38 = v22[19];
  uint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v80 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v80;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v78 = v43[1];
  void *v42 = *v43;
  v42[1] = v78;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v76 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v76;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v75 = v49[1];
  void *v48 = *v49;
  v48[1] = v75;
  uint64_t v50 = v22[23];
  uint64_t v51 = (void *)(v14 + v50);
  uint64_t v52 = (void *)(v15 + v50);
  uint64_t v74 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v74;
  uint64_t v53 = v22[24];
  uint64_t v54 = v14 + v53;
  uint64_t v55 = v15 + v53;
  *(void *)uint64_t v54 = *(void *)v55;
  *(unsigned char *)(v54 + 8) = *(unsigned char *)(v55 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v56 = v22[27];
  uint64_t v57 = (void *)(v14 + v56);
  uint64_t v58 = (void *)(v15 + v56);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  uint64_t v60 = v22[28];
  uint64_t v61 = (void *)(v14 + v60);
  uint64_t v62 = (void *)(v15 + v60);
  uint64_t v63 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v63;
  uint64_t v64 = v22[29];
  uint64_t v65 = (void *)(v14 + v64);
  uint64_t v66 = (void *)(v15 + v64);
  uint64_t v67 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v67;
  uint64_t v68 = v85[6];
  uint64_t v69 = v85[7];
  uint64_t v70 = (void *)(a1 + v68);
  uint64_t v71 = (void *)(a2 + v68);
  uint64_t v72 = v71[1];
  void *v70 = *v71;
  v70[1] = v72;
  *(void *)(a1 + v69) = *(void *)(a2 + v69);
  *(void *)(a1 + v85[8]) = *(void *)(a2 + v85[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10009DA50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = a3[5];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[6];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  void *v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10009E0A8(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = a3[5];
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  uint64_t v23 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_10009E2A8(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = a3[5];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[6];
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009E674);
}

uint64_t sub_10009E674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10009E73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009E750);
}

uint64_t sub_10009E750(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10009E814()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for FriendshipStopOfferRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100022C64(*v4, v5);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for FriendshipStopOfferRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100022C64(*v4, *(void *)(a2 + 16));
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v5;
      sub_100044090(v8, v9);
      goto LABEL_8;
    }
    sub_10008A798(a1 + 8);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_100022C64(*v4, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for FriendshipStopOfferRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FriendshipStopOfferRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a2 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v4;
      *(void *)(a1 + 16) = v6;
      sub_100044090(v7, v5);
      goto LABEL_6;
    }
    sub_10008A798(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
LABEL_6:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendshipStopOfferRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FriendshipStopOfferRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferRequest()
{
  return &type metadata for FriendshipStopOfferRequest;
}

unint64_t sub_10009EB6C()
{
  unint64_t result = qword_1003ED780;
  if (!qword_1003ED780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED780);
  }
  return result;
}

uint64_t sub_10009EBC0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10009ECF0(&qword_1003ED788, (void (*)(uint64_t))type metadata accessor for FriendshipStopOfferContent);
  uint64_t result = sub_10009ECF0(&qword_1003ED6D8, (void (*)(uint64_t))type metadata accessor for FriendshipStopOfferContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10009EC48()
{
  unint64_t result = qword_1003ED790;
  if (!qword_1003ED790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED790);
  }
  return result;
}

unint64_t sub_10009EC9C()
{
  unint64_t result = qword_1003ED7A0;
  if (!qword_1003ED7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7A0);
  }
  return result;
}

uint64_t sub_10009ECF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009ED38(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100373D90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 2036625250 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6341726573557369 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10009EE94(void *a1)
{
  uint64_t v3 = sub_100044014(&qword_1003ED7B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100042524(a1, v7);
  sub_10009F188();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_1000233E4((uint64_t)a1);
    sub_1000440E8(0, 0xF000000000000000);
  }
  else
  {
    sub_100044014(&qword_1003ED418);
    char v13 = 0;
    sub_10008FBB8((unint64_t *)&qword_1003ED420);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v11;
    char v13 = 1;
    sub_10008FB64();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = v11;
    unint64_t v10 = v12;
    LOBYTE(v11) = 2;
    sub_1000287E4(v9, v12);
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_1000287E4(v9, v10);
    sub_1000440E8(v9, v10);
    swift_bridgeObjectRelease();
    sub_1000233E4((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_1000440E8(v9, v10);
  }
  return v7;
}

unint64_t sub_10009F188()
{
  unint64_t result = qword_1003ED7B8;
  if (!qword_1003ED7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7B8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FriendshipStopOfferRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009F2A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferRequest.CodingKeys()
{
  return &type metadata for FriendshipStopOfferRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for FriendshipStopOfferContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009F3ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendshipStopOfferContent.CodingKeys()
{
  return &type metadata for FriendshipStopOfferContent.CodingKeys;
}

unint64_t sub_10009F3E8()
{
  unint64_t result = qword_1003ED7C8;
  if (!qword_1003ED7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7C8);
  }
  return result;
}

unint64_t sub_10009F440()
{
  unint64_t result = qword_1003ED7D0;
  if (!qword_1003ED7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7D0);
  }
  return result;
}

unint64_t sub_10009F498()
{
  unint64_t result = qword_1003ED7D8;
  if (!qword_1003ED7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7D8);
  }
  return result;
}

unint64_t sub_10009F4F0()
{
  unint64_t result = qword_1003ED7E0;
  if (!qword_1003ED7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7E0);
  }
  return result;
}

unint64_t sub_10009F548()
{
  unint64_t result = qword_1003ED7E8;
  if (!qword_1003ED7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7E8);
  }
  return result;
}

unint64_t sub_10009F5A0()
{
  unint64_t result = qword_1003ED7F0;
  if (!qword_1003ED7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED7F0);
  }
  return result;
}

uint64_t sub_10009F5F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449646E65697266 && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73656C646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10009F860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FriendshipResponseToInviteType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URLComponents();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004C1DC(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  BOOL v15 = v14 == enum case for FriendshipResponseToInviteType.accept(_:)
     || v14 == enum case for FriendshipResponseToInviteType.decline(_:);
  uint64_t v23 = v10;
  uint64_t v24 = a3;
  if (v15)
  {
    uint64_t v16 = a2;
    uint64_t v17 = (void *)0xEF65736E6F707365;
    uint64_t v18 = 0x52657469766E692FLL;
LABEL_9:
    uint64_t v19 = (void (*)(unsigned char *, void))URLComponents.path.modify();
    v20._countAndFlagsBits = v18;
    v20._object = v17;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v19(v25, 0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
    uint64_t v21 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24, v13, v23);
  }
  if (v14 == enum case for FriendshipResponseToInviteType.notNow(_:))
  {
    uint64_t v16 = a2;
    uint64_t v17 = (void *)0xE700000000000000;
    uint64_t v18 = 0x776F4E746F6E2FLL;
    goto LABEL_9;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009FB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009FB74);
}

uint64_t sub_10009FB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10009FBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009FBF4);
}

uint64_t sub_10009FBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RespondToInviteEndpoint()
{
  uint64_t result = qword_1003ED850;
  if (!qword_1003ED850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009FCB0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003ED948);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_1000A318C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for RespondToInviteRequestContent();
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_100047084(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10009FF10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for ClientContext();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100044014(&qword_1003ED958);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RespondToInviteRequestContent();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v30 = a1;
  sub_100042524(a1, v12);
  sub_1000A318C();
  uint64_t v29 = v8;
  uint64_t v13 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_1000233E4((uint64_t)v30);
  }
  uint64_t v14 = (uint64_t)v5;
  v34[183] = 0;
  sub_100036EB0();
  uint64_t v15 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v34, (uint64_t)v33, &qword_1003ED068);
  sub_100013B50((uint64_t)v33, (uint64_t)v11, &qword_1003ED068);
  char v32 = 1;
  sub_100047084(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v9;
  sub_10004E45C(v14, (uint64_t)&v11[*(int *)(v9 + 20)]);
  char v32 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v11[*(int *)(v9 + 24)];
  *uint64_t v18 = v17;
  v18[1] = v19;
  char v32 = 3;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v15);
  uint64_t v23 = (uint64_t *)&v11[*(int *)(v16 + 28)];
  *uint64_t v23 = v20;
  v23[1] = v22;
  sub_1000A176C((uint64_t)v11, v26, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
  sub_1000233E4((uint64_t)v30);
  return sub_1000A17D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
}

uint64_t sub_1000A0384(uint64_t a1)
{
  unint64_t v2 = sub_1000728C8();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_1000A03C0()
{
  uint64_t result = 0x6F43726576726573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F43746E65696C63;
      break;
    case 2:
      uint64_t result = 25705;
      break;
    case 3:
      uint64_t result = 0x6465747065636361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A044C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A347C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A0474(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000A0480(uint64_t a1)
{
  unint64_t v2 = sub_1000A318C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A04BC(uint64_t a1)
{
  unint64_t v2 = sub_1000A318C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A04F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009FF10(a1, a2);
}

uint64_t sub_1000A0510(void *a1)
{
  return sub_10009FCB0(a1);
}

uint64_t sub_1000A0528(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 1832) = a6;
  *(void *)(v6 + 1824) = a5;
  *(unsigned char *)(v6 + 2040) = a4;
  *(void *)(v6 + 1816) = a3;
  *(void *)(v6 + 1808) = a2;
  *(void *)(v6 + 1800) = a1;
  uint64_t v7 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v6 + 1840) = v7;
  *(void *)(v6 + 1848) = *(void *)(v7 - 8);
  *(void *)(v6 + 1856) = swift_task_alloc();
  *(void *)(v6 + 1864) = type metadata accessor for RespondToInviteRequestContent();
  *(void *)(v6 + 1872) = swift_task_alloc();
  *(void *)(v6 + 1880) = swift_task_alloc();
  *(void *)(v6 + 1888) = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  *(void *)(v6 + 1896) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Account();
  *(void *)(v6 + 1904) = v8;
  *(void *)(v6 + 1912) = *(void *)(v8 - 8);
  *(void *)(v6 + 1920) = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  *(void *)(v6 + 1928) = swift_task_alloc();
  *(void *)(v6 + 1936) = swift_task_alloc();
  type metadata accessor for ClientContext();
  *(void *)(v6 + 1944) = swift_task_alloc();
  *(void *)(v6 + 1952) = swift_task_alloc();
  return _swift_task_switch(sub_1000A0750, 0, 0);
}

uint64_t sub_1000A0750()
{
  uint64_t v1 = v0[242];
  uint64_t v2 = v0[240];
  uint64_t v3 = v0[239];
  uint64_t v4 = v0[238];
  uint64_t v17 = v0[241];
  uint64_t v18 = v0[237];
  uint64_t v5 = v0[229];
  uint64_t v16 = v0[228];
  uint64_t v6 = v0[225];
  v0[245] = sub_10004D088();
  uint64_t v7 = type metadata accessor for RequestOrigin();
  v0[246] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v0[247] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v1, v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v1, 0, 1, v7);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  v9(v2, v6, v4);
  sub_100013210(v1, v17, &qword_1003ED110);
  sub_100013210(v16, v18, &qword_1003F3B30);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[248] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000A091C;
  uint64_t v11 = v0[244];
  uint64_t v12 = v0[241];
  uint64_t v13 = v0[240];
  uint64_t v14 = v0[237];
  return sub_1000AD580(v11, v13, v12, v14);
}

uint64_t sub_1000A091C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1952);
  uint64_t v3 = *(void *)(*v0 + 1944);
  uint64_t v4 = *(void *)(*v0 + 1936);
  uint64_t v7 = *v0;
  swift_task_dealloc();
  sub_10000A520(v4, &qword_1003ED110);
  sub_1000A176C(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 1992) = v5;
  void *v5 = v7;
  v5[1] = sub_1000A0ABC;
  return daemon.getter();
}

uint64_t sub_1000A0ABC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 2000) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 2008) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_100047084(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_100047084(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000A0C98;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000A0C98(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[252] = a1;
  v3[253] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000A1040, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[254] = v5;
    void *v5 = v4;
    v5[1] = sub_1000A0E2C;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000A0E2C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2016);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A0F3C, v1, 0);
}

uint64_t sub_1000A0F3C()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000A11F8, 0, 0);
}

uint64_t sub_1000A1040()
{
  uint64_t v1 = v0[247];
  uint64_t v2 = v0[244];
  uint64_t v3 = v0[243];
  uint64_t v4 = v0[239];
  uint64_t v10 = v0[246];
  uint64_t v11 = v0[238];
  uint64_t v5 = v0[229];
  uint64_t v6 = v0[228];
  uint64_t v7 = v0[225];
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000A17D4(v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v5, v10);
  sub_10000A520(v6, &qword_1003F3B30);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v11);
  sub_1000A17D4(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000A11F8()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 1944);
  uint64_t v2 = *(void *)(v0 + 1888);
  uint64_t v3 = *(int **)(v0 + 1864);
  int v4 = *(unsigned __int8 *)(v0 + 2040);
  uint64_t v5 = *(void *)(v0 + 1816);
  uint64_t v6 = *(void *)(v0 + 1808);
  swift_release();
  sub_100013B50(v0 + 1312, v2, &qword_1003ED068);
  sub_1000A176C(v1, v2 + v3[5], (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v7 = (void *)(v2 + v3[6]);
  *uint64_t v7 = v6;
  v7[1] = v5;
  BOOL v8 = v4 == 0;
  if (v4) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (v8) {
    unint64_t v10 = 0xE500000000000000;
  }
  else {
    unint64_t v10 = 0xE400000000000000;
  }
  sub_1000A17D4(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v11 = (uint64_t *)(v2 + v3[7]);
  *uint64_t v11 = v9;
  v11[1] = v10;
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v12 = *(void *)(v0 + 1888);
  uint64_t v13 = *(void *)(v0 + 1880);
  uint64_t v14 = type metadata accessor for Logger();
  sub_100044058(v14, (uint64_t)qword_10040B4F8);
  sub_1000A176C(v12, v13, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 1880);
  if (v17)
  {
    uint64_t v19 = *(void *)(v0 + 1872);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_1000A176C(v18, v19, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
    uint64_t v21 = String.init<A>(describing:)();
    *(void *)(v0 + 1792) = sub_100037004(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A17D4(v18, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Request content: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000A17D4(*(void *)(v0 + 1880), (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
  }

  uint64_t v23 = *(void *)(v0 + 2024);
  uint64_t v24 = *(void **)(v0 + 1856);
  uint64_t v25 = *(void *)(v0 + 1848);
  uint64_t v26 = *(void *)(v0 + 1840);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  void *v24 = sub_1000CA550;
  v24[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v24, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v26);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_100047084(&qword_1003ED890, (void (*)(uint64_t))type metadata accessor for RespondToInviteRequestContent);
  uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v29 = v28;
  swift_release();
  if (v23)
  {
    swift_errorRelease();
    uint64_t v27 = 0;
    unint64_t v29 = 0xF000000000000000;
  }
  uint64_t v30 = *(void *)(v0 + 1952);
  uint64_t v31 = *(void *)(v0 + 1912);
  uint64_t v32 = *(void *)(v0 + 1904);
  uint64_t v33 = *(void *)(v0 + 1888);
  uint64_t v34 = *(void *)(v0 + 1824);
  uint64_t v35 = *(void *)(v0 + 1800);
  (*(void (**)(void, void))(*(void *)(v0 + 1976) + 8))(*(void *)(v0 + 1832), *(void *)(v0 + 1968));
  sub_10000A520(v34, &qword_1003F3B30);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v32);
  sub_1000A17D4(v33, (uint64_t (*)(void))type metadata accessor for RespondToInviteRequestContent);
  sub_1000A17D4(v30, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v27, v29);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v27, v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v0 + 8);
  uint64_t v37 = *(void *)(v0 + 1960);
  return v36(v37, v27, v29);
}

uint64_t type metadata accessor for RespondToInviteRequestContent()
{
  uint64_t result = qword_1003ED8F0;
  if (!qword_1003ED8F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A176C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A17D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1000A1834(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[5];
    if (v7)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 40) = v7;
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      uint64_t v8 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 152) = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v10 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v10;
      long long v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v12;
      long long v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
    uint64_t v15 = *(int *)(a3 + 20);
    os_log_type_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    uint64_t v90 = a3;
    *(void *)os_log_type_t v16 = *(uint64_t *)((char *)a2 + v15);
    *((void *)v16 + 1) = v18;
    v16[16] = *((unsigned char *)a2 + v15 + 16);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 32);
    *((void *)v16 + 3) = *(uint64_t *)((char *)a2 + v15 + 24);
    *((void *)v16 + 4) = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 48);
    *((void *)v16 + 5) = *(uint64_t *)((char *)a2 + v15 + 40);
    *((void *)v16 + 6) = v20;
    v16[56] = *((unsigned char *)a2 + v15 + 56);
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 72);
    *((void *)v16 + 8) = *(uint64_t *)((char *)a2 + v15 + 64);
    *((void *)v16 + 9) = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 88);
    *((void *)v16 + 10) = *(uint64_t *)((char *)a2 + v15 + 80);
    *((void *)v16 + 11) = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 104);
    *((void *)v16 + 12) = *(uint64_t *)((char *)a2 + v15 + 96);
    *((void *)v16 + 13) = v23;
    uint64_t v24 = (int *)type metadata accessor for ClientContext();
    uint64_t v25 = v24[12];
    uint64_t v84 = v17 + v25;
    uint64_t v86 = &v16[v25];
    uint64_t v26 = type metadata accessor for SystemInfo.DeviceLockState();
    uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v86, v84, v26);
    *(void *)&v16[v24[13]] = *(void *)(v17 + v24[13]);
    uint64_t v27 = v24[14];
    unint64_t v28 = &v16[v27];
    unint64_t v29 = (void *)(v17 + v27);
    uint64_t v30 = v29[1];
    *(void *)unint64_t v28 = *v29;
    *((void *)v28 + 1) = v30;
    v16[v24[15]] = *(unsigned char *)(v17 + v24[15]);
    uint64_t v31 = v24[16];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = (void *)(v17 + v31);
    uint64_t v89 = v33[1];
    *(void *)uint64_t v32 = *v33;
    *((void *)v32 + 1) = v89;
    uint64_t v34 = v24[17];
    uint64_t v35 = &v16[v34];
    uint64_t v36 = (void *)(v17 + v34);
    uint64_t v88 = v36[1];
    *(void *)uint64_t v35 = *v36;
    *((void *)v35 + 1) = v88;
    uint64_t v37 = v24[18];
    uint64_t v38 = &v16[v37];
    uint64_t v39 = (void *)(v17 + v37);
    uint64_t v87 = v39[1];
    *(void *)uint64_t v38 = *v39;
    *((void *)v38 + 1) = v87;
    uint64_t v40 = v24[19];
    uint64_t v41 = &v16[v40];
    uint64_t v42 = (void *)(v17 + v40);
    uint64_t v85 = v42[1];
    *(void *)uint64_t v41 = *v42;
    *((void *)v41 + 1) = v85;
    uint64_t v43 = v24[20];
    uint64_t v44 = &v16[v43];
    uint64_t v45 = (void *)(v17 + v43);
    uint64_t v83 = v45[1];
    *(void *)uint64_t v44 = *v45;
    *((void *)v44 + 1) = v83;
    uint64_t v46 = v24[21];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = (void *)(v17 + v46);
    uint64_t v81 = v48[1];
    *(void *)uint64_t v47 = *v48;
    *((void *)v47 + 1) = v81;
    uint64_t v49 = v24[22];
    uint64_t v50 = &v16[v49];
    uint64_t v51 = (void *)(v17 + v49);
    uint64_t v80 = v51[1];
    *(void *)uint64_t v50 = *v51;
    *((void *)v50 + 1) = v80;
    uint64_t v52 = v24[23];
    uint64_t v53 = &v16[v52];
    uint64_t v54 = (void *)(v17 + v52);
    uint64_t v55 = v54[1];
    *(void *)uint64_t v53 = *v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = v24[24];
    uint64_t v57 = &v16[v56];
    uint64_t v58 = v17 + v56;
    *(void *)uint64_t v57 = *(void *)v58;
    v57[8] = *(unsigned char *)(v58 + 8);
    v16[v24[25]] = *(unsigned char *)(v17 + v24[25]);
    *(void *)&v16[v24[26]] = *(void *)(v17 + v24[26]);
    uint64_t v59 = v24[27];
    uint64_t v60 = &v16[v59];
    uint64_t v61 = (void *)(v17 + v59);
    uint64_t v62 = v61[1];
    *(void *)uint64_t v60 = *v61;
    *((void *)v60 + 1) = v62;
    uint64_t v63 = v24[28];
    uint64_t v64 = &v16[v63];
    uint64_t v65 = (void *)(v17 + v63);
    uint64_t v66 = v65[1];
    *(void *)uint64_t v64 = *v65;
    *((void *)v64 + 1) = v66;
    uint64_t v67 = v24[29];
    uint64_t v68 = &v16[v67];
    uint64_t v69 = (void *)(v17 + v67);
    uint64_t v70 = v69[1];
    *(void *)uint64_t v68 = *v69;
    *((void *)v68 + 1) = v70;
    uint64_t v71 = *(int *)(v90 + 24);
    uint64_t v72 = *(int *)(v90 + 28);
    uint64_t v73 = (void *)((char *)v4 + v71);
    uint64_t v74 = (uint64_t *)((char *)a2 + v71);
    uint64_t v75 = v74[1];
    *uint64_t v73 = *v74;
    v73[1] = v75;
    uint64_t v76 = (void *)((char *)v4 + v72);
    uint64_t v77 = (uint64_t *)((char *)a2 + v72);
    uint64_t v78 = v77[1];
    *uint64_t v76 = *v77;
    v76[1] = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000A1C58(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ClientContext() + 48);
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A1E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  uint64_t v88 = a3;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(a2 + v13 + 16);
  uint64_t v17 = *(void *)(a2 + v13 + 32);
  *(void *)(v14 + 24) = *(void *)(a2 + v13 + 24);
  *(void *)(v14 + 32) = v17;
  uint64_t v18 = *(void *)(a2 + v13 + 48);
  *(void *)(v14 + 40) = *(void *)(a2 + v13 + 40);
  *(void *)(v14 + 48) = v18;
  *(unsigned char *)(v14 + 56) = *(unsigned char *)(a2 + v13 + 56);
  uint64_t v19 = *(void *)(a2 + v13 + 72);
  *(void *)(v14 + 64) = *(void *)(a2 + v13 + 64);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = *(void *)(a2 + v13 + 88);
  *(void *)(v14 + 80) = *(void *)(a2 + v13 + 80);
  *(void *)(v14 + 88) = v20;
  uint64_t v21 = *(void *)(a2 + v13 + 104);
  *(void *)(v14 + 96) = *(void *)(a2 + v13 + 96);
  *(void *)(v14 + 104) = v21;
  uint64_t v22 = (int *)type metadata accessor for ClientContext();
  uint64_t v23 = v22[12];
  uint64_t v82 = v15 + v23;
  uint64_t v84 = v14 + v23;
  uint64_t v24 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80(v84, v82, v24);
  *(void *)(v14 + v22[13]) = *(void *)(v15 + v22[13]);
  uint64_t v25 = v22[14];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(unsigned char *)(v14 + v22[15]) = *(unsigned char *)(v15 + v22[15]);
  uint64_t v29 = v22[16];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v87 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v87;
  uint64_t v32 = v22[17];
  uint64_t v33 = (void *)(v14 + v32);
  uint64_t v34 = (void *)(v15 + v32);
  uint64_t v86 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v86;
  uint64_t v35 = v22[18];
  uint64_t v36 = (void *)(v14 + v35);
  uint64_t v37 = (void *)(v15 + v35);
  uint64_t v85 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v85;
  uint64_t v38 = v22[19];
  uint64_t v39 = (void *)(v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v83 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v83;
  uint64_t v41 = v22[20];
  uint64_t v42 = (void *)(v14 + v41);
  uint64_t v43 = (void *)(v15 + v41);
  uint64_t v81 = v43[1];
  void *v42 = *v43;
  v42[1] = v81;
  uint64_t v44 = v22[21];
  uint64_t v45 = (void *)(v14 + v44);
  uint64_t v46 = (void *)(v15 + v44);
  uint64_t v79 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v79;
  uint64_t v47 = v22[22];
  uint64_t v48 = (void *)(v14 + v47);
  uint64_t v49 = (void *)(v15 + v47);
  uint64_t v78 = v49[1];
  void *v48 = *v49;
  v48[1] = v78;
  uint64_t v50 = v22[23];
  uint64_t v51 = (void *)(v14 + v50);
  uint64_t v52 = (void *)(v15 + v50);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = v22[24];
  uint64_t v55 = v14 + v54;
  uint64_t v56 = v15 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  *(unsigned char *)(v14 + v22[25]) = *(unsigned char *)(v15 + v22[25]);
  *(void *)(v14 + v22[26]) = *(void *)(v15 + v22[26]);
  uint64_t v57 = v22[27];
  uint64_t v58 = (void *)(v14 + v57);
  uint64_t v59 = (void *)(v15 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v22[28];
  uint64_t v62 = (void *)(v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  uint64_t v64 = v63[1];
  void *v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = v22[29];
  uint64_t v66 = (void *)(v14 + v65);
  uint64_t v67 = (void *)(v15 + v65);
  uint64_t v68 = v67[1];
  void *v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = *(int *)(v88 + 24);
  uint64_t v70 = *(int *)(v88 + 28);
  uint64_t v71 = (void *)(a1 + v69);
  uint64_t v72 = (void *)(a2 + v69);
  uint64_t v73 = v72[1];
  void *v71 = *v72;
  v71[1] = v73;
  uint64_t v74 = (void *)(a1 + v70);
  uint64_t v75 = (void *)(a2 + v70);
  uint64_t v76 = v75[1];
  *uint64_t v74 = *v75;
  v74[1] = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000A2204(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = a3[5];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[6];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  void *v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[7];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (void *)(a2 + v72);
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000A2850(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  long long v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  long long v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = a3[5];
  long long v12 = (char *)a1 + v11;
  long long v13 = (char *)a2 + v11;
  *(_OWORD *)long long v12 = *(_OWORD *)((char *)a2 + v11);
  v12[16] = *((unsigned char *)a2 + v11 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)((char *)a2 + v11 + 40);
  v12[56] = *((unsigned char *)a2 + v11 + 56);
  long long v14 = *(_OWORD *)((char *)a2 + v11 + 80);
  *((_OWORD *)v12 + 4) = *(_OWORD *)((char *)a2 + v11 + 64);
  *((_OWORD *)v12 + 5) = v14;
  *((_OWORD *)v12 + 6) = *(_OWORD *)((char *)a2 + v11 + 96);
  long long v15 = (int *)type metadata accessor for ClientContext();
  uint64_t v16 = v15[12];
  long long v17 = &v12[v16];
  long long v18 = &v13[v16];
  uint64_t v19 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v12[v15[13]] = *(void *)&v13[v15[13]];
  *(_OWORD *)&v12[v15[14]] = *(_OWORD *)&v13[v15[14]];
  v12[v15[15]] = v13[v15[15]];
  *(_OWORD *)&v12[v15[16]] = *(_OWORD *)&v13[v15[16]];
  *(_OWORD *)&v12[v15[17]] = *(_OWORD *)&v13[v15[17]];
  *(_OWORD *)&v12[v15[18]] = *(_OWORD *)&v13[v15[18]];
  *(_OWORD *)&v12[v15[19]] = *(_OWORD *)&v13[v15[19]];
  *(_OWORD *)&v12[v15[20]] = *(_OWORD *)&v13[v15[20]];
  *(_OWORD *)&v12[v15[21]] = *(_OWORD *)&v13[v15[21]];
  *(_OWORD *)&v12[v15[22]] = *(_OWORD *)&v13[v15[22]];
  *(_OWORD *)&v12[v15[23]] = *(_OWORD *)&v13[v15[23]];
  uint64_t v20 = v15[24];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v12[v15[25]] = v13[v15[25]];
  *(void *)&v12[v15[26]] = *(void *)&v13[v15[26]];
  *(_OWORD *)&v12[v15[27]] = *(_OWORD *)&v13[v15[27]];
  *(_OWORD *)&v12[v15[28]] = *(_OWORD *)&v13[v15[28]];
  *(_OWORD *)&v12[v15[29]] = *(_OWORD *)&v13[v15[29]];
  uint64_t v23 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v23) = *(_OWORD *)((char *)a2 + v23);
  return a1;
}

uint64_t sub_1000A2A44(uint64_t a1, uint64_t a2, int *a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = a3[5];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[6];
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = a3[7];
  uint64_t v99 = (void *)(a1 + v98);
  uint64_t v100 = (uint64_t *)(a2 + v98);
  uint64_t v102 = *v100;
  uint64_t v101 = v100[1];
  *uint64_t v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A2DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A2E04);
}

uint64_t sub_1000A2E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ClientContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000A2ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A2EE0);
}

uint64_t sub_1000A2EE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ClientContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000A2FA4()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RespondToInviteRequest()
{
  return &type metadata for RespondToInviteRequest;
}

unint64_t sub_1000A305C()
{
  unint64_t result = qword_1003ED930;
  if (!qword_1003ED930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED930);
  }
  return result;
}

uint64_t sub_1000A30B0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100047084(&qword_1003ED938, (void (*)(uint64_t))type metadata accessor for RespondToInviteRequestContent);
  uint64_t result = sub_100047084(&qword_1003ED890, (void (*)(uint64_t))type metadata accessor for RespondToInviteRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000A3138()
{
  unint64_t result = qword_1003ED940;
  if (!qword_1003ED940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED940);
  }
  return result;
}

unint64_t sub_1000A318C()
{
  unint64_t result = qword_1003ED950;
  if (!qword_1003ED950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED950);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RespondToInviteRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RespondToInviteRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A333CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RespondToInviteRequestContent.CodingKeys()
{
  return &type metadata for RespondToInviteRequestContent.CodingKeys;
}

unint64_t sub_1000A3378()
{
  unint64_t result = qword_1003ED960;
  if (!qword_1003ED960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED960);
  }
  return result;
}

unint64_t sub_1000A33D0()
{
  unint64_t result = qword_1003ED968;
  if (!qword_1003ED968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED968);
  }
  return result;
}

unint64_t sub_1000A3428()
{
  unint64_t result = qword_1003ED970;
  if (!qword_1003ED970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003ED970);
  }
  return result;
}

uint64_t sub_1000A347C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43726576726573 && a2 == 0xED0000747865746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000A3660(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100044014(&qword_1003EDA30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100042524(a1, a1[3]);
  sub_1000A5DB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100013B50(v3, (uint64_t)v12, &qword_1003ED068);
  sub_100013B50((uint64_t)v12, (uint64_t)v11, &qword_1003ED068);
  v12[183] = 0;
  sub_10004E2E4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for InitClientRequestContent();
    v11[0] = 1;
    type metadata accessor for ClientContext();
    sub_1000470CC(&qword_1003ED228, (void (*)(uint64_t))type metadata accessor for ClientContext);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A385C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = type metadata accessor for ClientContext();
  __chkstk_darwin(v21);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100044014(&qword_1003EDA40);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = type metadata accessor for InitClientRequestContent();
  __chkstk_darwin(inited);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v23 = a1;
  sub_100042524(a1, v11);
  sub_1000A5DB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000233E4((uint64_t)v23);
  }
  uint64_t v18 = inited;
  uint64_t v12 = v20;
  uint64_t v13 = (uint64_t)v10;
  v25[183] = 0;
  sub_100036EB0();
  uint64_t v14 = v22;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100013B50((uint64_t)v25, (uint64_t)v24, &qword_1003ED068);
  uint64_t v17 = v13;
  sub_100013B50((uint64_t)v24, v13, &qword_1003ED068);
  v25[182] = 1;
  sub_1000470CC(&qword_1003ED400, (void (*)(uint64_t))type metadata accessor for ClientContext);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = v17;
  sub_10004E45C((uint64_t)v5, v17 + *(int *)(v18 + 20));
  sub_1000A4E5C(v15, v19, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
  sub_1000233E4((uint64_t)v23);
  return sub_1000A4EC4(v15, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
}

uint64_t sub_1000A3BC8(uint64_t a1)
{
  unint64_t v2 = sub_1000A5E08();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_1000A3C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A6068(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A3C2C(uint64_t a1)
{
  unint64_t v2 = sub_1000A5DB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3C68(uint64_t a1)
{
  unint64_t v2 = sub_1000A5DB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3CA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A385C(a1, a2);
}

uint64_t sub_1000A3CBC(void *a1)
{
  return sub_1000A3660(a1);
}

uint64_t sub_1000A3CD4(uint64_t a1)
{
  v1[225] = a1;
  uint64_t v2 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v1[226] = v2;
  v1[227] = *(void *)(v2 - 8);
  v1[228] = swift_task_alloc();
  v1[229] = type metadata accessor for InitClientRequestContent();
  v1[230] = swift_task_alloc();
  v1[231] = swift_task_alloc();
  v1[232] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Account();
  v1[233] = v3;
  v1[234] = *(void *)(v3 - 8);
  v1[235] = swift_task_alloc();
  sub_100044014(&qword_1003ED110);
  v1[236] = swift_task_alloc();
  v1[237] = swift_task_alloc();
  sub_100044014(&qword_1003F3B30);
  v1[238] = swift_task_alloc();
  v1[239] = swift_task_alloc();
  type metadata accessor for ClientContext();
  v1[240] = swift_task_alloc();
  v1[241] = swift_task_alloc();
  return _swift_task_switch(sub_1000A3EF8, 0, 0);
}

uint64_t sub_1000A3EF8()
{
  uint64_t v1 = v0[239];
  uint64_t v17 = v0[238];
  uint64_t v2 = v0[237];
  uint64_t v3 = v0[236];
  uint64_t v4 = v0[235];
  uint64_t v5 = v0[234];
  uint64_t v6 = v0[233];
  uint64_t v7 = v0[225];
  v0[242] = sub_10004D088();
  uint64_t v8 = type metadata accessor for Handle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = type metadata accessor for RequestOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v2, 1, 1, v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v10(v4, v7, v6);
  sub_100013210(v2, v3, &qword_1003ED110);
  sub_100013210(v1, v17, &qword_1003F3B30);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[243] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000A40BC;
  uint64_t v12 = v0[241];
  uint64_t v13 = v0[238];
  uint64_t v14 = v0[236];
  uint64_t v15 = v0[235];
  return sub_1000AD580(v12, v15, v14, v13);
}

uint64_t sub_1000A40BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1928);
  uint64_t v3 = *(void *)(*v0 + 1920);
  uint64_t v4 = *(void *)(*v0 + 1912);
  uint64_t v5 = *(void *)(*v0 + 1896);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  sub_10000A520(v5, &qword_1003ED110);
  sub_10000A520(v4, &qword_1003F3B30);
  sub_1000A4E5C(v2, v3, (uint64_t (*)(void))type metadata accessor for ClientContext);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 1952) = v6;
  *uint64_t v6 = v8;
  v6[1] = sub_1000A4288;
  return daemon.getter();
}

uint64_t sub_1000A4288(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v9 = *v1;
  *(void *)(v2 + 1960) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 1968) = v3;
  uint64_t v4 = type metadata accessor for Daemon();
  uint64_t v5 = type metadata accessor for DataManager(0);
  uint64_t v6 = sub_1000470CC(&qword_1003ECCA8, (void (*)(uint64_t))&type metadata accessor for Daemon);
  uint64_t v7 = sub_1000470CC(&qword_1003ECCC0, (void (*)(uint64_t))type metadata accessor for DataManager);
  *uint64_t v3 = v9;
  v3[1] = sub_1000A4464;
  return ActorServiceDaemon.getService<A>()(v4, v5, v6, v7);
}

uint64_t sub_1000A4464(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[247] = a1;
  v3[248] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_1000A480C, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v5 = (void *)swift_task_alloc();
    v3[249] = v5;
    void *v5 = v4;
    v5[1] = sub_1000A45F8;
    return sub_10000E400((uint64_t)(v3 + 110));
  }
}

uint64_t sub_1000A45F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1976);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000A4708, v1, 0);
}

uint64_t sub_1000A4708()
{
  sub_100013B50(v0 + 880, v0 + 448, &qword_1003ECCD0);
  if (sub_10005F070(v0 + 448) == 1)
  {
    uint64_t v1 = v0 + 1472;
    sub_10008DDB0((_OWORD *)(v0 + 1472));
  }
  else
  {
    uint64_t v1 = v0 + 1632;
    memcpy((void *)(v0 + 16), (const void *)(v0 + 448), 0x1B0uLL);
    sub_100013B50(v0 + 112, v0 + 1632, &qword_1003ED068);
    sub_100013BB4((void *)(v0 + 1632), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000376F4);
    sub_10000E224(v0 + 880);
  }
  sub_100013B50(v1, v0 + 1312, &qword_1003ED068);
  return _swift_task_switch(sub_1000A4988, 0, 0);
}

uint64_t sub_1000A480C()
{
  uint64_t v1 = v0[241];
  uint64_t v2 = v0[240];
  uint64_t v3 = v0[234];
  uint64_t v4 = v0[233];
  uint64_t v5 = v0[225];
  swift_release();
  sub_1000A4EC4(v2, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  sub_1000A4EC4(v1, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000A4988()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[240];
  uint64_t v2 = v0[232];
  uint64_t v3 = v0[229];
  swift_release();
  sub_100013B50((uint64_t)(v0 + 164), v2, &qword_1003ED068);
  sub_10004E45C(v1, v2 + *(int *)(v3 + 20));
  if (qword_1003EBF80 != -1) {
    swift_once();
  }
  uint64_t v4 = v0[232];
  uint64_t v5 = v0[231];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100044058(v6, (uint64_t)qword_10040B4F8);
  sub_1000A4E5C(v4, v5, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[231];
  if (v9)
  {
    uint64_t v11 = v0[230];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_1000A4E5C(v10, v11, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
    uint64_t v13 = String.init<A>(describing:)();
    v0[224] = sub_100037004(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A4EC4(v10, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Request content: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000A4EC4(v0[231], (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
  }

  uint64_t v15 = v0[248];
  uint64_t v16 = (void *)v0[228];
  uint64_t v17 = v0[227];
  uint64_t v18 = v0[226];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v16 = sub_1000CA550;
  v16[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v16, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v18);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  sub_1000470CC(&qword_1003ED980, (void (*)(uint64_t))type metadata accessor for InitClientRequestContent);
  uint64_t v19 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v21 = v20;
  swift_release();
  if (v15)
  {
    swift_errorRelease();
    uint64_t v19 = 0;
    unint64_t v21 = 0xF000000000000000;
  }
  uint64_t v22 = v0[241];
  uint64_t v23 = v0[232];
  (*(void (**)(void, void))(v0[234] + 8))(v0[225], v0[233]);
  sub_1000A4EC4(v23, (uint64_t (*)(void))type metadata accessor for InitClientRequestContent);
  sub_1000A4EC4(v22, (uint64_t (*)(void))type metadata accessor for ClientContext);
  swift_bridgeObjectRetain();
  sub_1000287E4(v19, v21);
  swift_bridgeObjectRelease_n();
  sub_1000440E8(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v0[1];
  uint64_t v25 = v0[242];
  return v24(v25, v19, v21);
}

uint64_t type metadata accessor for InitClientRequestContent()
{
  uint64_t result = qword_1003ED9E0;
  if (!qword_1003ED9E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A4E5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A4EC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A4F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10008EE3C(a1);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 112) = v12;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 32);
    long long v16 = *(_OWORD *)(a2 + 48);
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)(a1 + 48) = v16;
    long long v18 = *(_OWORD *)(a2 + 96);
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v20;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 112) = v19;
  }
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)(a2 + v21);
  *(void *)(v22 + 8) = *(void *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 40) = *(void *)(v23 + 40);
  *(void *)(v22 + 48) = *(void *)(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + 56) = *(unsigned char *)(v23 + 56);
  *(void *)(v22 + 64) = *(void *)(v23 + 64);
  *(void *)(v22 + 72) = *(void *)(v23 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 80) = *(void *)(v23 + 80);
  *(void *)(v22 + 88) = *(void *)(v23 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v22 + 96) = *(void *)(v23 + 96);
  *(void *)(v22 + 104) = *(void *)(v23 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)type metadata accessor for ClientContext();
  uint64_t v25 = v24[12];
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v23 + v25;
  uint64_t v28 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  *(void *)(v22 + v24[13]) = *(void *)(v23 + v24[13]);
  uint64_t v29 = v24[14];
  uint64_t v30 = (void *)(v22 + v29);
  uint64_t v31 = (void *)(v23 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v22 + v24[15]) = *(unsigned char *)(v23 + v24[15]);
  uint64_t v32 = v24[16];
  uint64_t v33 = (void *)(v22 + v32);
  uint64_t v34 = (void *)(v23 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v24[17];
  uint64_t v36 = (void *)(v22 + v35);
  uint64_t v37 = (void *)(v23 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v24[18];
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = (void *)(v23 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = v24[19];
  uint64_t v42 = (void *)(v22 + v41);
  uint64_t v43 = (void *)(v23 + v41);
  void *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v24[20];
  uint64_t v45 = (void *)(v22 + v44);
  uint64_t v46 = (void *)(v23 + v44);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = v24[21];
  uint64_t v48 = (void *)(v22 + v47);
  uint64_t v49 = (void *)(v23 + v47);
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v24[22];
  uint64_t v51 = (void *)(v22 + v50);
  uint64_t v52 = (void *)(v23 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[23];
  uint64_t v54 = (void *)(v22 + v53);
  uint64_t v55 = (void *)(v23 + v53);
  void *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v24[24];
  uint64_t v57 = v22 + v56;
  uint64_t v58 = (uint64_t *)(v23 + v56);
  uint64_t v59 = *v58;
  *(unsigned char *)(v57 + 8) = *((unsigned char *)v58 + 8);
  *(void *)uint64_t v57 = v59;
  *(unsigned char *)(v22 + v24[25]) = *(unsigned char *)(v23 + v24[25]);
  *(void *)(v22 + v24[26]) = *(void *)(v23 + v24[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v60 = v24[27];
  uint64_t v61 = (void *)(v22 + v60);
  uint64_t v62 = (void *)(v23 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v24[28];
  uint64_t v64 = (void *)(v22 + v63);
  uint64_t v65 = (void *)(v23 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = v24[29];
  uint64_t v67 = (void *)(v22 + v66);
  uint64_t v68 = (void *)(v23 + v66);
  void *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000A5510(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  long long v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  long long v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  long long v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  uint64_t v9 = *(int *)(a3 + 20);
  long long v10 = (char *)a1 + v9;
  long long v11 = (char *)a2 + v9;
  *(_OWORD *)long long v10 = *(_OWORD *)((char *)a2 + v9);
  unsigned char v10[16] = *((unsigned char *)a2 + v9 + 16);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)((char *)a2 + v9 + 24);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)((char *)a2 + v9 + 40);
  v10[56] = *((unsigned char *)a2 + v9 + 56);
  long long v12 = *(_OWORD *)((char *)a2 + v9 + 80);
  *((_OWORD *)v10 + 4) = *(_OWORD *)((char *)a2 + v9 + 64);
  *((_OWORD *)v10 + 5) = v12;
  *((_OWORD *)v10 + 6) = *(_OWORD *)((char *)a2 + v9 + 96);
  long long v13 = (int *)type metadata accessor for ClientContext();
  uint64_t v14 = v13[12];
  long long v15 = &v10[v14];
  long long v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  *(void *)&v10[v13[13]] = *(void *)&v11[v13[13]];
  *(_OWORD *)&v10[v13[14]] = *(_OWORD *)&v11[v13[14]];
  v10[v13[15]] = v11[v13[15]];
  *(_OWORD *)&v10[v13[16]] = *(_OWORD *)&v11[v13[16]];
  *(_OWORD *)&v10[v13[17]] = *(_OWORD *)&v11[v13[17]];
  *(_OWORD *)&v10[v13[18]] = *(_OWORD *)&v11[v13[18]];
  *(_OWORD *)&v10[v13[19]] = *(_OWORD *)&v11[v13[19]];
  *(_OWORD *)&v10[v13[20]] = *(_OWORD *)&v11[v13[20]];
  *(_OWORD *)&v10[v13[21]] = *(_OWORD *)&v11[v13[21]];
  *(_OWORD *)&v10[v13[22]] = *(_OWORD *)&v11[v13[22]];
  *(_OWORD *)&v10[v13[23]] = *(_OWORD *)&v11[v13[23]];
  uint64_t v18 = v13[24];
  long long v19 = &v10[v18];
  long long v20 = &v11[v18];
  *(void *)long long v19 = *(void *)v20;
  v19[8] = v20[8];
  v10[v13[25]] = v11[v13[25]];
  *(void *)&v10[v13[26]] = *(void *)&v11[v13[26]];
  *(_OWORD *)&v10[v13[27]] = *(_OWORD *)&v11[v13[27]];
  *(_OWORD *)&v10[v13[28]] = *(_OWORD *)&v11[v13[28]];
  *(_OWORD *)&v10[v13[29]] = *(_OWORD *)&v11[v13[29]];
  return a1;
}

uint64_t sub_1000A56E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 40))
  {
    sub_10008EE3C(a1);
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *(void *)uint64_t v17 = *(void *)(a2 + v16);
  *(void *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 56) = *(unsigned char *)(v18 + 56);
  uint64_t v22 = *(void *)(v18 + 72);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  *(void *)(v17 + 72) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 88);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  *(void *)(v17 + 88) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v18 + 104);
  *(void *)(v17 + 96) = *(void *)(v18 + 96);
  *(void *)(v17 + 104) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = (int *)type metadata accessor for ClientContext();
  uint64_t v26 = v25[12];
  uint64_t v27 = v17 + v26;
  uint64_t v28 = v18 + v26;
  uint64_t v29 = type metadata accessor for SystemInfo.DeviceLockState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)(v17 + v25[13]) = *(void *)(v18 + v25[13]);
  uint64_t v30 = v25[14];
  uint64_t v31 = (void *)(v17 + v30);
  uint64_t v32 = (uint64_t *)(v18 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + v25[15]) = *(unsigned char *)(v18 + v25[15]);
  uint64_t v35 = v25[16];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (uint64_t *)(v18 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = v25[17];
  uint64_t v41 = (void *)(v17 + v40);
  uint64_t v42 = (uint64_t *)(v18 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = v25[18];
  uint64_t v46 = (void *)(v17 + v45);
  uint64_t v47 = (uint64_t *)(v18 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = v25[19];
  uint64_t v51 = (void *)(v17 + v50);
  uint64_t v52 = (uint64_t *)(v18 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = v25[20];
  uint64_t v56 = (void *)(v17 + v55);
  uint64_t v57 = (uint64_t *)(v18 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = v25[21];
  uint64_t v61 = (void *)(v17 + v60);
  uint64_t v62 = (uint64_t *)(v18 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *uint64_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = v25[22];
  uint64_t v66 = (void *)(v17 + v65);
  uint64_t v67 = (uint64_t *)(v18 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = v25[23];
  uint64_t v71 = (void *)(v17 + v70);
  uint64_t v72 = (uint64_t *)(v18 + v70);
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  void *v71 = v74;
  v71[1] = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v25[24];
  uint64_t v76 = v17 + v75;
  uint64_t v77 = v18 + v75;
  *(void *)uint64_t v76 = *(void *)v77;
  *(unsigned char *)(v76 + 8) = *(unsigned char *)(v77 + 8);
  *(unsigned char *)(v17 + v25[25]) = *(unsigned char *)(v18 + v25[25]);
  *(void *)(v17 + v25[26]) = *(void *)(v18 + v25[26]);
  swift_bridgeObjectRelease();
  uint64_t v78 = v25[27];
  uint64_t v79 = (void *)(v17 + v78);
  uint64_t v80 = (uint64_t *)(v18 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v25[28];
  uint64_t v84 = (void *)(v17 + v83);
  uint64_t v85 = (uint64_t *)(v18 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  void *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v25[29];
  uint64_t v89 = (void *)(v17 + v88);
  uint64_t v90 = (uint64_t *)(v18 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A5A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A5A60);
}

uint64_t sub_1000A5A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for ClientContext();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1000A5B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A5B30);
}

uint64_t sub_1000A5B30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ClientContext();
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A5BD8()
{
  uint64_t result = type metadata accessor for ClientContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitClientRequest()
{
  return &type metadata for InitClientRequest;
}

unint64_t sub_1000A5C84()
{
  unint64_t result = qword_1003EDA18;
  if (!qword_1003EDA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA18);
  }
  return result;
}

uint64_t sub_1000A5CD8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000470CC(&qword_1003EDA20, (void (*)(uint64_t))type metadata accessor for InitClientRequestContent);
  uint64_t result = sub_1000470CC(&qword_1003ED980, (void (*)(uint64_t))type metadata accessor for InitClientRequestContent);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000A5D60()
{
  unint64_t result = qword_1003EDA28;
  if (!qword_1003EDA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA28);
  }
  return result;
}

unint64_t sub_1000A5DB4()
{
  unint64_t result = qword_1003EDA38;
  if (!qword_1003EDA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA38);
  }
  return result;
}

unint64_t sub_1000A5E08()
{
  unint64_t result = qword_1003EDA48;
  if (!qword_1003EDA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003EDA48);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InitClientRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A5F28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}