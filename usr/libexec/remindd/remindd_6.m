uint64_t type metadata accessor for RDStoreControllerNotificationCenter()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedAccountFireValue(void *a1, void *a2)
{
  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
}

void *assignWithCopy for RDStoreControllerNotificationCenter.ChangedAccountFireValue(void *a1, void *a2)
{
  *a1 = *a2;
  v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerNotificationCenter.ChangedAccountFireValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedAccountFireValue()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue;
}

void *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedEntityFireValue(void *a1, uint64_t a2)
{
  v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for RDStoreControllerNotificationCenter.ChangedEntityFireValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedEntityFireValue(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedEntityFireValue()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue;
}

uint64_t *sub_1004032CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    id v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + v8) = (uint64_t)v9;
    uint64_t v10 = a3[7];
    v11 = (uint64_t *)((char *)v4 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
    id v14 = v9;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1004033C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_100403450(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_bridgeObjectRetain();
  id v13 = v8;
  swift_retain();
  return a1;
}

uint64_t sub_1004034F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  id v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1004035C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100403650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_100403700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100403714);
}

uint64_t sub_100403714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t type metadata accessor for RDStoreControllerNotificationCenter.Token(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100917B98);
}

uint64_t sub_1004037F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100403808);
}

uint64_t sub_100403808(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RDStoreControllerNotificationCenter.Observer(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100917B00);
}

uint64_t sub_1004038E4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100403994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004039A8);
}

uint64_t sub_1004039A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100403A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100403A28);
}

uint64_t sub_100403A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_100403A98()
{
  return sub_100403B28(&qword_100917BD0, (void (*)(uint64_t))type metadata accessor for RDStoreControllerNotificationCenter.Token);
}

uint64_t sub_100403AE0()
{
  return sub_100403B28(&qword_100917BD8, (void (*)(uint64_t))type metadata accessor for RDStoreControllerNotificationCenter.Observer);
}

uint64_t sub_100403B28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100403B74()
{
  unint64_t result = qword_100917BE0;
  if (!qword_100917BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917BE0);
  }
  return result;
}

unint64_t sub_100403BC8(uint64_t a1)
{
  unint64_t result = sub_1001284DC();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_100403BF0(id a1@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  id v7 = [a1 entitiesByName];
  sub_1000963CC(0, (unint64_t *)&unk_100917C20);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1001806F8(v6, v5);
    if (v10)
    {
      id v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_1009179D0);
  swift_bridgeObjectRetain_n();
  id v13 = a1;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v6, v5, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    id v17 = [v13 description];
    v18 = a3;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    uint64_t v22 = v19;
    a3 = v18;
    sub_1000C51B8(v22, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Entity in the given filter option not recognized in managedObjectContext {entityName: %{public}s, managedObjectModel: %s}", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v11 = 0;
LABEL_11:
  *a3 = v11;
}

uint64_t sub_100403EF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = Notification.userInfo.getter();
  if (!v9)
  {
    long long v32 = 0u;
    long long v33 = 0u;
LABEL_13:
    sub_1000966BC((uint64_t)&v32, &qword_100908190);
    uint64_t v29 = 0;
    uint64_t v16 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = v9;
  *(void *)&long long v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v32 + 1) = v11;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v12 = sub_100307418((uint64_t)&v30), (v13 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v10 + 56) + 32 * v12, (uint64_t)&v32);
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)&v30);
  if (!*((void *)&v33 + 1)) {
    goto LABEL_13;
  }
  int v14 = swift_dynamicCast();
  uint64_t v15 = v30;
  if (!v14) {
    uint64_t v15 = 0;
  }
  uint64_t v29 = v15;
  if (v14) {
    uint64_t v16 = v31;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_14:
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_1009179D0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    *(void *)&long long v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v21 = Optional.descriptionOrNil.getter();
    uint64_t v30 = sub_1000C51B8(v21, v22, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    if (v16) {
      uint64_t v23 = v29;
    }
    else {
      uint64_t v23 = 0x68747561206F6E28;
    }
    if (v16) {
      unint64_t v24 = v16;
    }
    else {
      unint64_t v24 = 0xEB0000000029726FLL;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_1000C51B8(v23, v24, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDStoreControllerNotificationCenter.storeControllerDidChange[%{public}s]: Received notification {author: %{public}s}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  unsigned int v26 = [a4 notificationContainsInternalChangesOnly:isa];

  if (v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v16)
  {
    if (a5)
    {
      char v28 = sub_1001BCB84(v29, v16, a5);
      swift_bridgeObjectRelease();
      if (v28) {
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return 1;
}

uint64_t sub_1004042CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_1009179D0);
  swift_bridgeObjectRetain_n();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v14 = a1;
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136446210;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v8 = Optional.descriptionOrNil.getter();
    sub_1000C51B8(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v14;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = os_transaction_create();
  uint64_t v11 = *(int *)(sub_100094134(&qword_100917C60) + 48);
  uint64_t v12 = type metadata accessor for Notification();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a2, a1, v12);
  *(void *)(a2 + v11) = v10;
  return result;
}

uint64_t sub_100404500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1004087A4(a1);
  uint64_t v5 = v4;
  id v6 = [self currentThread];
  id v38 = [v6 qualityOfService];

  unint64_t v7 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = __CocoaSet.count.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_21:
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_1009179D0);
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)long long v32 = 136446210;
      v39[0] = a3;
      v39[1] = a4;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v33 = Optional.descriptionOrNil.getter();
      v39[0] = sub_1000C51B8(v33, v34, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = sub_100127AA8((uint64_t)v12);
    swift_bridgeObjectRelease();
    return v35;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  v43 = _swiftEmptyArrayStorage;
  sub_1001DEA1C(0, v8 & ~(v8 >> 63), 0);
  if (v7)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v11 = 1;
  }
  else
  {
    uint64_t result = sub_1003CA790(v5);
    unsigned __int8 v11 = v13 & 1;
  }
  uint64_t v40 = result;
  uint64_t v41 = v10;
  unsigned __int8 v42 = v11;
  if ((v8 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        uint64_t v20 = v40;
        uint64_t v19 = v41;
        uint64_t v21 = v42;
        sub_1003CA754(v40, v41, v42, v5);
        uint64_t v23 = v22;
        unint64_t v24 = v43;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1001DEA1C(0, v24[2] + 1, 1);
          unint64_t v24 = v43;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          uint64_t result = sub_1001DEA1C(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v43;
        }
        v24[2] = v26 + 1;
        v27 = &v24[2 * v26];
        v27[4] = v23;
        v27[5] = v38;
        if (v7) {
          break;
        }
        uint64_t v14 = sub_1003C9E34(v20, v19, v21, v5);
        uint64_t v16 = v15;
        char v18 = v17;
        sub_1000E4EA4(v20, v19, v21);
        uint64_t v40 = v14;
        uint64_t v41 = v16;
        unsigned __int8 v42 = v18 & 1;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      if ((v21 & 1) == 0) {
        goto LABEL_28;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134((uint64_t *)&unk_100917CB0);
      char v28 = (void (*)(void *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v28(v39, 0);
      --v8;
    }
    while (v8);
LABEL_20:
    sub_1000E4EA4(v40, v41, v42);
    swift_bridgeObjectRelease();
    uint64_t v12 = v43;
    goto LABEL_21;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_100404938(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  id v6 = [self managedObjectModel];
  sub_100408D8C(v5, a2, v6);
  uint64_t v8 = v7;

  *a3 = v8;
}

uint64_t sub_1004049A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  sub_100094134((uint64_t *)&unk_100917CE0);
  sub_100094134((uint64_t *)&unk_10090DD40);
  swift_getWitnessTable();
  uint64_t result = Sequence.reduce<A>(_:_:)();
  *a2 = v5;
  a2[1] = v3;
  return result;
}

void sub_100404A74(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10065D58C(v4, v3);
  *a2 = v5;
}

Swift::Int sub_100404AC8()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  uint64_t v3 = (void *)v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  id v4 = v2;
  id v5 = v3;
  NSObject.hash(into:)();
  id v6 = v5;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_100404B54()
{
  Swift::UInt v1 = (void *)v0[1];
  unint64_t v2 = (void *)v0[2];
  Hasher._combine(_:)(*v0);
  id v3 = v1;
  id v4 = v2;
  NSObject.hash(into:)();
  id v5 = v4;
  NSObject.hash(into:)();
}

Swift::Int sub_100404BE8()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = (void *)v0[1];
  id v3 = (void *)v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  id v4 = v2;
  id v5 = v3;
  NSObject.hash(into:)();
  id v6 = v5;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

BOOL sub_100404C70(void *a1, void *a2)
{
  BOOL result = 0;
  if (*a1 == *a2)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static NSObject.== infix(_:_:)()) {
      return 1;
    }
  }
  return result;
}

unint64_t sub_100404D00()
{
  unint64_t result = qword_100917BF0;
  if (!qword_100917BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917BF0);
  }
  return result;
}

unint64_t sub_100404D54(uint64_t a1)
{
  unint64_t result = sub_100127BDC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100404D7C(uint64_t a1)
{
  unint64_t result = sub_100404DA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100404DA4()
{
  unint64_t result = qword_100917C00;
  if (!qword_100917C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917C00);
  }
  return result;
}

uint64_t sub_100404DF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int sub_100404E60()
{
  Swift::UInt v1 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  NSObject.hash(into:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_100404EC4()
{
  Swift::UInt v1 = *(void **)(v0 + 8);
  NSObject.hash(into:)();
  id v2 = v1;
  NSObject.hash(into:)();
}

Swift::Int sub_100404F2C()
{
  Swift::UInt v1 = *(void **)(v0 + 8);
  Hasher.init(_seed:)();
  NSObject.hash(into:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t sub_100404F8C()
{
  if (static NSObject.== infix(_:_:)()) {
    return static NSObject.== infix(_:_:)() & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100405004(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v78 = a5;
  uint64_t v96 = a1;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v9 - 8);
  v83 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100917C38);
  uint64_t v80 = *(void *)(v11 - 8);
  uint64_t v81 = v11;
  __chkstk_darwin(v11);
  char v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134(&qword_100917C40);
  uint64_t v84 = *(void *)(v14 - 8);
  uint64_t v85 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134(&qword_100917C48);
  uint64_t v89 = *(void *)(v17 - 8);
  uint64_t v90 = v17;
  __chkstk_darwin(v17);
  v86 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100094134(&qword_100917C50);
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  v87 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_100094134(&qword_100917C58);
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  v88 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = a3;
  id v99 = a3;
  uint64_t v100 = a4;
  sub_100094134((uint64_t *)&unk_10090A4C0);
  uint64_t v21 = Optional.descriptionOrNil.getter();
  uint64_t v82 = v22;
  uint64_t v79 = v5;
  uint64_t v23 = NSNotificationCenter.Publisher.name.getter();
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = a2;
  uint64_t v95 = v21;
  if (v24 == v27 && v26 == v28) {
    char v29 = 1;
  }
  else {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  unint64_t v30 = 0xD000000000000012;
  uint64_t v31 = swift_allocObject();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77 = v16;
  if (v29)
  {
    uint64_t v32 = v31;

    unint64_t v30 = 0xD000000000000011;
    uint64_t v33 = "accountsDidEnable";
LABEL_13:
    unint64_t v39 = (unint64_t)(v33 - 32) | 0x8000000000000000;
    goto LABEL_14;
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
  {
    uint64_t v32 = v31;

    swift_bridgeObjectRelease_n();
LABEL_12:
    uint64_t v33 = "accountsDidDisable";
    goto LABEL_13;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38)
  {
    uint64_t v32 = v31;
    goto LABEL_12;
  }
  uint64_t v65 = a4;
  uint64_t v32 = v31;
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  unint64_t v30 = 0x6E776F6E6B6E75;
  uint64_t v66 = type metadata accessor for Logger();
  sub_10008E2DC(v66, (uint64_t)qword_1009179D0);
  swift_bridgeObjectRetain_n();
  v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.fault.getter();
  int v69 = v68;
  if (os_log_type_enabled(v67, v68))
  {
    int v75 = v69;
    v70 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t v74 = v71;
    *(_DWORD *)v70 = 136446210;
    uint64_t v98 = v71;
    id v99 = v76;
    uint64_t v100 = v65;
    uint64_t v72 = Optional.descriptionOrNil.getter();
    id v99 = (id)sub_1000C51B8(v72, v73, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v75, "RDStoreControllerNotificationCenter: Incorrect usage of rem_pipeLineOfAccountsDidEnableOrDisable() {label: %{public}s}", v70, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v39 = 0xE700000000000000;
LABEL_14:
  uint64_t v40 = v96;
  uint64_t v41 = v82;
  *(void *)(v32 + 16) = v30;
  *(void *)(v32 + 24) = v39;
  unsigned __int8 v42 = (void *)swift_allocObject();
  uint64_t v43 = v97;
  v42[2] = v40;
  v42[3] = v43;
  uint64_t v44 = v95;
  v42[4] = v32;
  v42[5] = v44;
  uint64_t v45 = v78;
  v42[6] = v41;
  v42[7] = v45;
  type metadata accessor for NSNotificationCenter.Publisher();
  sub_100403B28((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Publisher.filter(_:)();
  swift_release();
  v46 = (void *)swift_allocObject();
  v46[2] = v32;
  v46[3] = v44;
  v46[4] = v41;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100094134(&qword_100917C60);
  sub_1000967F4((unint64_t *)&unk_100917C68, &qword_100917C38);
  v47 = v77;
  uint64_t v48 = v81;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v13, v48);
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  v49 = (void *)qword_100942060;
  id v99 = (id)qword_100942060;
  uint64_t v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v51 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v83, 1, 1, v50);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4(&qword_100917C78, &qword_100917C40);
  sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  id v52 = v49;
  uint64_t v53 = v85;
  v54 = v86;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v51, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v84 + 8))(v47, v53);
  v55 = (void *)swift_allocObject();
  uint64_t v56 = v97;
  v55[2] = v96;
  v55[3] = v56;
  v55[4] = v32;
  v55[5] = v95;
  v55[6] = v41;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_100407008;
  *(void *)(v57 + 24) = v55;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100094134((uint64_t *)&unk_10090AB80);
  sub_1000967F4(&qword_100917C80, &qword_100917C48);
  v58 = v87;
  uint64_t v59 = v90;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v54, v59);
  sub_1000967F4(&qword_100917C88, &qword_100917C50);
  v60 = v88;
  uint64_t v61 = v93;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v58, v61);
  sub_1000967F4((unint64_t *)&unk_100917C90, &qword_100917C58);
  uint64_t v62 = v94;
  uint64_t v63 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v60, v62);
  swift_release();
  return v63;
}

BOOL sub_100405B2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v13 = Notification.userInfo.getter();
  if (!v13)
  {
    long long v43 = 0u;
    long long v44 = 0u;
LABEL_13:
    sub_1000966BC((uint64_t)&v43, &qword_100908190);
    goto LABEL_14;
  }
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v14 + 16) && (unint64_t v15 = sub_100307418((uint64_t)v42), (v16 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v43);
  }
  else
  {
    long long v43 = 0u;
    long long v44 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v42);
  if (!*((void *)&v44 + 1)) {
    goto LABEL_13;
  }
  sub_100094134(&qword_100917CA0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_1009179D0);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      *(void *)&long long v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446722;
      swift_beginAccess();
      uint64_t v27 = *(void *)(a4 + 16);
      unint64_t v26 = *(void *)(a4 + 24);
      swift_bridgeObjectRetain();
      sub_1000C51B8(v27, v26, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a5, a6, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 22) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification that has no %{public}s in the user info", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    return 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = Notification.userInfo.getter();
  if (!v17)
  {
    long long v43 = 0u;
    long long v44 = 0u;
LABEL_29:
    sub_1000966BC((uint64_t)&v43, &qword_100908190);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    goto LABEL_30;
  }
  uint64_t v18 = v17;
  *(void *)&long long v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v43 + 1) = v19;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v18 + 16) && (unint64_t v20 = sub_100307418((uint64_t)v42), (v21 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v18 + 56) + 32 * v20, (uint64_t)&v43);
  }
  else
  {
    long long v43 = 0u;
    long long v44 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v42);
  if (!*((void *)&v44 + 1)) {
    goto LABEL_29;
  }
  int v29 = swift_dynamicCast();
  if (v29) {
    uint64_t v30 = v42[0];
  }
  else {
    uint64_t v30 = 0;
  }
  if (v29) {
    uint64_t v31 = v42[1];
  }
  else {
    uint64_t v31 = 0;
  }
LABEL_30:
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E2DC(v32, (uint64_t)qword_1009179D0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    os_log_type_t type = v34;
    uint64_t v35 = swift_slowAlloc();
    *(void *)&long long v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136446722;
    swift_beginAccess();
    uint64_t v36 = *(void *)(a4 + 16);
    unint64_t v37 = *(void *)(a4 + 24);
    swift_bridgeObjectRetain();
    sub_1000C51B8(v36, v37, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a5, a6, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 22) = 2082;
    if (v31) {
      uint64_t v38 = v30;
    }
    else {
      uint64_t v38 = 0x68747561206F6E28;
    }
    if (v31) {
      unint64_t v39 = v31;
    }
    else {
      unint64_t v39 = 0xEB0000000029726FLL;
    }
    swift_bridgeObjectRetain();
    sub_1000C51B8(v38, v39, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, type, "RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification {author: %{public}s}", (uint8_t *)v35, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v31) {
      return 1;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (!v31) {
      return 1;
    }
  }
  if (a7)
  {
    char v40 = sub_1001BCB84(v30, v31, a7);
    swift_bridgeObjectRelease();
    return (v40 & 1) == 0;
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_10040623C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_1009074F0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_1009179D0);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    swift_beginAccess();
    uint64_t v14 = a5;
    uint64_t v15 = *(void *)(a2 + 16);
    unint64_t v16 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1000C51B8(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a5 = v14;
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1000C51B8(a3, a4, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(63);
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  v17._object = (void *)0x80000001007D4300;
  v17._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v17);
  swift_beginAccess();
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x656873696C627550;
  v21._object = (void *)0xE900000000000072;
  String.append(_:)(v21);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = os_transaction_create();
  swift_release();
  uint64_t v23 = *(int *)(sub_100094134(&qword_100917C60) + 48);
  uint64_t v24 = type metadata accessor for Notification();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a5, a1, v24);
  *(void *)(a5 + v23) = v22;
  return result;
}

uint64_t sub_1004065A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10 = Notification.userInfo.getter();
  if (!v10)
  {
    long long v49 = 0u;
    long long v50 = 0u;
LABEL_13:
    sub_1000966BC((uint64_t)&v49, &qword_100908190);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v11 = v10;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_100307418((uint64_t)v48), (v13 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v49);
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v48);
  if (!*((void *)&v50 + 1)) {
    goto LABEL_13;
  }
  sub_100094134(&qword_100917CA0);
  if ((swift_dynamicCast() & 1) == 0) {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v43 = a6;
  uint64_t v44 = a5;
  unint64_t v45 = a7;
  uint64_t v14 = v48[0];
  id v15 = [self currentThread];
  id v46 = [v15 qualityOfService];

  unint64_t v47 = v14 & 0xC000000000000001;
  if ((v14 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = __CocoaSet.count.getter();
    if (v16) {
      goto LABEL_10;
    }
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_32:
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_1009179D0);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      *(void *)&long long v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446466;
      swift_beginAccess();
      uint64_t v41 = *(void *)(v44 + 16);
      unint64_t v42 = *(void *)(v44 + 24);
      swift_bridgeObjectRetain();
      sub_1000C51B8(v41, v42, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v43, v45, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    uint64_t v20 = sub_100127B34((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    return v20;
  }
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16) {
    goto LABEL_17;
  }
LABEL_10:
  sub_1001DEA3C(0, v16 & ~(v16 >> 63), 0);
  if (v47)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    char v19 = 1;
  }
  else
  {
    uint64_t result = sub_1003CA790(v14);
    char v19 = v21 & 1;
  }
  *(void *)&long long v49 = result;
  *((void *)&v49 + 1) = v18;
  LOBYTE(v50) = v19;
  if ((v16 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        long long v27 = v49;
        uint64_t v28 = v50;
        sub_1003CA768(v49, SDWORD2(v49), v50, v14);
        uint64_t v30 = v29;
        id v31 = [v29 accountTypeHost];
        id v32 = [v30 remObjectID];

        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_1001DEA3C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v34 = _swiftEmptyArrayStorage[2];
        unint64_t v33 = _swiftEmptyArrayStorage[3];
        if (v34 >= v33 >> 1) {
          uint64_t result = sub_1001DEA3C(v33 > 1, v34 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v34 + 1;
        uint64_t v35 = &_swiftEmptyArrayStorage[3 * v34];
        v35[4] = v46;
        v35[5] = v31;
        v35[6] = v32;
        if (v47) {
          break;
        }
        uint64_t v22 = sub_1003C9E34(v27, *((void *)&v27 + 1), v28, v14);
        uint64_t v24 = v23;
        char v26 = v25;
        sub_1000E4EA4(v27, *((uint64_t *)&v27 + 1), v28);
        *(void *)&long long v49 = v22;
        *((void *)&v49 + 1) = v24;
        LOBYTE(v50) = v26 & 1;
        if (!--v16) {
          goto LABEL_31;
        }
      }
      if ((v28 & 1) == 0) {
        goto LABEL_39;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(&qword_100917CA8);
      uint64_t v36 = (void (*)(void *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v36(v48, 0);
      --v16;
    }
    while (v16);
LABEL_31:
    sub_1000E4EA4(v49, *((uint64_t *)&v49 + 1), v50);
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100406B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100406BD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100406C34()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100406C6C(uint64_t a1)
{
}

uint64_t sub_100406C74(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100406CB4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100406D10()
{
  Swift::UInt v1 = (int *)(type metadata accessor for RDStoreControllerNotificationCenter.Observer(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100406E28()
{
  uint64_t v1 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return (*(uint64_t (**)(void))(v0 + *(int *)(v1 + 28) + v3))(*(void *)(v0
                                                                                     + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100406EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100406ED4()
{
  return swift_release();
}

uint64_t sub_100406EDC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100406F14()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

BOOL sub_100406F64(uint64_t a1)
{
  return sub_100405B2C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_100406F74()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100406FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10040623C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100406FC0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100407008(uint64_t a1, uint64_t a2)
{
  return sub_1004065A0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100407018()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100407054(void *a1, uint64_t a2, uint64_t a3)
{
  long long v27 = a1;
  uint64_t v6 = sub_100094134(&qword_100917D40);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = self;
  id v14 = [v13 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = sub_100405004(v15, v16, a1, a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  id v19 = [v13 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = sub_100405004(v20, v21, v27, a2, a3);
  swift_bridgeObjectRelease();
  v18(v12, v9);
  uint64_t v31 = v22;
  uint64_t v32 = v17;
  swift_retain();
  swift_retain();
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  uint64_t v23 = v28;
  Publishers.Merge.init(_:_:)();
  sub_1000967F4(&qword_100917D48, &qword_100917D40);
  uint64_t v24 = v29;
  uint64_t v25 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  return v25;
}

uint64_t sub_100407394(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = a4;
  uint64_t v63 = a3;
  uint64_t v82 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v5 - 8);
  v77 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100094134(&qword_100917CF0);
  uint64_t v66 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_100917CF8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  __chkstk_darwin(v8);
  uint64_t v62 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100917D00);
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100094134(&qword_100917D08);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  int v75 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100094134(&qword_100917D10);
  uint64_t v76 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v74 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v15 = *(void *)(v60 - 8);
  uint64_t v16 = __chkstk_darwin(v60);
  uint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v59 - v23;
  __chkstk_darwin(v22);
  char v26 = (char *)&v59 - v25;
  long long v27 = self;
  id v28 = [v27 defaultCenter];
  id v29 = [a1 persistentStoreCoordinator];
  uint64_t v30 = v82;
  NSNotificationCenter.publisher(for:object:)();

  id v31 = [v27 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v73 = v15;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  int v69 = v26;
  unint64_t v33 = v26;
  uint64_t v34 = v60;
  v32(v21, v33, v60);
  v70 = v24;
  v32(v18, v24, v34);
  sub_100403B28((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  uint64_t v35 = v61;
  Publishers.Merge.init(_:_:)();
  uint64_t v36 = (void *)swift_allocObject();
  uint64_t v37 = v63;
  v36[2] = v30;
  v36[3] = v37;
  uint64_t v38 = v65;
  v36[4] = a1;
  v36[5] = v38;
  sub_1000967F4(&qword_100917D18, &qword_100917CF0);
  swift_bridgeObjectRetain();
  id v39 = a1;
  swift_bridgeObjectRetain();
  uint64_t v40 = v62;
  uint64_t v41 = v64;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v35, v41);
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v30;
  *(void *)(v42 + 24) = v37;
  swift_bridgeObjectRetain();
  sub_100094134(&qword_100917C60);
  sub_1000967F4(&qword_100917D20, &qword_100917CF8);
  uint64_t v43 = v67;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v43);
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  uint64_t v44 = (void *)qword_100942060;
  id v83 = (id)qword_100942060;
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v46 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v77, 1, 1, v45);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4(&qword_100917D28, &qword_100917D00);
  sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  id v47 = v44;
  uint64_t v48 = v75;
  uint64_t v49 = v72;
  long long v50 = v81;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v46, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v50, v49);
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v82;
  *(void *)(v51 + 24) = v37;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = sub_100408FB0;
  *(void *)(v52 + 24) = v51;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090DD40);
  sub_1000967F4(&qword_100917D30, &qword_100917D08);
  uint64_t v53 = v74;
  uint64_t v54 = v80;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v54);
  sub_1000967F4(&qword_100917D38, &qword_100917D10);
  uint64_t v55 = v79;
  uint64_t v56 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v53, v55);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v73 + 8);
  v57(v70, v34);
  v57(v69, v34);
  return v56;
}

uint64_t sub_100407D1C(uint64_t a1, void *a2)
{
  unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v18 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v18) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    v20[0] = *v16;
    v20[1] = v17;
    swift_bridgeObjectRetain();
    sub_100403BF0(a2, v20, &v19);
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v19)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v18) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v18) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v18) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v18)
  {
LABEL_29:
    swift_release();
    return v21;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v18) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

id sub_100407F58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v13 = qword_10090A670;
  *(void *)&v7[qword_10090A670] = 0;
  v7[qword_10090A680] = 1;
  *(void *)&v7[qword_10090A688] = 0;
  unint64_t v14 = &v7[qword_10090A698];
  *(void *)&v7[qword_10090A698] = _swiftEmptyArrayStorage;
  *(void *)&v7[qword_10090A6A0] = 0;
  *(void *)&v7[qword_10090A690] = &_swiftEmptySetSingleton;
  swift_beginAccess();
  *unint64_t v14 = _swiftEmptyArrayStorage;
  int64_t v15 = v7;
  swift_bridgeObjectRelease();
  sub_100406CB4(a3, (uint64_t)v29);
  uint64_t v16 = &v15[qword_10090A668];
  long long v17 = *(_OWORD *)a3;
  long long v18 = *(_OWORD *)(a3 + 16);
  *((_WORD *)v16 + 16) = *(_WORD *)(a3 + 32);
  *(_OWORD *)uint64_t v16 = v17;
  *((_OWORD *)v16 + 1) = v18;
  *(void *)&v15[qword_10090A658] = a4;
  uint64_t v19 = &v15[qword_10090A660];
  *(void *)uint64_t v19 = a5;
  *((void *)v19 + 1) = a6;
  sub_100406CB4((uint64_t)v29, (uint64_t)v30);
  if (v33 == 1)
  {
    uint64_t v20 = v31;
    double v21 = v32;
    type metadata accessor for RDDebouncing.LoadFactor();
    swift_allocObject();
    id v22 = a4;
    swift_retain();
    sub_100406C74(a3, (void (*)(void, void, void, void, void))sub_1000E6BA4);
    *(void *)&v7[v13] = sub_1000E5478(v20, v21);
  }
  else
  {
    *(void *)&v7[v13] = 0;
    id v23 = a4;
    swift_retain();
  }
  swift_release();
  uint64_t v24 = &v15[qword_10090A678];
  *(void *)uint64_t v24 = a1;
  *((void *)v24 + 1) = a2;

  v28.receiver = v15;
  v28.super_class = ObjectType;
  return [super init];
}

void sub_100408174(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    sub_1000E4F40(&qword_10090B7C8, (unint64_t *)&unk_100917C20);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v4 = v22;
    uint64_t v5 = v23;
    unint64_t v6 = v24;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v18 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    uint64_t v14 = v5;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_31;
    }
    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v25;
    swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_31;
    }
LABEL_10:
    unsigned int v13 = [a2 isKindOfEntity:v12];

    if (v13) {
      goto LABEL_31;
    }
  }
  if (v6)
  {
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_9:
    id v12 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v18) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v14 + 2;
      if (v14 + 2 >= v18) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v19 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v14 + 3;
        if (v14 + 3 >= v18) {
          goto LABEL_31;
        }
        unint64_t v16 = *(void *)(v19 + 8 * v5);
        if (!v16)
        {
          uint64_t v5 = v14 + 4;
          if (v14 + 4 >= v18) {
            goto LABEL_31;
          }
          unint64_t v16 = *(void *)(v19 + 8 * v5);
          if (!v16)
          {
            uint64_t v5 = v14 + 5;
            if (v14 + 5 >= v18) {
              goto LABEL_31;
            }
            unint64_t v16 = *(void *)(v19 + 8 * v5);
            if (!v16)
            {
              uint64_t v17 = v14 + 6;
              while (v18 != v17)
              {
                unint64_t v16 = *(void *)(v19 + 8 * v17++);
                if (v16)
                {
                  uint64_t v5 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_31:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

void *sub_10040848C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = Notification.userInfo.getter();
  if (!v5)
  {
    long long v18 = 0u;
    long long v19 = 0u;
LABEL_10:
    sub_1000966BC((uint64_t)&v18, &qword_100908190);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0
      || !_CocoaArrayWrapper.endIndex.getter())
    {
      return &_swiftEmptySetSingleton;
    }
    sub_100332114((unint64_t)_swiftEmptyArrayStorage);
    return (void *)v15;
  }
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100307418((uint64_t)v17), (v8 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v17);
  if (!*((void *)&v19 + 1)) {
    goto LABEL_10;
  }
  sub_10009A1A0(&v18, v20);
  sub_10009A1B0((uint64_t)v20, (uint64_t)v17);
  sub_100094134(&qword_100917CD8);
  if (swift_dynamicCast())
  {
    uint64_t v9 = (void *)v18;
  }
  else
  {
    if (qword_1009074F0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_1009179D0);
    swift_bridgeObjectRetain_n();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unsigned int v13 = (uint8_t *)swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)unsigned int v13 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v18 = sub_1000C51B8(a2, a3, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to cast userInfo[%{public}s] to Set<NSManagedObjectID>", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    {
      sub_100332114((unint64_t)_swiftEmptyArrayStorage);
      uint64_t v9 = v16;
    }
    else
    {
      uint64_t v9 = &_swiftEmptySetSingleton;
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  return v9;
}

void sub_1004087A4(uint64_t a1)
{
  uint64_t v24 = a1;
  v28[6] = &_swiftEmptySetSingleton;
  long long v27 = xmmword_100776E60;
  v28[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28[1] = v1;
  v28[2] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28[3] = v2;
  unint64_t v3 = 0;
  v28[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28[5] = v4;
LABEL_3:
  if (v3 >= (unint64_t)v27) {
    goto LABEL_35;
  }
  uint64_t v5 = &v28[2 * v3];
  uint64_t v7 = *v5;
  unint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  unint64_t v8 = (unint64_t)sub_10040848C(v24, v7, v6);
  swift_bridgeObjectRelease();
  if ((v8 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    sub_1000E4F40(&qword_100917CD0, (unint64_t *)&qword_100914150);
    Set.Iterator.init(_cocoa:)();
    unint64_t v8 = v28[7];
    uint64_t v9 = (char *)v28[8];
    uint64_t v10 = v28[9];
    uint64_t v11 = v28[10];
    unint64_t v12 = v28[11];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v9 = (char *)(v8 + 56);
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(v8 + 56);
  }
  unint64_t v25 = v3 + 1;
  int64_t v16 = (unint64_t)(v10 + 64) >> 6;
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v17 = (v12 - 1) & v12;
      unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
      uint64_t v19 = v11;
      goto LABEL_30;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v21 >= v16) {
      goto LABEL_2;
    }
    unint64_t v22 = *(void *)&v9[8 * v21];
    uint64_t v19 = v11 + 1;
    if (!v22)
    {
      uint64_t v19 = v11 + 2;
      if (v11 + 2 >= v16) {
        goto LABEL_2;
      }
      unint64_t v22 = *(void *)&v9[8 * v19];
      if (!v22)
      {
        uint64_t v19 = v11 + 3;
        if (v11 + 3 >= v16) {
          goto LABEL_2;
        }
        unint64_t v22 = *(void *)&v9[8 * v19];
        if (!v22)
        {
          uint64_t v19 = v11 + 4;
          if (v11 + 4 >= v16) {
            goto LABEL_2;
          }
          unint64_t v22 = *(void *)&v9[8 * v19];
          if (!v22)
          {
            uint64_t v23 = v11 + 5;
            while (v16 != v23)
            {
              unint64_t v22 = *(void *)&v9[8 * v23++];
              if (v22)
              {
                uint64_t v19 = v23 - 1;
                goto LABEL_29;
              }
            }
LABEL_2:
            sub_1000C1AF8();
            ++v3;
            if (v25 == 3)
            {
              swift_arrayDestroy();
              return;
            }
            goto LABEL_3;
          }
        }
      }
    }
LABEL_29:
    uint64_t v17 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_30:
    id v20 = *(id *)(*(void *)(v8 + 48) + 8 * v18);
    if (!v20) {
      goto LABEL_2;
    }
    while (1)
    {
      sub_100320140(&v26, [v20 entity:v24]);

      uint64_t v11 = v19;
      unint64_t v12 = v17;
      if ((v8 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_13:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1000963CC(0, (unint64_t *)&qword_100914150);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v20 = v26;
        swift_unknownObjectRelease();
        uint64_t v19 = v11;
        uint64_t v17 = v12;
        if (v20) {
          continue;
        }
      }
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_100408B28()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100408B70()
{
  sub_1004027F4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100408B7C(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100408BAC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100408BE8()
{
  sub_1003FE5A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), (void (*)(uint64_t))sub_1003FF668);
}

uint64_t sub_100408C1C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = (void *)sub_100407D1C(a1, v3);
  }
  else
  {
    id v5 = [self subclassesOfREMCDObjectRepresentingRootCoreDataEntities];
    sub_100094134(&qword_100917C30);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        id v10 = [(id)swift_getObjCClassFromMetadata() entity];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v7 != v9);
      uint64_t v4 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v11 = sub_100127A78((unint64_t)v4);
  swift_bridgeObjectRelease();
  return v11;
}

void sub_100408D8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_100408C1C(a2, a3);
  v21[3] = &_swiftEmptySetSingleton;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (v8) {
    goto LABEL_6;
  }
LABEL_7:
  if (!__OFADD__(v10++, 1))
  {
    if (v10 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    if (v14)
    {
LABEL_17:
      unint64_t v8 = (v14 - 1) & v14;
      for (unint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; unint64_t i = v11 | (v10 << 6))
      {
        uint64_t v16 = *(void *)(a1 + 48) + 16 * i;
        Swift::UInt v17 = *(void *)(v16 + 8);
        id v18 = *(id *)v16;
        sub_100408174(v4, v18);
        char v20 = v19;

        if (v20)
        {
          sub_10032015C(v21, v18, v17);

          if (!v8) {
            goto LABEL_7;
          }
        }
        else
        {

          if (!v8) {
            goto LABEL_7;
          }
        }
LABEL_6:
        unint64_t v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
      }
    }
    int64_t v15 = v10 + 1;
    if (v10 + 1 >= v9) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v9) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v10 + 3;
        if (v10 + 3 < v9)
        {
          unint64_t v14 = *(void *)(v5 + 8 * v15);
          if (v14) {
            goto LABEL_16;
          }
          while (1)
          {
            int64_t v10 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_27;
            }
            if (v10 >= v9) {
              break;
            }
            unint64_t v14 = *(void *)(v5 + 8 * v10);
            ++v15;
            if (v14) {
              goto LABEL_17;
            }
          }
        }
LABEL_25:
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
LABEL_16:
    int64_t v10 = v15;
    goto LABEL_17;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_100408F54()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100408F9C(uint64_t a1)
{
  return sub_100403EF8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100408FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004042CC(a1, a2);
}

uint64_t sub_100408FB0(uint64_t a1, uint64_t a2)
{
  return sub_100404500(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100408FB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v2 + 16);
  uint64_t v6 = sub_100094134(&qword_100917C60);
  uint64_t result = v5(a1, *(void *)(a1 + *(int *)(v6 + 48)));
  *a2 = result;
  return result;
}

void sub_100409010()
{
  sub_1003FE5A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), (void (*)(uint64_t))sub_1003FEF20);
}

uint64_t sub_100409048()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100409090()
{
  sub_1003FE5A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), (void (*)(uint64_t))sub_1003FE7C8);
}

void *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount()
{
  return &type metadata for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount;
}

void *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.ChangedAccountInfo(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for RDStoreControllerNotificationCenter.ChangedAccountInfo(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for RDStoreControllerNotificationCenter.ChangedAccountInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  unint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for RDStoreControllerNotificationCenter.ChangedAccountInfo(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.ChangedAccountInfo()
{
  return &type metadata for RDStoreControllerNotificationCenter.ChangedAccountInfo;
}

void *initializeBufferWithCopyOfBuffer for RDStoreControllerNotificationCenter.EntityFilterOption(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDStoreControllerNotificationCenter.EntityFilterOption(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RDStoreControllerNotificationCenter.EntityFilterOption(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerNotificationCenter.EntityFilterOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_1004093F0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100409408(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerNotificationCenter.EntityFilterOption()
{
  return &type metadata for RDStoreControllerNotificationCenter.EntityFilterOption;
}

unint64_t sub_10040943C()
{
  unint64_t result = qword_100917D58;
  if (!qword_100917D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917D58);
  }
  return result;
}

uint64_t sub_1004094F8()
{
  return swift_initClassMetadata2();
}

unint64_t sub_100409530()
{
  return sub_100409CF8();
}

uint64_t sub_100409538()
{
  sub_100409530();

  return swift_getObjCClassFromMetadata();
}

uint64_t sub_100409560()
{
  return 1;
}

uint64_t sub_100409568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)((swift_isaMask & *v2) + 0x50);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = &v19[-v8];
  uint64_t v10 = *(void *)(v5 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = &v19[-v12];
  sub_1000E6E80(a1, (uint64_t)v19);
  sub_100094134(&qword_100908190);
  int v14 = swift_dynamicCast();
  int64_t v15 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (!v14)
  {
    v15(v9, 1, 1, v5);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_5;
  }
  v15(v9, 0, 1, v5);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v13, v9, v5);
  uint64_t v16 = sub_100409D38();
  if (v17 >> 60 == 15)
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v5);
LABEL_5:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  *(void *)(a2 + 24) = &type metadata for Data;
  *(void *)a2 = v16;
  *(void *)(a2 + 8) = v17;
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v5);
}

id sub_1004097FC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100409B3C(a1, a2, a3, (void (*)(void *__return_ptr, _OWORD *))sub_100409568);
}

uint64_t sub_100409814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)((swift_isaMask & *v2) + 0x50);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v15 - v8;
  sub_1000E6E80(a1, (uint64_t)v16);
  if (v17)
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v11 = v15[0];
      unint64_t v12 = v15[1];
      sub_100409A04((uint64_t)v9);
      uint64_t v13 = *(void *)(v5 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v5) != 1)
      {
        *(void *)(a2 + 24) = v5;
        int v14 = sub_1000C1FE8((uint64_t *)a2);
        (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(v14, v9, v5);
        return sub_100097F34(v11, v12);
      }
      sub_100097F34(v11, v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else
  {
    uint64_t result = sub_1000F5B8C((uint64_t)v16);
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_100409A04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_isaMask & *v1;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v4 = *(void *)(v3 + 80);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, 0, 1, v4);
}

id sub_100409B24(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100409B3C(a1, a2, a3, (void (*)(void *__return_ptr, _OWORD *))sub_100409814);
}

id sub_100409B3C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, _OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    id v7 = a1;
  }
  a4(v17, v16);

  sub_1000F5B8C((uint64_t)v16);
  uint64_t v8 = v18;
  if (v18)
  {
    id v9 = sub_1000C0DE0(v17, v18);
    uint64_t v10 = *(void *)(v8 - 8);
    __n128 v11 = __chkstk_darwin(v9);
    uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v10 + 16))(v13, v11);
    int v14 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
  }
  else
  {
    int v14 = 0;
  }

  return v14;
}

id sub_100409CBC()
{
  return RDApplicationShortcutAssembly.init()();
}

uint64_t type metadata accessor for RDDecodeFromJSONDataValueTransformer()
{
  return sub_1000E6FBC();
}

unint64_t sub_100409CF8()
{
  unint64_t result = qword_100917E00;
  if (!qword_100917E00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100917E00);
  }
  return result;
}

uint64_t sub_100409D38()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

id static REMCDListSection.insert(in:remObjectID:parentList:creationDate:displayName:canonicalName:minimumSupportedVersion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10040A1BC(a1, a2, a3, a4, a7, a8, a9);
}

uint64_t static REMCDListSection.cdEntityName.getter()
{
  sub_10040A564();
  id v0 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::Int __swiftcall REMCDListSection.parentEffectiveMinimumSupportedVersion()()
{
  id v1 = [v0 list];
  if (!v1) {
    return kREMSupportedVersionUnset;
  }
  unsigned int v2 = v1;
  id v3 = [v1 effectiveMinimumSupportedVersion];

  return (Swift::Int)v3;
}

uint64_t static REMCDListSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B6C70);
  swift_arrayDestroy();
  return v0;
}

id REMCDListSection.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDListSection();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDListSection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDListSection();
  return [super dealloc];
}

id sub_10040A1BC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMCDListSection();
  id v16 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a1];
  id v17 = [a2 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  [v16 setIdentifier:isa];

  id v19 = v16;
  id v20 = [a3 account];
  [v19 setAccount:v20];

  id v21 = [v19 createResolutionTokenMapIfNecessary];
  [v19 setList:a3];
  NSString v22 = String._bridgeToObjectiveC()();
  [v21 updateForKey:v22];

  id v23 = v19;
  Class v24 = Date._bridgeToObjectiveC()().super.isa;
  [v23 setCreationDate:v24];

  NSString v25 = String._bridgeToObjectiveC()();
  [v21 updateForKey:v25];

  id v26 = v23;
  if (a6) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v27 = 0;
  }
  [v23 setDisplayName:v27];

  NSString v28 = String._bridgeToObjectiveC()();
  [v21 updateForKey:v28];

  if (a6) {
    NSString v29 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v29 = 0;
  }
  [v23 setCanonicalName:v29];

  NSString v30 = String._bridgeToObjectiveC()();
  [v21 updateForKey:v30];

  [v23 setMinimumSupportedVersion:a7];
  NSString v31 = String._bridgeToObjectiveC()();
  [v21 updateForKey:v31];

  [v23 updateChangeCount];
  return v23;
}

unint64_t sub_10040A564()
{
  unint64_t result = qword_100912B30;
  if (!qword_100912B30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100912B30);
  }
  return result;
}

uint64_t type metadata accessor for REMCDListSection()
{
  return self;
}

uint64_t sub_10040A5C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917E30);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917E30);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10040A690()
{
  uint64_t v1 = [v0 list];
  if (!v1)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_100917E30);
    id v15 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t v18 = sub_1004B99A4();
      sub_1000C51B8(v18, v19, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      [v15 isConcealed];
      uint64_t v20 = Bool.yesno.getter();
      sub_1000C51B8(v20, v21, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v16, "📓 REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_42:

      return 0;
    }

    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v0 ckServerRecord];
  if (!v3)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100917E30);
    id v23 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v4, v24))
    {

      return 0;
    }
    NSString v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)NSString v25 = 136446210;
    uint64_t v26 = sub_1004B99A4();
    sub_1000C51B8(v26, v27, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v24, "📓 REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_41;
  }
  uint64_t v4 = v3;
  if ([v0 isInserted])
  {
    id v5 = [v4 creatorUserRecordID];
    if (!v5)
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_100917E30);
      id v7 = v0;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446210;
        uint64_t v11 = sub_1004B99A4();
        sub_1000C51B8(v11, v12, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v13 = "📓 REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}";
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_42;
      }

      return 0;
    }
  }
  else
  {
    id v5 = [v4 lastModifiedUserRecordID];
    if (!v5)
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_10008E2DC(v51, (uint64_t)qword_100917E30);
      id v52 = v0;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446210;
        uint64_t v53 = sub_1004B99A4();
        sub_1000C51B8(v53, v54, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v13 = "📓 REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}";
        goto LABEL_32;
      }

      goto LABEL_41;
    }
  }
  id v28 = [v5 recordName];

  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  id v32 = [v2 ckServerShare];
  if (v32)
  {
    uint64_t v33 = v32;
    id v34 = [v32 participants];
    sub_10040B4EC();
    unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    uint64_t v36 = sub_10040B52C(v35, v29, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = CKShareParticipant.participantID.getter();

LABEL_47:
      return v29;
    }
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_10008E2DC(v55, (uint64_t)qword_100917E30);
    id v56 = v0;
    swift_bridgeObjectRetain();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v29, v31, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 12) = 2082;
      uint64_t v60 = sub_1004B99A4();
      sub_1000C51B8(v60, v61, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "📓 REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_42;
    }

    swift_bridgeObjectRelease_n();
LABEL_41:

    goto LABEL_42;
  }
  if (qword_1009074F8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_10008E2DC(v37, (uint64_t)qword_100917E30);
  id v38 = v0;
  id v39 = v2;
  id v40 = v38;
  uint64_t v36 = v39;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136446466;
    uint64_t v43 = sub_1004B99A4();
    sub_1000C51B8(v43, v44, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2082;
    id v45 = [v36 remObjectID];
    if (v45)
    {
      uint64_t v46 = v45;
      id v47 = [v45 description];

      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;
    }
    else
    {
      unint64_t v50 = 0xE300000000000000;
      uint64_t v48 = 7104878;
    }
    sub_1000C51B8(v48, v50, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v41, "📓 REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_47;
  }

  return v29;
}

uint64_t sub_10040B248@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v8 = __chkstk_darwin(v7).n128_u64[0];
  uint64_t v10 = (char *)&v24 - v9;
  unsigned int v11 = [v2 isInserted:v8];
  id v12 = [v2 ckServerRecord];
  uint64_t v13 = v12;
  if (v11)
  {
    if (v12)
    {
      id v14 = [v12 creationDate];

      if (v14)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
      }
      else
      {
        uint64_t v21 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
      }
      uint64_t v22 = (uint64_t)v10;
      return sub_1000CAAB4(v22, a1);
    }
  }
  else if (v12)
  {
    id v16 = [v12 modificationDate];

    if (v16)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 0, 1, v17);
    }
    else
    {
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
    }
    uint64_t v22 = (uint64_t)v6;
    return sub_1000CAAB4(v22, a1);
  }
  uint64_t v18 = type metadata accessor for Date();
  unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);

  return v19(a1, 1, 1, v18);
}

unint64_t sub_10040B4EC()
{
  unint64_t result = qword_100912FF0;
  if (!qword_100912FF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100912FF0);
  }
  return result;
}

void *sub_10040B52C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v11 = [v8 userIdentity];
      id v12 = [v11 userRecordID];

      if (v12)
      {
        id v13 = [v12 recordName];

        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        if (v14 == a2 && v16 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v9;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_18;
        }
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10040B70C()
{
  qword_100942220 = (uint64_t)&off_1008B0A20;
}

void sub_10040B720()
{
  qword_100942228 = (uint64_t)&off_1008B0C30;
}

void sub_10040B734()
{
  qword_100942230 = (uint64_t)&off_1008B0E80;
}

void sub_10040B748(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  id v32 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v29[-v14];
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  unint64_t v19 = &v29[-v18];
  id v20 = [v2 mostRecentTargetTemplateIdentifier:v17];
  if (v20)
  {
    uint64_t v21 = v20;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, 1, 1, v4);
  }
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1001248EC((uint64_t)v19, (uint64_t)v10);
  uint64_t v33 = a1;
  sub_1001248EC(a1, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    if (v23(v22, 1, v4) == 1)
    {
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      return;
    }
  }
  else
  {
    sub_1001248EC((uint64_t)v10, (uint64_t)v15);
    if (v23(v22, 1, v4) != 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v22, v4);
      sub_100124954();
      int v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v31 = v2;
      uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v24(v7, v4);
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
      v24(v15, v4);
      uint64_t v2 = v31;
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      if (v30) {
        return;
      }
      goto LABEL_11;
    }
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v15, v4);
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
LABEL_11:
  NSString v25 = v32;
  sub_1001248EC(v33, (uint64_t)v32);
  if (v23((uint64_t)v25, 1, v4) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v25, v4);
  }
  [v2 setMostRecentTargetTemplateIdentifier:isa];

  id v27 = [v2 createResolutionTokenMapIfNecessary];
  NSString v28 = String._bridgeToObjectiveC()();
  [v27 updateForKey:v28];
}

uint64_t sub_10040BBB4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917E50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917E50);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall REMCDSmartList.willSave_Swift()()
{
  if (([v0 didCleanUpManualSortHintOnMarkingForDeletion] & 1) == 0)
  {
    [v0 setDidCleanUpManualSortHintOnMarkingForDeletion:1];
    sub_10040BCD0();
  }
}

void sub_10040BCD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  uint64_t v6 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(v1, "markedForDeletion", v4)) {
    return;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  id v10 = [v1 smartListType];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    if (v7 == v12 && v9 == v14)
    {
      swift_bridgeObjectRelease_n();
LABEL_16:
      id v26 = [v1 remObjectID];
      if (v26)
      {
        id v27 = v26;
        id v28 = [v26 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = UUID.uuidString.getter();
        unint64_t v31 = v30;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        id v32 = [v1 account];
        if (v32
          && (uint64_t v33 = v32,
              id v34 = [v32 remObjectID],
              v33,
              v34))
        {
          id v35 = [v1 storeControllerManagedObjectContext];
          if (v35)
          {
            uint64_t v36 = v35;
            id v37 = [v35 transactionAuthor];
            if (v37
              && (id v38 = v37,
                  static String._unconditionallyBridgeFromObjectiveC(_:)(),
                  v38,
                  v39._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
                  Swift::Bool v40 = String.hasPrefix(_:)(v39),
                  swift_bridgeObjectRelease(),
                  swift_bridgeObjectRelease(),
                  !v40))
            {
              if (qword_100907518 != -1) {
                swift_once();
              }
              uint64_t v81 = type metadata accessor for Logger();
              uint64_t v82 = sub_10008E2DC(v81, (uint64_t)qword_100917E50);
              swift_bridgeObjectRetain_n();
              v87[1] = v82;
              id v83 = Logger.logObject.getter();
              os_log_type_t v84 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v83, v84))
              {
                uint64_t v85 = (uint8_t *)swift_slowAlloc();
                uint64_t v90 = swift_slowAlloc();
                *(_DWORD *)uint64_t v85 = 136446210;
                swift_bridgeObjectRetain();
                uint64_t v92 = sub_1000C51B8(v29, (unint64_t)v31, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v83, v84, "cleanUpManualSortHintIfNeeded: CSL was deleted due to user-initiated changes, will delete its associated sort hint {listID: %{public}s}", v85, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              swift_bridgeObjectRetain();
              id v86 = v34;
              sub_1000D01B8(2uLL, v29, (uint64_t)v31, v34);

              swift_bridgeObjectRelease_n();
            }
            else
            {
              if (qword_100907518 != -1) {
                swift_once();
              }
              uint64_t v41 = type metadata accessor for Logger();
              sub_10008E2DC(v41, (uint64_t)qword_100917E50);
              swift_bridgeObjectRetain();
              uint64_t v42 = Logger.logObject.getter();
              os_log_type_t v43 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v42, v43))
              {
                unint64_t v44 = (uint8_t *)swift_slowAlloc();
                uint64_t v90 = swift_slowAlloc();
                *(_DWORD *)unint64_t v44 = 136446210;
                swift_bridgeObjectRetain();
                uint64_t v92 = sub_1000C51B8(v29, (unint64_t)v31, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v42, v43, "cleanUpManualSortHintIfNeeded: CSL was deleted due to non-user-initiated changes, cleanup is not needed {listID: %{public}s}", v44, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          if (qword_100907518 != -1) {
            swift_once();
          }
          uint64_t v45 = type metadata accessor for Logger();
          sub_10008E2DC(v45, (uint64_t)qword_100917E50);
          id v46 = v1;
          swift_bridgeObjectRetain();
          id v47 = v46;
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = swift_slowAlloc();
            uint64_t v92 = swift_slowAlloc();
            *(_DWORD *)uint64_t v50 = 136446466;
            id v51 = [v47 smartListType];
            uint64_t v88 = v29;
            id v89 = v31;
            if (v51)
            {
              id v52 = v51;
              uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v55 = v54;
            }
            else
            {
              uint64_t v53 = 0;
              uint64_t v55 = 0;
            }
            uint64_t v90 = v53;
            uint64_t v91 = v55;
            sub_100094134((uint64_t *)&unk_10090A4C0);
            uint64_t v74 = Optional.descriptionOrNil.getter();
            unint64_t v76 = v75;
            swift_bridgeObjectRelease();
            uint64_t v90 = sub_1000C51B8(v74, v76, &v92);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 12) = 2082;
            unint64_t v77 = (unint64_t)v89;
            swift_bridgeObjectRetain();
            uint64_t v90 = sub_1000C51B8(v88, v77, &v92);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list account.remObjectID {type: %{public}s, smartListUUIDString: %{public}s}", (uint8_t *)v50, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        return;
      }
      if (qword_100907518 != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      sub_10008E2DC(v56, (uint64_t)qword_100917E50);
      id v89 = v1;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v57))
      {
        os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v92 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v58 = 136446210;
        id v59 = [v89 smartListType];
        if (v59)
        {
          uint64_t v60 = v59;
          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v63 = v62;
        }
        else
        {
          uint64_t v61 = 0;
          uint64_t v63 = 0;
        }
        uint64_t v90 = v61;
        uint64_t v91 = v63;
        sub_100094134((uint64_t *)&unk_10090A4C0);
        uint64_t v78 = Optional.descriptionOrNil.getter();
        unint64_t v80 = v79;
        swift_bridgeObjectRelease();
        uint64_t v90 = sub_1000C51B8(v78, v80, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v57, "cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list remObjectID {type: %{public}s}", v58, 0xCu);
LABEL_52:
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_44;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_100907518 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100917E50);
  id v89 = v1;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v92 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446466;
    id v21 = [v89 smartListType];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v90 = v23;
    uint64_t v91 = v25;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v64 = Optional.descriptionOrNil.getter();
    unint64_t v66 = v65;
    swift_bridgeObjectRelease();
    uint64_t v90 = sub_1000C51B8(v64, v66, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    id v67 = [v89 remObjectID];
    if (v67)
    {
      uint64_t v68 = v67;
      id v69 = [v67 description];

      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v72 = v71;
    }
    else
    {
      unint64_t v72 = 0xE300000000000000;
      uint64_t v70 = 7104878;
    }
    uint64_t v90 = sub_1000C51B8(v70, v72, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "cleanUpManualSortHintIfNeeded: Unexpectedly having a non-custom smart-list getting markedForDeletion {type: %{public}s, remObjectID: %{public}s}", (uint8_t *)v20, 0x16u);
    goto LABEL_52;
  }

LABEL_44:
  id v73 = v89;
}

Swift::Void __swiftcall REMCDSmartList.didSave_Swift()()
{
  [v0 setDidCleanUpManualSortHintOnMarkingForDeletion:0];
}

uint64_t sub_10040CB68(uint64_t a1)
{
  uint64_t result = sub_10040D338(&qword_100917EA0, (void (*)(uint64_t))&type metadata accessor for REMGroceryDataView.SecondaryGroceryLocaleInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10040CBC0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917E68);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917E68);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10040CC88(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v29[-v7];
  __chkstk_darwin(v9);
  uint64_t v33 = &v29[-v10];
  if (qword_100907B10 != -1) {
    swift_once();
  }
  uint64_t v11 = swift_retain();
  id v12 = sub_10034A86C(v11);
  swift_release();
  if (v12)
  {
    id v13 = [v12 secondaryGroceryLocalesInfoAsData];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v32 = a1;
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      type metadata accessor for RDSecondaryGroceryLocalesInfo();
      sub_10040D338((unint64_t *)&unk_100920900, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
      static REMJSONRepresentable.fromJSONData(_:)();
      sub_100097F34(v15, v17);
      if (v1)
      {
      }
      else
      {
        uint64_t v19 = *(void *)(v35 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v20 = v33;
        sub_10040D150(v19, v33);
        if (qword_100907520 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_10008E2DC(v21, (uint64_t)qword_100917E68);
        sub_10040D380((uint64_t)v20, (uint64_t)v8);
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        int v24 = v23;
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v25 = swift_slowAlloc();
          int v30 = v24;
          uint64_t v26 = v25;
          uint64_t v31 = swift_slowAlloc();
          uint64_t v35 = v31;
          *(_DWORD *)uint64_t v26 = 136446466;
          sub_10040D380((uint64_t)v8, (uint64_t)v5);
          uint64_t v27 = String.init<A>(describing:)();
          uint64_t v34 = sub_1000C51B8(v27, v28, &v35);
          uint64_t v20 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10040D3E8((uint64_t)v8);
          *(_WORD *)(v26 + 12) = 1024;
          swift_bridgeObjectRelease();
          LODWORD(v34) = v19 == 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v30, "REMGroceryDataView.SecondaryGroceryLocaleInvocation: %{public}s, isAutomatic: %{BOOL}d", (uint8_t *)v26, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_10040D3E8((uint64_t)v8);

          swift_bridgeObjectRelease();
        }
        sub_10040D380((uint64_t)v20, (uint64_t)v5);
        swift_bridgeObjectRelease();
        REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result.init(locale:isAutomatic:)();

        sub_10040D3E8((uint64_t)v20);
      }
    }
    else
    {
      uint64_t v18 = type metadata accessor for Locale();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 1, 1, v18);
      REMGroceryDataView.SecondaryGroceryLocaleInvocation.Result.init(locale:isAutomatic:)();
    }
  }
  else
  {
    [self noPrimaryActiveCloudKitAccountError];
    swift_willThrow();
  }
}

uint64_t sub_10040D150@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((REMGroceryDataView.SecondaryGroceryLocaleInvocation.Parameters.modelBaseLocaleConversion.getter() & 1) == 0) {
    return sub_10040D448(a1, a2);
  }
  sub_10040D448(a1, v7);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10040D3E8((uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  Locale.identifier.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  type metadata accessor for REMGroceryDummyModel();
  static REMGroceryDummyModel.modelBaseLocale(for:)();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  Locale.init(identifier:)();
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
}

uint64_t sub_10040D338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10040D380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10040D3E8(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090FDF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10040D448@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v65 = type metadata accessor for Locale();
  unint64_t v4 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  unint64_t v66 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)v57 - v16;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v57 - v20;
  if (!a1)
  {
    unint64_t v66 = v19;
    sub_10040DF84();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v37 = [ObjCClassFromMetadata daemonUserDefaults];
    id v38 = [v37 automaticSecondaryGroceryLocales];

    if (!v38) {
      goto LABEL_22;
    }
    Swift::String v39 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!v39[2])
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    Swift::Bool v40 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v39[5];
    uint64_t v63 = (void (*)(char *, uint64_t, uint64_t))v39[4];
    uint64_t v64 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v41 = [ObjCClassFromMetadata daemonUserDefaults];
    id v42 = [v41 automaticSecondaryGroceryLocalesLastModifiedDate];

    unint64_t v59 = v4;
    if (v42)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      os_log_type_t v43 = v66;
      unint64_t v44 = (void (*)(char *, char *, uint64_t))*((void *)v66 + 4);
      v44(v11, v17, v12);
      (*((void (**)(char *, void, uint64_t, uint64_t))v43 + 7))(v11, 0, 1, v12);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v43 + 6))(v11, 1, v12) != 1)
      {
        v44(v21, v11, v12);
        static Date.now.getter();
        Date.addingTimeInterval(_:)();
        char v45 = static Date.< infix(_:_:)();
        id v46 = (void (*)(char *, uint64_t))*((void *)v66 + 1);
        v46(v14, v12);
        v46(v17, v12);
        if (v45)
        {
          Locale.init(identifier:)();
          v46(v21, v12);
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(a2, 0, 1, v65);
        }
        v46(v21, v12);
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v66 + 7))(v11, 1, 1, v12);
    }
    swift_bridgeObjectRelease();
    sub_1000EACF4((uint64_t)v11);
LABEL_21:
    unint64_t v4 = v59;
LABEL_22:
    id v48 = [self sharedConfiguration];
    os_log_type_t v49 = sub_10040F80C(v48);

    if (v49[2])
    {
      uint64_t v50 = v49[4];
      uint64_t v51 = v49[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v52 = [ObjCClassFromMetadata daemonUserDefaults];
      static Date.now.getter();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, uint64_t))v66 + 1))(v17, v12);
      [v52 setAutomaticSecondaryGroceryLocalesLastModifiedDate:isa];

      id v54 = [ObjCClassFromMetadata daemonUserDefaults];
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v55 = swift_allocObject();
      *(_OWORD *)(v55 + 16) = xmmword_100776E40;
      *(void *)(v55 + 32) = v50;
      *(void *)(v55 + 40) = v51;
      swift_bridgeObjectRetain();
      Class v56 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v54 setAutomaticSecondaryGroceryLocales:v56];

      Locale.init(identifier:)();
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(a2, 0, 1, v65);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a2, 1, 1, v65);
    }
  }
  uint64_t v22 = *(void *)(a1 + 16);
  v57[1] = a1;
  os_log_type_t v58 = a2;
  if (v22)
  {
    os_log_type_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    unint64_t v62 = v4 + 16;
    uint64_t v63 = v23;
    uint64_t v24 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v25 = *(void *)(v4 + 72);
    unint64_t v26 = v4 + 56;
    unint64_t v27 = v4 + 16;
    unint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v60 = v25;
    uint64_t v61 = (void (**)(char *, char *, uint64_t))(v27 + 16);
    uint64_t v29 = (void (**)(char *, uint64_t))(v27 - 8);
    swift_bridgeObjectRetain();
    uint64_t v64 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v26;
    unint64_t v59 = v26 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v30 = v65;
    while (1)
    {
      v63(v8, v24, v30);
      uint64_t v31 = *v64;
      (*v64)(v8, 0, 1, v30);
      if ((*v28)(v8, 1, v30) == 1) {
        break;
      }
      uint64_t v32 = *v61;
      (*v61)(v66, v8, v30);
      Locale.identifier.getter();
      type metadata accessor for REMGroceryDummyModel();
      char v33 = static REMGroceryDummyModel.isSupported(localeIdentifier:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = v65;
      if (v33)
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = v58;
        v32(v58, v66, v30);
        return v31(v34, 0, 1, v30);
      }
      (*v29)(v66, v65);
      v24 += v60;
      if (!--v22) {
        goto LABEL_15;
      }
    }
    id v47 = v58;
  }
  else
  {
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    unint64_t v59 = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = v65;
LABEL_15:
    v31(v8, 1, 1, v30);
    id v47 = v58;
  }
  swift_bridgeObjectRelease();
  return v31(v47, 1, 1, v30);
}

uint64_t sub_10040DC6C(uint64_t a1)
{
  if (!a1) {
    return 0x6974616D6F747561;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  type metadata accessor for Locale();
  v1._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000014;
}

uint64_t sub_10040DD2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sub_10034F58C(v2, v3);
  }
}

uint64_t sub_10040DD58()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10040DE08()
{
  return type metadata accessor for RDSecondaryGroceryLocalesInfo();
}

uint64_t type metadata accessor for RDSecondaryGroceryLocalesInfo()
{
  uint64_t result = qword_100917ED0;
  if (!qword_100917ED0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10040DE5C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSecondaryGroceryLocales()
{
  return &type metadata for RDSecondaryGroceryLocales;
}

uint64_t sub_10040DF04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  if (!v4) {
    return !v5;
  }
  if (!v5) {
    return 0;
  }

  return sub_10034F58C(v4, v5);
}

unint64_t sub_10040DF84()
{
  unint64_t result = qword_100908178;
  if (!qword_100908178)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100908178);
  }
  return result;
}

Swift::Int sub_10040DFC4(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_1001F53CC(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10040E030(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10040E030(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_164;
    }
    if (v3) {
      return sub_10040E7F8(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_172;
  }
  Swift::Int v109 = result;
  v106 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_130:
      uint64_t v98 = v11;
      v108 = v8;
      if (v12 >= 2)
      {
        uint64_t v99 = *v106;
        do
        {
          unint64_t v100 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_159;
          }
          if (!v99) {
            goto LABEL_171;
          }
          v101 = v98;
          uint64_t v102 = *(void *)&v98[16 * v100 + 32];
          uint64_t v103 = *(void *)&v98[16 * v12 + 24];
          sub_10040E8F8((double *)(v99 + 24 * v102), (double *)(v99 + 24 * *(void *)&v98[16 * v12 + 16]), v99 + 24 * v103, __dst);
          if (v1) {
            break;
          }
          if (v103 < v102) {
            goto LABEL_160;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v101 = sub_1001F433C((uint64_t)v101);
          }
          if (v100 >= *((void *)v101 + 2)) {
            goto LABEL_161;
          }
          v104 = &v101[16 * v100 + 32];
          *(void *)v104 = v102;
          *((void *)v104 + 1) = v103;
          unint64_t v105 = *((void *)v101 + 2);
          if (v12 > v105) {
            goto LABEL_162;
          }
          memmove(&v101[16 * v12 + 16], &v101[16 * v12 + 32], 16 * (v105 - v12));
          uint64_t v98 = v101;
          *((void *)v101 + 2) = v105 - 1;
          unint64_t v12 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      v108[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100094134(&qword_10090F650);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    v108 = (void *)v7;
    __dst = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v107 = *a1 + 16;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v110 = v3;
  uint64_t v111 = *a1;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_27;
    }
    uint64_t v14 = v10 + 24 * v9;
    double v15 = *(double *)(v14 + 16);
    uint64_t v16 = v10 + 24 * v13;
    double v17 = *(double *)(v16 + 16);
    if (v17 >= v15)
    {
      if (v15 != v17
        || (*(void *)v16 == *(void *)v14 ? (BOOL v20 = *(void *)(v16 + 8) == *(void *)(v14 + 8)) : (BOOL v20 = 0), v20))
      {
        Swift::Int v18 = v13 + 2;
        if (v13 + 2 >= v3) {
          goto LABEL_55;
        }
        int v19 = 0;
      }
      else
      {
        int v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        int v19 = v21;
        Swift::Int v18 = v13 + 2;
        if (v13 + 2 >= v3)
        {
          Swift::Int v9 = v13 + 2;
          if (v21) {
            goto LABEL_47;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      Swift::Int v18 = v13 + 2;
      if (v13 + 2 >= v3)
      {
LABEL_48:
        if (v13 < v18)
        {
          uint64_t v27 = 24 * v18;
          uint64_t v28 = 24 * v13;
          Swift::Int v29 = v18;
          Swift::Int v30 = v13;
          do
          {
            if (v30 != --v29)
            {
              if (!v10) {
                goto LABEL_170;
              }
              uint64_t v31 = v10 + v28;
              uint64_t v32 = v10 + v27;
              uint64_t v33 = *(void *)(v10 + v28);
              uint64_t v34 = *(void *)(v10 + v28 + 8);
              uint64_t v35 = *(void *)(v10 + v28 + 16);
              uint64_t v36 = *(void *)(v10 + v27 - 8);
              *(_OWORD *)uint64_t v31 = *(_OWORD *)(v10 + v27 - 24);
              *(void *)(v31 + 16) = v36;
              *(void *)(v32 - 24) = v33;
              *(void *)(v32 - 16) = v34;
              *(void *)(v32 - 8) = v35;
            }
            ++v30;
            v27 -= 24;
            v28 += 24;
          }
          while (v30 < v29);
        }
LABEL_55:
        Swift::Int v9 = v18;
        if (v18 < v3) {
          break;
        }
        goto LABEL_79;
      }
      int v19 = 1;
    }
    uint64_t v22 = (double *)(v107 + 24 * v18);
    Swift::Int v23 = v18;
    do
    {
      Swift::Int v18 = v23;
      uint64_t v24 = v10 + 24 * v9;
      double v25 = *(double *)(v24 + 16);
      if (v25 < *v22)
      {
        if ((v19 & 1) == 0)
        {
          Swift::Int v9 = v18;
          Swift::Int v3 = v110;
          if (v18 < v110) {
            goto LABEL_56;
          }
          goto LABEL_79;
        }
      }
      else if (*v22 != v25 {
             || (*(void *)v24 == *((void *)v22 - 2)
      }
               ? (BOOL v26 = *(void *)(v24 + 8) == *((void *)v22 - 1))
               : (BOOL v26 = 0),
                 v26))
      {
        if (v19)
        {
          Swift::Int v3 = v110;
          if (v18 < v13) {
            goto LABEL_165;
          }
          goto LABEL_48;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_46;
      }
      Swift::Int v23 = v18 + 1;
      v22 += 3;
      Swift::Int v9 = v18;
    }
    while (v18 + 1 < v110);
    ++v18;
LABEL_46:
    Swift::Int v3 = v110;
    Swift::Int v9 = v18;
    if (v19)
    {
LABEL_47:
      if (v18 < v13) {
        goto LABEL_165;
      }
      goto LABEL_48;
    }
LABEL_27:
    if (v9 < v3) {
      break;
    }
LABEL_79:
    if (v9 < v13) {
      goto LABEL_158;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001F3D80(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v48 = *((void *)v11 + 2);
    unint64_t v47 = *((void *)v11 + 3);
    unint64_t v12 = v48 + 1;
    if (v48 >= v47 >> 1) {
      uint64_t v11 = sub_1001F3D80((char *)(v47 > 1), v48 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    os_log_type_t v49 = v11 + 32;
    uint64_t v50 = &v11[16 * v48 + 32];
    *(void *)uint64_t v50 = v13;
    *((void *)v50 + 1) = v9;
    if (v48)
    {
      uint64_t v10 = v111;
      while (1)
      {
        unint64_t v51 = v12 - 1;
        if (v12 >= 4)
        {
          Class v56 = &v49[16 * v12];
          uint64_t v57 = *((void *)v56 - 8);
          uint64_t v58 = *((void *)v56 - 7);
          BOOL v62 = __OFSUB__(v58, v57);
          uint64_t v59 = v58 - v57;
          if (v62) {
            goto LABEL_147;
          }
          uint64_t v61 = *((void *)v56 - 6);
          uint64_t v60 = *((void *)v56 - 5);
          BOOL v62 = __OFSUB__(v60, v61);
          uint64_t v54 = v60 - v61;
          char v55 = v62;
          if (v62) {
            goto LABEL_148;
          }
          unint64_t v63 = v12 - 2;
          uint64_t v64 = &v49[16 * v12 - 32];
          uint64_t v66 = *(void *)v64;
          uint64_t v65 = *((void *)v64 + 1);
          BOOL v62 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          if (v62) {
            goto LABEL_150;
          }
          BOOL v62 = __OFADD__(v54, v67);
          uint64_t v68 = v54 + v67;
          if (v62) {
            goto LABEL_153;
          }
          if (v68 >= v59)
          {
            id v86 = &v49[16 * v51];
            uint64_t v88 = *(void *)v86;
            uint64_t v87 = *((void *)v86 + 1);
            BOOL v62 = __OFSUB__(v87, v88);
            uint64_t v89 = v87 - v88;
            if (v62) {
              goto LABEL_157;
            }
            BOOL v79 = v54 < v89;
            goto LABEL_117;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v80 = *((void *)v11 + 4);
            uint64_t v81 = *((void *)v11 + 5);
            BOOL v62 = __OFSUB__(v81, v80);
            uint64_t v73 = v81 - v80;
            char v74 = v62;
            goto LABEL_111;
          }
          uint64_t v53 = *((void *)v11 + 4);
          uint64_t v52 = *((void *)v11 + 5);
          BOOL v62 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          char v55 = v62;
        }
        if (v55) {
          goto LABEL_149;
        }
        unint64_t v63 = v12 - 2;
        id v69 = &v49[16 * v12 - 32];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v72 = __OFSUB__(v70, v71);
        uint64_t v73 = v70 - v71;
        char v74 = v72;
        if (v72) {
          goto LABEL_152;
        }
        unint64_t v75 = &v49[16 * v51];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v62 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v62) {
          goto LABEL_155;
        }
        if (__OFADD__(v73, v78)) {
          goto LABEL_156;
        }
        if (v73 + v78 >= v54)
        {
          BOOL v79 = v54 < v78;
LABEL_117:
          if (v79) {
            unint64_t v51 = v63;
          }
          goto LABEL_119;
        }
LABEL_111:
        if (v74) {
          goto LABEL_151;
        }
        uint64_t v82 = &v49[16 * v51];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v62 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v62) {
          goto LABEL_154;
        }
        if (v85 < v73) {
          goto LABEL_15;
        }
LABEL_119:
        unint64_t v90 = v51 - 1;
        if (v51 - 1 >= v12)
        {
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
          goto LABEL_167;
        }
        if (!v10) {
          goto LABEL_169;
        }
        uint64_t v91 = v11;
        uint64_t v92 = v10;
        uint64_t v93 = &v49[16 * v90];
        uint64_t v94 = *(void *)v93;
        uint64_t v95 = &v49[16 * v51];
        uint64_t v96 = *((void *)v95 + 1);
        sub_10040E8F8((double *)(v92 + 24 * *(void *)v93), (double *)(v92 + 24 * *(void *)v95), v92 + 24 * v96, __dst);
        if (v1) {
          goto LABEL_127;
        }
        if (v96 < v94) {
          goto LABEL_144;
        }
        if (v51 > *((void *)v91 + 2)) {
          goto LABEL_145;
        }
        *(void *)uint64_t v93 = v94;
        *(void *)&v49[16 * v90 + 8] = v96;
        unint64_t v97 = *((void *)v91 + 2);
        if (v51 >= v97) {
          goto LABEL_146;
        }
        uint64_t v11 = v91;
        unint64_t v12 = v97 - 1;
        memmove(&v49[16 * v51], v95 + 16, 16 * (v97 - 1 - v51));
        *((void *)v91 + 2) = v97 - 1;
        BOOL v79 = v97 > 2;
        uint64_t v10 = v111;
        if (!v79) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v111;
LABEL_15:
    Swift::Int v3 = v110;
    if (v9 >= v110)
    {
      uint64_t v8 = v108;
      goto LABEL_130;
    }
  }
LABEL_56:
  if (__OFSUB__(v9, v13)) {
    goto LABEL_163;
  }
  if (v9 - v13 >= v109) {
    goto LABEL_79;
  }
  if (__OFADD__(v13, v109)) {
    goto LABEL_166;
  }
  if (v13 + v109 >= v3) {
    Swift::Int v37 = v3;
  }
  else {
    Swift::Int v37 = v13 + v109;
  }
  if (v37 >= v13)
  {
    if (v9 != v37)
    {
      uint64_t v38 = v10 + 24 * v9;
      do
      {
        uint64_t v39 = v10 + 24 * v9;
        uint64_t v40 = *(void *)v39;
        uint64_t v41 = *(void *)(v39 + 8);
        double v42 = *(double *)(v39 + 16);
        Swift::Int v43 = v13;
        uint64_t v44 = v38;
        do
        {
          double v45 = *(double *)(v44 - 8);
          if (v45 >= v42)
          {
            if (v42 != v45) {
              break;
            }
            BOOL v46 = *(void *)(v44 - 24) == v40 && *(void *)(v44 - 16) == v41;
            if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              break;
            }
          }
          if (!v10) {
            goto LABEL_168;
          }
          uint64_t v40 = *(void *)v44;
          uint64_t v41 = *(void *)(v44 + 8);
          double v42 = *(double *)(v44 + 16);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)(v44 - 24);
          *(void *)(v44 + 16) = *(void *)(v44 - 8);
          *(void *)(v44 - 16) = v41;
          *(double *)(v44 - 8) = v42;
          *(void *)(v44 - 24) = v40;
          v44 -= 24;
          ++v43;
        }
        while (v9 != v43);
        ++v9;
        v38 += 24;
      }
      while (v9 != v37);
      Swift::Int v9 = v37;
    }
    goto LABEL_79;
  }
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10040E7F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 24 * a3;
LABEL_5:
    Swift::Int v9 = (double *)(v7 + 24 * v4);
    double v10 = *v9;
    uint64_t v11 = *((void *)v9 + 1);
    double v12 = v9[2];
    uint64_t v13 = v6;
    uint64_t v14 = v8;
    while (1)
    {
      Swift::Int result = *(void *)(v14 - 24);
      double v15 = *(double *)(v14 - 8);
      if (v15 >= v12)
      {
        if (v12 != v15
          || (result == *(void *)&v10 ? (BOOL v16 = *(void *)(v14 - 16) == v11) : (BOOL v16 = 0),
              v16 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0)))
        {
LABEL_4:
          ++v4;
          v8 += 24;
          if (v4 == a2) {
            return result;
          }
          goto LABEL_5;
        }
      }
      if (!v7) {
        break;
      }
      double v10 = *(double *)v14;
      uint64_t v11 = *(void *)(v14 + 8);
      double v12 = *(double *)(v14 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v14 - 24);
      *(void *)(v14 + 16) = *(void *)(v14 - 8);
      *(void *)(v14 - 16) = v11;
      *(double *)(v14 - 8) = v12;
      *(double *)(v14 - 24) = v10;
      v14 -= 24;
      if (v4 == ++v13) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10040E8F8(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v33 = __src;
  uint64_t v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      int v19 = &v4[3 * v11];
      uint64_t v31 = v19;
      uint64_t v33 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v20 = a3 - 24;
        int v21 = v6;
        while (1)
        {
          uint64_t v22 = (double *)(v20 + 24);
          double v23 = *(v19 - 1);
          uint64_t v25 = *((void *)v21 - 3);
          v21 -= 3;
          uint64_t v24 = v25;
          double v26 = v21[2];
          if (v26 < v23
            || v23 == v26
            && (v24 == *((void *)v19 - 3) ? (BOOL v28 = *((void *)v21 + 1) == *((void *)v19 - 2)) : (BOOL v28 = 0),
                !v28 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (v22 != v6 || v20 >= (unint64_t)v6)
            {
              long long v27 = *(_OWORD *)v21;
              *(double *)(v20 + 16) = v21[2];
              *(_OWORD *)unint64_t v20 = v27;
            }
            uint64_t v33 = v21;
            if (v21 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v31 = v19 - 3;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              long long v29 = *(_OWORD *)(v19 - 3);
              *(double *)(v20 + 16) = *(v19 - 1);
              *(_OWORD *)unint64_t v20 = v29;
            }
            int v21 = v6;
            v19 -= 3;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          v20 -= 24;
          uint64_t v6 = v21;
          if (v19 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    double v12 = &v4[3 * v9];
    uint64_t v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        double v13 = v6[2];
        double v14 = v4[2];
        if (v14 < v13
          || v13 == v14
          && (*(void *)v4 == *(void *)v6 ? (BOOL v17 = *((void *)v4 + 1) == *((void *)v6 + 1)) : (BOOL v17 = 0),
              !v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          double v15 = v6 + 3;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            long long v16 = *(_OWORD *)v6;
            v7[2] = v6[2];
            *(_OWORD *)uint64_t v7 = v16;
          }
        }
        else
        {
          if (v7 != v4)
          {
            long long v18 = *(_OWORD *)v4;
            v7[2] = v4[2];
            *(_OWORD *)uint64_t v7 = v18;
          }
          v4 += 3;
          uint64_t v32 = v4;
          double v15 = v6;
        }
        v7 += 3;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v33 = v7;
    }
LABEL_50:
    sub_1001F3E7C((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10040EC08(void *a1)
{
  uint64_t v2 = type metadata accessor for EntityPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v77 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v77 - v10;
  __chkstk_darwin(v12);
  double v14 = (char *)&v77 - v13;
  id v15 = a1;
  unint64_t v97 = sub_1002ED110((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = sub_1000C1B00();
  uint64_t v84 = v11;
  uint64_t v83 = v16;
  id v17 = [v15 miniumumAutomaticLanguageConfidenceScoreAllowed];
  [v17 doubleValue];
  double v19 = v18;

  uint64_t v20 = *(void *)(v83 + 16);
  if (v20)
  {
    uint64_t v82 = v8;
    uint64_t v80 = v5;
    uint64_t v89 = v2;
    uint64_t v79 = 0;
    id v81 = v15;
    uint64_t v21 = 0;
    uint64_t v87 = 0;
    uint64_t v22 = v83 + 32;
    double v23 = (void (**)(char *, uint64_t))(v3 + 8);
    unint64_t v24 = 0xE000000000000000;
    id v86 = "secondaryGroceryLocales";
    unint64_t v85 = 0x80000001007D44C0;
    double v25 = 0.0;
    unint64_t v90 = 0xE000000000000000;
    double v26 = v84;
    while (1)
    {
      uint64_t v88 = v21;
      sub_100096838(v22, (uint64_t)v95);
      sub_1000C0DE0(v95, v96);
      dispatch thunk of ExtendedTripleProtocol.predicate.getter();
      uint64_t v28 = EntityPredicate.rawValue.getter();
      uint64_t v30 = v29;
      uint64_t v31 = *v23;
      (*v23)(v14, v89);
      if (v28 == 859001680 && v30 == 0xE400000000000000) {
        break;
      }
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      sub_1000C0DE0(v95, v96);
      dispatch thunk of ExtendedTripleProtocol.predicate.getter();
      uint64_t v33 = EntityPredicate.rawValue.getter();
      uint64_t v35 = v34;
      v31(v26, v89);
      if (v33 == 0xD000000000000013 && v35 == v85)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        sub_1000C0DE0(v95, v96);
        uint64_t v21 = dispatch thunk of ExtendedTripleProtocol.object.getter();
        unint64_t v24 = v37;
        goto LABEL_5;
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v36) {
        goto LABEL_14;
      }
      sub_1000C0DE0(v95, v96);
      uint64_t v38 = v82;
      dispatch thunk of ExtendedTripleProtocol.predicate.getter();
      uint64_t v39 = EntityPredicate.rawValue.getter();
      uint64_t v41 = v40;
      v31(v38, v89);
      if (v39 == 0x69666E6F635F6D6ELL && v41 == 0xED000065636E6564)
      {
        swift_bridgeObjectRelease();
LABEL_19:
        sub_1000C0DE0(v95, v96);
        uint64_t v43 = dispatch thunk of ExtendedTripleProtocol.object.getter();
        uint64_t v45 = v44;
        double v92 = 0.0;
        __chkstk_darwin(v43);
        *(&v77 - 2) = (uint64_t)&v92;
        double v26 = v84;
        if ((v45 & 0x1000000000000000) == 0 && v45 & 0x2000000000000000 | v46 & 0x1000000000000000)
        {
          if ((v45 & 0x2000000000000000) != 0)
          {
            uint64_t v93 = v46;
            uint64_t v94 = v45 & 0xFFFFFFFFFFFFFFLL;
            BOOL v52 = (v46 > 0x20u || ((0x100003E01uLL >> v46) & 1) == 0)
               && (unint64_t v51 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
               && *v51 == 0;
            BOOL v91 = v52;
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((v46 & 0x1000000000000000) != 0) {
              unint64_t v47 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              unint64_t v47 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            }
            unint64_t v48 = *v47;
            BOOL v50 = (v48 >= 0x21 || ((0x100003E01uLL >> v48) & 1) == 0)
               && (os_log_type_t v49 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
               && *v49 == 0;
            BOOL v91 = v50;
LABEL_37:
            swift_bridgeObjectRelease();
          }
          if (v91) {
            double v25 = v92;
          }
          else {
            double v25 = 0.0;
          }
LABEL_43:
          uint64_t v21 = v88;
          goto LABEL_5;
        }
        uint64_t v68 = v79;
        _StringGuts._slowWithCString<A>(_:)();
        uint64_t v79 = v68;
        goto LABEL_37;
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_19;
      }
      sub_1000C0DE0(v95, v96);
      uint64_t v53 = v80;
      dispatch thunk of ExtendedTripleProtocol.predicate.getter();
      uint64_t v54 = EntityPredicate.rawValue.getter();
      uint64_t v56 = v55;
      v31(v53, v89);
      double v26 = v84;
      if (v54 == 0x6372756F735F6D6ELL && v56 == 0xED00006570795465)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0) {
          goto LABEL_43;
        }
      }
      sub_1000C0DE0(v95, v96);
      uint64_t v58 = dispatch thunk of ExtendedTripleProtocol.object.getter();
      char v60 = sub_1000C0E24(v58, v59);
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v61 = HIBYTE(v24) & 0xF;
      uint64_t v21 = v88;
      if ((v24 & 0x2000000000000000) == 0) {
        uint64_t v61 = v88 & 0xFFFFFFFFFFFFLL;
      }
      if (v61)
      {
        uint64_t v93 = v87;
        uint64_t v94 = v90;
        swift_bridgeObjectRetain();
        v62._countAndFlagsBits = 95;
        v62._object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        swift_bridgeObjectRetain();
        v63._countAndFlagsBits = v21;
        v63._object = (void *)v24;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        uint64_t v64 = v93;
        uint64_t v65 = v94;
        if (v19 <= v25) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v65 = v90;
        swift_bridgeObjectRetain();
        uint64_t v64 = v87;
        if (v19 <= v25)
        {
LABEL_52:
          unint64_t v66 = v97;
          uint64_t v78 = v64;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v93 = v66;
          unint64_t v97 = 0x8000000000000000;
          sub_1002C3D24(v78, v65, isUniquelyReferenced_nonNull_native, v25);
          unint64_t v97 = v93;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRelease();
LABEL_5:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v95);
      v22 += 40;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v15 = v81;
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    swift_bridgeObjectRelease();
    sub_1000C0DE0(v95, v96);
    uint64_t v87 = dispatch thunk of ExtendedTripleProtocol.object.getter();
    unint64_t v90 = v27;
    uint64_t v21 = 0;
    unint64_t v24 = 0xE000000000000000;
    double v25 = 0.0;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
LABEL_57:
  if (qword_100906E48 != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  sub_10008E2DC(v69, (uint64_t)qword_1009099C8);
  swift_bridgeObjectRetain_n();
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v70, v71))
  {
    BOOL v72 = (uint8_t *)swift_slowAlloc();
    v95[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v72 = 136315138;
    uint64_t v73 = Dictionary.description.getter();
    uint64_t v93 = sub_1000C51B8(v73, v74, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Automatic Languages: %s", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  unint64_t v75 = v97;

  return v75;
}

void *sub_10040F80C(void *a1)
{
  uint64_t v95 = type metadata accessor for REMGroceryModelError();
  Swift::Int v87 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v94 = (char *)v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v88 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v8 = (char *)v75 - v7;
  uint64_t v9 = type metadata accessor for ContinuousClock();
  uint64_t v90 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMFeatureFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for REMFeatureFlags.groceryMultilingual(_:), v12, v14);
  id v17 = a1;
  LOBYTE(a1) = REMFeatureFlags.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((a1 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v84 = v9;
  uint64_t v85 = v4;
  ContinuousClock.init()();
  id v86 = v11;
  ContinuousClock.now.getter();
  sub_1000C0364();
  uint64_t v18 = type metadata accessor for REMGroceryDummyModel();
  uint64_t v19 = static REMGroceryDummyModel.modelBaseLocale(for:)();
  BOOL v91 = v8;
  id v96 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if (!v22)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v8, v3);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v84);
LABEL_10:

    return _swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = v20;
  *(void *)(inited + 40) = v22;
  Swift::Int v24 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  Swift::Int v99 = v24;
  sub_10040EC08(v17);
  uint64_t v25 = swift_bridgeObjectRetain();
  double v26 = sub_100209730(v25);
  swift_bridgeObjectRelease();
  v97[0] = v26;
  sub_10040DFC4(v97);
  swift_bridgeObjectRelease();
  unint64_t v27 = v97[0];
  int64_t v28 = v97[0][2];
  uint64_t v89 = v18;
  uint64_t v77 = v3;
  if (v28)
  {
    v97[0] = _swiftEmptyArrayStorage;
    sub_1001DE0C8(0, v28, 0);
    uint64_t v29 = v97[0];
    uint64_t v93 = v27;
    uint64_t v30 = v27 + 6;
    do
    {
      uint64_t v31 = *(v30 - 2);
      uint64_t v32 = *(v30 - 1);
      uint64_t v33 = *v30;
      v97[0] = v29;
      unint64_t v35 = v29[2];
      unint64_t v34 = v29[3];
      swift_bridgeObjectRetain();
      if (v35 >= v34 >> 1)
      {
        sub_1001DE0C8(v34 > 1, v35 + 1, 1);
        uint64_t v29 = v97[0];
      }
      v29[2] = v35 + 1;
      char v36 = &v29[3 * v35];
      v36[4] = v31;
      v36[5] = v32;
      v36[6] = v33;
      v30 += 3;
      --v28;
    }
    while (v28);
    swift_release();
    uint64_t v3 = v77;
    int64_t v8 = v91;
    id v17 = v96;
  }
  else
  {
    swift_release();
    uint64_t v29 = _swiftEmptyArrayStorage;
  }
  uint64_t v98 = _swiftEmptyArrayStorage;
  uint64_t v93 = (void *)v29[2];
  if (v93)
  {
    uint64_t v40 = 0;
    double v92 = v29 + 4;
    Swift::Int v83 = v87 + 88;
    int v82 = enum case for REMGroceryModelError.unsupportedLanguage(_:);
    Swift::Int v80 = v87 + 8;
    Swift::Int v79 = v87 + 96;
    *(void *)&long long v39 = 136315138;
    long long v76 = v39;
    v75[1] = (char *)&type metadata for Any + 8;
    *(void *)&long long v39 = 136315394;
    long long v81 = v39;
    while (1)
    {
      uint64_t v41 = &v92[3 * v40];
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      uint64_t v44 = v41[2];
      swift_bridgeObjectRetain();
      uint64_t v45 = static REMGroceryDummyModel.modelBaseLocale(for:)();
      Swift::Int v47 = v46;
      if (!v46)
      {
        swift_bridgeObjectRelease();
        id v17 = v96;
        goto LABEL_40;
      }
      Swift::Int v48 = v45;
      Swift::Int v49 = v99;
      if (!*(void *)(v99 + 16)) {
        goto LABEL_34;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v50 = Hasher._finalize()();
      uint64_t v51 = -1 << *(unsigned char *)(v49 + 32);
      unint64_t v52 = v50 & ~v51;
      Swift::Int v87 = v49 + 56;
      if (((*(void *)(v49 + 56 + ((v52 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v52) & 1) == 0) {
        goto LABEL_33;
      }
      v75[0] = *(void *)(v49 + 48);
      uint64_t v53 = (void *)(v75[0] + 16 * v52);
      BOOL v54 = *v53 == v48 && v47 == v53[1];
      if (!v54 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v78 = ~v51;
        unint64_t v55 = (v52 + 1) & ~v51;
        uint64_t v56 = v75[0];
        if (((*(void *)(v87 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
        {
LABEL_33:
          swift_bridgeObjectRelease();
LABEL_34:
          unint64_t v59 = v98;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v59 = sub_100309098(0, v59[2] + 1, 1, v59);
          }
          unint64_t v61 = v59[2];
          unint64_t v60 = v59[3];
          if (v61 >= v60 >> 1) {
            unint64_t v59 = sub_100309098((void *)(v60 > 1), v61 + 1, 1, v59);
          }
          v59[2] = v61 + 1;
          Swift::String v62 = &v59[3 * v61];
          v62[4] = v43;
          v62[5] = v42;
          v62[6] = v44;
          uint64_t v98 = v59;
          sub_10031DC68((Swift::Int *)v97, v48, v47);
          goto LABEL_39;
        }
        while (1)
        {
          char v57 = (void *)(v56 + 16 * v55);
          BOOL v58 = *v57 == v48 && v47 == v57[1];
          if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          unint64_t v55 = (v55 + 1) & v78;
          if (((*(void *)(v87 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0) {
            goto LABEL_33;
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_39:
      swift_bridgeObjectRelease();
      int64_t v8 = v91;
      id v17 = v96;
LABEL_40:
      if (v98[2] < 2uLL && (void *)++v40 != v93) {
        continue;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = v77;
      goto LABEL_43;
    }
  }
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
  Swift::String v63 = v86;
  ContinuousClock.now.getter();
  ContinuousClock.Instant.duration(to:)();
  if (qword_100906E48 != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  sub_10008E2DC(v64, (uint64_t)qword_1009099C8);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = swift_slowAlloc();
    v97[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315394;
    uint64_t v68 = Duration.description.getter();
    v97[14] = (void *)sub_1000C51B8(v68, v69, (uint64_t *)v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100094134(&qword_100913BB8);
    uint64_t v70 = Array.description.getter();
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    v97[13] = (void *)sub_1000C51B8(v70, v72, (uint64_t *)v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v17 = v96;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "automaticGroceryLocaleIDsWithConfidences finished {duration: %s sec}, results: %s)", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v73 = *(void (**)(char *, uint64_t))(v85 + 8);
    v73(v88, v3);
    v73(v8, v3);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v86, v84);
  }
  else
  {

    unint64_t v74 = *(void (**)(char *, uint64_t))(v85 + 8);
    v74(v88, v3);
    v74(v8, v3);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v84);
  }
  swift_beginAccess();
  unint64_t v37 = v98;

  return v37;
}

unsigned char *sub_1004108D4@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100410944()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917F60);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917F60);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100410A0C(uint64_t a1, NSString a2, char a3)
{
  BOOL v4 = v3;
  uint64_t v8 = type metadata accessor for REMFeatureFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [v4 recentlyDeletedInfoChecksum:v10];
  if (!v13)
  {
    if (!a2) {
      return;
    }
    goto LABEL_10;
  }
  __n128 v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v17 = v16;

  if (!a2)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    [v4 setRecentlyDeletedInfoChecksum:a2];

    if (a3)
    {
      (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for REMFeatureFlags.recentlyDeletedList(_:), v8);
      char v20 = REMFeatureFlags.isEnabled.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if (v20)
      {
        id v21 = [v4 createResolutionTokenMapIfNecessary];
        NSString v22 = String._bridgeToObjectiveC()();
        [v21 updateForKey:v22];
      }
    }
    return;
  }
  if (v15 != a1 || v17 != a2)
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      return;
    }
LABEL_10:
    a2 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100410C54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917F78);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917F78);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100410D1C()
{
}

unint64_t sub_100410D40(uint64_t a1)
{
  unint64_t result = sub_100410D68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100410D68()
{
  unint64_t result = qword_100917FC8;
  if (!qword_100917FC8)
  {
    type metadata accessor for REMRemindersListDataView.ListInvocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100917FC8);
  }
  return result;
}

uint64_t sub_100410DC0(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a6;
  uint64_t v32 = a4;
  uint64_t v28 = a3;
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  id v27 = a1;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (id *)((char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v19 = (char *)v18 + *(int *)(sub_100094134(&qword_100916940) + 48);
  void *v18 = [v27 objectID];
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  id v21 = v19;
  uint64_t v22 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v21, v28, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v18, _s10PredicatesOMa);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4((uint64_t)v9, (uint64_t)v12, (uint64_t)v15);
  uint64_t v24 = v33;
  uint64_t v25 = sub_100522260(v30, (uint64_t)v23, (uint64_t)v15, 0, 0, v22, v32, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v31, 0);
  if (!v24)
  {
    uint64_t v10 = (uint64_t)v25;
    swift_bridgeObjectRelease();
  }
  sub_10012607C((uint64_t)v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);

  return v10;
}

uint64_t sub_1004110C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917F90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917F90);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100411190@<X0>(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v143 = a3;
  uint64_t v136 = a2;
  v144 = a1;
  uint64_t v122 = a5;
  uint64_t v124 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  v121 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v125 = (char *)&v108 - v8;
  uint64_t v129 = _s10PredicatesOMa(0);
  __chkstk_darwin(v129);
  v130 = (char **)((char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v10 - 8);
  uint64_t v118 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v132 = *(void *)(v12 - 8);
  uint64_t v133 = v12;
  __chkstk_darwin(v12);
  v128 = (uint64_t *)((char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v135 = (char *)&v108 - v15;
  uint64_t v134 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v131 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  v120 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v127 = (char *)&v108 - v18;
  __chkstk_darwin(v19);
  v126 = (char *)&v108 - v20;
  __chkstk_darwin(v21);
  uint64_t v137 = (uint64_t)&v108 - v22;
  uint64_t v23 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v23 - 8);
  uint64_t v119 = (uint64_t)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v139 = (uint64_t)&v108 - v26;
  uint64_t v27 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  v141 = *(objc_class **)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  v140 = *(void (***)(char *, uint64_t))(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  char v36 = (char *)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  long long v39 = (char *)&v108 - v38;
  uint64_t v40 = v142;
  unint64_t result = sub_1004122C0(a4, v144, v143);
  if (v40) {
    return result;
  }
  Swift::Int v109 = v39;
  Swift::Int v110 = v32;
  uint64_t v111 = v29;
  uint64_t v112 = Subtasks;
  uint64_t v113 = v27;
  v108 = v36;
  uint64_t v116 = v34;
  uint64_t v115 = v33;
  uint64_t v117 = a4;
  uint64_t v142 = 0;
  id v114 = result;
  id v42 = [result accountID];
  uint64_t v43 = (uint64_t)v144;
  id v44 = [v144 persistentStoreOfAccountWithAccountID:v42];

  if (v44)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_10077A530;
    *(void *)(v45 + 32) = v44;
    uint64_t v145 = v45;
    specialized Array._endMutation()();
    uint64_t v46 = v145;
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t v47 = v113;
  Swift::Int v48 = v141;
  uint64_t v49 = (uint64_t)v111;
  Swift::Int v50 = v110;
  uint64_t v51 = (uint64_t)v109;
  unint64_t v52 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
  REMRemindersListDataView.ListInvocation.Parameters.showCompleted.getter();
  REMRemindersListDataView.ListInvocation.Parameters.fetchSubtasks.getter();
  REMRemindersListDataView.ListInvocation.Parameters.sortingStyle.getter();
  uint64_t v53 = v142;
  uint64_t v54 = sub_100410DC0(v52, v43, v51, v50, v49, v46);
  if (v53)
  {

    swift_bridgeObjectRelease();
    (*((void (**)(uint64_t, uint64_t))v48 + 1))(v49, v47);
    v140[1](v50, v112);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v116 + 8))(v51, v115);
  }
  v141 = (objc_class *)v46;
  uint64_t v142 = v54;

  (*((void (**)(uint64_t, uint64_t))v48 + 1))(v49, v47);
  v140[1](v50, v112);
  uint64_t v56 = v116 + 8;
  unint64_t v55 = *(void (***)(char *, uint64_t))(v116 + 8);
  ((void (*)(uint64_t, uint64_t))v55)(v51, v115);
  char v57 = v138;
  sub_10041211C(v43, v139);
  v140 = v55;
  BOOL v58 = v141;
  id v59 = [v57 fetchResultTokenToDiffAgainst];
  sub_10051F2BC(v59, v43, v137);

  unint64_t v60 = v135;
  REMRemindersListDataView.ListInvocation.Parameters.remindersPrefetch.getter();
  uint64_t v61 = v132;
  Swift::String v62 = v128;
  Swift::String v63 = v60;
  uint64_t v64 = v133;
  (*(void (**)(uint64_t *, char *, uint64_t))(v132 + 16))(v128, v63, v133);
  int v65 = (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 88))(v62, v64);
  uint64_t v116 = v56;
  if (v65 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v62, v64);
    uint64_t v66 = *v62;
    uint64_t v67 = v142;
    swift_bridgeObjectRetain();
    sub_1005280D0(v66, v67, (uint64_t)v144, v143, v58);
LABEL_11:
    v143 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  uint64_t v68 = v143;
  if (v65 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v62, v64);
    uint64_t v69 = *v62;
    uint64_t v67 = v142;
    swift_bridgeObjectRetain();
    sub_100528BCC(v69, v137, (uint64_t)v144, v68, v58);
    goto LABEL_11;
  }
  if (v65 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    if (v65 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
      unint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    v143 = _swiftEmptyArrayStorage;
    uint64_t v67 = v142;
    uint64_t v70 = (uint64_t)v108;
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v62, v64);
  uint64_t v92 = *v62;
  uint64_t v93 = sub_100094134(&qword_100909C78);
  sub_1001326D0((uint64_t)v62 + *(int *)(v93 + 48), v118);
  uint64_t v67 = v142;
  swift_bridgeObjectRetain();
  uint64_t v94 = v92;
  uint64_t v64 = v133;
  uint64_t v95 = (uint64_t)v144;
  sub_1005280D0(v94, v67, (uint64_t)v144, v68, v58);
  uint64_t v96 = v95;
  uint64_t v61 = v132;
  v143 = sub_10052929C(v118, v67, v96, v68, (uint64_t)v58);
  sub_1000966BC(v118, &qword_100909C68);
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v70 = (uint64_t)v108;
LABEL_13:
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v135, v64);
  unint64_t v71 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
  id v72 = [v71 objectID];

  uint64_t v73 = (uint64_t)v130;
  void *v130 = v72;
  swift_storeEnumTagMultiPayload();
  unint64_t v74 = (void *)sub_10038F1F0();
  sub_10012607C(v73, _s10PredicatesOMa);
  REMRemindersListDataView.ListInvocation.Parameters.showCompleted.getter();
  uint64_t v75 = v139;
  sub_10052B078((uint64_t)v144, (uint64_t)v74, v139, v70, v67);
  uint64_t v142 = 0;
  ((void (*)(uint64_t, uint64_t))v140)(v70, v115);

  sub_100132738(v75, v119);
  swift_bridgeObjectRetain();
  long long v76 = v125;
  REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  uint64_t v77 = v134;
  if (qword_100907538 != -1) {
    swift_once();
  }
  uint64_t v78 = type metadata accessor for Logger();
  sub_10008E2DC(v78, (uint64_t)qword_100917F90);
  uint64_t v79 = v131;
  long long v81 = (void *)(v131 + 16);
  Swift::Int v80 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 16);
  uint64_t v82 = v137;
  v80(v126, v137, v77);
  Swift::Int v83 = v127;
  v143 = v80;
  v144 = v81;
  v80(v127, v82, v77);
  swift_bridgeObjectRetain();
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    os_log_type_t v86 = v85;
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v87 = 134218496;
    uint64_t v88 = *(void *)(v67 + 16);
    swift_bridgeObjectRelease();
    uint64_t v145 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v87 + 12) = 2048;
    uint64_t v89 = v126;
    uint64_t v90 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
    if ((v90 & 0xC000000000000001) != 0) {
      uint64_t v91 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v91 = *(void *)(v90 + 16);
    }
    swift_bridgeObjectRelease();
    uint64_t v102 = v89;
    uint64_t v103 = *(objc_class **)(v79 + 8);
    ((void (*)(char *, uint64_t))v103)(v102, v134);
    uint64_t v145 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v87 + 22) = 2048;
    uint64_t v104 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
    if ((v104 & 0xC000000000000001) != 0) {
      uint64_t v105 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v105 = *(void *)(v104 + 16);
    }
    swift_bridgeObjectRelease();
    uint64_t v97 = v134;
    v141 = v103;
    ((void (*)(char *, uint64_t))v103)(v127, v134);
    uint64_t v145 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v84, v86, "reminders %ld updated %ld inserted %ld", (uint8_t *)v87, 0x20u);
    swift_slowDealloc();

    uint64_t v99 = v123;
    long long v76 = v125;
    v101 = v121;
    unint64_t v100 = v120;
  }
  else
  {
    uint64_t v97 = v77;
    uint64_t v98 = *(objc_class **)(v79 + 8);
    v141 = v98;
    ((void (*)(char *, uint64_t))v98)(v83, v77);
    ((void (*)(char *, uint64_t))v98)(v126, v77);

    swift_bridgeObjectRelease_n();
    uint64_t v99 = v123;
    unint64_t v100 = v120;
    v101 = v121;
  }
  uint64_t v106 = v124;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v101, v76, v124);
  uint64_t v107 = v137;
  ((void (*)(char *, uint64_t, uint64_t))v143)(v100, v137, v97);
  REMRemindersListDataView.ListInvocation.Result.init(model:diff:list:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v76, v106);
  ((void (*)(uint64_t, uint64_t))v141)(v107, v97);
  return (void *)sub_1000966BC(v139, &qword_100909C70);
}

void sub_10041211C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (REMRemindersListDataView.ListInvocation.Parameters.countCompleted.getter())
  {
    uint64_t v8 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
    id v9 = [v8 objectID];

    void *v7 = v9;
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = (void *)sub_10038F1F0();
    sub_10012607C((uint64_t)v7, _s10PredicatesOMa);
    sub_10051EB6C(a1, (uint64_t)v10);
    if (!v2)
    {
      uint64_t v11 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
    }
  }
  else
  {
    uint64_t v12 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

void *sub_1004122C0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)REMRemindersListDataView.ListInvocation.Parameters.list.getter();
  id v7 = [v6 objectID];

  uint64_t v8 = (void *)REMObjectID.codable.getter();
  type metadata accessor for REMListStableSortingDataView.Invocation();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = v8;
  unint64_t v21 = inited;
  specialized Array._endMutation()();
  if (v21 >> 62)
  {
    id v15 = v8;
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v12 = v8;
    if (v11)
    {
LABEL_3:
      sub_10032E994(v21);
      uint64_t v14 = v13;
      goto LABEL_6;
    }
  }
  uint64_t v14 = &_swiftEmptySetSingleton;
LABEL_6:
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_1001FDE54((uint64_t)a2, a3, (uint64_t)v14);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v17;

    swift_bridgeObjectRelease();
    id v19 = v8;
    a2 = sub_1002EFE4C(v19, v18);

    swift_bridgeObjectRelease();
    if (!a2)
    {
      [self noSuchObjectErrorWithObjectID:v19];
      swift_willThrow();
    }
  }
  return a2;
}

uint64_t sub_1004124A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917FD0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917FD0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10041256C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100917FE8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100917FE8);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100412634(void *a1, void *a2, char a3, uint64_t a4)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_100907548 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100917FE8);
    id v9 = a1;
    sub_100149368(a2, 1);
    id v10 = v9;
    sub_100149368(a2, 1);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      id v13 = v10;
      id v14 = [v13 description];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      uint64_t v22 = sub_1000C51B8(v15, v17, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v22 = (uint64_t)a2;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v22 = sub_1000C51B8(v18, v19, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Error fetching record zone %s {error: %s}", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10011C62C(a2, 1);
    }
    else
    {
      sub_10011C62C(a2, 1);

      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a4 + 16);
    swift_beginAccess();
    id v6 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
}

void sub_100412974(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100907548 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_100917FE8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v6 = String.init<A>(describing:)();
      sub_1000C51B8(v6, v7, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error fetching record zones {error: %s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000CD9D0(a1, 1);
    }
    else
    {
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      swift_errorRelease();
    }
  }
}

void sub_100412B98(void *a1, void *a2, char a3, void *a4, uint64_t a5, void (**a6)(uint64_t, uint64_t, uint64_t, uint64_t), void *a7, uint64_t a8)
{
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v15 - 8);
  v154 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v137 - v24;
  if (a3)
  {
    swift_errorRetain();
    if (qword_100907548 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10008E2DC(v45, (uint64_t)qword_100917FE8);
    sub_100149368(a2, 1);
    id v46 = a1;
    sub_100149368(a2, 1);
    id v47 = v46;
    v155 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v155, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      v160[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446466;
      id v50 = [v47 ic_prettyLoggingDescription];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      uint64_t v157 = sub_1000C51B8(v51, v53, (uint64_t *)v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      uint64_t v157 = (uint64_t)a2;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v54 = String.init<A>(describing:)();
      uint64_t v157 = sub_1000C51B8(v54, v55, (uint64_t *)v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v155, v48, "Failed in fetchChangesOp.recordWasChangedBlock {recordID: %{public}s, error: %s}", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v56 = a2;
      char v57 = 1;
LABEL_59:
      sub_10011C62C(v56, v57);
      return;
    }
    sub_10011C62C(a2, 1);

    sub_10011C62C(a2, 1);
    BOOL v58 = a2;
    char v59 = 1;
    goto LABEL_24;
  }
  uint64_t v151 = v23;
  uint64_t v148 = v22;
  id v149 = a7;
  uint64_t v150 = a8;
  uint64_t v153 = v21;
  sub_100149368(a2, 0);
  uint64_t v26 = a2;
  id v27 = [v26 CKDescriptionPropertiesWithPublic:1 private:1 shouldExpand:1];
  if (!v27)
  {
    sub_10011C62C(a2, 0);
    __break(1u);
    return;
  }
  uint64_t v28 = v27;
  id v29 = [v27 jsonify];

  self;
  uint64_t v30 = swift_dynamicCastObjCClass();
  if (!v30)
  {

    if (qword_100907548 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_10008E2DC(v60, (uint64_t)qword_100917FE8);
    id v61 = a1;
    v155 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v155, v62))
    {
      Swift::String v63 = (uint8_t *)swift_slowAlloc();
      v160[0] = (id)swift_slowAlloc();
      *(_DWORD *)Swift::String v63 = 136446210;
      id v64 = [v61 ic_prettyLoggingDescription];
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v67 = v66;

      uint64_t v157 = sub_1000C51B8(v65, v67, (uint64_t *)v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v155, v62, "Failed to cast record.ckDesriptionProperties to NSMutableDictionary for {recordID:%{public}s}", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10011C62C(a2, 0);

LABEL_58:
      uint64_t v56 = a2;
      char v57 = 0;
      goto LABEL_59;
    }
    sub_10011C62C(a2, 0);

    BOOL v58 = a2;
    char v59 = 0;
LABEL_24:
    sub_10011C62C(v58, v59);
    uint64_t v82 = v155;

    return;
  }
  uint64_t v31 = (void *)v30;
  v155 = v26;
  if (sub_1004161B0((uint64_t)v26, a4))
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 addEntriesFromDictionary:isa];
  }
  uint64_t v33 = self;
  v160[0] = 0;
  id v34 = [v33 dataWithJSONObject:v31 options:1 error:v160];
  id v35 = v160[0];
  id v152 = v29;
  if (!v34)
  {
    uint64_t v68 = v35;
    uint64_t v69 = _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_18;
  }
  v147 = a6;
  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v38 = v37;

  long long v39 = v155;
  id v40 = [v155 recordID];
  id v41 = [v40 recordName];

  id v42 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v44 = v43;

  v160[0] = v42;
  v160[1] = v44;
  uint64_t v157 = 47;
  unint64_t v158 = 0xE100000000000000;
  v160[8] = (id)45;
  v160[9] = (id)0xE100000000000000;
  sub_1000E4FD8();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  Data.write(to:options:)();
  Swift::Int v83 = *(void (**)(char *, uint64_t))(v18 + 8);
  v83(v25, v153);
  if (![v39 containsAssetValues])
  {
    sub_10011C62C(a2, 0);

    uint64_t v133 = v36;
    unint64_t v134 = v38;
LABEL_57:
    sub_100097F34(v133, v134);
    goto LABEL_58;
  }
  uint64_t v138 = v36;
  unint64_t v139 = v38;
  os_log_type_t v85 = v147 + 2;
  swift_beginAccess();
  id v29 = v152;
  if ((*v85 & 1) == 0)
  {
    URL._bridgeToObjectiveC()(&var20);
    uint64_t v87 = v86;
    v160[0] = 0;
    unsigned int v88 = [v149 createDirectoryAtURL:v86 withIntermediateDirectories:1 attributes:0 error:v160];

    id v89 = v160[0];
    if (!v88)
    {
      id v135 = v160[0];
      uint64_t v69 = _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100097F34(v138, v139);
      goto LABEL_18;
    }
    swift_beginAccess();
    *os_log_type_t v85 = 1;
    id v90 = v89;
  }
  v140 = (void (*)(uint64_t, uint64_t))v83;
  uint64_t v141 = v18 + 8;
  uint64_t v91 = &selRef_includeReminderTitles;
  id v92 = [v155 valueStore];
  id v93 = [v92 allKeys];

  uint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v137 = v94;
  uint64_t v96 = *(void *)(v94 + 16);
  uint64_t v97 = (uint64_t)v154;
  if (!v96)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    sub_10011C62C(a2, 0);

    uint64_t v133 = v138;
    unint64_t v134 = v139;
    goto LABEL_57;
  }
  v146 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v147 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  uint64_t v98 = v137 + 40;
  *(void *)&long long v95 = 136315138;
  long long v143 = v95;
  uint64_t v142 = (char *)&type metadata for Any + 8;
  while (1)
  {
    swift_bridgeObjectRetain();
    id v99 = [v155 v91[438]];
    sub_1000963CC(0, &qword_100918008);
    CKRecordKeyValueSetting.subscript.getter();
    swift_bridgeObjectRelease();

    sub_100416904((uint64_t)v160, (uint64_t)&v157);
    if (!v159)
    {
      sub_1000966BC((uint64_t)&v157, &qword_100918010);
      goto LABEL_45;
    }
    sub_100094134(&qword_100918018);
    sub_1000963CC(0, &qword_100918028);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_45;
    }
    id v100 = v156;
    id v101 = [v156 fileURL];
    if (!v101)
    {
      (*v147)(v97, 1, 1, v153);
      goto LABEL_44;
    }
    uint64_t v102 = v101;
    uint64_t v103 = v151;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v104 = *v146;
    uint64_t v105 = v103;
    uint64_t v106 = v153;
    (*v146)(v97, v105, v153);
    (*v147)(v97, 0, 1, v106);
    if ((*v144)(v97, 1, v106) != 1) {
      break;
    }
LABEL_44:

    sub_1000966BC(v97, (uint64_t *)&unk_100909E40);
LABEL_45:
    sub_100416904((uint64_t)v160, (uint64_t)&v157);
    if (v159)
    {
      sub_100094134(&qword_100918018);
      sub_1000963CC(0, &qword_100918020);
      if (swift_dynamicCast())
      {
        id v120 = v156;
        if (qword_100907548 != -1) {
          swift_once();
        }
        uint64_t v121 = type metadata accessor for Logger();
        sub_10008E2DC(v121, (uint64_t)qword_100917FE8);
        id v122 = v120;
        uint64_t v123 = Logger.logObject.getter();
        os_log_type_t v124 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = swift_slowAlloc();
          uint64_t v145 = (void *)swift_slowAlloc();
          id v156 = v145;
          *(_DWORD *)uint64_t v125 = v143;
          id v126 = [v122 rootDatabasePath];
          if (v126)
          {
            v127 = v126;
            uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v130 = v129;
          }
          else
          {
            uint64_t v128 = 0;
            unint64_t v130 = 0;
          }
          uint64_t v157 = v128;
          unint64_t v158 = v130;
          sub_100094134((uint64_t *)&unk_10090A4C0);
          uint64_t v131 = String.init<A>(describing:)();
          *(void *)(v125 + 4) = sub_1000C51B8(v131, v132, (uint64_t *)&v156);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "Not pulling in CKPackage, the db of which lives at %s", (uint8_t *)v125, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1000966BC((uint64_t)v160, &qword_100918010);
          uint64_t v97 = (uint64_t)v154;
          uint64_t v91 = &selRef_includeReminderTitles;
          goto LABEL_35;
        }
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v157, &qword_100918010);
    }
    sub_1000966BC((uint64_t)v160, &qword_100918010);
LABEL_35:
    v98 += 16;
    if (!--v96) {
      goto LABEL_56;
    }
  }
  uint64_t v107 = v148;
  uint64_t v108 = v153;
  v104(v148, v97, v153);
  URL._bridgeToObjectiveC()(v109);
  uint64_t v111 = v110;
  URL.lastPathComponent.getter();
  uint64_t v112 = v151;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v113);
  uint64_t v115 = v114;
  uint64_t v116 = v108;
  uint64_t v117 = v140;
  v140(v112, v116);
  uint64_t v157 = 0;
  unsigned int v118 = [v149 moveItemAtURL:v111 toURL:v115 error:&v157];

  id v119 = (id)v157;
  if (v118)
  {
    v117(v107, v153);

    uint64_t v97 = (uint64_t)v154;
    uint64_t v91 = &selRef_includeReminderTitles;
    goto LABEL_45;
  }
  uint64_t v136 = v119;
  swift_bridgeObjectRelease();
  uint64_t v69 = _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_100097F34(v138, v139);

  v117(v107, v153);
  sub_1000966BC((uint64_t)v160, &qword_100918010);
  id v29 = v152;
LABEL_18:
  if (qword_100907548 != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  sub_10008E2DC(v70, (uint64_t)qword_100917FE8);
  sub_100149368(a2, 0);
  swift_errorRetain();
  sub_100149368(a2, 0);
  swift_errorRetain();
  unint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.error.getter();
  BOOL v73 = os_log_type_enabled(v71, v72);
  unint64_t v74 = v155;
  if (v73)
  {
    uint64_t v75 = swift_slowAlloc();
    v160[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v75 = 136315394;
    sub_100149368(a2, 0);
    id v76 = [v74 description];
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v79 = v78;

    sub_10011C62C(a2, 0);
    uint64_t v157 = sub_1000C51B8(v77, v79, (uint64_t *)v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10011C62C(a2, 0);
    sub_10011C62C(a2, 0);
    *(_WORD *)(v75 + 12) = 2080;
    uint64_t v157 = v69;
    swift_errorRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v80 = String.init<A>(describing:)();
    uint64_t v157 = sub_1000C51B8(v80, v81, (uint64_t *)v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed to serialize record {record: %s, error: %s}", (uint8_t *)v75, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10011C62C(a2, 0);

    swift_errorRelease();
    sub_10011C62C(a2, 0);
  }
  else
  {
    sub_10011C62C(a2, 0);

    sub_10011C62C(a2, 0);
    swift_errorRelease();
    sub_10011C62C(a2, 0);
    sub_10011C62C(a2, 0);
    swift_errorRelease();
    swift_errorRelease();
  }
}

id sub_100413F78(Class *a1, void (*a2)(void))
{
  uint64_t v11 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v4 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone(*a1) init];
  a2();
  NSFastEnumerationIterator.next()();
  while (v17)
  {
    sub_10009A1A0(&v16, &v14);
    sub_10009A1B0((uint64_t)&v14, (uint64_t)v13);
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    if (swift_dynamicCast())
    {
      id v8 = v12;
      id v9 = [v12 jsonify];
      [v7 addObject:v9];
    }
    else
    {
      sub_1000C0DE0(&v14, v15);
      [v7 addObject:_bridgeAnythingToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v14);
    NSFastEnumerationIterator.next()();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v11);
  return v7;
}

id sub_1004141E4()
{
  id v1 = [objc_allocWithZone((Class)NSMutableDictionary) init];
  id v2 = [v0 allKeys];
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    do
    {
      sub_10009A1B0(v5, (uint64_t)v19);
      sub_1000C0DE0(v19, v19[3]);
      id v7 = [v0 __swift_objectForKeyedSubscript:_bridgeAnythingToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v7)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10009A1A0(&v16, v18);
        sub_10009A1B0((uint64_t)v18, (uint64_t)&v16);
        uint64_t v8 = sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        if (swift_dynamicCast())
        {
          id v9 = v14[0];
          id v10 = [v14[0] jsonify];
          uint64_t v17 = v8;

          *(void *)&long long v16 = v10;
        }
        else
        {
          sub_10009A1B0((uint64_t)v18, (uint64_t)&v16);
        }
        sub_10009A1B0((uint64_t)v19, (uint64_t)v14);
        if (swift_dynamicCast())
        {
          id v11 = [v13 jsonify];
          uint64_t v15 = v8;

          v14[0] = v11;
        }
        else
        {
          sub_10009A1B0((uint64_t)v19, (uint64_t)v14);
        }
        sub_1000C0DE0(&v16, v17);
        uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
        sub_1000C0DE0(v14, v15);
        [v1 __swift_setObject:v6 forKeyedSubscript:_bridgeAnythingToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v14);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v16);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return v1;
}

id sub_1004144D8()
{
  id result = [objc_allocWithZone((Class)NSISO8601DateFormatter) init];
  qword_100942248 = (uint64_t)result;
  return result;
}

void sub_1004145A4(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v162 = a4;
  uint64_t v199 = type metadata accessor for URL();
  id v7 = *(void **)(v199 - 8);
  __chkstk_darwin(v199);
  v177 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v198 = (char *)&v157 - v10;
  __chkstk_darwin(v11);
  v179 = (char *)&v157 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v157 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v157 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v157 - v20;
  uint64_t v181 = v22;
  __chkstk_darwin(v23);
  v184 = (char *)&v157 - v24;
  v197 = a2;
  NSString v25 = String._bridgeToObjectiveC()();
  v178 = a3;
  id v26 = [a3 containerForAccountID:v25];

  if (!v26)
  {
    if (qword_100907548 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10008E2DC(v39, (uint64_t)qword_100917FE8);
    swift_bridgeObjectRetain_n();
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      id v42 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)id v42 = 136315138;
      unint64_t v43 = (unint64_t)v197;
      swift_bridgeObjectRetain();
      uint64_t v208 = sub_1000C51B8((uint64_t)a1, v43, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to fetch CKContainer for accountID {accountID: %s}", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v148 = self;
    uint64_t aBlock = 0;
    unint64_t v203 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v149._object = (void *)0x80000001007D4500;
    v149._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v149);
    v150._countAndFlagsBits = (uint64_t)a1;
    v150._object = v197;
    String.append(_:)(v150);
    v151._countAndFlagsBits = 125;
    v151._object = (void *)0xE100000000000000;
    String.append(_:)(v151);
    NSString v152 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v153 = [v148 internalErrorWithDebugDescription:v152];

    v154 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v162 + 16))(v162, 0, v154);

    return;
  }
  id v194 = [self defaultManager];
  id v27 = [v194 temporaryDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t aBlock = (uint64_t)a1;
  unint64_t v203 = (unint64_t)v197;
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = 0x6E6961746E6F632DLL;
  v28._object = (void *)0xEA00000000007265;
  String.append(_:)(v28);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  id v29 = (void (*)(char *, uint64_t))v7[1];
  v174 = v21;
  v195 = v29;
  v196 = v7 + 1;
  v29(v21, v199);
  if (qword_100907548 != -1) {
    goto LABEL_53;
  }
LABEL_3:
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = sub_10008E2DC(v30, (uint64_t)qword_100917FE8);
  v176 = v7;
  uint64_t v32 = (void (*)(char *, id, uint64_t))v7[2];
  v191 = v7 + 2;
  v190 = v32;
  v32(v18, v184, v199);
  uint64_t v192 = v31;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  v193 = v15;
  uint64_t v166 = (uint64_t)a1;
  if (v35)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    id v159 = v26;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v37 = URL.path.getter();
    uint64_t v208 = sub_1000C51B8(v37, v38, &aBlock);
    id v26 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v195(v18, v199);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "downloadContainer outputDirURL: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v195(v18, v199);
  }

  URL.path.getter();
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v45 = v194;
  unsigned int v46 = [v194 fileExistsAtPath:v44];

  if (v46)
  {
    URL._bridgeToObjectiveC()(&v209);
    os_log_type_t v48 = v47;
    uint64_t aBlock = 0;
    unsigned int v49 = [v45 removeItemAtURL:v47 error:&aBlock];

    id v50 = (id)aBlock;
    if (!v49) {
      goto LABEL_46;
    }
    id v51 = (id)aBlock;
  }
  URL._bridgeToObjectiveC()(&v209);
  unint64_t v53 = v52;
  uint64_t aBlock = 0;
  unsigned int v54 = [v45 createDirectoryAtURL:v52 withIntermediateDirectories:1 attributes:0 error:&aBlock];

  id v50 = (id)aBlock;
  if (v54)
  {
    id v157 = self;
    v180 = &v204;
    v171 = CKCurrentUserDefaultName;
    v170 = &v201;
    uint64_t v169 = v181 + 7;
    v168 = v176 + 4;
    id v55 = v50;
    int v56 = 0;
    uint64_t v57 = 0;
    BOOL v58 = &selRef_includeReminderTitles;
    *(void *)&long long v59 = 136315138;
    long long v165 = v59;
    v164 = (char *)&type metadata for Any + 8;
    *(void *)&long long v59 = 138412546;
    long long v163 = v59;
    long long v167 = xmmword_10077A530;
    id v159 = v26;
    while (1)
    {
      int v158 = v56;
      BOOL v79 = *(&off_1008B2E10 + v57 + 4) == (_UNKNOWN *)2;
      uint64_t v60 = &selRef_privateCloudDatabase;
      if (!v79) {
        uint64_t v60 = &selRef_sharedCloudDatabase;
      }
      id v61 = [v26 *v60];
      dispatch_group_t v62 = dispatch_group_create();
      id v63 = [v157 fetchAllRecordZonesOperation];
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = _swiftEmptyArrayStorage;
      uint64_t v65 = (uint64_t *)(v64 + 16);
      swift_retain();
      uint64_t v161 = v64;
      CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter();
      CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter();
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v62;
      v206 = sub_100415EFC;
      uint64_t v207 = v66;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v203 = 1107296256;
      v204 = sub_100236C78;
      v205 = &unk_1008C5A98;
      unint64_t v67 = _Block_copy(&aBlock);
      id v68 = v63;
      uint64_t v69 = v62;
      sub_1000E4F30((uint64_t)sub_100415EFC);
      swift_release();
      [v68 setCompletionBlock:v67];
      _Block_release(v67);

      swift_release();
      dispatch_group_enter(v69);
      [v68 setDatabase:v61];
      id v183 = v61;
      id v160 = v68;
      [v61 addOperation:v68];
      v182 = v69;
      OS_dispatch_group.wait()();
      swift_beginAccess();
      uint64_t v70 = *v65;
      if ((unint64_t)*v65 >> 62) {
        break;
      }
      uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      id v26 = v193;
      if (v71) {
        goto LABEL_20;
      }
LABEL_15:

      swift_bridgeObjectRelease();
      swift_release();

      int v56 = 1;
      uint64_t v57 = 1;
      id v26 = v159;
      if (v158)
      {
        v155 = v184;
        URL.path.getter();
        NSString v156 = String._bridgeToObjectiveC()();
        (*(void (**)(uint64_t, NSString, void))(v162 + 16))(v162, v156, 0);

        swift_bridgeObjectRelease();
        long long v143 = v155;
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRetain_n();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v26 = v193;
    if (!v71) {
      goto LABEL_15;
    }
LABEL_20:
    uint64_t v15 = (char *)(v70 & 0xC000000000000001);
    uint64_t v72 = 4;
    uint64_t v173 = v71;
    unint64_t v172 = v70 & 0xC000000000000001;
    uint64_t v175 = v70;
    while (1)
    {
      uint64_t v18 = (char *)(v72 - 4);
      if (v15) {
        BOOL v73 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        BOOL v73 = *(id *)(v70 + 8 * v72);
      }
      id v7 = v73;
      a1 = (void *)(v72 - 3);
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        __break(1u);
LABEL_53:
        swift_once();
        goto LABEL_3;
      }
      if ([v73 v58[434]])
      {

        goto LABEL_22;
      }
      id v74 = [v7 ownerName];
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v77 = v76;

      BOOL v79 = v75 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v77 == v78;
      uint64_t v189 = v72;
      v188 = (void *)(v72 - 3);
      if (v79) {
        break;
      }
      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v80) {
        goto LABEL_35;
      }
      uint64_t aBlock = 0x4244646572616853;
      unint64_t v203 = 0xE90000000000002DLL;
      id v81 = [v7 ownerName];
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v84 = v83;

      v85._countAndFlagsBits = v82;
      v85._object = v84;
      String.append(_:)(v85);
      swift_bridgeObjectRelease();
      uint64_t v86 = aBlock;
      unint64_t v87 = v203;
LABEL_36:
      uint64_t aBlock = v86;
      unint64_t v203 = v87;
      v88._countAndFlagsBits = 45;
      v88._object = (void *)0xE100000000000000;
      String.append(_:)(v88);
      id v89 = [v7 zoneName];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v92 = v91;

      v93._countAndFlagsBits = v90;
      v93._object = v92;
      String.append(_:)(v93);
      swift_bridgeObjectRelease();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v94 = v179;
      v190(v179, v26, v199);
      long long v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = v165;
        sub_100416158();
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v200 = sub_1000C51B8(v98, v99, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v195(v94, v199);
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "downloadContainer zoneDirURL: %s", v97, 0xCu);
        swift_arrayDestroy();
        id v26 = v193;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v195(v94, v199);
      }

      URL._bridgeToObjectiveC()(v100);
      uint64_t v102 = v101;
      uint64_t aBlock = 0;
      id v103 = v194;
      unsigned int v104 = [v194 createDirectoryAtURL:v101 withIntermediateDirectories:1 attributes:0 error:&aBlock];

      if (!v104)
      {
        id v144 = (id)aBlock;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        uint64_t v145 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, void, void *))(v162 + 16))(v162, 0, v145);

        swift_errorRelease();
        swift_errorRelease();

        uint64_t v146 = v199;
        v147 = v195;
        v195((char *)v26, v199);
        v147(v184, v146);
        swift_release();
        return;
      }
      id v105 = (id)aBlock;
      URL.appendingPathComponent(_:)();
      uint64_t v187 = swift_allocObject();
      *(unsigned char *)(v187 + 16) = 0;
      swift_bridgeObjectRetain_n();
      uint64_t v106 = v7;
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = swift_slowAlloc();
        Swift::Int v110 = (void *)swift_slowAlloc();
        v186 = (void *)swift_slowAlloc();
        uint64_t aBlock = (uint64_t)v186;
        *(_DWORD *)uint64_t v109 = v163;
        unint64_t v111 = (unint64_t)v197;
        uint64_t v200 = (uint64_t)v106;
        uint64_t v112 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::Int v110 = v106;

        *(_WORD *)(v109 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v200 = sub_1000C51B8(v166, v111, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "Downloading records in zone %@ for accountID %s", (uint8_t *)v109, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        id v26 = v193;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v113 = v174;
      sub_1000963CC(0, &qword_100918000);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v114 = swift_allocObject();
      *(_OWORD *)(v114 + 16) = v167;
      *(void *)(v114 + 32) = v106;
      uint64_t aBlock = v114;
      specialized Array._endMutation()();
      id v115 = (id)aBlock;
      v186 = v106;
      v210.value._rawValue = v115;
      v210.is_nil = 0;
      Class isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v210, v211).super.super.super.super.isa;
      uint64_t v116 = v199;
      uint64_t v117 = (void (*)(char *, char *, uint64_t))v190;
      v190(v113, v26, v199);
      unsigned int v118 = v177;
      v117(v177, v198, v116);
      id v119 = v176;
      uint64_t v120 = *((unsigned __int8 *)v176 + 80);
      uint64_t v121 = v113;
      uint64_t v122 = (v120 + 24) & ~v120;
      unint64_t v123 = (v169 + v122) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v124 = (v123 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v125 = (v120 + v124 + 8) & ~v120;
      uint64_t v126 = swift_allocObject();
      v127 = v178;
      *(void *)(v126 + 16) = v178;
      uint64_t v128 = v126 + v122;
      unint64_t v129 = (void (*)(uint64_t, char *, uint64_t))v119[4];
      v129(v128, v121, v116);
      *(void *)(v126 + v123) = v187;
      id v130 = v194;
      *(void *)(v126 + v124) = v194;
      v129(v126 + v125, v118, v116);
      id v131 = v127;
      swift_retain();
      id v132 = v130;
      Class v133 = isa;
      CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
      uint64_t v134 = swift_allocObject();
      id v135 = v182;
      *(void *)(v134 + 16) = v182;
      v206 = sub_100416970;
      uint64_t v207 = v134;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v203 = 1107296256;
      v204 = sub_100236C78;
      v205 = &unk_1008C5A70;
      uint64_t v136 = _Block_copy(&aBlock);
      uint64_t v137 = v135;
      uint64_t v138 = v133;
      sub_1000E4F30((uint64_t)sub_100416970);
      swift_release();
      [(objc_class *)v138 setCompletionBlock:v136];
      _Block_release(v136);

      swift_release();
      dispatch_group_enter(v137);
      id v139 = v183;
      [(objc_class *)v138 setDatabase:v183];
      [v139 addOperation:v138];
      id v26 = v193;
      OS_dispatch_group.wait()();

      v140 = (void (*)(id, uint64_t))v195;
      v195(v198, v116);
      v140(v26, v116);
      swift_release();
      BOOL v58 = &selRef_includeReminderTitles;
      uint64_t v70 = v175;
      uint64_t v71 = v173;
      uint64_t v15 = (char *)v172;
      uint64_t v72 = v189;
      a1 = v188;
LABEL_22:
      ++v72;
      if (a1 == (void *)v71) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_35:
    uint64_t v86 = 0x4465746176697250;
    unint64_t v87 = 0xE900000000000042;
    goto LABEL_36;
  }
LABEL_46:
  id v141 = v50;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  uint64_t v142 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(v162 + 16))(v162, 0, v142);

  swift_errorRelease();
  swift_errorRelease();
  long long v143 = v184;
LABEL_47:
  v195(v143, v199);
}

uint64_t sub_100415BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v33 = 2;
  uint64_t v34 = a3;
  sub_100094134(&qword_10090E178);
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (v3) {
    return v8 & 1;
  }
  unint64_t v11 = v35;
  if (!(v35 >> 62))
  {
    uint64_t v12 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_17:
    LOBYTE(v8) = sub_1001BCB84(a1, a2, v23);
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_4:
  unint64_t v35 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE058(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v12;
    unint64_t v32 = v11;
    uint64_t v27 = 0;
    uint64_t v28 = a1;
    uint64_t v14 = 0;
    uint64_t v29 = a2;
    unint64_t v30 = v11 & 0xC000000000000001;
    uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v16 = v7;
    do
    {
      if (v30) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v32 + 8 * v14 + 32);
      }
      uint64_t v18 = v17;
      id v19 = [v17 uuid:v27, v28, v29];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = UUID.uuidString.getter();
      uint64_t v22 = v21;
      (*v15)(v10, v7);

      uint64_t v23 = (void *)v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE058(0, v23[2] + 1, 1);
        uint64_t v23 = (void *)v35;
      }
      unint64_t v25 = v23[2];
      unint64_t v24 = v23[3];
      if (v25 >= v24 >> 1)
      {
        sub_1001DE058(v24 > 1, v25 + 1, 1);
        uint64_t v23 = (void *)v35;
      }
      ++v14;
      v23[2] = v25 + 1;
      id v26 = &v23[2 * v25];
      v26[4] = v20;
      v26[5] = v22;
      uint64_t v7 = v16;
    }
    while (v31 != v14);
    swift_bridgeObjectRelease();
    a1 = v28;
    a2 = v29;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100415EB8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100415EF0(void *a1, void *a2, char a3)
{
  sub_100412634(a1, a2, a3 & 1, v3);
}

void sub_100415EFC()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_100415F04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100415F14()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (v3 + v7 + 8) & ~v3;
  uint64_t v9 = v8 + v5;

  uint64_t v10 = v0 + v4;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v10, v1);
  swift_release();

  v11(v0 + v8, v1);

  return _swift_deallocObject(v0, v9, v6);
}

void sub_100416034(void *a1, void *a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void **)(v3 + 16);
  uint64_t v13 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + v10);
  uint64_t v14 = *(void **)(v3 + v11);

  sub_100412B98(a1, a2, v6, v12, v3 + v9, v13, v14, v3 + ((v8 + v11 + 8) & ~v8));
}

uint64_t sub_100416108()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100416140(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100416150()
{
  return swift_release();
}

unint64_t sub_100416158()
{
  unint64_t result = qword_100916028;
  if (!qword_100916028)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100916028);
  }
  return result;
}

void *sub_1004161B0(uint64_t a1, void *a2)
{
  id v51 = a2;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v50 - v6;
  uint64_t v52 = 0;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = CKRecord.recordType.getter();
  uint64_t v14 = v13;
  id v15 = [self recordTypes];
  uint64_t v16 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!v16[2])
  {
    __break(1u);
    goto LABEL_36;
  }
  id v50 = v11;
  uint64_t v17 = v16[4];
  uint64_t v18 = v16[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v12 == v17 && v14 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  if (!CKRecord.subscript.getter()) {
    goto LABEL_14;
  }
  self;
  uint64_t v22 = (void *)swift_dynamicCastObjCClass();
  if (!v22)
  {
    swift_unknownObjectRelease();
LABEL_14:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_17:
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909E40);
    goto LABEL_18;
  }
  id v23 = [v22 fileURL];
  swift_unknownObjectRelease();
  if (v23)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, 1, 1, v8);
  }
  unint64_t v24 = v50;
  sub_10036B73C((uint64_t)v4, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v24, v7, v8);
  id v38 = [self defaultManager];
  URL.path.getter();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v40 = [v38 fileExistsAtPath:v39];

  if (v40)
  {
    uint64_t v41 = v52;
    uint64_t v42 = Data.init(contentsOf:options:)();
    NSString v44 = (void (**)(char *, uint64_t))(v9 + 8);
    if (!v41)
    {
      uint64_t v4 = (char *)v42;
      uint64_t v7 = v43;
      uint64_t v52 = 0;
      (*v44)(v24, v8);
      goto LABEL_20;
    }
    swift_errorRelease();
    (*v44)(v24, v8);
    uint64_t v52 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v8);
  }
LABEL_18:
  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v21 = 0;
  uint64_t v7 = v58;
  if ((unint64_t)v58 >> 60 == 15) {
    return v21;
  }
  uint64_t v4 = v57;
LABEL_20:
  sub_100097E38((uint64_t)v4, (unint64_t)v7);
  id v25 = [v51 storeController];
  if (v25)
  {
    id v26 = v25;
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 newBackgroundContextWithAuthor:v27];

    uint64_t v29 = (void *)sub_100349CDC();
    if (v29)
    {
      id v30 = objc_allocWithZone((Class)REMReplicaIDSource);
      id v31 = v29;
      NSString v32 = String._bridgeToObjectiveC()();
      id v33 = [v30 initWithAccountID:v31 objectID:v31 property:v32];

      id v34 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
      id v35 = v33;
      sub_100097E38((uint64_t)v4, (unint64_t)v7);
      uint64_t v36 = v52;
      id v37 = sub_10028B1B0((uint64_t)v35);
      sub_100097F34((uint64_t)v4, (unint64_t)v7);

      if (v36)
      {
        sub_100097F34((uint64_t)v4, (unint64_t)v7);

        sub_100097F20((uint64_t)v4, (unint64_t)v7);
        swift_errorRelease();
      }
      else
      {
        if (v37)
        {
          *(void *)&long long v55 = 0xD00000000000001FLL;
          *((void *)&v55 + 1) = 0x80000001007D45B0;
          AnyHashable.init<A>(_:)();
          id v45 = [v37 orderedSet];
          id v46 = [v45 array];

          uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v56 = sub_100094134(&qword_100914560);
          *(void *)&long long v55 = v47;
          sub_10009A1A0(&v55, v54);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v53 = _swiftEmptyDictionarySingleton;
          sub_1002C48E0(v54, (uint64_t)&v57, isUniquelyReferenced_nonNull_native);
          uint64_t v21 = v53;
          swift_bridgeObjectRelease();
          sub_100233FFC((uint64_t)&v57);
          sub_100097F20((uint64_t)v4, (unint64_t)v7);
          sub_100097F34((uint64_t)v4, (unint64_t)v7);

          return v21;
        }
        sub_100097F34((uint64_t)v4, (unint64_t)v7);

        sub_100097F20((uint64_t)v4, (unint64_t)v7);
      }
      return _swiftEmptyDictionarySingleton;
    }
    else
    {
      sub_100097F20((uint64_t)v4, (unint64_t)v7);
      sub_100097F34((uint64_t)v4, (unint64_t)v7);
      return 0;
    }
  }
LABEL_36:
  unint64_t result = (void *)sub_100097F20((uint64_t)v4, (unint64_t)v7);
  __break(1u);
  return result;
}

uint64_t sub_100416904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100918010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10041697C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10041719C(v3);
  sub_10048612C(v4, &v19);
  swift_release();
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  uint64_t v17 = v20;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v9 = v21;
  uint64_t v8 = v22;
  uint64_t v26 = v21;
  uint64_t v27 = v20;
  uint64_t v16 = v21;
  uint64_t v25 = v19;
  uint64_t v10 = *(void *)(v19 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_1000F5C74((uint64_t)&v27);
    sub_1000F5C74((uint64_t)&v26);
    sub_1000F5C74((uint64_t)&v25);
    unint64_t v11 = (uint64_t *)(v7 + 40);
    do
    {
      uint64_t v12 = *v11;
      v15[0] = *(v11 - 1);
      v15[1] = v12;
      sub_100416B44(v15, &v17, (uint64_t)&v16, &v18);
      v11 += 2;
      --v10;
    }
    while (v10);
    sub_1000F5C48((uint64_t)&v25);
    sub_1000F5C48((uint64_t)&v27);
    sub_1000F5C48((uint64_t)&v26);
    swift_bridgeObjectRelease();
    uint64_t v6 = v17;
    uint64_t v5 = v18;
    uint64_t v9 = v16;
  }
  uint64_t v24 = v23;
  sub_1000F5C48((uint64_t)&v24);
  sub_1000F5C48((uint64_t)&v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1001261C0(v8);
  sub_1000F535C(v5, v9, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v5;
    a1[1] = v6;
    a1[2] = v9;
    a1[3] = v8;
    a1[4] = v13;
  }
  return result;
}

uint64_t sub_100416B44(uint64_t *a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  v8._countAndFlagsBits = 0x7C6C61636F6CLL;
  v8._object = (void *)0xE600000000000000;
  if (String.hasPrefix(_:)(v8))
  {
    sub_10030C54C(v7, v6);
    swift_bridgeObjectRelease();
    sub_10030C21C(v7, v6);
  }
  else
  {
    uint64_t v9 = *a4;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v9 = sub_100308F88(0, v9[2] + 1, 1, v9);
      *a4 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t v9 = sub_100308F88((void *)(v11 > 1), v12 + 1, 1, v9);
      *a4 = v9;
    }
    v9[2] = v12 + 1;
    uint64_t v13 = &v9[2 * v12];
    v13[4] = v7;
    v13[5] = v6;
    uint64_t v14 = *a2;
    uint64_t v15 = *(void *)(*a2 + 16);
    swift_bridgeObjectRetain();
    if (v15 && (unint64_t v16 = sub_1001806F8(v7, v6), (v17 & 1) != 0))
    {
      uint64_t v18 = *(void *)(*(void *)(*(void *)(v14 + 56) + 8 * v16) + 16);
      if (v18)
      {
        uint64_t v28 = v7;
        uint64_t v29 = a2;
        uint64_t v19 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        do
        {
          uint64_t v21 = *(v19 - 1);
          uint64_t v20 = *v19;
          swift_bridgeObjectRetain();
          v22._countAndFlagsBits = 0x7C6C61636F6CLL;
          v22._object = (void *)0xE600000000000000;
          if (String.hasPrefix(_:)(v22))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1001DE058(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v24 = _swiftEmptyArrayStorage[2];
            unint64_t v23 = _swiftEmptyArrayStorage[3];
            if (v24 >= v23 >> 1) {
              sub_1001DE058(v23 > 1, v24 + 1, 1);
            }
            _swiftEmptyArrayStorage[2] = v24 + 1;
            uint64_t v25 = &_swiftEmptyArrayStorage[2 * v24];
            v25[4] = v21;
            v25[5] = v20;
          }
          v19 += 2;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        a2 = v29;
        uint64_t v7 = v28;
      }
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = *a2;
      *a2 = 0x8000000000000000;
      sub_1002C4A2C((uint64_t)_swiftEmptyArrayStorage, v7, v6, v26);
      *a2 = v30;
    }
    else
    {
      sub_10030C54C(v7, v6);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100416DEC@<X0>(void *a1@<X8>)
{
  uint64_t v43 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_1002ED110((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v40 = v43 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v43 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v43 + 64);
  int64_t v41 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v42 = v43;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_26;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_40;
    }
    if (v9 >= v41) {
      break;
    }
    unint64_t v10 = *(void *)(v40 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v41) {
        break;
      }
      unint64_t v10 = *(void *)(v40 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v41) {
          break;
        }
        unint64_t v10 = *(void *)(v40 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v41) {
            break;
          }
          unint64_t v10 = *(void *)(v40 + 8 * v6);
          if (!v10)
          {
            int64_t v6 = v9 + 4;
            if (v9 + 4 >= v41) {
              break;
            }
            unint64_t v10 = *(void *)(v40 + 8 * v6);
            if (!v10)
            {
              int64_t v11 = v9 + 5;
              if (v11 >= v41) {
                break;
              }
              unint64_t v10 = *(void *)(v40 + 8 * v11);
              if (!v10)
              {
                while (1)
                {
                  int64_t v6 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_41;
                  }
                  if (v6 >= v41) {
                    goto LABEL_35;
                  }
                  unint64_t v10 = *(void *)(v40 + 8 * v6);
                  ++v11;
                  if (v10) {
                    goto LABEL_25;
                  }
                }
              }
              int64_t v6 = v11;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_26:
    unint64_t v12 = (uint64_t *)(*(void *)(v42 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    Swift::Double v15 = *(double *)(*(void *)(v42 + 56) + 8 * v8);
    swift_bridgeObjectRetain_n();
    Swift::Int32 v16 = Int32.init(timeIntervalSinceReferenceDate:)(v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v19 = sub_1001806F8(v14, v13);
    uint64_t v20 = v2[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v23 = v18;
    if (v2[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100318398();
      }
    }
    else
    {
      sub_10030D8F0(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = sub_1001806F8(v14, v13);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_42;
      }
      unint64_t v19 = v24;
    }
    double v26 = (double)v16;
    if (v23)
    {
      *(double *)(v2[7] + 8 * v19) = v26;
    }
    else
    {
      v2[(v19 >> 6) + 8] |= 1 << v19;
      uint64_t v27 = (uint64_t *)(v2[6] + 16 * v19);
      uint64_t *v27 = v14;
      v27[1] = v13;
      *(double *)(v2[7] + 8 * v19) = v26;
      uint64_t v28 = v2[2];
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_39;
      }
      v2[2] = v30;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
LABEL_35:
  swift_release();
  sub_1000F5C48((uint64_t)&v43);
  id v31 = *(void **)v38;
  uint64_t v32 = *(void *)(v38 + 8);
  uint64_t v33 = *(void *)(v38 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = sub_1001261C0(v34);
  uint64_t result = (uint64_t)sub_1000F535C(v31, v33, v35);
  if (v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a1 = v31;
    a1[1] = v32;
    a1[2] = v33;
    a1[3] = v2;
    a1[4] = v35;
  }
  return result;
}

uint64_t sub_10041719C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100417300((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_100417300((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_100417300(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
LABEL_4:
  uint64_t v21 = v4;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_18:
    Swift::Int32 v16 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    if (*v16 != 0x6C61636F6CLL || v16[1] != 0xE500000000000000)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v17._countAndFlagsBits = 0x7C6C61636F6CLL;
        v17._object = (void *)0xE600000000000000;
        Swift::Bool v18 = String.hasPrefix(_:)(v17);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v18)
        {
          *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
          uint64_t v4 = v21 + 1;
          if (!__OFADD__(v21, 1)) {
            goto LABEL_4;
          }
          __break(1u);
LABEL_30:
          swift_retain();
          return sub_1002402D0(v20, a2, v21, a3);
        }
      }
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v5 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_17:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_18;
  }
  int64_t v15 = v5 + 1;
  if (v5 + 1 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 2;
  if (v5 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v5 + 3;
  if (v5 + 3 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v5 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_30;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100417514(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v37 = v2;
  sub_100417BEC((uint64_t)a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100918030);
    uint64_t v13 = a1;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      Swift::Int32 v16 = (uint8_t *)swift_slowAlloc();
      Swift::String v17 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::Int32 v16 = 138412290;
      uint64_t v38 = v13;
      Swift::Bool v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::String v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No checked-in -- Checking in {interaction: %@}", v16, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v14 = v13;
    }

    sub_100417F7C(v13, a2);
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  Date.timeIntervalSince(_:)();
  if (v19 >= 10800.0)
  {
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100918030);
    uint64_t v27 = a1;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v36 = (void *)a2;
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v35 = v30;
      *(_DWORD *)uint64_t v30 = 138412290;
      uint64_t v38 = v27;
      id v31 = v27;
      a2 = (uint64_t)v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v27;

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "timeout expired -- reset check-in {interaction: %@}", v35, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v28 = v27;
    }

    sub_100417F7C(v27, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 1;
  }
  if (qword_100907558 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_100918030);
  uint64_t v21 = a1;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    os_log_t v37 = v22;
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v24 = 138412290;
    uint64_t v38 = v21;
    char v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v21;

    uint64_t v22 = v37;
    _os_log_impl((void *)&_mh_execute_header, v37, v23, "timeout hasn't expired -- don't check-in {interaction: %@}", v24, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return 0;
}

uint64_t sub_100417B24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918030);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918030);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100417BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_100914A98);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v36 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (id *)((char *)&v31 - v11);
  uint64_t v13 = sub_100094134(&qword_1009180E8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  Swift::Int32 v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Swift::Bool v18 = (char *)&v31 - v17;
  double v19 = sub_100418A00();
  uint64_t v20 = v19[2];
  if (v20)
  {
    uint64_t v32 = v4;
    uint64_t v33 = v10;
    uint64_t v34 = v18;
    uint64_t v35 = a2;
    uint64_t v21 = (uint64_t)v19 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v22 = *(void *)(v5 + 72);
    while (1)
    {
      sub_1000BF710(v21, (uint64_t)v12, &qword_100914A98);
      if ([*v12 matchesContactRepresentation:a1]) {
        break;
      }
      sub_1000966BC((uint64_t)v12, &qword_100914A98);
      v21 += v22;
      if (!--v20)
      {
        uint64_t v23 = 1;
        Swift::Bool v18 = v34;
        a2 = v35;
        goto LABEL_8;
      }
    }
    Swift::Bool v18 = v34;
    sub_100419150((uint64_t)v12, (uint64_t)v34);
    uint64_t v23 = 0;
    a2 = v35;
LABEL_8:
    uint64_t v4 = v32;
    uint64_t v10 = v33;
  }
  else
  {
    uint64_t v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, v23, 1, v4);
  swift_bridgeObjectRelease();
  sub_1000BF710((uint64_t)v18, (uint64_t)v16, &qword_1009180E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4) == 1)
  {
    uint64_t v24 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 1, 1, v24);
  }
  else
  {
    sub_100419150((uint64_t)v16, (uint64_t)v10);
    uint64_t v25 = *(int *)(v4 + 48);
    uint64_t v26 = &v36[v25];
    uint64_t v27 = &v10[v25];
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(a2, v26, v28);
    sub_1000966BC((uint64_t)v10, &qword_100914A98);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(a2, 0, 1, v28);
  }
  return sub_1000966BC((uint64_t)v18, &qword_1009180E8);
}

uint64_t sub_100417F7C(void *a1, uint64_t a2)
{
  uint64_t v77 = sub_100094134(&qword_100914A98);
  uint64_t v5 = *(void *)(v77 - 8);
  uint64_t v6 = __chkstk_darwin(v77);
  uint64_t v8 = (uint64_t **)((char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v10 = (id *)((char *)&v67 - v9);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::Int32 v16 = (char *)&v67 - v15;
  uint64_t v75 = v2;
  uint64_t v17 = sub_100418A00();
  Swift::Int v83 = v17;
  uint64_t v18 = v17[2];
  uint64_t v76 = v5;
  uint64_t v79 = a2;
  uint64_t v80 = v11;
  if (v18)
  {
    double v19 = v17;
    BOOL v73 = v16;
    uint64_t v20 = v12;
    unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v22 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    unint64_t v23 = 0;
    while (([*(id *)((char *)v19 + v21) matchesContactRepresentation:a1] & 1) == 0)
    {
      ++v23;
      v21 += v22;
      if (v18 == v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v76;
        a2 = v79;
        uint64_t v11 = v80;
        uint64_t v12 = v20;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v72 = v10;
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E2DC(v40, (uint64_t)qword_100918030);
    uint64_t v41 = v20;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v78 = (char *)((v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    uint64_t v43 = v73;
    uint64_t v35 = v80;
    id v74 = v42;
    v42(v73, v79, v80);
    id v44 = a1;
    id v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    int v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v71 = (void *)swift_slowAlloc();
      os_log_t v70 = (os_log_t)swift_slowAlloc();
      uint64_t v81 = (uint64_t)v44;
      v82[0] = (uint64_t)v70;
      *(_DWORD *)uint64_t v48 = 138412546;
      os_log_t v69 = v45;
      unint64_t v67 = v82;
      id v49 = v44;
      int v68 = v47;
      id v50 = v49;
      uint64_t v35 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v71 = v44;

      *(_WORD *)(v48 + 12) = 2080;
      sub_100419CFC();
      id v51 = v73;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_1000C51B8(v52, v53, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unsigned int v54 = *(void (**)(char *, uint64_t))(v41 + 8);
      v54(v51, v35);
      id v45 = v69;
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v68, "Replacing existing checkIn {interaction: %@, date: %s}", (uint8_t *)v48, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unsigned int v54 = *(void (**)(char *, uint64_t))(v41 + 8);
      v54(v43, v35);
    }

    uint64_t v5 = v76;
    long long v55 = v72;
    sub_100453270(v23, (uint64_t)v72);

    uint64_t v39 = v77;
    v54((char *)v55 + *(int *)(v77 + 48), v35);
    a2 = v79;
    uint64_t v25 = v74;
  }
  else
  {
LABEL_6:
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_100918030);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v26 = v78;
    v25(v78, a2, v11);
    id v27 = a1;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    LODWORD(v73) = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v72 = (id *)swift_slowAlloc();
      uint64_t v71 = (void *)swift_slowAlloc();
      uint64_t v81 = (uint64_t)v27;
      v82[0] = (uint64_t)v71;
      *(_DWORD *)uint64_t v30 = 138412546;
      os_log_t v70 = v28;
      uint64_t v31 = v12;
      id v32 = v27;
      id v74 = v25;
      id v33 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v72 = v27;

      *(_WORD *)(v30 + 12) = 2080;
      sub_100419CFC();
      uint64_t v34 = v78;
      uint64_t v35 = v80;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_1000C51B8(v36, v37, v82);
      a2 = v79;
      uint64_t v25 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v35);
      os_log_t v38 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v73, "CheckIn not found -- Adding new one {interaction: %@, date: %s}", (uint8_t *)v30, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v76;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = v80;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v80);
    }
    uint64_t v39 = v77;
  }
  uint64_t v56 = (char *)v8 + *(int *)(v39 + 48);
  void *v8 = a1;
  v25(v56, a2, v35);
  uint64_t v57 = (uint64_t)v83;
  id v58 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v57 = sub_10030B144(0, *(void *)(v57 + 16) + 1, 1, v57);
  }
  unint64_t v60 = *(void *)(v57 + 16);
  unint64_t v59 = *(void *)(v57 + 24);
  if (v60 >= v59 >> 1) {
    uint64_t v57 = sub_10030B144(v59 > 1, v60 + 1, 1, v57);
  }
  *(void *)(v57 + 16) = v60 + 1;
  sub_100419150((uint64_t)v8, v57+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v60);
  Swift::Int v83 = (void *)v57;
  uint64_t v61 = sub_100419768(v57);
  unint64_t v63 = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = v75[5];
  uint64_t v65 = v75[6];
  sub_1000C0DE0(v75 + 2, v64);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v65 + 8))(v61, v63, v64, v65);
  return sub_100097F34(v61, v63);
}

void *sub_100418A00()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_1000C0DE0(v0 + 2, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  if (v4 >> 60 == 15)
  {
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100918030);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No stored checkIns -- returning empty array", v8, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v9 = v3;
    unint64_t v10 = v4;
    uint64_t v11 = sub_1004191B8();
    sub_100097F20(v9, v10);
  }
  return v11;
}

uint64_t sub_100418D08@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5 == 2) {
      goto LABEL_3;
    }
LABEL_13:
    if (qword_100907558 == -1)
    {
LABEL_14:
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_100918030);
      swift_bridgeObjectRetain();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134217984;
        v17[0] = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected count for checkIn {count: %ld}", v15, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      uint64_t v16 = sub_100094134(&qword_100914A98);
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    }
LABEL_21:
    swift_once();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v5 != 2) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v4 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v6 = *(void *)(v4 + 32);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
  uint64_t ObjectType = swift_getObjectType();
  v17[0] = v6;
  sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
  throwingCast<A>(_:as:failureMessage:)();
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
  if (!v2)
  {
    uint64_t v8 = v19;
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
      uint64_t ObjectType = swift_getObjectType();
      v17[0] = v9;
      sub_1000963CC(0, &qword_100918100);
      throwingCast<A>(_:as:failureMessage:)();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      unint64_t v10 = v19;
      uint64_t v11 = sub_100094134(&qword_100914A98);
      *a2 = v8;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
    }
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v9 = *(void *)(v4 + 40);
      swift_unknownObjectRetain();
      goto LABEL_11;
    }
    __break(1u);
  }
  return result;
}

void sub_10041906C()
{
  uint64_t v1 = *v0;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v1 setUserInteractionsData:isa];
}

uint64_t sub_1004190C4()
{
  id v1 = [*v0 userInteractionsData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for RDUserInteractionSessionManager()
{
  return self;
}

uint64_t sub_100419150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100914A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1004191B8()
{
  uint64_t v1 = sub_100094134(&qword_1009180E8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_100094134(&qword_100914A98);
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - v8;
  sub_1000963CC(0, &qword_100917970);
  sub_100094134(&qword_1009180F0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100776E60;
  *(void *)(v10 + 32) = sub_1000963CC(0, &qword_1009180F8);
  *(void *)(v10 + 40) = sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
  *(void *)(v10 + 48) = sub_1000963CC(0, &qword_100918100);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  if (v0)
  {
    swift_bridgeObjectRelease();
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100918030);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 136446210;
      uint64_t v31 = v0;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v31 = sub_1000C51B8(v15, v16, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to decoded encoded CheckIns -- return empty array {error: %{public}s}", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  else
  {
    id v27 = v7;
    swift_bridgeObjectRelease();
    sub_100094134(&qword_100918108);
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v29 = v31;
    if (*(void *)(v31 + 16))
    {
      uint64_t v19 = *(void *)(v31 + 16);
      uint64_t v20 = (unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48);
      swift_bridgeObjectRetain();
      uint64_t v21 = 0;
      uint64_t v17 = _swiftEmptyArrayStorage;
      uint64_t v26 = v4;
      do
      {
        uint64_t v31 = *(void *)(v29 + 8 * v21 + 32);
        swift_bridgeObjectRetain();
        sub_100418D08(&v31, v3);
        swift_bridgeObjectRelease();
        if ((*v20)(v3, 1, v4) == 1)
        {
          sub_1000966BC((uint64_t)v3, &qword_1009180E8);
        }
        else
        {
          sub_100419150((uint64_t)v3, (uint64_t)v9);
          sub_100419150((uint64_t)v9, (uint64_t)v27);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = (void *)sub_10030B144(0, v17[2] + 1, 1, (unint64_t)v17);
          }
          unint64_t v23 = v17[2];
          unint64_t v22 = v17[3];
          uint64_t v24 = v28;
          if (v23 >= v22 >> 1)
          {
            uint64_t v25 = sub_10030B144(v22 > 1, v23 + 1, 1, (unint64_t)v17);
            uint64_t v24 = v28;
            uint64_t v17 = (void *)v25;
          }
          v17[2] = v23 + 1;
          sub_100419150((uint64_t)v27, (uint64_t)v17+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v23);
          uint64_t v4 = v26;
        }
        ++v21;
      }
      while (v19 != v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    sub_1000966BC((uint64_t)v30, &qword_100908190);
    swift_bridgeObjectRelease();
  }
  return v17;
}

uint64_t sub_100419768(uint64_t a1)
{
  uint64_t v50 = sub_100094134(&qword_100914A98);
  uint64_t v3 = *(void *)(v50 - 8);
  uint64_t v4 = __chkstk_darwin(v50);
  id v49 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v48 = (void **)((char *)v45 - v7);
  __chkstk_darwin(v6);
  unint64_t v53 = (void **)((char *)v45 - v8);
  int64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    v45[1] = v1;
    long long v55 = _swiftEmptyArrayStorage;
    sub_1001DE7D4(0, v9, 0);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v47 = *(void *)(v3 + 72);
    long long v46 = xmmword_10077B710;
    do
    {
      uint64_t v51 = v10;
      int64_t v52 = v9;
      uint64_t v11 = v53;
      sub_1000BF710(v10, (uint64_t)v53, &qword_100914A98);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = v46;
      uint64_t v13 = v50;
      uint64_t v14 = *(int *)(v50 + 48);
      uint64_t v15 = (char *)v48 + v14;
      unint64_t v16 = (char *)v11 + v14;
      uint64_t v17 = *v11;
      *uint64_t v48 = *v11;
      uint64_t v18 = type metadata accessor for Date();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
      v20(v15, v16, v18);
      *(void *)(v12 + 32) = v17;
      uint64_t v21 = *(int *)(v13 + 48);
      unint64_t v22 = v49;
      unint64_t v23 = &v49[v21];
      *(void *)id v49 = v17;
      v20(&v22[v21], v16, v18);
      id v24 = v17;
      *(NSDate *)(v12 + 40) = Date._bridgeToObjectiveC()();
      uint64_t v54 = v12;
      specialized Array._endMutation()();
      uint64_t v25 = v54;
      uint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
      v26(v23, v18);
      v26(v15, v18);
      sub_1000966BC((uint64_t)v53, &qword_100914A98);
      id v27 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE7D4(0, v27[2] + 1, 1);
        id v27 = v55;
      }
      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        sub_1001DE7D4(v28 > 1, v29 + 1, 1);
        id v27 = v55;
      }
      v27[2] = v29 + 1;
      v27[v29 + 4] = v25;
      uint64_t v10 = v51 + v47;
      int64_t v9 = v52 - 1;
    }
    while (v52 != 1);
  }
  uint64_t v30 = self;
  sub_100094134(&qword_10090F850);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  long long v55 = 0;
  id v32 = [v30 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v55];

  id v33 = v55;
  if (v32)
  {
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v35 = v33;
    uint64_t v36 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100907558 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_100918030);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v54 = v36;
      long long v55 = v41;
      *(_DWORD *)uint64_t v40 = 136446210;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v42 = String.init<A>(describing:)();
      uint64_t v54 = sub_1000C51B8(v42, v43, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to encode checkIns -- encodging empty array {error: %{public}s}", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    return 0;
  }
  return v34;
}

unint64_t sub_100419CFC()
{
  unint64_t result = qword_100908230;
  if (!qword_100908230)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908230);
  }
  return result;
}

void sub_100419D54()
{
  sub_10041AA04();
  sub_10041AC7C();
  sub_10041B4CC();
  sub_10041BC88();
  sub_10041C62C();
  sub_10041CA08();
  sub_100094134(&qword_1009181A8);
  sub_100094134(&qword_1009181B0);
  sub_1000967F4(&qword_1009181B8, &qword_1009181B0);
  static Promise.all<A>(_:)();
  swift_bridgeObjectRelease();
  *(void *)(swift_allocObject() + 16) = v0;
  id v1 = v0;
  uint64_t v2 = (void *)zalgo.getter();
  dispatch thunk of Promise.then<A>(on:closure:)();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_10041A064()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918110);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918110);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

NSString sub_10041A12C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100942250 = (uint64_t)result;
  return result;
}

id sub_10041A1F0()
{
  return sub_10041A958(type metadata accessor for RDAccountInitializer);
}

uint64_t type metadata accessor for RDAccountInitializer()
{
  return self;
}

uint64_t sub_10041A4D0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v6 - 8);
  uint64_t v20 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Notification();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = __chkstk_darwin(v9);
  v18[1] = *(void *)&v1[OBJC_IVAR___RDAccountInitializerDidCompleteInitializeAllAccountsObserver_queue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_10041FDAC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C5BF0;
  uint64_t v15 = _Block_copy(aBlock);
  unint64_t v16 = v1;
  static DispatchQoS.unspecified.getter();
  unint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
  return swift_release();
}

id sub_10041A940()
{
  return sub_10041A958(type metadata accessor for RDAccountInitializer.DidCompleteInitializeAllAccountsObserver);
}

id sub_10041A958(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for RDAccountInitializer.DidCompleteInitializeAllAccountsObserver()
{
  return self;
}

void sub_10041AA04()
{
  id v2 = [*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController) inMemoryPrimaryActiveCKAccountREMObjectID];
  if (v2)
  {
    objc_super v3 = v2;
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100918110);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v11[4] = v1;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v9 = Optional.descriptionOrNil.getter();
      v11[5] = sub_1000C51B8(v9, v10, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDAccountInitializer: No need to update in-memory PrimaryActiveCKAccountCaches {current: %{public}s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    v12[0] = 0xD000000000000028;
    v12[1] = 0x80000001007D4730;
    v12[3] = 0;
    v13[0] = 0;
    v12[2] = 0;
    *(void *)((char *)v13 + 6) = 0;
    __chkstk_darwin(0);
    v11[2] = v0;
    sub_1003B5ADC((uint64_t)v12, (uint64_t)sub_10041FCC4, (uint64_t)v11);
  }
}

uint64_t sub_10041AC7C()
{
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  id v49 = 0;
  long long v46 = v2;
  id v3 = [v2 fetchAccountsWithError:&v49];
  uint64_t v4 = v49;
  if (!v3)
  {
    uint64_t v15 = v49;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  id v5 = v3;
  sub_1000963CC(0, &qword_1009146B8);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  os_log_type_t v7 = v4;

  id v49 = _swiftEmptyArrayStorage;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_4:
      if (v8 < 1)
      {
        __break(1u);
        goto LABEL_52;
      }
      for (uint64_t i = 0; i != v8; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v10 = *(id *)(v6 + 8 * i + 32);
        }
        uint64_t v11 = v10;
        if ([v10 type] != (id)1
          || (id v12 = [v11 objectID],
              id v13 = [self localAccountID],
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0),
              char v14 = static NSObject.== infix(_:_:)(),
              v12,
              v13,
              (v14 & 1) != 0))
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v8 = (uint64_t)v49;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_18:
  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100918110);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  LOBYTE(v6) = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v4, (os_log_type_t)v6))
  {

    swift_release_n();
    goto LABEL_26;
  }
  uint64_t v1 = swift_slowAlloc();
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0) {
    goto LABEL_53;
  }
  uint64_t v18 = *(NSObject **)(v8 + 16);
  while (1)
  {
    swift_release();
    id v49 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v6, "Removing Extraneous Local Accounts {candidateAccounts.count: %ld}", (uint8_t *)v1, 0xCu);
    swift_slowDealloc();

LABEL_26:
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0) {
      break;
    }
    uint64_t v1 = *(void *)(v8 + 16);
    if (!v1) {
      return swift_release();
    }
LABEL_29:
    if (v1 >= 1)
    {
      uint64_t v19 = 0;
      unint64_t v48 = v8 & 0xC000000000000001;
      uint64_t v47 = v8;
      while (1)
      {
        if (v48) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(v8 + 8 * v19 + 32);
        }
        uint64_t v21 = v20;
        Swift::Bool v22 = REMAccount.isConsideredEmpty()();
        if (v23) {
          goto LABEL_37;
        }
        Swift::Bool v30 = v22;
        uint64_t v31 = v21;
        id v32 = v31;
        if (!v30)
        {
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v25, v39))
          {
            uint64_t v40 = swift_slowAlloc();
            uint64_t v41 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v40 = 138543618;
            id v42 = [v32 objectID];
            *(void *)(v40 + 4) = v42;
            *(_WORD *)(v40 + 12) = 2112;
            *(void *)(v40 + 14) = v32;
            *uint64_t v41 = v42;
            v41[1] = v32;
            _os_log_impl((void *)&_mh_execute_header, v25, v39, "Extraneous Local Account is not empty. Not Removing {accountObjID: %{public}@, account: %@}", (uint8_t *)v40, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v8 = v47;
            swift_slowDealloc();
          }
          else
          {

            uint64_t v25 = v32;
          }
          goto LABEL_32;
        }
        id v33 = v31;
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = swift_slowAlloc();
          uint64_t v37 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 138543618;
          id v38 = [v33 objectID];
          *(void *)(v36 + 4) = v38;
          *(_WORD *)(v36 + 12) = 2112;
          *(void *)(v36 + 14) = v33;
          *uint64_t v37 = v38;
          v37[1] = v33;

          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Extraneous Local Account is empty. Removing {accountObjID: %{public}@, account: %@}", (uint8_t *)v36, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          uint64_t v8 = v47;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v34 = v33;
        }

        type metadata accessor for Analytics();
        static Analytics.postEvent(_:payload:duration:)();
        id v43 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v46];
        uint64_t v25 = [v43 updateAccount:v33];
        [v25 removeFromStore];
        id v49 = 0;
        if (![v43 saveSynchronouslyWithError:&v49]) {
          break;
        }
        id v44 = v49;

LABEL_32:
        ++v19;

        if (v1 == v19) {
          return swift_release();
        }
      }
      id v45 = v49;
      _convertNSErrorToError(_:)();

      swift_willThrow();
LABEL_37:
      id v24 = v21;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        unint64_t v28 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 138543618;
        id v29 = [v24 objectID];
        *(void *)(v27 + 4) = v29;
        *(_WORD *)(v27 + 12) = 2112;
        *(void *)(v27 + 14) = v24;
        *unint64_t v28 = v29;
        v28[1] = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to query whether Extraneous Local Account is empty. Skipping {accountObjID: %{public}@, account: %@}", (uint8_t *)v27, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = v47;
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
      }
      goto LABEL_32;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (v1) {
    goto LABEL_29;
  }
  return swift_release();
}

void sub_10041B4CC()
{
  if ([*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController) supportsLocalInternalAccount])
  {
    id v1 = [self localInternalAccountID];
    id v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
    id v44 = 0;
    id v3 = [v2 fetchAccountWithObjectID:v1 error:&v44];
    if (v3)
    {
      uint64_t v4 = v44;
    }
    else
    {
      uint64_t v9 = v44;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      id v10 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v2];
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v10 __addAccountWithType:5 name:v11 accountObjectID:v1];

      if (qword_100907560 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100918110);
      char v14 = v12;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        id v42 = v1;
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = (void *)swift_slowAlloc();
        id v44 = v14;
        *(_DWORD *)uint64_t v17 = 138412290;
        uint64_t v18 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v40 = v14;

        id v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountInitializer: Creating localInternal account {accountChangeItem: %@}", v17, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v1 = v42;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v15 = v14;
      }

      id v44 = 0;
      if (![v10 saveSynchronouslyWithError:&v44])
      {
        uint64_t v34 = v44;
        _convertNSErrorToError(_:)();

        swift_willThrow();
LABEL_29:

        return;
      }
      uint64_t v19 = v44;
    }
    char v14 = [self siriFoundInAppsListID];
    id v44 = 0;
    id v20 = [v2 fetchListWithObjectID:v14 error:&v44];
    if (v20)
    {
      uint64_t v21 = v20;
      Swift::Bool v22 = v44;

      return;
    }
    uint64_t v23 = v44;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v10 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v2];
    id v44 = 0;
    buf = (uint8_t *)[v2 fetchAccountWithObjectID:v1 error:&v44];
    if (buf)
    {
      id v24 = v44;
      id v25 = [v10 updateAccount:buf];
      NSString v26 = String._bridgeToObjectiveC()();
      id v27 = [v10 addListWithName:v26 toAccountChangeItem:v25 listObjectID:v14];

      if (qword_100907560 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_100918110);
      id v29 = v27;
      Swift::Bool v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      uint64_t v41 = v25;
      if (os_log_type_enabled(v30, v31))
      {
        id v32 = (uint8_t *)swift_slowAlloc();
        id v38 = (void *)swift_slowAlloc();
        *(_DWORD *)id v32 = 138412290;
        id v44 = v29;
        os_log_type_t v39 = v14;
        id v33 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v38 = v29;

        char v14 = v39;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDAccountInitializer: Creating SiriFoundInApps list {listChangeItem: %@}", v32, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        Swift::Bool v30 = v29;
      }

      id v44 = 0;
      if ([v10 saveSynchronouslyWithError:&v44])
      {
        uint64_t v36 = v44;

        return;
      }
      uint64_t v37 = v44;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v10 = v29;
    }
    else
    {
      os_log_type_t v35 = v44;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    goto LABEL_29;
  }
  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100918110);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "StoreController not supportsLocalInternalAccount. Skipping initializeLocalInternalAccountIfNeeded", v8, 2u);
    swift_slowDealloc();
  }
}

void sub_10041BC88()
{
  id v1 = [self localAccountID];
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  uint64_t v64 = 0;
  id v3 = [v2 fetchAccountWithObjectID:v1 error:&v64];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v64;
    goto LABEL_3;
  }
  uint64_t v13 = v64;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
  char v14 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v2];
  NSString v15 = (id)_REMGetLocalizedString();
  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v16 = [v14 _addLocalAccountWithName:v15 accountObjectID:v1];

  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100918110);
  unint64_t v6 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v61 = v14;
    id v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = (void *)swift_slowAlloc();
    unint64_t v60 = v1;
    *(_DWORD *)id v20 = 138412290;
    uint64_t v64 = v6;
    uint64_t v21 = v2;
    Swift::Bool v22 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v57 = v6;

    id v2 = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAccountInitializer: Creating local account {changeItem: %@}", v20, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    id v1 = v60;
    swift_slowDealloc();
    char v14 = v61;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v18 = v6;
  }

  uint64_t v64 = 0;
  unsigned int v24 = [v14 saveSynchronouslyWithError:&v64];
  id v25 = v64;
  if (!v24)
  {
    id v29 = v64;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_20;
  }
  uint64_t v64 = 0;
  NSString v26 = v25;
  id v27 = [v2 fetchAccountWithObjectID:v1 error:&v64];
  if (v27)
  {
    uint64_t v4 = v27;
    uint64_t v28 = v64;

LABEL_3:
    unint64_t v6 = v4;
    uint64_t v64 = 0;
    id v7 = [v6 fetchListsWithError:&v64];
    uint64_t v8 = v64;
    if (v7)
    {
      uint64_t v9 = v7;
      sub_1000963CC(0, &qword_10090E198);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v11 = v8;

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v12)
      {

        return;
      }
      id v30 = [self localAccountDefaultListID];
      uint64_t v64 = 0;
      id v31 = [v2 fetchListWithObjectID:v30 error:&v64];
      if (v31)
      {
        unint64_t v62 = v31;
        uint64_t v32 = qword_100907560;
        id v33 = v64;
        if (v32 != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        sub_10008E2DC(v34, (uint64_t)qword_100918110);
        os_log_type_t v35 = v30;
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v36, v37))
        {
          id v38 = (uint8_t *)swift_slowAlloc();
          id v58 = (void *)swift_slowAlloc();
          uint64_t v64 = v35;
          *(_DWORD *)id v38 = 138543362;
          os_log_type_t v39 = v35;
          uint64_t v40 = v1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v58 = v35;

          _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDAccountInitializer: This should never happen: the store told us there's no lists in this account but we did find a list with the default list ID {listID: %{public}@}", v38, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v40 = v35;
        }

        return;
      }
      id v45 = v64;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      long long v46 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v2];
      char v14 = [v46 updateAccount:v6];
      NSString v47 = (id)_REMGetLocalizedString();
      if (!v47)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }

      if (qword_100907560 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_100918110);
      id v49 = v1;
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      unint64_t v63 = v6;
      if (os_log_type_enabled(v50, v51))
      {
        int64_t v52 = (uint8_t *)swift_slowAlloc();
        unint64_t v59 = (void *)swift_slowAlloc();
        *(_DWORD *)int64_t v52 = 138543362;
        uint64_t v64 = v49;
        id v53 = v30;
        uint64_t v54 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v59 = v49;

        id v30 = v53;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "RDAccountInitializer: Creating default list for local account {accountID: %{public}@}", v52, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v50 = v49;
      }

      uint64_t v64 = 0;
      if ([v46 saveSynchronouslyWithError:&v64])
      {
        long long v55 = v64;

        return;
      }
      uint64_t v56 = v64;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v1 = v63;

      unint64_t v6 = v46;
    }
    else
    {
      uint64_t v23 = v64;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      char v14 = v6;
    }
LABEL_20:

    return;
  }
  uint64_t v41 = v64;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();

  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    id v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDAccountInitializer: No local account is found or created", v44, 2u);
    swift_slowDealloc();
  }
}

void *sub_10041C62C()
{
  if (![*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController) hasPassedBuddyAndSystemDataMigrator])
  {
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100918110);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      NSString v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAccountInitializer: Not handling account data moves because we have not passed buddy or system data migrator", v11, 2u);
      swift_slowDealloc();
    }

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10077A530;
    sub_100094134(&qword_1009181A8);
    swift_allocObject();
    *(void *)(v12 + 32) = Promise.init(value:)();
    uint64_t v18 = (void *)v12;
    specialized Array._endMutation()();
    return v18;
  }
  uint64_t v18 = _swiftEmptyArrayStorage;
  id v1 = [[*(id *)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities) unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts];
  sub_1000963CC(0, &qword_1009181C0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_4:
      if (v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = AAAccountClassPrimary;
        do
        {
          if ((v2 & 0xC000000000000001) != 0) {
            id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v6 = *(id *)(v2 + 8 * v4 + 32);
          }
          id v7 = v6;
          sub_10041D25C(v6);
          sub_10041DD30(v7);
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (objc_msgSend(v7, "aa_isAccountClass:", v5)) {
            sub_10041E040(v7);
          }

          swift_release();
          ++v4;
        }
        while (v3 != v4);
        swift_bridgeObjectRelease_n();
        return v18;
      }
      __break(1u);
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease_n();
  if (qword_100907560 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_100918110);
  NSString v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountInitializer: No iCloud account signed in or not enabled Reminders.", v17, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

void sub_10041CA08()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  id v2 = [self localAccountID];
  id v33 = 0;
  id v3 = [v1 fetchAccountWithObjectID:v2 error:&v33];

  id v4 = v33;
  if (!v3)
  {
    id v24 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v33 = 0;
  id v5 = v4;
  id v6 = [v1 fetchAccountsWithError:&v33];
  id v7 = v33;
  if (v6)
  {
    uint64_t v8 = v6;
    sub_1000963CC(0, &qword_1009146B8);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v10 = v7;

    uint64_t v32 = v3;
    if (v9 >> 62)
    {
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11)
      {
LABEL_5:
        uint64_t v12 = 4;
        while (1)
        {
          if ((v9 & 0xC000000000000001) != 0) {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v13 = *(id *)(v9 + 8 * v12);
          }
          uint64_t v14 = v13;
          uint64_t v15 = v12 - 3;
          if (__OFADD__(v12 - 4, 1))
          {
            __break(1u);
            goto LABEL_31;
          }
          id v16 = [v13 accountTypeHost];
          unsigned __int8 v17 = [v16 isCloudBased];

          if (v17) {
            break;
          }
          ++v12;
          if (v15 == v11) {
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease_n();
        if (qword_100907560 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_100918110);
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.info.getter();
        id v3 = v32;
        if (os_log_type_enabled(v27, v28))
        {
          id v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is inactive (if empty) as we have some cloud accounts.", v29, 2u);
          swift_slowDealloc();
        }

        if (![v32 inactive])
        {
          Swift::Bool v30 = REMAccount.isConsideredEmpty()();
          if (!v31 && v30)
          {
            char v22 = 1;
            uint64_t v23 = v32;
            goto LABEL_18;
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_5;
      }
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_100918110);
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    id v3 = v32;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is active as there's no cloud account signed in.", v21, 2u);
      swift_slowDealloc();
    }

    if ([v32 inactive])
    {
      char v22 = 0;
      uint64_t v23 = v32;
LABEL_18:
      sub_10041F48C(v22, v23);
    }
  }
  else
  {
    id v25 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
LABEL_29:
}

uint64_t sub_10041CE50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v21 = &_swiftEmptyDictionarySingleton;
    sub_1002C6454(a1, 0x726F727265, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    uint64_t v7 = v21;
    swift_bridgeObjectRelease();
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100918110);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAccountInitializer: Posting notification initialized all accounts failed.", v11, 2u);
      swift_slowDealloc();
    }

    id v12 = [self defaultCenter];
    sub_100421ADC(v7);
    swift_bridgeObjectRelease();
    if (qword_100907568 != -1) {
      swift_once();
    }
    long long v21 = 0u;
    long long v22 = 0u;
    id v13 = (id)qword_100942250;
    Notification.init(name:object:userInfo:)();
    v14.super.Class isa = Notification._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    [v12 postNotification:v14.super.isa];
    swift_errorRelease();
  }
  else
  {
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_100918110);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountInitializer: Posting notification initialized all accounts done.", v18, 2u);
      swift_slowDealloc();
    }

    id v12 = [self defaultCenter];
    if (qword_100907568 != -1) {
      swift_once();
    }
    long long v21 = 0u;
    long long v22 = 0u;
    id v19 = (id)qword_100942250;
    Notification.init(name:object:userInfo:)();
    v14.super.Class isa = Notification._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    [v12 postNotification:v14.super.isa];
  }

  return notify_post(_REMStoreDidCompleteInitializeAllAccounts);
}

void sub_10041D25C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults);
  id v5 = [v4 acAccountIdentifiersToMigrateInactivatedCalDavData];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v7 + 16))
    {
      id v8 = [a1 displayAccount];
      if (v8)
      {
        unint64_t v9 = v8;
        id v10 = [v8 identifier];

        if (v10)
        {
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v13 = v12;

          uint64_t v14 = sub_10012674C(v7);
          swift_bridgeObjectRelease();
          uint64_t v32 = v14;
          swift_bridgeObjectRetain();
          char v15 = sub_1001CBC20(v11, v13, v14);
          swift_bridgeObjectRelease();
          if (v15)
          {
            sub_10065ACF8(v11, v13);
            swift_bridgeObjectRelease();
            if (*(void *)(v32 + 16))
            {
              sub_100209D8C(v32);
              swift_bridgeObjectRelease();
              v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_release();
            }
            else
            {
              swift_bridgeObjectRelease();
              v16.super.Class isa = 0;
            }
            [v4 setAcAccountIdentifiersToMigrateInactivatedCalDavData:v16.super.isa];

            if (qword_100907560 != -1) {
              swift_once();
            }
            uint64_t v24 = type metadata accessor for Logger();
            sub_10008E2DC(v24, (uint64_t)qword_100918110);
            swift_bridgeObjectRetain_n();
            id v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v25, v26))
            {
              id v27 = (uint8_t *)swift_slowAlloc();
              uint64_t v31 = swift_slowAlloc();
              *(_DWORD *)id v27 = 136446210;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v11, v13, &v31);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: AccountUtil has set the flag indicating we should try to 'migrate' inactivated CalDAV data to CloudKit if any {aaAccountIdentifier: %{public}s}.", v27, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            os_log_type_t v28 = *(void **)(v2 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
            type metadata accessor for RDAccountUtils.InactivatedICloudCalDavDataMover();
            *(void *)(swift_initStackObject() + 16) = v28;
            id v29 = v28;
            sub_1005FE424(a1, 0);

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            if (qword_100907560 != -1) {
              swift_once();
            }
            uint64_t v20 = type metadata accessor for Logger();
            sub_10008E2DC(v20, (uint64_t)qword_100918110);
            swift_bridgeObjectRetain();
            long long v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v21, v22))
            {
              uint64_t v23 = (uint8_t *)swift_slowAlloc();
              uint64_t v31 = swift_slowAlloc();
              *(_DWORD *)uint64_t v23 = 136446210;
              swift_bridgeObjectRetain();
              sub_1000C51B8(v11, v13, &v31);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data no signal flag is set for account %{public}s.", v23, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
          }
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100918110);
  oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v18, "RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data as no signal flag is set.", v19, 2u);
    swift_slowDealloc();
  }
}

void sub_10041DD30(void *a1)
{
  id v3 = [a1 displayAccount];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 identifier];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  unint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
  id v10 = sub_1006016C0(a1, v9);
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v9];
    id v13 = [v12 updateAccount:v11];
    __chkstk_darwin([v13 removeFromStore]);
    sub_100094134(&qword_1009181A8);
    swift_allocObject();
    Promise.init(resolver:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_100918110);
    swift_bridgeObjectRetain();
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v6, v8, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: There's no inactivated CalDAV account store to remove, we're done {appleAccountIdentifier: %{public}s}.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100094134(&qword_1009181A8);
    swift_allocObject();
    Promise.init(value:)();
  }
}

void sub_10041E040(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults);
  id v10 = [v9 acAccountIdentifierToMergeLocalDataIntoSyncData];
  if (v10)
  {
    uint64_t v11 = v10;
    id v44 = v8;
    uint64_t v45 = v6;
    os_log_t v47 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    [v9 setAcAccountIdentifierToMergeLocalDataIntoSyncData:0];
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10008E2DC(v5, (uint64_t)qword_100918110);
    swift_bridgeObjectRetain_n();
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v46 = v14;
    if (v17)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      id v2 = v18 + 12;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_1000C51B8((uint64_t)v47, v13, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: DCO has set the merge action flag asking us to move data to cloud, let's move on... {flagged: %{public}s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v22 = [a1 displayAccount];
    if (v22)
    {
      uint64_t v23 = v22;
      id v2 = [v22 identifier];

      if (v2)
      {
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        if (v24 == v47 && v26 == v13)
        {
          swift_bridgeObjectRelease();
LABEL_20:
          os_log_type_t v28 = *(void **)(v3 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store);
          type metadata accessor for RDAccountUtils.LocalDataToICloudMover();
          *(void *)(swift_initStackObject() + 16) = v28;
          id v29 = v28;
          sub_1005FF7DC(a1);

          swift_bridgeObjectRelease();
          return;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v27) {
          goto LABEL_20;
        }
        uint64_t v31 = v44;
        uint64_t v30 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v46, v5);
        id v32 = a1;
        swift_bridgeObjectRetain();
        id v2 = v32;
        id v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v33, v34))
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v5);
          return;
        }
        uint64_t v35 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v49 = (uint64_t)v36;
        *(_DWORD *)uint64_t v35 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v48 = sub_1000C51B8((uint64_t)v47, v13, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v35 + 12) = 2082;
        id v37 = [v2 displayAccount];
        if (v37)
        {
          id v38 = v37;
          os_log_t v47 = v36;
          id v39 = [v37 identifier];

          if (v39)
          {
            uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v42 = v41;

            uint64_t v48 = sub_1000C51B8(v40, v42, &v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: The DCO flagged identifier is not the same as that of the current primary iCloud account. Something went wrong or we've found a race condition, don't move data {flagged: %{public}s, primary: %{public}s}.", (uint8_t *)v35, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v5);
            return;
          }
          goto LABEL_29;
        }
LABEL_28:

        __break(1u);
LABEL_29:

        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  if (qword_100907560 != -1) {
    swift_once();
  }
  sub_10008E2DC(v5, (uint64_t)qword_100918110);
  os_log_t v47 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v19, "RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Data move not needed as no merge action flag was not set by the DCO.", v20, 2u);
    swift_slowDealloc();
  }
  os_log_t v21 = v47;
}

void sub_10041EACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  uint64_t v17 = qword_1009070D8;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100942078;
  os_log_type_t v19 = (void *)swift_allocObject();
  v19[2] = a6;
  v19[3] = a7;
  void v19[4] = a3;
  v19[5] = a4;
  v19[6] = a8;
  v19[7] = sub_10041FBE0;
  v19[8] = v16;
  v22[4] = sub_10041FC58;
  v22[5] = v19;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = sub_1000E13D0;
  v22[3] = &unk_1008C5B50;
  uint64_t v20 = _Block_copy(v22);
  swift_bridgeObjectRetain();
  swift_retain();
  id v21 = a8;
  swift_release();
  [a5 saveWithQueue:v18 completion:v20];
  _Block_release(v20);
}

uint64_t sub_10041EC64(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t (*a7)(void))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100918110);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_getErrorValue();
      uint64_t v15 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v15, v16, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded save failed {error: %s, appleAccountIdentifier: %{public}s}", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
    a4(a1);
    return swift_errorRelease();
  }
  else
  {
    if (qword_100907560 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_100918110);
    id v20 = a6;
    swift_bridgeObjectRetain_n();
    id v21 = v20;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138543618;
      uint64_t v26 = a7;
      id v27 = [v21 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v27;
      a7 = v26;

      *(_WORD *)(v24 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: Removed inactivated CalDAV account store {remAccountObjID: %{public}@, appleAccountIdentifier: %{public}s}.", (uint8_t *)v24, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return a7();
  }
}

uint64_t sub_10041F10C(uint64_t a1)
{
  id v1 = [self _groundTruth_primaryActiveCloudKitAccountInContext:a1];
  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100918110);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    if (v3) {
      id v7 = [v3 remObjectID];
    }
    else {
      id v7 = 0;
    }
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v8 = Optional.descriptionOrNil.getter();
    unint64_t v10 = v9;

    sub_1000C51B8(v8, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    if (v3) {
      id v11 = [v3 objectID];
    }
    else {
      id v11 = 0;
    }
    sub_100094134(&qword_1009181C8);
    uint64_t v12 = Optional.descriptionOrNil.getter();
    unint64_t v14 = v13;

    sub_1000C51B8(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAccountInitializer: Calling updateInMemoryPrimaryActiveCKAccountCachesIfNeeded with {remObjectID: %{public}s, managedObjectID: %{public}s}", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (qword_100907B10 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_100942618;
  uint64_t v16 = qword_100907B18;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100942620;
  swift_retain();
  sub_10034A19C(v3, v15, v17);

  swift_release();
  return swift_release();
}

void sub_10041F48C(char a1, void *a2)
{
  uint64_t v3 = v2;
  if (qword_100907560 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_100918110);
  id v7 = a2;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    id v11 = (void *)swift_slowAlloc();
    id v20 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138543618;
    uint64_t v18 = v3;
    id v19 = [v7 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v19;

    *(_WORD *)(v10 + 12) = 2082;
    if (a1) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xE500000000000000;
    }
    sub_1000C51B8(v12, v13, (uint64_t *)&v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountInitializer: Setting account inactive value {accountID: %{public}@, inactive: %{public}s}", (uint8_t *)v10, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:*(void *)(v3 + OBJC_IVAR____TtC7remindd20RDAccountInitializer_store)];
  id v15 = [v14 updateAccount:v7];
  [v15 setInactive:a1 & 1];
  id v20 = 0;
  if ([v14 saveSynchronouslyWithError:&v20])
  {
    id v16 = v20;
  }
  else
  {
    id v17 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_10041F7C8(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.utility(_:), v8);
  uint64_t v12 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v17;
  aBlock[4] = sub_10041FCBC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C5BA0;
  id v14 = _Block_copy(aBlock);
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  id v19 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v18);
  return swift_release();
}

uint64_t sub_10041FB38()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10041FB70()
{
  return sub_10041F7C8(0);
}

void sub_10041FB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10041EACC(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_10041FBA8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041FBE0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10041FC08()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10041FC58(uint64_t a1)
{
  return sub_10041EC64(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(uint64_t (**)(void))(v1 + 56));
}

uint64_t sub_10041FC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10041FC7C()
{
  return swift_release();
}

uint64_t sub_10041FC84()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10041FCBC()
{
  return sub_10041CE50(*(void *)(v0 + 16));
}

uint64_t sub_10041FCC4(uint64_t a1)
{
  return sub_10041F10C(a1);
}

uint64_t sub_10041FCE0()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10041FDAC()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  return (*(uint64_t (**)(unint64_t))(*(void *)(v0 + 16)
                                                     + OBJC_IVAR___RDAccountInitializerDidCompleteInitializeAllAccountsObserver_handler))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10041FE20()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10041FE58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Class isa = Notification._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(v1 + 16))(v1, isa);
}

uint64_t sub_10041FEC4()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t sub_100420004(unint64_t a1)
{
  return sub_10042002C(a1, &qword_1009100F8);
}

uint64_t sub_100420018(unint64_t a1)
{
  return sub_10042002C(a1, &qword_100910180);
}

uint64_t sub_10042002C(unint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaDictionary.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = _swiftEmptyDictionarySingleton;
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = ~v10;
    unint64_t v38 = a1 + 64;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 64);
    unint64_t v9 = a1;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_100094134((uint64_t *)&unk_100914660);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v6 = __CocoaDictionary.makeIterator()();
  unint64_t v38 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = v6 | 0x8000000000000000;
LABEL_11:
  int64_t v37 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v13 = v5 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v39 = 0;
  while ((v9 & 0x8000000000000000) != 0)
  {
    uint64_t v18 = __CocoaDictionary.Iterator.next()();
    if (!v18) {
      goto LABEL_45;
    }
    uint64_t v20 = v19;
    *(void *)&v41[0] = v18;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_dynamicCast();
    *(void *)&v41[0] = v20;
    sub_1000963CC(0, a2);
    swift_dynamicCast();
    id v21 = v42;
LABEL_36:
    *(void *)&v40[0] = v21;
    sub_1000963CC(0, a2);
    swift_dynamicCast();
    uint64_t v29 = *(void *)&v40[0];
    sub_10009A1A0((_OWORD *)((char *)v40 + 8), (_OWORD *)((char *)v41 + 8));
    sub_10009A1A0((_OWORD *)((char *)v41 + 8), v40);
    sub_10009A1A0(v40, v41);
    uint64_t result = NSObject._rawHashValue(seed:)(v5[5]);
    uint64_t v30 = -1 << *((unsigned char *)v5 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~v13[v31 >> 6]) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v31) & ~v13[v31 >> 6])) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = v13[v32];
      }
      while (v36 == -1);
      unint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)((char *)v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(v5[6] + 8 * v15) = v29;
    uint64_t result = (uint64_t)sub_10009A1A0(v41, (_OWORD *)(v5[7] + 32 * v15));
    ++v5[2];
  }
  if (v8)
  {
    unint64_t v16 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v17 = v16 | (v39 << 6);
LABEL_35:
    id v21 = *(void **)(*(void *)(v9 + 48) + 8 * v17);
    uint64_t v26 = *(void **)(*(void *)(v9 + 56) + 8 * v17);
    unint64_t v42 = v21;
    uint64_t v43 = v26;
    id v27 = v21;
    id v28 = v26;
    goto LABEL_36;
  }
  int64_t v22 = v39 + 1;
  if (__OFADD__(v39, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v22 >= v37) {
    goto LABEL_45;
  }
  unint64_t v23 = *(void *)(v38 + 8 * v22);
  int64_t v24 = v39 + 1;
  if (v23) {
    goto LABEL_34;
  }
  int64_t v24 = v39 + 2;
  if (v39 + 2 >= v37) {
    goto LABEL_45;
  }
  unint64_t v23 = *(void *)(v38 + 8 * v24);
  if (v23) {
    goto LABEL_34;
  }
  int64_t v24 = v39 + 3;
  if (v39 + 3 >= v37) {
    goto LABEL_45;
  }
  unint64_t v23 = *(void *)(v38 + 8 * v24);
  if (v23) {
    goto LABEL_34;
  }
  int64_t v24 = v39 + 4;
  if (v39 + 4 >= v37) {
    goto LABEL_45;
  }
  unint64_t v23 = *(void *)(v38 + 8 * v24);
  if (v23)
  {
LABEL_34:
    unint64_t v8 = (v23 - 1) & v23;
    unint64_t v17 = __clz(__rbit64(v23)) + (v24 << 6);
    int64_t v39 = v24;
    goto LABEL_35;
  }
  int64_t v25 = v39 + 5;
  if (v39 + 5 >= v37)
  {
LABEL_45:
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v5;
  }
  unint64_t v23 = *(void *)(v38 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v39 + 5;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v37) {
      goto LABEL_45;
    }
    unint64_t v23 = *(void *)(v38 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_34;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_10042048C(unint64_t a1)
{
  return sub_10042002C(a1, (unint64_t *)&unk_100914440);
}

uint64_t sub_1004204A0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100913960);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v29 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    unint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v38[0] = *v17;
    *((void *)&v38[0] + 1) = v18;
    id v20 = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100094134((uint64_t *)&unk_1009208C0);
    swift_dynamicCast();
    long long v34 = v30;
    long long v35 = v31;
    uint64_t v36 = v32;
    sub_10009A1A0(&v33, v37);
    long long v30 = v34;
    long long v31 = v35;
    uint64_t v32 = v36;
    sub_10009A1A0(v37, v38);
    sub_10009A1A0(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v21 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~v6[v22 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v22) & ~v6[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = v6[v23];
      }
      while (v27 == -1);
      unint64_t v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v30;
    *(_OWORD *)(v10 + 16) = v31;
    *(void *)(v10 + 32) = v32;
    uint64_t result = (uint64_t)sub_10009A1A0(&v34, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v29 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100420860(unint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaDictionary.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    if (v2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v5 = ~v8;
    unint64_t v35 = a1 + 64;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 64);
    unint64_t v7 = a1;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_100094134(&qword_100913960);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v4 = __CocoaDictionary.makeIterator()();
  unint64_t v35 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = v4 | 0x8000000000000000;
LABEL_11:
  int64_t v34 = (unint64_t)(v5 + 64) >> 6;
  unint64_t v11 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v36 = 0;
  while ((v7 & 0x8000000000000000) != 0)
  {
    uint64_t v17 = __CocoaDictionary.Iterator.next()();
    if (!v17) {
      goto LABEL_45;
    }
    uint64_t v19 = v18;
    *(void *)&long long v41 = v17;
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    swift_dynamicCast();
    uint64_t v47 = v19;
    id v20 = v46;
LABEL_36:
    *(void *)&v45[0] = v20;
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    swift_dynamicCast();
    swift_dynamicCast();
    long long v41 = v37;
    long long v42 = v38;
    uint64_t v43 = v39;
    sub_10009A1A0(&v40, v44);
    long long v37 = v41;
    long long v38 = v42;
    uint64_t v39 = v43;
    sub_10009A1A0(v44, v45);
    sub_10009A1A0(v45, &v41);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v27 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)&v11[8 * (v28 >> 6)]) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v28) & ~*(void *)&v11[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)&v11[8 * v29];
      }
      while (v33 == -1);
      unint64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)&v11[(v13 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v13;
    uint64_t v14 = v3[6] + 40 * v13;
    *(_OWORD *)uint64_t v14 = v37;
    *(_OWORD *)(v14 + 16) = v38;
    *(void *)(v14 + 32) = v39;
    uint64_t result = (uint64_t)sub_10009A1A0(&v41, (_OWORD *)(v3[7] + 32 * v13));
    ++v3[2];
  }
  if (v6)
  {
    unint64_t v15 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v16 = v15 | (v36 << 6);
LABEL_35:
    id v20 = *(void **)(*(void *)(v7 + 48) + 8 * v16);
    uint64_t v25 = *(void *)(*(void *)(v7 + 56) + 8 * v16);
    uint64_t v46 = v20;
    uint64_t v47 = v25;
    id v26 = v20;
    swift_unknownObjectRetain();
    goto LABEL_36;
  }
  int64_t v21 = v36 + 1;
  if (__OFADD__(v36, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v21 >= v34) {
    goto LABEL_45;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v21);
  int64_t v23 = v36 + 1;
  if (v22) {
    goto LABEL_34;
  }
  int64_t v23 = v36 + 2;
  if (v36 + 2 >= v34) {
    goto LABEL_45;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v23);
  if (v22) {
    goto LABEL_34;
  }
  int64_t v23 = v36 + 3;
  if (v36 + 3 >= v34) {
    goto LABEL_45;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v23);
  if (v22) {
    goto LABEL_34;
  }
  int64_t v23 = v36 + 4;
  if (v36 + 4 >= v34) {
    goto LABEL_45;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v23);
  if (v22)
  {
LABEL_34:
    unint64_t v6 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v23 << 6);
    int64_t v36 = v23;
    goto LABEL_35;
  }
  int64_t v24 = v36 + 5;
  if (v36 + 5 >= v34)
  {
LABEL_45:
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v3;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v36 + 5;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v34) {
      goto LABEL_45;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_34;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100420CF8(unint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaDictionary.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    if (v2) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v5 = ~v8;
    unint64_t v34 = a1 + 64;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 64);
    unint64_t v7 = a1;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_100094134(&qword_1009184A0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  if (!v2) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v4 = __CocoaDictionary.makeIterator()();
  unint64_t v34 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = v4 | 0x8000000000000000;
LABEL_11:
  int64_t v33 = (unint64_t)(v5 + 64) >> 6;
  unint64_t v11 = v3 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while ((v7 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()()) {
      goto LABEL_45;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_dynamicCast();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    swift_dynamicCast();
    uint64_t v18 = v35;
    uint64_t v19 = v36;
LABEL_36:
    uint64_t result = NSObject._rawHashValue(seed:)(v3[5]);
    uint64_t v26 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~v11[v27 >> 6]) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~v11[v27 >> 6])) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = v11[v28];
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)((char *)v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(v3[6] + 8 * v14) = v18;
    unint64_t v15 = (void *)(v3[7] + 16 * v14);
    *unint64_t v15 = v19;
    v15[1] = &off_1008C4CF0;
    ++v3[2];
  }
  if (v6)
  {
    unint64_t v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v17 = v16 | (v13 << 6);
LABEL_35:
    uint64_t v18 = *(void **)(*(void *)(v7 + 48) + 8 * v17);
    unint64_t v35 = v18;
    int64_t v36 = *(void **)(*(void *)(v7 + 56) + 8 * v17);
    uint64_t v19 = v36;
    id v24 = v18;
    id v25 = v36;
    goto LABEL_36;
  }
  int64_t v20 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v20 >= v33) {
    goto LABEL_45;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v20);
  int64_t v22 = v13 + 1;
  if (v21) {
    goto LABEL_34;
  }
  int64_t v22 = v13 + 2;
  if (v13 + 2 >= v33) {
    goto LABEL_45;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21) {
    goto LABEL_34;
  }
  int64_t v22 = v13 + 3;
  if (v13 + 3 >= v33) {
    goto LABEL_45;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21) {
    goto LABEL_34;
  }
  int64_t v22 = v13 + 4;
  if (v13 + 4 >= v33) {
    goto LABEL_45;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21)
  {
LABEL_34:
    unint64_t v6 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v22 << 6);
    int64_t v13 = v22;
    goto LABEL_35;
  }
  int64_t v23 = v13 + 5;
  if (v13 + 5 >= v33)
  {
LABEL_45:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v3;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v13 + 5;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v33) {
      goto LABEL_45;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_34;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

void sub_1004210E0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134((uint64_t *)&unk_100913970);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v11 >= v27) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  int64_t v13 = i + 1;
  if (!v12)
  {
    int64_t v13 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v14 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v12 = *(void *)(v28 + 8 * v14);
            if (v12)
            {
              int64_t v13 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_36;
              }
              if (v13 >= v27) {
                break;
              }
              unint64_t v12 = *(void *)(v28 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000C1AF8();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v12 - 1) & v12;
  unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
  for (i = v13; ; unint64_t v10 = v9 | (i << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_1001806F8(v17, v16);
    unint64_t v21 = v20;
    if (v22)
    {
      unint64_t v7 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t *v7 = v17;
      v7[1] = v16;
      uint64_t v8 = v2[7];

      *(void *)(v8 + 8 * v21) = v19;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    int64_t v23 = (uint64_t *)(v2[6] + 16 * v20);
    *int64_t v23 = v17;
    v23[1] = v16;
    *(void *)(v2[7] + 8 * v20) = v19;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_100421384(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100913960);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    sub_10009A1B0(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    id v18 = v17;
    swift_dynamicCast();
    sub_10009A1A0((_OWORD *)((char *)v37 + 8), v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10009A1A0(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10009A1A0(v35, v36);
    sub_10009A1A0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~v6[v20 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~v6[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = v6[v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10009A1A0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10042175C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100913B60);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v33 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v32 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = &v38;
  unint64_t v7 = &v40;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v34 = 0;
  unint64_t v9 = (unint64_t *)&qword_100909FB0;
  uint64_t v10 = NSNumber_ptr;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v34 + 1;
  if (__OFADD__(v34, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v32) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v33 + 8 * v19);
  int64_t v21 = v34 + 1;
  if (!v20)
  {
    int64_t v21 = v34 + 2;
    if (v34 + 2 >= v32) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v34 + 3;
      if (v34 + 3 >= v32) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v34 + 4;
        if (v34 + 4 >= v32) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v34 + 5;
          if (v34 + 5 < v32)
          {
            unint64_t v20 = *(void *)(v33 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v34 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v32) {
                break;
              }
              unint64_t v20 = *(void *)(v33 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000C1AF8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v34 = v21;
  uint64_t v35 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v34 << 6))
  {
    unint64_t v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    BOOL v24 = *(void **)(*(void *)(v1 + 56) + 8 * i);
    uint64_t v36 = *v23;
    uint64_t v37 = v23[1];
    sub_1000963CC(0, v9);
    swift_bridgeObjectRetain();
    id v25 = v24;
    swift_dynamicCast();
    sub_10009A1A0(v6, v7);
    sub_10009A1A0(v7, v41);
    sub_10009A1A0(v41, &v39);
    unint64_t result = sub_1001806F8(v36, v37);
    unint64_t v26 = result;
    if (v27)
    {
      unint64_t v11 = v7;
      unint64_t v12 = v6;
      uint64_t v13 = v1;
      unint64_t v14 = v10;
      int64_t v15 = v9;
      int64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v16 = v36;
      v16[1] = v37;
      unint64_t v9 = v15;
      uint64_t v10 = v14;
      uint64_t v1 = v13;
      unint64_t v6 = v12;
      unint64_t v7 = v11;
      uint64_t v17 = (_OWORD *)(v2[7] + 32 * v26);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      unint64_t result = (unint64_t)sub_10009A1A0(&v39, v17);
      unint64_t v5 = v35;
      if (!v35) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v28 = (uint64_t *)(v2[6] + 16 * result);
    *long long v28 = v36;
    v28[1] = v37;
    unint64_t result = (unint64_t)sub_10009A1A0(&v39, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v29 = v2[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v2[2] = v31;
    unint64_t v5 = v35;
    if (!v35) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v35 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100421ADC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100913960);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_dynamicCast();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10009A1A0(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10009A1A0(v35, v36);
    sub_10009A1A0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10009A1A0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100421E94(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100913960);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10009A1B0(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10009A1A0(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10009A1A0(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10009A1A0(v36, v37);
    sub_10009A1A0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10009A1A0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10042225C()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable);
  v3[4] = &off_1008BD2C0;
  v3[5] = &off_1008BD2D0;
  v3[3] = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_1004258F4(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

uint64_t sub_1004222E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 40))(v5);
  sub_1004F5590(v5, a1, *(void *)(a2 + 8));
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v5);
}

uint64_t sub_100422358()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable);
  v3[4] = &off_1008BDA30;
  v3[5] = &off_1008BDA40;
  v3[3] = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_100425450(v3, &OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

uint64_t sub_1004223E8()
{
  uint64_t v1 = *(void **)(*v0 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable);
  v4[4] = &off_1008C4AB0;
  v4[5] = &off_1008C4AC0;
  v4[3] = type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  v4[0] = v1;
  id v2 = v1;
  sub_100425450(v4, &OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v4);
}

uint64_t sub_100422474()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009181D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009181D0);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10042253C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 24);
  aBlock[4] = sub_100429C58;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C5E90;
  unint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

id *sub_1004227B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)*v0 + 10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = (char *)v0 + v1[17];
  swift_beginAccess();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v7, 1, AssociatedTypeWitness))
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  }
  if (*(id *)((char *)v0 + *((void *)*v0 + 20)))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))((char *)v0 + *((void *)*v0 + 16), v2);
  uint64_t v9 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = (char *)v0 + *((void *)*v0 + 19);
  sub_10012227C(*(void *)v10, *((void *)v10 + 1), *((void *)v10 + 2), *((void *)v10 + 3), *((void *)v10 + 4), *((unsigned int *)v10 + 10) | ((unint64_t)*((unsigned __int16 *)v10 + 22) << 32));
  swift_release();
  return v0;
}

uint64_t sub_100422AA4()
{
  sub_1004227B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDHousekeepingActivityScheduler()
{
  return sub_1000E6FBC();
}

void sub_100422B14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (void *)v1[3];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(void *)(v1[2] + 16))
  {
    if (qword_100907570 == -1)
    {
LABEL_4:
      uint64_t v9 = type metadata accessor for Logger();
      sub_10008E2DC(v9, (uint64_t)qword_1009181D0);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDHousekeepingActivityScheduler: Starting", v12, 2u);
        swift_slowDealloc();
      }

      *(void *)((char *)v1 + *(void *)(*v1 + 160)) = sub_10042455C();
      uint64_t v13 = swift_release();
      sub_100422DBC(v13);
      return;
    }
LABEL_13:
    swift_once();
    goto LABEL_4;
  }
  if (qword_100907570 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_1009181D0);
  int64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDHousekeepingActivityScheduler: No activities registered, we are not starting", v17, 2u);
    swift_slowDealloc();
  }
}

void sub_100422DBC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v49 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v47 = (char *)&v41 - v4;
  uint64_t v44 = *(void *)(v5 + 88);
  uint64_t v46 = *(void *)(v44 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v45 = (char *)&v41 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))((char *)&v41
                                                                                 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (void *)v2[3];
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  unint64_t v22 = (char *)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v22, v6);
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v23 + 48))(v13, 1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  if (v24 == 1)
  {
    uint64_t v25 = v2[2];
    uint64_t v26 = (char *)v2 + *(void *)(*v2 + 128);
    int64_t v27 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
    uint64_t v43 = v22;
    uint64_t v28 = v47;
    v27(v47, v26, v3);
    uint64_t v42 = v2[4];
    uint64_t v29 = swift_allocObject();
    swift_weakInit();
    long long v30 = (void *)swift_allocObject();
    uint64_t v31 = v44;
    v30[2] = v3;
    v30[3] = v31;
    uint64_t v30[4] = v29;
    v30[5] = v25;
    uint64_t v44 = v6;
    uint64_t v32 = v46;
    long long v41 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v46 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    long long v33 = v45;
    v41(v42, sub_100429C38, v30, v3, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v3);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v33, 0, 1, AssociatedTypeWitness);
    long long v34 = v48;
    uint64_t v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v48, v33, v44);
    uint64_t v36 = v43;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v36, v34, v35);
    swift_endAccess();
    sub_100423A88();
    return;
  }
  if (qword_100907570 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v37 = type metadata accessor for Logger();
  sub_10008E2DC(v37, (uint64_t)qword_1009181D0);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDHousekeepingActivityScheduler: Unexpectedly having an existing non-nil backgroundScheduler when trying to create and schedule a new one", v40, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100423380()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004233F4();
    return swift_release();
  }
  return result;
}

void sub_1004233F4()
{
  if (qword_100907570 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009181D0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RDHousekeepingActivityScheduler: Running scheduled background activity", v3, 2u);
    swift_slowDealloc();
  }

  __chkstk_darwin(v4);
  static os_log_type_t.info.getter();
  measureTimeElapsed(_:level:block:)();
  if (v5 > 10000.0)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDHousekeepingActivityScheduler: Running scheduled background activity took %f ms", v8, 0xCu);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100423604(uint64_t a1)
{
  os_log_type_t v2 = *(void **)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v1 + 64))(&v20, ObjectType, v1);
  if (v21)
  {
    sub_1000967D4(&v20, (uint64_t)v22);
    type metadata accessor for RDHousekeepingActivityScheduler.RateReducer();
    sub_100096838((uint64_t)v22, (uint64_t)&v20);
    swift_allocObject();
    sub_100424C1C(&v20);
    BOOL v4 = sub_100424F00();
    swift_release();
    if (v4)
    {
      if (qword_100907570 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10008E2DC(v5, (uint64_t)qword_1009181D0);
      id v6 = v2;
      os_log_type_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315138;
        uint64_t v23 = (uint64_t)v6;
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 16) + 16))(ObjectType);
        uint64_t v23 = sub_1000C51B8(v10, v11, (uint64_t *)&v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDHousekeepingActivityScheduler: activity %s randomly disallowed by rate reducer", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
      return 0;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
  }
  else
  {
    sub_1000966BC((uint64_t)&v20, (uint64_t *)&unk_10090EEB0);
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1)) {
    return 1;
  }
  if (qword_100907570 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_1009181D0);
  id v14 = v2;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(void *)&long long v20 = v14;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 16) + 16))(ObjectType);
    *(void *)&long long v20 = sub_1000C51B8(v18, v19, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDHousekeepingActivityScheduler: activity %s decided that it doesn't want to run at this moment", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_100423A4C(void *a1)
{
  return sub_100424C1C(a1);
}

void sub_100423A88()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v71 = *(void *)(v3 - 8);
  uint64_t v72 = v3;
  __chkstk_darwin(v3);
  uint64_t v69 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(v2 + 88);
  uint64_t v6 = *(void *)(v2 + 80);
  id v74 = *(void **)(v73 + 8);
  uint64_t v75 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v61 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  unint64_t v19 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v20 = (void *)v1[3];
  *unint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v22 = (char *)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v22, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v27 = AssociatedTypeWitness;
    uint64_t v28 = v76;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v76, v11, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness))
    {
      if (qword_100907570 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_1009181D0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v31, v32)) {
        goto LABEL_22;
      }
      long long v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v33 = 0;
      long long v34 = "RDHousekeepingActivityScheduler: Unexpectedly having pending activity on the scheduler (xpcActivity) when tr"
            "ying to create and schedule a new one";
    }
    else
    {
      v78[0] = *((void **)v1 + 2);
      swift_bridgeObjectRetain_n();
      sub_100426380(v78, (uint64_t (*)(void *))sub_100426938);
      swift_bridgeObjectRelease();
      if (v78[0][2])
      {
        uint64_t v66 = AssociatedConformanceWitness;
        uint64_t v35 = (void *)v78[0][5];
        id v36 = *((id *)v78[0] + 4);
        swift_release();
        if (qword_100907570 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        sub_10008E2DC(v37, (uint64_t)qword_1009181D0);
        uint64_t v38 = v36;
        static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
        static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        int v41 = v40;
        BOOL v42 = os_log_type_enabled(v39, v40);
        id v74 = v35;
        if (v42)
        {
          uint64_t v43 = swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          v79[0] = v65;
          *(_DWORD *)uint64_t v43 = 136446978;
          int v64 = v41;
          uint64_t ObjectType = swift_getObjectType();
          v78[0] = v38;
          uint64_t v45 = *(uint64_t (**)(void))(v35[2] + 16);
          os_log_t v63 = v39;
          uint64_t v46 = ObjectType;
          uint64_t v62 = ObjectType;
          uint64_t v47 = v45();
          v78[0] = (void *)sub_1000C51B8(v47, v48, v79);
          uint64_t v28 = v76;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 12) = 2082;
          uint64_t v77 = v38;
          (*(void (**)(void **__return_ptr, uint64_t))(v35[4] + 16))(v78, v46);
          sub_1000C0DE0(v78, (uint64_t)v78[3]);
          uint64_t v49 = v67;
          sub_1005086DC(v67);
          uint64_t v50 = v69;
          sub_100508214(v69);
          uint64_t v51 = Date.ISO8601Format(_:)();
          unint64_t v53 = v52;
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v50, v72);
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v49, v70);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v78);
          v78[0] = (void *)sub_1000C51B8(v51, v53, v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 22) = 1040;
          LODWORD(v78[0]) = 4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v43 + 28) = 2048;
          uint64_t v54 = (double (*)(uint64_t))v74[6];
          v78[0] = COERCE_void_(v54(v62));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          os_log_t v55 = v63;
          _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v64, "RDHousekeepingActivityScheduler: Activity with smallest throttling interval {identifier: %{public}s, due: %{public}s, interval: %.*f}", (uint8_t *)v43, 0x26u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v54 = (double (*)(uint64_t))v35[6];
        }
        uint64_t v57 = v66;
        uint64_t v58 = swift_getObjectType();
        double v59 = ((double (*)(uint64_t, void *))v54)(v58, v74);
        uint64_t v60 = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t, uint64_t, double))(v60 + 24))(v27, v60, v59);
        (*(void (**)(uint64_t, uint64_t))(v57 + 24))(v27, v57);

        goto LABEL_25;
      }
      swift_release();
      if (qword_100907570 != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      sub_10008E2DC(v56, (uint64_t)qword_1009181D0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v31, v32))
      {
LABEL_22:

LABEL_25:
        (*(void (**)(char *, uint64_t))(v12 + 8))(v28, v27);
        return;
      }
      long long v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v33 = 0;
      long long v34 = "RDHousekeepingActivityScheduler: Must have at least 1 activity to call q_updateBackgroundActivityCriteria()";
    }
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v34, v33, 2u);
    swift_slowDealloc();
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_100907570 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E2DC(v23, (uint64_t)qword_1009181D0);
  int v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "RDHousekeepingActivityScheduler: Unexpectedly could not get a scheduler (xpcActivity) when trying to schedule a new one", v26, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10042455C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  v27[1] = v2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_1009184A8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (char *)v1 + *(void *)(v2 + 144);
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = *((void *)v14 + 1);
  id v17 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = sub_100405004(v18, v19, v15, v16, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v31 = v20;
  id v30 = (id)v1[3];
  id v21 = v30;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v5, 1, 1, v22);
  id v23 = v21;
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  sub_100096654();
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_1009081C0);

  swift_release();
  type metadata accessor for RDHousekeepingActivityScheduler();
  sub_1000967F4(&qword_1009184B0, &qword_1009184A8);
  uint64_t v24 = v28;
  uint64_t v25 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v24);
  return v25;
}

uint64_t sub_10042493C()
{
  return swift_initClassMetadata2();
}

void sub_100424984(uint64_t a1)
{
  sub_1004249DC(a1);
}

uint64_t sub_1004249DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = qword_100907570;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v5 = (uint64_t *)(v1 + 40);
    uint64_t v16 = v4;
    do
    {
      uint64_t v7 = (void *)*(v5 - 1);
      uint64_t v8 = *v5;
      sub_10008E2DC(v4, (uint64_t)qword_1009181D0);
      id v9 = v7;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446210;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 16) + 16))(ObjectType);
        *(void *)(v12 + 4) = sub_1000C51B8(v14, v15, &v17);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDHousekeepingActivityScheduler: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}", (uint8_t *)v12, 0xCu);
        swift_arrayDestroy();
        uint64_t v4 = v16;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v6 = swift_getObjectType();
      sub_1004F51D4(0xD000000000000012, 0x80000001007D42C0, v6, *(void *)(v8 + 8));
      v5 += 2;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100424C1C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_1000C0DE0(a1, v4);
  double v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (sub_100428E5C(v6, 0.0) && !sub_100428E44(v6, 0.0))
  {
    if (qword_100907570 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_1009181D0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134217984;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDHousekeepingActivityScheduler: reduceFactor(=%f) is less than 0. It will set to 0.", v10, 0xCu);
      swift_slowDealloc();
    }

    swift_beginAccess();
    double v6 = 0.0;
  }
  if (sub_100428E5C(1.0, v6) && !sub_100428E44(v6, 1.0))
  {
    if (qword_100907570 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_1009181D0);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134217984;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDHousekeepingActivityScheduler: reduceFactor=(%f) is larger than 1. It will set to 1.", v14, 0xCu);
      swift_slowDealloc();
    }

    double v6 = 1.0;
  }
  *(double *)(v2 + 16) = v6;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v2;
}

BOOL sub_100424F00()
{
  double v1 = 1.0 - *(double *)(v0 + 16);
  if (sub_100428E44(v1, 0.0)) {
    return 1;
  }
  if (sub_100428E44(v1, 1.0)) {
    return 0;
  }
  unint64_t v3 = sub_100232E18(0x20000000000001uLL);
  return sub_100428E5C(v1, (double)v3 * 1.11022302e-16 + 0.0);
}

uint64_t type metadata accessor for RDHousekeepingActivityScheduler.RateReducer()
{
  return sub_1000E6FBC();
}

uint64_t sub_100424F9C()
{
  return sub_10042253C();
}

void sub_100424FC0(void *a1)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000C0DE0(a1, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  unint64_t v11 = v10;
  sub_1001CBB3C((uint64_t)v1 + OBJC_IVAR____TtC7remindd41RDSuggestedAttributesAutoTrainingActivity_babysitter, (uint64_t)v44);
  uint64_t v12 = v45;
  if (!v45)
  {
    sub_1000966BC((uint64_t)v44, (uint64_t *)&unk_10090E4D0);
    goto LABEL_9;
  }
  uint64_t v41 = v2;
  uint64_t v13 = v46;
  sub_1000C0DE0(v44, v45);
  uint64_t v14 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(v1, v9, v11, v12, v13);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);
  if (!v14)
  {
LABEL_9:
    sub_1004263F4(v9, v11);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10008E2DC(v4, (uint64_t)qword_10091BA40);
  uint64_t v16 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v6, v15, v4);
  sub_1003F08EC((uint64_t)a1, (uint64_t)v44);
  id v17 = v1;
  uint64_t v18 = Logger.logObject.getter();
  int v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v18, (os_log_type_t)v19))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
    goto LABEL_11;
  }
  int v38 = v19;
  os_log_t v39 = v18;
  os_log_type_t v40 = v14;
  uint64_t v20 = swift_slowAlloc();
  uint64_t v37 = swift_slowAlloc();
  uint64_t v47 = v37;
  *(_DWORD *)uint64_t v20 = 136446466;
  id v21 = [v17 waiterID];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    uint64_t v43 = sub_1000C51B8(v23, v25, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v36 = v20 + 14;
    id v26 = v17;
    uint64_t v28 = v45;
    uint64_t v27 = v46;
    sub_1000C0DE0(v44, v45);
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
    uint64_t v30 = v27;
    id v17 = v26;
    uint64_t v31 = v29(v28, v30);
    uint64_t v43 = sub_1000C51B8(v31, v32, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v44);
    os_log_t v33 = v39;
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v38, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v4);
    uint64_t v14 = v40;
LABEL_11:
    uint64_t v34 = a1[3];
    uint64_t v35 = a1[5];
    sub_1000C0DE0(a1, v34);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
    sub_100428AF0(v17, (uint64_t)a1);

    return;
  }

  __break(1u);
}

void sub_100425450(void *a1, void *a2)
{
  uint64_t v5 = v2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1000C0DE0(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  unint64_t v14 = v13;
  uint64_t v15 = (uint64_t)v2 + *a2;
  swift_beginAccess();
  sub_1001CBB3C(v15, (uint64_t)v48);
  uint64_t v16 = v49;
  if (!v49)
  {
    sub_1000966BC((uint64_t)v48, (uint64_t *)&unk_10090E4D0);
    goto LABEL_9;
  }
  uint64_t v45 = v3;
  uint64_t v17 = v50;
  sub_1000C0DE0(v48, v49);
  uint64_t v18 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 8))(v5, v12, v14, v16, v17);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
  if (!v18)
  {
LABEL_9:
    sub_1004263F4(v12, v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10008E2DC(v7, (uint64_t)qword_10091BA40);
  uint64_t v20 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v9, v19, v7);
  sub_1003F08EC((uint64_t)a1, (uint64_t)v48);
  id v21 = v5;
  uint64_t v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v22, (os_log_type_t)v23))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    goto LABEL_11;
  }
  int v42 = v23;
  os_log_t v43 = v22;
  uint64_t v44 = v18;
  uint64_t v24 = swift_slowAlloc();
  uint64_t v41 = swift_slowAlloc();
  uint64_t v51 = v41;
  *(_DWORD *)uint64_t v24 = 136446466;
  id v25 = [v21 waiterID];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v47 = sub_1000C51B8(v27, v29, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    v40[1] = v24 + 14;
    id v30 = v21;
    uint64_t v32 = v49;
    uint64_t v31 = v50;
    sub_1000C0DE0(v48, v49);
    os_log_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
    uint64_t v34 = v31;
    id v21 = v30;
    uint64_t v35 = v33(v32, v34);
    uint64_t v47 = sub_1000C51B8(v35, v36, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
    os_log_t v37 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v7);
    uint64_t v18 = v44;
LABEL_11:
    uint64_t v38 = a1[3];
    uint64_t v39 = a1[5];
    sub_1000C0DE0(a1, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
    sub_100428AF0(v21, (uint64_t)a1);

    return;
  }

  __break(1u);
}

void sub_1004258F4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000C0DE0(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  unint64_t v12 = v11;
  uint64_t v13 = (uint64_t)v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter;
  swift_beginAccess();
  sub_1001CBB3C(v13, (uint64_t)v46);
  uint64_t v14 = v47;
  if (!v47)
  {
    sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_10090E4D0);
    goto LABEL_9;
  }
  uint64_t v43 = v2;
  uint64_t v15 = v48;
  sub_1000C0DE0(v46, v47);
  uint64_t v16 = (void *)(*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 8))(v3, v10, v12, v14, v15);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v46);
  if (!v16)
  {
LABEL_9:
    sub_1004263F4(v10, v12);
    swift_willThrow();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10008E2DC(v5, (uint64_t)qword_10091BA40);
  uint64_t v18 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v7, v17, v5);
  sub_1003F08EC((uint64_t)a1, (uint64_t)v46);
  id v19 = v3;
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v20, (os_log_type_t)v21))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v46);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    goto LABEL_11;
  }
  int v40 = v21;
  os_log_t v41 = v20;
  int v42 = v16;
  uint64_t v22 = swift_slowAlloc();
  uint64_t v39 = swift_slowAlloc();
  uint64_t v49 = v39;
  *(_DWORD *)uint64_t v22 = 136446466;
  id v23 = [v19 waiterID];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v45 = sub_1000C51B8(v25, v27, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    v38[1] = v22 + 14;
    id v28 = v19;
    uint64_t v30 = v47;
    uint64_t v29 = v48;
    sub_1000C0DE0(v46, v47);
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8);
    uint64_t v32 = v29;
    id v19 = v28;
    uint64_t v33 = v31(v30, v32);
    uint64_t v45 = sub_1000C51B8(v33, v34, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v46);
    os_log_t v35 = v41;
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
    uint64_t v16 = v42;
LABEL_11:
    uint64_t v36 = a1[3];
    uint64_t v37 = a1[5];
    sub_1000C0DE0(a1, v36);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
    sub_100428AF0(v19, (uint64_t)a1);

    return;
  }

  __break(1u);
}

uint64_t sub_100425D9C(uint64_t a1)
{
  uint64_t v2 = v1;
  double v3 = *(double *)(v1 + 24);
  if (*(double *)(v1 + 16) < v3)
  {
    if (qword_100907570 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_1009181D0);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2048;
      *(double *)&long long v19 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDJitteredMinimumDelayXPCActivity: Requested delay (%f) is shorter than minimumDelay (%f). The minimumDelay value will take precedence.", (uint8_t *)v7, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      a1 = swift_release();
    }
  }
  if (*(double *)(v2 + 16) > v3) {
    double v3 = *(double *)(v2 + 16);
  }
  sub_100428A44(a1, 0.0, 1.0);
  double v9 = v8 + 1.0;
  if (qword_100907570 != -1) {
    swift_once();
  }
  double v10 = v3 * v9;
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_1009181D0);
  swift_retain();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v14 + 12) = 2048;
    *(double *)&long long v19 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDJitteredMinimumDelayXPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, jitteredMinimumDelay: %f}", (uint8_t *)v14, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  char v15 = *(unsigned char *)(v2 + 32);
  char v16 = *(unsigned char *)(v2 + 33);
  char v17 = *(unsigned char *)(v2 + 34);
  long long v19 = xmmword_10078B600;
  double v20 = v10;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  __int16 v23 = 1;
  char v24 = v15;
  __int16 v25 = 0;
  uint64_t v26 = 0x4024000000000000;
  char v27 = 0;
  char v28 = v16;
  char v29 = 0;
  char v30 = v17;
  int v31 = 0x10000;
  __int16 v32 = 513;
  char v33 = 7;
  Swift::Int v34 = sub_100332130((uint64_t)&off_1008B6CD0);
  sub_100595B1C(&v19);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004260D0()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDJitteredMinimumDelayXPCActivity()
{
  return self;
}

void sub_10042612C(double a1)
{
  *(double *)(*(void *)v1 + 16) = a1;
}

uint64_t sub_100426138()
{
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_1004261CC()
{
  return sub_100596208();
}

uint64_t sub_1004261F4(uint64_t a1)
{
  return sub_100425D9C(a1);
}

uint64_t sub_100426218(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  char v8 = *(unsigned char *)(v3 + 24);
  char v9 = *(unsigned char *)(v3 + 25);
  char v10 = *(unsigned char *)(v3 + 26);
  type metadata accessor for RDJitteredMinimumDelayXPCActivity();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(unsigned char *)(v11 + 32) = v8;
  *(unsigned char *)(v11 + 33) = v9;
  *(unsigned char *)(v11 + 34) = v10;
  *(void *)(v11 + 24) = v7;
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  void v12[4] = a3;
  type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject();
  id v13 = a1;
  swift_retain();
  *(void *)(v11 + 40) = sub_100597404(3, (uint64_t)sub_1000960FC, (uint64_t)v12);
  return v11;
}

uint64_t sub_100426308()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDJitteredMinimumDelayXPCActivityFactory()
{
  return self;
}

_UNKNOWN **sub_10042633C()
{
  return &off_1008C5DB0;
}

uint64_t sub_100426348@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100426218(a1, a2, a3);
  *a4 = result;
  return result;
}

_UNKNOWN **sub_100426374()
{
  return &off_1008C5DD0;
}

uint64_t sub_100426380(void **a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)sub_1001F54BC(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = v4 + 4;
  v7[1] = v5;
  uint64_t result = a2(v7);
  *a1 = v4;
  return result;
}

void sub_1004263F4(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  Swift::Int v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = self;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 babySatErrorWithOperationName:v9];

  sub_100094134((uint64_t *)&unk_10090DC70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = 0x696669746E656469;
  *(void *)(inited + 40) = 0xEA00000000007265;
  uint64_t v12 = a1;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  unint64_t v13 = sub_1002EDFE8(inited);
  id v14 = [v3 waiterID];
  if (v14)
  {
    char v15 = v14;
    type metadata accessor for Analytics();
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    v38[0] = v16;
    v38[1] = v18;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 0x646568736172632ELL;
    v19._object = (void *)0xE800000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    sub_1004210E0(v13);
    swift_bridgeObjectRelease();
    id v20 = v10;
    static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (qword_100907710 != -1) {
      swift_once();
    }
    uint64_t v21 = v36;
    uint64_t v22 = sub_10008E2DC(v36, (uint64_t)qword_10091BA40);
    char v24 = v34;
    uint64_t v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v22, v21);
    swift_bridgeObjectRetain_n();
    id v3 = v3;
    __int16 v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v21);
      return;
    }
    id v33 = v20;
    uint64_t v27 = swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_1000C51B8(v12, a2, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2082;
    id v28 = [v3 waiterID];
    if (v28)
    {
      char v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      uint64_t v37 = sub_1000C51B8(v30, v32, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
      return;
    }
  }
  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10042687C(uint64_t a1)
{
  return sub_1004222E4(a1, (uint64_t)&off_1008CC820);
}

uint64_t sub_1004268A8()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable);
  v3[4] = &off_1008CF358;
  v3[5] = &off_1008CF368;
  v3[3] = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  v3[0] = v1;
  swift_retain();
  sub_100425450(v3, &OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

void sub_100426938(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_131;
    }
    if (v4) {
      sub_100427C38(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_139;
  }
  Swift::Int v125 = v5;
  uint64_t v121 = a1;
  if (v4 < 2)
  {
    NSString v9 = (char *)_swiftEmptyArrayStorage;
    __dst = (void **)&_swiftEmptyArrayStorage[4];
    unint64_t v124 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_97:
      if (v12 >= 2)
      {
        uint64_t v113 = *v121;
        do
        {
          unint64_t v114 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_126;
          }
          if (!v113) {
            goto LABEL_138;
          }
          id v115 = v9;
          uint64_t v116 = v9 + 32;
          uint64_t v117 = *(void *)&v9[16 * v114 + 32];
          uint64_t v118 = *(void *)&v9[16 * v12 + 24];
          sub_100428088((void **)(v113 + 16 * v117), (void **)(v113 + 16 * *(void *)&v116[16 * v12 - 16]), v113 + 16 * v118, __dst);
          if (v2) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_127;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v115 = sub_1001F433C((uint64_t)v115);
          }
          if (v114 >= *((void *)v115 + 2)) {
            goto LABEL_128;
          }
          id v119 = &v115[16 * v114 + 32];
          *(void *)id v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v115 + 2);
          if (v12 > v120) {
            goto LABEL_129;
          }
          NSString v9 = v115;
          memmove(&v115[16 * v12 + 16], &v115[16 * v12 + 32], 16 * (v120 - v12));
          *((void *)v115 + 2) = v120 - 1;
          unint64_t v12 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      v124[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_100094134(&qword_10090F190);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    unint64_t v124 = (void *)v8;
    __dst = (void **)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v122 = *a1 - 16;
  uint64_t v123 = *a1 + 40;
  NSString v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v130 = v4;
  uint64_t v134 = *a1;
  while (1)
  {
    Swift::Int v13 = v10;
    Swift::Int v14 = v10 + 1;
    Swift::Int v131 = v10;
    if (v10 + 1 < v4)
    {
      uint64_t v126 = v9;
      uint64_t v127 = v2;
      uint64_t v15 = v11 + 16 * v14;
      uint64_t v16 = *(void **)v15;
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v18 = v11 + 16 * v10;
      Swift::String v19 = *(void **)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v22 = *(double (**)(uint64_t, uint64_t))(v17 + 48);
      id v23 = v16;
      id v24 = v19;
      Swift::Int v13 = v131;
      double v25 = v22(ObjectType, v17);
      uint64_t v26 = swift_getObjectType();
      uint64_t v27 = *(double (**)(uint64_t, uint64_t))(v20 + 48);
      uint64_t v28 = v20;
      Swift::Int v4 = v130;
      double v29 = v27(v26, v28);

      Swift::Int v14 = v131 + 2;
      if (v131 + 2 < v130)
      {
        uint64_t v30 = (uint64_t *)(v123 + 16 * v131);
        while (1)
        {
          Swift::Int v135 = v14;
          unint64_t v31 = (void *)*(v30 - 1);
          uint64_t v32 = *v30;
          Swift::Int v34 = (void *)*(v30 - 3);
          uint64_t v33 = *(v30 - 2);
          uint64_t v35 = swift_getObjectType();
          uint64_t v36 = *(double (**)(uint64_t, uint64_t))(v32 + 48);
          id v37 = v31;
          id v38 = v34;
          double v39 = v36(v35, v32);
          uint64_t v40 = swift_getObjectType();
          double v41 = (*(double (**)(uint64_t, uint64_t))(v33 + 48))(v40, v33);

          if (v25 < v29 == v39 >= v41) {
            break;
          }
          Swift::Int v14 = v135 + 1;
          v30 += 2;
          Swift::Int v4 = v130;
          if (v130 == v135 + 1)
          {
            Swift::Int v14 = v130;
            goto LABEL_22;
          }
        }
        Swift::Int v4 = v130;
        Swift::Int v14 = v135;
LABEL_22:
        Swift::Int v13 = v131;
      }
      NSString v9 = v126;
      uint64_t v2 = v127;
      uint64_t v11 = v134;
      if (v25 < v29)
      {
        if (v14 < v13) {
          goto LABEL_132;
        }
        if (v13 < v14)
        {
          int v42 = (long long *)(v122 + 16 * v14);
          Swift::Int v43 = v14;
          Swift::Int v44 = v13;
          uint64_t v45 = (long long *)(v134 + 16 * v13);
          do
          {
            if (v44 != --v43)
            {
              if (!v134) {
                goto LABEL_137;
              }
              long long v46 = *v45;
              *uint64_t v45 = *v42;
              *int v42 = v46;
            }
            ++v44;
            --v42;
            ++v45;
          }
          while (v44 < v43);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13)) {
        goto LABEL_130;
      }
      if (v14 - v13 < v125) {
        break;
      }
    }
LABEL_49:
    if (v14 < v13) {
      goto LABEL_125;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      NSString v9 = sub_1001F3D80(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v63 = *((void *)v9 + 2);
    unint64_t v62 = *((void *)v9 + 3);
    unint64_t v12 = v63 + 1;
    uint64_t v11 = v134;
    if (v63 >= v62 >> 1)
    {
      uint64_t v112 = sub_1001F3D80((char *)(v62 > 1), v63 + 1, 1, v9);
      uint64_t v11 = v134;
      NSString v9 = v112;
    }
    *((void *)v9 + 2) = v12;
    int v64 = v9 + 32;
    uint64_t v65 = &v9[16 * v63 + 32];
    *(void *)uint64_t v65 = v13;
    *((void *)v65 + 1) = v14;
    Swift::Int v137 = v14;
    if (v63)
    {
      while (1)
      {
        unint64_t v66 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v71 = &v64[16 * v12];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_114;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_115;
          }
          unint64_t v78 = v12 - 2;
          uint64_t v79 = &v64[16 * v12 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_117;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_120;
          }
          if (v83 >= v74)
          {
            id v101 = &v64[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_124;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v95 = *((void *)v9 + 4);
            uint64_t v96 = *((void *)v9 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_80;
          }
          uint64_t v68 = *((void *)v9 + 4);
          uint64_t v67 = *((void *)v9 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_116;
        }
        unint64_t v78 = v12 - 2;
        uint64_t v84 = &v64[16 * v12 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_119;
        }
        uint64_t v90 = &v64[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_122;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_123;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_86:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v89) {
          goto LABEL_118;
        }
        uint64_t v97 = &v64[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_121;
        }
        if (v100 < v88) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v12)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v11) {
          goto LABEL_136;
        }
        uint64_t v106 = v9;
        uint64_t v107 = &v64[16 * v105];
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = &v64[16 * v66];
        uint64_t v110 = *((void *)v109 + 1);
        sub_100428088((void **)(v11 + 16 * *(void *)v107), (void **)(v11 + 16 * *(void *)v109), v11 + 16 * v110, __dst);
        if (v2) {
          goto LABEL_108;
        }
        if (v110 < v108) {
          goto LABEL_111;
        }
        if (v66 > *((void *)v106 + 2)) {
          goto LABEL_112;
        }
        *(void *)uint64_t v107 = v108;
        *(void *)&v64[16 * v105 + 8] = v110;
        unint64_t v111 = *((void *)v106 + 2);
        if (v66 >= v111) {
          goto LABEL_113;
        }
        NSString v9 = v106;
        unint64_t v12 = v111 - 1;
        memmove(&v64[16 * v66], v109 + 16, 16 * (v111 - 1 - v66));
        *((void *)v106 + 2) = v111 - 1;
        uint64_t v11 = v134;
        if (v111 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v4 = v130;
    Swift::Int v10 = v137;
    if (v137 >= v130) {
      goto LABEL_97;
    }
  }
  if (__OFADD__(v13, v125)) {
    goto LABEL_133;
  }
  if (v13 + v125 >= v4) {
    Swift::Int v47 = v4;
  }
  else {
    Swift::Int v47 = v13 + v125;
  }
  if (v47 >= v13)
  {
    if (v14 != v47)
    {
      uint64_t v128 = v2;
      uint64_t v48 = v122 + 16 * v14;
      Swift::Int v129 = v47;
      do
      {
        long long v50 = *(_OWORD *)(v11 + 16 * v14);
        Swift::Int v51 = v13;
        uint64_t v132 = v48;
        uint64_t v52 = v48;
        Swift::Int v136 = v14;
        while (1)
        {
          uint64_t v138 = *((void *)&v50 + 1);
          unint64_t v53 = *(void **)v52;
          uint64_t v139 = *(void *)(v52 + 8);
          uint64_t v54 = (void *)v50;
          uint64_t v55 = swift_getObjectType();
          uint64_t v56 = *(double (**)(uint64_t, uint64_t))(v138 + 48);
          id v57 = v54;
          id v58 = v53;
          double v59 = v56(v55, v138);
          uint64_t v60 = swift_getObjectType();
          double v61 = (*(double (**)(uint64_t))(v139 + 48))(v60);

          if (v59 >= v61) {
            break;
          }
          uint64_t v11 = v134;
          Swift::Int v49 = v136;
          if (!v134) {
            goto LABEL_135;
          }
          long long v50 = *(_OWORD *)(v52 + 16);
          *(_OWORD *)(v52 + 16) = *(_OWORD *)v52;
          *(_OWORD *)uint64_t v52 = v50;
          v52 -= 16;
          if (v136 == ++v51) {
            goto LABEL_42;
          }
        }
        uint64_t v11 = v134;
        Swift::Int v49 = v136;
LABEL_42:
        Swift::Int v14 = v49 + 1;
        Swift::Int v13 = v131;
        uint64_t v48 = v132 + 16;
      }
      while (v14 != v129);
      Swift::Int v14 = v129;
      uint64_t v2 = v128;
    }
    goto LABEL_49;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100427170(uint64_t *a1)
{
  uint64_t v160 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  id v159 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v158 = (char *)&v142 - v6;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  id v157 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v156 = (char *)&v142 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 < v11)
  {
    if (v11 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v11 + 1;
    }
    if (v11 >= -1)
    {
      uint64_t v153 = v1;
      id v144 = a1;
      if (v11 < 2)
      {
        uint64_t v16 = _swiftEmptyArrayStorage;
        NSString v152 = (void **)&_swiftEmptyArrayStorage[4];
        if (v11 != 1)
        {
          unint64_t v20 = _swiftEmptyArrayStorage[2];
          Swift::String v19 = (char *)_swiftEmptyArrayStorage;
          if (v20 < 2) {
            goto LABEL_112;
          }
          goto LABEL_100;
        }
        uint64_t v145 = _swiftEmptyArrayStorage;
        a1 = v144;
        Swift::Int v147 = v12;
      }
      else
      {
        Swift::Int v147 = v12;
        uint64_t v14 = v13 >> 1;
        sub_100094134(&qword_10090F190);
        uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v15 + 16) = v14;
        uint64_t v145 = (void *)v15;
        NSString v152 = (void **)(v15 + 32);
      }
      Swift::Int v17 = 0;
      uint64_t v18 = *a1;
      v155 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v143 = v18 + 40;
      uint64_t v142 = v18 - 16;
      Swift::String v19 = (char *)_swiftEmptyArrayStorage;
      Swift::Int v149 = v11;
      uint64_t v161 = v18;
      while (1)
      {
        Swift::Int v21 = v17++;
        Swift::Int v150 = v21;
        if (v17 < v11)
        {
          uint64_t v22 = v18 + 16 * v17;
          id v23 = *(void **)v22;
          uint64_t v24 = *(void *)(v22 + 8);
          uint64_t v25 = v18 + 16 * v21;
          uint64_t v26 = *(void **)v25;
          uint64_t v27 = *(void *)(v25 + 8);
          uint64_t ObjectType = swift_getObjectType();
          id v163 = v23;
          uint64_t v29 = *(void *)(v24 + 16);
          id v30 = v23;
          id v31 = v26;
          uint64_t v32 = (uint64_t)v156;
          uint64_t v33 = v29;
          Swift::Int v11 = v149;
          sub_10050812C(ObjectType, v33);
          Swift::Int v34 = v158;
          Optional<A>.orDistantPast.getter();
          sub_1000966BC(v32, (uint64_t *)&unk_100909A40);
          uint64_t v35 = swift_getObjectType();
          id v163 = v31;
          uint64_t v36 = *(void *)(v27 + 16);
          uint64_t v37 = (uint64_t)v157;
          sub_10050812C(v35, v36);
          id v38 = v159;
          Optional<A>.orDistantPast.getter();
          sub_1000966BC(v37, (uint64_t *)&unk_100909A40);
          LODWORD(v154) = static Date.< infix(_:_:)();
          double v39 = (char *)*v155;
          uint64_t v40 = v160;
          (*v155)(v38, v160);
          Swift::String v151 = v39;
          ((void (*)(char *, uint64_t))v39)(v34, v40);
          Swift::Int v21 = v150;

          Swift::Int v17 = v21 + 2;
          if (v21 + 2 < v11)
          {
            uint64_t v146 = v19;
            double v41 = (uint64_t *)(v143 + 16 * v21);
            while (1)
            {
              int v42 = (void *)*(v41 - 1);
              uint64_t v43 = *v41;
              Swift::Int v44 = (void *)*(v41 - 3);
              uint64_t v45 = *(v41 - 2);
              uint64_t v46 = swift_getObjectType();
              id v163 = v42;
              uint64_t v47 = *(void *)(v43 + 16);
              *(void *)&long long v162 = v42;
              id v48 = v44;
              uint64_t v49 = (uint64_t)v156;
              sub_10050812C(v46, v47);
              long long v50 = v158;
              Optional<A>.orDistantPast.getter();
              sub_1000966BC(v49, (uint64_t *)&unk_100909A40);
              uint64_t v51 = swift_getObjectType();
              id v163 = v48;
              uint64_t v52 = (uint64_t)v157;
              sub_10050812C(v51, *(void *)(v45 + 16));
              unint64_t v53 = v159;
              Optional<A>.orDistantPast.getter();
              sub_1000966BC(v52, (uint64_t *)&unk_100909A40);
              LODWORD(v43) = static Date.< infix(_:_:)();
              uint64_t v54 = v53;
              uint64_t v55 = v160;
              uint64_t v56 = (void (*)(char *, uint64_t))v151;
              ((void (*)(char *, uint64_t))v151)(v54, v160);
              v56(v50, v55);

              if ((v154 ^ v43)) {
                break;
              }
              ++v17;
              v41 += 2;
              Swift::Int v11 = v149;
              if (v149 == v17)
              {
                Swift::Int v17 = v149;
                Swift::String v19 = v146;
                goto LABEL_23;
              }
            }
            Swift::String v19 = v146;
            Swift::Int v11 = v149;
LABEL_23:
            Swift::Int v21 = v150;
          }
          uint64_t v18 = v161;
          if (v154)
          {
            if (v17 < v21) {
              goto LABEL_136;
            }
            if (v21 < v17)
            {
              id v57 = (long long *)(v142 + 16 * v17);
              Swift::Int v58 = v17;
              Swift::Int v59 = v21;
              uint64_t v60 = (long long *)(v161 + 16 * v21);
              do
              {
                if (v59 != --v58)
                {
                  if (!v18) {
                    goto LABEL_141;
                  }
                  long long v61 = *v60;
                  long long *v60 = *v57;
                  *id v57 = v61;
                }
                ++v59;
                --v57;
                ++v60;
              }
              while (v59 < v58);
            }
          }
        }
        if (v17 < v11)
        {
          if (__OFSUB__(v17, v21)) {
            goto LABEL_134;
          }
          if (v17 - v21 < v147)
          {
            if (__OFADD__(v21, v147)) {
              goto LABEL_137;
            }
            if (v21 + v147 >= v11) {
              Swift::Int v62 = v11;
            }
            else {
              Swift::Int v62 = v21 + v147;
            }
            if (v62 < v21)
            {
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              break;
            }
            if (v17 != v62)
            {
              uint64_t v146 = v19;
              unint64_t v63 = (char *)(v142 + 16 * v17);
              Swift::Int v148 = v62;
              do
              {
                long long v65 = *(_OWORD *)(v18 + 16 * v17);
                Swift::Int v66 = v21;
                Swift::String v151 = v63;
                uint64_t v67 = v63;
                Swift::Int v154 = v17;
                while (1)
                {
                  long long v162 = v65;
                  uint64_t v68 = *(void **)v67;
                  uint64_t v69 = *((void *)v67 + 1);
                  char v70 = (void *)v65;
                  uint64_t v71 = swift_getObjectType();
                  id v163 = (id)v162;
                  uint64_t v72 = *(void *)(*((void *)&v162 + 1) + 16);
                  id v73 = v70;
                  id v74 = v68;
                  uint64_t v75 = (uint64_t)v156;
                  sub_10050812C(v71, v72);
                  uint64_t v76 = v158;
                  Optional<A>.orDistantPast.getter();
                  sub_1000966BC(v75, (uint64_t *)&unk_100909A40);
                  uint64_t v77 = swift_getObjectType();
                  id v163 = v74;
                  uint64_t v78 = (uint64_t)v157;
                  sub_10050812C(v77, *(void *)(v69 + 16));
                  uint64_t v79 = v159;
                  Optional<A>.orDistantPast.getter();
                  sub_1000966BC(v78, (uint64_t *)&unk_100909A40);
                  LOBYTE(v68) = static Date.< infix(_:_:)();
                  uint64_t v80 = *v155;
                  uint64_t v81 = v79;
                  uint64_t v82 = v160;
                  (*v155)(v81, v160);
                  v80(v76, v82);

                  if ((v68 & 1) == 0) {
                    break;
                  }
                  uint64_t v18 = v161;
                  Swift::Int v64 = v154;
                  if (!v161) {
                    goto LABEL_139;
                  }
                  long long v65 = *((_OWORD *)v67 + 1);
                  *((_OWORD *)v67 + 1) = *(_OWORD *)v67;
                  *(_OWORD *)uint64_t v67 = v65;
                  v67 -= 16;
                  if (v64 == ++v66) {
                    goto LABEL_44;
                  }
                }
                uint64_t v18 = v161;
                Swift::Int v64 = v154;
LABEL_44:
                Swift::Int v17 = v64 + 1;
                Swift::Int v21 = v150;
                unint64_t v63 = v151 + 16;
              }
              while (v17 != v148);
              Swift::Int v17 = v148;
              Swift::String v19 = v146;
            }
          }
        }
        if (v17 < v21) {
          goto LABEL_129;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v19 = sub_1001F3D80(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        unint64_t v84 = *((void *)v19 + 2);
        unint64_t v83 = *((void *)v19 + 3);
        unint64_t v20 = v84 + 1;
        uint64_t v18 = v161;
        if (v84 >= v83 >> 1)
        {
          uint64_t v134 = sub_1001F3D80((char *)(v83 > 1), v84 + 1, 1, v19);
          uint64_t v18 = v161;
          Swift::String v19 = v134;
        }
        *((void *)v19 + 2) = v20;
        uint64_t v85 = v19 + 32;
        uint64_t v86 = &v19[16 * v84 + 32];
        *(void *)uint64_t v86 = v21;
        *((void *)v86 + 1) = v17;
        if (v84)
        {
          while (1)
          {
            unint64_t v87 = v20 - 1;
            if (v20 >= 4)
            {
              uint64_t v92 = &v85[16 * v20];
              uint64_t v93 = *((void *)v92 - 8);
              uint64_t v94 = *((void *)v92 - 7);
              BOOL v98 = __OFSUB__(v94, v93);
              uint64_t v95 = v94 - v93;
              if (v98) {
                goto LABEL_118;
              }
              uint64_t v97 = *((void *)v92 - 6);
              uint64_t v96 = *((void *)v92 - 5);
              BOOL v98 = __OFSUB__(v96, v97);
              uint64_t v90 = v96 - v97;
              char v91 = v98;
              if (v98) {
                goto LABEL_119;
              }
              unint64_t v99 = v20 - 2;
              uint64_t v100 = &v85[16 * v20 - 32];
              uint64_t v102 = *(void *)v100;
              uint64_t v101 = *((void *)v100 + 1);
              BOOL v98 = __OFSUB__(v101, v102);
              uint64_t v103 = v101 - v102;
              if (v98) {
                goto LABEL_121;
              }
              BOOL v98 = __OFADD__(v90, v103);
              uint64_t v104 = v90 + v103;
              if (v98) {
                goto LABEL_124;
              }
              if (v104 >= v95)
              {
                uint64_t v122 = &v85[16 * v87];
                uint64_t v124 = *(void *)v122;
                uint64_t v123 = *((void *)v122 + 1);
                BOOL v98 = __OFSUB__(v123, v124);
                uint64_t v125 = v123 - v124;
                if (v98) {
                  goto LABEL_128;
                }
                BOOL v115 = v90 < v125;
                goto LABEL_88;
              }
            }
            else
            {
              if (v20 != 3)
              {
                uint64_t v116 = *((void *)v19 + 4);
                uint64_t v117 = *((void *)v19 + 5);
                BOOL v98 = __OFSUB__(v117, v116);
                uint64_t v109 = v117 - v116;
                char v110 = v98;
                goto LABEL_82;
              }
              uint64_t v89 = *((void *)v19 + 4);
              uint64_t v88 = *((void *)v19 + 5);
              BOOL v98 = __OFSUB__(v88, v89);
              uint64_t v90 = v88 - v89;
              char v91 = v98;
            }
            if (v91) {
              goto LABEL_120;
            }
            unint64_t v99 = v20 - 2;
            unint64_t v105 = &v85[16 * v20 - 32];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v108 = __OFSUB__(v106, v107);
            uint64_t v109 = v106 - v107;
            char v110 = v108;
            if (v108) {
              goto LABEL_123;
            }
            unint64_t v111 = &v85[16 * v87];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v98 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v98) {
              goto LABEL_126;
            }
            if (__OFADD__(v109, v114)) {
              goto LABEL_127;
            }
            if (v109 + v114 >= v90)
            {
              BOOL v115 = v90 < v114;
LABEL_88:
              if (v115) {
                unint64_t v87 = v99;
              }
              goto LABEL_90;
            }
LABEL_82:
            if (v110) {
              goto LABEL_122;
            }
            uint64_t v118 = &v85[16 * v87];
            uint64_t v120 = *(void *)v118;
            uint64_t v119 = *((void *)v118 + 1);
            BOOL v98 = __OFSUB__(v119, v120);
            uint64_t v121 = v119 - v120;
            if (v98) {
              goto LABEL_125;
            }
            if (v121 < v109) {
              goto LABEL_15;
            }
LABEL_90:
            unint64_t v126 = v87 - 1;
            if (v87 - 1 >= v20)
            {
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
            if (!v18) {
              goto LABEL_140;
            }
            uint64_t v127 = v19;
            uint64_t v128 = &v85[16 * v126];
            uint64_t v129 = *(void *)v128;
            Swift::Int v130 = &v85[16 * v87];
            uint64_t v131 = *((void *)v130 + 1);
            uint64_t v132 = v153;
            sub_100428450((void **)(v18 + 16 * *(void *)v128), (char *)(v18 + 16 * *(void *)v130), (void **)(v18 + 16 * v131), v152);
            uint64_t v153 = v132;
            if (v132)
            {
              uint64_t v16 = v145;
              goto LABEL_112;
            }
            if (v131 < v129) {
              goto LABEL_115;
            }
            if (v87 > *((void *)v127 + 2)) {
              goto LABEL_116;
            }
            *(void *)uint64_t v128 = v129;
            *(void *)&v85[16 * v126 + 8] = v131;
            unint64_t v133 = *((void *)v127 + 2);
            if (v87 >= v133) {
              goto LABEL_117;
            }
            Swift::String v19 = v127;
            unint64_t v20 = v133 - 1;
            memmove(&v85[16 * v87], v130 + 16, 16 * (v133 - 1 - v87));
            *((void *)v127 + 2) = v133 - 1;
            uint64_t v18 = v161;
            if (v133 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v20 = 1;
LABEL_15:
        Swift::Int v11 = v149;
        if (v17 >= v149)
        {
          uint64_t v16 = v145;
          if (v20 < 2)
          {
LABEL_112:
            swift_bridgeObjectRelease();
            _OWORD v16[2] = 0;
            swift_bridgeObjectRelease();
            return;
          }
LABEL_100:
          uint64_t v135 = *v144;
          while (1)
          {
            unint64_t v136 = v20 - 2;
            if (v20 < 2) {
              goto LABEL_130;
            }
            uint64_t v137 = v153;
            if (!v135) {
              goto LABEL_142;
            }
            uint64_t v138 = *(void *)&v19[16 * v136 + 32];
            uint64_t v139 = *(void *)&v19[16 * v20 + 24];
            sub_100428450((void **)(v135 + 16 * v138), (char *)(v135 + 16 * *(void *)&v19[16 * v20 + 16]), (void **)(v135 + 16 * v139), v152);
            uint64_t v153 = v137;
            if (v137) {
              goto LABEL_112;
            }
            if (v139 < v138) {
              goto LABEL_131;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              Swift::String v19 = sub_1001F433C((uint64_t)v19);
            }
            if (v136 >= *((void *)v19 + 2)) {
              goto LABEL_132;
            }
            v140 = &v19[16 * v136 + 32];
            *(void *)v140 = v138;
            *((void *)v140 + 1) = v139;
            unint64_t v141 = *((void *)v19 + 2);
            if (v20 > v141) {
              goto LABEL_133;
            }
            memmove(&v19[16 * v20 + 16], &v19[16 * v20 + 32], 16 * (v141 - v20));
            *((void *)v19 + 2) = v141 - 1;
            unint64_t v20 = v141 - 1;
            if (v141 <= 2) {
              goto LABEL_112;
            }
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v11 < 0) {
    goto LABEL_135;
  }
  if (v11) {
    sub_100427D98(0, v11, 1, a1);
  }
}

void sub_100427C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v19 = *a4;
    uint64_t v4 = *a4 + 16 * a3 - 16;
LABEL_5:
    long long v5 = *(_OWORD *)(v19 + 16 * a3);
    uint64_t v6 = a1;
    uint64_t v18 = v4;
    uint64_t v20 = a3;
    while (1)
    {
      uint64_t v21 = *((void *)&v5 + 1);
      uint64_t v7 = *(void **)v4;
      uint64_t v22 = *(void *)(v4 + 8);
      uint64_t v8 = (void *)v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = *(double (**)(uint64_t, uint64_t))(v21 + 48);
      id v11 = v8;
      id v12 = v7;
      double v13 = v10(ObjectType, v21);
      uint64_t v14 = swift_getObjectType();
      double v15 = (*(double (**)(uint64_t))(v22 + 48))(v14);

      if (v13 >= v15)
      {
LABEL_4:
        a3 = v20 + 1;
        uint64_t v4 = v18 + 16;
        if (v20 + 1 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v19) {
        break;
      }
      long long v5 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)(v4 + 16) = *(_OWORD *)v4;
      *(_OWORD *)uint64_t v4 = v5;
      v4 -= 16;
      if (v20 == ++v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_100427D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a1;
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  Swift::Int v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v43 = (char *)&v36 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  int v42 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  double v41 = (char *)&v36 - v14;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    uint64_t v40 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v46 = v15;
    uint64_t v16 = v15 + 16 * a3 - 16;
LABEL_5:
    long long v17 = *(_OWORD *)(v46 + 16 * a3);
    uint64_t v18 = v38;
    uint64_t v39 = v16;
    uint64_t v47 = a3;
    while (1)
    {
      long long v48 = v17;
      uint64_t v20 = *(void **)v16;
      uint64_t v19 = *(void *)(v16 + 8);
      uint64_t v21 = (void *)v17;
      uint64_t ObjectType = swift_getObjectType();
      id v49 = (id)v48;
      uint64_t v23 = *(void *)(*((void *)&v48 + 1) + 16);
      id v24 = v21;
      id v25 = v20;
      uint64_t v26 = (uint64_t)v41;
      sub_10050812C(ObjectType, v23);
      uint64_t v27 = v43;
      Optional<A>.orDistantPast.getter();
      sub_1000966BC(v26, (uint64_t *)&unk_100909A40);
      uint64_t v28 = swift_getObjectType();
      id v49 = v25;
      uint64_t v29 = *(void *)(v19 + 16);
      uint64_t v30 = (uint64_t)v42;
      sub_10050812C(v28, v29);
      id v31 = v44;
      Optional<A>.orDistantPast.getter();
      sub_1000966BC(v30, (uint64_t *)&unk_100909A40);
      LOBYTE(v21) = static Date.< infix(_:_:)();
      uint64_t v32 = *v40;
      uint64_t v33 = v31;
      uint64_t v34 = v45;
      (*v40)(v33, v45);
      v32(v27, v34);
      uint64_t v35 = v47;

      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v35 + 1;
        uint64_t v16 = v39 + 16;
        if (a3 == v37) {
          return;
        }
        goto LABEL_5;
      }
      if (!v46) {
        break;
      }
      long long v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 16) = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v17;
      v16 -= 16;
      if (v35 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100428088(void **__src, void **a2, unint64_t a3, void **__dst)
{
  uint64_t v4 = (char *)__dst;
  long long v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v54 = __src;
  unint64_t v53 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15) {
      goto LABEL_44;
    }
    if (__dst != a2 || &a2[2 * v12] <= __dst) {
      memmove(__dst, a2, 16 * v12);
    }
    uint64_t v27 = &v4[16 * v12];
    uint64_t v52 = v27;
    uint64_t v54 = v5;
    if (v6 >= v5 || v10 < 16) {
      goto LABEL_43;
    }
    uint64_t v28 = (void **)(a3 - 16);
    uint64_t v29 = v5;
    uint64_t v51 = v4;
    while (1)
    {
      long long v48 = v5;
      Swift::Int v44 = v27;
      uint64_t v46 = v28 + 2;
      id v31 = (void *)*((void *)v27 - 2);
      uint64_t v32 = *((void *)v27 - 1);
      v27 -= 16;
      uint64_t v33 = *(v29 - 2);
      int v42 = v29 - 2;
      uint64_t v34 = (uint64_t)*(v29 - 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v43 = *(double (**)(uint64_t, uint64_t))(v32 + 48);
      id v36 = v31;
      id v37 = v33;
      double v38 = v43(ObjectType, v32);
      uint64_t v39 = swift_getObjectType();
      double v40 = (*(double (**)(uint64_t, uint64_t))(v34 + 48))(v39, v34);

      if (v38 < v40) {
        break;
      }
      uint64_t v52 = v27;
      if (v46 < (void **)v44 || v28 >= (void **)v44)
      {
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v27;
        uint64_t v29 = v48;
        goto LABEL_31;
      }
      unint64_t v30 = (unint64_t)v51;
      if (v46 != (void **)v44) {
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v27;
      }
      uint64_t v29 = v48;
      if (v48 <= v6) {
        goto LABEL_43;
      }
LABEL_32:
      v28 -= 2;
      long long v5 = v29;
      if ((unint64_t)v27 <= v30) {
        goto LABEL_43;
      }
    }
    uint64_t v27 = v44;
    uint64_t v29 = v42;
    if (v46 != v48 || v28 >= v48) {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v42;
    }
    uint64_t v54 = v42;
LABEL_31:
    unint64_t v30 = (unint64_t)v51;
    if (v29 <= v6) {
      goto LABEL_43;
    }
    goto LABEL_32;
  }
  if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst) {
      memmove(__dst, __src, 16 * v9);
    }
    uint64_t v45 = &v4[16 * v9];
    uint64_t v52 = v45;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      do
      {
        id v49 = v6;
        long long v50 = v4;
        uint64_t v13 = v5;
        uint64_t v14 = *v5;
        uint64_t v15 = v5[1];
        uint64_t v16 = *(void **)v4;
        uint64_t v17 = *((void *)v4 + 1);
        uint64_t v18 = swift_getObjectType();
        uint64_t v19 = (double (*)(uint64_t, void *))v15[6];
        id v20 = v14;
        id v21 = v16;
        double v22 = v19(v18, v15);
        uint64_t v23 = swift_getObjectType();
        double v24 = (*(double (**)(uint64_t, uint64_t))(v17 + 48))(v23, v17);

        if (v22 >= v24)
        {
          uint64_t v26 = v49;
          if (v49 != (void **)v50) {
            *(_OWORD *)id v49 = *(_OWORD *)v50;
          }
          uint64_t v4 = v50 + 16;
          unint64_t v53 = (void **)(v50 + 16);
          id v25 = v13;
        }
        else
        {
          id v25 = v13 + 2;
          uint64_t v26 = v49;
          uint64_t v4 = v50;
          if (v49 < v13 || v49 >= v25 || v49 != v13) {
            *(_OWORD *)id v49 = *(_OWORD *)v13;
          }
        }
        uint64_t v6 = v26 + 2;
        if (v4 >= v45) {
          break;
        }
        long long v5 = v25;
      }
      while ((unint64_t)v25 < a3);
      uint64_t v54 = v6;
    }
LABEL_43:
    sub_1001F3F68((void **)&v54, (const void **)&v53, &v52);
    return 1;
  }
LABEL_44:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100428450(void **a1, char *a2, void **a3, void **a4)
{
  uint64_t v75 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  id v74 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v73 = (char *)&v63 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v72 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v63 - v15;
  uint64_t v16 = a2 - (char *)a1;
  uint64_t v17 = a2 - (char *)a1 + 15;
  if (a2 - (char *)a1 >= 0) {
    uint64_t v17 = a2 - (char *)a1;
  }
  uint64_t v18 = v17 >> 4;
  uint64_t v19 = (void **)a2;
  uint64_t v69 = a3;
  uint64_t v20 = (char *)a3 - a2;
  uint64_t v21 = v20 / 16;
  long long v65 = a1;
  uint64_t v80 = a1;
  uint64_t v79 = a4;
  if (v17 >> 4 >= v20 / 16)
  {
    if (v20 < -15) {
      goto LABEL_43;
    }
    double v41 = v19;
    if (a4 != v19 || &v19[2 * v21] <= a4) {
      memmove(a4, v19, 16 * v21);
    }
    int v42 = &a4[2 * v21];
    uint64_t v78 = v42;
    uint64_t v80 = v19;
    if (v20 < 16 || v65 >= v19) {
      goto LABEL_42;
    }
    Swift::Int v64 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v43 = v69 - 2;
    uint64_t v76 = a4;
    while (1)
    {
      char v70 = v41;
      uint64_t v68 = v42;
      uint64_t v69 = v43 + 2;
      uint64_t v45 = *(v42 - 2);
      uint64_t v47 = (uint64_t)*(v42 - 1);
      uint64_t v46 = v42 - 2;
      id v49 = *(v19 - 2);
      uint64_t v48 = (uint64_t)*(v19 - 1);
      v19 -= 2;
      uint64_t v66 = v48;
      uint64_t ObjectType = swift_getObjectType();
      id v77 = v45;
      uint64_t v51 = *(void *)(v47 + 16);
      uint64_t v67 = v45;
      id v52 = v49;
      uint64_t v53 = (uint64_t)v71;
      sub_10050812C(ObjectType, v51);
      uint64_t v54 = v73;
      Optional<A>.orDistantPast.getter();
      sub_1000966BC(v53, (uint64_t *)&unk_100909A40);
      uint64_t v55 = swift_getObjectType();
      id v77 = v52;
      uint64_t v56 = (uint64_t)v72;
      sub_10050812C(v55, *(void *)(v66 + 16));
      id v57 = v74;
      Optional<A>.orDistantPast.getter();
      sub_1000966BC(v56, (uint64_t *)&unk_100909A40);
      LOBYTE(v45) = static Date.< infix(_:_:)();
      Swift::Int v58 = *v64;
      Swift::Int v59 = v57;
      uint64_t v60 = v75;
      (*v64)(v59, v75);
      v58(v54, v60);

      if (v45) {
        break;
      }
      uint64_t v78 = v46;
      uint64_t v19 = v70;
      if (v69 < v68 || v43 >= v68)
      {
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v46;
        int v42 = v46;
        goto LABEL_30;
      }
      long long v61 = v76;
      Swift::Int v44 = v65;
      if (v69 != v68) {
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v46;
      }
      int v42 = v46;
      if (v46 <= v61) {
        goto LABEL_42;
      }
LABEL_31:
      v43 -= 2;
      double v41 = v19;
      if (v19 <= v44) {
        goto LABEL_42;
      }
    }
    int v42 = v68;
    if (v69 != v70 || v43 >= v70) {
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v19;
    }
    uint64_t v80 = v19;
LABEL_30:
    Swift::Int v44 = v65;
    if (v42 <= v76) {
      goto LABEL_42;
    }
    goto LABEL_31;
  }
  if (v16 >= -15)
  {
    double v22 = v65;
    if (a4 != v65 || &v65[2 * v18] <= a4) {
      memmove(a4, v65, 16 * v18);
    }
    uint64_t v68 = &a4[2 * v18];
    uint64_t v78 = v68;
    if (v16 >= 16)
    {
      uint64_t v23 = v19;
      if (v19 < v69)
      {
        uint64_t v67 = (void (**)(char *, uint64_t))(v8 + 8);
        double v24 = v73;
        do
        {
          uint64_t v76 = a4;
          id v25 = *v23;
          uint64_t v26 = v23[1];
          uint64_t v27 = *a4;
          uint64_t v28 = a4[1];
          uint64_t v29 = swift_getObjectType();
          id v77 = v25;
          uint64_t v30 = v26[2];
          char v70 = v25;
          id v31 = v27;
          uint64_t v32 = (uint64_t)v71;
          sub_10050812C(v29, v30);
          Optional<A>.orDistantPast.getter();
          sub_1000966BC(v32, (uint64_t *)&unk_100909A40);
          uint64_t v33 = swift_getObjectType();
          id v77 = v31;
          uint64_t v34 = (uint64_t)v72;
          sub_10050812C(v33, v28[2]);
          uint64_t v35 = v74;
          Optional<A>.orDistantPast.getter();
          sub_1000966BC(v34, (uint64_t *)&unk_100909A40);
          LOBYTE(v25) = static Date.< infix(_:_:)();
          id v36 = *v67;
          id v37 = v35;
          uint64_t v38 = v75;
          (*v67)(v37, v75);
          v36(v24, v38);

          if (v25)
          {
            unint64_t v39 = (unint64_t)(v23 + 2);
            a4 = v76;
            if (v22 < v23 || (unint64_t)v22 >= v39 || v22 != v23) {
              *(_OWORD *)double v22 = *(_OWORD *)v23;
            }
          }
          else
          {
            double v40 = v76;
            if (v22 != v76) {
              *(_OWORD *)double v22 = *(_OWORD *)v76;
            }
            a4 = v40 + 2;
            uint64_t v79 = a4;
            unint64_t v39 = (unint64_t)v23;
          }
          v22 += 2;
          uint64_t v80 = v22;
          if (a4 >= v68) {
            break;
          }
          uint64_t v23 = (void **)v39;
        }
        while (v39 < (unint64_t)v69);
      }
    }
LABEL_42:
    sub_1001F3F68((void **)&v80, (const void **)&v79, &v78);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100428A44(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t result = swift_stdlib_random();
  if (v5 * ((double)0 * 1.11022302e-16) + a2 == a3) {
    return sub_100428A44(v6, a2, a3);
  }
  return result;
}

void sub_100428AF0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907710 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10008E2DC(v4, (uint64_t)qword_10091BA40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_1003F08EC(a2, (uint64_t)v26);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  int v11 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v10, (os_log_type_t)v11))
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    goto LABEL_7;
  }
  int v23 = v11;
  uint64_t v12 = swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  uint64_t v25 = v22;
  *(_DWORD *)uint64_t v12 = 136446466;
  id v13 = [v9 waiterID:v22];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v24 = sub_1000C51B8(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    sub_1000C0DE0(v26, v27);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    uint64_t v24 = sub_1000C51B8(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v23, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_7:

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return;
  }

  __break(1u);
}

uint64_t sub_100428E04()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

BOOL sub_100428E44(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 2.22044605e-16;
}

BOOL sub_100428E5C(double a1, double a2)
{
  return a1 - a2 < 2.22044605e-16;
}

void sub_100428E78()
{
  sub_100428ED0(*(void *)(v0 + 24), *(void *)(**(void **)(v0 + 16) + 80), *(void *)(**(void **)(v0 + 16) + 88));
}

void sub_100428ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v94 = a3;
  uint64_t v93 = a2;
  uint64_t v4 = 0;
  uint64_t v86 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v5 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v83 = (uint64_t)v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v79 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v12 = (long long *)(a1 + 32);
    id v13 = _swiftEmptyArrayStorage;
    do
    {
      long long v97 = *v12;
      long long v95 = v97;
      id v14 = (id)v97;
      if (sub_100423604((uint64_t)&v97))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v100 = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001DEA5C(0, v13[2] + 1, 1);
          id v13 = v100;
        }
        unint64_t v17 = v13[2];
        unint64_t v16 = v13[3];
        if (v17 >= v16 >> 1)
        {
          sub_1001DEA5C(v16 > 1, v17 + 1, 1);
          id v13 = v100;
        }
        void v13[2] = v17 + 1;
        *(_OWORD *)&v13[2 * v17 + 4] = v95;
      }
      else
      {
      }
      ++v12;
      --v11;
    }
    while (v11);
  }
  else
  {
    id v13 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v97 = v13;
  swift_bridgeObjectRetain();
  sub_100426380((void **)&v97, (uint64_t (*)(void *))sub_100427170);
  swift_release();
  uint64_t v19 = *(void *)(v97 + 16);
  if (v19)
  {
    uint64_t v78 = &v101;
    uint64_t v81 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    uint64_t v80 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v76 = (char *)&v97 + 8;
    v74[1] = v97;
    uint64_t v20 = (uint64_t *)(v97 + 40);
    *(void *)&long long v18 = 136446466;
    long long v82 = v18;
    id v77 = (char *)&type metadata for Any + 8;
    *(void *)&long long v18 = 136446210;
    long long v75 = v18;
    while (1)
    {
      uint64_t v21 = *v20;
      uint64_t v22 = qword_100907570;
      id v23 = (id)*(v20 - 1);
      if (v22 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      uint64_t v25 = sub_10008E2DC(v24, (uint64_t)qword_1009181D0);
      uint64_t v26 = v23;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      int v29 = v28;
      BOOL v30 = os_log_type_enabled(v27, v28);
      *(void *)&long long v95 = v19;
      uint64_t v92 = v20;
      if (v30)
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v88 = swift_slowAlloc();
        *(void *)&long long v97 = v88;
        *(_DWORD *)uint64_t v31 = v82;
        uint64_t v90 = 0;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v100 = v26;
        uint64_t v89 = v25;
        uint64_t v33 = *(void *)(v21 + 16);
        uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 16);
        int v87 = v29;
        uint64_t v35 = v34(ObjectType, v33);
        uint64_t v100 = (void *)sub_1000C51B8(v35, v36, (uint64_t *)&v97);
        uint64_t v91 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        uint64_t v100 = v26;
        uint64_t v37 = (uint64_t)v79;
        sub_10050812C(ObjectType, v33);
        uint64_t v38 = v83;
        Optional<A>.orDistantPast.getter();
        sub_1000966BC(v37, (uint64_t *)&unk_100909A40);
        uint64_t v39 = v85;
        sub_100508214(v85);
        uint64_t v40 = Date.ISO8601Format(_:)();
        unint64_t v42 = v41;
        (*v81)(v39, v86);
        (*v80)(v38, v84);
        uint64_t v100 = (void *)sub_1000C51B8(v40, v42, (uint64_t *)&v97);
        uint64_t v21 = v91;
        uint64_t v4 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v87, "RDHousekeepingActivityScheduler: Trying to execute activity {identifier: %{public}s, lastExecuted: %{public}s}", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v43 = swift_getObjectType();
      uint64_t v44 = *(void *)(v21 + 32);
      uint64_t v98 = v43;
      uint64_t v99 = v44;
      *(void *)&long long v97 = v26;
      type metadata accessor for RDHousekeepingActivityScheduler();
      uint64_t v45 = v26;
      sub_100440B34(&v97);
      if (!v4)
      {

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v97);
        goto LABEL_32;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v97);
      swift_getErrorValue();
      if ((Error.isREMError(withErrorCode:)() & 1) == 0) {
        break;
      }
      uint64_t v46 = v21;
      uint64_t v47 = v45;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        uint64_t v100 = (void *)v91;
        *(_DWORD *)uint64_t v50 = v82;
        *(void *)&long long v97 = v47;
        uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)(v46 + 16) + 16))(v43);
        *(void *)&long long v97 = sub_1000C51B8(v51, v52, (uint64_t *)&v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2082;
        uint64_t v90 = v50 + 14;
        id v96 = v47;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v44 + 16))(&v97, v43, v44);
        sub_1000C0DE0(&v97, v98);
        uint64_t v53 = v83;
        sub_1005086DC(v83);
        uint64_t v54 = v85;
        sub_100508214(v85);
        uint64_t v55 = Date.ISO8601Format(_:)();
        unint64_t v57 = v56;
        (*v81)(v54, v86);
        (*v80)(v53, v84);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v97);
        *(void *)&long long v97 = sub_1000C51B8(v55, v57, (uint64_t *)&v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "RDHousekeepingActivityScheduler: Activity [%{public}s] is throttled, skipping... {resetDate: %{public}s}", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_28:
        swift_errorRelease();

        goto LABEL_15;
      }

      swift_errorRelease();
LABEL_15:
      uint64_t v4 = 0;
      uint64_t v20 = v92 + 2;
      uint64_t v19 = v95 - 1;
      if ((void)v95 == 1) {
        goto LABEL_32;
      }
    }
    swift_getErrorValue();
    char v58 = Error.isREMError(withErrorCode:)();
    Swift::Int v59 = v45;
    uint64_t v60 = v59;
    if ((v58 & 1) == 0)
    {
      swift_errorRetain();
      uint64_t v66 = v60;
      swift_errorRetain();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = swift_slowAlloc();
        *(void *)&long long v97 = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = v82;
        uint64_t v100 = v66;
        uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)(v21 + 16) + 16))(v43);
        uint64_t v100 = (void *)sub_1000C51B8(v70, v71, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v72 = Error.rem_errorDescription.getter();
        uint64_t v100 = (void *)sub_1000C51B8(v72, v73, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "RDHousekeepingActivityScheduler: Activity [%{public}s] failed with error {%{public}s}", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        swift_release();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        swift_release();
      }
      return;
    }
    uint64_t v47 = v59;
    long long v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62))
    {

      swift_errorRelease();
      goto LABEL_15;
    }
    uint64_t v63 = swift_slowAlloc();
    *(void *)&long long v97 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = v75;
    uint64_t v100 = v47;
    uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)(v21 + 16) + 16))(v43);
    *(void *)(v63 + 4) = sub_1000C51B8(v64, v65, (uint64_t *)&v97);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "RDHousekeepingActivityScheduler: Activity [%{public}s] is babysat, skipping...", (uint8_t *)v63, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_28;
  }

LABEL_32:
  swift_release();
}

uint64_t sub_100429BC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100429BF8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100429C38()
{
  return sub_100423380();
}

uint64_t sub_100429C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100429C6C()
{
  return swift_release();
}

uint64_t sub_100429C74(uint64_t a1)
{
  uint64_t result = sub_100431B30(&qword_1009184F0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_100429CCC(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v6 = i - 3;
      if (__OFADD__(v5, 1)) {
        goto LABEL_30;
      }
LABEL_11:
      REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter();
      swift_release();
      uint64_t v7 = *(void *)(v27 + 16);
      int64_t v8 = v3[2];
      int64_t v9 = v8 + v7;
      if (__OFADD__(v8, v7)) {
        goto LABEL_31;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v9 <= v3[3] >> 1)
      {
        if (*(void *)(v27 + 16)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v8 <= v9) {
          int64_t v11 = v8 + v7;
        }
        else {
          int64_t v11 = v8;
        }
        uint64_t v3 = (void *)sub_1003095D0(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v3);
        if (*(void *)(v27 + 16))
        {
LABEL_20:
          uint64_t v12 = v3[2];
          uint64_t v13 = (v3[3] >> 1) - v12;
          uint64_t v14 = *(void *)(type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group() - 8);
          uint64_t v15 = *(void *)(v14 + 72);
          if (v13 < v7) {
            goto LABEL_33;
          }
          unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
          unint64_t v17 = (char *)v3 + v16 + v15 * v12;
          unint64_t v18 = v27 + v16;
          uint64_t v19 = v15 * v7;
          uint64_t v20 = &v17[v19];
          unint64_t v21 = v18 + v19;
          if (v18 < (unint64_t)v20 && (unint64_t)v17 < v21)
          {
            uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v7)
          {
            uint64_t v23 = v3[2];
            BOOL v24 = __OFADD__(v23, v7);
            uint64_t v25 = v23 + v7;
            if (v24) {
              goto LABEL_34;
            }
            v3[2] = v25;
          }
          goto LABEL_5;
        }
      }
      if (v7) {
        goto LABEL_32;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    swift_retain();
    uint64_t v6 = i - 3;
    if (!__OFADD__(v5, 1)) {
      goto LABEL_11;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100429F68()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009184B8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009184B8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10042A030(void (*a1)(char *, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  id v129 = a4;
  uint64_t v122 = a2;
  uint64_t v110 = a5;
  uint64_t v116 = type metadata accessor for REMRemindersListDataView.TodayGroupModel();
  uint64_t v123 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  BOOL v115 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v125 = (char *)&v96 - v9;
  uint64_t v10 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v10 - 8);
  uint64_t v105 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v118 = *(void *)(v12 - 8);
  uint64_t v119 = v12;
  __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t *)((char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v117 = (char *)&v96 - v15;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v107 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v106 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v113 = *(void *)(v17 - 8);
  uint64_t v114 = v17;
  __chkstk_darwin(v17);
  uint64_t v112 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v120 = (uint64_t)&v96 - v20;
  uint64_t v21 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v21 - 8);
  uint64_t v111 = (uint64_t)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v127 = (uint64_t)&v96 - v24;
  uint64_t v25 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType();
  uint64_t v126 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group();
  uint64_t v124 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  BOOL v30 = (char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v96 - v32;
  __chkstk_darwin(v34);
  unint64_t v36 = (void (*)(char *, uint64_t, uint64_t))((char *)&v96 - v35);
  uint64_t v37 = a1;
  uint64_t v38 = (uint64_t)a1;
  id v39 = v128;
  uint64_t v40 = (uint64_t)v129;
  unint64_t v41 = sub_10042DEC0(v38, a3, (uint64_t)v129);
  if (!v39)
  {
    uint64_t v103 = v36;
    char v101 = v27;
    uint64_t v102 = v25;
    uint64_t v100 = v33;
    uint64_t v98 = v30;
    uint64_t v104 = v28;
    id v128 = v42;
    uint64_t v43 = (uint64_t)v41;
    uint64_t v99 = a3;
    uint64_t v44 = sub_1004312AC((uint64_t)v37, v40);
    uint64_t v131 = v43;
    if (*(void *)(v44 + 16))
    {
      (*(void (**)(char *, void, uint64_t))(v126 + 104))(v101, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.nearby(_:), v102);
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v46 = v124;
      uint64_t v47 = v121;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v43 = sub_1003095D0(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v49 = *(void *)(v43 + 16);
      unint64_t v48 = *(void *)(v43 + 24);
      unint64_t v50 = v49 + 1;
      uint64_t v51 = (uint64_t)v103;
      if (v49 >= v48 >> 1)
      {
        unint64_t v97 = v49 + 1;
        uint64_t v95 = sub_1003095D0(v48 > 1, v49 + 1, 1, v43);
        unint64_t v50 = v97;
        uint64_t v43 = v95;
      }
      *(void *)(v43 + 16) = v50;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32))(v43+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v49, v51, v104);
      uint64_t v131 = v43;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v46 = v124;
      uint64_t v47 = v121;
    }
    char v52 = REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter();
    uint64_t v53 = v127;
    if (v52)
    {
      (*(void (**)(char *, void, uint64_t))(v126 + 104))(v101, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.empty(_:), v102);
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = sub_1003095D0(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v54 = v43;
      unint64_t v55 = *(void *)(v43 + 16);
      unint64_t v56 = v54;
      unint64_t v57 = *(void *)(v54 + 24);
      char v58 = v125;
      if (v55 >= v57 >> 1) {
        unint64_t v56 = sub_1003095D0(v57 > 1, v55 + 1, 1, v56);
      }
      *(void *)(v56 + 16) = v55 + 1;
      unint64_t v59 = v56
          + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
          + *(void *)(v46 + 72) * v55;
      uint64_t v43 = v56;
      (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v59, v100, v104);
      uint64_t v131 = v43;
    }
    else
    {
      char v58 = v125;
    }
    swift_bridgeObjectRetain_n();
    sub_10042AE38(v37, v43, v53);
    uint64_t v60 = v123;
    swift_bridgeObjectRelease();
    id v61 = [v47 fetchResultTokenToDiffAgainst];
    sub_10051F2BC(v61, (uint64_t)v37, v120);
    uint64_t v122 = 0;
    uint64_t v121 = (void *)v43;
    uint64_t v103 = v37;

    os_log_type_t v62 = v106;
    REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
    uint64_t v63 = v117;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v62, Configuration);
    uint64_t v64 = v118;
    unint64_t v65 = v109;
    uint64_t v66 = v63;
    uint64_t v67 = v119;
    (*(void (**)(uint64_t *, char *, uint64_t))(v118 + 16))(v109, v66, v119);
    int v68 = (*(uint64_t (**)(uint64_t *, uint64_t))(v64 + 88))(v65, v67);
    if (v68 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v64 + 96))(v65, v67);
      uint64_t v69 = *v65;
      uint64_t v70 = _swiftEmptyArrayStorage;
      Swift::Int v130 = _swiftEmptyArrayStorage;
      uint64_t v71 = v121[2];
      uint64_t v72 = v104;
      if (v71)
      {
        uint64_t v109 = (uint64_t *)v69;
        uint64_t v126 = *(void *)(v124 + 16);
        unint64_t v73 = (char *)v121
            + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
        uint64_t v74 = *(void *)(v124 + 72);
        long long v75 = (void (**)(char *, uint64_t))(v124 + 8);
        swift_bridgeObjectRetain();
        uint64_t v76 = v98;
        do
        {
          ((void (*)(char *, char *, uint64_t))v126)(v76, v73, v72);
          uint64_t v77 = REMRemindersListDataView.TodayGroupModel.Group.reminders.getter();
          (*v75)(v76, v72);
          sub_1002026F8(v77);
          v73 += v74;
          --v71;
        }
        while (v71);
        swift_bridgeObjectRelease();
        uint64_t v70 = v130;
        uint64_t v60 = v123;
        uint64_t v69 = (uint64_t)v109;
      }
      sub_1005280D0(v69, (uint64_t)v70, (uint64_t)v103, v99, 0);
      swift_bridgeObjectRelease();
LABEL_31:
      char v58 = v125;
      uint64_t v53 = v127;
      uint64_t v89 = v117;
      uint64_t v79 = v120;
LABEL_34:
      (*(void (**)(char *, uint64_t))(v118 + 8))(v89, v119);
      swift_beginAccess();
      sub_100132738(v53, v111);
      REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter();
      id v129 = v128;
      REMRemindersListDataView.TodayGroupModel.init(groups:remindersCount:currentLocation:prefetchedReminders:prefetchedDueReminders:todaySmartList:)();
      uint64_t v90 = v116;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v115, v58, v116);
      uint64_t v91 = v113;
      uint64_t v92 = v79;
      uint64_t v93 = v114;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v112, v92, v114);
      sub_100431B30(&qword_1009184F8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupModel);
      sub_100431B30(&qword_100918500, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayGroupModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

      (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v90);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v120, v93);
      sub_1000966BC(v127, &qword_100909C70);
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v78 = v104;
    if (v68 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v118 + 96))(v65, v119);
      uint64_t v79 = v120;
      sub_100528BCC(*v65, v120, (uint64_t)v103, v99, 0);
      goto LABEL_33;
    }
    uint64_t v80 = v99;
    if (v68 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v118 + 96))(v65, v119);
      uint64_t Configuration = *v65;
      uint64_t v81 = sub_100094134(&qword_100909C78);
      uint64_t v82 = v105;
      sub_1001326D0((uint64_t)v65 + *(int *)(v81 + 48), v105);
      uint64_t v83 = _swiftEmptyArrayStorage;
      Swift::Int v130 = _swiftEmptyArrayStorage;
      uint64_t v84 = v121[2];
      if (v84)
      {
        uint64_t v85 = v124 + 16;
        uint64_t v126 = *(void *)(v124 + 16);
        uint64_t v86 = (char *)v121
            + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
        uint64_t v124 = *(void *)(v124 + 72);
        swift_bridgeObjectRetain();
        int v87 = v98;
        do
        {
          ((void (*)(char *, char *, uint64_t))v126)(v87, v86, v78);
          uint64_t v88 = REMRemindersListDataView.TodayGroupModel.Group.reminders.getter();
          (*(void (**)(char *, uint64_t))(v85 - 8))(v87, v78);
          sub_1002026F8(v88);
          v86 += v124;
          --v84;
        }
        while (v84);
        swift_bridgeObjectRelease();
        uint64_t v83 = v130;
        uint64_t v60 = v123;
        uint64_t v80 = v99;
        uint64_t v82 = v105;
      }
      uint64_t v94 = (uint64_t)v103;
      sub_1005280D0(Configuration, (uint64_t)v83, (uint64_t)v103, v80, 0);
      sub_10052929C(v82, (uint64_t)v83, v94, v80, 0);
      swift_bridgeObjectRelease();
      sub_1000966BC(v82, &qword_100909C68);
      goto LABEL_31;
    }
    uint64_t v79 = v120;
    if (v68 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
LABEL_33:
      uint64_t v89 = v117;
      goto LABEL_34;
    }
    swift_bridgeObjectRelease();
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
}

void sub_10042AE38(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v69 = a1;
  uint64_t v71 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType();
  uint64_t v63 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group();
  uint64_t v73 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v68 = v7;
  __chkstk_darwin(v7);
  uint64_t v66 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s10PredicatesOMa(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v13 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  unint64_t v65 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v54 - v16;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  char v18 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  uint64_t v64 = *(void (**)(char *, uint64_t))(v13 + 8);
  v64(v17, Configuration);
  if ((v18 & 1) == 0)
  {
    uint64_t v27 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a3, 1, 1, v27);
    return;
  }
  uint64_t v58 = a3;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter();
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = sub_10038F1F0();
  sub_10012607C((uint64_t)v11, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v20 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v21 = [(id)swift_getObjCClassFromMetadata() entity];
  [v20 setEntity:v21];

  uint64_t v22 = (void *)v19;
  [v20 setAffectedStores:0];
  [v20 setPredicate:v19];
  uint64_t v23 = (uint64_t)v69;
  uint64_t v24 = v62;
  uint64_t v25 = NSManagedObjectContext.count<A>(for:)();
  uint64_t v26 = v24;
  if (v24)
  {

    return;
  }
  uint64_t v57 = v25;

  uint64_t v28 = REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter();
  if (v28)
  {
    os_log_type_t v62 = (char *)v28;
    uint64_t v29 = v65;
    REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
    uint64_t v30 = (uint64_t)v66;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    uint64_t v31 = v29;
    uint64_t v32 = v62;
    v64(v31, Configuration);
    sub_100430858(v23, v32, v30, 1);
    uint64_t v34 = v58;
    unint64_t v37 = v33;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v30, v68);
    if (v37 >> 62)
    {
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v36 = v72;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = v72;
    uint64_t v34 = v58;
  }
  uint64_t v38 = *(void *)(v59 + 16);
  if (!v38)
  {
    uint64_t v32 = 0;
    goto LABEL_41;
  }
  uint64_t v55 = v35;
  unint64_t v56 = v22;
  os_log_type_t v62 = v26;
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  uint64_t v39 = v59 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
  uint64_t v40 = (uint64_t (**)(char *, uint64_t))(v63 + 88);
  LODWORD(v68) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.today(_:);
  LODWORD(v67) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:);
  LODWORD(v66) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:);
  LODWORD(v65) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:);
  LODWORD(v64) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:);
  LODWORD(v63) = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:);
  int v61 = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.nearby(_:);
  int v60 = enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.empty(_:);
  unint64_t v41 = (void (**)(char *, uint64_t))(v73 + 8);
  v73 += 16;
  uint64_t v42 = *(void *)(v73 + 56);
  swift_bridgeObjectRetain();
  uint64_t v32 = 0;
  while (1)
  {
    v69(v6, v39, v36);
    uint64_t v44 = v70;
    REMRemindersListDataView.TodayGroupModel.Group.groupType.getter();
    int v45 = (*v40)(v44, v71);
    if (v45 != v68
      && v45 != v67
      && v45 != v66
      && v45 != v65
      && v45 != v64
      && v45 != v63)
    {
      if (v45 != v61 && v45 != v60)
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return;
      }
      goto LABEL_18;
    }
    uint64_t v51 = *(void *)(REMRemindersListDataView.TodayGroupModel.Group.reminders.getter() + 16);
    swift_bridgeObjectRelease();
    BOOL v52 = __OFADD__(v32, v51);
    v32 += v51;
    if (v52) {
      break;
    }
LABEL_18:
    uint64_t v36 = v72;
    (*v41)(v6, v72);
    v39 += v42;
    if (!--v38) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_39:
  swift_bridgeObjectRelease();
  uint64_t v26 = v62;
  uint64_t v34 = v58;
  uint64_t v35 = v55;
  uint64_t v22 = v56;
LABEL_41:
  if (__OFADD__(v57, v35))
  {
    __break(1u);
    goto LABEL_44;
  }
  REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)();

  uint64_t v53 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v34, 0, 1, v53);
}

void sub_10042B5C0(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v4 = type metadata accessor for REMTimeOfDay();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Calendar.Component();
  uint64_t v46 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
  uint64_t v16 = v15;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_7;
  }
  unint64_t v17 = sub_100307180(v15);
  if ((v18 & 1) == 0) {
    goto LABEL_7;
  }
  id v19 = *(id *)(*(void *)(a1 + 56) + 8 * v17);

  id v20 = [v19 displayDate];
  if (!v20)
  {
    uint64_t v16 = v19;
LABEL_7:
    uint64_t v27 = v51;

    char v26 = 5;
    goto LABEL_8;
  }
  id v21 = v20;
  id v43 = v19;
  id v22 = [v20 date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v22) = static Date.< infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v24 = v12 + 8;
  uint64_t v23 = v25;
  v25(v14, v11);
  if (v22)
  {

    char v26 = 0;
LABEL_11:
    uint64_t v27 = v51;
    goto LABEL_8;
  }
  uint64_t v50 = v24;
  if ([v21 isAllDay])
  {

    char v26 = 1;
    goto LABEL_11;
  }
  static Calendar.current.getter();
  uint64_t v28 = v21;
  uint64_t v29 = v46;
  uint64_t v30 = v44;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v7, enum case for Calendar.Component.hour(_:), v44);
  id v41 = v28;
  id v31 = [v28 date];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = Calendar.component(_:from:)();
  v23(v14, v11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
  unint64_t v33 = v47;
  uint64_t v32 = v48;
  uint64_t v34 = *(void (**)(char *, void, uint64_t))(v48 + 104);
  uint64_t v35 = v49;
  v34(v47, enum case for REMTimeOfDay.morning(_:), v49);
  uint64_t v36 = v32;
  uint64_t v37 = REMTimeOfDay.endHour.getter();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v36 + 8);
  v38(v33, v35);
  uint64_t v27 = v51;
  if (v42 >= v37)
  {
    v34(v33, enum case for REMTimeOfDay.afternoon(_:), v35);
    uint64_t v39 = REMTimeOfDay.endHour.getter();

    v38(v33, v35);
    if (v42 < v39) {
      char v26 = 3;
    }
    else {
      char v26 = 4;
    }
  }
  else
  {

    char v26 = 2;
  }
LABEL_8:
  char *v27 = v26;
}

id sub_10042BAB4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  id v8 = 0;
  id v4 = [v3 remObjectIDWithError:&v8];
  id v5 = v8;
  if (v4)
  {
    *a2 = v4;
    return v5;
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

uint64_t sub_10042BB6C(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v139 = a3;
  id v135 = a2;
  uint64_t v151 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType();
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v146 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v144 = (char *)&v127 - v7;
  __chkstk_darwin(v8);
  uint64_t v143 = (char *)&v127 - v9;
  __chkstk_darwin(v10);
  uint64_t v134 = (char *)&v127 - v11;
  __chkstk_darwin(v12);
  Swift::Int v148 = (char *)&v127 - v13;
  __chkstk_darwin(v14);
  Swift::Int v147 = (char *)&v127 - v15;
  __chkstk_darwin(v16);
  uint64_t v145 = (char *)&v127 - v17;
  uint64_t v133 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today();
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v131 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  Swift::Int v130 = (char *)&v127 - v20;
  uint64_t v21 = type metadata accessor for REMFeatureFlags();
  uint64_t v141 = *(void *)(v21 - 8);
  uint64_t v142 = (void (*)(void, void))v21;
  __chkstk_darwin(v21);
  v140 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Calendar();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  char v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Date();
  uint64_t v137 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v28 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  Calendar.startOfDay(for:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v29 = (void *)sub_1002EDC74((uint64_t)_swiftEmptyArrayStorage);
  if (a4 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    Swift::Int v150 = v28;
    if (v30) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v51 = swift_bridgeObjectRelease();
    __chkstk_darwin(v51);
    BOOL v52 = v150;
    *((void *)&v127 - 2) = v29;
    *((void *)&v127 - 1) = v52;
    uint64_t v53 = swift_bridgeObjectRetain();
    uint64_t v54 = sub_1005B9570(v53, (void (*)(uint64_t *__return_ptr, char *))sub_100431C5C, (uint64_t)(&v127 - 2));
    swift_bridgeObjectRelease();
    if (!v54[2])
    {
      uint64_t v139 = _swiftEmptyArrayStorage;
      unint64_t v136 = _swiftEmptyArrayStorage;
      unint64_t v56 = v142;
      goto LABEL_42;
    }
    unint64_t v55 = sub_100307114(0);
    unint64_t v56 = v142;
    if (v57)
    {
      uint64_t v58 = *(void **)(v54[7] + 8 * v55);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v58 = _swiftEmptyArrayStorage;
    }
    uint64_t v59 = v54[2];
    unint64_t v136 = v58;
    if (!v59)
    {
      uint64_t v139 = _swiftEmptyArrayStorage;
      goto LABEL_42;
    }
    unint64_t v60 = sub_100307114(1u);
    if (v61)
    {
      uint64_t v139 = *(void **)(v54[7] + 8 * v60);
      swift_bridgeObjectRetain();
      if (!v54[2]) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v139 = _swiftEmptyArrayStorage;
      if (!v54[2]) {
        goto LABEL_42;
      }
    }
    unint64_t v62 = sub_100307114(5u);
    if (v63)
    {
      uint64_t v64 = *(void *)(v54[7] + 8 * v62);
      uint64_t v65 = qword_100907578;
      swift_bridgeObjectRetain();
      if (v65 != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      sub_10008E2DC(v66, (uint64_t)qword_1009184B8);
      swift_bridgeObjectRetain_n();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      int v69 = v68;
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v152 = swift_slowAlloc();
        Swift::Int v154 = (void *)v152;
        *(_DWORD *)uint64_t v70 = 134218242;
        uint64_t v153 = *(void *)(v64 + 16);
        LODWORD(v129) = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v70 + 12) = 2080;
        uint64_t v128 = v70 + 14;
        type metadata accessor for REMRemindersListDataView.ReminderLite();
        swift_bridgeObjectRetain();
        uint64_t v71 = Array.description.getter();
        unint64_t v73 = v72;
        swift_bridgeObjectRelease();
        uint64_t v153 = sub_1000C51B8(v71, v73, (uint64_t *)&v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v129, "today data view unable to group %ld reminders %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
LABEL_42:
    uint64_t v152 = (uint64_t)v54;
    long long v75 = v140;
    uint64_t v74 = v141;
    (*(void (**)(char *, void, void (*)(void, void)))(v141 + 104))(v140, enum case for REMFeatureFlags.todayReordering(_:), v56);
    char v76 = REMFeatureFlags.isEnabled.getter();
    (*(void (**)(char *, void))(v74 + 8))(v75, v56);
    if ((v76 & 1) == 0)
    {
      sub_100094134(&qword_100914808);
      type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group();
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_100778380;
      uint64_t v95 = *(void (**)(char *, void, uint64_t))(v149 + 104);
      uint64_t v96 = v145;
      uint64_t v97 = v151;
      v95(v145, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:), v151);
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      v95(v96, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:), v97);
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      v95(v143, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:), v97);
      uint64_t v98 = v152;
      if (*(void *)(v152 + 16))
      {
        sub_100307114(2u);
        uint64_t v99 = v137;
        if (v100) {
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v99 = v137;
      }
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      v95(v144, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:), v151);
      if (*(void *)(v98 + 16))
      {
        sub_100307114(3u);
        if (v104) {
          swift_bridgeObjectRetain();
        }
      }
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      v95(v146, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:), v151);
      if (*(void *)(v98 + 16))
      {
        sub_100307114(4u);
        if (v105) {
          swift_bridgeObjectRetain();
        }
      }
      swift_bridgeObjectRelease();
      REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
      uint64_t v106 = v138;
      goto LABEL_80;
    }
    uint64_t v129 = 0;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v146 = (char *)swift_allocObject();
    *((_OWORD *)v146 + 1) = xmmword_10077DE90;
    uint64_t v77 = v132;
    uint64_t v143 = *(char **)(v132 + 104);
    id v144 = (char *)(v132 + 104);
    uint64_t v78 = v130;
    uint64_t v79 = v133;
    ((void (*)(char *, void, uint64_t))v143)(v130, enum case for REMSmartListSection.PredefinedSectionType.Today.beforeToday(_:), v133);
    REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    uint64_t v142 = *(void (**)(void, void))(v77 + 8);
    v142(v78, v79);
    uint64_t v141 = sub_100094134(&qword_100914808);
    uint64_t v80 = *(void *)(type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group() - 8);
    uint64_t v132 = *(void *)(v80 + 72);
    uint64_t v81 = *(unsigned __int8 *)(v80 + 80);
    uint64_t v128 = ((v81 + 32) & ~v81) + v132;
    v140 = (char *)(v81 | 7);
    uint64_t v82 = swift_allocObject();
    long long v127 = xmmword_100776E40;
    *(_OWORD *)(v82 + 16) = xmmword_100776E40;
    uint64_t v149 = *(void *)(v149 + 104);
    uint64_t v83 = v145;
    ((void (*)(char *, void, uint64_t))v149)(v145, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.beforeToday(_:), v151);
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
    Swift::Int v154 = (void *)v82;
    uint64_t v84 = sub_100094134(&qword_100918508);
    swift_allocObject();
    uint64_t v85 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    uint64_t v86 = v146;
    *((void *)v146 + 4) = v85;
    ((void (*)(char *, void, uint64_t))v143)(v78, enum case for REMSmartListSection.PredefinedSectionType.Today.todayAllDay(_:), v79);
    REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    v142(v78, v79);
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = v127;
    ((void (*)(char *, void, uint64_t))v149)(v83, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.todayAllDay(_:), v151);
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
    Swift::Int v154 = (void *)v87;
    uint64_t v139 = (void *)v84;
    swift_allocObject();
    *((void *)v86 + 5) = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    uint64_t v88 = v131;
    ((void (*)(char *, void, uint64_t))v143)(v131, enum case for REMSmartListSection.PredefinedSectionType.Today.todayNonAllDay(_:), v79);
    uint64_t v145 = (char *)REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    v142(v88, v79);
    uint64_t v89 = swift_allocObject();
    *(_OWORD *)(v89 + 16) = xmmword_100776E60;
    uint64_t v90 = (void (*)(char *, void, uint64_t))v149;
    ((void (*)(char *, void, uint64_t))v149)(v147, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.morning(_:), v151);
    uint64_t v91 = v152;
    if (*(void *)(v152 + 16))
    {
      sub_100307114(2u);
      uint64_t v92 = v134;
      if (v93) {
        swift_bridgeObjectRetain();
      }
      char v101 = v150;
    }
    else
    {
      char v101 = v150;
      uint64_t v92 = v134;
    }
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
    v90(v148, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.afternoon(_:), v151);
    if (*(void *)(v91 + 16))
    {
      sub_100307114(3u);
      if (v102) {
        swift_bridgeObjectRetain();
      }
    }
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
    v90(v92, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.tonight(_:), v151);
    if (*(void *)(v91 + 16))
    {
      sub_100307114(4u);
      BOOL v52 = v101;
      if (v103) {
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      BOOL v52 = v101;
    }
    swift_bridgeObjectRelease();
    REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();
    Swift::Int v154 = (void *)v89;
    swift_allocObject();
    uint64_t v107 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    uint64_t v108 = (uint64_t)v146;
    *((void *)v146 + 6) = v107;
    Swift::Int v154 = (void *)v108;
    specialized Array._endMutation()();
    unint64_t v109 = (unint64_t)v154;
    if (v135)
    {
      id v110 = v135;
      id v111 = [v110 sectionIDsOrderingAsData];
      if (v111)
      {
        uint64_t v112 = v111;
        uint64_t v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v115 = v114;

        sub_1000963CC(0, (unint64_t *)&qword_10090D600);
        uint64_t v116 = v129;
        static REMJSONRepresentable.fromJSONData(_:)();
        if (v116)
        {
          sub_100097F34(v113, v115);

          if (qword_100907578 != -1) {
            swift_once();
          }
          uint64_t v118 = type metadata accessor for Logger();
          sub_10008E2DC(v118, (uint64_t)qword_1009184B8);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v119 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v119, v120))
          {
            uint64_t v121 = (uint8_t *)swift_slowAlloc();
            uint64_t v122 = swift_slowAlloc();
            uint64_t v129 = 0;
            Swift::Int v154 = (void *)v122;
            *(_DWORD *)uint64_t v121 = 136446210;
            swift_getErrorValue();
            uint64_t v123 = Error.rem_errorDescription.getter();
            uint64_t v153 = sub_1000C51B8(v123, v124, (uint64_t *)&v154);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v119, v120, "today data view error upon reordering groups by user-defined sections ordering {error: %{public}s}", v121, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
        }
        else
        {
          sub_100097F34(v113, v115);
          uint64_t v117 = v154;
          uint64_t v125 = REMOrderedIdentifierMap.reorder<A>(objects:)();

          swift_bridgeObjectRelease();
          unint64_t v109 = v125;
        }
        uint64_t v106 = v138;
        uint64_t v99 = v137;
        goto LABEL_79;
      }
    }
    uint64_t v106 = v138;
    uint64_t v99 = v137;
LABEL_79:
    uint64_t v94 = (uint64_t)sub_100429CCC(v109);
    swift_bridgeObjectRelease();
LABEL_80:
    (*(void (**)(char *, uint64_t))(v99 + 8))(v52, v106);
    return v94;
  }
  uint64_t v30 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  Swift::Int v150 = v28;
  if (!v30) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v152 = a4 & 0xC000000000000001;
  uint64_t v31 = 4;
  while (1)
  {
    if (v152) {
      id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v34 = *(id *)(a4 + 8 * v31);
    }
    id v35 = v34;
    uint64_t v28 = (char *)(v31 - 3);
    if (__OFADD__(v31 - 4, 1))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    id v36 = [v34 remObjectID];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v154 = v29;
    unint64_t v39 = sub_100307180(v36);
    uint64_t v40 = v29[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      goto LABEL_22;
    }
    char v43 = v38;
    if (v29[3] < v42) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v29 = v154;
      if (v38) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_100318DDC();
      uint64_t v29 = v154;
      if (v43)
      {
LABEL_4:
        uint64_t v32 = v29[7];
        uint64_t v33 = 8 * v39;

        *(void *)(v32 + v33) = v35;
        goto LABEL_5;
      }
    }
LABEL_17:
    v29[(v39 >> 6) + 8] |= 1 << v39;
    uint64_t v46 = 8 * v39;
    *(void *)(v29[6] + v46) = v36;
    *(void *)(v29[7] + v46) = v35;
    uint64_t v47 = v29[2];
    BOOL v48 = __OFADD__(v47, 1);
    uint64_t v49 = v47 + 1;
    if (v48) {
      goto LABEL_23;
    }
    v29[2] = v49;
    id v50 = v36;
LABEL_5:

    swift_bridgeObjectRelease();
    ++v31;
    if (v28 == (char *)v30) {
      goto LABEL_25;
    }
  }
  sub_10030EFF0(v42, isUniquelyReferenced_nonNull_native);
  unint64_t v44 = sub_100307180(v36);
  if ((v43 & 1) == (v45 & 1))
  {
    unint64_t v39 = v44;
    uint64_t v29 = v154;
    if (v43) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  sub_100094134((uint64_t *)&unk_100914BC0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10042CEBC(unint64_t a1, void *a2, void *a3, unint64_t a4)
{
  unint64_t v134 = a1;
  unint64_t v135 = a4;
  uint64_t v6 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today();
  uint64_t v125 = *(void *)(v6 - 8);
  uint64_t v126 = v6;
  __chkstk_darwin(v6);
  unint64_t v124 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v136 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v9 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v128 = (char *)&v114 - v11;
  __chkstk_darwin(v12);
  Swift::Int v130 = (char *)&v114 - v13;
  __chkstk_darwin(v14);
  uint64_t v137 = (char *)&v114 - v15;
  uint64_t v16 = type metadata accessor for Calendar();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for Date();
  uint64_t v127 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v129 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v133 = (char *)&v114 - v22;
  uint64_t v23 = type metadata accessor for REMFeatureFlags();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v24 + 104))(v27, enum case for REMFeatureFlags.todayReordering(_:), v23, v25);
  char v28 = REMFeatureFlags.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  if ((v28 & 1) == 0 || !a2) {
    goto LABEL_62;
  }
  id v29 = a2;
  id v30 = [v29 sectionIDsOrderingAsData];
  if (!v30)
  {

    goto LABEL_62;
  }
  uint64_t v31 = v30;
  uint64_t v121 = v9;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v34 = v33;

  sub_1000963CC(0, (unint64_t *)&qword_10090D600);
  static REMJSONRepresentable.fromJSONData(_:)();
  uint64_t v115 = 0;
  sub_100097F34(v32, v34);
  unint64_t v114 = v139;
  static Calendar.current.getter();
  Calendar.startOfDay(for:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  id v35 = (void *)sub_1002EDC74((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v36 = v135;
  if (v135 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v37 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  id v116 = v29;
  uint64_t v117 = a3;
  if (!v37)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v59 = v117[2];
    unint64_t v60 = _swiftEmptyArrayStorage;
    if (v59)
    {
      char v61 = *(void (**)(char *, char *, uint64_t))(v136 + 16);
      unint64_t v120 = (*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
      unint64_t v62 = (char *)v117 + v120;
      uint64_t v63 = *(void *)(v136 + 72);
      uint64_t v119 = (void (**)(char *, uint64_t))(v127 + 8);
      uint64_t v118 = (void (**)(char *, char *, uint64_t))(v136 + 32);
      v136 += 16;
      uint64_t v64 = (void (**)(char *, uint64_t))(v136 - 8);
      swift_bridgeObjectRetain();
      uint64_t v123 = _swiftEmptyArrayStorage;
      uint64_t v122 = _swiftEmptyArrayStorage;
      unint64_t v135 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v65 = v131;
      while (1)
      {
        v61(v137, v62, v65);
        uint64_t v66 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        uint64_t v67 = v66;
        if (v35[2] && (unint64_t v68 = sub_100307180(v66), (v69 & 1) != 0))
        {
          id v70 = *(id *)(v35[7] + 8 * v68);

          id v71 = [v70 displayDate];
          if (!v71)
          {
            (*v64)(v137, v65);

            goto LABEL_31;
          }
          unint64_t v72 = v71;
          unint64_t v134 = (unint64_t)v70;
          uint64_t v73 = v63;
          uint64_t v74 = v61;
          id v75 = [v71 date];
          char v76 = v129;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v75) = static Date.< infix(_:_:)();
          (*v119)(v76, v132);
          if (v75)
          {
            char v61 = v74;
            v74(v130, v137, v65);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v77 = v135;
            }
            else {
              unint64_t v77 = sub_1003091E4(0, *(void *)(v135 + 16) + 1, 1, v135);
            }
            uint64_t v63 = v73;
            unint64_t v79 = *(void *)(v77 + 16);
            unint64_t v78 = *(void *)(v77 + 24);
            uint64_t v80 = (void *)v134;
            if (v79 >= v78 >> 1) {
              unint64_t v77 = sub_1003091E4(v78 > 1, v79 + 1, 1, v77);
            }
            *(void *)(v77 + 16) = v79 + 1;
            unint64_t v135 = v77;
            uint64_t v81 = (char *)(v77 + v120 + v79 * v63);
            uint64_t v82 = *v118;
            uint64_t v83 = v130;
          }
          else
          {
            char v61 = v74;
            if ([v72 isAllDay])
            {
              v74(v128, v137, v65);
              uint64_t v63 = v73;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v123 = (void *)sub_1003091E4(0, v123[2] + 1, 1, (unint64_t)v123);
              }
              uint64_t v80 = (void *)v134;
              uint64_t v84 = v123;
              unint64_t v86 = v123[2];
              unint64_t v85 = v123[3];
              if (v86 >= v85 >> 1) {
                uint64_t v84 = (void *)sub_1003091E4(v85 > 1, v86 + 1, 1, (unint64_t)v123);
              }
              v84[2] = v86 + 1;
              uint64_t v123 = v84;
              uint64_t v81 = (char *)v84 + v120 + v86 * v63;
              uint64_t v82 = *v118;
              uint64_t v83 = v128;
            }
            else
            {
              v74(v121, v137, v65);
              uint64_t v63 = v73;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v122 = (void *)sub_1003091E4(0, v122[2] + 1, 1, (unint64_t)v122);
              }
              uint64_t v80 = (void *)v134;
              unint64_t v88 = v122[2];
              unint64_t v87 = v122[3];
              if (v88 >= v87 >> 1) {
                uint64_t v122 = (void *)sub_1003091E4(v87 > 1, v88 + 1, 1, (unint64_t)v122);
              }
              uint64_t v89 = v122;
              v122[2] = v88 + 1;
              uint64_t v81 = (char *)v89 + v120 + v88 * v63;
              uint64_t v82 = *v118;
              uint64_t v83 = v121;
            }
          }
          uint64_t v65 = v131;
          v82(v81, v83, v131);
        }
        else
        {
        }
        (*v64)(v137, v65);
LABEL_31:
        v62 += v63;
        if (!--v59)
        {
          swift_bridgeObjectRelease();
          unint64_t v60 = (void *)v135;
          goto LABEL_57;
        }
      }
    }
    uint64_t v122 = _swiftEmptyArrayStorage;
    uint64_t v123 = _swiftEmptyArrayStorage;
LABEL_57:
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v90 = swift_allocObject();
    *(_OWORD *)(v90 + 16) = xmmword_10077DE90;
    uint64_t v91 = v90;
    uint64_t v136 = v90;
    char v93 = v124;
    uint64_t v92 = v125;
    uint64_t v94 = *(void (**)(char *, void, uint64_t))(v125 + 104);
    uint64_t v95 = v126;
    v94(v124, enum case for REMSmartListSection.PredefinedSectionType.Today.beforeToday(_:), v126);
    REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    uint64_t v137 = *(char **)(v92 + 8);
    ((void (*)(char *, uint64_t))v137)(v93, v95);
    uint64_t v139 = v60;
    sub_100094134(&qword_100918510);
    swift_allocObject();
    unint64_t v135 = (unint64_t)v60;
    swift_bridgeObjectRetain();
    *(void *)(v91 + 32) = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    v94(v93, enum case for REMSmartListSection.PredefinedSectionType.Today.todayAllDay(_:), v95);
    REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    uint64_t v96 = v137;
    ((void (*)(char *, uint64_t))v137)(v93, v95);
    uint64_t v139 = v123;
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v97 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    uint64_t v98 = (void *)v136;
    *(void *)(v136 + 40) = v97;
    v94(v93, enum case for REMSmartListSection.PredefinedSectionType.Today.todayNonAllDay(_:), v95);
    REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter();
    ((void (*)(char *, uint64_t))v96)(v93, v95);
    uint64_t v139 = v122;
    swift_allocObject();
    swift_bridgeObjectRetain();
    v98[6] = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)();
    uint64_t v139 = v98;
    specialized Array._endMutation()();
    uint64_t v99 = v114;
    uint64_t v100 = v115;
    uint64_t v101 = REMOrderedIdentifierMap.reorder<A>(objects:)();
    if (v100)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v127 + 8))(v133, v132);
      uint64_t v38 = (uint64_t)v116;
      a3 = v117;
      if (qword_100907578 != -1) {
        goto LABEL_77;
      }
      goto LABEL_59;
    }
    unint64_t v109 = v101;
    swift_bridgeObjectRelease();
    uint64_t v139 = _swiftEmptyArrayStorage;
    id v110 = v116;
    if (v109 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v111 = _CocoaArrayWrapper.endIndex.getter();
      if (!v111) {
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v111 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v111) {
        goto LABEL_73;
      }
    }
    if (v111 < 1)
    {
      __break(1u);
LABEL_82:
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if ((v109 & 0xC000000000000001) != 0)
    {
      uint64_t v112 = 0;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        ++v112;
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter();
        swift_unknownObjectRelease();
        sub_1002026F8(v138);
      }
      while (v111 != v112);
    }
    else
    {
      uint64_t v113 = 0;
      do
      {
        ++v113;
        swift_retain();
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter();
        swift_release();
        sub_1002026F8(v138);
      }
      while (v111 != v113);
    }
LABEL_73:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    a3 = v139;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v133, v132);
    return (uint64_t)a3;
  }
  unint64_t v134 = v36 & 0xC000000000000001;
  uint64_t v38 = 4;
  while (1)
  {
    id v41 = v134 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v36 + 8 * v38);
    id v42 = v41;
    char v43 = (void *)(v38 - 3);
    if (__OFADD__(v38 - 4, 1)) {
      break;
    }
    a3 = (void *)v37;
    id v44 = [v41 remObjectID];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v139 = v35;
    unint64_t v47 = sub_100307180(v44);
    uint64_t v48 = v35[2];
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49)) {
      goto LABEL_75;
    }
    char v51 = v46;
    if (v35[3] >= v50)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v35 = v139;
        if (v46) {
          goto LABEL_10;
        }
      }
      else
      {
        sub_100318DDC();
        id v35 = v139;
        if (v51) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      sub_10030EFF0(v50, isUniquelyReferenced_nonNull_native);
      unint64_t v52 = sub_100307180(v44);
      if ((v51 & 1) != (v53 & 1)) {
        goto LABEL_82;
      }
      unint64_t v47 = v52;
      id v35 = v139;
      if (v51)
      {
LABEL_10:
        uint64_t v39 = v35[7];
        uint64_t v40 = 8 * v47;

        *(void *)(v39 + v40) = v42;
        goto LABEL_11;
      }
    }
    v35[(v47 >> 6) + 8] |= 1 << v47;
    uint64_t v54 = 8 * v47;
    *(void *)(v35[6] + v54) = v44;
    *(void *)(v35[7] + v54) = v42;
    uint64_t v55 = v35[2];
    BOOL v56 = __OFADD__(v55, 1);
    uint64_t v57 = v55 + 1;
    if (v56) {
      goto LABEL_76;
    }
    _OWORD v35[2] = v57;
    id v58 = v44;
LABEL_11:

    swift_bridgeObjectRelease();
    ++v38;
    uint64_t v37 = (uint64_t)a3;
    unint64_t v36 = v135;
    if (v43 == a3) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  swift_once();
LABEL_59:
  uint64_t v102 = type metadata accessor for Logger();
  sub_10008E2DC(v102, (uint64_t)qword_1009184B8);
  swift_errorRetain();
  swift_errorRetain();
  char v103 = Logger.logObject.getter();
  os_log_type_t v104 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v103, v104))
  {
    char v105 = (uint8_t *)swift_slowAlloc();
    uint64_t v139 = (void *)swift_slowAlloc();
    *(_DWORD *)char v105 = 136446210;
    swift_getErrorValue();
    uint64_t v106 = Error.rem_errorDescription.getter();
    uint64_t v138 = sub_1000C51B8(v106, v107, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v103, v104, "today data view error upon reordering reminders by user-defined sections ordering {error: %{public}s}", v105, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_62:
  swift_bridgeObjectRetain();
  return (uint64_t)a3;
}

char *sub_10042DEC0(uint64_t a1, void *a2, uint64_t a3)
{
  id v89 = a2;
  unint64_t v109 = (void *)a1;
  uint64_t v85 = type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group.GroupType();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v83 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Date();
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  unint64_t v86 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v97 = *(void *)(Subtasks - 8);
  uint64_t v98 = Subtasks;
  __chkstk_darwin(Subtasks);
  uint64_t v96 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = _s10PredicatesOMa(0);
  __chkstk_darwin(v91);
  uint64_t v92 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v107 = v9;
  __chkstk_darwin(v9);
  uint64_t v95 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v99 = (char *)&v81 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v13 - 8);
  uint64_t v108 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v16 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v94 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v93 = (char *)&v81 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v81 - v21;
  uint64_t v23 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v23);
  uint64_t v82 = (uint64_t *)((char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  uint64_t v101 = (uint64_t (*)(uint64_t *, uint64_t))((char *)&v81 - v26);
  __chkstk_darwin(v27);
  uint64_t v100 = (uint64_t)&v81 - v28;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v81 - v30;
  __chkstk_darwin(v32);
  unint64_t v34 = (char *)&v81 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v81 - v36;
  uint64_t v111 = a3;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v102 = v16 + 8;
  uint64_t v103 = Configuration;
  os_log_type_t v104 = v38;
  v38(v22, Configuration);
  uint64_t v39 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v40 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  id v41 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104);
  v41(v34, v39, v40);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4((uint64_t)v108, (uint64_t)v34, (uint64_t)v37);
  id v110 = v37;
  uint64_t v42 = (uint64_t)v37;
  uint64_t v43 = v23;
  sub_1001F82BC(v42, (uint64_t)v31);
  LODWORD(v23) = swift_getEnumCaseMultiPayload();
  sub_10012607C((uint64_t)v31, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  uint64_t v81 = v43;
  uint64_t v90 = v22;
  if (v23)
  {
    v41(v34, v39, v40);
    swift_storeEnumTagMultiPayload();
    REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
    uint64_t v31 = v99;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    uint64_t v44 = v103;
    v104(v22, v103);
    char v45 = (uint64_t (*)(uint64_t *, uint64_t))sub_100527148((uint64_t)v34, (uint64_t)v31, 0);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v31, v107);
    sub_10012607C((uint64_t)v34, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    unint64_t v47 = v109;
    uint64_t v46 = (uint64_t)v110;
  }
  else
  {
    char v45 = 0;
    unint64_t v47 = v109;
    uint64_t v46 = (uint64_t)v110;
    uint64_t v44 = v103;
  }
  uint64_t v48 = v105;
  BOOL v49 = v101;
  uint64_t v50 = (char *)REMSmartListTypeToday;
  char v51 = sub_100521C40((uint64_t)v101, v47, REMSmartListTypeToday, v46);
  if (v48)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    sub_10012607C(v46, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    return v31;
  }
  uint64_t v99 = v50;
  uint64_t v101 = v45;
  char v105 = v51;
  uint64_t v103 = 0;
  sub_100431BD4((uint64_t)v49, v100);
  sub_100094134(&qword_100916960);
  uint64_t v52 = (uint64_t)v92;
  char v53 = v90;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  uint64_t v54 = v104;
  v104(v53, v44);
  REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter();
  swift_storeEnumTagMultiPayload();
  uint64_t v108 = (char *)sub_10038F1F0();
  sub_10012607C(v52, _s10PredicatesOMa);
  if (REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter())
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_10077DE90;
    *(void *)(v55 + 32) = swift_getKeyPath();
    *(void *)(v55 + 40) = swift_getKeyPath();
    *(void *)(v55 + 48) = swift_getKeyPath();
    uint64_t v112 = (char *)v55;
    specialized Array._endMutation()();
    uint64_t v31 = v112;
  }
  else
  {
    uint64_t v31 = (char *)_swiftEmptyArrayStorage;
  }
  BOOL v56 = v96;
  uint64_t v57 = v93;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  uint64_t v58 = (uint64_t)v95;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v54(v57, v44);
  uint64_t v59 = v94;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v54(v59, v44);
  unint64_t v60 = v108;
  uint64_t v61 = (uint64_t)v109;
  uint64_t v62 = v100;
  uint64_t v63 = v103;
  uint64_t v64 = (void (*)(char *, uint64_t))sub_100522260((uint64_t)v109, (uint64_t)v108, v100, 0, v101, v58, v56, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v31, 0, 0);
  if (v63)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v56, v98);
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v58, v107);
    sub_10012607C(v62, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    uint64_t v46 = (uint64_t)v110;
    goto LABEL_12;
  }
  unint64_t v66 = v65;
  os_log_type_t v104 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v56, v98);
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v58, v107);
  uint64_t v67 = v105;
  sub_10052AE6C(v105, v99, v61, v89);
  char v69 = REMRemindersListDataView.TodayGroupInvocation.Parameters.grouped.getter();
  uint64_t v70 = (uint64_t)v110;
  id v71 = v108;
  if ((v69 & 1) == 0)
  {
    uint64_t v74 = v82;
    sub_1001F82BC((uint64_t)v110, (uint64_t)v82);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
      case 3u:
        swift_bridgeObjectRelease();
        sub_10012607C((uint64_t)v74, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
        goto LABEL_21;
      case 4u:
        swift_bridgeObjectRelease();
        uint64_t v79 = *v74;
        uint64_t v80 = (void *)v74[5];
        sub_1001F84E8(v79);

        goto LABEL_21;
      case 5u:
        swift_bridgeObjectRelease();
LABEL_21:
        sub_100094134(&qword_100914808);
        type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group();
        uint64_t v31 = (char *)swift_allocObject();
        *((_OWORD *)v31 + 1) = xmmword_100776E40;
        (*(void (**)(char *, void, uint64_t))(v84 + 104))(v83, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.today(_:), v85);
        REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();

        goto LABEL_22;
      default:
        id v75 = v74;
        unint64_t v76 = (unint64_t)v86;
        REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter();
        unint64_t v77 = v105;
        uint64_t v111 = sub_10042CEBC(v76, v105, v104, v66);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v87 + 8))(v76, v88);
        sub_100094134(&qword_100914808);
        type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group();
        uint64_t v31 = (char *)swift_allocObject();
        *((_OWORD *)v31 + 1) = xmmword_100776E40;
        (*(void (**)(char *, void, uint64_t))(v84 + 104))(v83, enum case for REMRemindersListDataView.TodayGroupModel.Group.GroupType.today(_:), v85);
        REMRemindersListDataView.TodayGroupModel.Group.init(groupType:reminders:)();

        sub_10012607C(v100, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
        uint64_t v78 = v70;
        uint64_t v70 = (uint64_t)v75;
        goto LABEL_23;
    }
  }
  uint64_t v72 = (uint64_t)v86;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.today.getter();
  uint64_t v73 = v67;
  uint64_t v31 = (char *)sub_10042BB6C(v72, v67, v104, v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v72, v88);
LABEL_22:
  uint64_t v78 = v100;
LABEL_23:
  sub_10012607C(v78, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  sub_10012607C(v70, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v31;
}

uint64_t sub_10042EC68(uint64_t a1, char a2)
{
  uint64_t v92 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2) {
    goto LABEL_2;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a1, v11, v13);
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v15, v11);
  if (v20 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v15, v11);
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v15, v7);
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100776E40;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 32) = 0xD000000000000018;
    *(void *)(v21 + 40) = 0x80000001007D4990;
    NSString v22 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v24 = self;
    id v25 = [v24 predicateWithFormat:v22 argumentArray:isa];

    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_100776E80;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 32) = 0xD00000000000001DLL;
    *(void *)(v26 + 40) = 0x80000001007D49B0;
    *(void *)(v26 + 88) = v7;
    uint64_t v27 = sub_1000C1FE8((uint64_t *)(v26 + 64));
    (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(v27, v10, v7);
    NSString v28 = String._bridgeToObjectiveC()();
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v30 = [v24 predicateWithFormat:v28 argumentArray:v29];

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_10077B710;
    *(void *)(v31 + 32) = v25;
    *(void *)(v31 + 40) = v30;
    v93[0] = v31;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
    id v32 = v25;
    id v33 = v30;
    Class v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v19 = [self orPredicateWithSubpredicates:v34];

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_34;
  }
  if (v20 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v15, v11);
    uint64_t v35 = *v15;
    uint64_t v87 = sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_100776E40;
    *(void *)(v36 + 56) = &type metadata for String;
    *(void *)(v36 + 32) = 0xD000000000000018;
    *(void *)(v36 + 40) = 0x80000001007D4990;
    NSString v37 = String._bridgeToObjectiveC()();
    Class v38 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v86 = self;
    id v88 = [v86 predicateWithFormat:v37 argumentArray:v38];

    unint64_t v39 = v35 & 0xC000000000000001;
    if ((v35 & 0xC000000000000001) != 0)
    {
      uint64_t v40 = __CocoaSet.count.getter();
      uint64_t v41 = v92;
      if (v40)
      {
        uint64_t v42 = __CocoaSet.count.getter();
        if (!v42)
        {
          swift_bridgeObjectRelease();
          uint64_t v43 = _swiftEmptyArrayStorage;
LABEL_33:
          uint64_t v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_100776E80;
          *(void *)(v69 + 56) = &type metadata for String;
          *(void *)(v69 + 32) = 0xD000000000000019;
          *(void *)(v69 + 40) = 0x80000001007C72B0;
          *(void *)(v69 + 88) = sub_100094134(&qword_10090DC48);
          *(void *)(v69 + 64) = v43;
          NSString v70 = String._bridgeToObjectiveC()();
          Class v71 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v72 = [v86 predicateWithFormat:v70 argumentArray:v71];

          sub_100094134((uint64_t *)&unk_10090AF20);
          uint64_t v73 = swift_allocObject();
          *(_OWORD *)(v73 + 16) = xmmword_10077B710;
          uint64_t v74 = v88;
          *(void *)(v73 + 32) = v88;
          *(void *)(v73 + 40) = v72;
          v93[0] = v73;
          specialized Array._endMutation()();
          sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
          id v75 = v74;
          id v76 = v72;
          Class v77 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v19 = [self orPredicateWithSubpredicates:v77];

          goto LABEL_34;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v42 = *(void *)(v35 + 16);
      uint64_t v41 = v92;
      if (v42)
      {
LABEL_14:
        uint64_t v97 = _swiftEmptyArrayStorage;
        sub_1001DE148(0, v42 & ~(v42 >> 63), 0);
        if (v39)
        {
          uint64_t v44 = __CocoaSet.startIndex.getter();
          unsigned __int8 v46 = 1;
        }
        else
        {
          uint64_t v44 = sub_1003CA790(v35);
          unsigned __int8 v46 = v47 & 1;
        }
        uint64_t v94 = v44;
        uint64_t v95 = v45;
        unsigned __int8 v96 = v46;
        if ((v42 & 0x8000000000000000) == 0)
        {
          uint64_t v48 = v35 & 0xFFFFFFFFFFFFFF8;
          if (v35 < 0) {
            uint64_t v48 = v35;
          }
          unint64_t v90 = v35 & 0xC000000000000001;
          uint64_t v91 = v48;
          uint64_t v89 = v4 + 32;
          do
          {
            while (1)
            {
              sub_1003C9F1C(v94, v95, v96, v35);
              uint64_t v63 = v62;
              id v64 = [v62 uuid];
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v65 = v97;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1001DE148(0, v65[2] + 1, 1);
                unint64_t v65 = v97;
              }
              unint64_t v67 = v65[2];
              unint64_t v66 = v65[3];
              if (v67 >= v66 >> 1)
              {
                sub_1001DE148(v66 > 1, v67 + 1, 1);
                unint64_t v65 = v97;
              }
              v65[2] = v67 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v65+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v67, v6, v41);
              uint64_t v97 = v65;
              if (v39) {
                break;
              }
              uint64_t v49 = v94;
              uint64_t v50 = v95;
              unsigned __int8 v51 = v96;
              uint64_t v52 = sub_1003C9E34(v94, v95, v96, v35);
              uint64_t v53 = v4;
              uint64_t v54 = v6;
              uint64_t v55 = v35;
              uint64_t v57 = v56;
              char v59 = v58;
              char v60 = v51;
              unint64_t v39 = v90;
              sub_1000E4EA4(v49, v50, v60);
              uint64_t v94 = v52;
              uint64_t v95 = v57;
              uint64_t v35 = v55;
              uint64_t v6 = v54;
              uint64_t v4 = v53;
              unsigned __int8 v61 = v59 & 1;
              uint64_t v41 = v92;
              unsigned __int8 v96 = v61;
              if (!--v42) {
                goto LABEL_32;
              }
            }
            if ((v96 & 1) == 0) {
              goto LABEL_42;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_100094134(&qword_10090FE48);
            unint64_t v68 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v68(v93, 0);
            --v42;
          }
          while (v42);
LABEL_32:
          sub_1000E4EA4(v94, v95, v96);
          swift_bridgeObjectRelease();
          uint64_t v43 = v97;
          goto LABEL_33;
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
    }
    swift_bridgeObjectRelease();
    id v19 = v88;
    goto LABEL_34;
  }
  if (v20 != enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    if (v20 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      id v19 = [self predicateWithValue:1];
      goto LABEL_34;
    }
    goto LABEL_43;
  }
LABEL_2:
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100776E40;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 32) = 0xD000000000000018;
  *(void *)(v16 + 40) = 0x80000001007D4990;
  NSString v17 = String._bridgeToObjectiveC()();
  Class v18 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = [self predicateWithFormat:v17 argumentArray:v18];

LABEL_34:
  uint64_t v78 = (void *)sub_1002308B0(0x65722E6D72616C61, 0xEE007265646E696DLL, 0);
  v93[0] = (uint64_t)_swiftEmptyArrayStorage;
  id v79 = v78;
  id v80 = v19;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (v78)
  {
    id v81 = v79;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v93[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }

  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  Class v82 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v83 = [self andPredicateWithSubpredicates:v82];

  return (uint64_t)v83;
}

uint64_t sub_10042F98C(unint64_t a1)
{
  uint64_t v2 = v1;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
LABEL_3:
  uint64_t v24 = v2;
  uint64_t v5 = 0;
  uint64_t v6 = &selRef_intersectsSet_;
  for (uint64_t i = &selRef_intersectsSet_; ; uint64_t i = &selRef_intersectsSet_)
  {
    id v8 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a1 + 8 * v5 + 32);
    uint64_t v9 = v8;
    [v8 v6[115]:v24];
    double v11 = v10;
    [v9 longitude];
    double v13 = v12;
    [v9 i[403]];
    double v15 = v14;
    id v16 = [v9 locationUID];
    if (v16)
    {
      NSString v17 = v16;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      [v9 v6[115]];
      Double.write<A>(to:)();
      [v9 longitude];
      Double.write<A>(to:)();
      [v9 i[403]];
      Double.write<A>(to:)();
    }
    id v18 = objc_allocWithZone((Class)CLCircularRegion);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [v18 initWithCenter:v19 radius:v11 identifier:v13];

    uint64_t v2 = (void *)REMStructuredLocation.clCircularRegion.getter();
    Swift::Bool v21 = CLCircularRegion.overlaps(_:)((CLCircularRegion)v2);

    if (!v21) {
      break;
    }
    uint64_t v22 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    ++v5;
    uint64_t v6 = &selRef_intersectsSet_;
    if (v22 == v4) {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_10042FBF0(uint64_t *a1)
{
  unint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_10042F98C(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v44 = v1;
  if (v1) {
    return v4;
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_58;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_59:
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7 != v42) {
        goto LABEL_6;
      }
    }
    else if (v7 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v7 = v4 + 5;
      id v8 = &selRef_intersectsSet_;
      uint64_t v9 = &selRef_intersectsSet_;
      for (uint64_t i = &selRef_intersectsSet_; ; uint64_t i = &selRef_intersectsSet_)
      {
        unint64_t v11 = v7 - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          id v13 = *(id *)(v12 + 8 * v7);
        }
        double v14 = v13;
        [v13 v8[115]:v44];
        double v16 = v15;
        [v14 v9[135]];
        double v18 = v17;
        [v14 i[403]];
        double v20 = v19;
        id v21 = [v14 locationUID];
        if (v21)
        {
          uint64_t v22 = v21;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          [v14 v8[115]];
          Double.write<A>(to:)();
          [v14 v9[135]];
          Double.write<A>(to:)();
          [v14 i[403]];
          Double.write<A>(to:)();
        }
        id v23 = objc_allocWithZone((Class)CLCircularRegion);
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v25 = [v23 initWithCenter:v24 radius:v16 identifier:v18];

        uint64_t v26 = (void *)REMStructuredLocation.clCircularRegion.getter();
        Swift::Bool v27 = CLCircularRegion.overlaps(_:)((CLCircularRegion)v26);

        if (v27) {
          break;
        }
LABEL_35:
        unint64_t v38 = v7 - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_50;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v39 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v7;
        BOOL v40 = v38 == v39;
        id v8 = &selRef_intersectsSet_;
        uint64_t v9 = &selRef_intersectsSet_;
        if (v40) {
          return v4;
        }
      }
      if (v11 == v4)
      {
LABEL_34:
        if (__OFADD__(v4++, 1)) {
          goto LABEL_51;
        }
        goto LABEL_35;
      }
      uint64_t v28 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v28 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_20:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_54;
          }
          if (v11 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_55;
          }
          id v30 = *(id *)(v28 + 8 * v7);
          goto LABEL_23;
        }
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        if (v4 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_53;
        }
        id v29 = *(id *)(v28 + 8 * v4 + 32);
        if ((v28 & 0xC000000000000001) == 0) {
          goto LABEL_20;
        }
      }
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v28 = *a1;
LABEL_23:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v28;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v28 < 0 || (v28 & 0x4000000000000000) != 0)
      {
        uint64_t v28 = sub_1001ECD68(v28);
        *a1 = v28;
      }
      id v32 = *(void **)((v28 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v30;

      specialized Array._endMutation()();
      uint64_t v33 = *a1;
      int v34 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v33;
      if (!v34 || v33 < 0 || (v33 & 0x4000000000000000) != 0)
      {
        uint64_t v33 = sub_1001ECD68(v33);
        *a1 = v33;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_56;
      }
      uint64_t v35 = v33 & 0xFFFFFFFFFFFFFF8;
      if (v11 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_57;
      }
      uint64_t v36 = *(void **)(v35 + 8 * v7);
      *(void *)(v35 + 8 * v7) = v29;

      specialized Array._endMutation()();
      goto LABEL_34;
    }
    return v4;
  }
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t sub_100430084(unint64_t a1, void *a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
LABEL_3:
  for (uint64_t i = 0; ; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(a1 + 8 * i + 32);
    }
    unint64_t v7 = v6;
    id v8 = [v6 alarm];
    uint64_t v9 = v8;
    if (!v8 || (id v10 = [v8 reminder], v9, !v10))
    {

      return i;
    }
    if (!a2) {
      break;
    }
    unsigned __int8 v11 = [a2 evaluateWithObject:v10];

    if ((v11 & 1) == 0) {
      return i;
    }
    uint64_t v12 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v12 == v4) {
      return 0;
    }
  }
  if (qword_1009072E8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_100914C30);
  id v14 = v10;
  double v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    log = v15;
    double v17 = (uint8_t *)swift_slowAlloc();
    double v18 = (void *)swift_slowAlloc();
    *(_DWORD *)double v17 = 138412290;
    id v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v18 = v10;

    _os_log_impl((void *)&_mh_execute_header, log, v16, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", v17, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_10043037C(uint64_t *a1, void *a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  id v42 = a2;
  uint64_t v6 = sub_100430084(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if (v8)
  {
    if ((unint64_t)*a1 >> 62) {
      goto LABEL_71;
    }
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v10 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_62:
    __break(1u);
LABEL_63:
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 != v38) {
      goto LABEL_6;
    }
    return v6;
  }
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_63;
  }
  if (v10 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return v6;
  }
LABEL_6:
  uint64_t v11 = v6 + 5;
  *(void *)&long long v9 = 138412290;
  long long v40 = v9;
  while (1)
  {
    unint64_t v12 = v11 - 4;
    uint64_t v13 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      id v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_59;
      }
      id v14 = *(id *)(v13 + 8 * v11);
    }
    double v15 = v14;
    id v16 = [v14 alarm];
    if (!v16) {
      goto LABEL_45;
    }
    double v17 = v16;
    unint64_t v18 = v6;
    id v19 = [v16 reminder];

    if (!v19)
    {
      uint64_t v6 = v18;
LABEL_45:

      goto LABEL_46;
    }
    if (!v42)
    {
      if (qword_1009072E8 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_100914C30);
      uint64_t v31 = v19;
      id v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v41 = v31;
        uint64_t v34 = swift_slowAlloc();
        uint64_t v35 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = v40;
        *(void *)(v34 + 4) = v41;
        *uint64_t v35 = v19;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", (uint8_t *)v34, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v31 = v41;
        swift_slowDealloc();
      }
      else
      {

        double v15 = v32;
        id v32 = v31;
      }
      uint64_t v6 = v18;

      double v15 = v32;
      goto LABEL_45;
    }
    unsigned __int8 v20 = [v42 evaluateWithObject:v19];

    if ((v20 & 1) == 0)
    {
      uint64_t v6 = v18;
      goto LABEL_46;
    }
    if (v12 == v18) {
      goto LABEL_34;
    }
    uint64_t v21 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v21 = *a1;
      if ((*a1 & 0xC000000000000001) == 0) {
        goto LABEL_20;
      }
      goto LABEL_54;
    }
    if ((v18 & 0x8000000000000000) != 0) {
      break;
    }
    if (v18 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_66;
    }
    id v22 = *(id *)(v21 + 8 * v18 + 32);
    if ((v21 & 0xC000000000000001) == 0)
    {
LABEL_20:
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_67;
      }
      if (v12 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_68;
      }
      id v23 = *(id *)(v21 + 8 * v11);
      goto LABEL_23;
    }
LABEL_54:
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v21 = *a1;
LABEL_23:
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v21;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v21 < 0 || (v21 & 0x4000000000000000) != 0)
    {
      uint64_t v21 = sub_1001ECD68(v21);
      *a1 = v21;
    }
    id v25 = *(void **)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v18 + 0x20);
    *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v18 + 0x20) = v23;

    specialized Array._endMutation()();
    uint64_t v26 = *a1;
    int v27 = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v26;
    if (!v27 || v26 < 0 || (v26 & 0x4000000000000000) != 0)
    {
      uint64_t v26 = sub_1001ECD68(v26);
      *a1 = v26;
    }
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    uint64_t v28 = v26 & 0xFFFFFFFFFFFFFF8;
    if (v12 >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_70;
    }
    id v29 = *(void **)(v28 + 8 * v11);
    *(void *)(v28 + 8 * v11) = v22;

    specialized Array._endMutation()();
LABEL_34:
    uint64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_61;
    }
LABEL_46:
    uint64_t v10 = v11 - 3;
    if (__OFADD__(v12, 1)) {
      goto LABEL_60;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    ++v11;
    if (v10 == v36) {
      return v6;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v39;
}

void sub_100430858(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  v29[0] = a2;
  id v6 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  char v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  uint64_t v10 = (void *)sub_10042EC68(a3, a4);
  [v9 setPredicate:v10];

  sub_1000963CC(0, &qword_100910E10);
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v11];

  id v32 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 4, 0);
  unint64_t v12 = v32;
  uint64_t v31 = &type metadata for String;
  *(void *)&long long v30 = 0x656475746974616CLL;
  *((void *)&v30 + 1) = 0xE800000000000000;
  unint64_t v14 = v32[2];
  unint64_t v13 = v32[3];
  if (v14 >= v13 >> 1)
  {
    sub_1001DE1C4(v13 > 1, v14 + 1, 1);
    unint64_t v12 = v32;
  }
  v12[2] = v14 + 1;
  sub_10009A1A0(&v30, &v12[4 * v14 + 4]);
  uint64_t v31 = &type metadata for String;
  *(void *)&long long v30 = 0x64757469676E6F6CLL;
  *((void *)&v30 + 1) = 0xE900000000000065;
  id v32 = v12;
  unint64_t v16 = v12[2];
  unint64_t v15 = v12[3];
  if (v16 >= v15 >> 1)
  {
    sub_1001DE1C4(v15 > 1, v16 + 1, 1);
    unint64_t v12 = v32;
  }
  v12[2] = v16 + 1;
  sub_10009A1A0(&v30, &v12[4 * v16 + 4]);
  uint64_t v31 = &type metadata for String;
  *(void *)&long long v30 = 0x737569646172;
  *((void *)&v30 + 1) = 0xE600000000000000;
  id v32 = v12;
  unint64_t v18 = v12[2];
  unint64_t v17 = v12[3];
  if (v18 >= v17 >> 1)
  {
    sub_1001DE1C4(v17 > 1, v18 + 1, 1);
    unint64_t v12 = v32;
  }
  v12[2] = v18 + 1;
  sub_10009A1A0(&v30, &v12[4 * v18 + 4]);
  uint64_t v31 = &type metadata for String;
  *(void *)&long long v30 = 0x6E6F697461636F6CLL;
  *((void *)&v30 + 1) = 0xEB00000000444955;
  id v32 = v12;
  unint64_t v20 = v12[2];
  unint64_t v19 = v12[3];
  if (v20 >= v19 >> 1)
  {
    sub_1001DE1C4(v19 > 1, v20 + 1, 1);
    unint64_t v12 = v32;
  }
  v12[2] = v20 + 1;
  sub_10009A1A0(&v30, &v12[4 * v20 + 4]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v9 setPropertiesToFetch:isa];

  id v22 = v29[1];
  uint64_t v23 = NSManagedObjectContext.fetch<A>(_:)();
  if (v22)
  {

    return;
  }
  *(void *)&long long v30 = v23;
  id v24 = v29[0];
  uint64_t v25 = sub_10042FBF0((uint64_t *)&v30);

  if (!((unint64_t)v30 >> 62))
  {
    uint64_t v26 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26 >= v25) {
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28 >= (uint64_t)v8) {
      goto LABEL_15;
    }
LABEL_19:
    __break(1u);
    JUMPOUT(0x100430EC8);
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v26 < v25) {
    goto LABEL_17;
  }
LABEL_13:
  sub_1001ECEF0(v25, v26);
  swift_storeEnumTagMultiPayload();
  int v27 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v8, _s10PredicatesOMa);
  id v6 = v27;
  char v8 = (char *)sub_10043037C((uint64_t *)&v30, v27);

  if ((unint64_t)v30 >> 62) {
    goto LABEL_18;
  }
  uint64_t v28 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v28 < (uint64_t)v8) {
    goto LABEL_19;
  }
LABEL_15:
  sub_1001ECEF0((uint64_t)v8, v28);
}

void *sub_100430F08(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v37 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v30 = (char *)&v29 - v11;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v29 = v3;
    unint64_t v36 = a1 & 0xC000000000000001;
    id v32 = (void (**)(char *))(v31 + 32);
    os_log_type_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t v13 = 4;
    uint64_t v34 = v12;
    uint64_t v35 = (id *)a1;
    uint64_t v14 = v38;
    while (1)
    {
      uint64_t v15 = v8;
      uint64_t v8 = v13 - 4;
      unint64_t v16 = v36 ? (id *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (id *)*(id *)(a1 + 8 * v13);
      a1 = (unint64_t)v16;
      uint64_t v17 = v13 - 3;
      if (__OFADD__(v8, 1)) {
        break;
      }
      id v18 = [v16 objectID];
      unint64_t v19 = v18;
      if (*(void *)(v14 + 16) && (unint64_t v20 = sub_100306F98((uint64_t)v18), (v21 & 1) != 0)) {
        unint64_t v3 = *(void (**)(char *))(*(void *)(v14 + 56) + 8 * v20);
      }
      else {
        unint64_t v3 = 0;
      }

      sub_100521784((void *)a1, (uint64_t)v3, 0, (uint64_t)v7);
      uint64_t v8 = v15;
      if ((*v33)(v7, 1, v15) == 1)
      {
        sub_1000966BC((uint64_t)v7, &qword_10090FD78);
      }
      else
      {
        unint64_t v3 = *v32;
        id v22 = v30;
        (*v32)(v30);
        ((void (*)(char *, char *, uint64_t))v3)(v37, v22, v15);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v23 = (unint64_t)v39;
        }
        else {
          unint64_t v23 = sub_1003091E4(0, v39[2] + 1, 1, (unint64_t)v39);
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        if (v25 >= v24 >> 1) {
          unint64_t v23 = sub_1003091E4(v24 > 1, v25 + 1, 1, v23);
        }
        *(void *)(v23 + 16) = v25 + 1;
        unint64_t v26 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v39 = (void *)v23;
        unint64_t v27 = v23 + v26 + *(void *)(v31 + 72) * v25;
        uint64_t v8 = v15;
        ((void (*)(unint64_t, char *, uint64_t))v3)(v27, v37, v15);
      }
      a1 = (unint64_t)v35;
      ++v13;
      uint64_t v14 = v38;
      if (v17 == v34)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004312AC(uint64_t a1, uint64_t a2)
{
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v93 = *(void *)(Subtasks - 8);
  uint64_t v94 = Subtasks;
  __chkstk_darwin(Subtasks);
  uint64_t v91 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v76 - v7;
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v89 = *(void *)(v9 - 8);
  uint64_t v90 = v9;
  __chkstk_darwin(v9);
  id v88 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v96 = v11;
  uint64_t v97 = v12;
  __chkstk_darwin(v11);
  uint64_t v92 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v86 = (char *)&v76 - v15;
  __chkstk_darwin(v16);
  id v18 = (char *)&v76 - v17;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v20 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v87 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v85 = (char *)&v76 - v23;
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v76 - v25;
  __chkstk_darwin(v27);
  id v29 = (char *)&v76 - v28;
  uint64_t v30 = a2;
  uint64_t v31 = (void *)REMRemindersListDataView.TodayGroupInvocation.Parameters.currentLocation.getter();
  id v32 = _swiftEmptyArrayStorage;
  if (!v31) {
    return (uint64_t)v32;
  }
  id v83 = v26;
  uint64_t v84 = v8;
  id v95 = v31;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  id v33 = v95;
  unint64_t v36 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v34 = v20 + 8;
  uint64_t v35 = v36;
  v36(v29, Configuration);
  uint64_t v37 = v98;
  sub_100430858(a1, v33, (uint64_t)v18, 0);
  if (v37)
  {

    (*(void (**)(char *, uint64_t))(v97 + 8))(v18, v96);
    return (uint64_t)v32;
  }
  uint64_t v39 = (void *)a1;
  unint64_t v40 = v38;
  uint64_t v78 = v35;
  uint64_t v82 = v30;
  id v77 = v39;
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v97 += 8;
  id v81 = v41;
  v41((uint64_t)v18, v96);
  unint64_t v99 = (unint64_t)_swiftEmptyArrayStorage;
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v42 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v79 = v34;
  uint64_t v80 = Configuration;
  if (v42)
  {
    uint64_t v98 = 0;
    if (v42 < 1)
    {
      __break(1u);
      goto LABEL_36;
    }
    for (uint64_t i = 0; i != v42; ++i)
    {
      if ((v40 & 0xC000000000000001) != 0) {
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v44 = *(id *)(v40 + 8 * i + 32);
      }
      uint64_t v45 = v44;
      id v46 = [v44 alarm];
      if (v46)
      {
        char v47 = v46;
        id v48 = [v46 reminder];

        if (v48)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)v99;
    uint64_t v50 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v50 = 0;
  }
  swift_bridgeObjectRelease();
  unint64_t v99 = (unint64_t)v49;
  sub_100094134(&qword_10090D750);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_100431B78();
  sub_1001207D4();
  uint64_t v51 = Sequence.unique<A>(by:)();
  if (v50)
  {

LABEL_24:
    swift_bridgeObjectRelease();
    return (uint64_t)v32;
  }
  unint64_t v53 = v51;
  uint64_t v98 = 0;
  swift_bridgeObjectRelease();
  uint64_t v54 = (uint64_t)v88;
  uint64_t v55 = v89;
  uint64_t v56 = v90;
  (*(void (**)(char *, void, uint64_t))(v89 + 104))(v88, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v90);
  unint64_t v57 = (unint64_t)v83;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  uint64_t v58 = (uint64_t)v86;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  unint64_t v59 = v57;
  uint64_t v60 = v80;
  unsigned __int8 v61 = v78;
  v78((char *)v59, v80);
  id v83 = (char *)sub_1000ED0E8(v54, v58, v53);
  swift_bridgeObjectRelease();
  uint64_t v62 = v58;
  uint64_t v63 = v94;
  v81(v62, v96);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  id v64 = v85;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  unint64_t v65 = v84;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v61(v64, v60);
  unint64_t v66 = v87;
  REMRemindersListDataView.TodayGroupInvocation.Parameters.configuration.getter();
  unint64_t v67 = v92;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v61(v66, v60);
  uint64_t v68 = v93;
  uint64_t v69 = v91;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v91, v65, v63);
  int v70 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v69, v63);
  if (v70 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:)
    || v70 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    unint64_t v74 = sub_1002EDB5C((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v72 = (unint64_t)v83;
    goto LABEL_33;
  }
  uint64_t v71 = v98;
  if (v70 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
  {
    unint64_t v72 = (unint64_t)v83;
    sub_1005242F8((unint64_t)v83, v67, v77, 0);
    if (v71)
    {

      v81((uint64_t)v67, v96);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v63);
      goto LABEL_24;
    }
    unint64_t v74 = v73;
LABEL_33:
    v81((uint64_t)v67, v96);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v63);
    swift_bridgeObjectRetain();
    id v75 = sub_100430F08(v72, v74);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    return (uint64_t)v75;
  }
LABEL_36:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100431B30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100431B78()
{
  unint64_t result = qword_10090FD80;
  if (!qword_10090FD80)
  {
    sub_100096058(&qword_10090D750);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090FD80);
  }
  return result;
}

uint64_t sub_100431BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s9UtilitiesO12SortingStyleOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

const char *sub_100431C40()
{
  return "displayDateTimeZone";
}

void sub_100431C5C(char *a1@<X8>)
{
  sub_10042B5C0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unsigned char *_s3BinOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100431D44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s3BinOMa()
{
  return &_s3BinON;
}

unint64_t sub_100431D80()
{
  unint64_t result = qword_100918518;
  if (!qword_100918518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918518);
  }
  return result;
}

uint64_t sub_100431DD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918520);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918520);
  if (qword_100907838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424F0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100431E9C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  unsigned int v4 = *(void (***)(char *, unint64_t, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_1009186A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - v11;
  unint64_t result = sub_100436B20(a1, (void (*)(void))type metadata accessor for REMCDListInZREMCDOBJECT, &qword_100907888);
  if (v1) {
    return result;
  }
  uint64_t v14 = result;
  uint64_t v51 = _swiftEmptyDictionarySingleton;
  if (result >> 62) {
    goto LABEL_51;
  }
  uint64_t v15 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    char v47 = v12;
    id v48 = (char *)a1;
    uint64_t v42 = v4;
    id v46 = v6;
    if (!v15) {
      break;
    }
    uint64_t v49 = v9;
    uint64_t v12 = (char *)(v14 & 0xC000000000000001);
    a1 = 4;
    unsigned int v6 = (char *)v3;
    while (1)
    {
      unsigned int v4 = (void (**)(char *, unint64_t, uint64_t))(a1 - 4);
      uint64_t v16 = v12
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v14 + 8 * a1);
      uint64_t v9 = v16;
      uint64_t v3 = a1 - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      sub_100432BF4(v48, v9, (uint64_t *)&v51);

      ++a1;
      if (v3 == v15)
      {
        uint64_t v3 = (uint64_t)v6;
        swift_bridgeObjectRelease();
        id v18 = v51;
        uint64_t v12 = v48;
        uint64_t v9 = v49;
        unsigned int v4 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v18 = _swiftEmptyDictionarySingleton;
  uint64_t v12 = (char *)a1;
LABEL_13:
  uint64_t v19 = v18[8];
  uint64_t v39 = v18 + 8;
  uint64_t v20 = 1 << *((unsigned char *)v18 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v40 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v41 = (char *)(v4 + 2);
  id v44 = (void (**)(char *, uint64_t, uint64_t))(v4 + 4);
  uint64_t v45 = (void (**)(char *, uint64_t))(v4 + 1);
  int64_t v38 = v40 - 1;
  uint64_t v43 = v18;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v14 = (uint64_t)v47;
  if (v22)
  {
LABEL_16:
    unint64_t v24 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    uint64_t v49 = v23;
    unint64_t v25 = v24 | ((void)v23 << 6);
LABEL_17:
    unint64_t v26 = v43;
    v42[2](v9, v43[6] + (void)v42[9] * v25, v3);
    uint64_t v27 = v26[7];
    uint64_t v28 = sub_100094134(&qword_1009186A8);
    *(void *)&v9[*(int *)(v28 + 48)] = *(void *)(v27 + 8 * v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 0, 1, v28);
    swift_bridgeObjectRetain();
    uint64_t v12 = v48;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v29 = (int64_t)(v23 + 1);
    if (__OFADD__(v23, 1)) {
      goto LABEL_50;
    }
    if (v29 >= v40)
    {
      uint64_t v49 = v23;
    }
    else
    {
      unint64_t v30 = v39[v29];
      if (v30) {
        goto LABEL_21;
      }
      int64_t v34 = (int64_t)(v23 + 2);
      if (v29 + 1 >= v40) {
        goto LABEL_42;
      }
      unint64_t v30 = v39[v34];
      if (v30) {
        goto LABEL_29;
      }
      if (v29 + 2 >= v40)
      {
        uint64_t v49 = (char *)v34;
      }
      else
      {
        unint64_t v30 = v39[v29 + 2];
        if (v30)
        {
          v29 += 2;
          goto LABEL_21;
        }
        int64_t v34 = v29 + 3;
        if (v29 + 3 < v40)
        {
          unint64_t v30 = v39[v34];
          if (v30)
          {
LABEL_29:
            int64_t v29 = v34;
LABEL_21:
            unint64_t v22 = (v30 - 1) & v30;
            unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
            uint64_t v49 = (char *)v29;
            goto LABEL_17;
          }
          while (1)
          {
            int64_t v29 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              __break(1u);
            }
            if (v29 >= v40) {
              break;
            }
            unint64_t v30 = v39[v29];
            ++v34;
            if (v30) {
              goto LABEL_21;
            }
          }
          int64_t v29 = v38;
LABEL_42:
          uint64_t v49 = (char *)v29;
          goto LABEL_23;
        }
        uint64_t v49 = (char *)(v29 + 2);
      }
    }
LABEL_23:
    uint64_t v31 = sub_100094134(&qword_1009186A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v9, 1, 1, v31);
    unint64_t v22 = 0;
LABEL_24:
    sub_100436C8C((uint64_t)v9, v14);
    uint64_t v32 = sub_100094134(&qword_1009186A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v14, 1, v32) == 1) {
      break;
    }
    a1 = (uint64_t)v9;
    unint64_t v33 = *(void *)(v14 + *(int *)(v32 + 48));
    unsigned int v6 = v46;
    (*v44)(v46, v14, v3);
    sub_1004336E8((uint64_t)v6, v12, v33);
    swift_bridgeObjectRelease();
    (*v45)(v6, v3);
    uint64_t v9 = (char *)a1;
    uint64_t v23 = v49;
    if (v22) {
      goto LABEL_16;
    }
  }
  swift_release();
  if ([v12 hasChanges])
  {
    id v50 = 0;
    if ([v12 save:&v50])
    {
      id v35 = v50;
      [v12 refreshAllObjects];
    }
    else
    {
      id v36 = v50;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_100432548(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  unsigned int v4 = *(void (***)(char *, unint64_t, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_1009186A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - v11;
  unint64_t result = sub_100436B20(a1, (void (*)(void))type metadata accessor for REMCDSmartListInZREMCDOBJECT, &qword_100907AB8);
  if (v1) {
    return result;
  }
  uint64_t v14 = result;
  uint64_t v51 = _swiftEmptyDictionarySingleton;
  if (result >> 62) {
    goto LABEL_51;
  }
  uint64_t v15 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    char v47 = v12;
    id v48 = (char *)a1;
    uint64_t v42 = v4;
    id v46 = v6;
    if (!v15) {
      break;
    }
    uint64_t v49 = v9;
    uint64_t v12 = (char *)(v14 & 0xC000000000000001);
    a1 = 4;
    unsigned int v6 = (char *)v3;
    while (1)
    {
      unsigned int v4 = (void (**)(char *, unint64_t, uint64_t))(a1 - 4);
      uint64_t v16 = v12
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v14 + 8 * a1);
      uint64_t v9 = v16;
      uint64_t v3 = a1 - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      sub_100433CA0(v48, v9, (uint64_t *)&v51);

      ++a1;
      if (v3 == v15)
      {
        uint64_t v3 = (uint64_t)v6;
        swift_bridgeObjectRelease();
        id v18 = v51;
        uint64_t v12 = v48;
        uint64_t v9 = v49;
        unsigned int v4 = v42;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  id v18 = _swiftEmptyDictionarySingleton;
  uint64_t v12 = (char *)a1;
LABEL_13:
  uint64_t v19 = v18[8];
  uint64_t v39 = v18 + 8;
  uint64_t v20 = 1 << *((unsigned char *)v18 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v40 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v41 = (char *)(v4 + 2);
  id v44 = (void (**)(char *, uint64_t, uint64_t))(v4 + 4);
  uint64_t v45 = (void (**)(char *, uint64_t))(v4 + 1);
  int64_t v38 = v40 - 1;
  uint64_t v43 = v18;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v14 = (uint64_t)v47;
  if (v22)
  {
LABEL_16:
    unint64_t v24 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    uint64_t v49 = v23;
    unint64_t v25 = v24 | ((void)v23 << 6);
LABEL_17:
    unint64_t v26 = v43;
    v42[2](v9, v43[6] + (void)v42[9] * v25, v3);
    uint64_t v27 = v26[7];
    uint64_t v28 = sub_100094134(&qword_1009186A8);
    *(void *)&v9[*(int *)(v28 + 48)] = *(void *)(v27 + 8 * v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 0, 1, v28);
    swift_bridgeObjectRetain();
    uint64_t v12 = v48;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v29 = (int64_t)(v23 + 1);
    if (__OFADD__(v23, 1)) {
      goto LABEL_50;
    }
    if (v29 >= v40)
    {
      uint64_t v49 = v23;
    }
    else
    {
      unint64_t v30 = v39[v29];
      if (v30) {
        goto LABEL_21;
      }
      int64_t v34 = (int64_t)(v23 + 2);
      if (v29 + 1 >= v40) {
        goto LABEL_42;
      }
      unint64_t v30 = v39[v34];
      if (v30) {
        goto LABEL_29;
      }
      if (v29 + 2 >= v40)
      {
        uint64_t v49 = (char *)v34;
      }
      else
      {
        unint64_t v30 = v39[v29 + 2];
        if (v30)
        {
          v29 += 2;
          goto LABEL_21;
        }
        int64_t v34 = v29 + 3;
        if (v29 + 3 < v40)
        {
          unint64_t v30 = v39[v34];
          if (v30)
          {
LABEL_29:
            int64_t v29 = v34;
LABEL_21:
            unint64_t v22 = (v30 - 1) & v30;
            unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
            uint64_t v49 = (char *)v29;
            goto LABEL_17;
          }
          while (1)
          {
            int64_t v29 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              __break(1u);
            }
            if (v29 >= v40) {
              break;
            }
            unint64_t v30 = v39[v29];
            ++v34;
            if (v30) {
              goto LABEL_21;
            }
          }
          int64_t v29 = v38;
LABEL_42:
          uint64_t v49 = (char *)v29;
          goto LABEL_23;
        }
        uint64_t v49 = (char *)(v29 + 2);
      }
    }
LABEL_23:
    uint64_t v31 = sub_100094134(&qword_1009186A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v9, 1, 1, v31);
    unint64_t v22 = 0;
LABEL_24:
    sub_100436C8C((uint64_t)v9, v14);
    uint64_t v32 = sub_100094134(&qword_1009186A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v14, 1, v32) == 1) {
      break;
    }
    a1 = (uint64_t)v9;
    unint64_t v33 = *(void *)(v14 + *(int *)(v32 + 48));
    unsigned int v6 = v46;
    (*v44)(v46, v14, v3);
    sub_100434794(v6, v12, v33);
    swift_bridgeObjectRelease();
    (*v45)(v6, v3);
    uint64_t v9 = (char *)a1;
    uint64_t v23 = v49;
    if (v22) {
      goto LABEL_16;
    }
  }
  swift_release();
  if ([v12 hasChanges])
  {
    id v50 = 0;
    if ([v12 save:&v50])
    {
      id v35 = v50;
      [v12 refreshAllObjects];
    }
    else
    {
      id v36 = v50;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return swift_bridgeObjectRelease();
}

void sub_100432BF4(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v87 = a3;
  unint64_t v88 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v88);
  unsigned int v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v81 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v91 = *(void **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v81 - v14;
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  uint64_t v19 = (char *)&v81 - v18;
  uint64_t v94 = 0;
  id v92 = a1;
  id v20 = [a1 existingObjectWithID:a2 error:&v94, v17];
  uint64_t v21 = v94;
  if (!v20) {
    goto LABEL_12;
  }
  unint64_t v22 = v20;
  uint64_t v90 = v10;
  type metadata accessor for REMCDListInZREMCDOBJECT();
  uint64_t v23 = swift_dynamicCastClass();
  if (v23)
  {
    id v24 = (id)v23;
    id v86 = v22;
    type metadata accessor for REMCDListInZREMCDBASELIST();
    id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v26 = (id)v21;
    id v89 = [v25 initWithContext:v92];
    sub_100435A90(v24);
    id v27 = [v24 ckCloudState];
    if (v27)
    {
      uint64_t v28 = v27;
      [v27 setObject:0];
      [v28 setSavedAttachment:0];
      [v28 setSavedReminder:0];
      [v28 setTemplate:0];
      [v28 setList:v89];
    }
    id v29 = [v24 parentList];
    if (!v29)
    {
      uint64_t v60 = 0;
      id v36 = v86;
LABEL_35:
      [v92 refreshObject:v24 mergeChanges:0];

      sub_100096314((uint64_t)v60);
      return;
    }
    id v84 = v29;
    id v85 = v24;
    id v30 = [v29 identifier];
    if (v30)
    {
      uint64_t v31 = v30;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = v90;
      uint64_t v32 = v91;
      int64_t v34 = (void (*)(char *, char *, uint64_t))v91[4];
      v34(v9, v15, v90);
      id v83 = (void (*)(char *, void, uint64_t, uint64_t))v32[7];
      v83(v9, 0, 1, v33);
      int v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32[6])(v9, 1, v33);
      id v36 = v86;
      if (v35 != 1)
      {
        uint64_t v37 = v9;
        uint64_t v38 = v90;
        v34(v19, v37, v90);
        id v39 = [v89 ic_permanentObjectID];
        uint64_t v82 = (void (*)(char *, char *, uint64_t))v91[2];
        v82(v12, v19, v38);
        id v83 = (void (*)(char *, void, uint64_t, uint64_t))v39;
        int64_t v40 = v87;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v94 = *v40;
        uint64_t v42 = v94;
        *int64_t v40 = 0x8000000000000000;
        unint64_t v88 = sub_100306EC4((uint64_t)v12);
        uint64_t v44 = *(void *)(v42 + 16);
        BOOL v45 = (v43 & 1) == 0;
        uint64_t v46 = v44 + v45;
        if (__OFADD__(v44, v45))
        {
          __break(1u);
        }
        else
        {
          uint64_t v21 = v43;
          if (*(void *)(v42 + 24) >= v46)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10031BE08();
              uint64_t v42 = v94;
            }
          }
          else
          {
            sub_100314C18(v46, isUniquelyReferenced_nonNull_native);
            uint64_t v42 = v94;
            unint64_t v88 = sub_100306EC4((uint64_t)v12);
            if ((v21 & 1) != (v47 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
LABEL_12:
              id v48 = (id)v21;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              return;
            }
          }
          *int64_t v40 = v42;
          swift_bridgeObjectRelease();
          unint64_t v72 = (void *)*v40;
          swift_bridgeObjectRetain();
          unint64_t v73 = v88;
          if ((v21 & 1) == 0)
          {
            v82(v15, v12, v90);
            sub_1002C8178(v73, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, v72);
          }
          uint64_t v74 = v72[7];
          swift_bridgeObjectRelease();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)(v74 + 8 * v73) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v74 + 8 * v73) & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
            goto LABEL_31;
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_31:
        id v75 = v83;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v76 = v90;
        id v77 = (void (*)(char *, uint64_t))v91[1];
        v77(v12, v90);
        v77(v19, v76);
        uint64_t v60 = sub_1000D29BC;
LABEL_32:
        id v24 = v85;
        goto LABEL_35;
      }
    }
    else
    {
      id v83 = (void (*)(char *, void, uint64_t, uint64_t))v91[7];
      v83(v9, 1, 1, v90);
      id v36 = v86;
    }
    sub_1001260DC((uint64_t)v9);
    if (qword_100907580 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10008E2DC(v61, (uint64_t)qword_100918520);
    id v62 = v36;
    uint64_t v63 = Logger.logObject.getter();
    int v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      LODWORD(v87) = v64;
      uint64_t v65 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v82 = (void (*)(char *, char *, uint64_t))v66;
      *(_DWORD *)uint64_t v65 = 136315650;
      uint64_t v93 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      uint64_t v94 = v66;
      sub_100094134((uint64_t *)&unk_1009186B0);
      uint64_t v67 = String.init<A>(describing:)();
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v67, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(0xD000000000000014, 0x80000001007CE540, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 22) = 2082;
      id v69 = [v85 identifier];
      if (v69)
      {
        int v70 = v69;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v71 = 0;
      }
      else
      {
        uint64_t v71 = 1;
      }
      v83(v6, v71, 1, v90);
      uint64_t v78 = Optional.descriptionOrNil.getter();
      unint64_t v80 = v79;
      sub_1001260DC((uint64_t)v6);
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v78, v80, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v87, "[%s|%s] Failed to process parentList because parentList.identifier is nil {list.identifier: %{public}s}", (uint8_t *)v65, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v60 = 0;
      id v24 = v85;
      id v36 = v86;
      goto LABEL_35;
    }

    uint64_t v60 = 0;
    goto LABEL_32;
  }
  id v49 = (id)v21;

  if (qword_100907580 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_10008E2DC(v50, (uint64_t)qword_100918520);
  uint64_t v51 = a2;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    id v92 = v56;
    *(_DWORD *)uint64_t v54 = 136315650;
    uint64_t v93 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
    uint64_t v94 = (uint64_t)v56;
    sub_100094134((uint64_t *)&unk_1009186B0);
    uint64_t v57 = String.init<A>(describing:)();
    uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v57, v58, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    uint64_t v93 = (ValueMetadata *)sub_1000C51B8(0xD000000000000014, 0x80000001007CE540, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 22) = 2114;
    uint64_t v93 = v51;
    unint64_t v59 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v55 = v51;

    _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%s|%s] Failed to process list of {listMOIDInZREMCDOBJECT: %{public}@} since its managed object could not be fetched", (uint8_t *)v54, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1004336E8(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (void *)type metadata accessor for UUID();
  id v8 = (id)*(v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)sub_100436890(a1);
  if (!v3)
  {
    uint64_t v45 = 0;
    id v46 = v11;
    if (!v11 || (id v12 = objc_msgSend(v11, "ic_permanentObjectID")) == 0)
    {
      id v47 = 0;
      goto LABEL_10;
    }
    id v49 = 0;
    id v47 = v12;
    id v13 = [a2 existingObjectWithID:x0 error:x1];
    id v14 = v49;
    if (v13)
    {
      uint64_t v15 = v13;
      uint64_t v44 = type metadata accessor for REMCDListInZREMCDBASELIST();
      uint64_t v41 = swift_dynamicCastClass();
      if (v41)
      {
        id v42 = v15;
        if (a3 >> 62)
        {
          id v39 = v14;
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          if (v16)
          {
LABEL_8:
            unint64_t v43 = a3 & 0xC000000000000001;
            a1 = 4;
            while (1)
            {
              uint64_t v10 = (char *)(a1 - 4);
              uint64_t v28 = v43
                  ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                  : *(id *)(a3 + 8 * a1);
              uint64_t v7 = v28;
              uint64_t v29 = a1 - 3;
              if (__OFADD__(v10, 1)) {
                break;
              }
              id v49 = 0;
              id v30 = [a2 existingObjectWithID:v28 error:&v49];
              id v31 = v49;
              if (!v30)
              {
                id v37 = v49;
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)();

                swift_willThrow();
                goto LABEL_26;
              }
              uint64_t v32 = v30;
              uint64_t v33 = (void *)swift_dynamicCastClass();
              id v34 = v31;
              if (v33)
              {
                id v8 = v42;
                [v33 setParentList:v41];
              }
              else
              {
                id v8 = v7;
                uint64_t v7 = v32;
              }

              ++a1;
              if (v29 == v16) {
                goto LABEL_30;
              }
            }
            __break(1u);
LABEL_28:
            swift_once();
LABEL_11:
            uint64_t v18 = type metadata accessor for Logger();
            sub_10008E2DC(v18, (uint64_t)qword_100918520);
            (*((void (**)(char *, uint64_t, void *))v8 + 2))(v10, a1, v7);
            uint64_t v19 = Logger.logObject.getter();
            os_log_type_t v20 = static os_log_type_t.error.getter();
            int v21 = v20;
            if (os_log_type_enabled(v19, v20))
            {
              uint64_t v22 = swift_slowAlloc();
              uint64_t v23 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v22 = 136315650;
              LODWORD(v44) = v21;
              id v48 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
              id v49 = v23;
              sub_100094134((uint64_t *)&unk_1009186B0);
              uint64_t v24 = String.init<A>(describing:)();
              id v48 = (ValueMetadata *)sub_1000C51B8(v24, v25, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v22 + 12) = 2080;
              id v48 = (ValueMetadata *)sub_1000C51B8(0xD000000000000014, 0x80000001007CE540, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v22 + 22) = 2082;
              sub_10036BB34();
              uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
              id v48 = (ValueMetadata *)sub_1000C51B8(v26, v27, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*((void (**)(char *, void *))v8 + 1))(v10, v7);
              _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v44, "[%s|%s] Failed to process sublists of {parentListIdentifier: %{public}s} since its managed object could not be fetched", (uint8_t *)v22, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              (*((void (**)(char *, void *))v8 + 1))(v10, v7);
            }
            return;
          }
        }
        else
        {
          uint64_t v16 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v17 = v14;
          swift_bridgeObjectRetain();
          if (v16) {
            goto LABEL_8;
          }
        }
LABEL_30:

        swift_bridgeObjectRelease();
        id v40 = v47;

        return;
      }
      id v36 = v14;

LABEL_10:
      if (qword_100907580 == -1) {
        goto LABEL_11;
      }
      goto LABEL_28;
    }
    id v35 = v49;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_26:
    id v38 = v47;
  }
}

void sub_100433CA0(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v87 = a3;
  unint64_t v88 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v88);
  unsigned int v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v81 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v91 = *(void **)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v81 - v14;
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  uint64_t v19 = (char *)&v81 - v18;
  uint64_t v94 = 0;
  id v92 = a1;
  id v20 = [a1 existingObjectWithID:a2 error:&v94, v17];
  uint64_t v21 = v94;
  if (!v20) {
    goto LABEL_12;
  }
  uint64_t v22 = v20;
  uint64_t v90 = v10;
  type metadata accessor for REMCDSmartListInZREMCDOBJECT();
  uint64_t v23 = swift_dynamicCastClass();
  if (v23)
  {
    id v24 = (id)v23;
    id v86 = v22;
    type metadata accessor for REMCDSmartListInZREMCDBASELIST();
    id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v26 = (id)v21;
    id v89 = [v25 initWithContext:v92];
    sub_1004363D0(v24);
    id v27 = [v24 ckCloudState];
    if (v27)
    {
      uint64_t v28 = v27;
      [v27 setObject:0];
      [v28 setSavedAttachment:0];
      [v28 setSavedReminder:0];
      [v28 setTemplate:0];
      [v28 setList:v89];
    }
    id v29 = [v24 parentList];
    if (!v29)
    {
      uint64_t v60 = 0;
      id v36 = v86;
LABEL_35:
      [v92 refreshObject:v24 mergeChanges:0];

      sub_100096314((uint64_t)v60);
      return;
    }
    id v84 = v29;
    id v85 = v24;
    id v30 = [v29 identifier];
    if (v30)
    {
      id v31 = v30;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v33 = v90;
      uint64_t v32 = v91;
      id v34 = (void (*)(char *, char *, uint64_t))v91[4];
      v34(v9, v15, v90);
      id v83 = (void (*)(char *, void, uint64_t, uint64_t))v32[7];
      v83(v9, 0, 1, v33);
      int v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32[6])(v9, 1, v33);
      id v36 = v86;
      if (v35 != 1)
      {
        id v37 = v9;
        uint64_t v38 = v90;
        v34(v19, v37, v90);
        id v39 = [v89 ic_permanentObjectID];
        uint64_t v82 = (void (*)(char *, char *, uint64_t))v91[2];
        v82(v12, v19, v38);
        id v83 = (void (*)(char *, void, uint64_t, uint64_t))v39;
        id v40 = v87;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v94 = *v40;
        uint64_t v42 = v94;
        *id v40 = 0x8000000000000000;
        unint64_t v88 = sub_100306EC4((uint64_t)v12);
        uint64_t v44 = *(void *)(v42 + 16);
        BOOL v45 = (v43 & 1) == 0;
        uint64_t v46 = v44 + v45;
        if (__OFADD__(v44, v45))
        {
          __break(1u);
        }
        else
        {
          uint64_t v21 = v43;
          if (*(void *)(v42 + 24) >= v46)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10031BE08();
              uint64_t v42 = v94;
            }
          }
          else
          {
            sub_100314C18(v46, isUniquelyReferenced_nonNull_native);
            uint64_t v42 = v94;
            unint64_t v88 = sub_100306EC4((uint64_t)v12);
            if ((v21 & 1) != (v47 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
LABEL_12:
              id v48 = (id)v21;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              return;
            }
          }
          *id v40 = v42;
          swift_bridgeObjectRelease();
          unint64_t v72 = (void *)*v40;
          swift_bridgeObjectRetain();
          unint64_t v73 = v88;
          if ((v21 & 1) == 0)
          {
            v82(v15, v12, v90);
            sub_1002C8178(v73, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, v72);
          }
          uint64_t v74 = v72[7];
          swift_bridgeObjectRelease();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)(v74 + 8 * v73) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v74 + 8 * v73) & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
            goto LABEL_31;
        }
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_31:
        id v75 = v83;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        uint64_t v76 = v90;
        id v77 = (void (*)(char *, uint64_t))v91[1];
        v77(v12, v90);
        v77(v19, v76);
        uint64_t v60 = sub_1000D29BC;
LABEL_32:
        id v24 = v85;
        goto LABEL_35;
      }
    }
    else
    {
      id v83 = (void (*)(char *, void, uint64_t, uint64_t))v91[7];
      v83(v9, 1, 1, v90);
      id v36 = v86;
    }
    sub_1001260DC((uint64_t)v9);
    if (qword_100907580 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10008E2DC(v61, (uint64_t)qword_100918520);
    id v62 = v36;
    uint64_t v63 = Logger.logObject.getter();
    int v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      LODWORD(v87) = v64;
      uint64_t v65 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v82 = (void (*)(char *, char *, uint64_t))v66;
      *(_DWORD *)uint64_t v65 = 136315650;
      uint64_t v93 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
      uint64_t v94 = v66;
      sub_100094134((uint64_t *)&unk_1009186B0);
      uint64_t v67 = String.init<A>(describing:)();
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v67, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(0xD000000000000019, 0x80000001007D4E70, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 22) = 2082;
      id v69 = [v85 identifier];
      if (v69)
      {
        int v70 = v69;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v71 = 0;
      }
      else
      {
        uint64_t v71 = 1;
      }
      v83(v6, v71, 1, v90);
      uint64_t v78 = Optional.descriptionOrNil.getter();
      unint64_t v80 = v79;
      sub_1001260DC((uint64_t)v6);
      uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v78, v80, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v87, "[%s|%s] Failed to process parentList because parentList.identifier is nil {smartList.identifier: %{public}s}", (uint8_t *)v65, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v60 = 0;
      id v24 = v85;
      id v36 = v86;
      goto LABEL_35;
    }

    uint64_t v60 = 0;
    goto LABEL_32;
  }
  id v49 = (id)v21;

  if (qword_100907580 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_10008E2DC(v50, (uint64_t)qword_100918520);
  uint64_t v51 = a2;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    id v92 = v56;
    *(_DWORD *)uint64_t v54 = 136315650;
    uint64_t v93 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
    uint64_t v94 = (uint64_t)v56;
    sub_100094134((uint64_t *)&unk_1009186B0);
    uint64_t v57 = String.init<A>(describing:)();
    uint64_t v93 = (ValueMetadata *)sub_1000C51B8(v57, v58, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    uint64_t v93 = (ValueMetadata *)sub_1000C51B8(0xD000000000000019, 0x80000001007D4E70, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 22) = 2114;
    uint64_t v93 = v51;
    unint64_t v59 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v55 = v51;

    _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%s|%s] Failed to process smartlist of {listMOIDInZREMCDOBJECT: %{public}@} since its managed object could not be fetched", (uint8_t *)v54, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100434794(char *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)sub_100436890((uint64_t)a1);
  if (!v3)
  {
    id v12 = v11;
    uint64_t v47 = 0;
    if (!v11 || (id v13 = objc_msgSend(v11, "ic_permanentObjectID")) == 0)
    {
      id v19 = 0;
      goto LABEL_10;
    }
    id v45 = v12;
    id v49 = 0;
    id v44 = v13;
    id v14 = [a2 existingObjectWithID:x0 error:x1];
    id v15 = v49;
    if (v14)
    {
      uint64_t v16 = v14;
      type metadata accessor for REMCDListInZREMCDBASELIST();
      uint64_t v42 = swift_dynamicCastClass();
      if (v42)
      {
        id v43 = v16;
        if (a3 >> 62)
        {
          id v39 = v15;
          swift_bridgeObjectRetain();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          if (v17)
          {
LABEL_8:
            unint64_t v46 = a3 & 0xC000000000000001;
            uint64_t v7 = 4;
            while (1)
            {
              id v19 = (id)(v7 - 4);
              id v30 = v46
                  ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                  : (char *)*(id *)(a3 + 8 * v7);
              uint64_t v10 = v30;
              id v12 = (id)(v7 - 3);
              if (__OFADD__(v19, 1)) {
                break;
              }
              id v49 = 0;
              id v31 = (char *)[a2 existingObjectWithID:v30 error:&v49];
              id v32 = v49;
              if (!v31)
              {
                id v37 = v49;
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)();

                swift_willThrow();
                goto LABEL_26;
              }
              uint64_t v33 = v31;
              type metadata accessor for REMCDSmartListInZREMCDBASELIST();
              uint64_t v8 = swift_dynamicCastClass();
              id v34 = v32;
              if (v8)
              {
                a1 = (char *)v43;
                [(id)v8 setParentList:v42];
              }
              else
              {
                a1 = v10;
                uint64_t v10 = v33;
              }

              ++v7;
              if (v12 == (id)v17) {
                goto LABEL_30;
              }
            }
            __break(1u);
LABEL_28:
            swift_once();
LABEL_11:
            uint64_t v20 = type metadata accessor for Logger();
            sub_10008E2DC(v20, (uint64_t)qword_100918520);
            (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, a1, v7);
            uint64_t v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v21, v22))
            {
              uint64_t v23 = swift_slowAlloc();
              id v44 = v19;
              id v45 = v12;
              uint64_t v24 = v23;
              id v25 = (void *)swift_slowAlloc();
              unint64_t v46 = (unint64_t)v25;
              *(_DWORD *)uint64_t v24 = 136315650;
              id v48 = &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
              id v49 = v25;
              sub_100094134((uint64_t *)&unk_1009186B0);
              uint64_t v26 = String.init<A>(describing:)();
              id v48 = (ValueMetadata *)sub_1000C51B8(v26, v27, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v24 + 12) = 2080;
              id v48 = (ValueMetadata *)sub_1000C51B8(0xD000000000000019, 0x80000001007D4E70, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v24 + 22) = 2082;
              sub_10036BB34();
              uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
              id v48 = (ValueMetadata *)sub_1000C51B8(v28, v29, (uint64_t *)&v49);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s|%s] Failed to process children smartlists of {parentListIdentifier: %{public}s} since its managed object could not be fetched", (uint8_t *)v24, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
            }
            return;
          }
        }
        else
        {
          uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v18 = v15;
          swift_bridgeObjectRetain();
          if (v17) {
            goto LABEL_8;
          }
        }
LABEL_30:

        swift_bridgeObjectRelease();
        id v40 = v44;

        return;
      }
      id v36 = v15;

      id v19 = v44;
      id v12 = v45;
LABEL_10:
      if (qword_100907580 == -1) {
        goto LABEL_11;
      }
      goto LABEL_28;
    }
    id v35 = v49;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_26:
    id v38 = v44;
  }
}

void sub_100434D5C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  *(void *)&double v9 = __chkstk_darwin(v8 - 8).n128_u64[0];
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v2 setCkDirtyFlags:[a1 ckDirtyFlags:v9]];
  id v12 = [a1 ckIdentifier];
  [v2 setCkIdentifier:v12];

  [v2 setCkNeedsInitialFetchFromCloud:[a1 ckNeedsInitialFetchFromCloud]];
  [v2 setCkNeedsToBeFetchedFromCloud:[a1 ckNeedsToBeFetchedFromCloud]];
  Class isa = (Class)[a1 ckServerRecordData];
  if (isa)
  {
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v14, v16);
  }
  [v2 setCkServerRecordData:isa];

  Class v17 = (Class)[a1 ckServerShareData];
  if (v17)
  {
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    Class v17 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v18, v20);
  }
  [v2 setCkServerShareData:v17];

  id v21 = [a1 ckZoneOwnerName];
  [v2 setCkZoneOwnerName:v21];

  id v22 = [a1 daPushKey];
  [v2 setDaPushKey:v22];

  id v23 = [a1 daSyncToken];
  [v2 setDaSyncToken:v23];

  [v2 setEffectiveMinimumSupportedAppVersion:[a1 effectiveMinimumSupportedAppVersion]];
  id v24 = [a1 externalIdentifier];
  [v2 setExternalIdentifier:v24];

  id v25 = [a1 externalModificationTag];
  [v2 setExternalModificationTag:v25];

  id v26 = [a1 identifier];
  if (v26)
  {
    unint64_t v27 = v26;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
    {
      Class v28 = 0;
    }
    else
    {
      Class v28 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    Class v28 = 0;
  }
  [v2 setIdentifier:v28];

  [v2 setMarkedForDeletion:[a1 markedForDeletion]];
  [v2 setMinimumSupportedAppVersion:[a1 minimumSupportedAppVersion]];
  id v29 = [a1 resolutionTokenMap];
  [v2 setResolutionTokenMap:v29];

  id v30 = [a1 resolutionTokenMap_v2_JSON];
  [v2 setResolutionTokenMap_v2_JSON:v30];

  Class v31 = (Class)[a1 resolutionTokenMap_v3_JSONData];
  if (v31)
  {
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    Class v31 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v32, v34);
  }
  [v2 setResolutionTokenMap_v3_JSONData:v31];

  id v35 = [a1 account];
  [v2 setAccount:v35];
}

id sub_100435364()
{
  return sub_100436834(0, type metadata accessor for REMCDCommonREMCDObjectPropertiesManagedObject);
}

void sub_100435380(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4);
  id v43 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  *(void *)&double v14 = __chkstk_darwin(v13 - 8).n128_u64[0];
  unint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [a1 badgeEmblem:v14];
  [v2 setBadgeEmblem:v17];

  id v18 = [a1 color];
  [v2 setColor:v18];

  Class isa = (Class)[a1 membershipsOfRemindersInSectionsAsData];
  if (isa)
  {
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v20, v22);
  }
  [v2 setMembershipsOfRemindersInSectionsAsData:isa];

  id v23 = [a1 membershipsOfRemindersInSectionsChecksum];
  [v2 setMembershipsOfRemindersInSectionsChecksum:v23];

  id v24 = [a1 mostRecentTargetTemplateIdentifier];
  if (v24)
  {
    id v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
    int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
    uint64_t v27 = v44;
    if (v26 == 1)
    {
      Class v28 = 0;
    }
    else
    {
      Class v28 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v16, 1, 1, v9);
    Class v28 = 0;
    uint64_t v27 = v44;
  }
  [v2 setMostRecentTargetTemplateIdentifier:v28];

  id v29 = [a1 name];
  [v2 setName:v29];

  Class v30 = (Class)[a1 pinnedDate];
  uint64_t v31 = v45;
  if (v30)
  {
    uint64_t v32 = v43;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v8, v32, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v31) == 1)
    {
      Class v30 = 0;
    }
    else
    {
      Class v30 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v31);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v8, 1, 1, v45);
  }
  [v2 setPinnedDate:v30];

  Class v33 = (Class)[a1 sectionIDsOrderingAsData];
  if (v33)
  {
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v34, v36);
  }
  [v2 setSectionIDsOrderingAsData:v33];

  [v2 setShowingLargeAttachments:[a1 showingLargeAttachments]];
  id v37 = [a1 sortingStyle];
  [v2 setSortingStyle:v37];

  type metadata accessor for REMCDListInZREMCDOBJECT();
  uint64_t v38 = swift_dynamicCastClass();
  if (v38)
  {
    id v39 = (void *)v38;
    id v40 = a1;
    [v2 setSpotlightIndexCount:[v39 spotlightIndexCount]];
  }
  id v41 = [a1 parentAccount];
  [v2 setParentAccount:v41];
}

id sub_1004359F4()
{
  return sub_100436834(0, type metadata accessor for REMCDCommonBaseListPropertiesManagedObject);
}

id sub_100435A2C()
{
  return sub_100436834(0, type metadata accessor for REMCDListInZREMCDOBJECT);
}

id sub_100435A6C()
{
  return sub_100436834(0, type metadata accessor for REMCDSmartListInZREMCDOBJECT);
}

void sub_100435A90(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  id v48 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100434D5C(a1);
  sub_100435380(a1);
  Class isa = (Class)[a1 daBulkRequests];
  if (isa)
  {
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v17, v19);
  }
  [v2 setDaBulkRequests:isa];

  [v2 setDaDisplayOrder:[a1 daDisplayOrder]];
  id v20 = [a1 daExternalIdentificationTag];
  [v2 setDaExternalIdentificationTag:v20];

  [v2 setDaIsEventOnlyContainer:[a1 daIsEventOnlyContainer]];
  [v2 setDaIsImmutable:[a1 daIsImmutable]];
  [v2 setDaIsNotificationsCollection:[a1 daIsNotificationsCollection]];
  [v2 setDaIsReadOnly:[a1 daIsReadOnly]];
  Class v21 = (Class)[a1 groceryLocalCorrectionsAsData];
  if (v21)
  {
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    Class v21 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v22, v24);
  }
  uint64_t v25 = v49;
  [v2 setGroceryLocalCorrectionsAsData:v21];

  id v26 = [a1 groceryLocalCorrectionsChecksum];
  [v2 setGroceryLocalCorrectionsChecksum:v26];

  id v27 = [a1 groceryLocaleID];
  [v2 setGroceryLocaleID:v27];

  [v2 setIsGroup:[a1 isGroup]];
  [v2 setIsPinnedByCurrentUser:[a1 isPinnedByCurrentUser]];
  Class v28 = (Class)[a1 lastUserAccessDate];
  if (v28)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
    {
      Class v28 = 0;
    }
    else
    {
      Class v28 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  [v2 setLastUserAccessDate:v28];

  Class v29 = (Class)[a1 mostRecentTargetTemplateIdentifierByCurrentUser];
  uint64_t v30 = v50;
  if (v29)
  {
    uint64_t v31 = v48;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v8, v31, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v8, 0, 1, v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v30) == 1)
    {
      Class v29 = 0;
    }
    else
    {
      Class v29 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v30);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v8, 1, 1, v50);
  }
  [v2 setMostRecentTargetTemplateIdentifierByCurrentUser:v29];

  Class v32 = (Class)[a1 reminderIDsMergeableOrdering];
  if (v32)
  {
    uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    Class v32 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v33, v35);
  }
  [v2 setReminderIDsMergeableOrdering:v32];

  Class v36 = (Class)[a1 reminderIDsMergeableOrdering_v2_JSON];
  if (v36)
  {
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    Class v36 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v37, v39);
  }
  [v2 setReminderIDsMergeableOrdering_v2_JSON:v36];

  id v40 = [a1 sharedOwnerAddress];
  [v2 setSharedOwnerAddress:v40];

  id v41 = [a1 sharedOwnerName];
  [v2 setSharedOwnerName:v41];

  [v2 setSharingStatus:[a1 sharingStatus]];
  [v2 setShouldCategorizeGroceryItems:[a1 shouldCategorizeGroceryItems]];
  [v2 setShouldSuggestConversionToGroceryList:[a1 shouldSuggestConversionToGroceryList]];
  id v42 = [a1 calDAVNotifications];
  [v2 setCalDAVNotifications:v42];

  id v43 = [a1 reminders];
  [v2 setReminders:v43];

  id v44 = [a1 sections];
  [v2 setSections:v44];

  id v45 = [a1 sharedOwner];
  [v2 setSharedOwner:v45];

  id v46 = [a1 sharees];
  [v2 setSharees:v46];
}

id sub_1004363AC()
{
  return sub_100436834(0, type metadata accessor for REMCDListInZREMCDBASELIST);
}

void sub_1004363D0(void *a1)
{
  sub_100434D5C(a1);
  sub_100435380(a1);
  Class isa = (Class)[a1 filterData];
  if (isa)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v4, v6);
  }
  [v1 setFilterData:isa];

  id v7 = [a1 smartListType];
  [v1 setSmartListType:v7];

  id v8 = [a1 sections];
  [v1 setSections:v8];
}

id sub_100436510()
{
  return sub_100436834(0, type metadata accessor for REMCDSmartListInZREMCDBASELIST);
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST()
{
  return self;
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.__deallocating_deinit(uint64_t a1)
{
  return sub_100436834(a1, type metadata accessor for REMCDAccountV2023MinorEMigratingToZREMCDBASELIST);
}

uint64_t type metadata accessor for REMCDCommonREMCDObjectPropertiesManagedObject()
{
  return self;
}

uint64_t type metadata accessor for REMCDCommonBaseListPropertiesManagedObject()
{
  return self;
}

uint64_t type metadata accessor for REMCDListInZREMCDOBJECT()
{
  return self;
}

uint64_t type metadata accessor for REMCDSmartListInZREMCDOBJECT()
{
  return self;
}

uint64_t type metadata accessor for REMCDListInZREMCDBASELIST()
{
  return self;
}

uint64_t type metadata accessor for REMCDSmartListInZREMCDBASELIST()
{
  return self;
}

id sub_100436754()
{
  return sub_100436834(0, type metadata accessor for REMCDReminderV2023MinorEMigratingToZREMCDBASELIST);
}

uint64_t type metadata accessor for REMCDReminderV2023MinorEMigratingToZREMCDBASELIST()
{
  return self;
}

id sub_1004367B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  v9.receiver = a1;
  v9.super_class = (Class)a6(a5);
  return [super initWithEntity:a3 insertIntoManagedObjectContext:a4];
}

id sub_100436818()
{
  return sub_100436834(0, type metadata accessor for REMCKCloudStateV2023MinorEMigratingToZREMCDBASELIST);
}

id sub_100436834(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for REMCKCloudStateV2023MinorEMigratingToZREMCDBASELIST()
{
  return self;
}

unint64_t sub_100436890(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  [v5 setResultType:0];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100776E80;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 32) = 0x696669746E656469;
  *(void *)(v6 + 40) = 0xEA00000000007265;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 88) = v7;
  id v8 = sub_1000C1FE8((uint64_t *)(v6 + 64));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, a1, v7);
  objc_super v9 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [self predicateWithFormat:v9 argumentArray:isa];

  [v5 setPredicate:v11];
  [v5 setFetchLimit:1];
  type metadata accessor for REMCDListInZREMCDBASELIST();
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return (unint64_t)v9;
  }
  unint64_t v13 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    objc_super v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v9) {
      goto LABEL_9;
    }
  }
  else
  {
    objc_super v9 = *(void **)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
    {
LABEL_9:
      swift_bridgeObjectRelease();

      return (unint64_t)v9;
    }
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v13 + 32);
LABEL_8:
    objc_super v9 = v14;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100436B20(uint64_t a1, void (*a2)(void), void *a3)
{
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  a2(0);
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setPredicate:0];
  [v5 setResultType:1];
  if (*a3 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v5 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  return v8;
}

uint64_t sub_100436C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_1009186A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTOMa()
{
  return &_s57MigrateListsAndSmartListsFromZREMCDOBJECTToZREMCDBASELISTON;
}

uint64_t sub_100436D04()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009186C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009186C0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall REMCDHashtagLabel.willSave_Swift()()
{
  if (([v0 didCleanUpManualSortHintOnDeletion] & 1) == 0)
  {
    [v0 setDidCleanUpManualSortHintOnDeletion:1];
    sub_100436E20();
  }
}

void sub_100436E20()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for REMHashtagLabelSpecifier();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)&double v11 = __chkstk_darwin(v9).n128_u64[0];
  unint64_t v13 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [v1 canonicalName:v11];
  if (!v14)
  {
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_1009186C0);
    os_log_t v76 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v33, "cleanUpManualSortHintIfNeeded: Deleted hashtag label has nil canonicalName, abort cleanup", v34, 2u);
      swift_slowDealloc();
    }
    os_log_t v35 = v76;

    return;
  }
  uint64_t v15 = v14;
  os_log_t v76 = (os_log_t)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  if (![v1 isDeleted]) {
    goto LABEL_26;
  }
  if (![v1 wasDeletedDueToUserInitiatedChanges])
  {
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_1009186C0);
    swift_bridgeObjectRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      v80[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v78 = sub_1000C51B8((uint64_t)v76, v17, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to non-user-initiated changes, cleanup is not needed {canonicalName: %s}", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  id v18 = [v1 managedObjectContext];
  if (!v18)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v19 = v18;
  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  Class v21 = v19;
  if (!v20)
  {

    goto LABEL_26;
  }
  uint64_t v22 = v20;
  id v75 = v21;
  id v23 = [v1 accountIdentifier];
  if (!v23)
  {
LABEL_9:
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_1009186C0);
    swift_bridgeObjectRetain();
    Class v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v80[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v78 = sub_1000C51B8((uint64_t)v76, v17, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "cleanUpManualSortHintIfNeeded: No accountIdentifier when the hashtag label is deleted {canonicalName: %s}", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  unint64_t v24 = v23;
  uint64_t v74 = v22;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  uint64_t v73 = v25;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();

    sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
    goto LABEL_9;
  }
  uint64_t v72 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  id v40 = [self cloudKitAccountWithCKIdentifier:v24 context:v74];

  if (v40)
  {
    id v71 = v40;
    sub_10058F158((uint64_t)&v78);
    if (v79)
    {
      swift_bridgeObjectRelease();
      sub_1000967D4(&v78, (uint64_t)v80);
      if (qword_100907588 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v42 = sub_10008E2DC(v41, (uint64_t)qword_1009186C0);
      swift_bridgeObjectRetain_n();
      uint64_t v73 = v42;
      id v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        id v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(void *)&long long v78 = v72;
        os_log_t v70 = v43;
        *(_DWORD *)id v45 = 136315138;
        v69[1] = v45 + 4;
        swift_bridgeObjectRetain();
        uint64_t v77 = sub_1000C51B8((uint64_t)v76, v17, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v46 = v70;
        _os_log_impl((void *)&_mh_execute_header, v70, v44, "cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to user-initiated changes, will delete all associated sort hints for the label {canonicalName: %s}", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)(inited + 32) = v76;
      *(void *)(inited + 40) = v17;
      swift_bridgeObjectRetain();
      sub_10012674C(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
      static REMHashtagLabelSpecifier.labels(_:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = sub_10026D1F4((uint64_t)v5, v80);
      uint64_t v64 = v63;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v65 = self;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v67 = [v65 objectIDWithUUID:isa];

      swift_bridgeObjectRetain();
      id v68 = v67;
      sub_1000D01B8(0x4000000000000003uLL, v62, v64, v67);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v80);
    }
    else
    {
      sub_1000966BC((uint64_t)&v78, &qword_1009186E0);
      if (qword_100907588 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_10008E2DC(v54, (uint64_t)qword_1009186C0);
      swift_bridgeObjectRetain();
      unint64_t v55 = v72;
      swift_bridgeObjectRetain();
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      os_log_t v59 = v76;
      if (v58)
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        v80[0] = v74;
        *(_DWORD *)uint64_t v60 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)&long long v78 = sub_1000C51B8((uint64_t)v59, v17, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v60 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)&long long v78 = sub_1000C51B8(v73, v55, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "cleanUpManualSortHintIfNeeded: Could not obtain manualSortIDHashKeyProvider in the CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_10008E2DC(v47, (uint64_t)qword_1009186C0);
    swift_bridgeObjectRetain();
    unint64_t v48 = v72;
    swift_bridgeObjectRetain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    os_log_t v52 = v76;
    if (v51)
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      v80[0] = v74;
      *(_DWORD *)uint64_t v53 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&long long v78 = sub_1000C51B8((uint64_t)v52, v17, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v78 = sub_1000C51B8(v73, v48, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "cleanUpManualSortHintIfNeeded: Fail to fetch CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

Swift::Void __swiftcall REMCDHashtagLabel.didSave_Swift()()
{
  [v0 setDidCleanUpManualSortHintOnDeletion:0];
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDHashtagLabel.validateForInsert_Swift()()
{
  if (([v0 didEnqueueApprovalCascade] & 1) == 0)
  {
    [v0 setDidEnqueueApprovalCascade:1];
    sub_100437F48();
  }
}

void sub_100437F48()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v62 - v9;
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v62 - v12;
  uint64_t v14 = type metadata accessor for Date();
  *(void *)&double v15 = __chkstk_darwin(v14 - 8).n128_u64[0];
  unint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [v0 canonicalName:v15];
  if (!v18)
  {
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_1009186C0);
    id v64 = v0;
    id v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      id v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)id v45 = 136446210;
      id v46 = [v64 uuidForChangeTracking];
      if (v46)
      {
        uint64_t v47 = v46;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v48 = v65;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v7, 0, 1, v2);
      }
      else
      {
        uint64_t v48 = v65;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v7, 1, 1, v2);
      }
      sub_1000F44F4((uint64_t)v7, (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v10, 1, v2))
      {
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        unint64_t v58 = 0xE90000000000003ELL;
        uint64_t v59 = 0x64697575206F6E3CLL;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v4, v10, v2);
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        uint64_t v60 = v48;
        uint64_t v59 = UUID.uuidString.getter();
        unint64_t v58 = v61;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v4, v2);
      }
      uint64_t v66 = sub_1000C51B8(v59, v58, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "enqueueApprovalCascade: Failed to cascade HashtagLabel approval due to nil canonicalName {uuidForChangeTracking: %{public}s}", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_23;
  }
  unint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  id v23 = [v0 managedObjectContext];
  if (v23)
  {
    id v64 = v23;
    id v24 = [v0 accountIdentifier];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v26;

      Date.init()();
      id v28 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v13, 1, 1, v2);
      id v32 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
      id v33 = sub_10010B65C(v63, v27, (uint64_t)v17, 4, 0, 0xE000000000000000, 0, 0, 0, 0, v20, v22, v29, v31, (uint64_t)v13);
      id v34 = [v1 objectID];
      id v35 = [v34 persistentStore];

      type metadata accessor for REMCKSharedEntitySyncActivity();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v37 = [ObjCClassFromMetadata entity];
      id v38 = objc_allocWithZone((Class)ObjCClassFromMetadata);
      id v39 = [v38 initWithEntity:v37 insertIntoManagedObjectContext:v64];
      if (v35)
      {
        id v40 = v35;
        id v41 = v39;
        [v64 assignObject:v41 toPersistentStore:v40];
      }
      sub_100235704(v33);

      return;
    }
    if (qword_100907588 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_10008E2DC(v53, (uint64_t)qword_1009186C0);
    swift_bridgeObjectRetain();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_1000C51B8(v20, v22, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "enqueueApprovalCascade: Failed to acquire handle to account identifier for HashtagLabel {canonicalName: %s}", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_bridgeObjectRelease_n();
LABEL_23:
    id v57 = v64;

    return;
  }
  if (qword_100907588 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_10008E2DC(v49, (uint64_t)qword_1009186C0);
  swift_bridgeObjectRetain();
  os_log_type_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    os_log_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)os_log_t v52 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1000C51B8(v20, v22, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "enqueueApprovalCascade: Failed to acquire handle to managedObjectContext {canonicalName: %s}", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1004388BC(void *a1, void *a2, void *a3, char a4)
{
  id v176 = a1;
  uint64_t v175 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v164 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v164 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v173 = *(void *)(v12 - 8);
  uint64_t v174 = v12;
  __chkstk_darwin(v12);
  unint64_t v169 = (unint64_t)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v168 = (uint64_t)&v164 - v15;
  __chkstk_darwin(v16);
  id v18 = (char *)&v164 - v17;
  __chkstk_darwin(v19);
  long long v167 = (char *)&v164 - v20;
  __chkstk_darwin(v21);
  unint64_t v172 = (char *)&v164 - v22;
  uint64_t v182 = type metadata accessor for URL();
  uint64_t v178 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  v171 = (char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v164 - v25;
  __chkstk_darwin(v27);
  v170 = (char *)&v164 - v28;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v164 - v30;
  uint64_t v32 = type metadata accessor for RDSavedAttachment.URLMetadata();
  __chkstk_darwin(v32);
  id v34 = (char *)&v164 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4)
  {
    id v53 = a3;
    id v54 = [v53 url];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    id v55 = [v53 metadata];
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;
    }
    else
    {
      uint64_t v57 = 0;
      unint64_t v59 = 0xF000000000000000;
    }
    id v83 = v176;
    (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v34, v31, v182);
    id v84 = (uint64_t *)&v34[*(int *)(v32 + 20)];
    *id v84 = v57;
    v84[1] = v59;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10043C4DC(&qword_100918710, (void (*)(uint64_t))type metadata accessor for RDSavedAttachment.URLMetadata);
    uint64_t v85 = v177;
    uint64_t v86 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v85)
    {
      sub_10043BC64((uint64_t)v34);

      swift_release();
    }
    else
    {
      uint64_t v91 = v86;
      unint64_t v92 = v87;
      swift_release();
      NSString v93 = String._bridgeToObjectiveC()();
      [v83 setAttachmentTypeRawValue:v93];

      id v94 = [v53 objectID];
      id v95 = [v94 uuid];

      uint64_t v96 = v172;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v173 + 8))(v96, v174);
      [v83 setIdentifier:isa];

      Class v98 = Data._bridgeToObjectiveC()().super.isa;
      [v83 setMetadata:v98];

      NSString v99 = [v53 uti];
      if (!v99)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v99 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v83 setUti:v99];
      sub_100097F34(v91, v92);

      sub_10043BC64((uint64_t)v34);
    }
    return;
  }
  if (a4 != 1)
  {
    id v60 = a3;
    id v61 = [v60 fileURL];
    if (v61)
    {
      uint64_t v62 = v61;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v63 = v178;
      id v64 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
      uint64_t v65 = v26;
      uint64_t v66 = v182;
      v64(v8, v65, v182);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v8, 0, 1, v66);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v8, 1, v66) != 1)
      {
        uint64_t v67 = v171;
        v64(v171, v8, v66);
        uint64_t v68 = v175[3];
        uint64_t v69 = v175[4];
        sub_1000C0DE0(v175, v68);
        uint64_t v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 24))(v67, v68, v69);
        if (v71 || (uint64_t v70 = static REMFileDigester.sha512Sum(url:)(), v71))
        {
          uint64_t v72 = v70;
          uint64_t v73 = v71;
          id v74 = [v60 fileSize];
          id v75 = [v60 width];
          id v76 = [v60 height];
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          JSONEncoder.init()();
          id v179 = v74;
          id v180 = v75;
          id v181 = v76;
          sub_10043BD00();
          uint64_t v77 = v177;
          uint64_t v78 = dispatch thunk of JSONEncoder.encode<A>(_:)();
          if (!v77)
          {
            uint64_t v165 = v78;
            unint64_t v166 = v79;
            swift_release();
            v170 = (char *)URL.lastPathComponent.getter();
            long long v167 = v114;
            uint64_t v177 = 0;
            uint64_t v115 = v175[3];
            uint64_t v116 = v175[4];
            uint64_t v175 = sub_1000C0DE0(v175, v115);
            id v117 = [v60 objectID];
            id v118 = [v117 uuid];

            uint64_t v119 = v168;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            id v120 = [v60 accountID];
            id v121 = [v120 uuid];

            unint64_t v122 = v169;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v123 = *(void (**)(uint64_t, unint64_t, char *, char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 16);
            swift_bridgeObjectRetain();
            uint64_t v164 = v72;
            uint64_t v124 = v72;
            uint64_t v125 = v73;
            uint64_t v126 = v171;
            uint64_t v127 = v177;
            v123(v119, v122, v170, v167, v124, v125, v171, 1, v115, v116, v164);
            if (v127)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100097F34(v165, v166);
              swift_bridgeObjectRelease();

              uint64_t v128 = v174;
              uint64_t v129 = *(void (**)(unint64_t, uint64_t))(v173 + 8);
              v129(v169, v174);
              v129(v119, v128);
              (*(void (**)(char *, uint64_t))(v178 + 8))(v126, v182);
            }
            else
            {
              uint64_t v177 = 0;
              swift_bridgeObjectRelease();
              uint64_t v148 = v174;
              uint64_t v149 = *(void (**)(unint64_t, uint64_t))(v173 + 8);
              v149(v169, v174);
              v149(v119, v148);
              NSString v150 = String._bridgeToObjectiveC()();
              id v151 = v176;
              [v176 setAttachmentTypeRawValue:v150];

              id v152 = [v60 objectID];
              id v153 = [v152 uuid];

              Swift::Int v154 = v172;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              Class v155 = UUID._bridgeToObjectiveC()().super.isa;
              v149((unint64_t)v154, v148);
              [v151 setIdentifier:v155];

              uint64_t v157 = v165;
              unint64_t v156 = v166;
              Class v158 = Data._bridgeToObjectiveC()().super.isa;
              [v151 setMetadata:v158];

              NSString v159 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v151 setFileName:v159];

              NSString v160 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v151 setSha512Sum:v160];

              NSString v161 = [v60 uti];
              if (!v161)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                NSString v161 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              [v151 setUti:v161];
              sub_100097F34(v157, v156);

              (*(void (**)(char *, uint64_t))(v178 + 8))(v171, v182);
            }
            return;
          }
          swift_bridgeObjectRelease();

          swift_release();
        }
        else
        {
          uint64_t v132 = self;
          NSString v133 = String._bridgeToObjectiveC()();
          [v132 internalErrorWithDebugDescription:v133];

          swift_willThrow();
        }
        (*(void (**)(char *, uint64_t))(v178 + 8))(v67, v182);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56))(v8, 1, 1, v182);
    }
    sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E40);
    unint64_t v88 = self;
    sub_10043BCC0();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v90 = String._bridgeToObjectiveC()();
    [v88 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v90];

    swift_willThrow();
    return;
  }
  id v35 = a3;
  id v36 = [v35 fileURL];
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v178 + 56))(v11, 1, 1, v182);
    goto LABEL_18;
  }
  id v37 = v36;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = v178;
  id v39 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
  id v40 = v26;
  uint64_t v41 = v182;
  v39(v11, v40, v182);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v11, 0, 1, v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v11, 1, v41) == 1)
  {
LABEL_18:
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E40);
    unint64_t v80 = self;
    sub_10043BCC0();
    uint64_t v81 = swift_getObjCClassFromMetadata();
    NSString v82 = String._bridgeToObjectiveC()();
    [v80 unexpectedNilPropertyWithClass:v81 property:v82];

    swift_willThrow();
    return;
  }
  uint64_t v42 = v170;
  v39(v170, v11, v41);
  uint64_t v43 = v175[3];
  uint64_t v44 = v175[4];
  sub_1000C0DE0(v175, v43);
  uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 24))(v42, v43, v44);
  if (!v46)
  {
    uint64_t v45 = static REMFileDigester.sha512Sum(url:)();
    if (!v46)
    {
      Swift::Int v130 = self;
      NSString v131 = String._bridgeToObjectiveC()();
      [v130 internalErrorWithDebugDescription:v131];

      swift_willThrow();
      goto LABEL_32;
    }
  }
  uint64_t v47 = v45;
  uint64_t v48 = v46;
  id v49 = [v35 fileSize];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  id v179 = v49;
  sub_10043BD54();
  uint64_t v50 = v177;
  uint64_t v51 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v50)
  {
    swift_bridgeObjectRelease();

    swift_release();
LABEL_32:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v182);
    return;
  }
  uint64_t v168 = v51;
  unint64_t v169 = v52;
  swift_release();
  v171 = (char *)URL.lastPathComponent.getter();
  unint64_t v166 = v100;
  uint64_t v101 = v175[3];
  uint64_t v164 = v175[4];
  uint64_t v165 = v101;
  uint64_t v175 = sub_1000C0DE0(v175, v101);
  uint64_t v102 = v47;
  id v103 = [v35 objectID];
  id v104 = [v103 uuid];
  uint64_t v177 = 0;
  id v105 = v104;

  uint64_t v106 = v167;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v107 = [v35 accountID];
  id v108 = [v107 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v109 = v164;
  id v110 = *(void (**)(char *, char *, char *, unint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v164 + 16);
  swift_bridgeObjectRetain();
  uint64_t v163 = v109;
  uint64_t v162 = v165;
  uint64_t v165 = v102;
  uint64_t v111 = v177;
  v110(v106, v18, v171, v166, v102, v48, v42, 1, v162, v163);
  if (v111)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100097F34(v168, v169);
    swift_bridgeObjectRelease();

    uint64_t v112 = v174;
    uint64_t v113 = *(void (**)(char *, uint64_t))(v173 + 8);
    v113(v18, v174);
    v113(v106, v112);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v170, v182);
  }
  else
  {
    uint64_t v177 = 0;
    swift_bridgeObjectRelease();
    uint64_t v134 = v174;
    unint64_t v135 = *(void (**)(char *, uint64_t))(v173 + 8);
    v135(v18, v174);
    v135(v106, v134);
    NSString v136 = String._bridgeToObjectiveC()();
    id v137 = v176;
    [v176 setAttachmentTypeRawValue:v136];

    id v138 = [v35 objectID];
    id v139 = [v138 uuid];

    v140 = v172;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class v141 = UUID._bridgeToObjectiveC()().super.isa;
    v135(v140, v134);
    [v137 setIdentifier:v141];

    uint64_t v143 = v168;
    unint64_t v142 = v169;
    Class v144 = Data._bridgeToObjectiveC()().super.isa;
    [v137 setMetadata:v144];

    NSString v145 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v137 setFileName:v145];

    NSString v146 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v137 setSha512Sum:v146];

    NSString v147 = [v35 uti];
    if (!v147)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v147 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v137 setUti:v147];
    sub_100097F34(v143, v142);

    (*(void (**)(char *, uint64_t))(v178 + 8))(v170, v182);
  }
}

void sub_100439AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSString a6)
{
  uint64_t v8 = *v6;
  v9.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v10.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v11 = String._bridgeToObjectiveC()();
  if (a6) {
    a6 = String._bridgeToObjectiveC()();
  }
  id v12 = [v8 URLForAttachmentFile:v9.super.isa accountID:v10.super.isa fileName:v11 sha512Sum:a6];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_100439BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  return sub_100439BDC(a1, a2, a3, a4, a5, a6, a7, a8);
}

id sub_100439BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSString a6, uint64_t a7, char a8)
{
  v10.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v11.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v13 = String._bridgeToObjectiveC()();
  if (a6) {
    a6 = String._bridgeToObjectiveC()();
  }
  URL._bridgeToObjectiveC()(v12);
  uint64_t v15 = v14;
  id v20 = 0;
  unsigned int v16 = [v19 updateAttachmentFile:v10.super.isa accountID:v11.super.isa fileName:v13 sha512Sum:a6 fileURL:v14 keepSource:a8 & 1 error:&v20];

  if (v16) {
    return v20;
  }
  id v18 = v20;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_100439D50@<X0>(NSURL *a1@<X8>)
{
  uint64_t v2 = *v1;
  URL._bridgeToObjectiveC()(a1);
  uint64_t v4 = v3;
  id v5 = [v2 extractSha512Sum:v3];

  if (!v5) {
    return 0;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_100439DD4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_1009187E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C424();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for URL();
  sub_10043C4DC(&qword_100915F60, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for RDSavedAttachment.URLMetadata() + 20));
    v10[15] = 1;
    sub_1000EB704();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100439FA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_1009187C8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  __chkstk_darwin(v6);
  NSUUID v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDSavedAttachment.URLMetadata();
  __chkstk_darwin(v10);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C424();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = v10;
  NSString v13 = v12;
  uint64_t v14 = v24;
  LOBYTE(v28) = 0;
  sub_10043C4DC(&qword_100915F50, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v15 = v27;
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v21 = (uint64_t)v13;
  v17(v13, v5, v15);
  char v29 = 1;
  sub_1000EB648();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v16);
  uint64_t v18 = v21;
  *(_OWORD *)(v21 + *(int *)(v22 + 20)) = v28;
  sub_10043C478(v18, v23);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return sub_10043BC64(v18);
}

uint64_t sub_10043A2FC(void *a1, uint64_t a2, uint64_t a3)
{
  v10[1] = a3;
  uint64_t v5 = sub_100094134(&qword_1009187D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C3D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10043A494(uint64_t a1)
{
  unint64_t v2 = sub_10043C424();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043A4D0(uint64_t a1)
{
  unint64_t v2 = sub_10043C424();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043A50C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100439FA0(a1, a2);
}

uint64_t sub_10043A524(void *a1)
{
  return sub_100439DD4(a1);
}

uint64_t sub_10043A53C()
{
  return 0x657A6953656C6966;
}

uint64_t sub_10043A554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10043A5EC(uint64_t a1)
{
  unint64_t v2 = sub_10043C068();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043A628(uint64_t a1)
{
  unint64_t v2 = sub_10043C068();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043A664@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_1009187A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C068();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  *a2 = v9;
  return result;
}

uint64_t sub_10043A7C0(void *a1)
{
  uint64_t v2 = sub_100094134(&qword_1009187E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C068();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10043A8F4()
{
  uint64_t v1 = 0x6874646977;
  if (*v0 != 1) {
    uint64_t v1 = 0x746867696568;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657A6953656C6966;
  }
}

uint64_t sub_10043A948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10043C0BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043A970(uint64_t a1)
{
  unint64_t v2 = sub_10043C3D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043A9AC(uint64_t a1)
{
  unint64_t v2 = sub_10043C3D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043A9E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10043C204(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10043AA18(void *a1)
{
  return sub_10043A2FC(a1, *v1, v1[1]);
}

id sub_10043AA38()
{
  return *v0;
}

id sub_10043AA64(void *a1, void *a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v164 = (char *)v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v155 - v7;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v165 = *(void *)(v9 - 8);
  uint64_t v166 = v9;
  __chkstk_darwin(v9);
  long long v167 = (char *)v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v170 = v14;
  uint64_t v171 = v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v155 - v19;
  __chkstk_darwin(v21);
  uint64_t v168 = (char *)v155 - v22;
  uint64_t v23 = type metadata accessor for RDSavedAttachment.URLMetadata();
  *(void *)&double v24 = __chkstk_darwin(v23).n128_u64[0];
  uint64_t v26 = (char *)v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = [a1 remObjectID:v24];
  if (v27)
  {
    id v172 = v27;
    uint64_t v173 = a2;
    id v179 = a1;
    id v28 = [a1 account];
    if (v28
      && (char v29 = v28, v30 = [v28 remObjectID], v29, v30))
    {
      id v31 = [v179 reminder];
      if (v31)
      {
        uint64_t v32 = v31;
        id v33 = [v31 remObjectID];

        if (v33)
        {
          id v163 = v33;
          id v34 = v179;
          id v35 = [v179 metadata];
          if (!v35)
          {
            id v46 = self;
            type metadata accessor for REMCDSavedAttachment();
            uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
            uint64_t v56 = v34;
            NSString v57 = String._bridgeToObjectiveC()();
            [v46 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v57];

            swift_willThrow();
            goto LABEL_17;
          }
          id v36 = v35;
          uint64_t v161 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v162 = (void *)v37;

          id v38 = [v34 attachmentTypeRawValue];
          if (v38)
          {
            id v39 = v38;
            uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            v42._countAndFlagsBits = v160;
            v42._object = v41;
            Swift::Int v43 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2DA8, v42);
            swift_bridgeObjectRelease();
            if (!v43)
            {
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              sub_10043C4DC(&qword_1009186F8, (void (*)(uint64_t))type metadata accessor for RDSavedAttachment.URLMetadata);
              uint64_t v72 = v161;
              id v46 = v162;
              uint64_t v73 = v169;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              if (!v73)
              {
                swift_release();
                uint64_t v102 = (uint64_t *)&v26[*(int *)(v23 + 20)];
                uint64_t v103 = *v102;
                unint64_t v104 = v102[1];
                sub_100097E24(*v102, v104);
                URL._bridgeToObjectiveC()(v105);
                id v107 = v106;
                id v108 = v30;
                if (v104 >> 60 == 15)
                {
                  Class isa = 0;
                }
                else
                {
                  Class isa = Data._bridgeToObjectiveC()().super.isa;
                  sub_100097F20(v103, v104);
                }
                id v110 = v173;
                id v111 = objc_allocWithZone((Class)REMURLAttachment);
                id v112 = v172;
                uint64_t v113 = v108;
                id v114 = v108;
                id v115 = v163;
                id v46 = [v111 initWithObjectID:v172 accountID:v114 reminderID:v163 url:v107 metadata:isa];

                sub_100097F34(v161, (unint64_t)v162);
                sub_10043BC64((uint64_t)v26);
                goto LABEL_42;
              }

              sub_100097F34(v72, (unint64_t)v46);
              swift_release();
LABEL_17:
              a2 = v173;
              goto LABEL_18;
            }
            if (v43 == 1)
            {
              uint64_t v44 = v30;
              char v45 = 0;
              goto LABEL_28;
            }
            id v34 = v179;
            if (v43 == 2)
            {
              uint64_t v44 = v30;
              char v45 = 1;
LABEL_28:
              id v74 = v179;
              id v75 = [v179 uti];
              if (v75)
              {
                id v76 = v75;
                uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v160 = v78;

                id v79 = [v74 identifier];
                if (v79)
                {
                  unint64_t v80 = v79;
                  uint64_t v158 = v77;
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v81 = v171;
                  NSString v82 = *(void (**)(char *, char *, uint64_t))(v171 + 32);
                  id v83 = v20;
                  id v84 = (void *)v170;
                  v82(v13, v83, v170);
                  (*(void (**)(char *, void, uint64_t, void *))(v81 + 56))(v13, 0, 1, v84);
                  if ((*(unsigned int (**)(char *, uint64_t, void *))(v81 + 48))(v13, 1, v84) != 1)
                  {
                    id v159 = v44;
                    uint64_t v85 = v168;
                    v82(v168, v13, (uint64_t)v84);
                    id v86 = v179;
                    id v87 = [v179 fileName];
                    if (v87)
                    {
                      unint64_t v88 = v87;
                      uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v157 = v89;

                      uint64_t v90 = v173[3];
                      uint64_t v91 = v173[4];
                      v155[1] = sub_1000C0DE0(v173, v90);
                      id v92 = [v159 uuid];
                      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                      id v93 = [v86 sha512Sum];
                      if (v93)
                      {
                        id v94 = v93;
                        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v97 = v96;
                      }
                      else
                      {
                        uint64_t v95 = 0;
                        uint64_t v97 = 0;
                      }
                      (*(void (**)(char *, char *, uint64_t, void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 8))(v168, v17, v156, v157, v95, v97, v90, v91);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      id v120 = *(void (**)(char *, uint64_t))(v171 + 8);
                      v171 += 8;
                      v120(v17, v170);
                      id v46 = v159;
                      if (v45)
                      {
                        type metadata accessor for JSONDecoder();
                        swift_allocObject();
                        JSONDecoder.init()();
                        sub_10043BC10();
                        uint64_t v122 = v161;
                        unint64_t v121 = (unint64_t)v162;
                        uint64_t v123 = v169;
                        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                        if (v123)
                        {

                          uint64_t v124 = v122;
LABEL_50:
                          sub_100097F34(v124, v121);

                          swift_release();
                          swift_bridgeObjectRelease();
                          (*(void (**)(char *, uint64_t))(v165 + 8))(v167, v166);
                          v120(v168, v170);
                          goto LABEL_17;
                        }
                        swift_release();
                        unint64_t v127 = v175;
                        uint64_t v169 = v174;
                        uint64_t v128 = v176;
                        uint64_t v129 = v165;
                        uint64_t v130 = v166;
                        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v8, v167, v166);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v8, 0, 1, v130);
                        NSString v131 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease();
                        int v132 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v129 + 48))(v8, 1, v130);
                        uint64_t v157 = v120;
                        if (v132 == 1)
                        {
                          NSString v133 = 0;
                        }
                        else
                        {
                          URL._bridgeToObjectiveC()((NSURL *)&v180);
                          NSString v133 = v141;
                          (*(void (**)(char *, uint64_t))(v129 + 8))(v8, v130);
                        }
                        id v142 = objc_allocWithZone((Class)REMImageAttachment);
                        unint64_t v153 = v127;
                        uint64_t v154 = v128;
                        id v143 = v172;
                        id v144 = v159;
                        id v145 = v163;
                        NSString v146 = v131;
                        id v46 = [v142 initWithObjectID:v172 accountID:v159 reminderID:v163 UTI:v131 fileSize:v169 fileURL:v133 data:0 width:v153 height:v154];

                        sub_100097F34(v161, (unint64_t)v162);
                        (*(void (**)(char *, uint64_t))(v129 + 8))(v167, v130);
                        v157(v168, v170);
                      }
                      else
                      {
                        type metadata accessor for JSONDecoder();
                        swift_allocObject();
                        JSONDecoder.init()();
                        sub_10043BBBC();
                        uint64_t v125 = v161;
                        unint64_t v121 = (unint64_t)v162;
                        uint64_t v126 = v169;
                        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                        if (v126)
                        {

                          uint64_t v124 = v125;
                          goto LABEL_50;
                        }
                        swift_release();
                        uint64_t v134 = v174;
                        NSString v136 = v164;
                        uint64_t v135 = v165;
                        uint64_t v137 = v166;
                        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v164, v167, v166);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v136, 0, 1, v137);
                        NSString v138 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease();
                        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v136, 1, v137) == 1)
                        {
                          v140 = 0;
                        }
                        else
                        {
                          URL._bridgeToObjectiveC()(v139);
                          v140 = v147;
                          (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
                        }
                        uint64_t v148 = v135;
                        id v149 = objc_allocWithZone((Class)REMFileAttachment);
                        id v150 = v172;
                        id v151 = v159;
                        id v152 = v163;
                        id v46 = [v149 initWithObjectID:v172 accountID:v159 reminderID:v163 UTI:v138 fileSize:v134 fileURL:v140 data:0];

                        sub_100097F34(v161, (unint64_t)v162);
                        (*(void (**)(char *, uint64_t))(v148 + 8))(v167, v166);
                        v120(v168, v170);
                      }
                      id v110 = v173;
LABEL_42:
                      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v110);
                      return v46;
                    }
                    swift_bridgeObjectRelease();
                    uint64_t v116 = self;
                    type metadata accessor for REMCDSavedAttachment();
                    uint64_t v117 = swift_getObjCClassFromMetadata();
                    NSString v118 = String._bridgeToObjectiveC()();
                    id v119 = [v116 unexpectedNilPropertyWithClass:v117 property:v118];
                    id v46 = v84;

                    swift_willThrow();
                    sub_100097F34(v161, (unint64_t)v162);

                    (*(void (**)(char *, void *))(v171 + 8))(v85, v84);
                    goto LABEL_17;
                  }
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v13, 1, 1, v170);
                }
                swift_bridgeObjectRelease();
                sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
                id v46 = self;
                type metadata accessor for REMCDSavedAttachment();
                uint64_t v100 = swift_getObjCClassFromMetadata();
                NSString v101 = String._bridgeToObjectiveC()();
                [v46 unexpectedNilPropertyWithClass:v100 property:v101];

                swift_willThrow();
              }
              else
              {
                id v46 = self;
                type metadata accessor for REMCDSavedAttachment();
                uint64_t v98 = swift_getObjCClassFromMetadata();
                NSString v99 = String._bridgeToObjectiveC()();
                [v46 unexpectedNilPropertyWithClass:v98 property:v99];

                swift_willThrow();
              }
              sub_100097F34(v161, (unint64_t)v162);

              id v53 = v163;
LABEL_16:

              goto LABEL_17;
            }
          }
          uint64_t v174 = 0;
          unint64_t v175 = 0xE000000000000000;
          _StringGuts.grow(_:)(135);
          v58._countAndFlagsBits = 0xD000000000000084;
          v58._object = (void *)0x80000001007D4ED0;
          String.append(_:)(v58);
          id v59 = [v34 attachmentTypeRawValue];
          if (v59)
          {
            id v60 = v59;
            id v61 = v30;
            uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v64 = v63;
          }
          else
          {
            id v61 = v30;
            uint64_t v62 = 0;
            uint64_t v64 = 0;
          }
          a2 = v173;
          uint64_t v65 = self;
          uint64_t v177 = v62;
          uint64_t v178 = v64;
          sub_100094134((uint64_t *)&unk_10090A4C0);
          uint64_t v66 = Optional.descriptionOrNil.getter();
          uint64_t v68 = v67;
          swift_bridgeObjectRelease();
          v69._countAndFlagsBits = v66;
          v69._object = v68;
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          v70._countAndFlagsBits = 125;
          v70._object = (void *)0xE100000000000000;
          String.append(_:)(v70);
          id v46 = (id)v175;
          NSString v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v65 invalidParameterErrorWithDescription:v71];

          swift_willThrow();
          sub_100097F34(v161, (unint64_t)v162);

          goto LABEL_18;
        }
      }
      id v46 = self;
      type metadata accessor for REMCDSavedAttachment();
      uint64_t v51 = swift_getObjCClassFromMetadata();
      NSString v52 = String._bridgeToObjectiveC()();
      [v46 unexpectedNilPropertyWithClass:v51 property:v52];

      swift_willThrow();
    }
    else
    {
      id v46 = self;
      type metadata accessor for REMCDSavedAttachment();
      uint64_t v47 = swift_getObjCClassFromMetadata();
      NSString v48 = String._bridgeToObjectiveC()();
      [v46 unexpectedNilPropertyWithClass:v47 property:v48];

      swift_willThrow();
    }
    id v53 = v179;
    goto LABEL_16;
  }
  id v46 = self;
  type metadata accessor for REMCDSavedAttachment();
  uint64_t v49 = swift_getObjCClassFromMetadata();
  NSString v50 = String._bridgeToObjectiveC()();
  [v46 unexpectedNilPropertyWithClass:v49 property:v50];

  swift_willThrow();
LABEL_18:
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a2);
  return v46;
}

uint64_t type metadata accessor for RDSavedAttachment.URLMetadata()
{
  uint64_t result = qword_100918770;
  if (!qword_100918770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10043BBBC()
{
  unint64_t result = qword_1009186E8;
  if (!qword_1009186E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009186E8);
  }
  return result;
}

unint64_t sub_10043BC10()
{
  unint64_t result = qword_1009186F0;
  if (!qword_1009186F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009186F0);
  }
  return result;
}

uint64_t sub_10043BC64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDSavedAttachment.URLMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10043BCC0()
{
  unint64_t result = qword_1009114F0;
  if (!qword_1009114F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1009114F0);
  }
  return result;
}

unint64_t sub_10043BD00()
{
  unint64_t result = qword_100918700;
  if (!qword_100918700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918700);
  }
  return result;
}

unint64_t sub_10043BD54()
{
  unint64_t result = qword_100918708;
  if (!qword_100918708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918708);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedAttachment.ImageMetadata(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment.ImageMetadata(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.ImageMetadata()
{
  return &type metadata for RDSavedAttachment.ImageMetadata;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.FileMetadata()
{
  return &type metadata for RDSavedAttachment.FileMetadata;
}

uint64_t sub_10043BE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10043BE28);
}

uint64_t sub_10043BE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t sub_10043BEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10043BF08);
}

uint64_t sub_10043BF08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t sub_10043BFD4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10043C068()
{
  unint64_t result = qword_1009187B0;
  if (!qword_1009187B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009187B0);
  }
  return result;
}

uint64_t sub_10043C0BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10043C204(void *a1)
{
  uint64_t v2 = sub_100094134(&qword_1009187B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10043C3D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[15] = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v8[14] = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v8[13] = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v6;
}

unint64_t sub_10043C3D0()
{
  unint64_t result = qword_1009187C0;
  if (!qword_1009187C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009187C0);
  }
  return result;
}

unint64_t sub_10043C424()
{
  unint64_t result = qword_1009187D0;
  if (!qword_1009187D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009187D0);
  }
  return result;
}

uint64_t sub_10043C478(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedAttachment.URLMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10043C4DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedAttachment.URLMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10043C5F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.URLMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.URLMetadata.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RDSavedAttachment.ImageMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10043C6F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.ImageMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.ImageMetadata.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for RDSavedAttachment(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAttachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10043C86C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10043C874(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment()
{
  return &type metadata for RDSavedAttachment;
}

unsigned char *storeEnumTagSinglePayload for RDSavedAttachment.FileMetadata.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10043C928);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAttachment.FileMetadata.CodingKeys()
{
  return &type metadata for RDSavedAttachment.FileMetadata.CodingKeys;
}

unint64_t sub_10043C964()
{
  unint64_t result = qword_1009187F0;
  if (!qword_1009187F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009187F0);
  }
  return result;
}

unint64_t sub_10043C9BC()
{
  unint64_t result = qword_1009187F8;
  if (!qword_1009187F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009187F8);
  }
  return result;
}

unint64_t sub_10043CA14()
{
  unint64_t result = qword_100918800;
  if (!qword_100918800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918800);
  }
  return result;
}

unint64_t sub_10043CA6C()
{
  unint64_t result = qword_100918808;
  if (!qword_100918808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918808);
  }
  return result;
}

unint64_t sub_10043CAC4()
{
  unint64_t result = qword_100918810;
  if (!qword_100918810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918810);
  }
  return result;
}

unint64_t sub_10043CB1C()
{
  unint64_t result = qword_100918818;
  if (!qword_100918818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918818);
  }
  return result;
}

unint64_t sub_10043CB74()
{
  unint64_t result = qword_100918820;
  if (!qword_100918820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918820);
  }
  return result;
}

unint64_t sub_10043CBCC()
{
  unint64_t result = qword_100918828;
  if (!qword_100918828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918828);
  }
  return result;
}

unint64_t sub_10043CC24()
{
  unint64_t result = qword_100918830;
  if (!qword_100918830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918830);
  }
  return result;
}

uint64_t sub_10043CC7C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918838);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918838);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10043CD44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)objc_msgSend(v1, "type", v4) >= 5)
  {
    if (qword_100907590 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10008E2DC(v2, (uint64_t)qword_100918838);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"unknown type", 12, 2);
    __break(1u);
  }
  else
  {
    sub_1001BCA48();
    swift_getKeyPath();
    [v1 ascending];
    NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  }
}

uint64_t sub_10043CEFC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 accountID];
  if (v3)
  {
    double v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10043CFC4(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001248EC(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setAccountID:isa];
}

void sub_10043D0F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  *(void *)&double v12 = __chkstk_darwin(v11 - 8).n128_u64[0];
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a2 managedObjectContext:v12];
  if (!v15)
  {
    id v28 = self;
    NSString v29 = String._bridgeToObjectiveC()();
    [v28 internalErrorWithDebugDescription:v29];

    swift_willThrow();
    return;
  }
  uint64_t v16 = v15;
  id v17 = [a2 remObjectID];
  if (!v17)
  {
    id v30 = self;
    sub_1000963CC(0, &qword_10090ABC0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v32 = String._bridgeToObjectiveC()();
    [v30 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v32];

    swift_willThrow();
    return;
  }
  uint64_t v18 = v17;
  uint64_t v58 = a1;
  id v59 = v3;
  id v56 = a3;
  id v60 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v20 = v18;
  id v21 = [v20 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v57 = v8;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
  sub_10032E284(KeyPath, (uint64_t)v14);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v60[2] >= v60[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v22 = (void *)sub_1002F52FC(v60);
  type metadata accessor for REMCDAccountListData();
  id v23 = [objc_allocWithZone((Class)NSFetchRequest) init];
  double v24 = (void *)swift_getObjCClassFromMetadata();
  id v25 = [v24 entity];
  [v23 setEntity:v25];

  [v23 setAffectedStores:0];
  [v23 setPredicate:v22];
  id v26 = v59;
  uint64_t v27 = NSManagedObjectContext.fetch<A>(_:)();
  if (v26)
  {

    return;
  }
  unint64_t v33 = v27;
  id v59 = v22;
  id v54 = v16;
  id v55 = v20;
  id v34 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v53 = [v34 initWithOrderedIdentifiers:isa];

  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v37 = v54;
  if (!v36)
  {
    swift_bridgeObjectRelease();
    id v43 = [v24 entity];
    id v44 = [objc_allocWithZone((Class)v24) initWithEntity:v43 insertIntoManagedObjectContext:v37];
    id v45 = v56;
    id v46 = v44;
    [v37 assignObject:v46 toPersistentStore:v45];

    id v47 = [v55 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class v48 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v7);
    [v46 setAccountID:v48];

    id v49 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
    Swift::String v42 = v37;
    swift_bridgeObjectRetain();
    Class v50 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v51 = [v49 initWithOrderedIdentifiers:v50];

    [v46 setOrderedIdentifierMap:v51];
    id v37 = v55;
    id v38 = v51;
    id v39 = v53;
    goto LABEL_19;
  }
  if ((v33 & 0xC000000000000001) != 0)
  {
    id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    id v38 = v55;
    id v39 = v53;
    goto LABEL_15;
  }
  id v38 = v55;
  id v39 = v53;
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v40 = *(id *)(v33 + 32);
LABEL_15:
    swift_bridgeObjectRelease();
    id v41 = [v40 orderedIdentifierMap];
    if (!v41)
    {
LABEL_20:

      return;
    }
    Swift::String v42 = v41;
    sub_1000963CC(0, (unint64_t *)&qword_10090D600);
    if ((static NSObject.== infix(_:_:)() & 1) == 0)
    {
      id v39 = v39;
      [v40 setOrderedIdentifierMap:v39];

      Swift::String v42 = v37;
      id v37 = v59;
      id v59 = v23;
      id v23 = v39;
    }
LABEL_19:

    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_10043D7CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918850);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918850);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_10043D894(uint64_t a1)
{
  uint64_t v2 = v1;
  v2[2] = &_swiftEmptyDictionarySingleton;
  id v4 = [objc_allocWithZone((Class)NSCache) init];
  v2[3] = v4;
  v2[5] = 0;
  swift_unknownObjectWeakInit();
  [v4 setCountLimit:a1];
  if (qword_100907598 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100918850);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDManualSortIDCacheContext > initialized", v8, 2u);
    swift_slowDealloc();
  }

  return v2;
}

uint64_t sub_10043D9C8()
{
  swift_bridgeObjectRelease();

  sub_1000F3DB4(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDManualSortIDCacheContext()
{
  return self;
}

uint64_t sub_10043DA34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918920);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918920);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10043DB04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F365C(*a1, *a2);
}

Swift::Int sub_10043DB10()
{
  return Hasher._finalize()();
}

uint64_t sub_10043DBC8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10043DC6C()
{
  return Hasher._finalize()();
}

unint64_t sub_10043DD20@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10043FC08(*a1);
  *a2 = result;
  return result;
}

void sub_10043DD50(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC00000065746144;
  unint64_t v4 = 0xEB00000000656D61;
  uint64_t v5 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    uint64_t v5 = 0x73694C7472616D73;
    unint64_t v4 = 0xE900000000000074;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6E6F697461657263;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_10043DDC4(void *a1@<X8>)
{
  *a1 = &off_1008B6DB0;
}

_UNKNOWN **static REMCDSmartListSection.recordTypes()()
{
  return &off_1008B6DD8;
}

uint64_t static REMCDSmartListSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDSmartListSection();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDSmartListSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      double v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_1009075A0 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100918920);
      id v14 = a2;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          id v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDSmartListSection.recordType()()
{
  uint64_t v0 = (void *)0x80000001007C72D0;
  uint64_t v1 = 0xD000000000000010;
  result._object = v0;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall REMCDSmartListSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  NSString v4 = String._bridgeToObjectiveC()();
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  [super mergeDataFromRecord:from.super.isa accountID:v4];

  id v5 = [(objc_class *)from.super.isa recordID];
  NSString v6 = [v5 recordName];

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v7 = [v2 ckIdentifierFromRecordName:v6];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v7];

  int v8 = [v2 mergeDataRevertedLocallyMarkedForDeletion];
  int v9 = [v2 mergeDataRefusedToMergeMarkedForDeletion];
  char v14 = 0;
  id v10 = v2;
  id v11 = from.super.isa;
  sub_1004CC554(v11, v8, v9, v10, v10, v11, &v14);

  if (v14 == 1)
  {
    id v12 = [v10 smartList];
    if (v12)
    {
      uint64_t v13 = v12;
      if (([v12 ckNeedsInitialFetchFromCloud] & 1) == 0) {
        _sSo14REMCDSmartListC7reminddE19sortChildrenObjectsyyF_0();
      }
    }
  }
}

void sub_10043E5E4(unsigned char *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v58 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v55 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v56);
  id v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v57 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  objc_super v15 = (char *)&v55 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - v17;
  __chkstk_darwin(v19);
  id v21 = (char *)&v55 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v55 - v23;
  uint64_t v25 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v26 = __chkstk_darwin(v25 - 8).n128_u64[0];
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      id v29 = [a3 encryptedValues:v26];
      NSString v30 = String._bridgeToObjectiveC()();
      NSString v31 = [v29 objectForKeyedSubscript:v30];
      swift_unknownObjectRelease();

      if (v31)
      {
        NSString v60 = v31;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          NSString v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v31 = 0;
        }
      }
      [a2 setDisplayName:v31];

      return;
    }
    id v35 = [a2 smartList:v26];
    if (v35)
    {
      uint64_t v36 = v35;
      id v37 = [v35 identifier];

      if (v37)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
        v38(v21, 0, 1, v7);
      }
      else
      {
        id v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
        v38(v21, 1, 1, v7);
      }
      sub_100096408((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100909E50);
    }
    else
    {
      id v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
      v38(v24, 1, 1, v7);
    }
    if (CKRecord.subscript.getter())
    {
      self;
      id v39 = (void *)swift_dynamicCastObjCClass();
      if (!v39) {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      id v39 = 0;
    }
    id v40 = sub_1000C50D8(v39);
    if (v40)
    {
      id v41 = v40;
      self;
      Swift::String v42 = (void *)swift_dynamicCastObjCClass();
      if (!v42) {
    }
      }
    else
    {
      Swift::String v42 = 0;
    }

    [a2 setSmartList:v42];
    id v43 = [a2 smartList];
    if (v43)
    {
      id v44 = v43;
      id v45 = [v43 identifier];

      if (v45)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v46 = 1;
      }
      uint64_t v47 = v59;
      v38(v15, v46, 1, v7);
      sub_100096408((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v47 = v59;
      v38(v18, 1, 1, v7);
    }
    uint64_t v48 = (uint64_t)v57;
    uint64_t v49 = (uint64_t)&v10[*(int *)(v56 + 48)];
    sub_1001248EC((uint64_t)v18, (uint64_t)v10);
    sub_1001248EC((uint64_t)v24, v49);
    Class v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v50((uint64_t)v10, 1, v7) == 1)
    {
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
      if (v50(v49, 1, v7) == 1)
      {
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        char v51 = 0;
LABEL_38:
        unsigned char *v58 = v51 & 1;
        return;
      }
    }
    else
    {
      sub_1001248EC((uint64_t)v10, v48);
      if (v50(v49, 1, v7) != 1)
      {
        uint64_t v52 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v55, v49, v7);
        sub_100124954();
        char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v54 = *(void (**)(char *, uint64_t))(v47 + 8);
        v54(v52, v7);
        sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        v54((char *)v48, v7);
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
        char v51 = v53 ^ 1;
        goto LABEL_38;
      }
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v7);
    }
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
    char v51 = 1;
    goto LABEL_38;
  }
  sub_10012451C();
  uint64_t v32 = type metadata accessor for Date();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v33 = *(void *)(v32 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v32);
  }
  [a2 setCreationDate:isa];
}

CKRecord_optional __swiftcall REMCDSmartListSection.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = (objc_class *)type metadata accessor for REMCDSmartListSection();
  v40.receiver = v0;
  v40.super_class = v8;
  id v10 = [super newlyCreatedRecord];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &off_1008B6E38;
    uint64_t v13 = (uint64_t *)&unk_100909A40;
    uint64_t v36 = v0;
    do
    {
      if (!*((unsigned char *)v12 + v11 + 32))
      {
        id v26 = [v1 creationDate];
        if (v26)
        {
          uint64_t v27 = v26;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 0, 1, v28);
        }
        else
        {
          uint64_t v28 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 1, 1, v28);
        }
        sub_100096408((uint64_t)v4, (uint64_t)v7, v13);
        type metadata accessor for Date();
        uint64_t v33 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v7, 1, v28) == 1)
        {
          sub_1000966BC((uint64_t)v7, v13);
          long long v37 = 0u;
          long long v38 = 0u;
          id v39 = 0;
        }
        else
        {
          *((void *)&v38 + 1) = v28;
          id v39 = &protocol witness table for Date;
          uint64_t v14 = sub_1000C1FE8((uint64_t *)&v37);
          (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 32))(v14, v7, v28);
        }
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.setter();
        goto LABEL_5;
      }
      if (*((unsigned char *)v12 + v11 + 32) == 1)
      {
        id v15 = [v10 encryptedValues];
        id v16 = [v1 displayName];
        if (v16)
        {
          uint64_t v17 = v16;
          id v18 = v10;
          uint64_t v19 = v7;
          uint64_t v20 = v4;
          id v21 = v12;
          uint64_t v22 = v13;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          *((void *)&v38 + 1) = &type metadata for String;
          id v39 = &protocol witness table for String;
          *(void *)&long long v37 = v23;
          *((void *)&v37 + 1) = v25;
          uint64_t v13 = v22;
          uint64_t v12 = v21;
          NSString v4 = v20;
          uint64_t v7 = v19;
          id v10 = v18;
          uint64_t v1 = v36;
        }
        else
        {
          id v39 = 0;
          long long v37 = 0u;
          long long v38 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
        goto LABEL_5;
      }
      if (([v1 markedForDeletion] & 1) == 0)
      {
        id v30 = [v1 smartList];
        id v29 = v30;
        if (!v30) {
          goto LABEL_18;
        }
        id v31 = [v30 recordID];

        if (v31)
        {
          id v29 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v31];

          if (v29) {
            id v32 = v29;
          }
          goto LABEL_18;
        }
      }
      id v29 = 0;
LABEL_18:
      CKRecord.subscript.setter();

LABEL_5:
      ++v11;
    }
    while (v11 != 3);
  }
  id v34 = (objc_class *)v10;
  result.value.super.Class isa = v34;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall REMCDSmartListSection.cleanUpAfterLocalObjectMerge()()
{
  if (qword_1009075A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100918920);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    NSString v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)NSString v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917428);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDSmartListSection.fixBrokenReferences()()
{
  if (qword_1009075A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100918920);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_willSave;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = 7104878;
  uint64_t v7 = swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136446466;
  id v8 = [v2 remObjectID];
  if (v8)
  {
    Swift::Bool v9 = v8;
    id v10 = [v8 description];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  sub_1000C51B8(v11, v13, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2082;
  id v14 = [v2 smartList];
  if (!v14) {
    goto LABEL_12;
  }
  id v15 = v14;
  id v16 = [v14 remObjectID];
  if (!v16)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  id v18 = [v16 description];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

LABEL_13:
  uint64_t v5 = &selRef_willSave;
  sub_1000C51B8(v6, v20, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in smart list {smartListSectionID: %{public}s, smartListID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v21 = [v2 v5[288]];
  if (!v21) {
    return;
  }
  uint64_t v22 = v21;
  if ([v21 markedForDeletion]
    && ([v2 markedForDeletion] & 1) == 0)
  {
    id v23 = v2;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25))
    {

LABEL_28:
      [v23 markForDeletion];
      goto LABEL_29;
    }
    id v26 = v5;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    id v28 = [v23 remObjectID];
    if (v28)
    {
      id v29 = v28;
      id v30 = [v28 description];

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;
    }
    else
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v31 = 7104878;
    }
    sub_1000C51B8(v31, v33, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    id v34 = [v23 v26[288]];
    if (v34)
    {
      uint64_t v35 = v34;
      id v36 = [v34 remObjectID];
      if (v36)
      {
        long long v37 = v36;
        id v38 = [v36 description];

        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

LABEL_27:
        sub_1000C51B8(v39, v41, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Smart List is marked for deletion but section in smart list is not {smartListSectionID: %{public}s, smartListID: %{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_28;
      }
    }
    unint64_t v41 = 0xE300000000000000;
    uint64_t v39 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  [v22 forcePushToCloud];
}

unint64_t sub_10043FC08(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6D48, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t _s7remindd21REMCDSmartListSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_1009075A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100918920);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917428);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd21REMCDSmartListSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_1009075A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100918920);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917428);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

unsigned char *_s6FieldsOwst_4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *CKRecord_optional result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004400B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *CKRecord_optional result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_4()
{
  return &_s6FieldsON_4;
}

unint64_t sub_1004400E8(uint64_t a1)
{
  unint64_t result = sub_100440110();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100440110()
{
  unint64_t result = qword_100918940;
  if (!qword_100918940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918940);
  }
  return result;
}

unint64_t sub_100440164(uint64_t a1)
{
  unint64_t result = sub_10044018C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10044018C()
{
  unint64_t result = qword_100918948;
  if (!qword_100918948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918948);
  }
  return result;
}

unint64_t sub_1004401E4()
{
  unint64_t result = qword_100918950;
  if (!qword_100918950)
  {
    sub_100096058(&qword_100918958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918950);
  }
  return result;
}

unint64_t sub_100440244()
{
  unint64_t result = qword_100918960;
  if (!qword_100918960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918960);
  }
  return result;
}

uint64_t sub_100440298(uint64_t a1, uint64_t a2)
{
  return sub_1004409A8(a1, a2, (void (*)(void *__return_ptr))sub_1001B0734);
}

uint64_t sub_1004402B0()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32];
  sub_1000C0DE0(&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations], v2);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(double (**)(uint64_t, uint64_t))(v4 + 8);
  unsigned int v6 = v0;
  double v7 = v5(v2, v4);
  uint64_t v12 = ObjectType;
  unint64_t v13 = &off_1008BDA80;
  *(void *)&long long v11 = v6;
  uint64_t v8 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v9 = swift_allocObject();
  sub_1000967D4(&v11, v9 + 16);
  *(double *)(v9 + 56) = v7;
  uint64_t v12 = v8;
  unint64_t v13 = &off_1008C8B10;
  *(void *)&long long v11 = v9;
  sub_1000C0DE0(&v11, v8);
  sub_100508CE8();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v11);
}

uint64_t sub_1004403B4()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations + 32];
  sub_1000C0DE0(&v0[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations], v2);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(double (**)(uint64_t, uint64_t))(v4 + 8);
  unsigned int v6 = v0;
  double v7 = v5(v2, v4);
  uint64_t v12 = ObjectType;
  unint64_t v13 = &off_1008C4B00;
  *(void *)&long long v11 = v6;
  uint64_t v8 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v9 = swift_allocObject();
  sub_1000967D4(&v11, v9 + 16);
  *(double *)(v9 + 56) = v7;
  uint64_t v12 = v8;
  unint64_t v13 = &off_1008C8B10;
  *(void *)&long long v11 = v9;
  sub_1000C0DE0(&v11, v8);
  sub_100508CE8();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v11);
}

uint64_t sub_1004404B8()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations + 32];
  sub_1000C0DE0(&v0[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations], v2);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(double (**)(uint64_t, uint64_t))(v4 + 8);
  unsigned int v6 = v0;
  double v7 = v5(v2, v4);
  uint64_t v12 = ObjectType;
  unint64_t v13 = &off_1008CF3A8;
  *(void *)&long long v11 = v6;
  uint64_t v8 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v9 = swift_allocObject();
  sub_1000967D4(&v11, v9 + 16);
  *(double *)(v9 + 56) = v7;
  uint64_t v12 = v8;
  unint64_t v13 = &off_1008C8B10;
  *(void *)&long long v11 = v9;
  sub_1000C0DE0(&v11, v8);
  sub_100508CE8();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v11);
}

uint64_t sub_1004405BC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v3);
  sub_1000C0DE0(v3, v3[3]);
  sub_100508CE8();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

uint64_t sub_100440614(uint64_t a1, uint64_t a2)
{
  return sub_100440A10(a1, a2, (void (*)(void *__return_ptr))sub_1001B0734);
}

uint64_t sub_10044062C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v3);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v3);
}

uint64_t sub_100440668()
{
  return sub_1004402B0();
}

uint64_t sub_10044068C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)*v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_1000C0DE0(v4, v5);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(double (**)(uint64_t, uint64_t))(v7 + 8);
  id v9 = v3;
  double v10 = v8(v5, v7);
  uint64_t v14 = a1;
  id v15 = &off_1008BDA80;
  *(void *)&long long v13 = v9;
  sub_1000967D4(&v13, (uint64_t)v12);
  *(double *)&v12[5] = v10;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
}

uint64_t sub_100440750(uint64_t a1, uint64_t a2)
{
  return sub_1004409A8(a1, a2, (void (*)(void *__return_ptr))sub_10022FD60);
}

uint64_t sub_100440768(uint64_t a1, uint64_t a2)
{
  return sub_100440A10(a1, a2, (void (*)(void *__return_ptr))sub_10022FD60);
}

uint64_t sub_100440780()
{
  return sub_1004403B4();
}

uint64_t sub_1004407A4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)*v1 + OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_1000C0DE0(v4, v5);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(double (**)(uint64_t, uint64_t))(v7 + 8);
  id v9 = v3;
  double v10 = v8(v5, v7);
  uint64_t v14 = a1;
  id v15 = &off_1008C4B00;
  *(void *)&long long v13 = v9;
  sub_1000967D4(&v13, (uint64_t)v12);
  *(double *)&v12[5] = v10;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
}

BOOL sub_100440868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v10, a1, a2);
  sub_1000C0DE0(v10, v10[3]);
  sub_1005086DC((uint64_t)v7);
  LOBYTE(a2) = Date.isInThePast.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v10);
  return (a2 & 1) == 0;
}

uint64_t sub_100440990(uint64_t a1, uint64_t a2)
{
  return sub_1004409A8(a1, a2, (void (*)(void *__return_ptr))sub_10062890C);
}

uint64_t sub_1004409A8(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v4);
  sub_1000C0DE0(v4, v4[3]);
  sub_100508CE8();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v4);
}

uint64_t sub_1004409F8(uint64_t a1, uint64_t a2)
{
  return sub_100440A10(a1, a2, (void (*)(void *__return_ptr))sub_10062890C);
}

uint64_t sub_100440A10(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v4);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v4);
}

uint64_t sub_100440A4C()
{
  return sub_1004404B8();
}

uint64_t sub_100440A70(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)*v1 + OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations;
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_1000C0DE0(v4, v5);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(double (**)(uint64_t, uint64_t))(v7 + 8);
  id v9 = v3;
  double v10 = v8(v5, v7);
  uint64_t v14 = a1;
  id v15 = &off_1008CF3A8;
  *(void *)&long long v13 = v9;
  sub_1000967D4(&v13, (uint64_t)v12);
  *(double *)&v12[5] = v10;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
}

uint64_t sub_100440B34(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000C0DE0(a1, v7);
  if (sub_100440868(v7, v8))
  {
    id v9 = self;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    sub_1000C0DE0(a1, v10);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v22, v10, v11);
    sub_1000C0DE0(v22, v22[3]);
    sub_1005086DC((uint64_t)v6);
    Date.timeIntervalSinceNow.getter();
    double v13 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    [v9 throttledErrorWithRemainingTimeInterval:v13];
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
    return swift_willThrow();
  }
  else
  {
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    sub_1000C0DE0(a1, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
    uint64_t v18 = a1[3];
    uint64_t v17 = a1[4];
    sub_1000C0DE0(a1, v18);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
    if (!v1)
    {
      uint64_t v19 = a1[3];
      uint64_t v20 = a1[4];
      sub_1000C0DE0(a1, v19);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
    }
  }
  return result;
}

uint64_t sub_100440D74()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918970);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918970);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100440E3C(char a1)
{
  uint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x4E79616C70736964;
      break;
    case 2:
      uint64_t result = 0x6D614E7473726966;
      break;
    case 3:
      uint64_t result = 0x614E656C6464696DLL;
      break;
    case 4:
      uint64_t result = 0x656D614E7473616CLL;
      break;
    case 5:
      uint64_t result = 0x66657250656D616ELL;
      break;
    case 6:
      uint64_t result = 0x66667553656D616ELL;
      break;
    case 7:
      uint64_t result = 0x656D616E6B63696ELL;
      break;
    case 8:
      uint64_t result = 0x73736572646461;
      break;
    case 9:
      uint64_t result = 0x737574617473;
      break;
    case 10:
      uint64_t result = 0x654C737365636361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100440FA0(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100440E3C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100440E3C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10044102C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100440E3C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100441090()
{
  sub_100440E3C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004410E4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100440E3C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100441144@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100441534(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100441174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100440E3C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1004411A0(void *a1@<X8>)
{
  *a1 = &off_1008B5720;
}

unint64_t sub_1004411B0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100441534(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004411D8()
{
  return sub_100440E3C(*v0);
}

uint64_t sub_1004411E0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4E90, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100441240(void *a1@<X8>)
{
  *a1 = &off_1008B6E60;
}

uint64_t sub_100441250@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4E90, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t type metadata accessor for REMShareeCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1004412D8()
{
  return &off_1008C6418;
}

_UNKNOWN **sub_1004412E4()
{
  return &off_1008C63E8;
}

id sub_1004412F0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a5)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v22 = a9;
    if (a7) {
      goto LABEL_3;
    }
  }
  else
  {
    NSString v38 = 0;
    uint64_t v22 = a9;
    if (a7)
    {
LABEL_3:
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v23 = a11;
      if (v22) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  NSString v37 = 0;
  uint64_t v23 = a11;
  if (v22)
  {
LABEL_4:
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v24 = a13;
    if (v23) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  NSString v36 = 0;
  uint64_t v24 = a13;
  if (v23)
  {
LABEL_5:
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v26 = a15;
    if (v24) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  NSString v25 = 0;
  uint64_t v26 = a15;
  if (v24)
  {
LABEL_6:
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v28 = a17;
    if (v26) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  NSString v27 = 0;
  uint64_t v28 = a17;
  if (v26)
  {
LABEL_7:
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v30 = a19;
    if (v28) {
      goto LABEL_8;
    }
LABEL_16:
    NSString v31 = 0;
    uint64_t v33 = a20;
    uint64_t v32 = a21;
    if (v30) {
      goto LABEL_9;
    }
LABEL_17:
    NSString v34 = 0;
    goto LABEL_18;
  }
LABEL_15:
  NSString v29 = 0;
  uint64_t v30 = a19;
  if (!v28) {
    goto LABEL_16;
  }
LABEL_8:
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v33 = a20;
  uint64_t v32 = a21;
  if (!v30) {
    goto LABEL_17;
  }
LABEL_9:
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_18:
  id v40 = [v39 initShareeWithObjectID:a1 accountID:a2 listID:a3 displayName:v38 firstName:v37 middleName:v36 lastName:v25 namePrefix:v27 nameSuffix:v29 nickname:v31 address:v34 status:v33 accessLevel:v32];

  return v40;
}

unint64_t sub_100441534(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4740, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

void sub_100441580(void *a1)
{
  id v83 = 0;
  id v2 = [a1 remObjectIDWithError:&v83];
  if (!v2)
  {
    uint64_t v16 = v83;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  unint64_t v3 = v2;
  uint64_t v4 = v83;
  id v5 = [a1 account];
  uint64_t v6 = &selRef_intersectsSet_;
  if (v5)
  {
    char v7 = v5;
    id v8 = [v5 remObjectID];

    if (v8)
    {
      id v9 = [a1 list];
      if (v9)
      {
        uint64_t v10 = v9;
        id v11 = [v9 remObjectID];

        if (v11)
        {
          id v12 = [a1 displayName];
          if (v12)
          {
            double v13 = v12;
            uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v78 = v15;
            uint64_t v79 = v14;
          }
          else
          {
            uint64_t v78 = 0;
            uint64_t v79 = 0;
          }
          id v35 = [a1 firstName];
          if (v35)
          {
            NSString v36 = v35;
            uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v76 = v38;
            uint64_t v77 = v37;
          }
          else
          {
            uint64_t v76 = 0;
            uint64_t v77 = 0;
          }
          id v39 = [a1 middleName];
          if (v39)
          {
            id v40 = v39;
            uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v74 = v42;
            uint64_t v75 = v41;
          }
          else
          {
            uint64_t v74 = 0;
            uint64_t v75 = 0;
          }
          id v43 = [a1 lastName];
          if (v43)
          {
            id v44 = v43;
            uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v72 = v46;
            uint64_t v73 = v45;
          }
          else
          {
            uint64_t v72 = 0;
            uint64_t v73 = 0;
          }
          id v47 = [a1 namePrefix];
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v70 = v50;
            uint64_t v71 = v49;
          }
          else
          {
            uint64_t v70 = 0;
            uint64_t v71 = 0;
          }
          id v51 = [a1 nameSuffix];
          if (v51)
          {
            uint64_t v52 = v51;
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v68 = v54;
            uint64_t v69 = v53;
          }
          else
          {
            uint64_t v68 = 0;
            uint64_t v69 = 0;
          }
          NSString v82 = v11;
          id v55 = [a1 nickname];
          unint64_t v80 = v3;
          if (v55)
          {
            uint64_t v56 = v55;
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v59 = v58;
          }
          else
          {
            uint64_t v57 = 0;
            uint64_t v59 = 0;
          }
          id v60 = [a1 address];
          if (v60)
          {
            id v61 = v60;
            uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v64 = v63;
          }
          else
          {
            uint64_t v62 = 0;
            uint64_t v64 = 0;
          }
          uint64_t v65 = (int)[a1 status];
          uint64_t v66 = (int)[a1 accessLevel];
          id v67 = objc_allocWithZone((Class)REMSharee);
          sub_1004412F0(v80, v8, v82, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v57, v59, v62, v64,
            v65,
            v66);
          return;
        }
      }
    }
  }
  id v17 = [a1 account];

  if (!v17)
  {
    if (qword_1009075A8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_100918970);
    uint64_t v19 = v3;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v81 = (void *)swift_slowAlloc();
      id v83 = v19;
      *(_DWORD *)uint64_t v22 = 138412290;
      uint64_t v23 = v19;
      uint64_t v6 = &selRef_intersectsSet_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v81 = v3;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "REMShareeCDIngestor: cdSharee.account is nil {cdSharee.remObjectID: %@}", v22, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v20 = v19;
    }
  }
  id v24 = [a1 v6[120]];

  if (!v24)
  {
    swift_bridgeObjectRelease();
    if (qword_1009075A8 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_100918970);
    uint64_t v26 = v3;
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      NSString v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)NSString v29 = 138412290;
      id v83 = v26;
      NSString v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v3;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "REMShareeCDIngestor: cdSharee.list is nil {cdSharee.remObjectID: %@}", v29, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      NSString v27 = v26;
    }
  }
  uint64_t v32 = self;
  sub_1004421DC();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v34];

  swift_willThrow();
}

void sub_100441CB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v20 = type metadata accessor for UUID();
  __chkstk_darwin(v20);
  id v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    v19[1] = v3;
    id v11 = (void (**)(char *, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    while (2)
    {
      uint64_t v16 = *(unsigned __int8 *)(a3 + v12++ + 32);
      switch(v16)
      {
        case 1:
          v15.super.Class isa = (Class)[a1 displayName];
          [a2 setDisplayName:v15.super.isa];
          goto LABEL_4;
        case 2:
          v15.super.Class isa = (Class)[a1 firstName];
          [a2 setFirstName:v15.super.isa];
          goto LABEL_4;
        case 3:
          v15.super.Class isa = (Class)[a1 middleName];
          [a2 setMiddleName:v15.super.isa];
          goto LABEL_4;
        case 4:
          v15.super.Class isa = (Class)[a1 lastName];
          [a2 setLastName:v15.super.isa];
          goto LABEL_4;
        case 5:
          v15.super.Class isa = (Class)[a1 namePrefix];
          [a2 setNamePrefix:v15.super.isa];
          goto LABEL_4;
        case 6:
          v15.super.Class isa = (Class)[a1 nameSuffix];
          [a2 setNameSuffix:v15.super.isa];
          goto LABEL_4;
        case 7:
          v15.super.Class isa = (Class)[a1 nickname];
          [a2 setNickname:v15.super.isa];
          goto LABEL_4;
        case 8:
          v15.super.Class isa = (Class)[a1 address];
          [a2 setAddress:v15.super.isa];
          goto LABEL_4;
        case 9:
          uint64_t v17 = (uint64_t)[a1 status];
          if (v17 < -32768)
          {
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            JUMPOUT(0x10044201CLL);
          }
          if (v17 >= 0x8000) {
            goto LABEL_24;
          }
          [a2 setStatus:(__int16)v17];
LABEL_20:
          if (v10 != v12) {
            continue;
          }
LABEL_21:
          swift_bridgeObjectRelease();
          break;
        case 10:
          uint64_t v18 = (uint64_t)[a1 accessLevel];
          if (v18 < -32768) {
            goto LABEL_25;
          }
          if (v18 >= 0x8000) {
            goto LABEL_26;
          }
          [a2 setAccessLevel:(__int16)v18];
          goto LABEL_20;
        default:
          id v13 = [a1 objectID];
          id v14 = [v13 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          v15.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v11)(v9, v20);
          [a2 setIdentifier:v15.super.isa];
LABEL_4:

          if (v10 != v12) {
            continue;
          }
          goto LABEL_21;
      }
      break;
    }
  }
}

void sub_100442048(void *a1, char a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v14 = *(void **)(v3 + 24);
    sub_100477C88(1, v14, a3);
    if (v4) {
      return;
    }
    uint64_t v16 = v15;
    [a1 setList:v15];

    id v17 = [v14 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    [a1 setOwningListIdentifier:isa];
  }
  else
  {
    sub_100477C58(0, *(void **)(v3 + 16), a3);
    if (v4) {
      return;
    }
    Class isa = v12;
    [a1 setAccount:v12];
  }
}

unint64_t sub_1004421DC()
{
  unint64_t result = qword_100909AF8;
  if (!qword_100909AF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100909AF8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMShareeCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004422E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMShareeCDIngestor.RelationshipKey()
{
  return &type metadata for REMShareeCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMShareeCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004423ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMShareeCDIngestor.ValueKey()
{
  return &type metadata for REMShareeCDIngestor.ValueKey;
}

uint64_t sub_100442424()
{
  return sub_1000B2138(&qword_100918B78, &qword_100918B80);
}

unint64_t sub_100442450()
{
  unint64_t result = qword_100918B88;
  if (!qword_100918B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918B88);
  }
  return result;
}

uint64_t sub_1004424A4()
{
  return sub_1000B2138(&qword_100918B90, &qword_100918B98);
}

unint64_t sub_1004424D0()
{
  unint64_t result = qword_100918BA0;
  if (!qword_100918BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918BA0);
  }
  return result;
}

uint64_t sub_100442524()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918BB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918BB0);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1004425EC(void *a1, uint64_t a2)
{
  sub_100442970();
  unsigned int v4 = &qword_100907000;
  if (!a1[5])
  {
    if (qword_1009075B0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E2DC(v5, (uint64_t)qword_100918BB0);
    swift_retain();
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      uint64_t v9 = a1[2];
      unint64_t v10 = a1[3];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v9, v10, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "os_transaction INIT {name: %{public}s}", v8, 0xCu);
      swift_arrayDestroy();
      unsigned int v4 = &qword_100907000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    String.utf8CString.getter();
    uint64_t v11 = os_transaction_create();
    swift_release();
    a1[5] = v11;
    swift_unknownObjectRelease();
  }
  uint64_t v12 = a1[4];
  BOOL v13 = __OFADD__(v12, a2);
  uint64_t v14 = v12 + a2;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    a1[4] = v14;
    if (v4[182] == -1) {
      goto LABEL_10;
    }
  }
  swift_once();
LABEL_10:
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100918BB0);
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v19 = a1[2];
    unint64_t v20 = a1[3];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v19, v20, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDTransactionRegistrar[%{public}s]: Transaction count incremented to {count: %ld}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

void sub_100442970()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[4];
  if (v2 < 0)
  {
    if (qword_1009075B0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100918BB0);
    swift_retain();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v13 = v1[2];
      unint64_t v14 = v1[3];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDTransactionRegistrar[%{public}s]: Transaction count is negative {count: %ld}", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v2 = v1[4];
    if (v1[5])
    {
LABEL_3:
      if (v2) {
        return;
      }
      goto LABEL_4;
    }
  }
  else if (v0[5])
  {
    goto LABEL_3;
  }
  if (!v2) {
    return;
  }
  if (qword_1009075B0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100918BB0);
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v19 = v1[2];
    unint64_t v20 = v1[3];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v19, v20, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDTransactionRegistrar[%{public}s]: Transaction count is not zero when osTransaction is nil {count: %ld}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v1[5]) {
      return;
    }
  }
  else
  {

    swift_release();
    if (!v1[5]) {
      return;
    }
  }
  if (v1[4]) {
    return;
  }
LABEL_4:
  if (qword_1009075B0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100918BB0);
  swift_retain();
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)unsigned int v6 = 136446210;
    uint64_t v7 = v1[2];
    unint64_t v8 = v1[3];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v7, v8, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDTransactionRegistrar[%{public}s]: Transaction count is zero when osTransaction is not nil", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

void sub_100442E64(NSObject *a1, uint64_t a2)
{
  unsigned int v4 = a1;
  sub_100442970();
  Class isa = a1[4].isa;
  BOOL v6 = __OFSUB__(isa, a2);
  BOOL v7 = (uint64_t)isa < a2;
  unint64_t v8 = (Class)((char *)isa - a2);
  if (v7)
  {
    if (qword_1009075B0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100918BB0);
    swift_retain();
    unsigned int v4 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446722;
      uint64_t v12 = (uint64_t)a1[2].isa;
      unint64_t v13 = (unint64_t)a1[3].isa;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v11 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v10, "RDTransactionRegistrar[%{public}s]: Trying to decrement counter to negative, grounding to zero {count: %ld, n: %ld}", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_11:
      unint64_t v8 = 0;
      goto LABEL_12;
    }
LABEL_10:

    swift_release();
    goto LABEL_11;
  }
  if (v6)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  a1[4].Class isa = v8;
  if (qword_1009075B0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_100918BB0);
  swift_retain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v18 = (uint64_t)a1[2].isa;
    unint64_t v19 = (unint64_t)a1[3].isa;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDTransactionRegistrar[%{public}s]: Transaction count decremented to {count: %ld}", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (a1[4].isa) {
      return;
    }
  }
  else
  {

    swift_release();
    if (a1[4].isa) {
      return;
    }
  }
  if (a1[5].isa)
  {
    swift_retain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      uint64_t v23 = (uint64_t)a1[2].isa;
      unint64_t v24 = (unint64_t)a1[3].isa;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v23, v24, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "os_transaction RELEASE {name: %{public}s}", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    a1[5].Class isa = 0;
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100443334()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTransactionRegistrar()
{
  return self;
}

void sub_1004433A0(void *a1@<X0>, BOOL *a2@<X8>)
{
  os_log_type_t v5 = self;
  id v6 = [v5 fetchRequest];
  id v7 = [v5 predicateForCloudKitAccountsWithKeyPathPrefix:0];
  [v6 setPredicate:v7];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100776E40;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 32) = 0x696669746E656469;
  *(void *)(v8 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10077A530;
  *(void *)(v10 + 32) = a1;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  id v11 = a1;
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setAffectedStores:v12];

  sub_1000963CC(0, &qword_10090ABC0);
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {
  }
  else
  {
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
    }
    *a2 = v14 != 0;
  }
}

void sub_1004435F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v32 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v29[-v14];
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  unint64_t v19 = &v29[-v18];
  id v20 = [v2 mostRecentTargetTemplateIdentifier:v17];
  if (v20)
  {
    os_log_type_t v21 = v20;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, 1, 1, v4);
  }
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1001248EC((uint64_t)v19, (uint64_t)v10);
  uint64_t v33 = a1;
  sub_1001248EC(a1, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    if (v23(v22, 1, v4) == 1)
    {
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      return;
    }
  }
  else
  {
    sub_1001248EC((uint64_t)v10, (uint64_t)v15);
    if (v23(v22, 1, v4) != 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 32))(v7, v22, v4);
      sub_10044423C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      NSString v31 = v2;
      unint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v24(v7, v4);
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
      v24(v15, v4);
      uint64_t v2 = v31;
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      if (v30) {
        return;
      }
      goto LABEL_11;
    }
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v15, v4);
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
LABEL_11:
  uint64_t v25 = v32;
  sub_1001248EC(v33, (uint64_t)v32);
  if (v23((uint64_t)v25, 1, v4) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v25, v4);
  }
  [v2 setMostRecentTargetTemplateIdentifier:isa];

  id v27 = [v2 createResolutionTokenMapIfNecessary];
  NSString v28 = String._bridgeToObjectiveC()();
  [v27 updateForKey:v28];
}

void sub_100443A94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v67);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v66 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v52 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v52 - v13;
  id v68 = v1;
  id v15 = [v1 sharees];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v71 = v14;
    id v55 = v12;
    unint64_t v17 = sub_1004421DC();
    sub_10044423C((unint64_t *)&unk_100913900, (void (*)(uint64_t))sub_1004421DC);
    uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v18 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v18 = v74;
      uint64_t v60 = v75;
      uint64_t v19 = v76;
      uint64_t v20 = v77;
      unint64_t v21 = v78;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v22 = -1 << *(unsigned char *)(v18 + 32);
      uint64_t v23 = *(void *)(v18 + 56);
      uint64_t v60 = v18 + 56;
      uint64_t v19 = ~v22;
      uint64_t v24 = -v22;
      if (v24 < 64) {
        uint64_t v25 = ~(-1 << v24);
      }
      else {
        uint64_t v25 = -1;
      }
      unint64_t v21 = v25 & v23;
    }
    uint64_t v57 = v18 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v52 = v19;
    int64_t v58 = (unint64_t)(v19 + 64) >> 6;
    uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v64 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v59 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v56 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v26 = (uint64_t)v55;
    uint64_t v62 = v18;
    unint64_t v63 = v17;
    while (1)
    {
      unint64_t v65 = v21;
      if (v18 < 0)
      {
        uint64_t v31 = __CocoaSet.Iterator.next()();
        if (!v31) {
          goto LABEL_47;
        }
        uint64_t v72 = v31;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v32 = v73;
        swift_unknownObjectRelease();
        unint64_t v33 = v21;
        uint64_t v30 = v20;
        uint64_t v28 = v33;
        if (!v32) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v21)
        {
          uint64_t v28 = (v21 - 1) & v21;
          unint64_t v29 = __clz(__rbit64(v21)) | (v20 << 6);
          uint64_t v30 = v20;
        }
        else
        {
          int64_t v34 = v20 + 1;
          if (__OFADD__(v20, 1))
          {
            __break(1u);
            return;
          }
          if (v34 >= v58) {
            goto LABEL_47;
          }
          unint64_t v35 = *(void *)(v60 + 8 * v34);
          uint64_t v30 = v20 + 1;
          if (!v35)
          {
            uint64_t v30 = v20 + 2;
            if (v20 + 2 >= v58) {
              goto LABEL_47;
            }
            unint64_t v35 = *(void *)(v60 + 8 * v30);
            if (!v35)
            {
              uint64_t v30 = v20 + 3;
              if (v20 + 3 >= v58) {
                goto LABEL_47;
              }
              unint64_t v35 = *(void *)(v60 + 8 * v30);
              if (!v35)
              {
                uint64_t v30 = v20 + 4;
                if (v20 + 4 >= v58) {
                  goto LABEL_47;
                }
                unint64_t v35 = *(void *)(v60 + 8 * v30);
                if (!v35)
                {
                  uint64_t v36 = v20 + 5;
                  while (v58 != v36)
                  {
                    unint64_t v35 = *(void *)(v60 + 8 * v36++);
                    if (v35)
                    {
                      uint64_t v30 = v36 - 1;
                      goto LABEL_32;
                    }
                  }
                  goto LABEL_47;
                }
              }
            }
          }
LABEL_32:
          uint64_t v28 = (v35 - 1) & v35;
          unint64_t v29 = __clz(__rbit64(v35)) + (v30 << 6);
        }
        id v32 = *(id *)(*(void *)(v18 + 48) + 8 * v29);
        if (!v32) {
          goto LABEL_47;
        }
      }
      unint64_t v69 = v28;
      uint64_t v61 = v20;
      id v37 = [v32 remObjectID:v52];
      if (v37)
      {
        uint64_t v38 = v37;
        id v39 = [v37 uuid];

        uint64_t v40 = (uint64_t)v71;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v41 = *v70;
        (*v70)(v40, 0, 1, v2);
      }
      else
      {
        uint64_t v41 = *v70;
        (*v70)((uint64_t)v71, 1, 1, v2);
      }
      id v42 = [v68 sharedOwnerIdentifier];
      if (v42)
      {
        id v43 = v42;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v44 = 0;
      }
      else
      {
        uint64_t v44 = 1;
      }
      v41(v26, v44, 1, v2);
      uint64_t v45 = (uint64_t)&v6[*(int *)(v67 + 48)];
      uint64_t v46 = (uint64_t)v71;
      sub_1001248EC((uint64_t)v71, (uint64_t)v6);
      sub_1001248EC(v26, v45);
      id v47 = *v64;
      if ((*v64)(v6, 1, v2) == 1) {
        break;
      }
      sub_1001248EC((uint64_t)v6, v66);
      if (v47((char *)v45, 1, v2) == 1)
      {
        sub_1000966BC(v26, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v71, (uint64_t *)&unk_100909E50);
        (*v59)(v66, v2);
        uint64_t v18 = v62;
LABEL_11:
        sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_10090B4C0);
        goto LABEL_12;
      }
      uint64_t v48 = v66;
      uint64_t v49 = v54;
      (*v53)(v54, v45, v2);
      sub_10044423C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v51 = *v59;
      uint64_t v26 = (uint64_t)v55;
      (*v59)((uint64_t)v49, v2);
      sub_1000966BC(v26, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v71, (uint64_t *)&unk_100909E50);
      v51(v48, v2);
      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
      uint64_t v18 = v62;
      if (v50) {
        goto LABEL_47;
      }
LABEL_12:

      uint64_t v20 = v30;
      unint64_t v21 = v69;
    }
    sub_1000966BC(v26, (uint64_t *)&unk_100909E50);
    sub_1000966BC(v46, (uint64_t *)&unk_100909E50);
    unsigned int v27 = v47((char *)v45, 1, v2);
    uint64_t v18 = v62;
    if (v27 == 1)
    {
      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
LABEL_47:
      sub_1000C1AF8();
      return;
    }
    goto LABEL_11;
  }
}

uint64_t sub_10044423C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100444284()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1004442E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918C80);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918C80);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1004443B0()
{
  swift_bridgeObjectRelease();

  sub_1000F3DB4(v0 + 40);
  sub_100096314(*(void *)(v0 + 48));
  return v0;
}

uint64_t sub_1004443E8()
{
  sub_1004443B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDChannel.Reader()
{
  return sub_1000E6FBC();
}

uint64_t sub_100444434()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100444494()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = sub_100587438(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6669746E65646920;
  v2._object = (void *)0xED0000203A726569;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A74656772617420;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v7 = String.init<A>(describing:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 10558;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  return 60;
}

uint64_t sub_1004445D4()
{
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t sub_100444604()
{
  sub_1004445D4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDChannel.Writer()
{
  return sub_1000E6FBC();
}

uint64_t sub_100444650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for RDChannel()
{
  return sub_1000E6FBC();
}

uint64_t sub_100444670()
{
  _StringGuts.grow(_:)(31);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = sub_100587438(v0);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6669746E65646920;
  v3._object = (void *)0xED0000203A726569;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 16);
  Swift::String v5 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A72656461657220;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  type metadata accessor for RDChannel.Reader();
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8._countAndFlagsBits = 10558;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_1004447CC()
{
  return sub_100444670();
}

uint64_t sub_1004447F0()
{
  return sub_100444494();
}

uint64_t sub_100444814(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  Swift::String v3 = sub_1001FF8A4(a1);
  uint64_t v4 = (void *)sub_10039F578(KeyPath, (uint64_t)v3);
  swift_release();
  id v5 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

uint64_t sub_100444944@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 endDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    Swift::String v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    Swift::String v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_100444A0C(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAA4C(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setEndDate:isa];
}

unint64_t sub_100444B38(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v59 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v63 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v64 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v6 = (char *)&v58 - v5;
  uint64_t v7 = (void *)sub_100444814(a1);
  unint64_t v8 = sub_10044549C();
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  unint64_t v60 = v8;
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  id v61 = v9;
  [v9 setPredicate:v7];

  uint64_t v65 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10078C820;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = swift_getKeyPath();
  *(void *)(inited + 72) = swift_getKeyPath();
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = swift_getKeyPath();
  *(void *)(inited + 96) = swift_getKeyPath();
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = swift_getKeyPath();
  *(void *)&long long v69 = inited;
  specialized Array._endMutation()();
  uint64_t v12 = v69;
  uint64_t v71 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 11, 0);
  int64_t v13 = (int64_t)v71;
  for (uint64_t i = 4; i != 15; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v15 = *(void *)(v12 + 8 * i);
      swift_retain();
    }
    uint64_t v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v17)
    {
      *(void *)&long long v69 = 0;
      *((void *)&v69 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v56._object = (void *)0x80000001007CAF70;
      v56._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v56);
      uint64_t v68 = v15;
      goto LABEL_50;
    }
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    uint64_t v70 = &type metadata for String;
    swift_release();
    *(void *)&long long v69 = v18;
    *((void *)&v69 + 1) = v19;
    uint64_t v71 = (void *)v13;
    unint64_t v21 = *(void *)(v13 + 16);
    unint64_t v20 = *(void *)(v13 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_1001DE1C4(v20 > 1, v21 + 1, 1);
      int64_t v13 = (int64_t)v71;
    }
    *(void *)(v13 + 16) = v21 + 1;
    sub_10009A1A0(&v69, (_OWORD *)(v13 + 32 * v21 + 32));
  }
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  uint64_t v23 = (uint64_t)v61;
  [v61 setPropertiesToFetch:isa];

  uint64_t v24 = swift_initStackObject();
  long long v62 = xmmword_10077A530;
  *(_OWORD *)(v24 + 16) = xmmword_10077A530;
  *(void *)(v24 + 32) = swift_getKeyPath();
  *(void *)&long long v69 = v24;
  specialized Array._endMutation()();
  unint64_t v25 = v69;
  uint64_t v71 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  uint64_t v26 = v71;
  if ((v25 & 0xC000000000000001) != 0)
  {
    int64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    int64_t v13 = *(void *)(v25 + 32);
    swift_retain();
  }
  uint64_t v27 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v28) {
    goto LABEL_52;
  }
  id v29 = (id)v27;
  uint64_t v30 = v28;
  swift_release();
  unint64_t v32 = v26[2];
  unint64_t v31 = v26[3];
  int64_t v13 = v32 + 1;
  if (v32 >= v31 >> 1) {
    goto LABEL_47;
  }
  while (1)
  {
    v26[2] = v13;
    unint64_t v33 = &v26[2 * v32];
    v33[4] = v29;
    v33[5] = v30;
    swift_bridgeObjectRelease();
    Class v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [(id)v23 setRelationshipKeyPathsForPrefetching:v34];

    unint64_t v35 = v67;
    unint64_t v36 = NSManagedObjectContext.fetch<A>(_:)();
    if (v35)
    {

      return v25;
    }
    int64_t v13 = v36;
    *(void *)&long long v69 = _swiftEmptyDictionarySingleton;
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v60 = 0;
    if (!v37) {
      break;
    }
    unint64_t v67 = v13 & 0xC000000000000001;
    unint64_t v25 = (unint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v23 = 4;
    uint64_t v66 = v37;
    while (1)
    {
      id v39 = v67 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v13 + 8 * v23);
      unint64_t v32 = (unint64_t)v39;
      uint64_t v30 = v23 - 3;
      if (__OFADD__(v23 - 4, 1)) {
        break;
      }
      id v40 = [v39 reminder];
      if (v40)
      {
        uint64_t v41 = v40;
        id v29 = [v40 identifier];

        if (v29)
        {
          uint64_t v42 = (uint64_t)v64;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v43 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
        }
        else
        {
          uint64_t v45 = type metadata accessor for UUID();
          uint64_t v42 = (uint64_t)v64;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v64, 1, 1, v45);
        }
        sub_1000F44F4(v42, (uint64_t)v6);
      }
      else
      {
        uint64_t v44 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v6, 1, 1, v44);
      }
      unint64_t v47 = sub_10030768C((uint64_t)v6);
      unint64_t v31 = *(void *)(v25 + 16);
      BOOL v48 = (v46 & 1) == 0;
      uint64_t v49 = v31 + v48;
      if (__OFADD__(v31, v48)) {
        goto LABEL_45;
      }
      id v29 = v46;
      if (*(void *)(v25 + 24) < v49)
      {
        sub_100312A20(v49, 1);
        unint64_t v25 = v69;
        unint64_t v50 = sub_10030768C((uint64_t)v6);
        if ((v29 & 1) != (v51 & 1))
        {
          while (1)
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
LABEL_52:
            *(void *)&long long v69 = 0;
            *((void *)&v69 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v57._object = (void *)0x80000001007CAF70;
            v57._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v57);
            uint64_t v68 = v13;
LABEL_50:
            sub_100094134(&qword_1009169F0);
            _print_unlocked<A, B>(_:_:)();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
        }
        unint64_t v47 = v50;
      }
      if (v29)
      {
        sub_1001260DC((uint64_t)v6);
        unint64_t v25 = v69;
        uint64_t v38 = (void *)(*(void *)(v69 + 56) + 8 * v47);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        id v29 = *(id *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v29 >= *(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        uint64_t v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = v62;
        *(void *)(v52 + 32) = v32;
        uint64_t v71 = (void *)v52;
        specialized Array._endMutation()();
        unint64_t v32 = (unint64_t)v71;
        *(void *)(v25 + 8 * (v47 >> 6) + 64) |= 1 << v47;
        sub_1000F44F4((uint64_t)v6, *(void *)(v25 + 48) + *(void *)(v63 + 72) * v47);
        *(void *)(*(void *)(v25 + 56) + 8 * v47) = v32;
        uint64_t v53 = *(void *)(v25 + 16);
        BOOL v54 = __OFADD__(v53, 1);
        unint64_t v31 = v53 + 1;
        if (v54) {
          goto LABEL_46;
        }
        *(void *)(v25 + 16) = v31;
      }
      ++v23;
      if (v30 == v66) {
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    sub_1001DE058(v31 > 1, v13, 1);
    uint64_t v26 = v71;
  }
  unint64_t v25 = (unint64_t)_swiftEmptyDictionarySingleton;
LABEL_42:

  swift_bridgeObjectRelease();
  return v25;
}

unint64_t sub_10044549C()
{
  unint64_t result = qword_100911820;
  if (!qword_100911820)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100911820);
  }
  return result;
}

const char *sub_1004454DC()
{
  return "daysOfTheMonth";
}

void sub_1004454E8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100445508(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_100445528()
{
  return "daysOfTheWeek";
}

void sub_100445534(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100445554(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_100445574()
{
  return "daysOfTheYear";
}

void sub_100445580(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1004455A0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1004455C0()
{
  return "endDate";
}

const char *sub_1004455D4()
{
  return "firstDayOfTheWeek";
}

id sub_1004455E0@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 firstDayOfTheWeek];
  *a2 = (_WORD)result;
  return result;
}

id sub_100445614(__int16 *a1, id *a2)
{
  return [*a2 setFirstDayOfTheWeek:*a1];
}

const char *sub_100445628()
{
  return "frequency";
}

id sub_100445634@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 frequency];
  *a2 = (_WORD)result;
  return result;
}

id sub_100445668(__int16 *a1, id *a2)
{
  return [*a2 setFrequency:*a1];
}

const char *sub_10044567C()
{
  return "interval";
}

id sub_100445688@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 interval];
  *a2 = (_WORD)result;
  return result;
}

id sub_1004456BC(__int16 *a1, id *a2)
{
  return [*a2 setInterval:*a1];
}

const char *sub_1004456D0()
{
  return "monthsOfTheYear";
}

void sub_1004456DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1004456FC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10044571C()
{
  return "occurrenceCount";
}

id sub_100445728@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 occurrenceCount];
  *a2 = result;
  return result;
}

id sub_10044575C(void *a1, id *a2)
{
  return [*a2 setOccurrenceCount:*a1];
}

const char *sub_100445770()
{
  return "setPositions";
}

void sub_10044577C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10044579C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1004457BC()
{
  return "weeksOfTheYear";
}

void sub_1004457C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1004457E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100445808@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_100445844(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

uint64_t sub_100445860()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918E18);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918E18);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100445928(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s10PredicatesOMa(0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [v1 listID:v9];
  unsigned __int8 v13 = [v1 includingSubtasks];
  *(void *)uint64_t v11 = v12;
  v11[8] = v13;
  swift_storeEnumTagMultiPayload();
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10039E88C((uint64_t)v11, (objc_class *)qword_1009421D8, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10044C734((uint64_t)v11, _s10PredicatesOMa);
    return (uint64_t)v1;
  }
  unint64_t v15 = v14;
  uint64_t v36 = a1;
  if (qword_1009075C0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10008E2DC(v4, (uint64_t)qword_100918E18);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
  uint64_t v37 = &v34;
  unint64_t v35 = v15;
  uint64_t v38 = (void *)v15;
  __chkstk_darwin(v17);
  sub_100094134(&qword_10090D750);
  uint64_t v18 = sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
  uint64_t v34 = v18;
  uint64_t v19 = 0;
  unint64_t v20 = Sequence.map<A>(skippingError:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v21)
  {
LABEL_17:
    id v1 = [self defaultFetchOptions];
    sub_10039D0B0(v35, v1, v36);
    if (v19)
    {
      sub_10044C734((uint64_t)v11, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = v27;

      swift_bridgeObjectRelease();
      uint64_t v38 = v28;
      sub_100202F18(v20);
      id v29 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000963CC(0, &qword_100910180);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      Class v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v32 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      Class v33 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v1 = [v29 initWithAccountStorages:isa listStorages:v31 reminderStorages:v32 objectIDs:v33];

      sub_10044C734((uint64_t)v11, _s10PredicatesOMa);
    }
    return (uint64_t)v1;
  }
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v37 = 0;
    uint64_t v23 = 0;
    do
    {
      if ((v20 & 0xC000000000000001) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v20 + 8 * v23 + 32);
      }
      unint64_t v25 = v24;
      ++v23;
      id v26 = [v24 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v21 != v23);
    uint64_t v19 = v37;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100445F18(uint64_t a1)
{
  return sub_100445928(a1);
}

void *sub_100445F3C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s10PredicatesOMa(0);
  *(void *)&double v5 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = [v1 subtaskFetchOption:v5];
  if (v8 == (id)1) {
    char v9 = 4;
  }
  else {
    char v9 = 2;
  }
  if (v8 == (id)2) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  uint64_t v11 = *(int *)(sub_100094134(&qword_100916980) + 64);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v12 = swift_allocObject();
  long long v22 = xmmword_10077A530;
  *(_OWORD *)(v12 + 16) = xmmword_10077A530;
  *(void *)(v12 + 32) = [v2 parentReminderID];
  uint64_t v24 = v12;
  specialized Array._endMutation()();
  uint64_t *v7 = v24;
  *((unsigned char *)v7 + v11) = v10;
  _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  id v13 = [v2 accountID];
  id v14 = [a1 persistentStoreOfAccountWithAccountID:v13];

  if (v14)
  {
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v22;
    *(void *)(v15 + 32) = v14;
    uint64_t v24 = v15;
    specialized Array._endMutation()();
    uint64_t v16 = v24;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v17 = v23;
  uint64_t v18 = sub_10039E88C((uint64_t)v7, (objc_class *)qword_1009421D8, (uint64_t)a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v16);
  if (v17)
  {
    sub_10044C734((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    id v20 = [v2 reminderFetchOptions];
    a1 = (void *)sub_10044B6AC(v19, v20, (uint64_t)a1);
    sub_10044C734((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  return a1;
}

void *sub_10044622C(void *a1)
{
  return sub_100445F3C(a1);
}

uint64_t sub_100446250(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(int *)(sub_100094134(&qword_100916980) + 64);
  id v9 = [v3 parentReminderIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t *v7 = v10;
  _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v7 + v8) = 2;
  swift_storeEnumTagMultiPayload();
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10039E88C((uint64_t)v7, (objc_class *)qword_1009421D8, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (v2)
  {
    sub_10044C734((uint64_t)v7, _s10PredicatesOMa);
  }
  else
  {
    unint64_t v12 = v11;
    id v13 = [self defaultFetchOptions];
    a1 = sub_10044B6AC(v12, v13, a1);
    sub_10044C734((uint64_t)v7, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10044647C(uint64_t a1)
{
  return sub_100446250(a1);
}

id sub_1004464A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v80 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v75 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s10PredicatesO19CompletionPredicateOMa(0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  id v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v15 = [v1 includeIncomplete:v12];
  unsigned __int8 v16 = [v1 includeCompleted];
  if (v15)
  {
    uint64_t v78 = v6;
    uint64_t v17 = (uint64_t)v14;
    uint64_t v18 = v10;
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      id v55 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000963CC(0, &qword_100910180);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      Class v57 = Array._bridgeToObjectiveC()().super.isa;
      sub_1000963CC(0, &qword_1009100F8);
      Class v58 = Array._bridgeToObjectiveC()().super.isa;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      Class v59 = Array._bridgeToObjectiveC()().super.isa;
      id v27 = [v55 initWithAccountStorages:isa listStorages:v57 reminderStorages:v58 objectIDs:v59];

      return v27;
    }
    uint64_t v78 = v6;
    uint64_t v17 = (uint64_t)v14;
    uint64_t v18 = v10;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = sub_100094134(&qword_100916980);
  uint64_t v20 = (uint64_t)v18 + *(int *)(v19 + 48);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_10077A530;
  *(void *)(v21 + 32) = [v2 parentReminderID];
  v83[0] = v21;
  specialized Array._endMutation()();
  void *v18 = v83[0];
  sub_10044C6D0(v17, v20);
  if ([v2 isUnsupported]) {
    char v22 = 6;
  }
  else {
    char v22 = 2;
  }
  *((unsigned char *)v18 + *(int *)(v19 + 64)) = v22;
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = self;
  id v24 = [v23 cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v25 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v27 = [v25 initWithEntityName:v26];

  [v27 setResultType:2];
  uint64_t v28 = (void *)sub_10038F1F0();
  [v27 setPredicate:v28];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_100776E40;
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 32) = 0x696669746E656469;
  *(void *)(v29 + 40) = 0xEA00000000007265;
  uint64_t v30 = (uint64_t *)&type metadata for Any;
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v27 setPropertiesToFetch:v31];

  sub_1000963CC(0, &qword_10090E4F0);
  uint64_t v32 = v74;
  unint64_t v33 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v34 = v32;
  if (v32)
  {

    sub_10044C734((uint64_t)v18, _s10PredicatesOMa);
    sub_10044C734(v17, _s10PredicatesO19CompletionPredicateOMa);
    return v27;
  }
  uint64_t v35 = v33;
  uint64_t v79 = v23;
  uint64_t v69 = v17;
  unint64_t v84 = (unint64_t)_swiftEmptyArrayStorage;
  if (v33 >> 62) {
    goto LABEL_36;
  }
  uint64_t v36 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_12:
  uint64_t v37 = v78;
  id v68 = v27;
  if (v36)
  {
    unint64_t v67 = v18;
    uint64_t v74 = v34;
    uint64_t v80 = v35;
    uint64_t v18 = (void *)(v35 & 0xC000000000000001);
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
    uint64_t v71 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v78 + 32);
    uint64_t v35 = 4;
    id v39 = &qword_100908190;
    uint64_t v76 = v30 + 1;
    uint64_t v77 = (unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
    uint64_t v78 = v36;
    uint64_t v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    uint64_t v70 = v18;
    while (1)
    {
      uint64_t v30 = v39;
      uint64_t v34 = v35 - 4;
      if (v18) {
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v40 = *(id *)(v80 + 8 * v35);
      }
      uint64_t v41 = v40;
      id v27 = (id)(v35 - 3);
      if (__OFADD__(v34, 1))
      {
        __break(1u);
LABEL_36:
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_12;
      }
      *(void *)&v82[0] = 0x696669746E656469;
      *((void *)&v82[0] + 1) = 0xEA00000000007265;
      id v42 = [v40 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v42)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v82, 0, sizeof(v82));
      }
      uint64_t v43 = v79;
      id v39 = v30;
      sub_100096408((uint64_t)v82, (uint64_t)v83, v30);
      if (v83[3])
      {
        uint64_t v44 = v81;
        int v45 = swift_dynamicCast();
        (*v38)(v5, v45 ^ 1u, 1, v44);
        uint64_t v46 = v44;
        id v39 = v30;
        if ((*v77)(v5, 1, v46) != 1)
        {
          unint64_t v47 = v75;
          BOOL v48 = v5;
          uint64_t v49 = v5;
          uint64_t v50 = v81;
          (*v72)(v75, v48, v81);
          Class v51 = UUID._bridgeToObjectiveC()().super.isa;
          id v52 = [v43 objectIDWithUUID:v51];

          uint64_t v53 = v47;
          id v39 = v30;
          uint64_t v54 = v50;
          uint64_t v5 = v49;
          uint64_t v18 = v70;
          uint64_t v38 = v73;
          (*v71)(v53, v54);

          if (v52)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            id v39 = v30;
          }
          goto LABEL_16;
        }
      }
      else
      {
        sub_1000966BC((uint64_t)v83, v30);
        (*v38)(v5, 1, 1, v81);
      }
      sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);

LABEL_16:
      ++v35;
      if (v27 == (id)v78)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v67;
        goto LABEL_33;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();
  id v60 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
  sub_1000963CC(0, &qword_100910180);
  Class v61 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  Class v62 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000963CC(0, &qword_1009100F8);
  Class v63 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class v64 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v60 initWithAccountStorages:v61 listStorages:v62 reminderStorages:v63 objectIDs:v64];

  sub_10044C734((uint64_t)v18, _s10PredicatesOMa);
  sub_10044C734(v69, _s10PredicatesO19CompletionPredicateOMa);
  return v27;
}

id sub_100446EA8(uint64_t a1)
{
  return sub_1004464A0(a1);
}

id sub_100446ECC(id a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  id v119 = &v110[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v120 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v117 = &v110[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  NSString v118 = &v110[-v10];
  uint64_t v11 = _s10PredicatesOMa(0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  id v14 = &v110[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v15 = [v1 objectIDs:v12];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v16 >> 62))
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    id v104 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    Class v106 = Array._bridgeToObjectiveC()().super.isa;
    sub_1000963CC(0, &qword_1009100F8);
    Class v107 = Array._bridgeToObjectiveC()().super.isa;
    Class v108 = Array._bridgeToObjectiveC()().super.isa;
    a1 = [v104 initWithAccountStorages:isa listStorages:v106 reminderStorages:v107 objectIDs:v108];

    return a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v103) {
    goto LABEL_42;
  }
LABEL_3:
  uint64_t v115 = v7;
  id v116 = a1;
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_46;
    }
    id v17 = *(id *)(v16 + 32);
  }
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  id v19 = [v3 objectIDs];
  uint64_t v20 = v3;
  unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  a1 = v18;
  LOBYTE(v18) = sub_10044B4F0(v21, a1);
  swift_bridgeObjectRelease();

  if (v18)
  {
    if (qword_1009075C0 == -1)
    {
LABEL_8:
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E2DC(v22, (uint64_t)qword_100918E18);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v23, v24))
      {
        id v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with multiple entity names.", v25, 2u);
        swift_slowDealloc();
      }

      NSString v26 = self;
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 invalidParameterErrorWithDescription:v27];

      swift_willThrow();
      return a1;
    }
LABEL_46:
    swift_once();
    goto LABEL_8;
  }
  id v112 = v2;
  id v113 = v20;
  id v28 = [v20 fetchOptions];
  unsigned int v111 = [v28 includeConcealed];

  id v114 = a1;
  id v29 = [a1 entityName];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v33 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v34 == v30 && v36 == v32)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    id v38 = v113;
    id v39 = [v113 objectIDs];
    uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)id v14 = v40;
    v14[8] = v111;
    swift_storeEnumTagMultiPayload();
    if (qword_100907418 != -1) {
      swift_once();
    }
    a1 = v116;
    id v41 = v112;
    uint64_t v42 = sub_10039E88C((uint64_t)v14, (objc_class *)qword_1009421D8, (uint64_t)v116, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
    id v43 = v114;
    if (v41)
    {
      sub_10044C734((uint64_t)v14, _s10PredicatesOMa);
    }
    else
    {
      unint64_t v44 = v42;
      id v45 = [v38 fetchOptions];
      a1 = (id)sub_10044B6AC(v44, v45, (uint64_t)a1);
      sub_10044C734((uint64_t)v14, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
    }
    return a1;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v37) {
    goto LABEL_15;
  }
  id v46 = v113;
  if (v30 == 0xD000000000000012 && v32 == 0x80000001007CC3C0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v47)
  {
LABEL_25:
    id v48 = [v46 objectIDs];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int v49 = v111 ^ 1;
    unint64_t v50 = swift_bridgeObjectRetain();
    Class v51 = (void *)sub_100547218(v50, v49);
    type metadata accessor for REMCDSavedReminder();
    id v52 = [objc_allocWithZone((Class)NSFetchRequest) init];
    a1 = [(id)swift_getObjCClassFromMetadata() entity];
    [v52 setEntity:a1];

    [v52 setAffectedStores:0];
    [v52 setPredicate:v51];

    [v52 setPropertiesToFetch:0];
    [v52 setRelationshipKeyPathsForPrefetching:0];
    unint64_t v53 = (unint64_t)v116;
    id v54 = v112;
    uint64_t v55 = NSManagedObjectContext.fetch<A>(_:)();
    id v56 = v114;
    if (v54)
    {

      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v57 = v55;
      swift_bridgeObjectRelease_n();

      id v58 = [v46 fetchOptions];
      a1 = (id)sub_10044BB38(v57, v58, v53);

      swift_bridgeObjectRelease();
    }
    return a1;
  }
  id v59 = v114;
  id v60 = [v114 entityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v61._countAndFlagsBits = 0xD00000000000001DLL;
  v61._object = (void *)0x80000001007C8B30;
  Swift::Bool v62 = String.hasPrefix(_:)(v61);
  swift_bridgeObjectRelease();
  if (v62)
  {
    id v63 = [v59 entityName];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v66 = v65;

    unint64_t v67 = String.count.getter();
    sub_10044B440(v67, v64, v66);
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    id v68 = v119;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v69 = v120;
    uint64_t v70 = v115;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v120 + 48))(v68, 1, v115) != 1)
    {
      a1 = v118;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 32))(v118, v68, v70);
      type metadata accessor for REMCDTemplate();
      uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      Class v88 = UUID._bridgeToObjectiveC()().super.isa;
      id v89 = [ObjCClassFromMetadata objectIDWithUUID:v88];

      uint64_t v90 = (objc_class *)sub_1003CF700();
      id v91 = [v89 uuid];
      id v92 = v117;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v93 = v112;
      id v119 = (unsigned char *)sub_1003CF89C(v92, (uint64_t)v116, v90);
      if (v93)
      {
        id v94 = *(void (**)(void *, uint64_t))(v120 + 8);
        v94(v92, v70);
        v94(a1, v70);

        swift_bridgeObjectRelease();
      }
      else
      {
        id v112 = v89;
        uint64_t v95 = v70;
        uint64_t v96 = v46;
        uint64_t v97 = *(void (**)(void *))(v120 + 8);
        uint64_t v98 = v95;
        v120 += 8;
        v97(v92);
        swift_bridgeObjectRelease();
        id v99 = [v96 objectIDs];
        uint64_t v100 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v101 = [v96 fetchOptions];
        uint64_t v102 = v119;
        a1 = sub_10044BFBC(v100, (uint64_t)v119, (uint64_t)v101);
        ((void (*)(unsigned char *, uint64_t))v97)(v118, v98);

        swift_bridgeObjectRelease();
      }

      return a1;
    }
    sub_1000966BC((uint64_t)v68, (uint64_t *)&unk_100909E50);
  }
  if (qword_1009075C0 != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  sub_10008E2DC(v71, (uint64_t)qword_100918E18);
  id v72 = v59;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = (uint8_t *)swift_slowAlloc();
    uint64_t v120 = swift_slowAlloc();
    uint64_t v121 = v120;
    *(_DWORD *)uint64_t v75 = 136446210;
    id v119 = v75 + 4;
    id v76 = [v72 entityName];
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v79 = v78;

    uint64_t v123 = sub_1000C51B8(v77, v79, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with unexpected entity name {entityName: %{public}s}", v75, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v80 = self;
  uint64_t v121 = 0;
  unint64_t v122 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  uint64_t v121 = 0xD000000000000024;
  unint64_t v122 = 0x80000001007D5130;
  id v81 = [v72 entityName];
  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v84 = v83;

  v85._countAndFlagsBits = v82;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._countAndFlagsBits = 125;
  v86._object = (void *)0xE100000000000000;
  String.append(_:)(v86);
  a1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v80 invalidParameterErrorWithDescription:a1];

  swift_willThrow();
  return a1;
}

id sub_100447DB0(void *a1)
{
  return sub_100446ECC(a1);
}

void sub_100447DD4(void (*a1)(uint64_t, void, uint64_t, id))
{
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = _s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v9 - 8);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  double v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [v1 predicateDescriptor:v10];
  uint64_t v14 = sub_100152158(a1, 0);

  if (v2) {
    return;
  }
  uint64_t v36 = v8;
  char v37 = a1;
  id v38 = (void *)v14;
  id v15 = [v4 sortDescriptors];
  if (!v15)
  {
    uint64_t v23 = 0;
    id v19 = v38;
    goto LABEL_18;
  }
  unint64_t v16 = v15;
  uint64_t v32 = v9;
  id v33 = v12;
  uint64_t v35 = v6;
  sub_1000963CC(0, (unint64_t *)&unk_100918E30);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v19 = v38;
  if (!v18)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v23 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_18:
    uint64_t v25 = (uint64_t)v36;
    uint64_t v24 = (uint64_t)v37;
LABEL_19:
    *(void *)uint64_t v25 = v19;
    *(unsigned char *)(v25 + 8) = 0;
    swift_storeEnumTagMultiPayload();
    id v26 = v19;
    uint64_t v27 = sub_10039E88C(v25, v23, v24, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
    if (v3)
    {
      sub_10044C734(v25, _s10PredicatesOMa);

      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      id v29 = [self defaultFetchOptions];
      sub_10044B6AC(v28, v29, v24);
      sub_10044C734(v25, _s10PredicatesOMa);
      swift_bridgeObjectRelease();
    }
    return;
  }
  while (1)
  {
    unint64_t v34 = v3;
    uint64_t v40 = (objc_class *)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v18 < 0) {
      break;
    }
    uint64_t v20 = 0;
    unint64_t v3 = v17 & 0xC000000000000001;
    while (v18 != v20)
    {
      if (v3) {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v21 = *(id *)(v17 + 8 * v20 + 32);
      }
      uint64_t v22 = v21;
      if ((unint64_t)[v21 type] >= 5) {
        goto LABEL_24;
      }
      ++v20;
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      swift_getKeyPath();
      [v22 ascending];
      NSSortDescriptor.init<A, B>(keyPath:ascending:)();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v18 == v20)
      {
        uint64_t v23 = v40;
        swift_bridgeObjectRelease();
        uint64_t v25 = (uint64_t)v36;
        uint64_t v24 = (uint64_t)v37;
        unint64_t v3 = v34;
        id v19 = v38;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v19 = v38;
    if (!v18) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_24:
  if (qword_100907590 != -1) {
    swift_once();
  }
  uint64_t v30 = v32;
  uint64_t v31 = sub_10008E2DC(v32, (uint64_t)qword_100918838);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v33, v31, v30);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_10052ECB8((uint64_t)"unknown type", 12, 2);
  __break(1u);
}

void sub_1004482BC(void (*a1)(uint64_t, void, uint64_t, id))
{
}

uint64_t sub_1004482E0(uint64_t a1)
{
  return sub_100448310(a1, (SEL *)&selRef_externalIdentifiers);
}

uint64_t sub_100448310(uint64_t a1, SEL *a2)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v8 = _s10PredicatesOMa(0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (uint64_t *)((char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = [v6 *a2 v9];
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = [v6 listObjectID];
  uint64_t *v11 = v13;
  v11[1] = (uint64_t)v14;
  swift_storeEnumTagMultiPayload();
  id v15 = [v6 listObjectID];
  unint64_t v16 = v15;
  if (v15)
  {
    id v17 = v15;
    uint64_t v18 = sub_100694D98(v17);
    if (v3)
    {
      id v19 = v17;
LABEL_5:

      goto LABEL_11;
    }
    id v19 = v18;
    uint64_t v5 = 0;
    uint64_t v20 = (void *)sub_100551480(v18, 0);

    if (!v20)
    {
      [self noSuchObjectErrorWithObjectID:v17];
      swift_willThrow();

      unint64_t v16 = v17;
      goto LABEL_5;
    }
  }
  if (qword_100907418 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_10039E88C((uint64_t)v11, (objc_class *)qword_1009421D8, a1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0);
  if (!v5)
  {
    unint64_t v23 = v21;

    id v24 = [self defaultFetchOptions];
    a1 = sub_10044B6AC(v23, v24, a1);
    sub_10044C734((uint64_t)v11, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

    return a1;
  }
LABEL_11:
  sub_10044C734((uint64_t)v11, _s10PredicatesOMa);

  return a1;
}

uint64_t sub_1004485C4(uint64_t a1)
{
  return sub_100448310(a1, (SEL *)&selRef_daCalendarItemUniqueIdentifiers);
}

id sub_1004485F4()
{
  id v2 = v1;
  uint64_t v3 = _s10PredicatesOMa(0);
  *(void *)&double v4 = __chkstk_darwin(v3).n128_u64[0];
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = [v0 listID:v4];
  v6[8] = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  uint64_t v10 = NSManagedObjectContext.count<A>(for:)();
  if (v1)
  {
    sub_10044C734((uint64_t)v6, _s10PredicatesOMa);
  }
  else
  {
    uint64_t v11 = v10;
    id v2 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v12 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v11];
    [v2 storeProperty:v12 forKey:REMRemindersDataViewFetchRemindersCountResultKey];

    sub_10044C734((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_100448824()
{
  return sub_1004485F4();
}

id sub_100448848()
{
  id v2 = v1;
  uint64_t v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(int *)(sub_100094134(&qword_100916980) + 64);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  *(void *)(v7 + 32) = [v0 parentReminderID];
  uint64_t v16 = v7;
  specialized Array._endMutation()();
  *uint64_t v5 = v16;
  _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v5 + v6) = 2;
  swift_storeEnumTagMultiPayload();
  id v8 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  uint64_t v11 = NSManagedObjectContext.count<A>(for:)();
  if (v1)
  {
    sub_10044C734((uint64_t)v5, _s10PredicatesOMa);
  }
  else
  {
    uint64_t v12 = v11;
    id v2 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v13 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v12];
    [v2 storeProperty:v13 forKey:REMRemindersDataViewFetchRemindersCountResultKey];

    sub_10044C734((uint64_t)v5, _s10PredicatesOMa);
  }
  return v2;
}

id sub_100448AE8()
{
  return sub_100448848();
}

id sub_100448B0C()
{
  id v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(int *)(sub_100094134(&qword_100916980) + 64);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10077A530;
  *(void *)(v8 + 32) = [v3 parentReminderID];
  uint64_t v35 = v8;
  specialized Array._endMutation()();
  *uint64_t v6 = v35;
  _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload();
  *((unsigned char *)v6 + v7) = [v3 includingConcealed];
  swift_storeEnumTagMultiPayload();
  id v9 = (void *)sub_10038F1F0();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v10 = &selRef_stringFromDate_;
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v9];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100776E40;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = 0x6574656C706D6F63;
  *(void *)(v13 + 40) = 0xE900000000000064;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setPropertiesToFetch:isa];

  unint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v16 = (char **)v1;
  if (v1)
  {
    sub_10044C734((uint64_t)v6, _s10PredicatesOMa);
  }
  else
  {
    unint64_t v17 = v15;
    if (v15 >> 62) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v18; uint64_t v18 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v31 = v16;
      uint64_t v32 = v6;
      id v19 = 0;
      int v20 = 0;
      int v30 = 0;
      unint64_t v21 = v17 & 0xC000000000000001;
      unint64_t v33 = v17 + 32;
      uint64_t v16 = &selRef_willSave;
      while (1)
      {
        int v34 = v20;
        if (v21) {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v22 = *(id *)(v33 + 8 * (void)v19);
        }
        unint64_t v23 = v22;
        uint64_t v6 = (uint64_t *)((char *)v19 + 1);
        if (__OFADD__(v19, 1)) {
          goto LABEL_27;
        }
        id v10 = (char **)[v22 completed];

        if (v10) {
          break;
        }
LABEL_7:
        int v20 = 1;
        id v19 = v6;
        if (v6 == (uint64_t *)v18)
        {
          swift_bridgeObjectRelease_n();
          if (v30) {
            uint64_t v18 = 3;
          }
          else {
            uint64_t v18 = 1;
          }
LABEL_23:
          uint64_t v6 = v32;
          id v10 = &selRef_stringFromDate_;
          goto LABEL_30;
        }
      }
      if (v6 == (uint64_t *)v18)
      {
LABEL_21:
        uint64_t v18 = 2;
        swift_bridgeObjectRelease_n();
        if (v34) {
          uint64_t v18 = 3;
        }
        goto LABEL_23;
      }
      id v10 = (char **)((char *)v19 + 5);
      while (1)
      {
        id v24 = v21
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v17 + 8 * (void)v10);
        uint64_t v25 = v24;
        uint64_t v6 = (uint64_t *)((char *)v10 - 3);
        if (__OFADD__((char *)v10 - 4, 1)) {
          break;
        }
        unsigned int v26 = [v24 completed];

        if (!v26)
        {
          int v30 = 1;
          goto LABEL_7;
        }
        id v10 = (char **)((char *)v10 + 1);
        if (v6 == (uint64_t *)v18) {
          goto LABEL_21;
        }
      }
LABEL_27:
      __break(1u);
LABEL_28:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
LABEL_30:
    id v2 = [objc_allocWithZone((Class)REMStoreInvocationResult) v10[499]];
    id v27 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v18];
    [v2 storeProperty:v27 forKey:REMRemindersDataViewFetchReminderSubtasksMasksResultKey];

    sub_10044C734((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_100448FC0()
{
  return sub_100448B0C();
}

Class sub_100448FE4(id a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8 - 8).n128_u64[0];
  id v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = _swiftEmptyArrayStorage;
  [v1 allowConcealedObjects:v10];
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v80[2] >= v80[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  id v13 = [v1 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v68 = v1;
  id v73 = a1;
  uint64_t v74 = v2;
  if (v15)
  {
    uint64_t v77 = _swiftEmptyArrayStorage;
    sub_1001DE118(0, v15 & ~(v15 >> 63), 0);
    if (v15 < 0)
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v75 = (void **)v15;
    uint64_t v16 = 0;
    unint64_t v17 = v77;
    unint64_t v18 = v14;
    unint64_t v19 = v14 & 0xC000000000000001;
    do
    {
      if (v19) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v18 + 8 * (void)v16 + 32);
      }
      unint64_t v21 = v20;
      id v22 = [v20 uuid:v68];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 0, 1, v23);

      uint64_t v77 = v17;
      unint64_t v25 = v17[2];
      unint64_t v24 = v17[3];
      if (v25 >= v24 >> 1)
      {
        sub_1001DE118(v24 > 1, v25 + 1, 1);
        unint64_t v17 = v77;
      }
      uint64_t v16 = (void **)((char *)v16 + 1);
      v17[2] = v25 + 1;
      sub_100096408((uint64_t)v12, (uint64_t)v17+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v25, (uint64_t *)&unk_100909E50);
    }
    while (v75 != v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v17 = _swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100776E80;
  uint64_t v27 = sub_10029F8F8();
  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v28;
  *(void *)(v26 + 88) = sub_100094134(&qword_1009169A8);
  *(void *)(v26 + 64) = v17;
  NSString v29 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = [self predicateWithFormat:v29 argumentArray:isa];
  swift_release();

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v80[2] >= v80[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v32 = v80;
  uint64_t v33 = swift_bridgeObjectRetain();
  int v34 = (void *)sub_1002F52FC(v33);
  uint64_t v35 = sub_1000963CC(0, &qword_100910230);
  a1 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v36 = [(id)swift_getObjCClassFromMetadata() entity];
  [a1 setEntity:v36];

  [a1 setAffectedStores:0];
  [a1 setPredicate:v34];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  uint64_t v77 = (void *)inited;
  specialized Array._endMutation()();
  unint64_t v38 = (unint64_t)v77;
  unint64_t v79 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 2, 0);
  uint64_t v39 = v79;
  uint64_t v75 = (void **)v35;
  uint64_t KeyPath = (uint64_t)v32;
  if ((v38 & 0xC000000000000001) != 0)
  {
    uint64_t v40 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v40 = *(void *)(v38 + 32);
    swift_retain();
  }
  uint64_t v41 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v42)
  {
    uint64_t v43 = v41;
    uint64_t v44 = v42;
    swift_release();
    unint64_t v46 = v39[2];
    unint64_t v45 = v39[3];
    if (v46 >= v45 >> 1)
    {
      sub_1001DE058(v45 > 1, v46 + 1, 1);
      uint64_t v39 = v79;
    }
    _OWORD v39[2] = v46 + 1;
    char v47 = &v39[2 * v46];
    v47[4] = v43;
    v47[5] = v44;
    if ((v38 & 0xC000000000000001) != 0)
    {
      uint64_t v40 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v40 = *(void *)(v38 + 40);
      swift_retain();
    }
    uint64_t v48 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v49)
    {
      uint64_t v50 = v48;
      uint64_t v51 = v49;
      swift_release();
      unint64_t v79 = v39;
      unint64_t v53 = v39[2];
      unint64_t v52 = v39[3];
      if (v53 >= v52 >> 1)
      {
        sub_1001DE058(v52 > 1, v53 + 1, 1);
        uint64_t v39 = v79;
      }
      _OWORD v39[2] = v53 + 1;
      id v54 = &v39[2 * v53];
      v54[4] = v50;
      v54[5] = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [a1 setRelationshipKeyPathsForPrefetching:v55.super.isa];

      uint64_t v56 = v74;
      uint64_t v57 = NSManagedObjectContext.fetch<A>(_:)();
      uint64_t v4 = v56;
      if (v56)
      {

        return v55.super.isa;
      }
      uint64_t v3 = (void *)v57;
      if (qword_1009075C0 == -1)
      {
LABEL_33:
        uint64_t v58 = v71;
        uint64_t v59 = sub_10008E2DC(v71, (uint64_t)qword_100918E18);
        uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v59, v58);
        uint64_t v75 = &v68;
        __chkstk_darwin(v60);
        uint64_t v77 = v3;
        __chkstk_darwin(v61);
        sub_100094134(&qword_100911540);
        sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
        sub_1000BFEAC(&qword_100911548, &qword_100911540);
        uint64_t v62 = Sequence.map<A>(skippingError:_:)();
        if (v4)
        {
          swift_errorRelease();
          id v63 = _swiftEmptyArrayStorage;
        }
        else
        {
          id v63 = (void *)v62;
        }
        (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
        swift_bridgeObjectRelease();
        sub_1001273E8((unint64_t)v63);
        swift_bridgeObjectRelease();
        id v64 = objc_allocWithZone((Class)REMAssignmentsDataViewInvocationResult);
        sub_1000ED098(&qword_10090A410, (unint64_t *)&unk_10090FFF0);
        Class v65 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v55.super.Class isa = (Class)[v64 initWithAssignments:v65];

        return v55.super.isa;
      }
LABEL_40:
      swift_once();
      goto LABEL_33;
    }
  }
  uint64_t v77 = 0;
  unint64_t v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v67._object = (void *)0x80000001007CAF70;
  v67._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v67);
  uint64_t v76 = v40;
  sub_100094134((uint64_t *)&unk_100914680);
  _print_unlocked<A, B>(_:_:)();
  Class result = (Class)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1004499E8(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001248EC(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setIdentifier:isa];
}

void sub_100449B14(id *a1@<X0>, void *a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t v48 = a3;
  id v51 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v50 = (char *)&v47 - v16;
  unint64_t v17 = *a1;
  id v18 = [*a1 account:v15];
  if (!v18
    || (unint64_t v19 = v18,
        id v20 = [v18 remObjectID],
        v19,
        (id v47 = v20) == 0))
  {
    unint64_t v24 = self;
    sub_1000963CC(0, &qword_100910230);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v26 = String._bridgeToObjectiveC()();
    [v24 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v26];

    swift_willThrow();
    return;
  }
  if ([v51 allowConcealedObjects])
  {
    id v21 = [v17 owningReminderIdentifier];
    uint64_t v22 = v11;
    if (v21)
    {
      uint64_t v23 = v21;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, 1, 1, v10);
    }
    id v31 = v47;
    sub_100096408((uint64_t)v6, (uint64_t)v9, (uint64_t *)&unk_100909E50);
  }
  else
  {
    id v27 = [v17 reminder];
    if (!v27
      || (uint64_t v28 = v27, v29 = [v27 remObjectID], v28, !v29))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      id v31 = v47;
LABEL_14:
      sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
      uint64_t v33 = self;
      sub_1000963CC(0, &qword_100910230);
      uint64_t v34 = swift_getObjCClassFromMetadata();
      NSString v35 = String._bridgeToObjectiveC()();
      [v33 unexpectedNilPropertyWithClass:v34 property:v35];

      swift_willThrow();
      return;
    }
    id v30 = [v29 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v11;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    id v31 = v47;
  }
  uint64_t v32 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v10) == 1) {
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v32, v9, v10);
  id v36 = self;
  uint64_t v37 = v22;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v39 = [v36 objectIDWithUUID:isa];

  id v40 = v31;
  id v41 = v39;
  id v42 = v51;
  LODWORD(v39) = [v51 allowConcealedObjects];
  int v43 = [v42 allowConcealedObjects];
  uint64_t v44 = v49;
  unint64_t v45 = sub_1002A0C4C(v17, (int)v39, v43);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v10);
  }
  else
  {
    unint64_t v46 = v45;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v10);

    *uint64_t v48 = v46;
  }
}

Class sub_10044A080(void *a1)
{
  return sub_100448FE4(a1);
}

Class sub_10044A0A4(uint64_t a1)
{
  uint64_t v63 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  uint64_t v58 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void **)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4 - 8).n128_u64[0];
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = _swiftEmptyArrayStorage;
  [v1 allowConcealedObjects:v6];
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v69[2] >= v69[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v57 = v1;
  id v10 = [v1 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_15;
  }
LABEL_5:
  unint64_t v66 = _swiftEmptyArrayStorage;
  sub_1001DE118(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v62 = KeyPath;
  uint64_t v13 = 0;
  uint64_t v14 = v66;
  do
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v11 + 8 * v13 + 32);
    }
    uint64_t v16 = v15;
    id v17 = [v15 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 0, 1, v18);

    unint64_t v66 = v14;
    unint64_t v20 = v14[2];
    unint64_t v19 = v14[3];
    if (v20 >= v19 >> 1)
    {
      sub_1001DE118(v19 > 1, v20 + 1, 1);
      uint64_t v14 = v66;
    }
    ++v13;
    v14[2] = v20 + 1;
    sub_100096408((uint64_t)v8, (uint64_t)v14+ ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80))+ v5[9] * v20, (uint64_t *)&unk_100909E50);
  }
  while (v12 != v13);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = v62;
LABEL_16:
  sub_10039F564(KeyPath, (uint64_t)v14);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v69[2] >= v69[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v21 = v69;
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_1002F52FC(v22);
  uint64_t v24 = sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  uint64_t v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v25 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v25];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v23];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  unint64_t v66 = (void *)inited;
  specialized Array._endMutation()();
  unint64_t v27 = (unint64_t)v66;
  id v68 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 2, 0);
  uint64_t v28 = v68;
  uint64_t v61 = v21;
  uint64_t v62 = v24;
  if ((v27 & 0xC000000000000001) != 0)
  {
    uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v29 = *(void *)(v27 + 32);
    swift_retain();
  }
  uint64_t v30 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v31)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v31;
    swift_release();
    unint64_t v35 = v28[2];
    unint64_t v34 = v28[3];
    if (v35 >= v34 >> 1)
    {
      sub_1001DE058(v34 > 1, v35 + 1, 1);
      uint64_t v28 = v68;
    }
    v28[2] = v35 + 1;
    id v36 = &v28[2 * v35];
    v36[4] = v32;
    v36[5] = v33;
    if ((v27 & 0xC000000000000001) != 0)
    {
      uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v29 = *(void *)(v27 + 40);
      swift_retain();
    }
    uint64_t v37 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v38)
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      swift_release();
      id v68 = v28;
      unint64_t v42 = v28[2];
      unint64_t v41 = v28[3];
      if (v42 >= v41 >> 1)
      {
        sub_1001DE058(v41 > 1, v42 + 1, 1);
        uint64_t v28 = v68;
      }
      v28[2] = v42 + 1;
      int v43 = &v28[2 * v42];
      v43[4] = v39;
      v43[5] = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v44.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v5 setRelationshipKeyPathsForPrefetching:v44.super.isa];

      unint64_t v45 = v64;
      uint64_t v46 = NSManagedObjectContext.fetch<A>(_:)();
      unint64_t v11 = (unint64_t)v45;
      if (v45)
      {

        return v44.super.isa;
      }
      uint64_t v12 = v46;
      if (qword_1009075C0 == -1)
      {
LABEL_33:
        uint64_t v47 = v60;
        uint64_t v48 = sub_10008E2DC(v60, (uint64_t)qword_100918E18);
        uint64_t v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v48, v47);
        id v64 = &v57;
        __chkstk_darwin(v49);
        unint64_t v66 = (void *)v12;
        __chkstk_darwin(v50);
        sub_100094134(&qword_10090DCA0);
        sub_1000963CC(0, &qword_10090DC80);
        sub_1000BFEAC((unint64_t *)&unk_10090DCA8, &qword_10090DCA0);
        uint64_t v51 = Sequence.map<A>(skippingError:_:)();
        if (v11)
        {
          swift_errorRelease();
          unint64_t v52 = _swiftEmptyArrayStorage;
        }
        else
        {
          unint64_t v52 = (void *)v51;
        }
        (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
        swift_bridgeObjectRelease();
        sub_100127418((unint64_t)v52);
        swift_bridgeObjectRelease();
        id v53 = objc_allocWithZone((Class)REMHashtagsDataViewInvocationResult);
        sub_1000ED098((unint64_t *)&qword_10090B7C0, &qword_10090DC80);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v44.super.Class isa = (Class)[v53 initWithHashtags:isa];

        return v44.super.isa;
      }
LABEL_39:
      swift_once();
      goto LABEL_33;
    }
  }
  unint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v56._object = (void *)0x80000001007CAF70;
  v56._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v56);
  uint64_t v65 = v29;
  sub_100094134(&qword_10090DC60);
  _print_unlocked<A, B>(_:_:)();
  Class result = (Class)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10044A9E0(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)&double v9 = __chkstk_darwin(v7).n128_u64[0];
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *a1;
  id v13 = [*a1 account:v9];
  if (v13
    && (uint64_t v14 = v13, v15 = [v13 remObjectID], v14, v15))
  {
    sub_10044AC7C((char)[a2 allowConcealedObjects], (uint64_t)v11);
    if (v3)
    {
    }
    else
    {
      NSString v26 = a3;
      unint64_t v19 = self;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v21 = [v19 objectIDWithUUID:isa];

      id v22 = v15;
      id v23 = v21;
      id v24 = sub_10034DE14(v12, (char)[a2 allowConcealedObjects]);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

      *NSString v26 = v24;
    }
  }
  else
  {
    uint64_t v16 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v18 = String._bridgeToObjectiveC()();
    [v16 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v18];

    swift_willThrow();
  }
}

uint64_t sub_10044AC7C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v16 = (char *)v30 - v15;
  if (a1 & 1) != 0 && (objc_msgSend(v3, "markedForDeletion", v14)) {
    goto LABEL_5;
  }
  id v17 = [v3 sharedToMeReminderCKIdentifier:v14];
  if (v17)
  {

LABEL_5:
    id v18 = [v3 reminderIdentifier];
    if (v18)
    {
      unint64_t v19 = v18;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v20(v16, v9, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) != 1) {
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(a2, v16, v6);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v16, 1, 1, v6);
    }
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
    unint64_t v27 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    goto LABEL_16;
  }
  id v22 = [v3 reminder];
  if (v22
    && (id v23 = v22, v24 = [v22 remObjectID], v23, v24))
  {
    id v25 = [v24 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v26(v12, v9, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(a2, v12, v6);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
  unint64_t v27 = self;
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
LABEL_16:
  NSString v29 = String._bridgeToObjectiveC()();
  [v27 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v29];

  return swift_willThrow();
}

Class sub_10044B0B0(uint64_t a1)
{
  return sub_10044A0A4(a1);
}

void sub_10044B0D4(void **a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, char **a4@<X8>)
{
  uint64_t v8 = *a1;
  double v9 = sub_10024D600(*a1);
  if (!v4)
  {
    uint64_t v10 = v9;
    if ([a2 includeDueDateDeltaAlerts])
    {
      int v11 = [a2 includeConcealed];
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10077A530;
      *(void *)(inited + 32) = v8;
      unint64_t v16 = inited;
      specialized Array._endMutation()();
      id v13 = v8;
      unint64_t v14 = sub_1001BBCE0(v16, v11, a3);
      swift_bridgeObjectRelease();
      sub_1002B123C(v14);
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&unk_100920C30);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v10 setFetchedDueDateDeltaAlerts:isa];
    }
    *a4 = v10;
  }
}

void sub_10044B238(void *a1, void **a2, uint64_t a3, void *a4, void *a5)
{
  double v9 = *a2;
  int v11 = (char *)[a4 objectID];
  id v12 = sub_1000D1368(v9, v11, a5);
  if (v5)
  {
  }
  else
  {
    id v13 = v12;

    id v14 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v15 = [v14 parentReminderID];
    if (v15)
    {
      unint64_t v16 = v15;
      id v17 = (char *)[a4 objectID];
      id v18 = sub_1000D1368(v16, v17, a5);

      id v19 = v18;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
}

uint64_t sub_10044B428()
{
  return sub_1003E8734();
}

uint64_t sub_10044B434()
{
  return sub_1003E9A4C();
}

unint64_t sub_10044B440(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  Class result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    Class result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t sub_10044B4F0(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v21 = v2;
    unint64_t v22 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
      char v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = v3;
      id v9 = [v5 entityName];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      id v13 = [a2 entityName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      BOOL v17 = v10 == v14 && v12 == v16;
      if (v17)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = 1;
          goto LABEL_20;
        }
      }
      ++v4;
      uint64_t v3 = v8;
      BOOL v17 = v7 == v8;
      unint64_t v2 = v21;
      if (v17)
      {
        uint64_t v19 = 0;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_10044B6AC(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009075C0 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10008E2DC(v6, (uint64_t)qword_100918E18);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  unint64_t v34 = &v32;
  __chkstk_darwin(v11);
  id v36 = a2;
  uint64_t v37 = a3;
  *(&v32 - 2) = (uint64_t)a2;
  *(&v32 - 1) = a3;
  unint64_t v33 = a1;
  uint64_t v38 = (void *)a1;
  __chkstk_darwin(v12);
  *(&v32 - 2) = (uint64_t)v9;
  sub_100094134(&qword_10090D750);
  uint64_t v13 = sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC((unint64_t *)&qword_10090FD80, &qword_10090D750);
  uint64_t v32 = v13;
  uint64_t v14 = v35;
  uint64_t v15 = Sequence.map<A>(skippingError:_:)();
  if (v14)
  {
    swift_errorRelease();
    unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v16 = v15;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  char v18 = v36;
  uint64_t v17 = v37;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v16 + 8 * v21 + 32);
      }
      id v23 = v22;
      ++v21;
      id v24 = [v22 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v19 != v21);
    char v18 = v36;
    uint64_t v17 = v37;
LABEL_16:
    sub_10039D0B0(v33, v18, v17);
    uint64_t v38 = v25;
    sub_100202F18(v16);
    id v26 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    Class v28 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class v30 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = [v26 initWithAccountStorages:isa listStorages:v28 reminderStorages:v29 objectIDs:v30];

    return (uint64_t)v31;
  }
  __break(1u);
  return result;
}

uint64_t sub_10044BB38(unint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v32 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMSavedReminderStorageCDIngestor();
  uint64_t inited = (id *)swift_initStackObject();
  inited[2] = a2;
  uint64_t v10 = qword_1009075C0;
  id v30 = a2;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10008E2DC(v5, (uint64_t)qword_100918E18);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
  unint64_t v31 = a1;
  unint64_t v34 = (void *)a1;
  __chkstk_darwin(v12);
  *(&v29 - 2) = (uint64_t)v8;
  sub_100094134(&qword_100921B80);
  uint64_t v13 = sub_1000963CC(0, &qword_1009100F8);
  sub_1000BFEAC(&qword_10090FD70, &qword_100921B80);
  uint64_t v29 = v13;
  uint64_t v14 = v33;
  uint64_t v15 = Sequence.map<A>(skippingError:_:)();
  if (v14)
  {
    swift_errorRelease();
    unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v16 = v15;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v17) {
    goto LABEL_16;
  }
  unint64_t v34 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v17 & 0x8000000000000000) == 0)
  {
    unint64_t v33 = inited;
    uint64_t v19 = 0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v16 + 8 * v19 + 32);
      }
      uint64_t v21 = v20;
      ++v19;
      id v22 = [v20 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v17 != v19);
    uint64_t inited = v33;
LABEL_16:
    sub_100548084(v31, v30, v32);
    unint64_t v34 = v23;
    sub_100202F18(v16);
    unint64_t v33 = (id *)objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    Class v25 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v26 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v28 = [v33 initWithAccountStorages:isa listStorages:v25 reminderStorages:v26 objectIDs:v27];

    swift_setDeallocating();
    return (uint64_t)v28;
  }
  __break(1u);
  return result;
}

id sub_10044BFBC(id a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDPublicTemplate();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100907B10 != -1) {
    swift_once();
  }
  id v9 = swift_retain();
  id v10 = sub_10034A86C(v9);
  swift_release();
  if (v10)
  {
    id v11 = sub_10028AA2C(v10);
    if (v3)
    {
    }
    else
    {
      uint64_t v12 = v11;
      id v13 = [v11 objectID:sub_10062D57C(v8)];
      id v14 = sub_1000D114C(v13);

      __chkstk_darwin(v15);
      *(&v24 - 4) = (uint64_t)v8;
      *(&v24 - 3) = (uint64_t)v12;
      *(&v24 - 2) = a3;
      Class v27 = sub_1002B1630(_swiftEmptyArrayStorage, (void (*)(void **, id *))sub_10044C60C, (uint64_t)(&v24 - 6), (unint64_t)a1);
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v17 = swift_allocObject();
      long long v26 = xmmword_10077A530;
      *(_OWORD *)(v17 + 16) = xmmword_10077A530;
      *(void *)(v17 + 32) = v12;
      uint64_t v28 = v17;
      specialized Array._endMutation()();
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v26;
      *(void *)(v18 + 32) = v14;
      uint64_t v28 = v18;
      specialized Array._endMutation()();
      id v25 = objc_allocWithZone((Class)REMRemindersDataViewInvocationResult);
      sub_1000963CC(0, &qword_100910180);
      *(void *)&long long v26 = v12;
      id v19 = v14;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      Class v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, &qword_1009100F8);
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      Class v23 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      a1 = [v25 initWithAccountStorages:isa listStorages:v21 reminderStorages:v22 objectIDs:v23];

      sub_10044C734((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RDPublicTemplate);
    }
  }
  else
  {
    [self noPrimaryActiveCloudKitAccountError];
    swift_willThrow();
  }
  return a1;
}

void sub_10044C3A0(void **a1@<X0>, char **a2@<X8>)
{
  sub_10044B0D4(a1, *(void **)(v2 + 16), *(unsigned __int8 **)(v2 + 24), a2);
}

uint64_t sub_10044C3BC()
{
  return sub_1003E8734();
}

uint64_t sub_10044C3C8(uint64_t a1, unint64_t a2)
{
  return sub_10044C3F8(a1, a2, (void (*)(void))type metadata accessor for DueDateVerifiableAlarm);
}

uint64_t sub_10044C3E0(uint64_t a1, unint64_t a2)
{
  return sub_10044C3F8(a1, a2, (void (*)(void))type metadata accessor for DueDateNonVerifiableAlarm);
}

uint64_t sub_10044C3F8(uint64_t result, unint64_t a2, void (*a3)(void))
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = a3;
    unint64_t v3 = a2;
    uint64_t v4 = result;
    unint64_t v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v7 >= v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 < 0) {
    uint64_t v8 = v4;
  }
  if (v4) {
    Swift::Int v9 = v8;
  }
  else {
    Swift::Int v9 = 0;
  }
  if (v7 < v9)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9) {
    goto LABEL_34;
  }
  if (v9 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v7) {
    goto LABEL_36;
  }
  if ((v3 & 0xC000000000000001) != 0 && v9 != v7)
  {
    if (v9 < (unint64_t)v7)
    {
      v5(0);
      Swift::Int v12 = v9;
      do
      {
        Swift::Int v13 = v12 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v12);
        Swift::Int v12 = v13;
      }
      while (v7 != v13);
      goto LABEL_27;
    }
LABEL_37:
    __break(1u);
    return result;
  }
LABEL_27:
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v14;
}

char *sub_10044C5D0@<X0>(void **a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_1004F972C(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10044C600()
{
  return sub_1003E9A4C();
}

void sub_10044C60C(void *a1, void **a2)
{
  sub_10044B238(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

void sub_10044C644(id *a1@<X0>, void *a2@<X8>)
{
  sub_10044A9E0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10044C660()
{
  return sub_10024B9D8();
}

void sub_10044C680(id *a1@<X0>, NSObject **a2@<X8>)
{
  sub_100449B14(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10044C69C()
{
  return sub_1003EAF5C();
}

uint64_t sub_10044C6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesO19CompletionPredicateOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10044C734(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10044C798()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918E40);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918E40);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  *(void *)&v8[0] = 0xD00000000000003ALL;
  *((void *)&v8[0] + 1) = 0x800000010078D160;
  id v4 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000F5B8C((uint64_t)v9);
LABEL_9:
    sub_10044CA74(_.super.isa, metadata.super.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD00000000000003ALL;
    v9[1] = 0x800000010078D160;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

void sub_10044CA74(void *a1, void *a2)
{
  uint64_t v3 = v2;
  if (qword_1009075C8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_100918E40);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    id v11 = sub_1002ECF34();
    *(void *)&v37[0] = sub_1000C51B8((uint64_t)v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnsetCKDirtyFlagsInNonCKAccounts BEGIN {store: %{public}s}", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *(void *)&v37[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v37[0] + 1) = v13;
  swift_bridgeObjectRetain();
  id v14 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v37, 0, sizeof(v37));
  }
  sub_1000D6CBC((uint64_t)v37, (uint64_t)aBlock);
  if (!v32)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1000F5B8C((uint64_t)aBlock);
    goto LABEL_15;
  }
  if (swift_dynamicCast())
  {
    uint64_t v15 = v35;
    uint64_t v16 = v36;
    swift_bridgeObjectRelease();
    id v17 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
    id v18 = [v7 persistentStoreCoordinator];
    [v17 setPersistentStoreCoordinator:v18];

    [v17 setTransactionAuthor:RDStoreControllerUnsetCKDirtyFlagsInNonCKAccountsMigrationAuthor];
    id v19 = (void *)swift_allocObject();
    void v19[2] = v3;
    v19[3] = v7;
    void v19[4] = v17;
    v19[5] = v15;
    v19[6] = v16;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_10044D744;
    *(void *)(v20 + 24) = v19;
    unint64_t v33 = sub_10008F6F4;
    uint64_t v34 = v20;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003B3260;
    unint64_t v32 = &unk_1008C6820;
    Class v21 = _Block_copy(aBlock);
    id v22 = v7;
    id v23 = v3;
    id v24 = v17;
    swift_retain();
    swift_release();
    [v24 performBlockAndWait:v21];

    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v21 & 1) == 0) {
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  id v25 = v7;
  long long v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136446210;
    id v29 = sub_1002ECF34();
    *(void *)&v37[0] = sub_1000C51B8((uint64_t)v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} accountIdentifier is nil, skip migration", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10044CFE4(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5)
{
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  if (v24[0])
  {
    if (qword_1009075C8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100918E40);
    id v10 = a2;
    swift_bridgeObjectRetain_n();
    id v11 = v10;
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      id v15 = sub_1002ECF34();
      sub_1000C51B8((uint64_t)v15, v16, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a4, a5, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} with {account: %s} is not a CK account, skip migration", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
LABEL_10:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_10044D77C(a3, a2);
    if (qword_1009075C8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_100918E40);
    id v18 = a2;
    swift_bridgeObjectRetain_n();
    id v19 = v18;
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446722;
      id v22 = sub_1002ECF34();
      sub_1000C51B8((uint64_t)v22, v23, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a4, a5, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v20, "UnsetCKDirtyFlagsInNonCKAccounts END {store: %{public}s, migrated ckDirtyFlagsInNonCKAccounts, accountIdentifier = %s, count = %ld}", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      goto LABEL_10;
    }

    swift_bridgeObjectRelease_n();
  }
}

id RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts();
  return [super init];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts()
{
  return self;
}

id RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts();
  return [super dealloc];
}

uint64_t sub_10044D6F4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10044D744()
{
  sub_10044CFE4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10044D754()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10044D764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10044D774()
{
  return swift_release();
}

char *sub_10044D77C(void *a1, void *a2)
{
  id v3 = [self subclassesOfREMCDObjectRepresentingRootCoreDataEntities];
  sub_100094134(&qword_100917C30);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = *(void *)(v4 + 16);
  if (v32)
  {
    id v5 = 0;
    uint64_t v6 = 0;
    for (uint64_t i = &stru_1008F6000; ; uint64_t i = &stru_1008F6000)
    {
      uint64_t v35 = v6;
      uint64_t v36 = v5;
      uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      if (([ObjCClassFromMetadata respondsToSelector:i[164].name] & 1) == 0) {
        goto LABEL_17;
      }
      id v9 = [ObjCClassFromMetadata i[164].name];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v10 = objc_allocWithZone((Class)NSBatchUpdateRequest);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v10 initWithEntityName:v11];

      sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_100776E80;
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 64) = sub_1000C5B38();
      strcpy((char *)(v13 + 32), "ckDirtyFlags");
      *(unsigned char *)(v13 + 45) = 0;
      *(_WORD *)(v13 + 46) = -5120;
      uint64_t v14 = sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      *(void *)(v13 + 96) = v14;
      *(void *)(v13 + 104) = sub_10044DD40();
      *(void *)(v13 + 72) = isa;
      unint64_t v16 = NSPredicate.init(format:_:)();
      [v12 setPredicate:v16];

      sub_100094134(&qword_10090AF50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      strcpy((char *)&v39, "ckDirtyFlags");
      BYTE13(v39) = 0;
      HIWORD(v39) = -5120;
      AnyHashable.init<A>(_:)();
      v18.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      *(void *)(inited + 96) = v14;
      *(NSNumber *)(inited + 72) = v18;
      sub_1002EE418(inited);
      Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v12 setPropertiesToUpdate:v19];

      [v12 setIncludesSubentities:1];
      [v12 setResultType:2];
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = a2;
      *(void *)&long long v39 = v20;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      id v5 = (char *)v12;
      id v21 = a2;
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v5 setAffectedStores:v22];

      id v37 = 0;
      id v23 = [a1 executeRequest:v5 error:&v37];
      id v24 = v37;
      if (!v23)
      {
        id v30 = v37;
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return v5;
      }
      id v25 = v23;
      *((void *)&v40 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
      *(void *)&long long v39 = v25;
      sub_1000963CC(0, &qword_1009133F0);
      id v26 = v24;
      throwingCast<A>(_:as:failureMessage:)();
      if (v2) {
        break;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v39);
      id v27 = v38;
      if ([v38 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v39 = 0u;
        long long v40 = 0u;
      }
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000F5B8C((uint64_t)&v39);
      id v28 = v38;
      id v29 = (char *)[v38 integerValue];

      id v5 = &v29[(void)v36];
      if (__OFADD__(v36, v29))
      {
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t v6 = v35 + 1;
      if (v32 == v35 + 1)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }

    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v39);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v5;
}

unint64_t sub_10044DD40()
{
  unint64_t result = qword_100918E80;
  if (!qword_100918E80)
  {
    sub_1000963CC(255, (unint64_t *)&qword_100909FB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100918E80);
  }
  return result;
}

uint64_t sub_10044DDA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918E88);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918E88);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10044DE70()
{
  uint64_t v1 = *v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 fileExistsAtPath:v2];

  return v3;
}

id sub_10044DEB8(uint64_t a1, char a2, objc_class *a3)
{
  return sub_10044DEDC(a1, a2, a3);
}

id sub_10044DEDC(uint64_t a1, char a2, Class isa)
{
  uint64_t v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v8 = v7;
  if (isa)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_10044EE60(&qword_100908410, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  id v12 = 0;
  unsigned int v9 = [v4 createDirectoryAtURL:v8 withIntermediateDirectories:a2 & 1 attributes:isa error:&v12];

  if (v9) {
    return v12;
  }
  id v11 = v12;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id sub_10044E020(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class a5)
{
  uint64_t v8 = *v5;
  NSString v9 = String._bridgeToObjectiveC()();
  if (a4 >> 60 == 15)
  {
    Class isa = 0;
    if (!a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
LABEL_5:
    type metadata accessor for FileAttributeKey(0);
    sub_10044EE60(&qword_100908410, type metadata accessor for FileAttributeKey);
    a5 = Dictionary._bridgeToObjectiveC()().super.isa;
  }
LABEL_6:
  id v11 = [v8 createFileAtPath:v9 contents:isa attributes:a5];

  return v11;
}

uint64_t sub_10044E120()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __n128 v9 = __chkstk_darwin(v8);
  id v11 = (char *)&v33 - v10;
  v38[0] = 0x73656C6946;
  v38[1] = 0xE500000000000000;
  (*(void (**)(char *, void, uint64_t, __n128))(v3 + 104))(v5, enum case for URL.DirectoryHint.isDirectory(_:), v2, v9);
  sub_1000E4FD8();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24);
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_1000C0DE0(v13, v13[3]);
  (*(void (**)(char *, uint64_t, void, uint64_t, uint64_t))(v15 + 16))(v12, 1, 0, v14, v15);
  uint64_t v16 = sub_10044EA10();
  unint64_t v18 = v17;
  uint64_t v19 = v13[3];
  uint64_t v20 = v13[4];
  sub_1000C0DE0(v13, v19);
  if ((*(uint64_t (**)(uint64_t, unint64_t, void, unint64_t, void, uint64_t, uint64_t))(v20 + 24))(v16, v18, 0, 0xF000000000000000, 0, v19, v20))
  {
    if (qword_1009075D0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_100918E88);
    swift_retain_n();
    swift_bridgeObjectRetain();
    Class v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v35 = v6;
      uint64_t v36 = v12;
      uint64_t v25 = v7;
      uint64_t v34 = v16;
      uint64_t v27 = *(void *)(v1 + 16);
      unint64_t v26 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1000C51B8(v27, v26, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1000C51B8(v34, v18, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      id v28 = "[%{public}s] Created sentinel file at %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v28, (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v36, v35);
    }
  }
  else
  {
    if (qword_1009075D0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100918E88);
    swift_retain_n();
    swift_bridgeObjectRetain();
    Class v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v34 = v16;
      uint64_t v35 = v6;
      uint64_t v36 = v12;
      uint64_t v25 = v7;
      uint64_t v30 = *(void *)(v1 + 16);
      unint64_t v31 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1000C51B8(v30, v31, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1000C51B8(v34, v18, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      id v28 = "[%{public}s] Cannot create sentinel file at %s";
      goto LABEL_10;
    }
  }
  swift_release_n();
  swift_bridgeObjectRelease_n();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t sub_10044EA10()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  __n128 v9 = (char *)&v17 - v8;
  uint64_t v21 = 0x73656C6946;
  unint64_t v22 = 0xE500000000000000;
  uint64_t v10 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v10(v3, enum case for URL.DirectoryHint.isDirectory(_:), v0);
  sub_1000E4FD8();
  URL.appending<A>(path:directoryHint:)();
  id v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v3, v0);
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v18 + 24);
  uint64_t v21 = *(void *)(v18 + 16);
  unint64_t v22 = v12;
  v10(v3, enum case for URL.DirectoryHint.notDirectory(_:), v0);
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)();
  v11(v3, v0);
  swift_bridgeObjectRelease();
  uint64_t v13 = v20;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v19 + 8);
  v14(v7, v20);
  uint64_t countAndFlagsBits = URL.path(percentEncoded:)(0)._countAndFlagsBits;
  v14(v9, v13);
  return countAndFlagsBits;
}

uint64_t sub_10044ECB0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);

  return swift_deallocClassInstance();
}

uint64_t sub_10044ED68()
{
  return type metadata accessor for RDSentinelFileLocation();
}

uint64_t type metadata accessor for RDSentinelFileLocation()
{
  uint64_t result = qword_100918ED8;
  if (!qword_100918ED8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10044EDBC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10044EE60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10044EEA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100918F98);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100918F98);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10044EF70(void *a1)
{
  uint64_t v2 = (char *)v1;
  id v166 = *v1;
  uint64_t v172 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v172);
  uint64_t v174 = &v159[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  unint64_t v175 = *(NSObject **)(Subtasks - 8);
  uint64_t v176 = (void *)Subtasks;
  __chkstk_darwin(Subtasks);
  uint64_t v173 = (void (*)(id, uint64_t))&v159[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v159[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v164 = &v159[-v12];
  __chkstk_darwin(v13);
  long long v167 = &v159[-v14];
  __chkstk_darwin(v15);
  uint64_t v17 = &v159[-v16];
  __chkstk_darwin(v18);
  uint64_t v20 = &v159[-v19];
  if (qword_1009075D8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_10008E2DC(v21, (uint64_t)qword_100918F98);
  swift_retain_n();
  uint64_t v169 = v22;
  os_log_type_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  id v179 = v20;
  uint64_t v165 = v10;
  uint64_t v168 = v17;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v178 = a1;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v177 = v7;
    uint64_t v29 = (void *)v28;
    *(_DWORD *)uint64_t v27 = 138543874;
    uint64_t v30 = v2;
    unint64_t v31 = (void *)*((void *)v2 + 3);
    uint64_t v182 = (uint64_t)v31;
    uint64_t v171 = v8;
    id v32 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v31;
    swift_release_n();
    *(_WORD *)(v27 + 12) = 2114;
    uint64_t v33 = (void *)*((void *)v30 + 4);
    uint64_t v182 = (uint64_t)v33;
    id v34 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v33;
    uint64_t v2 = v30;
    swift_release_n();
    *(_WORD *)(v27 + 22) = 2048;
    swift_release();
    uint64_t v182 = 50;
    uint64_t v35 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v27, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v36 = v177;
    swift_slowDealloc();
    uint64_t v37 = v178;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v36 = v7;
    uint64_t v35 = v8;

    swift_release_n();
    uint64_t v37 = a1;
  }
  Date.init()();
  id v38 = (void *)*((void *)v2 + 3);
  long long v40 = (void (**)(uint64_t, uint64_t))v175;
  uint64_t v39 = (uint64_t)v176;
  uint64_t v41 = (uint64_t)v173;
  ((void (*)(void (*)(id, uint64_t), void, void *))v175[13].isa)(v173, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v176);
  id v42 = v174;
  swift_storeEnumTagMultiPayload();
  uint64_t v43 = v180;
  NSArray v44 = sub_1001F62F0((unint64_t)v38, (uint64_t)v37, v41, v42);
  uint64_t v180 = v43;
  if (v43)
  {
    sub_100452DFC((uint64_t)v42, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    v40[1](v41, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v179, v36);
  }
  uint64_t v46 = v37;
  uint64_t v47 = v44;
  uint64_t v178 = v46;
  sub_100452DFC((uint64_t)v42, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  v40[1](v41, v39);
  uint64_t v48 = v35;
  uint64_t v49 = v35 + 16;
  uint64_t v50 = *(void (**)(unsigned char *, char *, uint64_t))(v35 + 16);
  id v51 = v168;
  unint64_t v52 = v179;
  uint64_t v162 = v49;
  uint64_t v161 = v50;
  v50(v168, v179, v36);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  int v55 = v54;
  BOOL v56 = os_log_type_enabled(v53, v54);
  uint64_t v177 = v36;
  uint64_t v170 = v2;
  uint64_t v171 = v48;
  id v163 = v38;
  if (v56)
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    uint64_t v172 = (uint64_t)v58;
    uint64_t v176 = (void *)swift_slowAlloc();
    v184 = v176;
    *(_DWORD *)uint64_t v57 = 136446978;
    unint64_t v175 = v53;
    uint64_t v182 = (uint64_t)v166;
    swift_getMetatypeMetadata();
    LODWORD(v174) = v55;
    uint64_t v59 = String.init<A>(describing:)();
    uint64_t v182 = sub_1000C51B8(v59, v60, (uint64_t *)&v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2114;
    uint64_t v182 = (uint64_t)v38;
    id v61 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v58 = v38;
    swift_release_n();
    *(_WORD *)(v57 + 22) = 2048;
    uint64_t v62 = *((void *)v47 + 2);
    swift_bridgeObjectRelease();
    uint64_t v182 = v62;
    uint64_t v63 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 32) = 2048;
    id v64 = v167;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v66 = v65;
    unint64_t v67 = v64;
    id v68 = *(unsigned char **)(v63 + 8);
    ((void (*)(unsigned char *, uint64_t))v68)(v67, v177);
    uint64_t v182 = v66;
    unint64_t v52 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v173 = (void (*)(id, uint64_t))v68;
    ((void (*)(id, uint64_t))v68)(v51, v177);
    id v53 = v175;
    _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v174, "%{public}s: Fetched reminders in template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v57, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v170;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    uint64_t v173 = *(void (**)(id, uint64_t))(v48 + 8);
    v173(v51, v36);
  }

  uint64_t v69 = (uint64_t)v47;
  uint64_t v182 = (uint64_t)v47;
  sub_100094134(&qword_100912558);
  sub_1004522E0();
  uint64_t v70 = BidirectionalCollection<>.slices(by:)();
  uint64_t v71 = (void *)*((void *)v2 + 4);
  id v72 = (void *)*((void *)v2 + 5);
  uint64_t v182 = 0;
  id v166 = v71;
  id v73 = [v72 fetchListWithObjectID:v71 error:&v70];
  uint64_t v74 = (void *)v182;
  uint64_t v75 = v178;
  if (!v73)
  {
    id v85 = (id)v182;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = _convertNSErrorToError(_:)();

    uint64_t v180 = v86;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v173)(v52, v177);
  }
  uint64_t v76 = v73;
  uint64_t v172 = v70;
  uint64_t v176 = (void *)v69;
  uint64_t v182 = 0;
  id v77 = v74;
  unint64_t v78 = sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  id v183 = 0;
  v184 = (void *)v78;
  unint64_t v175 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v72];
  uint64_t v168 = [v175 updateList:v76];
  id v79 = [v168 sectionsContextChangeItem];
  id v80 = v76;
  uint64_t v174 = v76;
  if (v79)
  {
    id v81 = v79;
    uint64_t v82 = v180;
    id v83 = (void *)sub_1002E3C78(v163, (uint64_t)v75, 0, 0);
    uint64_t v84 = v177;
    uint64_t v180 = v82;
    if (v82)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_39:
      uint64_t v129 = v52;
LABEL_40:
      uint64_t v130 = v84;
      goto LABEL_41;
    }
    unint64_t v122 = v83;
    id v123 = [v83 membershipsOfRemindersInSectionsAsData];
    if (v123)
    {
      uint64_t v124 = v123;
      uint64_t v125 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v127 = v126;

      sub_1000963CC(0, (unint64_t *)&qword_100910240);
      uint64_t v128 = v180;
      static REMJSONRepresentable.fromJSONData(_:)();
      uint64_t v180 = v128;
      if (v128)
      {
        sub_100097F34(v125, v127);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_38:
        goto LABEL_39;
      }
      sub_100097F34(v125, v127);
      id v151 = (id)v181;
      uint64_t v75 = v178;
      id v80 = v174;
    }
    else
    {
      id v151 = 0;
    }
    id v183 = v151;
    id v152 = v175;
    uint64_t v153 = v180;
    uint64_t v154 = sub_100452604((unint64_t)v163, v175, (uint64_t)v75, v81);
    uint64_t v180 = v153;
    if (v153)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_38;
    }
    uint64_t v155 = (uint64_t)v154;
    swift_bridgeObjectRelease();

    v184 = (void *)v155;
    uint64_t v87 = (uint64_t)v176;
    uint64_t v88 = *(void *)(v155 + 16);
    if (!v88) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v87 = (uint64_t)v176;
    uint64_t v84 = v177;
    uint64_t v88 = *(void *)(v78 + 16);
    if (!v88)
    {
LABEL_18:
      char v89 = 1;
      uint64_t v90 = v172;
      id v91 = v173;
      goto LABEL_19;
    }
  }
  if (*(void *)(v87 + 16)) {
    goto LABEL_18;
  }
  uint64_t v181 = 0;
  NSString v131 = v175;
  unsigned int v132 = [v175 saveSynchronouslyWithError:&v181];
  id v133 = (id)v181;
  if (!v132)
  {
    id v156 = (id)v181;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v157 = _convertNSErrorToError(_:)();

    uint64_t v180 = v157;
    swift_willThrow();

    uint64_t v129 = v179;
    goto LABEL_40;
  }
  uint64_t v134 = v164;
  v161(v164, v179, v84);
  swift_retain_n();
  id v135 = v133;
  NSString v136 = Logger.logObject.getter();
  os_log_type_t v137 = static os_log_type_t.default.getter();
  int v138 = v137;
  if (os_log_type_enabled(v136, v137))
  {
    uint64_t v139 = swift_slowAlloc();
    v140 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v139 = 134349826;
    uint64_t v181 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v141 = v84;
    *(_WORD *)(v139 + 12) = 2114;
    int v160 = v138;
    id v142 = v163;
    uint64_t v181 = (uint64_t)v163;
    id v143 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v140 = v142;
    swift_release_n();
    *(_WORD *)(v139 + 22) = 2114;
    uint64_t v144 = v141;
    id v145 = v166;
    uint64_t v181 = (uint64_t)v166;
    id v146 = v166;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v140[1] = v145;
    swift_release_n();
    *(_WORD *)(v139 + 32) = 2048;
    NSString v147 = v167;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v149 = v148;
    id v150 = v147;
    id v91 = v173;
    v173(v150, v144);
    uint64_t v181 = v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v91(v134, v144);
    _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v160, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %{public}ld sections to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v139, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    id v91 = v173;
    v173(v134, v84);
  }
  uint64_t v90 = v172;

  char v89 = 0;
LABEL_19:
  uint64_t v173 = v91;
  uint64_t v92 = *(void *)(v90 + 16);
  if (!v92)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v102 = v165;
    uint64_t v103 = v179;
    uint64_t v104 = v177;
    v161(v165, v179, v177);
    swift_retain_n();
    id v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    int v107 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v108 = swift_slowAlloc();
      uint64_t v109 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v108 = 138544130;
      LODWORD(v178) = v107;
      id v110 = v163;
      uint64_t v181 = (uint64_t)v163;
      id v111 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v109 = v110;
      uint64_t v176 = v109;
      swift_release_n();
      *(_WORD *)(v108 + 12) = 2114;
      id v112 = v166;
      uint64_t v181 = (uint64_t)v166;
      id v113 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v109[1] = v112;
      swift_release_n();
      *(_WORD *)(v108 + 22) = 2048;
      swift_release();
      uint64_t v181 = 50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v108 + 32) = 2048;
      id v114 = v167;
      Date.init()();
      uint64_t v115 = v105;
      id v116 = v165;
      Date.timeIntervalSince(_:)();
      uint64_t v118 = v117;
      id v119 = v114;
      uint64_t v120 = v173;
      v173(v119, v104);
      uint64_t v181 = v118;
      uint64_t v103 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v121 = v116;
      id v105 = v115;
      v120(v121, v104);
      _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v178, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v108, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      uint64_t v120 = v173;
      v173(v102, v104);
    }

    v120(v103, v104);
    goto LABEL_42;
  }
  uint64_t v93 = 0;
  id v94 = (unint64_t *)(v90 + 56);
  while (1)
  {
    uint64_t v96 = *(v94 - 1);
    unint64_t v95 = *v94;
    uint64_t v97 = *(v94 - 3);
    uint64_t v98 = *(v94 - 2);
    swift_unknownObjectRetain();
    unint64_t v158 = v95;
    id v100 = v174;
    uint64_t v101 = v180;
    sub_100450184(v89, v93, v175, v170, (uint64_t)v174, v97, v98, v96, v158, v178, (void **)&v182, &v183, (uint64_t *)&v184, (uint64_t)v176, v179);
    uint64_t v180 = v101;
    if (v101) {
      break;
    }
    ++v93;
    swift_unknownObjectRelease();
    v94 += 4;
    if (v92 == v93) {
      goto LABEL_23;
    }
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v129 = v179;
  uint64_t v130 = v177;
LABEL_41:
  v173(v129, v130);
LABEL_42:

  return swift_bridgeObjectRelease();
}

void sub_100450184(char a1, uint64_t a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10, void **a11, id *a12, uint64_t *a13, uint64_t a14, char *a15)
{
  uint64_t v133 = a8;
  uint64_t v124 = a7;
  uint64_t v116 = a6;
  id v142 = a4;
  unint64_t v126 = a11;
  uint64_t v20 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v20 - 8);
  uint64_t v115 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v123 = (char *)&v104 - v23;
  uint64_t v122 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  id v114 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v121 = (char *)&v104 - v27;
  uint64_t v141 = type metadata accessor for RDSavedReminder();
  __chkstk_darwin(v141);
  uint64_t v129 = (uint64_t)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  unint64_t v31 = (char *)&v104 - v30;
  uint64_t v137 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v127 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v130 = (char *)&v104 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  int v138 = (char *)&v104 - v34;
  uint64_t v111 = type metadata accessor for Date();
  __chkstk_darwin(v111);
  __chkstk_darwin(v35);
  uint64_t v109 = v36;
  id v112 = (char *)&v104 - v37;
  uint64_t v105 = v38;
  if ((a1 & 1) == 0 || a2) {
    id v39 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:*((void *)v142 + 5)];
  }
  else {
    id v39 = a3;
  }
  id v40 = v39;
  id v41 = [v39 updateList:a5];
  id v42 = [v41 sectionsContextChangeItem];
  id v145 = (id)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = v133;
  id v136 = v40;
  if (a9 >> 1 != v133)
  {
    id v108 = v42;
    id v143 = a10;
    unint64_t v120 = a9 >> 1;
    uint64_t v140 = type metadata accessor for REMCDSavedReminder();
    swift_unknownObjectRetain();
    swift_beginAccess();
    uint64_t v139 = v127 + 16;
    id v119 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
    uint64_t v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    id v110 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    uint64_t v117 = (void (**)(uint64_t, uint64_t))(v24 + 8);
    id v135 = (void (**)(char *, uint64_t))(v127 + 8);
    uint64_t v48 = v120;
    uint64_t v50 = v137;
    uint64_t v49 = v138;
    id v113 = v41;
    uint64_t v125 = v31;
    while (v43 < v48)
    {
      uint64_t v131 = *(void *)(v127 + 72);
      uint64_t v134 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
      v134(v49, v124 + v131 * v43, v50);
      id v51 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      sub_100547CFC(v51, (uint64_t)v143);
      if (v15)
      {

        (*v135)(v138, v50);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v133 = v43;

      id v132 = self;
      id v52 = [v132 newObjectID];
      NSString v53 = String._bridgeToObjectiveC()();
      id v42 = [v40 addReminderWithTitle:v53 toListChangeItem:v41 reminderObjectID:v52];

      sub_100518274((uint64_t)v31, v42);
      os_log_type_t v54 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      sub_100451350(v54, (uint64_t)v143, v42);

      int v55 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      id v56 = [v55 uuid];

      uint64_t v57 = (uint64_t)v121;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v58 = [v42 objectID];
      id v59 = [v58 uuid];

      uint64_t v60 = (uint64_t)v123;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v61 = v122;
      (*v119)(v60, 0, 1, v122);
      if ((*v118)(v60, 1, v61) == 1)
      {
        sub_1000966BC(v60, (uint64_t *)&unk_100909E50);
        uint64_t v62 = v115;
        sub_10030C654(v57, v115);
        (*v117)(v57, v61);
        uint64_t v50 = v137;
        sub_1000966BC(v62, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v63 = (uint64_t)v114;
        (*v110)(v114, v60, v61);
        id v64 = v145;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v146 = v64;
        sub_1002C4C4C(v63, v57, isUniquelyReferenced_nonNull_native);
        id v145 = v146;
        swift_bridgeObjectRelease();
        (*v117)(v57, v61);
      }
      unint64_t v31 = v125;
      [v41 insertReminderChangeItem:v42 afterReminderChangeItem:0];
      [v143 reset];
      uint64_t v49 = v138;
      uint64_t v66 = REMRemindersListDataView.ReminderLite.subtasks.getter();
      if (v66)
      {
        uint64_t v67 = v66;
        id v68 = [v42 subtaskContext];
        if (v68)
        {
          id v128 = v68;
          id v107 = v42;
          uint64_t v69 = *(void *)(v67 + 16);
          uint64_t v106 = v67;
          if (v69)
          {
            unint64_t v70 = v67 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
            id v42 = v130;
            uint64_t v71 = v129;
            id v72 = v143;
            do
            {
              v134((char *)v42, v70, v50);
              id v73 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
              sub_100547CFC(v73, (uint64_t)v72);
              uint64_t v74 = v71;

              id v75 = [v132 newObjectID];
              NSString v76 = String._bridgeToObjectiveC()();
              id v77 = v128;
              id v78 = [v136 addReminderWithTitle:v76 toReminderSubtaskContextChangeItem:v128 reminderObjectID:v75];

              sub_100518274(v74, v78);
              id v42 = v130;
              id v79 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
              id v72 = v143;
              sub_100451350(v79, (uint64_t)v143, v78);

              [v77 insertReminderChangeItem:v78 afterReminderChangeItem:0];
              [v72 reset];

              uint64_t v71 = v129;
              sub_100452DFC(v129, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
              uint64_t v50 = v137;
              (*v135)((char *)v42, v137);
              v70 += v131;
              --v69;
            }
            while (v69);
          }

          swift_bridgeObjectRelease();
          id v41 = v113;
          id v40 = v136;
          uint64_t v49 = v138;
          unint64_t v31 = v125;
        }
        else
        {
          swift_bridgeObjectRelease();

          id v40 = v136;
        }
      }
      else
      {
      }
      sub_100452DFC((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
      (*v135)(v49, v50);
      uint64_t v43 = v133;
      if (__OFADD__(*v126, 1)) {
        goto LABEL_37;
      }
      uint64_t v43 = v133 + 1;
      char *v126 = (char *)*v126 + 1;
      uint64_t v48 = v120;
      if (v43 == v120)
      {
        swift_unknownObjectRelease();
        id v42 = v108;
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_6:
  unint64_t v31 = v142;
  if (*a12)
  {
    uint64_t v44 = *a13;
    uint64_t v45 = (uint64_t)v145;
    if (*(void *)(*a13 + 16))
    {
      if (*((void *)v145 + 2))
      {
        id v46 = v41;
        id v47 = *a12;
        swift_bridgeObjectRetain();
        sub_100452E5C(v47, v44, v45, v42);

        id v41 = v46;
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  id v146 = 0;
  if ([v40 saveSynchronouslyWithError:&v146])
  {
    id v113 = v41;
    uint64_t v43 = a14;
    uint64_t v49 = a15;
    uint64_t v80 = qword_1009075D8;
    id v81 = v146;
    if (v80 == -1)
    {
LABEL_29:
      uint64_t v82 = type metadata accessor for Logger();
      sub_10008E2DC(v82, (uint64_t)qword_100918F98);
      uint64_t v83 = v109;
      uint64_t v84 = v111;
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v112, v49, v111);
      swift_retain_n();
      swift_bridgeObjectRetain();
      id v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      int v87 = v86;
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v88 = swift_slowAlloc();
        id v143 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 134219010;
        LODWORD(v140) = v87;
        uint64_t v141 = (uint64_t)v85;
        char v89 = v126;
        swift_beginAccess();
        uint64_t v144 = *v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v88 + 12) = 2048;
        uint64_t v144 = *(void **)(v43 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v88 + 22) = 2114;
        id v108 = v42;
        uint64_t v90 = (void *)*((void *)v31 + 3);
        uint64_t v144 = v90;
        id v91 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v92 = v143;
        void *v143 = v90;
        swift_release_n();
        *(_WORD *)(v88 + 32) = 2114;
        uint64_t v93 = (void *)*((void *)v31 + 4);
        uint64_t v144 = v93;
        id v94 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v92[1] = v93;
        id v42 = v108;
        swift_release_n();
        *(_WORD *)(v88 + 42) = 2048;
        id v142 = (char *)(v88 + 44);
        uint64_t v95 = v105;
        Date.init()();
        uint64_t v96 = v112;
        Date.timeIntervalSince(_:)();
        uint64_t v98 = v97;
        id v99 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
        uint64_t v100 = v95;
        id v85 = v141;
        uint64_t v101 = v111;
        v99(v100, v111);
        uint64_t v144 = v98;
        id v40 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v99((uint64_t)v96, v101);
        _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v140, "RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v88, 0x34u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v83 + 8))(v112, v84);
      }
      uint64_t v103 = v113;

      goto LABEL_34;
    }
LABEL_38:
    swift_once();
    goto LABEL_29;
  }
  id v102 = v146;
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_34:
}

void sub_100451350(void *a1, uint64_t a2, id a3)
{
  id v5 = a3;
  uint64_t v8 = *v3;
  id v9 = [a3 attachmentContext];
  if (!v9)
  {
    uint64_t v13 = self;
    sub_1000963CC(0, &qword_100915568);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v15 = String._bridgeToObjectiveC()();
    [v13 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v15];

    swift_willThrow();
    return;
  }
  uint64_t v10 = v9;
  uint64_t v11 = (objc_class *)sub_1005B2C20();
  uint64_t v12 = sub_1005B30E0(a1, a2, v11);
  if (v4)
  {

    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v16 = v12;
  swift_bridgeObjectRelease();
  if (v16 >> 62) {
    goto LABEL_36;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
  {
LABEL_37:
    swift_bridgeObjectRelease();

    return;
  }
  while (1)
  {
    unint64_t v74 = v16 & 0xC000000000000001;
    uint64_t v66 = v8;
    if ((v16 & 0xC000000000000001) == 0) {
      break;
    }
    swift_bridgeObjectRetain();
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_10:
    type metadata accessor for REMCDSavedAttachment();
    id v19 = [v18 storeControllerManagedObjectContext];
    if (!v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v57 = v18;
      id v58 = self;
      uint64_t v59 = swift_getObjCClassFromMetadata();
      NSString v60 = String._bridgeToObjectiveC()();
      [v58 unexpectedNilPropertyWithClass:v59 property:v60];

      swift_willThrow();
      return;
    }
    uint64_t v65 = v18;
    uint64_t v20 = v19;
    id v73 = [v19 storeController];
    if (!v73)
    {
      swift_bridgeObjectRelease();
      uint64_t v61 = self;
      uint64_t v62 = swift_getObjCClassFromMetadata();
      NSString v63 = String._bridgeToObjectiveC()();
      [v61 unexpectedNilPropertyWithClass:v62 property:v63];

      swift_willThrow();
      return;
    }
    id v64 = v20;
    uint64_t v21 = 4;
    unint64_t v70 = v16;
    uint64_t v71 = v10;
    uint64_t v68 = v17;
    id v69 = v5;
    while (1)
    {
      uint64_t v8 = v21 - 4;
      id v22 = v74 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v16 + 8 * v21);
      uint64_t v23 = v22;
      if (__OFADD__(v8, 1)) {
        break;
      }
      v78[3] = sub_1000963CC(0, (unint64_t *)&qword_10090E708);
      v78[4] = &off_1008C5F78;
      v78[0] = v73;
      id v24 = v23;
      id v72 = v73;
      id v26 = sub_10043AA64(v24, v78);
      uint64_t v77 = v21;
      id v75 = v26;
      uint64_t v76 = v21 - 3;
      if (v25)
      {
        if (v25 == 1)
        {
          uint64_t v27 = (Class *)REMFileAttachment_ptr;
          sub_1000963CC(0, (unint64_t *)&qword_1009114F0);
        }
        else
        {
          uint64_t v27 = (Class *)REMImageAttachment_ptr;
          sub_1000963CC(0, &qword_100911500);
        }
        uint64_t v28 = (void *)swift_getObjCClassFromMetadata();
        id v29 = v26;
        id v30 = [v28 newObjectID];
        id v31 = [v5 accountID];
        id v32 = [v5 objectID];
      }
      else
      {
        uint64_t v27 = (Class *)REMURLAttachment_ptr;
        sub_1000963CC(0, &qword_100911508);
        uint64_t v33 = (void *)swift_getObjCClassFromMetadata();
        id v29 = v26;
        id v30 = [v33 newObjectID];
        id v31 = [v5 accountID];
        id v32 = [v5 objectID];
      }
      id v34 = v32;
      id v35 = [objc_allocWithZone(*v27) initWithAttachment:v29 objectID:v30 accountID:v31 reminderID:v34];

      [v10 addAttachment:v35];
      if (qword_1009075D8 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_10008E2DC(v36, (uint64_t)qword_100918F98);
      id v37 = v24;
      id v38 = v5;
      id v39 = v35;
      id v40 = v37;
      id v41 = v38;
      id v42 = v39;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        os_log_type_t v67 = v44;
        uint64_t v45 = swift_slowAlloc();
        id v46 = (void *)swift_slowAlloc();
        uint64_t v79 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446978;
        v78[0] = v66;
        swift_getMetatypeMetadata();
        uint64_t v47 = String.init<A>(describing:)();
        v78[0] = sub_1000C51B8(v47, v48, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2114;
        id v49 = [v41 objectID];
        v78[0] = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v46 = v49;

        *(_WORD *)(v45 + 22) = 2082;
        id v50 = [v40 remObjectID];
        if (v50)
        {
          id v51 = v50;
          id v52 = [v50 description];

          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v55 = v54;
        }
        else
        {
          unint64_t v55 = 0xE300000000000000;
          uint64_t v53 = 7104878;
        }
        v78[0] = sub_1000C51B8(v53, v55, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 32) = 2114;
        v78[0] = v42;
        id v56 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v46[1] = v42;

        _os_log_impl((void *)&_mh_execute_header, v43, v67, "%{public}s: Copied attachment into reminderChangeItem {reminderChangeItem.remObjectID: %{public}@, cdSavedAttachment.remObjectID: %{public}s, copiedAttachment: %{public}@}", (uint8_t *)v45, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v5 = v69;
      uint64_t v21 = v77 + 1;
      unint64_t v16 = v70;
      uint64_t v10 = v71;
      if (v76 == v68)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_37;
    }
  }
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
    goto LABEL_10;
  }
  __break(1u);
}

id sub_100451CCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  id v79 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v75 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  unint64_t v74 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v77 = (uint64_t)&v64 - v12;
  __chkstk_darwin(v13);
  NSString v15 = (char *)&v64 - v14;
  __chkstk_darwin(v16);
  id v18 = (char *)&v64 - v17;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  id v78 = (char *)&v64 - v24;
  __n128 v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v64 - v27;
  if (!*(void *)(a3 + 16) || (unint64_t v29 = sub_100306EC4(a1), (v30 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v18, 1, 1, v19, v26);
    goto LABEL_10;
  }
  id v72 = v15;
  id v73 = v28;
  uint64_t v69 = v6;
  uint64_t v70 = v7;
  uint64_t v31 = *(void *)(a3 + 56);
  uint64_t v68 = *(void *)(v20 + 72);
  uint64_t v32 = v20;
  id v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16);
  uint64_t v33 = v20 + 16;
  id v34 = v35;
  v35((uint64_t)v18, v31 + v68 * v29, v19);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v36(v18, 0, 1, v19);
  id v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  uint64_t v71 = v19;
  if (v37(v18, 1, v19) == 1)
  {
LABEL_10:
    uint64_t v53 = (uint64_t)v18;
LABEL_11:
    sub_1000966BC(v53, (uint64_t *)&unk_100909E50);
    return 0;
  }
  uint64_t v64 = v33;
  uint64_t v65 = v34;
  uint64_t v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v37;
  os_log_type_t v67 = v36;
  id v38 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v39 = v71;
  v38(v73, v18, v71);
  id v40 = [v79 groupIdentifier];
  if (!v40)
  {
    uint64_t v42 = (uint64_t)v72;
    v67(v72, 1, 1, v39);
    goto LABEL_14;
  }
  id v41 = v40;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = (uint64_t)v72;
  v38(v72, v22, v39);
  uint64_t v43 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v67;
  v67((char *)v42, 0, 1, v39);
  if (v66(v42, 1, v39) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v73, v39);
    uint64_t v53 = v42;
    goto LABEL_11;
  }
  uint64_t v44 = (uint64_t)v78;
  uint64_t v45 = (void (*)(char *, uint64_t, uint64_t))v38;
  uint64_t v46 = v39;
  v45(v78, v42, v39);
  uint64_t v47 = v76;
  if (*(void *)(v76 + 16) && (unint64_t v48 = sub_100306EC4(v44), (v49 & 1) != 0))
  {
    uint64_t v50 = v77;
    v65(v77, *(void *)(v47 + 56) + v48 * v68, v39);
    uint64_t v51 = 0;
    id v52 = v75;
  }
  else
  {
    uint64_t v51 = 1;
    id v52 = v75;
    uint64_t v50 = v77;
  }
  uint64_t v57 = v73;
  uint64_t v56 = (uint64_t)v74;
  v43(v50, v51, 1, v46);
  sub_1001248EC(v50, v56);
  static Date.now.getter();
  v58.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (v66(v56, 1, v46) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v56, v46);
  }
  uint64_t v60 = v69;
  id v61 = objc_allocWithZone((Class)REMMembership);
  Class v62 = Date._bridgeToObjectiveC()().super.isa;
  id v54 = [v61 initWithMemberIdentifier:v58.super.isa groupIdentifier:isa isObsolete:0 modifiedOn:v62];

  (*(void (**)(char *, uint64_t))(v70 + 8))(v52, v60);
  sub_1000966BC(v77, (uint64_t *)&unk_100909E50);
  NSString v63 = *(void (**)(char *, uint64_t))(v32 + 8);
  v63(v78, v46);
  v63(v57, v46);
  return v54;
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromTemplateToREMList()
{
  return self;
}

uint64_t sub_1004522BC(void *a1)
{
  return sub_10044EF70(a1);
}

unint64_t sub_1004522E0()
{
  unint64_t result = qword_100919070;
  if (!qword_100919070)
  {
    sub_100096058(&qword_100912558);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919070);
  }
  return result;
}

uint64_t sub_10045233C(uint64_t a1, uint64_t (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v5 = sub_100094134(&qword_100919078);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v15, v20);
    uint64_t v21 = *(void **)(*(void *)(a1 + 56) + 8 * v15);
    *(void *)&v7[*(int *)(v5 + 48)] = v21;
    uint64_t v22 = a2(v7, v21);
    uint64_t result = sub_1000966BC((uint64_t)v7, &qword_100919078);
    if (v22)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v16 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17) {
    goto LABEL_21;
  }
  int64_t v13 = v16 + 3;
  if (v16 + 3 >= v25) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v13);
  if (v17)
  {
LABEL_21:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_22;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v25)
  {
LABEL_26:
    swift_release();
    return v27;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100452604(unint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = a4;
  id v76 = a2;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v68 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v70 = (char *)v61 - v11;
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  os_log_type_t v67 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v61 - v14;
  unint64_t v85 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v16 = sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = qword_100907478;
  id v18 = (id)a1;
  if (v17 != -1) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v19 = (objc_class *)qword_100942200;
    uint64_t v20 = (objc_class *)sub_1003DCBA4();
    uint64_t v21 = (objc_class *)sub_1003DD0C4();
    uint64_t v22 = sub_1003DD360(a1, 1, a3, v19, v20, v21);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
    a1 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)v16;
    if (a1 >> 62) {
      break;
    }
    uint64_t v24 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    int64_t v25 = v66;
    if (!v24) {
      goto LABEL_31;
    }
LABEL_7:
    v61[1] = 0;
    id v62 = v18;
    unint64_t v75 = a1 & 0xC000000000000001;
    uint64_t v77 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
    uint64_t v69 = (void (**)(char *, id, uint64_t))(v65 + 32);
    uint64_t v71 = (void (**)(char *, uint64_t))(v65 + 8);
    id v72 = (uint64_t (**)(id, uint64_t, uint64_t))(v65 + 48);
    unint64_t v16 = 4;
    id v18 = v70;
    uint64_t v64 = v15;
    uint64_t v73 = v24;
    unint64_t v74 = a1;
    while (1)
    {
      a3 = v16 - 4;
      id v28 = v75 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v16);
      unint64_t v29 = v28;
      if (__OFADD__(a3, 1)) {
        break;
      }
      unint64_t v82 = v16 - 3;
      id v84 = 0;
      id v83 = [v28 remObjectIDWithError:&v84];
      if (!v83)
      {
        id v59 = v84;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return v5;
      }
      id v30 = v84;
      id v81 = v29;
      id v31 = [v29 displayName];
      if (v31)
      {
        uint64_t v32 = v31;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v34 = [v76 addListSectionWithDisplayName:v33 toListSectionContextChangeItem:v25];

      id v35 = [v34 objectID];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v36 = [v83 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v79 = v35;
      id v37 = [v35 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = v78;
      uint64_t v39 = *v77;
      (*v77)((char *)v18, 0, 1, v78);
      int v40 = (*v72)(v18, 1, v38);
      id v80 = v34;
      if (v40 == 1)
      {
        sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
        swift_bridgeObjectRetain();
        unint64_t v41 = sub_100306EC4((uint64_t)v15);
        char v43 = v42;
        swift_bridgeObjectRelease();
        uint64_t v44 = v71;
        if (v43)
        {
          int64_t v45 = v41;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v84 = v5;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10031967C();
            uint64_t v5 = v84;
          }
          uint64_t v47 = v5[6];
          uint64_t v48 = v65;
          uint64_t v49 = *(void *)(v65 + 72);
          int64_t v63 = v45;
          int64_t v50 = v49 * v45;
          uint64_t v51 = *(void (**)(char *, uint64_t))(v65 + 8);
          uint64_t v52 = v78;
          v51((char *)(v47 + v50), v78);
          uint64_t v53 = (uint64_t)v84;
          int64_t v54 = *((void *)v84 + 7) + v50;
          unint64_t v55 = v68;
          (*(void (**)(char *, int64_t, uint64_t))(v48 + 32))(v68, v54, v52);
          uint64_t v56 = (void *)v53;
          uint64_t v57 = v53;
          uint64_t v58 = (uint64_t)v55;
          sub_1002C2610(v63, v57);
          swift_bridgeObjectRelease();
          v39(v55, 0, 1, v52);
          int64_t v25 = v66;
        }
        else
        {
          uint64_t v56 = v5;
          uint64_t v58 = (uint64_t)v68;
          uint64_t v52 = v78;
          v39(v68, 1, 1, v78);
          uint64_t v51 = *v44;
        }
        unint64_t v15 = v64;
        v51(v64, v52);
        sub_1000966BC(v58, (uint64_t *)&unk_100909E50);
        uint64_t v5 = v56;
        id v18 = v70;
      }
      else
      {
        uint64_t v26 = (uint64_t)v67;
        (*v69)(v67, v18, v38);
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        id v84 = v5;
        sub_1002C4C4C(v26, (uint64_t)v15, v27);
        uint64_t v5 = v84;
        swift_bridgeObjectRelease();
        (*v71)(v15, v38);
      }
      a1 = v74;

      ++v16;
      if (v82 == v73)
      {
        swift_bridgeObjectRelease();
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v25 setUnsavedSectionIDsOrdering:isa];

        return v5;
      }
    }
    __break(1u);
LABEL_29:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  int64_t v25 = v66;
  if (v24) {
    goto LABEL_7;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);

  return v5;
}

uint64_t sub_100452DFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100452E5C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = [a1 membershipByMemberIdentifier];
  type metadata accessor for UUID();
  sub_1000963CC(0, (unint64_t *)&qword_10090C160);
  sub_10013E30C();
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v14[2] = a3;
  id v14[3] = a2;
  unint64_t v9 = sub_10045233C(v8, (uint64_t (*)(char *, void *))sub_100452FDC, (uint64_t)v14);
  swift_bridgeObjectRelease();
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_6;
    }
  }
  else if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  if (a4)
  {
    id v10 = objc_allocWithZone((Class)REMMemberships);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [v10 initWithMemberships:isa];

    [a4 setUnsavedMembershipsOfRemindersInSections:v12];
    return;
  }
LABEL_6:
  swift_bridgeObjectRelease();
}

id sub_100452FDC(uint64_t a1, void *a2)
{
  return sub_100451CCC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100452FE4(unint64_t a1)
{
  return sub_1004533F8(a1, sub_1001ECD68);
}

uint64_t sub_100452FFC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1001ECD80(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

uint64_t sub_100453158@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1001ECDBC(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = &v5[6 * a1];
      long long v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      uint64_t v12 = v9[4];
      uint64_t v11 = v9[5];
      int v13 = *((_DWORD *)v9 + 6);
      uint64_t v14 = v9[2];
      uint64_t result = (uint64_t)memmove(v9, v9 + 6, 48 * v8);
      uint64_t v5[2] = v7;
      unint64_t *v2 = v5;
      *(_OWORD *)a2 = v10;
      *(void *)(a2 + 16) = v14;
      *(_DWORD *)(a2 + 24) = v13;
      *(void *)(a2 + 32) = v12;
      *(void *)(a2 + 40) = v11;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100453270@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1001ECDF8(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(sub_100094134(&qword_100914A98) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_100096408(v10, a2, &qword_100914A98);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

uint64_t sub_1004533F8(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = a2(v5);
    uint64_t *v2 = v5;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      uint64_t v11 = v7 + 8 * a1;
      uint64_t v12 = *(void *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(void *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004534E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919080);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919080);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1004535E4(uint64_t a1)
{
  uint64_t v2 = v1;
  if (a1 != 2)
  {
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_100919080);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDMergePolicy: Merge policy type is not compatible with this merge policy, please use defaultMergePolicy() instead.", v6, 2u);
      swift_slowDealloc();
    }
  }
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for RDMergePolicy();
  return [super initWithMergeType:2];
}

id sub_100453714(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  __chkstk_darwin(v9);
  uint64_t v232 = *(void *)(a1 + 16);
  if (!v232) {
    goto LABEL_164;
  }
  v215 = v1;
  uint64_t v209 = v11;
  uint64_t v210 = (uint64_t)&v194 - v10;
  uint64_t v223 = v2;
  v212 = v7;
  uint64_t v213 = v5;
  uint64_t v214 = v4;
  uint64_t v12 = a1 + 32;
  CFStringRef v219 = @"resolutionTokenMap_v3_JSONData";
  char v201 = (char *)&v236 + 8;
  CFStringRef v207 = @"reminderIDsMergeableOrdering_v2_JSON";
  v205 = &v235;
  uint64_t v217 = a1;
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  v231 = (char *)&type metadata for Any + 8;
  *(void *)&long long v14 = 136315138;
  long long v224 = v14;
  *(void *)&long long v14 = 136315394;
  long long v221 = v14;
  uint64_t v202 = 0x80000001007D52D0;
  v206 = "sectionIDsToUndelete";
  unint64_t v208 = 0x80000001007C6260;
  unint64_t v203 = "smartListIDsToUndelete";
  unint64_t v204 = 0x80000001007C65F0;
  uint64_t v225 = a1 + 32;
  while (1)
  {
    sub_10009A1B0(v12 + 32 * v13, (uint64_t)&v242);
    sub_10009A1B0((uint64_t)&v242, (uint64_t)&v240);
    sub_1000963CC(0, &qword_1009190C0);
    if (swift_dynamicCast())
    {
      unint64_t v15 = (void *)v238;
      if ((sub_1004572F8((void *)v238) & 1) == 0)
      {
        if (qword_1009075E0 != -1) {
          swift_once();
        }
        uint64_t v154 = type metadata accessor for Logger();
        sub_10008E2DC(v154, (uint64_t)qword_100919080);
        id v155 = v15;
        id v156 = Logger.logObject.getter();
        os_log_type_t v157 = static os_log_type_t.fault.getter();
        int v158 = v157;
        id v159 = &selRef_resolveConflicts_error_;
        if (os_log_type_enabled(v156, v157))
        {
          uint64_t v160 = swift_slowAlloc();
          LODWORD(v232) = v158;
          uint64_t v161 = v160;
          v231 = (char *)swift_slowAlloc();
          *(void *)&long long v240 = v231;
          *(_DWORD *)uint64_t v161 = v221;
          id v162 = [v155 constraint];
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v163 = Array.description.getter();
          unint64_t v165 = v164;
          swift_bridgeObjectRelease();
          *(void *)&long long v238 = sub_1000C51B8(v163, v165, (uint64_t *)&v240);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v161 + 12) = 2080;
          id v230 = (id)(v161 + 14);
          id v166 = [v155 constraintValues];
          static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v167 = Dictionary.description.getter();
          unint64_t v169 = v168;
          swift_bridgeObjectRelease();
          *(void *)&long long v238 = sub_1000C51B8(v167, v169, (uint64_t *)&v240);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          id v159 = &selRef_resolveConflicts_error_;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v232, "RDMergePolicy: Constraint conflict is not handled by remindd, and expect some confusing error message from CoreData {constraint: %s, constraintValues: %s}", (uint8_t *)v161, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v170 = v214;
        uint64_t v171 = v213;
        uint64_t v172 = v212;
        id v173 = [v155 databaseObject];
        if (v173)
        {
          uint64_t v174 = v173;
          self;
          unint64_t v175 = (void *)swift_dynamicCastObjCClass();
          uint64_t v176 = v175;
          if (v175)
          {
            id v177 = [v175 identifier];
            if (v177)
            {
              uint64_t v178 = v177;
              uint64_t v179 = v209;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v180 = 0;
            }
            else
            {
              uint64_t v180 = 1;
              uint64_t v179 = v209;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v171 + 56))(v179, v180, 1, v170);
            uint64_t v181 = self;
            uint64_t v182 = v179;
            uint64_t v183 = v210;
            sub_100096408(v182, v210, (uint64_t *)&unk_100909E50);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v183, 1, v170))
            {
              sub_1000966BC(v183, (uint64_t *)&unk_100909E50);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v172, v183, v170);
              sub_1000966BC(v183, (uint64_t *)&unk_100909E50);
              UUID.uuidString.getter();
              (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v170);
            }
          }
          else
          {

            uint64_t v181 = self;
          }
        }
        else
        {
          uint64_t v181 = self;
          uint64_t v176 = 0;
        }
        NSString v184 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        Class isa = (Class)[v155 v159[7]];
        if (!isa)
        {
          static Array._unconditionallyBridgeFromObjectiveC(_:)();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        [v181 constraintConflictWithIdentifier:v184 constraint:isa];

        swift_willThrow();
        return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);

      goto LABEL_5;
    }
    sub_10009A1B0((uint64_t)&v242, (uint64_t)&v240);
    sub_1000963CC(0, &qword_1009190C8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_14;
    }
    id v16 = (id)v238;
    id v17 = [(id)v238 sourceObject];
    self;
    id v230 = (id)swift_dynamicCastObjCClass();
    if (!v230)
    {

LABEL_14:
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_100919080);
      sub_10009A1B0((uint64_t)&v242, (uint64_t)&v240);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        *(void *)&long long v236 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = v224;
        sub_10009A1B0((uint64_t)&v240, (uint64_t)&v238);
        uint64_t v24 = String.init<A>(describing:)();
        *(void *)(v23 + 4) = sub_1000C51B8(v24, v25, (uint64_t *)&v236);
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v240);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDMergePolicy: Unknown conflict or non-REMCDObject merge conflict is not handled by remindd {conflict: %s}", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy();
        uint64_t v12 = v225;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v240);
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);
      goto LABEL_5;
    }
    id v227 = v17;
    id v18 = [v16 persistedSnapshot];
    if (v18)
    {

      id v19 = [v16 persistedSnapshot];
    }
    else
    {
      id v19 = [v16 cachedSnapshot];
    }
    id v26 = v19;
    if (v26) {
      break;
    }
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v121 = type metadata accessor for Logger();
    sub_10008E2DC(v121, (uint64_t)qword_100919080);
    id v122 = v16;
    id v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v123, v124))
    {
LABEL_154:

      goto LABEL_155;
    }
    uint64_t v125 = swift_slowAlloc();
    *(void *)&long long v240 = swift_slowAlloc();
    *(_DWORD *)uint64_t v125 = v224;
    id v122 = v122;
    id v126 = [v122 description];
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v129 = v128;

    *(void *)(v125 + 4) = sub_1000C51B8(v127, v129, (uint64_t *)&v240);
    swift_bridgeObjectRelease();
    uint64_t v130 = v123;
    os_log_type_t v131 = v124;
    id v132 = "RDMergePolicy: Neither persisted or cached snapshot is defined {conflict: %s}";
LABEL_153:
    _os_log_impl((void *)&_mh_execute_header, v130, v131, v132, (uint8_t *)v125, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_155:

LABEL_156:
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);
    uint64_t v12 = v225;
LABEL_5:
    if (++v13 == v232)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v215;
LABEL_164:
      Class v149 = Array._bridgeToObjectiveC()().super.isa;
      id v242 = 0;
      id v150 = (objc_class *)type metadata accessor for RDMergePolicy();
      v233.receiver = v1;
      v233.super_class = v150;
      unsigned __int8 v151 = [super resolveConflicts:v149 error:&v242];

      if (v151) {
        return v242;
      }
      id v153 = v242;
      _convertNSErrorToError(_:)();

      return (id)swift_willThrow();
    }
  }
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = *(void *)(v27 + 16);
  uint64_t v226 = v27;
  if (v30 && (unint64_t v31 = sub_1001806F8(v28, v29), (v32 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v27 + 56) + 32 * v31, (uint64_t)&v240);
  }
  else
  {
    long long v240 = 0u;
    long long v241 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v241 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)&v240, &qword_100908190);
LABEL_149:
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v133 = type metadata accessor for Logger();
    sub_10008E2DC(v133, (uint64_t)qword_100919080);
    id v122 = v16;
    id v123 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v123, v134)) {
      goto LABEL_154;
    }
    uint64_t v125 = swift_slowAlloc();
    *(void *)&long long v240 = swift_slowAlloc();
    *(_DWORD *)uint64_t v125 = v224;
    id v122 = v122;
    id v135 = [v122 description];
    uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v138 = v137;

    *(void *)(v125 + 4) = sub_1000C51B8(v136, v138, (uint64_t *)&v240);
    swift_bridgeObjectRelease();
    uint64_t v130 = v123;
    os_log_type_t v131 = v134;
    id v132 = "RDMergePolicy: Resolution token map missing from the CDObject snapshot, don't know how to resolve conflict {conflict: %s";
    goto LABEL_153;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_149;
  }
  long long v33 = v238;
  sub_100097E38(v238, *((unint64_t *)&v238 + 1));
  Class v34 = Data._bridgeToObjectiveC()().super.isa;
  long long v211 = v33;
  sub_100097F34(v33, *((unint64_t *)&v33 + 1));
  Class v35 = Dictionary._bridgeToObjectiveC()().super.isa;
  id v36 = [self resolutionTokenMapWithJSONData:v34 keyMap:v35];

  if (!v36)
  {
    swift_bridgeObjectRelease();
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v139 = type metadata accessor for Logger();
    sub_10008E2DC(v139, (uint64_t)qword_100919080);
    id v140 = v16;
    uint64_t v141 = Logger.logObject.getter();
    os_log_type_t v142 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v141, v142))
    {
      uint64_t v143 = swift_slowAlloc();
      *(void *)&long long v240 = swift_slowAlloc();
      *(_DWORD *)uint64_t v143 = v224;
      id v144 = v140;
      id v145 = [v144 description];
      uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v148 = v147;

      *(void *)(v143 + 4) = sub_1000C51B8(v146, v148, (uint64_t *)&v240);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v141, v142, "RDMergePolicy: Cannot decode data to resolution token map from the CDObject snapshot, don't know how to resolve conflict {conflict: %s", (uint8_t *)v143, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100097F34(v211, *((unint64_t *)&v211 + 1));
    }
    else
    {

      sub_100097F34(v211, *((unint64_t *)&v211 + 1));
    }
    goto LABEL_156;
  }
  id v200 = [v230 createResolutionTokenMapIfNecessary];
  id v218 = v36;
  id v37 = [v36 getTokenKeys];
  uint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v40 = v226;
  uint64_t v199 = v38;
  if (!v39)
  {
LABEL_157:

    swift_bridgeObjectRelease();
    sub_100097F34(v211, *((unint64_t *)&v211 + 1));
    swift_bridgeObjectRelease();

    goto LABEL_156;
  }
  unint64_t v41 = (unint64_t *)(v38 + 40);
  id v222 = v16;
  while (1)
  {
    uint64_t v42 = *(v41 - 1);
    unint64_t v43 = *v41;
    swift_bridgeObjectRetain();
    *(void *)&long long v240 = [v230 remObjectID];
    sub_100094134((uint64_t *)&unk_100914BC0);
    v228 = String.init<A>(describing:)();
    unint64_t v45 = v44;
    uint64_t v46 = *(void *)(v40 + 16);
    uint64_t v229 = v42;
    if (!v46
      || (swift_bridgeObjectRetain(), sub_1001806F8(v42, v43), char v48 = v47, swift_bridgeObjectRelease(), (v48 & 1) == 0))
    {
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_10008E2DC(v51, (uint64_t)qword_100919080);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        *(void *)&long long v240 = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = v221;
        swift_bridgeObjectRetain();
        *(void *)(v54 + 4) = sub_1000C51B8(v229, v43, (uint64_t *)&v240);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v54 + 14) = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v240);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDMergePolicy: skip merging key because it does not exist in the snapshot {key: %s, remObjectID: %s}", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        uint64_t v40 = v226;
        swift_slowDealloc();
        id v16 = v222;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_30;
    }
    if (*(void *)(v40 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v49 = sub_1001806F8(v229, v43);
      if (v50)
      {
        sub_10009A1B0(*(void *)(v40 + 56) + 32 * v49, (uint64_t)&v238);
      }
      else
      {
        long long v238 = 0u;
        long long v239 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v238 = 0u;
      long long v239 = 0u;
    }
    sub_1000E6E80((uint64_t)&v238, (uint64_t)&v236);
    if (*((void *)&v237 + 1))
    {
      sub_1000963CC(0, &qword_1009190D0);
      if (swift_dynamicCast())
      {

        sub_1000966BC((uint64_t)&v238, &qword_100908190);
        long long v240 = 0u;
        long long v241 = 0u;
        goto LABEL_48;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v236, &qword_100908190);
    }
    sub_100096408((uint64_t)&v238, (uint64_t)&v240, &qword_100908190);
LABEL_48:
    uint64_t v220 = v39;
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    uint64_t v56 = sub_10008E2DC(v55, (uint64_t)qword_100919080);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v216 = v56;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      *(void *)&long long v238 = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = v221;
      swift_bridgeObjectRetain();
      uint64_t v60 = v229;
      *(void *)(v59 + 4) = sub_1000C51B8(v229, v43, (uint64_t *)&v238);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v59 + 14) = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v238);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDMergePolicy: let's check if we need to merge this key: {key: %s, remObjectID: %s}", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v16 = v222;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v60 = v229;
    }
    uint64_t v39 = v220;
    if ((v60 != 0x636F44656C746974 || v43 != 0xED0000746E656D75)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    swift_bridgeObjectRelease();
    *((void *)&v239 + 1) = sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    *(void *)&long long v238 = v230;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v61 = v227;
    uint64_t v62 = v223;
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v223 = v62;
    if (v62) {
      goto LABEL_178;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v238);
    int64_t v63 = (void *)v236;
    sub_1000E6E80((uint64_t)&v240, (uint64_t)&v238);
    if (*((void *)&v239 + 1))
    {
      int v64 = swift_dynamicCast();
      if (v64) {
        uint64_t v65 = v236;
      }
      else {
        uint64_t v65 = 0;
      }
      if (v64) {
        unint64_t v66 = *((void *)&v236 + 1);
      }
      else {
        unint64_t v66 = 0xF000000000000000;
      }
      goto LABEL_65;
    }
LABEL_64:
    sub_1000966BC((uint64_t)&v238, &qword_100908190);
    uint64_t v65 = 0;
    unint64_t v66 = 0xF000000000000000;
LABEL_65:
    sub_100457C00(v63, v65, v66, (uint64_t)v218, v229, v43);
    sub_100097F20(v65, v66);
    swift_bridgeObjectRelease();

    sub_1000966BC((uint64_t)&v240, &qword_100908190);
    id v16 = v222;
LABEL_66:
    uint64_t v40 = v226;
LABEL_30:
    v41 += 2;
    if (!--v39) {
      goto LABEL_157;
    }
  }
  if (v60 == 0x636F447365746F6ELL && v43 == 0xED0000746E656D75
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *((void *)&v239 + 1) = sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    *(void *)&long long v238 = v230;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v61 = v227;
    uint64_t v67 = v223;
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v223 = v67;
    if (v67) {
      goto LABEL_178;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v238);
    int64_t v63 = (void *)v236;
    sub_1000E6E80((uint64_t)&v240, (uint64_t)&v238);
    if (*((void *)&v239 + 1))
    {
      int v68 = swift_dynamicCast();
      if (v68) {
        uint64_t v65 = v236;
      }
      else {
        uint64_t v65 = 0;
      }
      if (v68) {
        unint64_t v66 = *((void *)&v236 + 1);
      }
      else {
        unint64_t v66 = 0xF000000000000000;
      }
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v60 == 0xD00000000000001CLL && v43 == v208 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    *((void *)&v239 + 1) = sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    *(void *)&long long v238 = v230;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    id v61 = v227;
    uint64_t v69 = v223;
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v223 = v69;
    if (v69)
    {
      swift_bridgeObjectRelease();
LABEL_178:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_100097F34(v211, *((unint64_t *)&v211 + 1));

      sub_1000966BC((uint64_t)&v240, &qword_100908190);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);
      swift_bridgeObjectRelease();
      return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v238);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v238);
    v198 = v236;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v226;
    if (*(void *)(v226 + 16) && (unint64_t v73 = sub_1001806F8(v70, v71), (v74 & 1) != 0))
    {
      sub_10009A1B0(*(void *)(v72 + 56) + 32 * v73, (uint64_t)&v238);
    }
    else
    {
      long long v238 = 0u;
      long long v239 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000E6E80((uint64_t)&v238, (uint64_t)&v236);
    if (*((void *)&v237 + 1))
    {
      int v75 = swift_dynamicCast();
      if (v75) {
        id v76 = v234;
      }
      else {
        id v76 = 0;
      }
      if (v75) {
        unint64_t v77 = v235;
      }
      else {
        unint64_t v77 = 0xF000000000000000;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v236, &qword_100908190);
      id v76 = 0;
      unint64_t v77 = 0xF000000000000000;
    }
    uint64_t v78 = v198;
    uint64_t v79 = v223;
    sub_10045855C(v198, v76, v77, (uint64_t)v218, v229, v43);
    uint64_t v223 = v79;
    if (v79)
    {
      sub_100097F20((uint64_t)v76, v77);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      int v82 = v81;
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v83 = swift_slowAlloc();
        os_log_t v197 = v80;
        uint64_t v84 = v83;
        uint64_t v216 = swift_slowAlloc();
        *(void *)&long long v236 = v216;
        *(_DWORD *)uint64_t v84 = v221;
        int v196 = v82;
        swift_bridgeObjectRetain();
        v234 = sub_1000C51B8(v229, v43, (uint64_t *)&v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v84 + 12) = 2080;
        swift_bridgeObjectRetain();
        v234 = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v85 = v197;
        _os_log_impl((void *)&_mh_execute_header, v197, (os_log_type_t)v196, "RDMergePolicy: Error occured while trying to merge ordered set for: {key: %s, remObjectID: %s}", (uint8_t *)v84, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      sub_1000966BC((uint64_t)&v238, &qword_100908190);
      sub_1000966BC((uint64_t)&v240, &qword_100908190);
      uint64_t v223 = 0;
    }
    else
    {
      sub_100097F20((uint64_t)v76, v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_1000966BC((uint64_t)&v238, &qword_100908190);
      sub_1000966BC((uint64_t)&v240, &qword_100908190);
    }
    goto LABEL_66;
  }
  if (v60 == 0xD000000000000018 && v43 == v204 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *((void *)&v239 + 1) = sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    *(void *)&long long v238 = v230;
    sub_1000963CC(0, &qword_10090ABC0);
    id v61 = v227;
    uint64_t v86 = v223;
    throwingCast<A>(_:as:failureMessage:)();
    uint64_t v223 = v86;
    if (v86) {
      goto LABEL_178;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v238);
    v228 = v236;
    uint64_t v87 = v226;
    if (*(void *)(v226 + 16) && (unint64_t v88 = sub_1001806F8(0xD00000000000001BLL, v202), (v89 & 1) != 0))
    {
      sub_10009A1B0(*(void *)(v87 + 56) + 32 * v88, (uint64_t)&v236);
    }
    else
    {
      long long v236 = 0u;
      long long v237 = 0u;
    }
    sub_1000E6E80((uint64_t)&v236, (uint64_t)&v238);
    if (*((void *)&v239 + 1))
    {
      sub_1000963CC(0, &qword_1009190D0);
      if (swift_dynamicCast())
      {

        sub_1000966BC((uint64_t)&v236, &qword_100908190);
        long long v238 = 0u;
        long long v239 = 0u;
        goto LABEL_123;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v238, &qword_100908190);
    }
    sub_100096408((uint64_t)&v236, (uint64_t)&v238, &qword_100908190);
    if (*((void *)&v239 + 1))
    {
      int v97 = swift_dynamicCast();
      if (v97) {
        uint64_t v98 = v236;
      }
      else {
        uint64_t v98 = 0;
      }
      if (v97) {
        unint64_t v99 = *((void *)&v236 + 1);
      }
      else {
        unint64_t v99 = 0xF000000000000000;
      }
    }
    else
    {
LABEL_123:
      sub_1000966BC((uint64_t)&v238, &qword_100908190);
      uint64_t v98 = 0;
      unint64_t v99 = 0xF000000000000000;
    }
    uint64_t v100 = v228;
    sub_100458FC0(v228, v98, v99, (uint64_t)v218, v229, v43);
    sub_100097F20(v98, v99);
    swift_bridgeObjectRelease();
LABEL_125:

    goto LABEL_126;
  }
  NSString v90 = String._bridgeToObjectiveC()();
  unsigned int v91 = [v200 mergeWithMap:v218 forKey:v90];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v91)
  {
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.info.getter();
    int v103 = v102;
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v104 = swift_slowAlloc();
      v198 = v101;
      uint64_t v105 = v104;
      uint64_t v216 = swift_slowAlloc();
      *(void *)&long long v238 = v216;
      *(_DWORD *)uint64_t v105 = v221;
      os_log_t v197 = (os_log_t)(v105 + 4);
      swift_bridgeObjectRetain();
      *(void *)&long long v236 = sub_1000C51B8(v229, v43, (uint64_t *)&v238);
      LODWORD(v229) = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v105 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v236 = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v100 = v198;
      _os_log_impl((void *)&_mh_execute_header, v198, (os_log_type_t)v229, "RDMergePolicy: Resolution token map says we shouldn't merge key: {key: %s, remObjectID: %s}", (uint8_t *)v105, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_125;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

LABEL_126:
    sub_1000966BC((uint64_t)&v240, &qword_100908190);
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  int v94 = v93;
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v95 = swift_slowAlloc();
    v198 = v92;
    uint64_t v96 = v95;
    os_log_t v197 = (os_log_t)swift_slowAlloc();
    *(void *)&long long v238 = v197;
    *(_DWORD *)uint64_t v96 = v221;
    uint64_t v195 = v96 + 4;
    swift_bridgeObjectRetain();
    *(void *)&long long v236 = sub_1000C51B8(v229, v43, (uint64_t *)&v238);
    int v196 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v96 + 12) = 2080;
    uint64_t v195 = v96 + 14;
    swift_bridgeObjectRetain();
    *(void *)&long long v236 = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v198, (os_log_type_t)v196, "RDMergePolicy: Going to merge key: {key: %s, remObjectID: %s}", (uint8_t *)v96, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  sub_1000E6E80((uint64_t)&v240, (uint64_t)&v236);
  if (!*((void *)&v237 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)&v236, &qword_100908190);
LABEL_138:
    sub_1000E6E80((uint64_t)&v240, (uint64_t)&v238);
LABEL_139:
    sub_1000E6E80((uint64_t)&v238, (uint64_t)&v236);
    uint64_t v113 = *((void *)&v237 + 1);
    if (*((void *)&v237 + 1))
    {
      id v114 = sub_1000C0DE0(&v236, *((uint64_t *)&v237 + 1));
      uint64_t v115 = *(void *)(v113 - 8);
      __n128 v116 = __chkstk_darwin(v114);
      uint64_t v118 = (char *)&v194 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v115 + 16))(v118, v116);
      uint64_t v119 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v118, v113);
      id v16 = v222;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v236);
    }
    else
    {
      uint64_t v119 = 0;
    }
    NSString v120 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v230 setValue:v119 forKey:v120];
    swift_unknownObjectRelease();

    sub_1000966BC((uint64_t)&v238, &qword_100908190);
    goto LABEL_126;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_138;
  }
  uint64_t v106 = v234;
  id v107 = [v230 managedObjectContext];
  if (v107)
  {
    id v108 = v107;
    swift_bridgeObjectRelease();
    v234 = 0;
    id v109 = [v108 existingObjectWithID:v106 error:&v234];
    v228 = v106;
    id v110 = v234;
    if (!v109)
    {
      v190 = v234;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100097F34(v211, *((unint64_t *)&v211 + 1));

      goto LABEL_193;
    }
    id v111 = v109;
    *((void *)&v237 + 1) = sub_1000963CC(0, (unint64_t *)&qword_100909B00);
    id v112 = v110;

    *(void *)&long long v236 = v111;
    sub_100096408((uint64_t)&v236, (uint64_t)&v238, &qword_100908190);
    goto LABEL_139;
  }
  v186 = v106;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v187 = Logger.logObject.getter();
  os_log_type_t v188 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v187, v188))
  {
    uint64_t v189 = swift_slowAlloc();
    *(void *)&long long v236 = swift_slowAlloc();
    *(_DWORD *)uint64_t v189 = v221;
    swift_bridgeObjectRetain();
    v234 = sub_1000C51B8(v229, v43, (uint64_t *)&v236);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v189 + 12) = 2080;
    swift_bridgeObjectRetain();
    v234 = sub_1000C51B8((uint64_t)v228, v45, (uint64_t *)&v236);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v187, v188, "RDMergePolicy: Missing managed object context for resolving merge conflict {key: %s, remObjectID: %s}", (uint8_t *)v189, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v191 = self;
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v193 = String._bridgeToObjectiveC()();
  [v191 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v193];

  swift_willThrow();
  sub_100097F34(v211, *((unint64_t *)&v211 + 1));

LABEL_193:
  sub_1000966BC((uint64_t)&v240, &qword_100908190);
  return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v242);
}

id sub_100456290()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDMergePolicy();
  return [super dealloc];
}

uint64_t type metadata accessor for RDMergePolicy()
{
  return self;
}

uint64_t sub_1004562E8(void *a1, uint64_t a2)
{
  id v4 = [a1 conflictingObjects];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
    if (qword_1009075E0 == -1)
    {
LABEL_29:
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_100919080);
      id v21 = a1;
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446210;
        id v25 = v21;
        id v26 = [v25 description];
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        sub_1000C51B8(v27, v29, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDMergePolicy: Missing managed object context for resolving sharee constraint conflict {conflict: %{public}s}", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
LABEL_37:
    swift_once();
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_27;
  }
LABEL_3:
  unint64_t v7 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else if ((v5 & 0xC000000000000001) == 0)
  {
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v8 = *(id *)(v5 + 8 * v7 + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_37;
  }
  id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  id v10 = [v9 managedObjectContext];

  if (!v10) {
    goto LABEL_28;
  }
  [v10 deleteObject:a2];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v11)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_20;
    }
LABEL_41:

    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v31 = v5;
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
    || (v5 & 0x8000000000000000) != 0
    || (v5 & 0x4000000000000000) != 0)
  {
    unint64_t v5 = sub_1001ECD68(v5);
    uint64_t v31 = v5;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_39;
  }
  uint64_t v13 = v12 - 1;
  long long v14 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20);
  *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v13;
  specialized Array._endMutation()();

  uint64_t v30 = v31;
  sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
  sub_100094134(&qword_1009190D8);
  sub_100459A24();
  unint64_t v5 = Sequence.elements<A>(ofType:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 >> 62) {
    goto LABEL_40;
  }
  uint64_t v16 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16) {
    goto LABEL_41;
  }
LABEL_20:
  if (v16 >= 1)
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v5 + 8 * i + 32);
      }
      id v19 = v18;
      [v10 deleteObject:v18 v30];
    }
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

uint64_t sub_100456780(void *a1)
{
  uint64_t v1 = a1;
  objc_super v2 = &selRef_resolveConflicts_error_;
  id v3 = [a1 conflictingObjects];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v77 = (unint64_t)_swiftEmptyArrayStorage;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_16;
  }
LABEL_3:
  if (v5 < 1)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    swift_once();
LABEL_48:
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_100919080);
    id v35 = v1;
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      unint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136446210;
      id v39 = v35;
      id v40 = [v39 description];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      uint64_t v76 = sub_1000C51B8(v41, v43, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      unint64_t v44 = "RDMergePolicy: Some conflicting objects are not hashtag for resolving hashtag constraint conflict {conflict: %{public}s}";
LABEL_55:
      _os_log_impl((void *)&_mh_execute_header, v36, v37, v44, v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
LABEL_56:

    return 0;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v4 + 8 * i + 32);
    }
    id v8 = v7;
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = v77;
  objc_super v2 = &selRef_resolveConflicts_error_;
LABEL_17:
  swift_bridgeObjectRelease();
  unint64_t v10 = v9 >> 62;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v12 = [v1 v2[10]];
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v11 != v14)
  {
    swift_bridgeObjectRelease();
    if (qword_1009075E0 == -1) {
      goto LABEL_48;
    }
    goto LABEL_81;
  }
  if (!v10)
  {
    unint64_t v15 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_24;
    }
LABEL_51:
    swift_bridgeObjectRelease();
LABEL_52:
    swift_bridgeObjectRelease();
    if (qword_1009075E0 == -1) {
      goto LABEL_53;
    }
    goto LABEL_86;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15) {
    goto LABEL_51;
  }
LABEL_24:
  unint64_t v16 = v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v10 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) == 0)
    {
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v16 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v17 = *(id *)(v9 + 8 * v16 + 32);
        goto LABEL_29;
      }
      __break(1u);
LABEL_86:
      swift_once();
LABEL_53:
      uint64_t v45 = type metadata accessor for Logger();
      sub_10008E2DC(v45, (uint64_t)qword_100919080);
      id v35 = v1;
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        unint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136446210;
        id v46 = v35;
        id v47 = [v46 description];
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v50 = v49;

        uint64_t v76 = sub_1000C51B8(v48, v50, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        unint64_t v44 = "RDMergePolicy: Missing managed object context for resolving hashtag constraint conflict {conflict: %{public}s}";
        goto LABEL_55;
      }
      goto LABEL_56;
    }
  }
  id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_29:
  id v18 = v17;
  swift_bridgeObjectRelease();
  id v19 = [v18 managedObjectContext];

  if (!v19) {
    goto LABEL_52;
  }
  id v20 = [v1 databaseObject];

  if (!v20)
  {
    swift_bridgeObjectRelease();
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_10008E2DC(v52, (uint64_t)qword_100919080);
    id v53 = v1;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      unint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136446210;
      id v57 = v53;
      os_log_type_t v58 = v19;
      id v59 = [v57 description];
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v62 = v61;

      uint64_t v76 = sub_1000C51B8(v60, v62, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      int64_t v63 = "RDMergPolicy: context-level constraint conflict is unexpected and not handled for resolving hashtag constrai"
            "nt conflict {conflict: %{public}s}";
LABEL_66:
      _os_log_impl((void *)&_mh_execute_header, v54, v55, v63, v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
LABEL_67:

    return 0;
  }
  unint64_t v77 = v9;
  swift_bridgeObjectRetain();
  id v21 = [v1 databaseObject];
  if (!v21)
  {
LABEL_63:
    swift_bridgeObjectRelease_n();
    if (qword_1009075E0 != -1) {
LABEL_89:
    }
      swift_once();
    uint64_t v64 = type metadata accessor for Logger();
    sub_10008E2DC(v64, (uint64_t)qword_100919080);
    id v53 = v1;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136446210;
      id v65 = v53;
      os_log_type_t v58 = v19;
      id v66 = [v65 description];
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v69 = v68;

      sub_1000C51B8(v67, v69, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      int64_t v63 = "RDMergPolicy: databaseObject is not a REMCDHashtag for resolving hashtag constraint conflict {conflict: %{public}s}";
      goto LABEL_66;
    }
    goto LABEL_67;
  }
  os_log_type_t v22 = v21;
  self;
  uint64_t v23 = swift_dynamicCastObjCClass();
  if (!v23)
  {

    goto LABEL_63;
  }
  uint64_t v74 = v23;
  id v75 = v19;
  uint64_t v1 = (void *)RDStoreControllerICCloudContextAuthor;
  while (1)
  {
    if (__OFSUB__(v15--, 1))
    {
      __break(1u);
      goto LABEL_80;
    }
    if (v10)
    {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (v15 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_88;
      }
      id v25 = *(id *)(v9 + 32 + 8 * v15);
    }
    id v26 = v25;
    id v27 = [v25 managedObjectContext];
    if (v27
      && (unint64_t v28 = v27,
          id v29 = [v27 transactionAuthor],
          v28,
          v29))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = v30;
    }
    else
    {
      id v19 = (id)0xE000000000000000;
    }
    v31._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::Bool v32 = String.hasPrefix(_:)(v31);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v32) {
      break;
    }
    if (!v15)
    {
      swift_bridgeObjectRelease();
      long long v33 = v75;
      goto LABEL_69;
    }
  }
  swift_bridgeObjectRelease();
  long long v33 = v75;
  [v75 deleteObject:v74];

  unint64_t v9 = v77;
LABEL_69:
  if (!(v9 >> 62))
  {
    uint64_t v70 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v70) {
      goto LABEL_71;
    }
LABEL_91:

    swift_bridgeObjectRelease_n();
    return 1;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v70 = result;
  if (!result) {
    goto LABEL_91;
  }
LABEL_71:
  if (v70 >= 1)
  {
    for (uint64_t j = 0; j != v70; ++j)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v72 = *(id *)(v9 + 8 * j + 32);
      }
      unint64_t v73 = v72;
      [v33 deleteObject:v72];
    }
    goto LABEL_91;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004572F8(void *a1)
{
  id v2 = [a1 conflictingObjects];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = &selRef_resolveConflicts_error_;
  id v5 = [a1 constraint];
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  if (v7 != 1) {
    goto LABEL_32;
  }
  id v8 = [a1 constraint];
  unint64_t v9 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!v9[2]) {
    goto LABEL_30;
  }
  uint64_t v11 = v9[4];
  uint64_t v10 = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v11 == 0x696669746E656469 && v10 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_32;
    }
  }
  unint64_t v4 = (char **)(v3 >> 62);
  if (v3 >> 62) {
    goto LABEL_31;
  }
  if (*(uint64_t *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    id v14 = [a1 databaseObject];
    if (v14)
    {
      self;
      uint64_t v15 = swift_dynamicCastObjCClass();
      if (v15) {
        break;
      }
    }
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      if (!v18)
      {
LABEL_26:
        swift_bridgeObjectRelease_n();

        return 0;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v18) {
        goto LABEL_26;
      }
    }
    uint64_t v19 = 4;
    while (1)
    {
      id v20 = (v3 & 0xC000000000000001) != 0
          ? (char **)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char **)*(id *)(v3 + 8 * v19);
      unint64_t v4 = v20;
      uint64_t v21 = v19 - 3;
      if (__OFADD__(v19 - 4, 1)) {
        break;
      }
      self;
      if (swift_dynamicCastObjCClass())
      {
        swift_bridgeObjectRelease_n();

        char v17 = sub_100456780(a1);
        goto LABEL_28;
      }

      ++v19;
      if (v21 == v18) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23 < 1) {
      goto LABEL_32;
    }
  }
  uint64_t v16 = v15;
  id v14 = v14;
  swift_bridgeObjectRelease();
  char v17 = sub_1004562E8(a1, v16);

LABEL_28:
  return v17 & 1;
}

id sub_10045760C(void *a1, uint64_t a2, unint64_t a3)
{
  id v6 = [a1 remObjectID];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [a1 account];
    if (!v8
      || (unint64_t v9 = v8, v10 = [v8 remObjectID], v9, !v10))
    {
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_100919080);
      id v13 = a1;
      id v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        char v17 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412290;
        uint64_t v31 = (uint64_t)v13;
        id v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v17 = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDMergePolicy: Failed to get the account remObjectID from the CDReminder {cdReminder: %@}", v16, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
    if (a2 == 0x636F44656C746974 && a3 == 0xED0000746E656D75
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      id v11 = [self titleReplicaIDSourceWithAccountID:v10 reminderID:v7];
LABEL_25:
      id v25 = v11;

      return v25;
    }
    if (a2 == 0x636F447365746F6ELL && a3 == 0xED0000746E656D75
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      id v11 = [self notesReplicaIDSourceWithAccountID:v10 reminderID:v7];
      goto LABEL_25;
    }
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_100919080);
    swift_bridgeObjectRetain_n();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDMergePolicy: Unexpected reminder property key to get a replicaIDSource for it {key: %s}", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_19;
  }
  if (qword_1009075E0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_100919080);
  id v10 = a1;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v20, v21))
  {

LABEL_19:
    return 0;
  }
  os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
  uint64_t v23 = (void *)swift_slowAlloc();
  *(_DWORD *)os_log_type_t v22 = 138412290;
  uint64_t v31 = (uint64_t)v10;
  id v24 = v10;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v23 = v10;

  _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDMergePolicy: Failed to get the reminder remObjectID from the CDReminder {cdReminder: %@}", v22, 0xCu);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

void sub_100457C00(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v12 = [a1 remObjectID];
  if (v12)
  {
    id v13 = v12;
    id v14 = sub_10045760C(a1, a5, a6);
    if (v14)
    {
      os_log_type_t v15 = v14;
      id v62 = a1;
      id v16 = [a1 account];
      if (v16)
      {
        char v17 = v16;
        id v18 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[v16 type]];
        uint64_t v19 = v13;
        uint64_t v20 = a5;
        os_log_type_t v21 = v15;
        uint64_t v22 = a4;
        unsigned __int8 v23 = [v18 supportsCRDTs];

        char v24 = v23 ^ 1;
        a4 = v22;
        os_log_type_t v15 = v21;
        a5 = v20;
        id v13 = v19;
      }
      else
      {
        char v24 = 0;
      }
      if (a3 >> 60 == 15)
      {
        uint64_t v61 = a4;
        if (qword_1009075E0 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        sub_10008E2DC(v37, (uint64_t)qword_100919080);
        swift_bridgeObjectRetain_n();
        id v38 = v13;
        id v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          uint64_t v60 = (void *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136315394;
          swift_bridgeObjectRetain();
          sub_1000C51B8(a5, a6, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v41 + 12) = 2112;
          id v42 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v60 = v13;

          _os_log_impl((void *)&_mh_execute_header, v39, v40, "RDMergePolicy: Store snapshot document data is nil for the mergeable string document key {key: %s, remObjectID: %@}", (uint8_t *)v41, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a4 = v61;
        swift_bridgeObjectRetain();
        id v46 = v38;
        id v47 = v15;
        v45.super.Class isa = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
        id v43 = v13;
        id v44 = v15;
        sub_100097E24(a2, a3);
        v45.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(a2, a3);
      }
      NSString v48 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v49 = [self documentFromSerializedData:v45.super.isa replicaIDSource:v15 forKey:v48 ofObjectID:v13];

      unint64_t v50 = sub_10024938C(v49, a5, a6, a4, v24);
      if (v52 == 1)
      {
      }
      else
      {
        uint64_t v53 = (uint64_t)v50;
        unint64_t v54 = v51;
        uint64_t v55 = v52;
        if (v51 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          sub_100097E38((uint64_t)v50, v51);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v53, v54);
        }
        NSString v57 = String._bridgeToObjectiveC()();
        [v62 setValue:isa forKey:v57];
        swift_unknownObjectRelease();

        if (v55)
        {
          NSString v58 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v59 = String._bridgeToObjectiveC()();
          [v62 setValue:v58 forKey:v59];

          sub_100097F20(v53, v54);
        }
        else
        {

          sub_100097F20(v53, v54);
        }
      }
    }
    else
    {
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_10008E2DC(v31, (uint64_t)qword_100919080);
      swift_bridgeObjectRetain_n();
      id v63 = v13;
      Swift::Bool v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = swift_slowAlloc();
        id v35 = (void *)swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315394;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a5, a6, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v34 + 12) = 2112;
        id v36 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v35 = v13;

        _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDMergePolicy: Could not get a replicaIDSource for reminder for key {key: %s, remObjectID: %@}", (uint8_t *)v34, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_100919080);
    swift_bridgeObjectRetain_n();
    id v26 = a1;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a5, a6, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2112;
      id v64 = [v26 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v64;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDMergePolicy: cdReminder has no remObjectID {key: %s, cdReminder.objectID: %@}", (uint8_t *)v29, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_10045855C(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  id v12 = a1;
  id v13 = [a1 account];
  if (v13)
  {
    id v14 = v13;
    id v15 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:[v13 type]];
    unsigned __int8 v16 = [v15 supportsCRDTs];

    if (a3 >> 60 == 15)
    {
      char v17 = v16 ^ 1;
LABEL_6:
      char v56 = v17;
      uint64_t v18 = a5;
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_100919080);
      swift_bridgeObjectRetain_n();
      NSString v59 = v12;
      id v20 = v12;
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        id v62 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v57 = v18;
        sub_1000C51B8(v18, a6, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 12) = 2080;
        unint64_t v54 = a2;
        unint64_t v24 = a6;
        id v25 = [v20 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        uint64_t v26 = Optional.descriptionOrNil.getter();
        unint64_t v28 = v27;

        a6 = v24;
        sub_1000C51B8(v26, v28, (uint64_t *)&v62);
        a2 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDMergePolicy: Store snapshot reminderIDs ordering data is nil for key {key: %s, remObjectID: %s}", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v7 = v6;
        swift_slowDealloc();

        a5 = v57;
        id v12 = v59;
        id v29 = 0;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        id v29 = 0;
        id v12 = v59;
        a5 = v18;
      }
      char v30 = v56;
      goto LABEL_24;
    }
    if ((v16 & 1) == 0)
    {
      id v29 = 0;
      char v30 = 1;
      goto LABEL_24;
    }
  }
  else if (a3 >> 60 == 15)
  {
    char v17 = 0;
    goto LABEL_6;
  }
  uint64_t v58 = a5;
  sub_100097E38((uint64_t)a2, a3);
  if (qword_1009075E0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100919080);
  id v32 = v12;
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  unint64_t v53 = a6;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v55 = a2;
    uint64_t v60 = v12;
    id v35 = (uint8_t *)swift_slowAlloc();
    id v62 = (id)swift_slowAlloc();
    *(_DWORD *)id v35 = 136315138;
    id v36 = [v32 remObjectID];
    if (v36)
    {
      uint64_t v37 = v36;
      id v38 = [v36 description];

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;
    }
    else
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v39 = 7104878;
    }
    sub_1000C51B8(v39, v41, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDMergePolicy: Deserialized reminderIDsMergeableOrdering from data {remObjectID: %s}", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v6;
    a2 = v55;
    id v12 = v60;
  }
  else
  {
  }
  id v42 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v62 = 0;
  id v29 = [v42 reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:isa error:&v62];

  id v44 = v62;
  a5 = v58;
  if (!v29)
  {
    uint64_t v52 = v44;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100097F20((uint64_t)a2, a3);
    return;
  }
  sub_100097F20((uint64_t)a2, a3);
  char v30 = 0;
  a6 = v53;
LABEL_24:
  sub_100097E24((uint64_t)a2, a3);
  id v45 = v29;
  id v46 = sub_1005D8F6C(a2, a3, v29, a4, a5, a6, v30);
  if (v7 || (unint64_t v48 = v47, v47 >> 60 == 15))
  {
  }
  else
  {
    uint64_t v49 = (uint64_t)v46;
    sub_100097E38((uint64_t)v46, v47);
    Class v50 = Data._bridgeToObjectiveC()().super.isa;
    NSString v51 = String._bridgeToObjectiveC()();
    [v12 setValue:v50 forKey:v51];

    sub_100097F20(v49, v48);
    sub_100097F20(v49, v48);
  }
  sub_100097F20((uint64_t)a2, a3);
}

id sub_100458C10(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = [a1 remObjectID];
  if (!v6)
  {
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100919080);
    id v10 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v11))
    {

      return 0;
    }
    id v12 = (uint8_t *)swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    *(_DWORD *)id v12 = 138412290;
    uint64_t v20 = (uint64_t)v10;
    id v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v10;

    _os_log_impl((void *)&_mh_execute_header, v7, v11, "RDMergePolicy: Failed to get the account remObjectID from the CDAccount {cdAccount: %@}", v12, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    return 0;
  }
  uint64_t v7 = v6;
  if ((a2 != 0xD000000000000018 || a3 != 0x80000001007C65F0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_100919080);
    swift_bridgeObjectRetain_n();
    unsigned __int8 v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDMergePolicy: Unexpected account property key to get a replicaIDSource for it {key: %s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_16;
  }
  id v8 = [self listIDsMergeableOrderingReplicaIDSourceWithAccountID:v7];

  return v8;
}

void sub_100458FC0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v12 = &selRef_intersectsSet_;
  id v13 = [a1 remObjectID];
  if (v13)
  {
    id v14 = v13;
    id v15 = sub_100458C10(a1, a5, a6);
    if (v15)
    {
      unsigned __int8 v16 = v15;
      uint64_t v64 = a4;
      id v65 = v15;
      if (a3 >> 60 == 15)
      {
        uint64_t v17 = a5;
        if (qword_1009075E0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E2DC(v18, (uint64_t)qword_100919080);
        swift_bridgeObjectRetain_n();
        id v19 = v14;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          os_log_t v59 = (os_log_t)swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 136315394;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v17, a6, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v22 + 12) = 2112;
          id v23 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v59->Class isa = (Class)v14;

          a5 = v17;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDMergePolicy: Store snapshot listIDs ordering data is nil for key {key: %s, remObjectID: %@}", (uint8_t *)v22, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          id v12 = &selRef_intersectsSet_;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          a5 = v17;
        }
        unsigned __int8 v16 = v65;
      }
      id v36 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[a1 type]];
      unsigned int v37 = [v36 supportsCRDTs];

      id v38 = 0;
      char v63 = v37 ^ 1;
      if (a3 >> 60 != 15 && v37)
      {
        uint64_t v39 = v12;
        sub_100097E38(a2, a3);
        if (qword_1009075E0 != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_10008E2DC(v40, (uint64_t)qword_100919080);
        id v41 = a1;
        id v42 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v42, v62))
        {
          uint64_t v60 = v42;
          uint64_t v61 = v14;
          os_log_t log = (os_log_t)a5;
          id v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v68 = swift_slowAlloc();
          *(_DWORD *)id v43 = 136315138;
          id v44 = [v41 v39[446]];
          if (v44)
          {
            id v45 = v44;
            id v46 = [v44 description];

            uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v49 = v48;
          }
          else
          {
            unint64_t v49 = 0xE300000000000000;
            uint64_t v47 = 7104878;
          }
          sub_1000C51B8(v47, v49, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v62, "RDMergePolicy: Deserialized listIDsMergeableOrdering ordering from data {remObjectID: %s}", v43, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a5 = (uint64_t)log;
          id v14 = v61;
          unsigned __int8 v16 = v65;
        }
        else
        {
        }
        sub_100097E38(a2, a3);
        id v38 = sub_10029142C(a2, a3, v16, a5, a6, v14);
        sub_100097F20(a2, a3);
        sub_100097F20(a2, a3);
      }
      sub_100097E24(a2, a3);
      id v50 = v38;
      uint64_t v51 = sub_100289350(a2, a3, v38, a5, a6, v16, v64, v63);
      if (v52 >> 60 == 15)
      {

        sub_100097F20(a2, a3);
      }
      else
      {
        uint64_t v53 = v51;
        unint64_t v54 = v52;
        sub_100097E38(v51, v52);
        uint64_t v55 = v14;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v57 = String._bridgeToObjectiveC()();
        [a1 setValue:isa forKey:v57];

        sub_100097F20(v53, v54);
        sub_100097F20(v53, v54);

        sub_100097F20(a2, a3);
      }
    }
    else
    {
      if (qword_1009075E0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_100919080);
      swift_bridgeObjectRetain_n();
      id v66 = v14;
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        os_log_type_t v34 = (void *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315394;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a5, a6, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v33 + 12) = 2112;
        id v35 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v34 = v14;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDMergePolicy: Could not get a replicaIDSource for account for key {key: %s, remObjectID: %@}", (uint8_t *)v33, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    if (qword_1009075E0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_100919080);
    swift_bridgeObjectRetain_n();
    id v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      id v29 = (void *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a5, a6, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2112;
      id v67 = [v25 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v67;

      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDMergePolicy: cdAccount has no remObjectID {key: %s, cdAccount.objectID: %@}", (uint8_t *)v28, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

unint64_t sub_100459A24()
{
  unint64_t result = qword_1009190E0;
  if (!qword_1009190E0)
  {
    sub_100096058(&qword_1009190D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009190E0);
  }
  return result;
}

uint64_t sub_100459A80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009190E8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009190E8);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100459B48()
{
  id result = [self alarmEngine];
  qword_100919100 = (uint64_t)result;
  return result;
}

void sub_100459C1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009075E8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  v16[1] = sub_10008E2DC(v6, (uint64_t)qword_1009190E8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.RDDueDateDeltaAlarmProducer.reload}", v9, 2u);
    swift_slowDealloc();
  }

  v16[0] = os_transaction_create();
  static os_signpost_type_t.begin.getter();
  if (qword_1009075F0 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  sub_1000C0DE0((void *)(v1 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource), *(void *)(v1 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource + 24));
  static os_signpost_type_t.begin.getter();
  if (qword_100907448 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_1003CBED4(v11);
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  sub_10045A014(v12);
  sub_10045A58C(v12);
  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10(v5, v2);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction RELEASE {name: com.apple.remindd.RDDueDateDeltaAlarmProducer.reload}", v15, 2u);
    swift_slowDealloc();
  }
  swift_unknownObjectRelease();
}

void sub_10045A014(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  Class isa = v4[-1].isa;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started) == 1)
  {
    Class v29 = isa;
    os_log_t v30 = v4;
    static os_signpost_type_t.begin.getter();
    if (qword_1009075F0 != -1) {
      swift_once();
    }
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v11, v8);
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_1009190E8);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDDueDateDeltaAlarmProducer is firing expired dueDateDelta alarms", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = Date.init(timeIntervalSinceNow:)();
    __chkstk_darwin(v16);
    *(&v28 - 2) = (void (*)(char *, uint64_t))v7;
    uint64_t v17 = sub_1003B49E4((void (*)(void))sub_10045CE40, (uint64_t)(&v28 - 4), a1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      uint64_t v31 = v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDDueDateDeltaAlarmProducer is firing expired dueDateDelta alarms, count = %ld", v20, 0xCu);
      swift_slowDealloc();
    }

    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    __chkstk_darwin(Strong);
    *(&v28 - 2) = (void (*)(char *, uint64_t))v7;
    id v22 = v2;
    id v23 = sub_100225504((void (*)(uint64_t *__return_ptr, uint64_t))sub_10045CE5C, (uint64_t)(&v28 - 4), (uint64_t)v17);
    swift_bridgeObjectRelease();
    sub_1002283BC(v22, (uint64_t)v23, Strong);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, os_log_t))v29 + 1))(v7, v30);

    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v28(v11, v8);
  }
  else
  {
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_1009190E8);
    os_log_t v30 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v25, "RDDueDateDeltaAlarmProducer.start() must be called before fireExpiredAlarms", v26, 2u);
      swift_slowDealloc();
    }
    os_log_t v27 = v30;
  }
}

void sub_10045A58C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v142 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_1009167A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v141 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v140 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v137 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v121 - v10;
  __chkstk_darwin(v12);
  os_log_t v134 = (os_log_t)((char *)&v121 - v13);
  __chkstk_darwin(v14);
  unint64_t v138 = (uint64_t *)((char *)&v121 - v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (void **)((char *)&v121 - v17);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v135 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v121 - v23;
  __chkstk_darwin(v25);
  uint64_t v139 = (char *)&v121 - v26;
  __chkstk_darwin(v27);
  uint64_t v136 = (char *)&v121 - v28;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v121 - v30;
  uint64_t v32 = type metadata accessor for OSSignpostID();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  os_log_t v144 = (os_log_t)((char *)&v121 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started) == 1)
  {
    unint64_t v128 = v24;
    unint64_t v129 = v11;
    uint64_t v133 = v20;
    static os_signpost_type_t.begin.getter();
    if (qword_1009075F0 != -1) {
      swift_once();
    }
    os_log_t v35 = v144;
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    id v36 = *(void (**)(os_log_t, uint64_t))(v33 + 8);
    uint64_t v131 = v33 + 8;
    id v132 = v36;
    v36(v35, v32);
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v127 = v5;
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v130 = (void *)sub_10008E2DC(v37, (uint64_t)qword_1009190E8);
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDDueDateDeltaAlarmProducer is setting up the timers", v40, 2u);
      swift_slowDealloc();
    }

    Date.init()();
    sub_1000C0DE0((void *)(v2 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource), *(void *)(v2 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource + 24));
    id v41 = (void **)v141;
    sub_1003C5348((uint64_t)v31, v142, (uint64_t)v141);
    uint64_t v42 = v143;
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v140 + 48))(v41, 1, v143) == 1)
    {
      sub_1000966BC((uint64_t)v41, &qword_1009167A8);
      id v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        id v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No dueDateDelta alarm with future fireDate -- Done", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = v133;
      if (*(void *)(v2 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine))
      {
        uint64_t v47 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v127, 1, 1, v19);
        sub_1002965AC(v47);
        sub_1000966BC(v47, (uint64_t *)&unk_100909A40);
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v19);
      static os_signpost_type_t.end.getter();
      os_log_t v48 = v144;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      os_log_t v49 = v48;
      uint64_t v50 = v32;
    }
    else
    {
      uint64_t v124 = v32;
      uint64_t v55 = *(int *)(v42 + 48);
      char v56 = (char *)v18 + v55;
      uint64_t v57 = v42;
      os_log_t v59 = *v41;
      uint64_t v58 = v41[1];
      NSObject *v18 = *v41;
      v18[1] = v58;
      id v123 = v18;
      uint64_t v60 = v133;
      uint64_t v141 = v31;
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
      v61((char *)v18 + v55, (char *)v41 + v55, v19);
      id v62 = v59;
      id v122 = v58;
      char v63 = v136;
      Date.init()();
      uint64_t v125 = *(void (**)(char *, uint64_t))(v60 + 8);
      v125(v141, v19);
      v61(v141, v63, v19);
      uint64_t v64 = (char *)v138 + *(int *)(v57 + 48);
      id v65 = (char *)(v60 + 16);
      uint64_t v140 = *(void *)(v60 + 16);
      ((void (*)(char *, char *, uint64_t))v140)(v64, v56, v19);
      id v66 = v139;
      v61(v139, v64, v19);
      uint64_t v67 = (uint64_t)v141;
      char v68 = static Date.> infix(_:_:)();
      uint64_t v126 = v2;
      if (v68)
      {
        uint64_t v69 = v143;
        uint64_t v70 = v138;
        uint64_t v71 = (char *)v138 + *(int *)(v143 + 48);
        id v72 = v122;
        void *v138 = v62;
        v70[1] = v72;
        unint64_t v73 = (void (*)(char *, char *, uint64_t))v140;
        ((void (*)(char *, char *, uint64_t))v140)(v71, v56, v19);
        uint64_t v74 = (objc_class *)v62;
        id v75 = v71;
        uint64_t v76 = v125;
        v125(v75, v19);
        v73(v128, v66, v19);
        uint64_t v77 = *(int *)(v69 + 48);
        os_log_t v78 = v134;
        uint64_t v79 = (char *)v134 + v77;
        v134->Class isa = v74;
        v78[1].Class isa = v72;
        v73(v79, v56, v19);
        sub_10038AB2C((uint64_t)v78, (uint64_t)v129);
        sub_10038AB94((uint64_t)v78, v137);
        id v80 = v74;
        os_log_type_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        int v83 = v82;
        BOOL v84 = os_log_type_enabled(v81, v82);
        os_log_t v85 = v76;
        uint64_t v136 = v65;
        if (v84)
        {
          uint64_t v86 = swift_slowAlloc();
          uint64_t v130 = (void *)swift_slowAlloc();
          uint64_t v142 = swift_slowAlloc();
          v146[0] = v142;
          *(_DWORD *)uint64_t v86 = 136447234;
          LODWORD(v135) = v83;
          sub_10045CDF8((unint64_t *)&qword_100908230, 255, (void (*)(uint64_t))&type metadata accessor for Date);
          os_log_t v134 = v81;
          uint64_t v87 = v128;
          uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
          v145[0] = sub_1000C51B8(v88, v89, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v85(v87, v19);
          *(_WORD *)(v86 + 12) = 2080;
          uint64_t v90 = *(int *)(v143 + 48);
          unsigned int v91 = v138;
          uint64_t v92 = (char *)v138 + v90;
          os_log_type_t v93 = v129;
          int v94 = (char *)v129 + v90;
          uint64_t v95 = (void *)*v129;
          uint64_t v96 = (void *)v129[1];
          void *v138 = *v129;
          v91[1] = v96;
          uint64_t v121 = v19;
          ((void (*)(char *, char *, uint64_t))v140)((char *)v91 + v90, v94, v19);
          v145[0] = (uint64_t)v95;
          v145[1] = (uint64_t)v96;
          id v97 = v95;
          id v98 = v96;
          uint64_t v99 = String.init<A>(describing:)();
          unint64_t v101 = v100;
          v125(v92, v19);
          v145[0] = sub_1000C51B8(v99, v101, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000966BC(v137, (uint64_t *)&unk_100913A40);
          sub_1000966BC((uint64_t)v93, (uint64_t *)&unk_100913A40);
          *(_WORD *)(v86 + 22) = 2114;
          id v102 = [(objc_class *)v80 objectID];
          v145[0] = (uint64_t)v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v130 = v102;

          *(_WORD *)(v86 + 32) = 2082;
          if ([(objc_class *)v80 isRecurrent]) {
            uint64_t v103 = 89;
          }
          else {
            uint64_t v103 = 78;
          }
          v145[0] = sub_1000C51B8(v103, 0xE100000000000000, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 42) = 2082;
          if ([(objc_class *)v80 isOverdue]) {
            uint64_t v104 = 89;
          }
          else {
            uint64_t v104 = 78;
          }
          os_log_t v85 = v125;
          uint64_t v105 = (uint64_t)v139;
          v145[0] = sub_1000C51B8(v104, 0xE100000000000000, v146);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v106 = v134;
          _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v135, "Scheduling next dueDateDelta alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}", (uint8_t *)v86, 0x34u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v107 = v124;
          uint64_t v19 = v121;
          uint64_t v108 = (uint64_t)v123;
        }
        else
        {
          v76(v128, v19);
          sub_1000966BC(v137, (uint64_t *)&unk_100913A40);
          sub_1000966BC((uint64_t)v129, (uint64_t *)&unk_100913A40);

          uint64_t v107 = v124;
          uint64_t v108 = (uint64_t)v123;
          uint64_t v105 = (uint64_t)v139;
        }
        uint64_t v118 = (uint64_t)v141;
        if (*(void *)(v126 + OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine))
        {
          uint64_t v119 = (uint64_t)v127;
          ((void (*)(char *, uint64_t, uint64_t))v140)(v127, v105, v19);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v133 + 56))(v119, 0, 1, v19);
          sub_1002965AC(v119);
          sub_1000966BC(v119, (uint64_t *)&unk_100909A40);
        }
        sub_10035BC98(v105);

        v85((char *)v105, v19);
        sub_1000966BC(v108, (uint64_t *)&unk_100913A40);
        v85((char *)v118, v19);
      }
      else
      {

        id v109 = v135;
        ((void (*)(char *, char *, uint64_t))v140)(v135, v66, v19);
        id v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v110, v111))
        {
          id v112 = (uint8_t *)swift_slowAlloc();
          v145[0] = swift_slowAlloc();
          *(_DWORD *)id v112 = 136446210;
          uint64_t v113 = Date.description.getter();
          v146[0] = sub_1000C51B8(v113, v114, v145);
          uint64_t v67 = (uint64_t)v141;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v115 = v125;
          v125(v109, v19);
          os_log_type_t v116 = v111;
          uint64_t v117 = v115;
          _os_log_impl((void *)&_mh_execute_header, v110, v116, "Next dueDateDelta alarm is in the past -- Not adding event {fireDate: %{public}s}", v112, 0xCu);
          swift_arrayDestroy();
          id v66 = v139;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v117 = v125;
          v125(v109, v19);
        }

        uint64_t v107 = v124;
        sub_10045A014(v142);
        v117(v66, v19);
        sub_1000966BC((uint64_t)v123, (uint64_t *)&unk_100913A40);
        v117((char *)v67, v19);
      }
      static os_signpost_type_t.end.getter();
      os_log_t v120 = v144;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      os_log_t v49 = v120;
      uint64_t v50 = v107;
    }
    v132(v49, v50);
  }
  else
  {
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_1009190E8);
    os_log_t v144 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v144, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, v52, "RDDueDateDeltaAlarmProducer.start() must be called before setupTimers", v53, 2u);
      swift_slowDealloc();
    }
    os_log_t v54 = v144;
  }
}

uint64_t sub_10045B5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v63 = a3;
  uint64_t v65 = a2;
  uint64_t v4 = type metadata accessor for Date();
  id v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v60 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v64 = (char *)v56 - v8;
  __chkstk_darwin(v9);
  id v66 = (char *)v56 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100913A40);
  uint64_t v12 = v11 - 8;
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (void *)((char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(int *)(v12 + 56);
  os_log_t v59 = (void (*)(char *, char *, uint64_t))((char *)v15 + v16);
  uint64_t v61 = (void *)(a1 + v16);
  id v62 = (void (**)(char *, void, uint64_t))v5;
  uint64_t v18 = *(void **)a1;
  uint64_t v17 = *(void **)(a1 + 8);
  *uint64_t v15 = v18;
  v15[1] = v17;
  uint64_t v19 = (void (*)(__n128))v5[2];
  v19(v13);
  uint64_t v20 = (uint64_t (*)(char *, uint64_t))v5[1];
  id v21 = v18;
  id v22 = v17;
  v20((char *)v59, v4);
  uint64_t v23 = (char *)v15 + *(int *)(v12 + 56);
  os_log_t v59 = (void (*)(char *, char *, uint64_t))v19;
  ((void (*)(char *, void *, uint64_t))v19)(v23, v61, v4);
  ((void (**)(char *, char *, uint64_t))v62)[4](v66, v23, v4);
  sub_10038AC80();
  id v24 = v21;
  id v62 = (void (**)(char *, void, uint64_t))v22;
  static NSDateInterval.remNotificationFireDateGracePeriod.getter();
  uint64_t v25 = v64;
  Date.addingTimeInterval(_:)();
  uint64_t v26 = v25;
  int v27 = static Date.> infix(_:_:)();
  uint64_t v65 = v4;
  uint64_t v61 = v5 + 1;
  v20(v26, v4);
  uint64_t v28 = v20;
  if (qword_1009075E8 != -1) {
    swift_once();
  }
  LODWORD(v64) = v27;
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E2DC(v29, (uint64_t)qword_1009190E8);
  uint64_t v30 = v60;
  v59(v60, v66, v65);
  id v31 = v24;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    os_log_t v58 = v32;
    uint64_t v37 = (void *)v36;
    v56[1] = v36;
    os_log_t v59 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
    char v68 = v59;
    *(_DWORD *)uint64_t v35 = 138544130;
    int v57 = v34;
    id v38 = v30;
    id v39 = [v31 objectID];
    uint64_t v67 = (uint64_t)v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v37 = v39;
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v40 = Date.description.getter();
    uint64_t v67 = sub_1000C51B8(v40, v41, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v38, v65);
    *(_WORD *)(v35 + 22) = 2082;
    if (v64) {
      uint64_t v42 = 0x657669746361;
    }
    else {
      uint64_t v42 = 0x65766973736170;
    }
    if (v64) {
      unint64_t v43 = 0xE600000000000000;
    }
    else {
      unint64_t v43 = 0xE700000000000000;
    }
    uint64_t v67 = sub_1000C51B8(v42, v43, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 32) = 2082;
    if ([v31 isRecurrent]) {
      uint64_t v44 = 89;
    }
    else {
      uint64_t v44 = 78;
    }
    uint64_t v67 = sub_1000C51B8(v44, 0xE100000000000000, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v45 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v57, "RDDueDateDeltaAlarmProducer expired dueDateDelta Alarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}", (uint8_t *)v35, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v20(v30, v65);
  }
  uint64_t v46 = v62;
  uint64_t v47 = sub_100680208(v62);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  char v53 = v52;

  uint64_t result = v28(v66, v65);
  uint64_t v55 = v63;
  *char v63 = v31;
  v55[1] = v47;
  v55[2] = v49;
  v55[3] = v51;
  *((unsigned char *)v55 + 32) = v53;
  *((unsigned char *)v55 + 33) = (v64 & 1) == 0;
  *((unsigned char *)v55 + 34) = 1;
  return result;
}

void sub_10045BC74()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  id v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_queue];
  *id v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started])
  {
    if (qword_1009075E8 == -1)
    {
LABEL_4:
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_1009190E8);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDDueDateDeltaAlarmProducer.start() must be called exactly once", v11, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  v0[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started] = 1;
  if (qword_1009075E8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_1009190E8);
  __n128 v13 = v0;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v26 = 60;
    unint64_t v27 = 0xE100000000000000;
    uint64_t v28 = v17;
    v18._uint64_t countAndFlagsBits = sub_100587438((uint64_t)v13);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 62;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v26 = sub_1000C51B8(v26, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting due date delta alarm producer {producer: %s}", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v20 = *(void *)&v13[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_timeEventStream + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = *(void *)(v20 + 8);
  id v24 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v23 + 16);
  swift_retain();
  v24(sub_10045CEB4, v22, ObjectType, v23);
  swift_release();
  sub_100459C1C();
}

void sub_10045C08C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_1009190E8);
    __n128 v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received RDTimeEventHandler event on RDDueDateDeltaAlarmProducer, reloading alarms.", v5, 2u);
      swift_slowDealloc();
    }

    sub_100459C1C();
  }
  else
  {
    if (qword_1009075E8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_1009190E8);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v1, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v7, "Received RDTimeEventHandler event on deallocated RDDueDateDeltaAlarmProducer", v8, 2u);
      swift_slowDealloc();
    }
  }
}

unint64_t sub_10045C24C()
{
  return 0xD00000000000001BLL;
}

void sub_10045C268()
{
}

void sub_10045C28C()
{
  if (qword_1009075E8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_1009190E8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    __n128 v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__n128 v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Alarm trigger did change for RDDueDateDeltaAlarmProducer", v3, 2u);
    swift_slowDealloc();
  }

  sub_100459C1C();
}

uint64_t sub_10045C370@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v36 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  __n128 v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v17 = (char *)v36 - v16;
  Swift::String v18 = (uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (objc_msgSend(a1, "allDay", v15))
  {
    sub_1004D83AC(a1, (uint64_t)v6);
    Swift::String v19 = *v18;
    if ((*v18)(v6, 1, v10) == 1)
    {
      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v6, v10);
    sub_1004D94AC((uint64_t)v13, (uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    int v20 = v19(v9, 1, v10);
  }
  else
  {
    sub_1004D83AC(a1, (uint64_t)v9);
    int v20 = (*v18)(v9, 1, v10);
  }
  if (v20 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
    id v32 = [v2 dueDateDelta];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v34 = [v32 addedTo:isa];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    uint64_t v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v38, v31, 1, v10);
  }
LABEL_7:
  sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909A40);
  if (qword_1009075E8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10008E2DC(v21, (uint64_t)qword_1009190E8);
  id v22 = a1;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v40 = v37;
    *(_DWORD *)uint64_t v25 = 136315138;
    v36[1] = v25 + 4;
    uint64_t v26 = v10;
    id v27 = [v22 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v10 = v26;
    uint64_t v39 = sub_1000C51B8(v28, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Tried to fire dueDateDelta alarm with nil dueDate {reminder: %s}", v25, 0xCu);
    uint64_t v31 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v31 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v38, v31, 1, v10);
}

uint64_t sub_10045C82C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v46 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - v11;
  __chkstk_darwin(v13);
  double v15 = (char *)&v40 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  Swift::String v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  id v22 = (char *)&v40 - v21;
  *(void *)&double v24 = __chkstk_darwin(v23).n128_u64[0];
  os_log_t v45 = (char *)&v40 - v25;
  if (objc_msgSend(a1, "allDay", v24))
  {
    uint64_t v43 = a2;
    uint64_t v47 = a4;
    sub_1004D83AC(a1, (uint64_t)v12);
    uint64_t v26 = a1;
    id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    if (v27(v12, 1, v16) == 1)
    {
      sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      a4 = v47;
      goto LABEL_10;
    }
    unint64_t v41 = v26;
    uint64_t v42 = a3;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v31(v22, v12, v16);
    sub_1004D94AC((uint64_t)v22, (uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    unsigned int v32 = v27(v15, 1, v16);
  }
  else
  {
    id v28 = [a1 displayDate];
    if (!v28)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      goto LABEL_10;
    }
    unint64_t v29 = v28;
    unint64_t v41 = a1;
    uint64_t v42 = a3;
    uint64_t v43 = a2;
    uint64_t v47 = a4;
    id v30 = [v28 date];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v31(v15, v19, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    unsigned int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  }
  a4 = v47;
  if (v32 != 1)
  {
    os_log_type_t v33 = v45;
    v31(v45, v15, v16);
    id v34 = [v44 dueDateDelta];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v36 = [v34 addedTo:isa];

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v46, v19, v16);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v37, 0, 1, v16);
    v42(v41, v43, v37);
    sub_1000966BC(v37, (uint64_t *)&unk_100909A40);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v17 + 8);
    v38(v19, v16);
    return ((uint64_t (*)(char *, uint64_t))v38)(v33, v16);
  }
LABEL_10:
  sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, 1, 1, v16);
}

uint64_t sub_10045CCE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10045C370(a1, a2);
}

uint64_t sub_10045CD0C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10045C82C(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_1004D80B0, a3);
}

uint64_t sub_10045CD44@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10045C82C(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_1004D7CE0, a3);
}

uint64_t type metadata accessor for RDDueDateDeltaAlarmProducer()
{
  return self;
}

uint64_t sub_10045CDA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10045CDF8(&qword_100919160, a2, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10045CDF8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10045CE40@<X0>(NSObject *a1@<X0>, objc_class **a2@<X8>)
{
  return sub_1003C67D0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10045CE5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10045B5F8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10045CE7C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10045CEB4()
{
}

uint64_t sub_10045CEBC(uint64_t a1)
{
  uint64_t result = sub_100470490(&qword_1009191A0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.Invocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_10045CF14(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, id), uint64_t a4)
{
  os_log_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v44 = type metadata accessor for REMAccountsListDataView.Model.Account();
  uint64_t v7 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v51 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v43 = (char *)&v36 - v10;
  unint64_t v37 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_3:
    unint64_t v49 = (unint64_t)a2 >> 62;
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v12 >= v11) {
      uint64_t v12 = v11;
    }
    char v52 = _swiftEmptyArrayStorage;
    int64_t v41 = v12 & ~(v12 >> 63);
    sub_1001DE250(0, v41, 0);
    if (v12 < 0)
    {
      __break(1u);
LABEL_80:

      __break(1u);
      return;
    }
    uint64_t v13 = v52;
    uint64_t v48 = a1;
    if (!v12) {
      break;
    }
    uint64_t v42 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v37)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v40 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unint64_t v16 = 0;
    unint64_t v50 = a1 & 0xC000000000000001;
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v15 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0) {
      uint64_t v17 = a2;
    }
    uint64_t v36 = v17;
    unint64_t v47 = a2 & 0xC000000000000001;
    uint64_t v38 = v7 + 32;
    uint64_t v39 = v12;
    while (v41 != v16)
    {
      if (v40 == v16) {
        goto LABEL_69;
      }
      if (v50)
      {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v16 >= *(void *)(v42 + 16)) {
          goto LABEL_76;
        }
        id v18 = *(id *)(a1 + 8 * v16 + 32);
      }
      a1 = (uint64_t)v18;
      if (v49)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v16 == v19) {
        goto LABEL_80;
      }
      if (v47)
      {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v16 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_70;
        }
        id v20 = *(id *)(a2 + 8 * v16 + 32);
      }
      uint64_t v21 = v20;
      v45(a1, v20);
      if (v4)
      {

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

      char v52 = v13;
      unint64_t v23 = v13[2];
      unint64_t v22 = v13[3];
      if (v23 >= v22 >> 1)
      {
        sub_1001DE250(v22 > 1, v23 + 1, 1);
        uint64_t v13 = v52;
      }
      ++v16;
      void v13[2] = v23 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v23, v51, v44);
      uint64_t v12 = v39;
      a1 = v48;
      if (v39 == v16)
      {
        uint64_t v14 = v42;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
  }
  uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v50 = a1 & 0xC000000000000001;
  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v47 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_36:
  if (a1 < 0) {
    uint64_t v24 = a1;
  }
  else {
    uint64_t v24 = v14;
  }
  uint64_t v51 = (char *)v15;
  if (a2 < 0) {
    uint64_t v25 = a2;
  }
  else {
    uint64_t v25 = v15;
  }
  uint64_t v39 = v25;
  uint64_t v40 = v24;
  int64_t v41 = v7 + 32;
  uint64_t v42 = v14;
  uint64_t v26 = v12 + 4;
  if (v37)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v27 = *(void *)(v14 + 16);
LABEL_44:
    unint64_t v28 = v26 - 4;
    if (v26 - 4 == v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v50)
    {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v28 & 0x8000000000000000) != 0) {
        goto LABEL_71;
      }
      if (v28 >= *(void *)(v14 + 16)) {
        goto LABEL_72;
      }
      id v29 = *(id *)(a1 + 8 * v26);
    }
    a1 = (uint64_t)v29;
    id v30 = v51;
    if (__OFADD__(v28, 1)) {
      goto LABEL_73;
    }
    if (v49)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v28 == v31)
      {
LABEL_66:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
    }
    else if (v28 == *((void *)v51 + 2))
    {
      goto LABEL_66;
    }
    if (v47)
    {
      id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v28 & 0x8000000000000000) != 0) {
        goto LABEL_74;
      }
      if (v28 >= *((void *)v30 + 2)) {
        goto LABEL_75;
      }
      id v32 = *(id *)(a2 + 8 * v26);
    }
    os_log_type_t v33 = v32;
    v45(a1, v32);
    if (v4) {
      break;
    }

    char v52 = v13;
    unint64_t v35 = v13[2];
    unint64_t v34 = v13[3];
    if (v35 >= v34 >> 1)
    {
      sub_1001DE250(v34 > 1, v35 + 1, 1);
      uint64_t v13 = v52;
    }
    void v13[2] = v35 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v35, v43, v44);
    ++v26;
    a1 = v48;
    uint64_t v14 = v42;
    if (v37) {
      goto LABEL_43;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_10045D54C(unint64_t a1, void *a2, void *a3, void **a4)
{
  uint64_t v5 = a1;
  if (!a2) {
    goto LABEL_9;
  }
  if (!(a1 >> 62))
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v10 = a2;
    if (v9 > 1) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRetain();

    return v5;
  }
  id v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 <= 1) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v11 = *a4;
  if (!*a4)
  {
    unint64_t v14 = sub_10022914C(a2, a3);
    if (v4)
    {

      swift_errorRelease();
    }
    else
    {
      uint64_t v15 = (void *)v14;
      if (v14)
      {
        *a4 = (void *)v14;
        _s19PolymorphicListItemCMa();
        id v12 = v15;
        goto LABEL_6;
      }
    }
LABEL_9:
    swift_bridgeObjectRetain();
    return v5;
  }
  _s19PolymorphicListItemCMa();
  id v12 = v11;
LABEL_6:
  uint64_t v13 = v12;
  uint64_t v5 = REMOrderedIdentifierMap.reorder<A>(objects:)();

  return v5;
}

uint64_t sub_10045D698()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919168);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919168);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  __n128 v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10045D760@<X0>(NSObject *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v143 = a2;
  uint64_t v129 = a5;
  uint64_t v8 = type metadata accessor for REMAccountsListDataView.Diff();
  uint64_t v130 = *(void *)(v8 - 8);
  uint64_t v131 = v8;
  __chkstk_darwin(v8);
  unint64_t v128 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v137 = (char *)&v120 - v11;
  id v12 = (void *)type metadata accessor for REMAccountsListDataView.ReminderCounts();
  uint64_t v133 = *(v12 - 1);
  id v134 = v12;
  __chkstk_darwin(v12);
  id v132 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMAccountsListDataView.Model();
  uint64_t v135 = *(void *)(v14 - 8);
  uint64_t v136 = v14;
  __chkstk_darwin(v14);
  uint64_t v140 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v138 = (char *)&v120 - v17;
  uint64_t v18 = sub_100094134(&qword_100912528);
  __chkstk_darwin(v18 - 8);
  uint64_t v139 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters();
  uint64_t v21 = *(void (***)(void, void))(v20 - 8);
  unint64_t v141 = v20;
  uint64_t v142 = v21;
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100094134(&qword_100919270);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  id v29 = (char *)&v120 - v28;
  __chkstk_darwin(v30);
  id v32 = (char *)&v120 - v31;
  uint64_t v33 = v144;
  uint64_t result = sub_10045E69C((uint64_t)a1, a3);
  if (!v33)
  {
    uint64_t v125 = (uint64_t)v29;
    id v122 = v23;
    uint64_t v121 = v26;
    uint64_t v126 = a3;
    uint64_t v127 = a1;
    uint64_t v144 = 0;
    id v123 = v32;
    uint64_t v147 = result;
    uint64_t v35 = result;
    char v36 = REMAccountsListDataView.FetchOptions.fetchAccounts.getter();
    uint64_t v37 = a4;
    uint64_t v124 = v35;
    if (v36)
    {
      uint64_t v38 = v127;
      uint64_t v39 = v127;
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v41 = v144;
      uint64_t v42 = (objc_class *)sub_10046CBF8(v40, v39);
      uint64_t v144 = v41;
      swift_bridgeObjectRelease();

      id v43 = [self localInternalAccountID];
      id v44 = [v39 persistentStoreOfAccountWithAccountID:v43];

      os_log_t v45 = v126;
      uint64_t v46 = v143;
      if (v44)
      {
        unint64_t v146 = (unint64_t)v42;
        id v47 = v44;
        swift_bridgeObjectRetain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v48 = (objc_class *)v146;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v48 = v42;
      }
      unint64_t v49 = (char *)v38;
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v42 = 0;
      os_log_t v45 = v126;
      unint64_t v49 = (char *)v127;
      uint64_t v46 = v143;
    }
    id v50 = [self daemonUserDefaults];
    uint64_t v51 = (void (**)(void, void))v125;
    uint64_t v52 = v144;
    int v53 = sub_10045EC04(v125, v49, v46, v45, v37, (uint64_t)v50, (uint64_t)&off_1008C6908, v48);
    if (v52)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    int v54 = v53;

    swift_bridgeObjectRelease();
    uint64_t v55 = (uint64_t)v123;
    sub_100096408((uint64_t)v51, (uint64_t)v123, &qword_100919270);
    sub_10016E90C(v49, (void *)2, 0, (uint64_t)v42);
    uint64_t v144 = 0;
    unint64_t v57 = (unint64_t)v56;
    LODWORD(v125) = v54;
    swift_bridgeObjectRelease();
    if (v57 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v60 = v141;
      os_log_t v59 = v142;
      if (v58)
      {
LABEL_18:
        if ((v57 & 0xC000000000000001) != 0)
        {
          id v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_64;
          }
          id v61 = *(id *)(v57 + 32);
        }
        id v62 = v61;
        swift_bridgeObjectRelease();
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v63 = swift_allocObject();
        *(_OWORD *)(v63 + 16) = xmmword_10077A530;
        *(void *)(v63 + 32) = v62;
        unint64_t v146 = v63;
        specialized Array._endMutation()();
        unint64_t v64 = v146;
        unint64_t v57 = v62;
        uint64_t v65 = v144;
        uint64_t v66 = sub_10053B340(v64, v126);
        uint64_t v144 = v65;
        if (v65)
        {

          swift_bridgeObjectRelease();
          sub_1000966BC(v55, &qword_100919270);
          return swift_bridgeObjectRelease();
        }
        unint64_t v58 = v66;
        swift_bridgeObjectRelease();
        if (!(v58 >> 62))
        {
          uint64_t v67 = v140;
          if (*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_25:
            if ((v58 & 0xC000000000000001) != 0)
            {
              uint64_t v68 = v37;
              id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_68;
              }
              uint64_t v68 = v37;
              id v69 = *(id *)(v58 + 32);
            }
            uint64_t v70 = v69;
            os_log_t v59 = v142;
            swift_bridgeObjectRelease();

LABEL_31:
            char v71 = REMAccountsListDataView.FetchOptions.fetchHashtagLabels.getter();
            id v72 = v122;
            if (v71)
            {
              type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation();
              id v73 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
              uint64_t v74 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v139, 1, 1, v74);
              REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.init(sortingStyle:)();
              uint64_t v75 = v144;
              sub_100571DFC();
              uint64_t v144 = v75;
              if (v75)
              {
                ((void (**)(char *, unint64_t))v59)[1](v72, v60);

LABEL_34:
                sub_1000966BC((uint64_t)v123, &qword_100919270);
                return swift_bridgeObjectRelease();
              }
              ((void (**)(char *, unint64_t))v59)[1](v72, v60);
            }
            uint64_t v76 = v127;
            uint64_t v77 = v144;
            sub_10046D56C((uint64_t)v127, v143);
            if (v77)
            {
              swift_bridgeObjectRelease();

              sub_1000966BC((uint64_t)v123, &qword_100919270);
              return swift_bridgeObjectRelease();
            }
            int v79 = v78;
            sub_10046D8C4(v76, v126, v68, (unint64_t *)&v147);
            uint64_t v144 = 0;
            if ((REMAccountsListDataView.FetchOptions.fetchUserDefinedVisibilityOfPredefinedSmartLists.getter() & 1) != 0
              && (id v80 = (void *)sub_100349CDC()) != 0)
            {
              os_log_type_t v81 = v80;
              uint64_t v82 = v144;
              uint64_t v83 = sub_10064C930(v127, v80);
              uint64_t v144 = v82;
              uint64_t v84 = (uint64_t)v121;
              if (v82)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                goto LABEL_34;
              }
              unint64_t v141 = v83;
              uint64_t v142 = (void (**)(void, void))v70;
            }
            else
            {
              uint64_t v142 = (void (**)(void, void))v70;
              unint64_t v141 = sub_1002EDA18((uint64_t)_swiftEmptyArrayStorage);
              uint64_t v84 = (uint64_t)v121;
            }
            uint64_t v143 = v147;
            sub_10046F1CC((uint64_t)v123, v84);
            uint64_t v85 = v84;
            uint64_t v86 = v133;
            id v87 = v134;
            int v88 = (*(uint64_t (**)(uint64_t, uint64_t, id))(v133 + 48))(v85, 1, v134);
            LODWORD(v139) = v79;
            if (v88 == 1)
            {
              static REMAccountsListDataView.ReminderCounts.zero.getter();
              sub_1000966BC(v85, &qword_100919270);
            }
            else
            {
              (*(void (**)(char *, uint64_t, id))(v86 + 32))(v132, v85, v87);
            }
            uint64_t v51 = v142;
            REMAccountsListDataView.Model.init(accounts:defaultList:reminderCounts:hashtagLabels:smartListHashtagLabels:userDefinedVisibilityOfPredefinedSmartLists:orderedPinnedLists:)();
            id v89 = [v145 fetchResultTokenToDiffAgainst];
            if (v89)
            {
              uint64_t v90 = v89;
              unsigned int v91 = v67;
              uint64_t v92 = v144;
              sub_10046F234(v89, v127);
              uint64_t v93 = v136;
              uint64_t v144 = v92;
              uint64_t v94 = v135;
              if (v92)
              {

                (*(void (**)(char *, uint64_t))(v94 + 8))(v138, v93);
                return sub_1000966BC((uint64_t)v123, &qword_100919270);
              }

LABEL_53:
              REMAccountsListDataView.Diff.init(updatedAccountObjectIDs:updatedListObjectIDs:)();
              sub_100094134(&qword_100919278);
              uint64_t v95 = *(void *)(sub_100094134(&qword_100919280) - 8);
              uint64_t v96 = *(void *)(v95 + 72);
              unint64_t v97 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
              uint64_t v98 = swift_allocObject();
              *(_OWORD *)(v98 + 16) = xmmword_100776E80;
              unint64_t v99 = v98 + v97;
              if (v125)
              {
                uint64_t v100 = type metadata accessor for REMAccountsListDataView.CachableProperty();
                (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
              }
              else
              {
                uint64_t v101 = enum case for REMAccountsListDataView.CachableProperty.reminderCounts(_:);
                uint64_t v102 = type metadata accessor for REMAccountsListDataView.CachableProperty();
                uint64_t v103 = *(void *)(v102 - 8);
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v103 + 104))(v99, v101, v102);
                (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v103 + 56))(v99, 0, 1, v102);
              }
              uint64_t v104 = v128;
              uint64_t v105 = v99 + v96;
              id v134 = v51;
              if (v139)
              {
                uint64_t v106 = type metadata accessor for REMAccountsListDataView.CachableProperty();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v105, 1, 1, v106);
              }
              else
              {
                uint64_t v107 = enum case for REMAccountsListDataView.CachableProperty.smartListHashtagLabels(_:);
                uint64_t v108 = type metadata accessor for REMAccountsListDataView.CachableProperty();
                uint64_t v109 = *(void *)(v108 - 8);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 104))(v105, v107, v108);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v109 + 56))(v105, 0, 1, v108);
              }
              unint64_t v146 = v98;
              sub_100094134(&qword_100919288);
              type metadata accessor for REMAccountsListDataView.CachableProperty();
              sub_1000967F4(&qword_100919290, &qword_100919288);
              uint64_t v110 = Sequence.removingNils<A>()();
              swift_bridgeObjectRelease();
              sub_100126EA0(v110);
              swift_bridgeObjectRelease();
              uint64_t v111 = v135;
              uint64_t v112 = v136;
              uint64_t v113 = v91;
              unint64_t v114 = v138;
              (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v113, v138, v136);
              uint64_t v116 = v130;
              uint64_t v115 = v131;
              uint64_t v117 = v104;
              uint64_t v118 = v137;
              (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v117, v137, v131);
              REMAccountsListDataView.Invocation.Result.init(model:outdatedProperties:diff:)();

              (*(void (**)(char *, uint64_t))(v116 + 8))(v118, v115);
              (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v112);
              return sub_1000966BC((uint64_t)v123, &qword_100919270);
            }
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
            {
              unsigned int v91 = v67;
              goto LABEL_53;
            }
LABEL_68:
            if (_CocoaArrayWrapper.endIndex.getter())
            {
              sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
            }
            else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
            {
LABEL_73:
              unsigned int v91 = v140;
              goto LABEL_53;
            }
            if (_CocoaArrayWrapper.endIndex.getter()) {
              sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
            }
            goto LABEL_73;
          }
LABEL_65:
          uint64_t v68 = v37;
          swift_bridgeObjectRelease();

          uint64_t v70 = 0;
          os_log_t v59 = v142;
          goto LABEL_31;
        }
LABEL_64:
        swift_bridgeObjectRetain();
        uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v67 = v140;
        if (v119) {
          goto LABEL_25;
        }
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t v60 = v141;
      os_log_t v59 = v142;
      if (v58) {
        goto LABEL_18;
      }
    }
    uint64_t v68 = v37;
    swift_bridgeObjectRelease();
    uint64_t v70 = 0;
    uint64_t v67 = v140;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_10045E69C(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if ((REMAccountsListDataView.FetchOptions.fetchAccounts.getter() & 1) == 0) {
    return (uint64_t)v11;
  }
  id v44 = a2;
  uint64_t v45 = v8;
  id v12 = (void *)sub_1003AD42C(6uLL, 0, 7);
  if (qword_100907438 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)sub_1003BC0CC(qword_1009421E0, 0, 0, (uint64_t)v12);
  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();

  if (v3) {
    return (uint64_t)v11;
  }
  if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
  {
    unint64_t v37 = swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)sub_100209D74(v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = v45;
  uint64_t v47 = v15;
  sub_1006891D4(&v47);
  id v41 = 0;
  uint64_t v42 = a1;
  uint64_t v43 = v4;
  swift_bridgeObjectRelease();
  uint64_t v17 = v47;
  type metadata accessor for REMAccountStorageCDIngestor();
  swift_initStackObject();
  if (qword_100907430 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10008E2DC(v7, (uint64_t)qword_100916CC0);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v10, v18, v7);
  uint64_t v46 = v17;
  uint64_t v47 = v17;
  __chkstk_darwin(v19);
  *(&v40 - 2) = (uint64_t)v10;
  sub_100094134(&qword_100910070);
  sub_1000963CC(0, &qword_100910180);
  sub_1000967F4((unint64_t *)&qword_1009133E0, &qword_100910070);
  id v20 = v41;
  uint64_t v21 = Sequence.map<A>(skippingError:_:)();
  if (v20)
  {
    swift_errorRelease();
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v22 = (void *)v21;
  }
  uint64_t v23 = v42;
  uint64_t v24 = v43;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v7);
  id v25 = v44;
  uint64_t v26 = sub_10046B6A8((unint64_t)v22, (uint64_t)v25);
  uint64_t v45 = 0;
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v47 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = v46;
  if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x4000000000000000) == 0)
  {
    uint64_t v28 = *(void *)(v46 + 16);
    swift_retain();
    if (v28) {
      goto LABEL_16;
    }
LABEL_29:
    uint64_t v35 = swift_release();
    char v36 = _swiftEmptyArrayStorage;
LABEL_30:
    __chkstk_darwin(v35);
    *(&v40 - 4) = v24;
    *(&v40 - 3) = v23;
    *(&v40 - 2) = (uint64_t)v25;
    *(&v40 - 1) = (uint64_t)v36;
    sub_10045CF14(v27, (uint64_t)v26, (void (*)(uint64_t, id))sub_100470618, (uint64_t)(&v40 - 6));
    uint64_t v11 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v11;
  }
  swift_retain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  if (!v28) {
    goto LABEL_29;
  }
LABEL_16:
  id v41 = v25;
  id v44 = v26;
  if (v28 >= 1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = v27 & 0xC000000000000001;
    do
    {
      if (v30) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(v27 + 8 * v29 + 32);
      }
      id v32 = v31;
      id v33 = [v31 objectID];
      id v34 = [v33 persistentStore];

      if (v34)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v27 = v46;
      }
      ++v29;
    }
    while (v28 != v29);
    uint64_t v35 = swift_release();
    char v36 = (void *)v47;
    uint64_t v23 = v42;
    uint64_t v24 = v43;
    uint64_t v26 = v44;
    id v25 = v41;
    goto LABEL_30;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10045EC04(uint64_t a1, char *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, objc_class *a8)
{
  id v33 = a8;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  id v31 = a2;
  id v32 = a4;
  unint64_t v37 = (void *)a3;
  uint64_t v9 = sub_100094134(&qword_1009192A8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v30 = (char *)&v30 - v17;
  uint64_t Style = type metadata accessor for REMAccountsListDataView.CachablePropertyFetchStyle();
  uint64_t v19 = *(void *)(Style - 8);
  __chkstk_darwin(Style);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMAccountsListDataView.FetchOptions.fetchReminderCounts.getter();
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, Style);
  if (v22 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.doNotFetch(_:))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
    char v23 = 0;
    return v23 & 1;
  }
  if (v22 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.cachedOrStore(_:))
  {
    sub_10045F004(v36, (uint64_t)v11);
    uint64_t v24 = sub_100094134(&qword_1009192B0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v11, 1, v24) != 1)
    {
      uint64_t v28 = *(void **)&v11[*(int *)(v24 + 48)];
      uint64_t v29 = v30;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v30, v11, v12);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, v29, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      char v23 = static NSObject.== infix(_:_:)();

      (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v12);
      return v23 & 1;
    }
    sub_1000966BC((uint64_t)v11, &qword_1009192A8);
LABEL_7:
    id v25 = v37;
    char v23 = v34;
    uint64_t v26 = v38;
    sub_10045F4F8(v31, (uint64_t)v37, v32, v33, (uint64_t)v15);
    if (!v26)
    {
      sub_100462F30(v25, v35, v36);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v15, v12);
      char v23 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    return v23 & 1;
  }
  if (v22 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.store(_:)) {
    goto LABEL_7;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_10045F004@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_1009192B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = _s5CacheVMa();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(ObjectType, a1);
  if (v13 >> 60 == 15)
  {
    if (qword_1009075F8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_100919168);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "REMAccountsListDataView.Invocation no cache", v17, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = sub_100094134(&qword_1009192B0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    return v19(a2, 1, 1, v18);
  }
  else
  {
    uint64_t v21 = v12;
    unint64_t v22 = v13;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100470490(&qword_1009192C0, (void (*)(uint64_t))_s5CacheVMa);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    swift_release();
    sub_100097F20(v21, v22);
    sub_1004704D8((uint64_t)v6, (uint64_t)v10);
    uint64_t v23 = sub_100094134(&qword_1009192B0);
    uint64_t v24 = *(int *)(v23 + 48);
    uint64_t v25 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 32))(a2, v10, v25);
    *(void *)(a2 + v24) = *(void *)&v10[*(int *)(v7 + 20)];
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a2, 0, 1, v23);
  }
}

uint64_t sub_10045F4F8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, objc_class *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v303 = a2;
  uint64_t v298 = a5;
  uint64_t v364 = type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer();
  uint64_t v355 = *(void *)(v364 - 8);
  __chkstk_darwin(v364);
  v297 = (char *)&v290 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v296 = (char *)&v290 - v11;
  __chkstk_darwin(v12);
  v295 = (char *)&v290 - v13;
  __chkstk_darwin(v14);
  v294 = (char *)&v290 - v15;
  __chkstk_darwin(v16);
  v351 = (char *)&v290 - v17;
  __chkstk_darwin(v18);
  v329 = (char *)&v290 - v19;
  __chkstk_darwin(v20);
  v354 = (char *)&v290 - v21;
  __chkstk_darwin(v22);
  v331 = (char *)&v290 - v23;
  uint64_t v24 = sub_100094134(&qword_1009192D0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v290 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v332 = (uint64_t)&v290 - v28;
  __chkstk_darwin(v29);
  v340 = (char *)&v290 - v30;
  __chkstk_darwin(v31);
  uint64_t v336 = (uint64_t)&v290 - v32;
  uint64_t v301 = type metadata accessor for REMFeatureFlags();
  uint64_t v300 = *(void *)(v301 - 8);
  __chkstk_darwin(v301);
  v299 = (char *)&v290 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v324 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v324);
  v323 = (char *)&v290 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v346 = (char *)&v290 - v36;
  uint64_t v325 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder();
  unint64_t v347 = *(void *)(v325 - 8);
  __chkstk_darwin(v325);
  v345 = (char *)&v290 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v360 = (void (**)(char *, uint64_t, uint64_t))((char *)&v290 - v39);
  uint64_t v365 = type metadata accessor for UUID();
  uint64_t v356 = *(void *)(v365 - 8);
  __chkstk_darwin(v365);
  v333 = (char *)&v290 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v353 = (char *)&v290 - v42;
  __chkstk_darwin(v43);
  uint64_t v328 = (uint64_t)&v290 - v44;
  __chkstk_darwin(v45);
  v350 = (uint64_t *)((char *)&v290 - v46);
  __chkstk_darwin(v47);
  v361 = (char *)&v290 - v48;
  __chkstk_darwin(v49);
  v348 = (char *)&v290 - v50;
  uint64_t v317 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v316 = *(void *)(v317 - 8);
  __chkstk_darwin(v317);
  v315 = (char *)&v290 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v338 = type metadata accessor for Calendar.RepeatedTimePolicy();
  *(void *)&long long v314 = *(void *)(v338 - 8);
  __chkstk_darwin(v338);
  v313 = (char *)&v290 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = (void (**)(unint64_t, char *, uint64_t))type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v310 = (uint64_t)*(v335 - 1);
  __chkstk_darwin(v335);
  v326 = (char *)&v290 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v54 - 8);
  v306 = (char *)&v290 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100094134(&qword_100916990);
  __chkstk_darwin(v56 - 8);
  v304 = (char *)&v290 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v309 = type metadata accessor for DateComponents();
  uint64_t v308 = *(void *)(v309 - 8);
  __chkstk_darwin(v309);
  v362 = (char *)&v290 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v320 = type metadata accessor for Calendar();
  uint64_t v318 = *(void *)(v320 - 8);
  __chkstk_darwin(v320);
  v359 = (char *)&v290 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v60 - 8);
  v322 = (char *)&v290 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v307 = (char *)&v290 - v63;
  uint64_t v344 = type metadata accessor for Date();
  uint64_t v312 = *(void *)(v344 - 8);
  __chkstk_darwin(v344);
  v311 = (char *)&v290 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v305 = (char *)&v290 - v66;
  __chkstk_darwin(v67);
  v321 = (char *)&v290 - v68;
  __chkstk_darwin(v69);
  v327 = (char *)&v290 - v70;
  PredicateType = (unint64_t *)type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  unint64_t v72 = *(PredicateType - 1);
  __chkstk_darwin(PredicateType);
  v352 = (void (**)(unint64_t, uint64_t))((char *)&v290 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = _s10PredicatesOMa(0);
  __chkstk_darwin(v74);
  uint64_t v337 = (uint64_t)&v290 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v357 = a1;
  Class v358 = a4;
  unint64_t v76 = sub_1003AFCD0(0, a1, a4);
  v334 = v26;
  v293 = a3;
  unint64_t v363 = v72;
  if (v5)
  {
    v343 = (char *)v74;
    v349 = 0;
    if (qword_1009075F8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_212;
  }
  unint64_t v215 = (unint64_t)sub_10064A824(v76, a3);
  v349 = 0;
  swift_bridgeObjectRelease();
  while (2)
  {
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = sub_100094134(&qword_1009192D8);
    uint64_t v84 = *(char **)(v72 + 72);
    uint64_t v85 = *(unsigned __int8 *)(v72 + 80);
    unint64_t v86 = (v85 + 32) & ~v85;
    unint64_t v87 = v83;
    unint64_t isUniquelyReferenced_nonNull_native = v85 | 7;
    uint64_t v89 = swift_allocObject();
    *(_OWORD *)(v89 + 16) = xmmword_100776E60;
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter();
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter();
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter();
    uint64_t v90 = sub_100126B68(v89);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v373 = v90;
    if (v215 >> 62) {
      goto LABEL_206;
    }
    uint64_t v91 = *(void *)((v215 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
    v366 = PredicateType;
    v343 = (char *)v87;
    v342 = (void (*)(void *@<X8>))isUniquelyReferenced_nonNull_native;
    v341 = (void **)&v84[v86];
    unint64_t v339 = v86;
    if (v91)
    {
      uint64_t v92 = swift_allocObject();
      *(_OWORD *)(v92 + 16) = xmmword_100776E40;
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter();
      sub_10032F458(v92);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    swift_bridgeObjectRetain();
    uint64_t v93 = v357;
    uint64_t v94 = swift_bridgeObjectRetain();
    uint64_t v95 = v349;
    uint64_t v96 = sub_10046CD80(v94, v215, v93);
    swift_bridgeObjectRelease();

    v372[0] = sub_1001C0698(v96);
    sub_100094134(&qword_1009192E0);
    sub_1000967F4(&qword_1009192E8, &qword_1009192E0);
    uint64_t v97 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    v372[3] = v97;
    swift_bridgeObjectRetain();
    v372[0] = sub_1001C06B0(v96);
    uint64_t v98 = Sequence.mapToSet<A>(_:)();
    swift_bridgeObjectRelease();
    v372[2] = v98;
    swift_bridgeObjectRetain();
    unint64_t v99 = (void *)sub_1002ED384((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v100 = v93;
    uint64_t v101 = sub_10046CF8C(v99, v215, v100);
    v357 = v95;
    swift_bridgeObjectRelease();
    v319 = v100;

    uint64_t v102 = (uint64_t)v352;
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter();
    LOBYTE(v100) = sub_1001CC0F4(v102, v96);
    (*(void (**)(uint64_t, unint64_t *))(v363 + 8))(v102, v366);
    uint64_t v103 = swift_allocObject();
    *(_OWORD *)(v103 + 16) = xmmword_100776E40;
    swift_bridgeObjectRetain();
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter();
    uint64_t v104 = sub_10065F97C(v103, v96);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v330 = (uint64_t)v101;
    if (v100)
    {
      swift_bridgeObjectRelease();
      sub_10031DC68(v372, 1953720684, 0xE400000000000000);
      swift_bridgeObjectRelease();
      if (v101[2])
      {
        sub_10031DC68(v372, 0x746E756F636361, 0xE700000000000000);
        swift_bridgeObjectRelease();
      }
      uint64_t v105 = (void *)sub_10038F1F0();
      uint64_t v106 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      id v107 = [objc_allocWithZone((Class)NSFetchRequest) init];
      v352 = (void (**)(unint64_t, uint64_t))v106;
      id v108 = [(id)swift_getObjCClassFromMetadata() entity];
      [v107 setEntity:v108];

      if (v358)
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
        v109.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      }
      else
      {
        v109.super.Class isa = 0;
      }
      [v107 setAffectedStores:v109.super.isa];

      [v107 setPredicate:v105];
      [v107 setReturnsDistinctResults:0];
      uint64_t v125 = sub_100209D8C(v97);
      swift_bridgeObjectRelease();
      sub_1001FFC40((uint64_t)v125);
      swift_release();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v107 setPropertiesToFetch:isa];

      uint64_t v127 = swift_bridgeObjectRetain();
      sub_100209D8C(v127);
      swift_bridgeObjectRelease();
      Class v128 = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v107 setRelationshipKeyPathsForPrefetching:v128];

      if (qword_1009075F8 != -1) {
        swift_once();
      }
      uint64_t v129 = type metadata accessor for Logger();
      sub_10008E2DC(v129, (uint64_t)qword_100919168);
      swift_bridgeObjectRetain();
      uint64_t v130 = Logger.logObject.getter();
      os_log_type_t v131 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v130, v131))
      {
        unint64_t v363 = v104;
        id v132 = (uint8_t *)swift_slowAlloc();
        v372[0] = swift_slowAlloc();
        *(_DWORD *)id v132 = 136315138;
        Class v358 = (Class)(v132 + 4);
        sub_100470490(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
        swift_bridgeObjectRetain();
        uint64_t v133 = Set.description.getter();
        unint64_t v135 = v134;
        swift_bridgeObjectRelease();
        v370 = (void *)sub_1000C51B8(v133, v135, v372);
        uint64_t v104 = v363;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "Computing reminders count in every list by fetching reminders as an array of REMCDReminder {postFetchPredicateTypes: %s}", v132, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v122 = v365;
      id v136 = v357;
      uint64_t v137 = NSManagedObjectContext.fetch<A>(_:)();
      if (v136)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      unint64_t v139 = v137;
      swift_bridgeObjectRetain();
      uint64_t v140 = (void (*)(id, uint64_t))sub_10057EFFC;
      unint64_t v141 = &v367;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10031DC68(v372, 0x6564692E7473696CLL, 0xEF7265696669746ELL);
      swift_bridgeObjectRelease();
      if (v101[2])
      {
        sub_10031DC68(v372, 0xD000000000000012, 0x80000001007CE140);
        swift_bridgeObjectRelease();
      }
      uint64_t v110 = (void *)sub_10038F1F0();
      id v107 = sub_100520998(v358, (uint64_t)v110);

      [v107 setReturnsDistinctResults:0];
      uint64_t v111 = swift_bridgeObjectRetain();
      uint64_t v112 = sub_100209D8C(v111);
      swift_bridgeObjectRelease();
      sub_1001FFC40((uint64_t)v112);
      swift_release();
      Class v113 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v107 setPropertiesToFetch:v113];

      sub_100209D8C(v98);
      swift_bridgeObjectRelease();
      Class v114 = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      [v107 setRelationshipKeyPathsForPrefetching:v114];

      if (qword_1009075F8 != -1) {
        swift_once();
      }
      uint64_t v115 = type metadata accessor for Logger();
      sub_10008E2DC(v115, (uint64_t)qword_100919168);
      swift_bridgeObjectRetain();
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v116, v117))
      {
        unint64_t v363 = v104;
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        v372[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 136315138;
        Class v358 = (Class)(v118 + 4);
        sub_100470490(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
        swift_bridgeObjectRetain();
        uint64_t v119 = Set.description.getter();
        unint64_t v121 = v120;
        swift_bridgeObjectRelease();
        v370 = (void *)sub_1000C51B8(v119, v121, v372);
        uint64_t v104 = v363;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Computing reminders count in every list by fetching reminders as dictionaries {postFetchPredicateTypes: %s}", v118, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v122 = v365;
      sub_1000963CC(0, &qword_10090E4F0);
      id v123 = v357;
      uint64_t v124 = NSManagedObjectContext.fetch<A>(_:)();
      if (v123)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10047053C(v337, _s10PredicatesOMa);
      }
      unint64_t v139 = v124;
      swift_bridgeObjectRetain();
      uint64_t v140 = (void (*)(id, uint64_t))REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(dictionary:forEvaluatingAgainst:);
      unint64_t v141 = &v371;
    }
    uint64_t v292 = sub_10046B80C(v139, v104, (uint64_t)v141, v140);
    v343 = 0;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    Date.init()();
    id v142 = [self currentCalendar];
    static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v318 + 56))(v304, 1, 1, v320);
    uint64_t v143 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v306, 1, 1, v143);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    uint64_t v144 = v310;
    (*(void (**)(char *, void, void))(v310 + 104))(v326, enum case for Calendar.MatchingPolicy.nextTime(_:), v335);
    uint64_t v145 = v314;
    unint64_t v146 = v313;
    (*(void (**)(char *, void, uint64_t))(v314 + 104))(v313, enum case for Calendar.RepeatedTimePolicy.first(_:), v338);
    uint64_t v147 = v316;
    unint64_t v148 = v315;
    uint64_t v149 = v317;
    (*(void (**)(char *, void, uint64_t))(v316 + 104))(v315, enum case for Calendar.SearchDirection.forward(_:), v317);
    uint64_t v150 = (uint64_t)v307;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v338);
    (*(void (**)(char *, void (**)(unint64_t, char *, uint64_t)))(v144 + 8))(v326, v335);
    (*(void (**)(char *, uint64_t))(v308 + 8))(v362, v309);
    (*(void (**)(char *, uint64_t))(v318 + 8))(v359, v320);
    uint64_t v151 = v312;
    id v152 = v305;
    uint64_t v153 = v344;
    (*(void (**)(char *, char *, uint64_t))(v312 + 16))(v305, v327, v344);
    uint64_t v154 = *(char **)(v151 + 48);
    uint64_t v316 = v151 + 48;
    v315 = v154;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v154)(v150, 1, v153) == 1)
    {
      v306 = *(char **)(v151 + 32);
      ((void (*)(char *, char *, uint64_t))v306)(v321, v152, v153);
      sub_1000966BC(v150, (uint64_t *)&unk_100909A40);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v151 + 8))(v152, v153);
      v306 = *(char **)(v151 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v306)(v321, v150, v153);
    }
    unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
    uint64_t v155 = v292;
    unint64_t v156 = v347;
    v326 = (char *)self;
    id v157 = [v326 siriFoundInAppsListID];
    id v158 = [v157 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    id v159 = [self daemonUserDefaults];
    LODWORD(v305) = [v159 showRemindersAsOverdue];

    v372[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v370 = _swiftEmptyDictionarySingleton;
    uint64_t v161 = *(unint64_t **)(v155 + 16);
    unint64_t v215 = (unint64_t)v361;
    if (!v161)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v214 = 0;
      uint64_t v320 = 0;
      unint64_t v339 = 0;
      uint64_t v291 = 0;
      uint64_t v310 = 0;
      v307 = 0;
      uint64_t v338 = 0;
      uint64_t v308 = 0;
      uint64_t v317 = 0;
      uint64_t v309 = 0;
      uint64_t v318 = 0;
      PredicateType = _swiftEmptyDictionarySingleton;
      v349 = (char *)_swiftEmptyDictionarySingleton;
      uint64_t v213 = v319;
      goto LABEL_103;
    }
    v342 = 0;
    uint64_t v320 = 0;
    unint64_t v339 = 0;
    uint64_t v291 = 0;
    uint64_t v310 = 0;
    v307 = 0;
    uint64_t v338 = 0;
    uint64_t v308 = 0;
    uint64_t v317 = 0;
    uint64_t v309 = 0;
    uint64_t v318 = 0;
    v359 = (char *)(v356 + 48);
    unint64_t v162 = *(void *)(v156 + 16);
    unint64_t v86 = v156 + 16;
    unint64_t v363 = v162;
    unint64_t v87 = v155 + ((*(unsigned __int8 *)(v86 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 64));
    v335 = (void (**)(unint64_t, char *, uint64_t))(v356 + 32);
    v304 = (char *)(v312 + 32);
    v302 = (void (**)(char *, uint64_t))(v312 + 8);
    v341 = (void **)(v356 + 16);
    v352 = (void (**)(unint64_t, uint64_t))(v356 + 8);
    Class v358 = (Class)(v86 - 8);
    v357 = *(char **)(v86 + 56);
    PredicateType = _swiftEmptyDictionarySingleton;
    *(void *)&long long v160 = 136446210;
    long long v314 = v160;
    v313 = (char *)&type metadata for Any + 8;
    v349 = (char *)_swiftEmptyDictionarySingleton;
    uint64_t v84 = v346;
    uint64_t v163 = v325;
    unint64_t v347 = v86;
    while (1)
    {
      v366 = v161;
      ((void (*)(unint64_t, unint64_t, uint64_t))v363)(isUniquelyReferenced_nonNull_native, v87, v163);
      REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.listIdentifier.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v359)(v84, 1, v122) != 1) {
        break;
      }
      v362 = (char *)PredicateType;
      sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E50);
      if (qword_1009075F8 != -1) {
        swift_once();
      }
      uint64_t v165 = type metadata accessor for Logger();
      sub_10008E2DC(v165, (uint64_t)qword_100919168);
      id v166 = v345;
      ((void (*)(char *, unint64_t, uint64_t))v363)(v345, isUniquelyReferenced_nonNull_native, v163);
      uint64_t v167 = v163;
      unint64_t v168 = Logger.logObject.getter();
      os_log_type_t v169 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v168, v169))
      {
        uint64_t v170 = swift_slowAlloc();
        unint64_t v369 = swift_slowAlloc();
        *(_DWORD *)uint64_t v170 = v314;
        REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.identifier.getter();
        uint64_t v171 = String.init<A>(describing:)();
        *(void *)(v170 + 4) = sub_1000C51B8(v171, v172, (uint64_t *)&v369);
        swift_bridgeObjectRelease();
        unint64_t v164 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))v358;
        (*(void (**)(char *, uint64_t))v358)(v166, v167);
        _os_log_impl((void *)&_mh_execute_header, v168, v169, "Reminder missing list identifier. Skipping {reminder.identifier: %{public}s}", (uint8_t *)v170, 0xCu);
        swift_arrayDestroy();
        uint64_t v84 = v346;
        swift_slowDealloc();
        uint64_t v122 = v365;
        swift_slowDealloc();
      }
      else
      {
        unint64_t v164 = *(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))v358;
        (*(void (**)(char *, uint64_t))v358)(v166, v167);
      }

      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
      v164(v360, v167);
      uint64_t v163 = v167;
      unint64_t v86 = v347;
      unint64_t v215 = (unint64_t)v361;
      PredicateType = (unint64_t *)v362;
LABEL_44:
      v87 += (unint64_t)v357;
      uint64_t v161 = (unint64_t *)((char *)v366 - 1);
      if (v366 == (unint64_t *)1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v213 = v319;
        uint64_t v214 = v342;
LABEL_103:
        id v216 = objc_allocWithZone((Class)type metadata accessor for REMRemindersListDataView.AssignedInvocation());
        uint64_t v217 = (char *)[v216 initWithFetchResultTokenToDiffAgainst:v303];
        id v218 = v343;
        CFStringRef v219 = sub_10068EB9C(v213, 0);
        uint64_t v84 = v218;
        unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v340;
        if (v218)
        {
          swift_bridgeObjectRelease();

          (*(void (**)(char *, uint64_t))(v356 + 8))(v348, v122);
          uint64_t v220 = *(void (**)(char *, uint64_t))(v312 + 8);
          uint64_t v221 = v344;
          v220(v321, v344);
          v220(v327, v221);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10047053C(v337, _s10PredicatesOMa);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100096314((uint64_t)v214);
          return sub_100096314(v320);
        }
        unint64_t v347 = (unint64_t)v219;
        v342 = v214;
        uint64_t v222 = v300;
        uint64_t v223 = v299;
        uint64_t v224 = v301;
        (*(void (**)(char *, void, uint64_t))(v300 + 104))(v299, enum case for REMFeatureFlags.recentlyDeletedList(_:), v301);
        char v225 = REMFeatureFlags.isEnabled.getter();
        uint64_t v226 = (*(uint64_t (**)(char *, uint64_t))(v222 + 8))(v223, v224);
        if ((v225 & 1) == 0)
        {
          v345 = v217;
          v346 = 0;
          goto LABEL_108;
        }
        __chkstk_darwin(v226);
        sub_100094134(&qword_10090E178);
        NSManagedObjectContext.rem_performAndWait<A>(_:)();
        uint64_t v176 = (void *)v369;
        v345 = v217;
        if (v369 >> 62) {
          goto LABEL_219;
        }
        uint64_t v122 = v365;
        v287 = v293;
        if (!*(void *)((v369 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_220;
        }
        goto LABEL_195;
      }
    }
    (*v335)(v215, v84, v122);
    sub_100470490((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      (*v352)(v215, v122);
      if (__OFADD__(v339, 1)) {
        goto LABEL_199;
      }
      ++v339;
      (*(void (**)(unint64_t, uint64_t))v358)(isUniquelyReferenced_nonNull_native, v163);
      goto LABEL_44;
    }
    char v368 = 0;
    if (__OFADD__(v338, 1)) {
      goto LABEL_198;
    }
    ++v338;
    uint64_t v84 = v322;
    REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.displayDateDate.getter();
    unint64_t v72 = v344;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v315)(v84, 1, v344) == 1)
    {
      sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909A40);
      goto LABEL_67;
    }
    id v173 = v311;
    ((void (*)(char *, char *, unint64_t))v306)(v311, v84, v72);
    if (__OFADD__(v318, 1))
    {
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      swift_once();
LABEL_4:
      uint64_t v77 = type metadata accessor for Logger();
      sub_10008E2DC(v77, (uint64_t)qword_100919168);
      swift_errorRetain();
      swift_errorRetain();
      int v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        id v80 = (uint8_t *)swift_slowAlloc();
        v372[0] = swift_slowAlloc();
        *(_DWORD *)id v80 = 136315138;
        swift_getErrorValue();
        uint64_t v81 = Error.rem_errorDescription.getter();
        uint64_t v373 = sub_1000C51B8(v81, v82, v372);
        unint64_t v72 = v363;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "REMAccountsListDataView.Invocation fetchCounts() failed to fetch custom smart lists {error: %s}", v80, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRelease();
      unint64_t v215 = (unint64_t)_swiftEmptyArrayStorage;
      continue;
    }
    break;
  }
  ++v318;
  uint64_t v174 = v173;
  char v175 = static Date.< infix(_:_:)();
  uint64_t v84 = (char *)Date._bridgeToObjectiveC()().super.isa;
  uint64_t v176 = (void *)isUniquelyReferenced_nonNull_native;
  unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)Date._bridgeToObjectiveC()().super.isa;
  char IsAll = REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.displayDateIsAllDay.getter();
  unint64_t v72 = (unint64_t)[self isDate:v84 overdueAtReferenceDate:isUniquelyReferenced_nonNull_native allDay:IsAll & 1 showAllDayRemindersAsOverdue:v305];

  (*v302)(v174, v344);
  char v368 = v72;
  if ((v175 & 1) == 0)
  {
    uint64_t v122 = v365;
    unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
    unint64_t v215 = (unint64_t)v361;
    if (v72) {
      goto LABEL_64;
    }
    goto LABEL_67;
  }
  if (!__OFADD__(v310, 1))
  {
    ++v310;
    if (v72)
    {
      BOOL v178 = __OFADD__(v291++, 1);
      uint64_t v122 = v365;
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
      unint64_t v215 = (unint64_t)v361;
      if (v178) {
        goto LABEL_218;
      }
LABEL_64:
      if (__OFADD__(v309, 1)) {
        goto LABEL_214;
      }
      ++v309;
    }
    else
    {
      uint64_t v122 = v365;
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
      unint64_t v215 = (unint64_t)v361;
    }
LABEL_67:
    uint64_t v176 = (void *)isUniquelyReferenced_nonNull_native;
    if (REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.flagged.getter())
    {
      if (__OFADD__(v317, 1)) {
        goto LABEL_208;
      }
      ++v317;
      if (v368 == 1)
      {
        if (__OFADD__(v308, 1)) {
          goto LABEL_215;
        }
        ++v308;
      }
    }
    uint64_t v84 = (char *)*v341;
    uint64_t v179 = (uint64_t)v350;
    ((void (*)(void *, unint64_t, uint64_t))*v341)(v350, v215, v122);
    sub_100096314((uint64_t)v342);
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v369 = (unint64_t)PredicateType;
    unint64_t v72 = sub_100306EC4(v179);
    unint64_t v181 = PredicateType[2];
    BOOL v182 = (v180 & 1) == 0;
    uint64_t v183 = v181 + v182;
    if (__OFADD__(v181, v182)) {
      goto LABEL_200;
    }
    char v184 = v180;
    if ((uint64_t)PredicateType[3] >= v183)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100318774();
      }
    }
    else
    {
      sub_10030E224(v183, isUniquelyReferenced_nonNull_native);
      unint64_t v185 = sub_100306EC4((uint64_t)v350);
      if ((v184 & 1) != (v186 & 1)) {
        goto LABEL_224;
      }
      unint64_t v72 = v185;
    }
    PredicateType = (unint64_t *)v369;
    swift_bridgeObjectRelease();
    if (v184)
    {
      swift_bridgeObjectRetain();
      uint64_t v122 = v365;
    }
    else
    {
      PredicateType[(v72 >> 6) + 8] |= 1 << v72;
      unint64_t v187 = PredicateType[6] + *(void *)(v356 + 72) * v72;
      swift_bridgeObjectRetain();
      uint64_t v122 = v365;
      ((void (*)(unint64_t, void *, uint64_t))v84)(v187, v350, v365);
      *(void *)(PredicateType[7] + 8 * v72) = 0;
      unint64_t v188 = PredicateType[2];
      BOOL v178 = __OFADD__(v188, 1);
      unint64_t v189 = v188 + 1;
      if (v178) {
        goto LABEL_209;
      }
      PredicateType[2] = v189;
    }
    unint64_t v190 = PredicateType[7];
    swift_bridgeObjectRelease();
    uint64_t v191 = *(void *)(v190 + 8 * v72);
    BOOL v178 = __OFADD__(v191, 1);
    uint64_t v192 = v191 + 1;
    if (v178) {
      goto LABEL_201;
    }
    *(void *)(v190 + 8 * v72) = v192;
    NSString v193 = *v352;
    uint64_t v194 = ((uint64_t (*)(void *, uint64_t))*v352)(v350, v122);
    if (v368)
    {
      uint64_t v195 = v328;
      ((void (*)(uint64_t, char *, uint64_t))v84)(v328, v361, v122);
      sub_100096314(v320);
      uint64_t v196 = (uint64_t)v349;
      int v197 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v369 = v196;
      unint64_t v72 = sub_100306EC4(v195);
      uint64_t v199 = *(void *)(v196 + 16);
      BOOL v200 = (v198 & 1) == 0;
      uint64_t v201 = v199 + v200;
      if (__OFADD__(v199, v200)) {
        goto LABEL_210;
      }
      char v202 = v198;
      if (*(void *)(v196 + 24) >= v201)
      {
        if ((v197 & 1) == 0) {
          sub_100318774();
        }
      }
      else
      {
        sub_10030E224(v201, v197);
        unint64_t v203 = sub_100306EC4(v328);
        if ((v202 & 1) != (v204 & 1)) {
          goto LABEL_224;
        }
        unint64_t v72 = v203;
      }
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
      uint64_t v176 = (void *)v369;
      swift_bridgeObjectRelease();
      if (v202)
      {
        uint64_t v205 = swift_bridgeObjectRetain();
        uint64_t v122 = v365;
      }
      else
      {
        v176[(v72 >> 6) + 8] |= 1 << v72;
        unint64_t v206 = v176[6] + *(void *)(v356 + 72) * v72;
        swift_bridgeObjectRetain();
        uint64_t v122 = v365;
        ((void (*)(unint64_t, uint64_t, uint64_t))v84)(v206, v328, v365);
        *(void *)(v176[7] + 8 * v72) = 0;
        uint64_t v207 = v176[2];
        BOOL v178 = __OFADD__(v207, 1);
        uint64_t v208 = v207 + 1;
        if (v178) {
          goto LABEL_216;
        }
        uint64_t v205 = (uint64_t)v176;
        v176[2] = v208;
      }
      uint64_t v176 = *(void **)(v205 + 56);
      v349 = (char *)v205;
      swift_bridgeObjectRelease();
      uint64_t v209 = v176[v72];
      BOOL v178 = __OFADD__(v209, 1);
      uint64_t v210 = v209 + 1;
      uint64_t v84 = v346;
      if (v178) {
        goto LABEL_211;
      }
      v176[v72] = v210;
      uint64_t v194 = ((uint64_t (*)(uint64_t, uint64_t))v193)(v328, v122);
      if (v368 == 1)
      {
        if (__OFADD__(v307, 1)) {
          goto LABEL_217;
        }
        ++v307;
      }
      uint64_t v320 = (uint64_t)sub_10046355C;
    }
    else
    {
      uint64_t v84 = v346;
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v360;
    }
    __chkstk_darwin(v194);
    long long v211 = v343;
    sub_10046B43C(v330, (void (*)(char *, uint64_t))sub_10047059C);
    v343 = v211;
    v212 = v361;
    v193((unint64_t)v361, v122);
    unint64_t v215 = (unint64_t)v212;
    uint64_t v163 = v325;
    (*(void (**)(unint64_t, uint64_t))v358)(isUniquelyReferenced_nonNull_native, v325);
    v342 = sub_10046355C;
    goto LABEL_44;
  }
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  swift_bridgeObjectRetain();
  uint64_t v289 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v122 = v365;
  v287 = v293;
  if (v289)
  {
LABEL_195:
    id v288 = v287;
    v343 = (char *)sub_10046D438((uint64_t)_swiftEmptyDictionarySingleton, (unint64_t)v176, v288);
    v346 = v84;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
LABEL_220:
  v346 = v84;
  swift_bridgeObjectRelease();
LABEL_108:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v343 = (char *)_swiftEmptyDictionarySingleton;
LABEL_109:
  swift_bridgeObjectRelease();
  id v227 = 0;
  unint64_t v228 = PredicateType[8];
  v350 = PredicateType + 8;
  uint64_t v229 = 1 << *((unsigned char *)PredicateType + 32);
  uint64_t v230 = -1;
  if (v229 < 64) {
    uint64_t v230 = ~(-1 << v229);
  }
  unint64_t v215 = v230 & v228;
  v359 = (char *)(v356 + 16);
  v360 = (void (**)(char *, uint64_t, uint64_t))(v356 + 32);
  v366 = (unint64_t *)(v355 + 32);
  v357 = (char *)(v355 + 40);
  unint64_t v363 = v356 + 8;
  unint64_t v87 = (unint64_t)_swiftEmptyDictionarySingleton;
  Class v358 = (Class)((unint64_t)(v229 + 63) >> 6);
  v341 = (void **)((char *)v358 - 1);
  unint64_t v86 = (unint64_t)&unk_1009192F0;
  v362 = (char *)PredicateType;
  while (2)
  {
    if (v215)
    {
      unint64_t v231 = __clz(__rbit64(v215));
      v215 &= v215 - 1;
      v361 = v227;
      unint64_t v232 = v231 | ((void)v227 << 6);
      goto LABEL_116;
    }
    uint64_t v235 = (uint64_t)(v227 + 1);
    if (__OFADD__(v227, 1)) {
      goto LABEL_204;
    }
    if (v235 >= (uint64_t)v358)
    {
      v361 = v227;
      goto LABEL_122;
    }
    unint64_t v236 = v350[v235];
    if (!v236)
    {
      uint64_t v256 = (uint64_t)(v227 + 2);
      if ((uint64_t)(v227 + 2) >= (uint64_t)v358)
      {
LABEL_150:
        v361 = (char *)v235;
        goto LABEL_122;
      }
      unint64_t v236 = v350[v256];
      if (v236)
      {
LABEL_137:
        uint64_t v235 = v256;
        goto LABEL_120;
      }
      if ((uint64_t)(v227 + 3) >= (uint64_t)v358)
      {
        v361 = v227 + 2;
      }
      else
      {
        unint64_t v236 = v350[(void)(v227 + 3)];
        if (v236)
        {
          uint64_t v235 = (uint64_t)(v227 + 3);
          goto LABEL_120;
        }
        uint64_t v256 = (uint64_t)(v227 + 4);
        if ((uint64_t)(v227 + 4) < (uint64_t)v358)
        {
          unint64_t v236 = v350[v256];
          if (v236) {
            goto LABEL_137;
          }
          while (1)
          {
            uint64_t v235 = v256 + 1;
            if (__OFADD__(v256, 1))
            {
              __break(1u);
              goto LABEL_222;
            }
            if (v235 >= (uint64_t)v358) {
              break;
            }
            unint64_t v236 = v350[v235];
            ++v256;
            if (v236) {
              goto LABEL_120;
            }
          }
          uint64_t v235 = (uint64_t)v341;
          goto LABEL_150;
        }
        v361 = v227 + 3;
      }
LABEL_122:
      uint64_t v237 = sub_100094134((uint64_t *)v86);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v237 - 8) + 56))(isUniquelyReferenced_nonNull_native, 1, 1, v237);
      unint64_t v215 = 0;
      goto LABEL_123;
    }
LABEL_120:
    unint64_t v215 = (v236 - 1) & v236;
    unint64_t v232 = __clz(__rbit64(v236)) + (v235 << 6);
    v361 = (char *)v235;
LABEL_116:
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v356 + 16))(isUniquelyReferenced_nonNull_native, PredicateType[6] + *(void *)(v356 + 72) * v232, v122);
    unint64_t v233 = PredicateType[7];
    uint64_t v234 = sub_100094134((uint64_t *)v86);
    *(void *)(isUniquelyReferenced_nonNull_native + *(int *)(v234 + 48)) = *(void *)(v233 + 8 * v232);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v234 - 8) + 56))(isUniquelyReferenced_nonNull_native, 0, 1, v234);
LABEL_123:
    uint64_t v238 = v336;
    sub_100096408(isUniquelyReferenced_nonNull_native, v336, &qword_1009192D0);
    uint64_t v84 = (char *)v86;
    unint64_t v86 = sub_100094134((uint64_t *)v86);
    uint64_t v239 = *(void *)(v86 - 8);
    PredicateType = (unint64_t *)(v239 + 48);
    unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v239 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))isUniquelyReferenced_nonNull_native)(v238, 1, v86) != 1)
    {
      uint64_t v240 = (uint64_t)v353;
      (*v360)(v353, v238, v122);
      Class v241 = UUID._bridgeToObjectiveC()().super.isa;
      id v242 = [v326 objectIDWithUUID:v241];

      unint64_t isUniquelyReferenced_nonNull_native = REMObjectID.codable.getter();
      if (*((void *)v349 + 2)) {
        sub_100306EC4(v240);
      }
      v243 = v331;
      REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
      PredicateType = (unint64_t *)*v366;
      ((void (*)(char *, char *, uint64_t))*v366)(v354, v243, v364);
      int v244 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v369 = v87;
      unint64_t v86 = sub_100307040(isUniquelyReferenced_nonNull_native);
      uint64_t v246 = *(void *)(v87 + 16);
      BOOL v247 = (v245 & 1) == 0;
      uint64_t v248 = v246 + v247;
      if (__OFADD__(v246, v247))
      {
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        swift_bridgeObjectRetain();
        uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      char v249 = v245;
      if (*(void *)(v87 + 24) >= v248)
      {
        if ((v244 & 1) == 0) {
          sub_100318754();
        }
      }
      else
      {
        sub_10030E204(v248, v244);
        unint64_t v250 = sub_100307040(isUniquelyReferenced_nonNull_native);
        if ((v249 & 1) != (v251 & 1)) {
          goto LABEL_223;
        }
        unint64_t v86 = v250;
      }
      uint64_t v122 = v365;
      v252 = (void *)v369;
      if (v249)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v355 + 40))(*(void *)(v369 + 56) + *(void *)(v355 + 72) * v86, v354, v364);
      }
      else
      {
        *(void *)(v369 + 8 * (v86 >> 6) + 64) |= 1 << v86;
        *(void *)(v252[6] + 8 * v86) = isUniquelyReferenced_nonNull_native;
        ((void (*)(unint64_t, char *, uint64_t))PredicateType)(v252[7] + *(void *)(v355 + 72) * v86, v354, v364);
        uint64_t v253 = v252[2];
        BOOL v178 = __OFADD__(v253, 1);
        uint64_t v254 = v253 + 1;
        if (v178) {
          goto LABEL_202;
        }
        v252[2] = v254;
        id v255 = (id)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v87 = v369;

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))v363)(v353, v122);
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v340;
      id v227 = v361;
      PredicateType = (unint64_t *)v362;
      unint64_t v86 = (unint64_t)v84;
      continue;
    }
    break;
  }
  swift_release();
  uint64_t v257 = *(void *)(v372[0] + 64);
  v350 = (void *)(v372[0] + 64);
  uint64_t v258 = 1 << *(unsigned char *)(v372[0] + 32);
  uint64_t v259 = -1;
  if (v258 < 64) {
    uint64_t v259 = ~(-1 << v258);
  }
  unint64_t v260 = v259 & v257;
  Class v358 = (Class)(v239 + 56);
  v353 = (char *)((unint64_t)(v258 + 63) >> 6);
  v341 = (void **)(v353 - 1);
  v354 = (char *)v372[0];
  swift_bridgeObjectRetain();
  uint64_t v261 = 0;
  unint64_t v215 = (unint64_t)v333;
  v352 = (void (**)(unint64_t, uint64_t))isUniquelyReferenced_nonNull_native;
  while (2)
  {
    uint64_t v262 = (uint64_t)v334;
    if (v260)
    {
      v361 = (char *)v261;
      v362 = (char *)((v260 - 1) & v260);
      unint64_t v263 = __clz(__rbit64(v260)) | (v261 << 6);
      goto LABEL_158;
    }
    uint64_t v266 = v261 + 1;
    if (__OFADD__(v261, 1)) {
      goto LABEL_205;
    }
    if (v266 >= (uint64_t)v353) {
      goto LABEL_170;
    }
    unint64_t v267 = v350[v266];
    if (v267)
    {
LABEL_162:
      v361 = (char *)v266;
      v362 = (char *)((v267 - 1) & v267);
      unint64_t v263 = __clz(__rbit64(v267)) + (v266 << 6);
LABEL_158:
      v264 = v354;
      (*(void (**)(char *, unint64_t, uint64_t))(v356 + 16))(v334, *((void *)v354 + 6) + *(void *)(v356 + 72) * v263, v122);
      uint64_t v265 = 0;
      *(void *)(v262 + *(int *)(v86 + 48)) = *(void *)(*((void *)v264 + 7) + 8 * v263);
LABEL_172:
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))v358)(v262, v265, 1, v86);
      uint64_t v268 = v332;
      sub_100096408(v262, v332, &qword_1009192D0);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))isUniquelyReferenced_nonNull_native)(v268, 1, v86) == 1)
      {
        swift_release();
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
        REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
        REMAccountsListDataView.ReminderCounts.init(scheduled:flagged:all:today:siriFoundInAppsRemindersCount:assignedToMeRemindersCount:recentlyDeletedRemindersCountByAccountObjectID:byObjectID:)();

        (*(void (**)(char *, uint64_t))v363)(v348, v122);
        v285 = *(void (**)(char *, uint64_t))(v312 + 8);
        uint64_t v286 = v344;
        v285(v321, v344);
        v285(v327, v286);
        sub_10047053C(v337, _s10PredicatesOMa);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100096314((uint64_t)v342);
        return sub_100096314(v320);
      }
      (*v360)((char *)v215, v268, v122);
      v269 = self;
      Class v270 = UUID._bridgeToObjectiveC()().super.isa;
      id v271 = [v269 objectIDWithUUID:v270];

      uint64_t v84 = (char *)REMObjectID.codable.getter();
      if (v370[2]) {
        sub_100306EC4(v215);
      }
      v272 = v329;
      REMAccountsListDataView.ReminderCounts.ComputedCountContainer.init(incomplete:overdue:)();
      unint64_t v215 = *v366;
      ((void (*)(char *, char *, uint64_t))*v366)(v351, v272, v364);
      int v273 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v369 = v87;
      unint64_t isUniquelyReferenced_nonNull_native = sub_100307040((uint64_t)v84);
      uint64_t v275 = *(void *)(v87 + 16);
      BOOL v276 = (v274 & 1) == 0;
      uint64_t v277 = v275 + v276;
      if (__OFADD__(v275, v276)) {
        goto LABEL_197;
      }
      char v278 = v274;
      if (*(void *)(v87 + 24) >= v277)
      {
        if ((v273 & 1) == 0) {
          sub_100318754();
        }
      }
      else
      {
        sub_10030E204(v277, v273);
        unint64_t v279 = sub_100307040((uint64_t)v84);
        if ((v278 & 1) != (v280 & 1)) {
          goto LABEL_223;
        }
        unint64_t isUniquelyReferenced_nonNull_native = v279;
      }
      uint64_t v122 = v365;
      v281 = (void *)v369;
      if (v278)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v355 + 40))(*(void *)(v369 + 56) + *(void *)(v355 + 72) * isUniquelyReferenced_nonNull_native, v351, v364);
      }
      else
      {
        *(void *)(v369 + 8 * (isUniquelyReferenced_nonNull_native >> 6) + 64) |= 1 << isUniquelyReferenced_nonNull_native;
        *(void *)(v281[6] + 8 * isUniquelyReferenced_nonNull_native) = v84;
        ((void (*)(unint64_t, char *, uint64_t))v215)(v281[7] + *(void *)(v355 + 72) * isUniquelyReferenced_nonNull_native, v351, v364);
        uint64_t v282 = v281[2];
        BOOL v178 = __OFADD__(v282, 1);
        uint64_t v283 = v282 + 1;
        if (v178) {
          goto LABEL_203;
        }
        v281[2] = v283;
        v284 = v84;
      }
      unint64_t v87 = v369;

      swift_bridgeObjectRelease();
      unint64_t v215 = (unint64_t)v333;
      (*(void (**)(char *, uint64_t))v363)(v333, v122);
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v352;
      uint64_t v261 = (uint64_t)v361;
      unint64_t v260 = (unint64_t)v362;
      continue;
    }
    break;
  }
  v261 += 2;
  if (v266 + 1 >= (uint64_t)v353)
  {
    v361 = (char *)v266;
    v362 = 0;
LABEL_171:
    uint64_t v265 = 1;
    goto LABEL_172;
  }
  unint64_t v267 = v350[v261];
  if (v267)
  {
LABEL_165:
    uint64_t v266 = v261;
    goto LABEL_162;
  }
  if (v266 + 2 >= (uint64_t)v353)
  {
LABEL_170:
    v361 = (char *)v261;
    v362 = 0;
    goto LABEL_171;
  }
  unint64_t v267 = v350[v266 + 2];
  if (v267)
  {
    v266 += 2;
    goto LABEL_162;
  }
  uint64_t v261 = v266 + 3;
  if (v266 + 3 >= (uint64_t)v353)
  {
    v361 = (char *)(v266 + 2);
    v362 = 0;
    goto LABEL_171;
  }
  unint64_t v267 = v350[v261];
  if (v267) {
    goto LABEL_165;
  }
  while (1)
  {
    uint64_t v266 = v261 + 1;
    if (__OFADD__(v261, 1)) {
      break;
    }
    if (v266 >= (uint64_t)v353)
    {
      v362 = 0;
      uint64_t v265 = 1;
      v361 = (char *)v341;
      goto LABEL_172;
    }
    unint64_t v267 = v350[v266];
    ++v261;
    if (v267) {
      goto LABEL_162;
    }
  }
LABEL_222:
  __break(1u);
LABEL_223:
  type metadata accessor for REMObjectID_Codable();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_224:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100462F30(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = _s5CacheVMa();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v4, v10);
  *(void *)&v9[*(int *)(v7 + 20)] = a1;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  id v11 = a1;
  PropertyListEncoder.init()();
  sub_100470490(&qword_1009192C8, (void (*)(uint64_t))_s5CacheVMa);
  uint64_t v12 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v14 = v13;
  if (qword_1009075F8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100919168);
  sub_100097E38(v12, v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134217984;
    uint64_t v19 = v18;
    uint64_t v20 = 0;
    switch(v14 >> 62)
    {
      case 1uLL:
        LODWORD(v20) = HIDWORD(v12) - v12;
        if (__OFSUB__(HIDWORD(v12), v12))
        {
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x100463444);
        }
        uint64_t v20 = (int)v20;
LABEL_10:
        v27[6] = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100097F34(v12, v14);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMAccountsListDataView.ReminderCounts Saving cache data size %ld", v19, 0xCu);
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v12 + 16);
        uint64_t v21 = *(void *)(v12 + 24);
        BOOL v23 = __OFSUB__(v21, v22);
        uint64_t v20 = v21 - v22;
        if (!v23) {
          goto LABEL_10;
        }
        goto LABEL_13;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v20 = BYTE6(v14);
        goto LABEL_10;
    }
  }
  else
  {
    sub_100097F34(v12, v14);
  }

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 16);
  sub_100097E38(v12, v14);
  v25(v12, v14, ObjectType, a3);
  swift_release();
  sub_100097F34(v12, v14);
  return sub_10047053C((uint64_t)v9, (uint64_t (*)(void))_s5CacheVMa);
}

uint64_t sub_100463454@<X0>(uint64_t *a1@<X8>)
{
  return sub_10046346C(a1);
}

uint64_t sub_10046346C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v3)
  {
    *a1 = result;
    a1[1] = v3;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v4._object = (void *)0x80000001007CAF70;
    v4._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v4);
    sub_100094134((uint64_t *)&unk_10090B070);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_10046355C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100463564(uint64_t a1, void *a2, char a3, void *a4, unsigned char *a5, void *a6)
{
  uint64_t v55 = a5;
  LOBYTE(v8) = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v54 = (char *)&v51 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v56 = a2;
  sub_100094134(&qword_1009169B0);
  sub_1000967F4(&qword_1009169B8, &qword_1009169B0);
  uint64_t result = Sequence<>.evaluate(with:)();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v51 = a1;
  uint64_t v52 = a6;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v53(v19, a1, v11);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v56 = (void *)*a4;
  uint64_t v22 = v56;
  *a4 = 0x8000000000000000;
  unint64_t v24 = sub_100306EC4((uint64_t)v19);
  uint64_t v25 = v22[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_22;
  }
  LOBYTE(v8) = v23;
  if (v22[3] >= v27)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    sub_10030E224(v27, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = v56;
    unint64_t v28 = sub_100306EC4((uint64_t)v19);
    if ((v8 & 1) != (v29 & 1)) {
      goto LABEL_27;
    }
    unint64_t v24 = v28;
  }
  while (1)
  {
    *a4 = v22;
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)*a4;
    swift_bridgeObjectRetain();
    if ((v8 & 1) == 0)
    {
      uint64_t v31 = (uint64_t)v54;
      v53(v54, (uint64_t)v19, v11);
      sub_1002C8190(v24, v31, 0, v30);
    }
    uint64_t v32 = v30[7];
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v32 + 8 * v24);
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (!v34) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    sub_100318774();
    uint64_t v22 = v56;
  }
  *(void *)(v32 + 8 * v24) = v35;
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t result = v36(v19, v11);
  uint64_t v37 = v52;
  if (*v55)
  {
    v53(v14, v51, v11);
    int v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = (void *)*v37;
    uint64_t v39 = v56;
    *uint64_t v37 = 0x8000000000000000;
    unint64_t v41 = sub_100306EC4((uint64_t)v14);
    uint64_t v42 = v39[2];
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43))
    {
      __break(1u);
      goto LABEL_25;
    }
    LOBYTE(v8) = v40;
    if (v39[3] >= v44)
    {
      if ((v38 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    sub_10030E224(v44, v38);
    uint64_t v39 = v56;
    unint64_t v45 = sub_100306EC4((uint64_t)v14);
    if ((v8 & 1) == (v46 & 1))
    {
      unint64_t v41 = v45;
      while (1)
      {
LABEL_16:
        *uint64_t v37 = v39;
        swift_bridgeObjectRelease();
        uint64_t v47 = (void *)*v37;
        swift_bridgeObjectRetain();
        if ((v8 & 1) == 0)
        {
          uint64_t v8 = (uint64_t)v54;
          v53(v54, (uint64_t)v14, v11);
          sub_1002C8190(v41, v8, 0, v47);
        }
        uint64_t v48 = v47[7];
        swift_bridgeObjectRelease();
        uint64_t v49 = *(void *)(v48 + 8 * v41);
        BOOL v34 = __OFADD__(v49, 1);
        uint64_t v50 = v49 + 1;
        if (!v34) {
          break;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        sub_100318774();
        uint64_t v39 = v56;
      }
      *(void *)(v48 + 8 * v41) = v50;
      return v36(v14, v11);
    }
LABEL_27:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

void sub_100463958(uint64_t *a1, void **a2, void *a3)
{
  id v51 = a3;
  uint64_t v42 = a1;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v5 - 8);
  uint64_t v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134(&qword_100919300);
  uint64_t v45 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  uint64_t v48 = *(void *)(v50 - 8);
  __n128 v17 = __chkstk_darwin(v50);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a2;
  (*(void (**)(char *, void, uint64_t, __n128))(v11 + 104))(v13, enum case for REMRemindersListDataView.RemindersPrefetch.none(_:), v10, v17);
  uint64_t v21 = v52;
  static REMRemindersListDataView.fetchRecentlyDeleted(store:accountID:deletedDaysFromNow:countCompleted:remindersPrefetch:diffingAgainst:)();
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (qword_1009075F8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100919168);
    swift_errorRetain();
    swift_errorRetain();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_getErrorValue();
      uint64_t v26 = Error.rem_errorDescription.getter();
      uint64_t v53 = sub_1000C51B8(v26, v27, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to fetch recently deleted reminders count {error: %s}", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    id v51 = v20;
    uint64_t v52 = v19;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    REMRemindersListDataView.Result.model.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v14);
    uint64_t v28 = (uint64_t)v49;
    REMRemindersListDataView.FlatModel.remindersCount.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
    uint64_t v29 = v48;
    uint64_t v30 = v50;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v28, 1, v50) == 1)
    {
      sub_1000966BC(v28, &qword_100909C70);
    }
    else
    {
      uint64_t v31 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v52, v28, v30);
      id v32 = [v51 uuid];
      uint64_t v33 = (uint64_t)v44;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = REMRemindersListDataView.CountByCompleted.completed.getter();
      uint64_t v35 = REMRemindersListDataView.CountByCompleted.incomplete.getter();
      BOOL v36 = __OFADD__(v34, v35);
      uint64_t v37 = v34 + v35;
      if (v36)
      {
        __break(1u);
      }
      else
      {
        int v38 = v42;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v54 = *v38;
        *int v38 = 0x8000000000000000;
        sub_1002C4A58(v37, v33, isUniquelyReferenced_nonNull_native);
        *int v38 = v54;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v33, v43);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v30);
      }
    }
  }
}

void sub_100463FFC(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  sub_100470638((uint64_t)a1, (unint64_t)a4, a5);
  if (!v6)
  {
    unint64_t v14 = v12;
    uint64_t v15 = v13;
    uint64_t v21 = a2;
    id v22 = v13;
    id v16 = a4;
    id v17 = a5;
    swift_bridgeObjectRetain();
    id v18 = a3;
    id v19 = a1;
    sub_10046C9A8(v14, (uint64_t)v18, (unint64_t)v19, v15, (uint64_t)v16, v17, a6);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    id v20 = v21;
    REMAccountsListDataView.Model.Account.init(account:children:)();
  }
}

void sub_100464150(uint64_t *a1@<X0>, unint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, void *a7@<X7>, unint64_t *a8@<X8>)
{
  uint64_t v56 = a7;
  uint64_t v59 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v15 = *(void *)(v59 - 8);
  *(void *)&double v16 = __chkstk_darwin(v59).n128_u64[0];
  id v18 = (unint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *a1;
  unint64_t v20 = *(void *)(*a1 + 16);
  if ((v20 & 0x8000000000000000) != 0)
  {
    *a8 = v20 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v38 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
    uint64_t v39 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(a8, v38, v39);
    id v40 = (id)(v20 & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
  uint64_t v51 = v19;
  uint64_t v52 = a8;
  if ((objc_msgSend((id)v20, "isGroup", v16) & 1) == 0)
  {
    id v41 = (id)v20;
    if (![v41 isGroup])
    {
      uint64_t v44 = v52;
      *uint64_t v52 = (unint64_t)v41;
      uint64_t v45 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
      uint64_t v46 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
      (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104))(v44, v45, v46);
      return;
    }
    uint64_t v42 = self;
    NSString v43 = String._bridgeToObjectiveC()();
    id v24 = [v42 internalErrorWithDebugDescription:v43];

    swift_willThrow();
    uint64_t v25 = v56;
    goto LABEL_31;
  }
  id v21 = [(id)v20 remObjectID];
  id v22 = v58;
  unint64_t v23 = (unint64_t)sub_10046BA3C(v21, a2, a3, a4, a5, a6);
  id v24 = v22;

  uint64_t v25 = v56;
  if (v22)
  {
LABEL_31:
    *uint64_t v25 = v24;
    return;
  }
  if (v23 >> 62) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v27 = (uint64_t)v52;
  if (!v26)
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    sub_100465D3C(v27);
    if (!v24)
    {
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  while (1)
  {
    uint64_t v57 = v26;
    id v58 = v24;
    uint64_t v60 = _swiftEmptyArrayStorage;
    sub_1001DEAC8(0, v26 & ~(v26 >> 63), 0);
    id v28 = (id)v57;
    if (v57 < 0) {
      break;
    }
    id v24 = 0;
    uint64_t v29 = v60;
    unint64_t v55 = v23 & 0xC000000000000001;
    HIDWORD(v50) = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
    uint64_t v30 = (void (**)(unint64_t *, void, uint64_t))(v15 + 104);
    unsigned int v53 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
    uint64_t v54 = v15 + 32;
    while (v28 != v24)
    {
      if (v55)
      {
        uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v31 = *(void *)(v23 + 8 * (void)v24 + 32);
        swift_retain();
      }
      uint64_t v25 = (void *)v23;
      unint64_t v32 = *(void *)(v31 + 16);
      if ((v32 & 0x8000000000000000) != 0)
      {
        uint64_t v34 = (void *)(v32 & 0x7FFFFFFFFFFFFFFFLL);
        unint64_t *v18 = v32 & 0x7FFFFFFFFFFFFFFFLL;
        (*v30)(v18, HIDWORD(v50), v59);
        id v35 = v34;
      }
      else
      {
        id v33 = (id)v32;
        if ([v33 isGroup])
        {
          uint64_t v47 = self;
          NSString v48 = String._bridgeToObjectiveC()();
          id v24 = [v47 internalErrorWithDebugDescription:v48];

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          uint64_t v25 = v56;
          goto LABEL_31;
        }
        unint64_t *v18 = (unint64_t)v33;
        (*v30)(v18, v53, v59);
      }
      swift_release();
      uint64_t v60 = v29;
      unint64_t v37 = v29[2];
      unint64_t v36 = v29[3];
      if (v37 >= v36 >> 1)
      {
        sub_1001DEAC8(v36 > 1, v37 + 1, 1);
        uint64_t v29 = v60;
      }
      id v24 = (char *)v24 + 1;
      id v29[2] = v37 + 1;
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(v15 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v37, v18, v59);
      id v28 = (id)v57;
      unint64_t v23 = (unint64_t)v25;
      if ((id)v57 == v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v56;
        id v24 = v58;
        uint64_t v27 = (uint64_t)v52;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t)v52;
    if (v49)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26) {
        continue;
      }
    }
    goto LABEL_28;
  }
  __break(1u);
}

id sub_1004646B8(unint64_t a1)
{
  id result = [v1 updatedProperties];
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  sub_1000963CC(0, (unint64_t *)&unk_100916ED0);
  sub_1004703DC();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v44 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = __CocoaSet.count.getter();
    if (v6) {
      goto LABEL_4;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_22:
    if (a1 >> 62) {
      goto LABEL_38;
    }
    uint64_t v30 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      uint64_t v31 = _swiftEmptyArrayStorage;
      if (!v30) {
        break;
      }
      uint64_t v47 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v30 & ~(v30 >> 63), 0);
      if (v30 < 0) {
        goto LABEL_40;
      }
      uint64_t v32 = 0;
      uint64_t v31 = v47;
      unint64_t v33 = a1;
      while (v30 != v32)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          unint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          unint64_t v2 = *(void *)(v33 + 8 * v32 + 32);
          swift_retain();
        }
        uint64_t v34 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v35) {
          goto LABEL_42;
        }
        uint64_t v36 = v34;
        uint64_t v37 = v35;
        swift_release();
        uint64_t v47 = v31;
        unint64_t v2 = v31[2];
        unint64_t v38 = v31[3];
        if (v2 >= v38 >> 1)
        {
          sub_1001DE058(v38 > 1, v2 + 1, 1);
          uint64_t v31 = v47;
        }
        ++v32;
        _OWORD v31[2] = v2 + 1;
        uint64_t v39 = &v31[2 * v2];
        void v39[4] = v36;
        v39[5] = v37;
        unint64_t v33 = a1;
        if (v30 == v32) {
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_35:
    uint64_t v40 = sub_10012674C((uint64_t)v31);
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_10046AC5C((uint64_t)v10, v40, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10046ADF8);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(v41 + 16);
    swift_release();
    return (id)(v42 != 0);
  }
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v6 & ~(v6 >> 63), 0);
  if (v44)
  {
    uint64_t v7 = (void *)__CocoaSet.startIndex.getter();
    unsigned __int8 v9 = 1;
  }
  else
  {
    uint64_t v7 = (void *)sub_1003CA790(v5);
    unsigned __int8 v9 = v11 & 1;
  }
  uint64_t v47 = v7;
  uint64_t v48 = v8;
  unsigned __int8 v49 = v9;
  if ((v6 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        uint64_t v17 = v47;
        unint64_t v2 = v48;
        uint64_t v18 = v49;
        sub_1003CA1CC((uint64_t)v47, v48, v49, v5);
        unint64_t v20 = v19;
        id v21 = [v19 name];
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        uint64_t v25 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE058(0, v25[2] + 1, 1);
          uint64_t v25 = v50;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1001DE058(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v50;
        }
        v25[2] = v27 + 1;
        id v28 = &v25[2 * v27];
        v28[4] = v22;
        v28[5] = v24;
        if (v44) {
          break;
        }
        unint64_t v12 = (void *)sub_1003C9E34(v17, v2, v18, v5);
        uint64_t v14 = v13;
        char v16 = v15;
        sub_1000E4EA4((uint64_t)v17, v2, v18);
        uint64_t v47 = v12;
        uint64_t v48 = v14;
        unsigned __int8 v49 = v16 & 1;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      if ((v18 & 1) == 0) {
        goto LABEL_41;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(&qword_1009192A0);
      uint64_t v29 = (void (*)(void *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v29(v46, 0);
      --v6;
    }
    while (v6);
LABEL_21:
    sub_1000E4EA4((uint64_t)v47, v48, v49);
    swift_bridgeObjectRelease();
    uint64_t v10 = v50;
    goto LABEL_22;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  v46[0] = 0;
  v46[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v43._object = (void *)0x80000001007CAF70;
  v43._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v43);
  uint64_t v50 = (void *)v2;
  sub_100094134(&qword_10090FEB0);
  _print_unlocked<A, B>(_:_:)();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100464BB4(unint64_t *a1)
{
  uint64_t v2 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void **)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = type metadata accessor for REMAccountsListDataView.Model.Group();
  uint64_t v6 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v82 = (void **)((char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v83 = (void **)((char *)&v52 - v12);
  __chkstk_darwin(v13);
  uint64_t v60 = (void **)((char *)&v52 - v14);
  __chkstk_darwin(v15);
  unint64_t v72 = (void **)((char *)&v52 - v16);
  uint64_t v63 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
  uint64_t v17 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v73 = (void **)((char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10046552C();
  uint64_t v71 = *(void *)(v19 + 16);
  if (!v71) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v20 = 0;
  unint64_t v68 = v19 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v66 = v17 + 88;
  uint64_t v67 = v17 + 16;
  int v65 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
  int v59 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
  int v56 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
  uint64_t v64 = (void (**)(void **, uint64_t))(v17 + 96);
  unint64_t v55 = (void (**)(char *, void **, uint64_t))(v6 + 32);
  id v80 = (uint64_t (**)(void **, uint64_t))(v3 + 88);
  uint64_t v81 = v3 + 16;
  int v79 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
  int v75 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
  int v78 = (void (**)(void **, uint64_t))(v3 + 96);
  int v76 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
  unint64_t v86 = (void (**)(void))(v9 + 104);
  uint64_t v87 = v9 + 32;
  uint64_t v54 = (void (**)(char *, uint64_t))(v6 + 8);
  int v77 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
  uint64_t v88 = v8;
  uint64_t v21 = v63;
  uint64_t v70 = v17;
  uint64_t v22 = v73;
  id v58 = a1;
  uint64_t v53 = v3;
  uint64_t v69 = v19;
  while (v20 < *(void *)(v19 + 16))
  {
    uint64_t v26 = *(void *)(v17 + 72);
    unint64_t v74 = v20;
    (*(void (**)(void **, unint64_t, uint64_t))(v17 + 16))(v22, v68 + v26 * v20, v21);
    int v27 = (*(uint64_t (**)(void **, uint64_t))(v17 + 88))(v22, v21);
    if (v27 == v65)
    {
      (*v64)(v22, v21);
      id v28 = *v22;
      *unint64_t v72 = *v22;
      (*v86)();
      unint64_t v29 = *a1;
      id v30 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v29 = sub_10030924C(0, *(void *)(v29 + 16) + 1, 1, v29);
      }
      unint64_t v32 = *(void *)(v29 + 16);
      unint64_t v31 = *(void *)(v29 + 24);
      if (v32 >= v31 >> 1) {
        unint64_t v29 = sub_10030924C(v31 > 1, v32 + 1, 1, v29);
      }
      *(void *)(v29 + 16) = v32 + 1;
      unint64_t v23 = v29
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72) * v32;
      uint64_t v24 = *(void (**)(unint64_t, void **, uint64_t))(v9 + 32);
      uint64_t v25 = v72;
LABEL_4:
      v24(v23, v25, v88);

      *a1 = v29;
      uint64_t v21 = v63;
      goto LABEL_5;
    }
    if (v27 == v59)
    {
      (*v64)(v22, v21);
      unint64_t v33 = *v22;
      void *v60 = *v22;
      (*v86)();
      unint64_t v29 = *a1;
      id v30 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v29 = sub_10030924C(0, *(void *)(v29 + 16) + 1, 1, v29);
      }
      unint64_t v35 = *(void *)(v29 + 16);
      unint64_t v34 = *(void *)(v29 + 24);
      if (v35 >= v34 >> 1) {
        unint64_t v29 = sub_10030924C(v34 > 1, v35 + 1, 1, v29);
      }
      *(void *)(v29 + 16) = v35 + 1;
      unint64_t v23 = v29
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72) * v35;
      uint64_t v24 = *(void (**)(unint64_t, void **, uint64_t))(v9 + 32);
      uint64_t v25 = v60;
      goto LABEL_4;
    }
    if (v27 != v56) {
      goto LABEL_41;
    }
    (*v64)(v22, v21);
    (*v55)(v61, v22, v62);
    uint64_t v36 = sub_1004658D8();
    uint64_t v37 = *(void *)(v36 + 16);
    if (v37)
    {
      unint64_t v38 = *v58;
      unint64_t v39 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v57 = v36;
      unint64_t v40 = v36 + v39;
      uint64_t v41 = *(void *)(v53 + 72);
      uint64_t v84 = *(void (**)(void **, unint64_t, uint64_t))(v53 + 16);
      uint64_t v85 = v41;
      v84(v5, v36 + v39, v2);
      while (1)
      {
        int v43 = (*v80)(v5, v2);
        if (v43 == v79)
        {
          (*v78)(v5, v2);
          unint64_t v44 = *v5;
          void *v83 = *v5;
          (*v86)();
          id v45 = v44;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v38 = sub_10030924C(0, *(void *)(v38 + 16) + 1, 1, v38);
          }
          unint64_t v47 = *(void *)(v38 + 16);
          unint64_t v46 = *(void *)(v38 + 24);
          unint64_t v48 = v47 + 1;
          if (v47 >= v46 >> 1) {
            unint64_t v38 = sub_10030924C(v46 > 1, v47 + 1, 1, v38);
          }
          uint64_t v42 = v83;
        }
        else
        {
          if (v43 != v75) {
            goto LABEL_40;
          }
          (*v78)(v5, v2);
          unsigned __int8 v49 = *v5;
          *unint64_t v82 = *v5;
          (*v86)();
          id v45 = v49;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v38 = sub_10030924C(0, *(void *)(v38 + 16) + 1, 1, v38);
          }
          unint64_t v47 = *(void *)(v38 + 16);
          unint64_t v50 = *(void *)(v38 + 24);
          unint64_t v48 = v47 + 1;
          if (v47 >= v50 >> 1) {
            unint64_t v38 = sub_10030924C(v50 > 1, v47 + 1, 1, v38);
          }
          uint64_t v42 = v82;
        }
        *(void *)(v38 + 16) = v48;
        (*(void (**)(unint64_t, void **, uint64_t))(v9 + 32))(v38+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v47, v42, v88);

        v40 += v85;
        if (!--v37) {
          break;
        }
        v84(v5, v40, v2);
      }
      swift_bridgeObjectRelease();
      a1 = v58;
      unint64_t *v58 = v38;
      uint64_t v21 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
      a1 = v58;
    }
    (*v54)(v61, v62);
LABEL_5:
    uint64_t v17 = v70;
    uint64_t v22 = v73;
    unint64_t v20 = v74 + 1;
    uint64_t v19 = v69;
    if (v74 + 1 == v71) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_40:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_41:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_10046552C()
{
  uint64_t v0 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (id *)((char *)&v27 - v5);
  __chkstk_darwin(v7);
  unint64_t v38 = (char *)&v27 - v8;
  uint64_t v9 = REMAccountsListDataView.Model.Account.children.getter();
  uint64_t v10 = v9;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  unint64_t v39 = (char *)_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(v9 + 16);
  if (!v35)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  uint64_t v37 = v3;
  unint64_t v12 = 0;
  uint64_t v34 = v1 + 16;
  uint64_t v33 = v1 + 88;
  int v32 = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
  int v27 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
  int v28 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
  unint64_t v29 = (void (**)(id *, uint64_t))(v1 + 8);
  uint64_t v30 = v9;
  unint64_t v31 = (void (**)(id *, uint64_t))(v1 + 96);
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v13 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v16 = v38;
    v15(v38, v10 + v13 + v14 * v12, v0);
    v15((char *)v6, (unint64_t)v16, v0);
    int v17 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v6, v0);
    if (v17 == v32)
    {
      (*v31)(v6, v0);
      id v18 = *v6;
      unsigned int v19 = [*v6 isPinned];

      if (v19) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v17 != v28)
      {
        if (v17 != v27) {
          goto LABEL_22;
        }
        (*v29)(v6, v0);
LABEL_14:
        uint64_t v22 = *v36;
        (*v36)(v37, v38, v0);
        unint64_t v23 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DEA8C(0, *((void *)v23 + 2) + 1, 1);
          unint64_t v23 = v39;
        }
        unint64_t v25 = *((void *)v23 + 2);
        unint64_t v24 = *((void *)v23 + 3);
        if (v25 >= v24 >> 1)
        {
          sub_1001DEA8C(v24 > 1, v25 + 1, 1);
          unint64_t v23 = v39;
        }
        *((void *)v23 + 2) = v25 + 1;
        v22(&v23[v13 + v25 * v14], v37, v0);
        unint64_t v39 = v23;
        uint64_t v10 = v30;
        goto LABEL_4;
      }
      (*v31)(v6, v0);
      id v20 = *v6;
      unsigned __int8 v21 = [*v6 isPinned];

      if (v21) {
        goto LABEL_14;
      }
    }
    (*v29)((id *)v38, v0);
LABEL_4:
    if (v35 == ++v12)
    {
      uint64_t v11 = v39;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1004658D8()
{
  uint64_t v0 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (id *)((char *)&v27 - v5);
  __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v27 - v8;
  uint64_t v9 = REMAccountsListDataView.Model.Group.lists.getter();
  uint64_t v10 = v9;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  unint64_t v38 = (char *)_swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(v9 + 16);
  if (!v36)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  unint64_t v12 = 0;
  uint64_t v34 = v1 + 16;
  uint64_t v35 = v3;
  uint64_t v33 = v1 + 88;
  int v32 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
  int v28 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
  int v27 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  unint64_t v31 = (void (**)(id *, uint64_t))(v1 + 96);
  uint64_t v29 = v9;
  while (v12 < *(void *)(v10 + 16))
  {
    unint64_t v13 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v16 = v37;
    v15(v37, v10 + v13 + v14 * v12, v0);
    v15((char *)v6, (unint64_t)v16, v0);
    int v17 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v6, v0);
    if (v17 == v32)
    {
      (*v31)(v6, v0);
      id v18 = *v6;
      unsigned int v19 = [*v6 isPinned];

      if (v19) {
        goto LABEL_11;
      }
    }
    else
    {
      if (v17 != v28) {
        goto LABEL_19;
      }
      (*v31)(v6, v0);
      id v20 = *v6;
      unsigned __int8 v21 = [*v6 isPinned];

      if (v21)
      {
LABEL_11:
        uint64_t v22 = *v30;
        (*v30)(v35, v37, v0);
        unint64_t v23 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DEAC8(0, *((void *)v23 + 2) + 1, 1);
          unint64_t v23 = v38;
        }
        unint64_t v25 = *((void *)v23 + 2);
        unint64_t v24 = *((void *)v23 + 3);
        if (v25 >= v24 >> 1)
        {
          sub_1001DEAC8(v24 > 1, v25 + 1, 1);
          unint64_t v23 = v38;
        }
        *((void *)v23 + 2) = v25 + 1;
        v22(&v23[v13 + v25 * v14], v35, v0);
        unint64_t v38 = v23;
        uint64_t v10 = v29;
        goto LABEL_4;
      }
    }
    (*v27)(v37, v0);
LABEL_4:
    if (v36 == ++v12)
    {
      uint64_t v11 = v38;
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void sub_100465C50(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for REMAccountsListDataView.Model.PinnedList() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_1001ECD6C(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1004669DC(v5);
  *a1 = v3;
}

void sub_100465D3C(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 16);
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 internalErrorWithDebugDescription:v8];

    swift_willThrow();
  }
  else
  {
    id v4 = (id)v3;
    if ([v4 isGroup])
    {
      swift_bridgeObjectRetain();
      REMAccountsListDataView.Model.Group.init(list:lists:)();
      uint64_t v5 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
      uint64_t v6 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(a1, v5, v6);
    }
    else
    {
      uint64_t v9 = self;
      NSString v10 = String._bridgeToObjectiveC()();
      [v9 internalErrorWithDebugDescription:v10];

      swift_willThrow();
    }
  }
}

uint64_t sub_100465EC0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100465EFC()
{
  if (*v0) {
    return 0x6E656B6F74;
  }
  else {
    return 0x7265646E696D6572;
  }
}

uint64_t sub_100465F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004717B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100465F68(uint64_t a1)
{
  unint64_t v2 = sub_100471764();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100465FA4(uint64_t a1)
{
  unint64_t v2 = sub_100471764();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100465FE0@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  int v28 = a2;
  uint64_t v4 = sub_100094134(&qword_100919270);
  __chkstk_darwin(v4 - 8);
  unint64_t v31 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134(&qword_1009193C8);
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100471764();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v26 = v8;
    int v27 = a1;
    uint64_t v12 = v30;
    LOBYTE(v32) = 0;
    sub_100470490(&qword_1009193D8, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.ReminderCounts);
    unint64_t v13 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v6);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v14(v26, v13, v6);
    char v34 = 1;
    sub_1000EB648();
    unint64_t v31 = (char *)v9;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = v32;
    unint64_t v15 = v33;
    sub_1000963CC(0, &qword_1009193E0);
    id v22 = sub_10062BD84();
    sub_100097F34(v16, v15);
    uint64_t v23 = v29;
    unint64_t v24 = v26;
    if (v22)
    {
      (*(void (**)(char *, char *))(v29 + 8))(v11, v31);
      unint64_t v25 = v28;
      v14(v28, v24, v6);
      *(void *)&v25[*(int *)(_s5CacheVMa() + 20)] = v22;
      uint64_t v20 = (uint64_t)v27;
      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v6);
    int v17 = v31;
    id v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 internalErrorWithDebugDescription:v19];

    swift_willThrow();
    (*(void (**)(char *, char *))(v23 + 8))(v11, v17);
    a1 = v27;
  }
  uint64_t v20 = (uint64_t)a1;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
}

uint64_t sub_10046647C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_1009193E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_100471764();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18[0]) = 0;
  type metadata accessor for REMAccountsListDataView.ReminderCounts();
  sub_100470490(&qword_1009193F0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.ReminderCounts);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v10 = *(void **)(v3 + *(int *)(_s5CacheVMa() + 20));
  v18[0] = 0;
  id v11 = [v10 dataRepresentationWithError:v18];
  id v12 = v18[0];
  if (!v11)
  {
    uint64_t v16 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  unint64_t v13 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  v18[0] = v13;
  v18[1] = v15;
  v17[7] = 1;
  sub_1000EB704();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100097F34((uint64_t)v13, (unint64_t)v15);
}

uint64_t sub_1004666F8@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return sub_100465FE0(a1, a2);
}

uint64_t sub_100466710(void *a1)
{
  return sub_10046647C(a1);
}

uint64_t sub_100466728()
{
  id v1 = [v0 accountsListCategorizedCountsCache];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100466790(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    [v2 setAccountsListCategorizedCountsCache:0];
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F20(a1, a2);
    [v2 setAccountsListCategorizedCountsCache:isa];
  }
}

uint64_t _s19PolymorphicListItemCMa()
{
  return self;
}

void *_s19PolymorphicListItemC5ModelOwCP(void *a1, void *a2)
{
  uint64_t v3 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void _s19PolymorphicListItemC5ModelOwxx(void *a1)
{
}

uint64_t *_s19PolymorphicListItemC5ModelOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v4 = *a1;
  *a1 = *a2;
  uint64_t v5 = (void *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
  id v6 = v3;

  return a1;
}

uint64_t *_s19PolymorphicListItemC5ModelOwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s19PolymorphicListItemC5ModelOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s19PolymorphicListItemC5ModelOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10046699C(void *a1)
{
  return *a1 >> 63;
}

void *sub_1004669A8(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1004669B8(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa()
{
  return &_s19PolymorphicListItemC5ModelON;
}

void sub_1004669DC(uint64_t *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  v343 = (char *)&v310 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v310 - v5;
  __chkstk_darwin(v7);
  uint64_t v353 = (uint64_t)&v310 - v8;
  __chkstk_darwin(v9);
  id v11 = (char *)&v310 - v10;
  __chkstk_darwin(v12);
  v348 = (char *)&v310 - v13;
  __chkstk_darwin(v14);
  uint64_t v361 = (uint64_t)&v310 - v15;
  __chkstk_darwin(v16);
  v323 = (char *)&v310 - v17;
  __chkstk_darwin(v18);
  v322 = (char *)&v310 - v19;
  __chkstk_darwin(v20);
  uint64_t v340 = (uint64_t)&v310 - v21;
  __chkstk_darwin(v22);
  v331 = (char *)&v310 - v23;
  __chkstk_darwin(v24);
  v326 = (char *)&v310 - v25;
  __chkstk_darwin(v26);
  uint64_t v337 = (uint64_t)&v310 - v27;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v310 - v29;
  __chkstk_darwin(v31);
  unint64_t v33 = (char *)&v310 - v32;
  __chkstk_darwin(v34);
  uint64_t v324 = (uint64_t)&v310 - v35;
  __chkstk_darwin(v36);
  uint64_t v318 = (char *)&v310 - v37;
  __chkstk_darwin(v38);
  uint64_t v317 = (char *)&v310 - v39;
  __chkstk_darwin(v40);
  uint64_t v321 = (uint64_t)&v310 - v41;
  uint64_t v375 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v375 - 8);
  __chkstk_darwin(v375);
  v352 = (char *)&v310 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v360 = (char *)&v310 - v45;
  __chkstk_darwin(v46);
  v327 = (char *)&v310 - v47;
  __chkstk_darwin(v48);
  uint64_t v336 = (char *)&v310 - v49;
  __chkstk_darwin(v50);
  uint64_t v316 = (char *)&v310 - v51;
  __chkstk_darwin(v52);
  uint64_t v320 = (char *)&v310 - v53;
  uint64_t v365 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v345 = *(void *)(v365 - 8);
  __chkstk_darwin(v365);
  v334 = (char *)&v310 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v354 = (char *)&v310 - v56;
  __chkstk_darwin(v57);
  int v59 = (id *)((char *)&v310 - v58);
  __chkstk_darwin(v60);
  v359 = (id *)((char *)&v310 - v61);
  __chkstk_darwin(v62);
  v382 = (char *)&v310 - v63;
  __chkstk_darwin(v64);
  v380 = (char *)&v310 - v65;
  __chkstk_darwin(v66);
  uint64_t v330 = (id *)((char *)&v310 - v67);
  __chkstk_darwin(v68);
  v335 = (id *)((char *)&v310 - v69);
  __chkstk_darwin(v70);
  v346 = (char *)&v310 - v71;
  __chkstk_darwin(v72);
  v342 = (char *)&v310 - v73;
  __chkstk_darwin(v74);
  int v76 = (id *)((char *)&v310 - v75);
  __chkstk_darwin(v77);
  v319 = (id *)((char *)&v310 - v78);
  __chkstk_darwin(v79);
  uint64_t v328 = (char *)&v310 - v80;
  __chkstk_darwin(v81);
  uint64_t v325 = (char *)&v310 - v82;
  Swift::Int v83 = a1[1];
  Swift::Int v84 = _minimumMergeRunLength(_:)(v83);
  if (v84 >= v83)
  {
    if ((v83 & 0x8000000000000000) == 0)
    {
      if (v83) {
        sub_100468C50(0, v83, 1, a1);
      }
      return;
    }
    goto LABEL_238;
  }
  if (v83 >= 0) {
    uint64_t v85 = v83;
  }
  else {
    uint64_t v85 = v83 + 1;
  }
  if (v83 < -1)
  {
LABEL_248:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v312 = v76;
  uint64_t v356 = v59;
  Swift::Int v315 = v84;
  v341 = v6;
  unint64_t v347 = v11;
  if (v83 >= 2)
  {
    uint64_t v86 = v85 >> 1;
    uint64_t v87 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v87 + 16) = v86;
    uint64_t v88 = v345;
    unint64_t v89 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    v311 = (void *)v87;
    unint64_t v90 = v87 + v89;
LABEL_13:
    uint64_t v91 = 0;
    v372 = (uint64_t (**)(id *, uint64_t))(v88 + 88);
    uint64_t v373 = v88 + 16;
    int v371 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
    int v358 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
    int v351 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
    v357 = (void (**)(id *, uint64_t))(v88 + 96);
    v374 = (char **)(v88 + 8);
    unint64_t v369 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    v370 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
    uint64_t v364 = (void (**)(char *, uint64_t, uint64_t))(v42 + 32);
    uint64_t v355 = (void (**)(char *, uint64_t))(v42 + 8);
    v379 = (void (**)(char *, uint64_t, uint64_t))(v88 + 32);
    uint64_t v92 = (char *)_swiftEmptyArrayStorage;
    unint64_t v363 = a1;
    long long v314 = v30;
    v313 = v33;
    unint64_t v344 = v90;
    Swift::Int v93 = v83;
    while (1)
    {
      Swift::Int v95 = v91 + 1;
      v333 = v92;
      unint64_t v339 = (char *)v91;
      if (v91 + 1 < v93) {
        break;
      }
      uint64_t v106 = v375;
LABEL_101:
      if (v95 >= v93) {
        goto LABEL_150;
      }
      if (__OFSUB__(v95, v91)) {
        goto LABEL_237;
      }
      if (v95 - v91 >= v315) {
        goto LABEL_150;
      }
      if (__OFADD__(v91, v315)) {
        goto LABEL_240;
      }
      if (v91 + v315 >= v93) {
        uint64_t v199 = (char *)v93;
      }
      else {
        uint64_t v199 = (char *)(v91 + v315);
      }
      if ((uint64_t)v199 < v91) {
        goto LABEL_241;
      }
      if ((char *)v95 == v199) {
        goto LABEL_150;
      }
      Swift::Int v200 = *(void *)(v345 + 72);
      char v368 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v345 + 16);
      uint64_t v201 = v200 * (v95 - 1);
      Swift::Int v362 = v200;
      Swift::Int v381 = v95 * v200;
      uint64_t v202 = v365;
      unint64_t v203 = v354;
      Swift::Int v338 = (Swift::Int)v199;
      while (2)
      {
        uint64_t v206 = 0;
        v366 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v201;
        char v367 = (char *)v95;
        while (1)
        {
          uint64_t v207 = *a1;
          uint64_t v208 = v380;
          v377 = (void (*)(id *, char *, uint64_t))(v381 + v206);
          v378 = (void (*)(id *, uint64_t))v91;
          uint64_t v209 = v368;
          v368((uint64_t)v380, v381 + v206 + v207, v202);
          v376 = (uint64_t (*)(id *, uint64_t))(v201 + v206);
          v209((uint64_t)v382, v201 + v206 + v207, v202);
          uint64_t v210 = v359;
          v209((uint64_t)v359, (uint64_t)v208, v202);
          long long v211 = *v372;
          int v212 = (*v372)(v210, v202);
          if (v212 == v371)
          {
            ((void (*)(id *, uint64_t))*v374)(v210, v202);
            uint64_t v213 = *v370;
            uint64_t v214 = v361;
            (*v370)(v361, 1, 1, v106);
            goto LABEL_129;
          }
          if (v212 == v358)
          {
            (*v357)(v210, v202);
            id v215 = *v210;
            id v216 = [*v210 pinnedDate];
            uint64_t v217 = (uint64_t)v348;
            if (!v216)
            {

              uint64_t v213 = *v370;
LABEL_127:
              uint64_t v220 = v217;
              uint64_t v221 = 1;
              goto LABEL_128;
            }
            id v218 = v216;
          }
          else
          {
            if (v212 != v351) {
              goto LABEL_246;
            }
            (*v357)(v210, v202);
            id v215 = *v210;
            id v219 = [*v210 pinnedDate];
            if (!v219)
            {

              uint64_t v213 = *v370;
              uint64_t v217 = (uint64_t)v347;
              goto LABEL_127;
            }
            id v218 = v219;
            uint64_t v217 = (uint64_t)v347;
          }
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v213 = *v370;
          uint64_t v220 = v217;
          uint64_t v221 = 0;
LABEL_128:
          uint64_t v106 = v375;
          v213(v220, v221, 1, v375);
          uint64_t v214 = v361;
          sub_100096408(v217, v361, (uint64_t *)&unk_100909A40);
LABEL_129:
          uint64_t v222 = *v369;
          if ((*v369)(v214, 1, v106) == 1)
          {
            sub_1000966BC(v214, (uint64_t *)&unk_100909A40);
            uint64_t v223 = (void (*)(id *, uint64_t))*v374;
            ((void (*)(char *, uint64_t))*v374)(v382, v202);
            v223((id *)v380, v202);
            a1 = v363;
            goto LABEL_146;
          }
          uint64_t v224 = *v364;
          (*v364)(v360, v214, v106);
          char v225 = v356;
          v368((uint64_t)v356, (uint64_t)v382, v202);
          int v226 = v211(v225, v202);
          if (v226 == v371)
          {
            ((void (*)(id *, uint64_t))*v374)(v225, v202);
            uint64_t v227 = v353;
            v213(v353, 1, 1, v106);
            goto LABEL_144;
          }
          if (v226 == v358)
          {
            unint64_t v228 = v224;
            uint64_t v229 = v356;
            (*v357)(v356, v365);
            id v230 = *v229;
            id v231 = [*v229 pinnedDate];
            if (!v231)
            {
              uint64_t v237 = 1;
              uint64_t v238 = &v374;
LABEL_142:
              uint64_t v236 = (uint64_t)*(v238 - 32);
              goto LABEL_143;
            }
            unint64_t v232 = v231;
            unint64_t v233 = &v374;
          }
          else
          {
            uint64_t v234 = v356;
            if (v226 != v351) {
              goto LABEL_247;
            }
            unint64_t v228 = v224;
            (*v357)(v356, v365);
            id v230 = *v234;
            id v235 = [*v234 pinnedDate];
            if (!v235)
            {
              uint64_t v237 = 1;
              uint64_t v238 = (char ***)&v376;
              goto LABEL_142;
            }
            unint64_t v232 = v235;
            unint64_t v233 = (char ***)&v376;
          }
          uint64_t v236 = (uint64_t)*(v233 - 32);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v237 = 0;
LABEL_143:

          uint64_t v106 = v375;
          v213(v236, v237, 1, v375);
          uint64_t v239 = v236;
          uint64_t v227 = v353;
          sub_100096408(v239, v353, (uint64_t *)&unk_100909A40);
          uint64_t v224 = v228;
LABEL_144:
          if (v222(v227, 1, v106) == 1)
          {
            (*v355)(v360, v106);
            sub_1000966BC(v227, (uint64_t *)&unk_100909A40);
            char v204 = (void (*)(id *, uint64_t))*v374;
            uint64_t v202 = v365;
            ((void (*)(char *, uint64_t))*v374)(v382, v365);
            v204((id *)v380, v202);
            a1 = v363;
            unint64_t v203 = v354;
            goto LABEL_112;
          }
          uint64_t v240 = v352;
          v224(v352, v227, v106);
          Class v241 = v360;
          char v242 = static Date.< infix(_:_:)();
          v243 = *v355;
          (*v355)(v240, v106);
          v243(v241, v106);
          int v244 = (void (*)(id *, uint64_t))*v374;
          uint64_t v202 = v365;
          ((void (*)(char *, uint64_t))*v374)(v382, v365);
          v244((id *)v380, v202);
          a1 = v363;
          unint64_t v203 = v354;
          if ((v242 & 1) == 0) {
            break;
          }
LABEL_146:
          uint64_t v245 = *a1;
          if (!*a1) {
            goto LABEL_242;
          }
          uint64_t v201 = (uint64_t)v366;
          uint64_t v246 = (char *)v366 + v245 + v206;
          BOOL v247 = *v379;
          (*v379)(v203, v245 + v381 + v206, v202);
          swift_arrayInitWithTakeFrontToBack();
          v247(v246, (uint64_t)v203, v202);
          v206 -= v362;
          uint64_t v91 = (uint64_t)v378 + 1;
          uint64_t v205 = v367;
          uint64_t v106 = v375;
          if (v367 == (char *)v378 + 1) {
            goto LABEL_113;
          }
        }
        uint64_t v106 = v375;
LABEL_112:
        uint64_t v201 = (uint64_t)v366;
        uint64_t v205 = v367;
LABEL_113:
        Swift::Int v95 = (Swift::Int)(v205 + 1);
        v201 += v362;
        v381 += v362;
        uint64_t v91 = (uint64_t)v339;
        if (v95 != v338) {
          continue;
        }
        break;
      }
      Swift::Int v95 = v338;
LABEL_150:
      if (v95 < v91)
      {
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
LABEL_240:
        __break(1u);
LABEL_241:
        __break(1u);
LABEL_242:
        __break(1u);
LABEL_243:
        __break(1u);
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
LABEL_247:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        goto LABEL_248;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v92 = v333;
      }
      else {
        uint64_t v92 = sub_1001F3D80(0, *((void *)v333 + 2) + 1, 1, v333);
      }
      unint64_t v249 = *((void *)v92 + 2);
      unint64_t v248 = *((void *)v92 + 3);
      unint64_t v94 = v249 + 1;
      char v367 = (char *)v95;
      if (v249 >= v248 >> 1) {
        uint64_t v92 = sub_1001F3D80((char *)(v248 > 1), v249 + 1, 1, v92);
      }
      *((void *)v92 + 2) = v94;
      unint64_t v250 = v92 + 32;
      char v251 = &v92[16 * v249 + 32];
      v252 = v367;
      *(void *)char v251 = v91;
      *((void *)v251 + 1) = v252;
      if (v249)
      {
        while (1)
        {
          unint64_t v253 = v94 - 1;
          if (v94 >= 4)
          {
            uint64_t v258 = &v250[16 * v94];
            uint64_t v259 = *((void *)v258 - 8);
            uint64_t v260 = *((void *)v258 - 7);
            BOOL v264 = __OFSUB__(v260, v259);
            uint64_t v261 = v260 - v259;
            if (v264) {
              goto LABEL_221;
            }
            uint64_t v263 = *((void *)v258 - 6);
            uint64_t v262 = *((void *)v258 - 5);
            BOOL v264 = __OFSUB__(v262, v263);
            uint64_t v256 = v262 - v263;
            char v257 = v264;
            if (v264) {
              goto LABEL_222;
            }
            unint64_t v265 = v94 - 2;
            uint64_t v266 = &v250[16 * v94 - 32];
            uint64_t v268 = *(void *)v266;
            uint64_t v267 = *((void *)v266 + 1);
            BOOL v264 = __OFSUB__(v267, v268);
            uint64_t v269 = v267 - v268;
            if (v264) {
              goto LABEL_224;
            }
            BOOL v264 = __OFADD__(v256, v269);
            uint64_t v270 = v256 + v269;
            if (v264) {
              goto LABEL_227;
            }
            if (v270 >= v261)
            {
              id v288 = &v250[16 * v253];
              uint64_t v290 = *(void *)v288;
              uint64_t v289 = *((void *)v288 + 1);
              BOOL v264 = __OFSUB__(v289, v290);
              uint64_t v291 = v289 - v290;
              if (v264) {
                goto LABEL_231;
              }
              BOOL v281 = v256 < v291;
              goto LABEL_187;
            }
          }
          else
          {
            if (v94 != 3)
            {
              uint64_t v282 = *((void *)v92 + 4);
              uint64_t v283 = *((void *)v92 + 5);
              BOOL v264 = __OFSUB__(v283, v282);
              uint64_t v275 = v283 - v282;
              char v276 = v264;
              goto LABEL_181;
            }
            uint64_t v255 = *((void *)v92 + 4);
            uint64_t v254 = *((void *)v92 + 5);
            BOOL v264 = __OFSUB__(v254, v255);
            uint64_t v256 = v254 - v255;
            char v257 = v264;
          }
          if (v257) {
            goto LABEL_223;
          }
          unint64_t v265 = v94 - 2;
          id v271 = &v250[16 * v94 - 32];
          uint64_t v273 = *(void *)v271;
          uint64_t v272 = *((void *)v271 + 1);
          BOOL v274 = __OFSUB__(v272, v273);
          uint64_t v275 = v272 - v273;
          char v276 = v274;
          if (v274) {
            goto LABEL_226;
          }
          uint64_t v277 = &v250[16 * v253];
          uint64_t v279 = *(void *)v277;
          uint64_t v278 = *((void *)v277 + 1);
          BOOL v264 = __OFSUB__(v278, v279);
          uint64_t v280 = v278 - v279;
          if (v264) {
            goto LABEL_229;
          }
          if (__OFADD__(v275, v280)) {
            goto LABEL_230;
          }
          if (v275 + v280 >= v256)
          {
            BOOL v281 = v256 < v280;
LABEL_187:
            if (v281) {
              unint64_t v253 = v265;
            }
            goto LABEL_189;
          }
LABEL_181:
          if (v276) {
            goto LABEL_225;
          }
          v284 = &v250[16 * v253];
          uint64_t v286 = *(void *)v284;
          uint64_t v285 = *((void *)v284 + 1);
          BOOL v264 = __OFSUB__(v285, v286);
          uint64_t v287 = v285 - v286;
          if (v264) {
            goto LABEL_228;
          }
          if (v287 < v275) {
            goto LABEL_15;
          }
LABEL_189:
          unint64_t v292 = v253 - 1;
          if (v253 - 1 >= v94)
          {
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }
          if (!*a1) {
            goto LABEL_243;
          }
          v293 = v92;
          v294 = &v250[16 * v292];
          uint64_t v295 = *(void *)v294;
          v296 = &v250[16 * v253];
          uint64_t v297 = *((void *)v296 + 1);
          uint64_t v298 = v349;
          sub_10046974C(*a1 + *(void *)(v345 + 72) * *(void *)v294, *a1 + *(void *)(v345 + 72) * *(void *)v296, *a1 + *(void *)(v345 + 72) * v297, v344);
          if (v298)
          {
            uint64_t v300 = v311;
LABEL_199:
            swift_bridgeObjectRelease();
            v300[2] = 0;
            swift_bridgeObjectRelease();
            return;
          }
          if (v297 < v295) {
            goto LABEL_218;
          }
          if (v253 > *((void *)v293 + 2)) {
            goto LABEL_219;
          }
          *(void *)v294 = v295;
          *(void *)&v250[16 * v292 + 8] = v297;
          unint64_t v299 = *((void *)v293 + 2);
          if (v253 >= v299) {
            goto LABEL_220;
          }
          uint64_t v349 = 0;
          unint64_t v94 = v299 - 1;
          memmove(&v250[16 * v253], v296 + 16, 16 * (v299 - 1 - v253));
          uint64_t v92 = v293;
          *((void *)v293 + 2) = v299 - 1;
          if (v299 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v94 = 1;
LABEL_15:
      Swift::Int v93 = a1[1];
      uint64_t v91 = (uint64_t)v367;
      if ((uint64_t)v367 >= v93) {
        goto LABEL_201;
      }
    }
    Swift::Int v362 = v93;
    uint64_t v96 = *a1;
    uint64_t v97 = v345;
    Swift::Int v98 = *(void *)(v345 + 72);
    char v367 = (char *)(v91 + 1);
    uint64_t v99 = v96 + v98 * v95;
    uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v345 + 16);
    uint64_t v101 = v325;
    uint64_t v102 = v365;
    v100(v325, v99, v365);
    uint64_t v329 = v96;
    Swift::Int v381 = v98;
    v100(v328, v96 + v98 * v91, v102);
    uint64_t v103 = v319;
    v377 = (void (*)(id *, char *, uint64_t))v100;
    v100((char *)v319, (uint64_t)v101, v102);
    v376 = *(uint64_t (**)(id *, uint64_t))(v97 + 88);
    int v104 = v376(v103, v102);
    if (v104 == v371)
    {
      ((void (*)(id *, uint64_t))*v374)(v103, v102);
      uint64_t v105 = v321;
      uint64_t v106 = v375;
      v366 = *v370;
      v366(v321, 1, 1, v375);
      uint64_t v107 = v324;
      uint64_t v108 = (uint64_t)v314;
      uint64_t v109 = (uint64_t)v313;
      goto LABEL_31;
    }
    uint64_t v108 = (uint64_t)v314;
    uint64_t v109 = (uint64_t)v313;
    if (v104 == v358)
    {
      (*v357)(v103, v365);
      id v110 = *v103;
      id v111 = [*v103 pinnedDate];
      if (v111)
      {
        uint64_t v112 = v111;
        Class v113 = &v349;
LABEL_26:
        uint64_t v115 = *(v113 - 32);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v116 = (char *)*v370;
        uint64_t v117 = v115;
        uint64_t v118 = 0;
LABEL_30:
        v366 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v116;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v116)(v117, v118, 1, v375);
        uint64_t v120 = v115;
        uint64_t v105 = v321;
        sub_100096408(v120, v321, (uint64_t *)&unk_100909A40);
        uint64_t v107 = v324;
        uint64_t v106 = v375;
LABEL_31:
        char v368 = *v369;
        if (v368(v105, 1, v106) == 1)
        {
          sub_1000966BC(v105, (uint64_t *)&unk_100909A40);
          LODWORD(v338) = 1;
        }
        else
        {
          unint64_t v121 = *v364;
          (*v364)(v320, v105, v106);
          uint64_t v122 = v312;
          uint64_t v123 = v365;
          v377(v312, v328, v365);
          int v124 = v376(v122, v123);
          if (v124 == v371)
          {
            ((void (*)(id *, uint64_t))*v374)(v122, v123);
            v366(v107, 1, 1, v106);
          }
          else
          {
            if (v124 == v358)
            {
              uint64_t v125 = v312;
              (*v357)(v312, v365);
              id v126 = *v125;
              id v127 = [*v125 pinnedDate];
              if (v127)
              {
                Class v128 = v127;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v129 = 0;
              }
              else
              {
                uint64_t v129 = 1;
              }

              uint64_t v106 = v375;
              v366(v109, v129, 1, v375);
              uint64_t v135 = v109;
            }
            else
            {
              if (v124 != v351) {
                goto LABEL_247;
              }
              uint64_t v130 = v312;
              (*v357)(v312, v365);
              id v131 = *v130;
              id v132 = [*v130 pinnedDate];
              if (v132)
              {
                uint64_t v133 = v132;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v134 = 0;
              }
              else
              {
                uint64_t v134 = 1;
              }

              uint64_t v106 = v375;
              v366(v108, v134, 1, v375);
              uint64_t v135 = v108;
            }
            uint64_t v107 = v324;
            sub_100096408(v135, v324, (uint64_t *)&unk_100909A40);
          }
          if (v368(v107, 1, v106) == 1)
          {
            (*v355)(v320, v106);
            sub_1000966BC(v107, (uint64_t *)&unk_100909A40);
            LODWORD(v338) = 0;
          }
          else
          {
            id v136 = v316;
            v121(v316, v107, v106);
            uint64_t v137 = v320;
            LODWORD(v338) = static Date.< infix(_:_:)();
            unint64_t v138 = *v355;
            (*v355)(v136, v106);
            v138(v137, v106);
          }
        }
        unint64_t v139 = *v374;
        uint64_t v140 = v365;
        ((void (*)(char *, uint64_t))*v374)(v328, v365);
        v378 = (void (*)(id *, uint64_t))v139;
        ((void (*)(char *, uint64_t))v139)(v325, v140);
        uint64_t v91 = (uint64_t)v339;
        Swift::Int v95 = (Swift::Int)(v339 + 2);
        Swift::Int v93 = v362;
        if ((uint64_t)(v339 + 2) < v362)
        {
          uint64_t v332 = v381 * (void)v367;
          uint64_t v141 = v329;
          uint64_t v142 = v381 * v95;
          uint64_t v143 = v331;
          while (1)
          {
            char v367 = (char *)v95;
            uint64_t v144 = v342;
            uint64_t v145 = v365;
            unint64_t v146 = (void (*)(char *, uint64_t, uint64_t))v377;
            v377((id *)v342, (char *)(v141 + v142), v365);
            v146(v346, v141 + v332, v145);
            uint64_t v147 = v335;
            v146((char *)v335, (uint64_t)v144, v145);
            int v148 = v376(v147, v145);
            if (v148 == v371)
            {
              v378(v147, v145);
              uint64_t v149 = v337;
              v366(v337, 1, 1, v106);
              uint64_t v150 = v340;
            }
            else
            {
              if (v148 == v358)
              {
                (*v357)(v147, v365);
                id v151 = *v147;
                id v152 = [*v147 pinnedDate];
                if (v152)
                {
                  uint64_t v153 = v152;
                  uint64_t v154 = v326;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v155 = v154;
                  uint64_t v156 = 0;
                }
                else
                {

                  uint64_t v154 = v326;
                  uint64_t v155 = v326;
                  uint64_t v156 = 1;
                }
                v366((uint64_t)v155, v156, 1, v375);
                uint64_t v150 = v340;
                uint64_t v162 = (uint64_t)v154;
              }
              else
              {
                if (v148 != v351) {
                  goto LABEL_247;
                }
                (*v357)(v147, v365);
                id v157 = *v147;
                id v158 = [*v147 pinnedDate];
                if (v158)
                {
                  id v159 = v158;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  long long v160 = v143;
                  uint64_t v161 = 0;
                }
                else
                {

                  long long v160 = v143;
                  uint64_t v161 = 1;
                }
                v366((uint64_t)v160, v161, 1, v375);
                uint64_t v150 = v340;
                uint64_t v162 = (uint64_t)v143;
              }
              uint64_t v149 = v337;
              sub_100096408(v162, v337, (uint64_t *)&unk_100909A40);
              uint64_t v106 = v375;
            }
            if (v368(v149, 1, v106) == 1)
            {
              sub_1000966BC(v149, (uint64_t *)&unk_100909A40);
              int v163 = 1;
            }
            else
            {
              unint64_t v164 = *v364;
              (*v364)(v336, v149, v106);
              uint64_t v165 = v330;
              uint64_t v166 = v365;
              v377(v330, v346, v365);
              int v167 = v376(v165, v166);
              if (v167 == v371)
              {
                v378(v165, v166);
                v366(v150, 1, 1, v106);
              }
              else
              {
                if (v167 == v358)
                {
                  (*v357)(v165, v365);
                  id v168 = *v165;
                  id v169 = [*v165 pinnedDate];
                  if (v169)
                  {
                    uint64_t v170 = v169;
                    uint64_t v171 = v322;
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    unint64_t v172 = v171;
                    uint64_t v173 = 0;
                  }
                  else
                  {

                    uint64_t v171 = v322;
                    unint64_t v172 = v322;
                    uint64_t v173 = 1;
                  }
                  v366((uint64_t)v172, v173, 1, v375);
                  uint64_t v180 = (uint64_t)v171;
                }
                else
                {
                  if (v167 != v351) {
                    goto LABEL_247;
                  }
                  (*v357)(v165, v365);
                  id v174 = *v165;
                  id v175 = [*v165 pinnedDate];
                  if (v175)
                  {
                    uint64_t v176 = v175;
                    id v177 = v323;
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    BOOL v178 = v177;
                    uint64_t v179 = 0;
                  }
                  else
                  {

                    id v177 = v323;
                    BOOL v178 = v323;
                    uint64_t v179 = 1;
                  }
                  v366((uint64_t)v178, v179, 1, v375);
                  uint64_t v180 = (uint64_t)v177;
                }
                uint64_t v150 = v340;
                sub_100096408(v180, v340, (uint64_t *)&unk_100909A40);
                uint64_t v106 = v375;
              }
              if (v368(v150, 1, v106) == 1)
              {
                (*v355)(v336, v106);
                sub_1000966BC(v150, (uint64_t *)&unk_100909A40);
                int v163 = 0;
              }
              else
              {
                unint64_t v181 = v327;
                v164(v327, v150, v106);
                BOOL v182 = v336;
                int v163 = static Date.< infix(_:_:)();
                uint64_t v183 = *v355;
                (*v355)(v181, v106);
                v183(v182, v106);
              }
              uint64_t v143 = v331;
            }
            uint64_t v184 = v365;
            unint64_t v185 = (void (*)(char *, uint64_t))v378;
            v378((id *)v346, v365);
            v185(v342, v184);
            if ((v338 ^ v163)) {
              break;
            }
            Swift::Int v95 = (Swift::Int)(v367 + 1);
            v141 += v381;
            Swift::Int v93 = v362;
            if ((char *)v362 == v367 + 1)
            {
              Swift::Int v95 = v362;
              a1 = v363;
              uint64_t v91 = (uint64_t)v339;
              goto LABEL_87;
            }
          }
          Swift::Int v93 = v362;
          a1 = v363;
          uint64_t v91 = (uint64_t)v339;
          Swift::Int v95 = (Swift::Int)v367;
        }
LABEL_87:
        char v186 = v333;
        if (v338)
        {
          if (v95 < v91) {
            goto LABEL_239;
          }
          if (v91 < v95)
          {
            Swift::Int v187 = v95;
            uint64_t v188 = 0;
            uint64_t v189 = v91;
            uint64_t v190 = v381 * (v187 - 1);
            uint64_t v191 = v187 * v381;
            uint64_t v192 = v189;
            uint64_t v193 = v189 * v381;
            char v367 = (char *)v187;
            do
            {
              if (v192 != v187 + v188 - 1)
              {
                if (!v329) {
                  goto LABEL_244;
                }
                unint64_t v195 = v329 + v193;
                uint64_t v196 = v329 + v190;
                int v197 = *v379;
                uint64_t v198 = v329;
                ((void (*)(char *, uint64_t, uint64_t, char *))*v379)(v334, v329 + v193, v365, v186);
                if (v193 < v190 || v195 >= v198 + v191)
                {
                  uint64_t v194 = v365;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v194 = v365;
                  if (v193 != v190) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                v197((char *)v196, (uint64_t)v334, v194);
                a1 = v363;
                uint64_t v106 = v375;
                char v186 = v333;
              }
              ++v192;
              --v188;
              Swift::Int v187 = (Swift::Int)v367;
              v190 -= v381;
              v191 -= v381;
              v193 += v381;
            }
            while (v192 < (uint64_t)&v367[v188]);
            uint64_t v91 = (uint64_t)v339;
            Swift::Int v95 = (Swift::Int)v367;
            Swift::Int v93 = v362;
          }
        }
        goto LABEL_101;
      }

      uint64_t v116 = (char *)*v370;
      uint64_t v119 = &v349;
    }
    else
    {
      if (v104 != v351) {
        goto LABEL_247;
      }
      (*v357)(v103, v365);
      id v110 = *v103;
      id v114 = [*v103 pinnedDate];
      if (v114)
      {
        uint64_t v112 = v114;
        Class v113 = (uint64_t *)v350;
        goto LABEL_26;
      }

      uint64_t v116 = (char *)*v370;
      uint64_t v119 = (uint64_t *)v350;
    }
    uint64_t v115 = *(v119 - 32);
    uint64_t v117 = v115;
    uint64_t v118 = 1;
    goto LABEL_30;
  }
  unint64_t v344 = (unint64_t)_swiftEmptyArrayStorage
       + ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80));
  v311 = _swiftEmptyArrayStorage;
  if (v83 == 1)
  {
    uint64_t v88 = v345;
    unint64_t v90 = v344;
    goto LABEL_13;
  }
  unint64_t v94 = _swiftEmptyArrayStorage[2];
  uint64_t v92 = (char *)_swiftEmptyArrayStorage;
LABEL_201:
  if (v94 >= 2)
  {
    uint64_t v301 = *a1;
    uint64_t v302 = v345;
    uint64_t v300 = v311;
    while (1)
    {
      unint64_t v303 = v94 - 2;
      if (v94 < 2) {
        goto LABEL_233;
      }
      if (!v301) {
        goto LABEL_245;
      }
      v304 = v92;
      uint64_t v305 = *(void *)&v92[16 * v303 + 32];
      uint64_t v306 = *(void *)&v92[16 * v94 + 24];
      uint64_t v307 = v349;
      sub_10046974C(v301 + *(void *)(v302 + 72) * v305, v301 + *(void *)(v302 + 72) * *(void *)&v92[16 * v94 + 16], v301 + *(void *)(v302 + 72) * v306, v344);
      if (v307) {
        goto LABEL_199;
      }
      if (v306 < v305) {
        goto LABEL_234;
      }
      uint64_t v349 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v304 = sub_1001F433C((uint64_t)v304);
      }
      if (v303 >= *((void *)v304 + 2)) {
        goto LABEL_235;
      }
      uint64_t v308 = &v304[16 * v303 + 32];
      *(void *)uint64_t v308 = v305;
      *((void *)v308 + 1) = v306;
      unint64_t v309 = *((void *)v304 + 2);
      if (v94 > v309) {
        goto LABEL_236;
      }
      memmove(&v304[16 * v94 + 16], &v304[16 * v94 + 32], 16 * (v309 - v94));
      uint64_t v92 = v304;
      *((void *)v304 + 2) = v309 - 1;
      unint64_t v94 = v309 - 1;
      if (v309 <= 2) {
        goto LABEL_214;
      }
    }
  }
  uint64_t v300 = v311;
LABEL_214:
  swift_bridgeObjectRelease();
  v300[2] = 0;
  swift_bridgeObjectRelease();
}

void sub_100468C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v116 = a4;
  uint64_t v85 = a1;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v83 - v10;
  __chkstk_darwin(v12);
  uint64_t v94 = (uint64_t)&v83 - v13;
  __chkstk_darwin(v14);
  unint64_t v89 = (char *)&v83 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v83 - v17;
  __chkstk_darwin(v19);
  uint64_t v110 = (uint64_t)&v83 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v91 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v99 = (char *)&v83 - v25;
  uint64_t v26 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  __chkstk_darwin(v26);
  Class v113 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  Swift::Int v93 = (id *)((char *)&v83 - v29);
  __chkstk_darwin(v30);
  Swift::Int v98 = (void **)((char *)&v83 - v31);
  __chkstk_darwin(v32);
  uint64_t v120 = (char *)&v83 - v33;
  __n128 v36 = __chkstk_darwin(v34);
  uint64_t v118 = (char *)&v83 - v37;
  uint64_t v102 = a3;
  uint64_t v84 = a2;
  if (a3 == a2) {
    return;
  }
  uint64_t v39 = *(void (**)(void, void, void, __n128))(v35 + 16);
  uint64_t v38 = v35 + 16;
  uint64_t v40 = *(void *)(v38 + 56);
  uint64_t v107 = (uint64_t (**)(void **, uint64_t))(v38 + 72);
  uint64_t v108 = (void (*)(char *, uint64_t, uint64_t))v39;
  int v106 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
  int v96 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
  int v90 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
  Swift::Int v95 = (void (**)(void **, uint64_t))(v38 + 80);
  id v111 = (void (**)(void **, uint64_t))(v38 - 8);
  int v104 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v97 = (id *)(v22 + 32);
  uint64_t v92 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v109 = v38;
  uint64_t v112 = (void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v119 = v40 * (v102 - 1);
  uint64_t v100 = v40;
  uint64_t v41 = v40 * v102;
  uint64_t v86 = v11;
  uint64_t v103 = v18;
  uint64_t v87 = v8;
LABEL_6:
  uint64_t v43 = 0;
  uint64_t v44 = v85;
  uint64_t v45 = v110;
  uint64_t v101 = v41;
  while (1)
  {
    uint64_t v117 = v44;
    uint64_t v46 = v21;
    uint64_t v47 = *v116;
    uint64_t v115 = v41 + v43;
    uint64_t v48 = v41 + v43 + v47;
    uint64_t v49 = v118;
    uint64_t v50 = v108;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v108)(v118, v48, v26, v36);
    uint64_t v114 = v119 + v43;
    v50(v120, v119 + v43 + v47, v26);
    uint64_t v51 = v98;
    v50((char *)v98, (uint64_t)v49, v26);
    uint64_t v52 = *v107;
    int v53 = (*v107)(v51, v26);
    if (v53 == v106)
    {
      (*v111)(v51, v26);
      uint64_t v54 = *v104;
      uint64_t v21 = v46;
      (*v104)(v45, 1, 1, v46);
      goto LABEL_21;
    }
    uint64_t v21 = v46;
    if (v53 == v96)
    {
      (*v95)(v51, v26);
      uint64_t v55 = *v51;
      id v56 = [v55 pinnedDate];
      if (!v56)
      {

        uint64_t v54 = *v104;
        (*v104)((uint64_t)v18, 1, 1, v46);
        goto LABEL_20;
      }
      uint64_t v57 = v56;
    }
    else
    {
      if (v53 != v90) {
        goto LABEL_40;
      }
      (*v95)(v51, v26);
      uint64_t v55 = *v51;
      id v58 = [v55 pinnedDate];
      if (!v58)
      {

        uint64_t v54 = *v104;
        uint64_t v18 = v89;
        v54((uint64_t)v89, 1, 1, v46);
        goto LABEL_20;
      }
      uint64_t v57 = v58;
      uint64_t v18 = v89;
    }
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v54 = *v104;
    (*v104)((uint64_t)v18, 0, 1, v46);
LABEL_20:
    uint64_t v45 = v110;
    sub_100096408((uint64_t)v18, v110, (uint64_t *)&unk_100909A40);
LABEL_21:
    int v59 = *v105;
    if ((*v105)(v45, 1, v21) == 1)
    {
      sub_1000966BC(v45, (uint64_t *)&unk_100909A40);
      uint64_t v60 = *v111;
      (*v111)((void **)v120, v26);
      v60((void **)v118, v26);
      uint64_t v41 = v101;
      uint64_t v61 = v117;
    }
    else
    {
      id v62 = *v97;
      ((void (*)(char *, uint64_t, uint64_t))*v97)(v99, v45, v21);
      uint64_t v63 = v93;
      v108((char *)v93, (uint64_t)v120, v26);
      int v64 = v52(v63, v26);
      if (v64 == v106)
      {
        (*v111)(v63, v26);
        uint64_t v65 = v94;
        v54(v94, 1, 1, v21);
      }
      else if (v64 == v96)
      {
        id v88 = v62;
        (*v95)(v63, v26);
        id v66 = *v63;
        id v67 = [*v63 pinnedDate];
        if (v67)
        {
          uint64_t v68 = v67;
          uint64_t v69 = (uint64_t)v86;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v70 = 0;
        }
        else
        {
          uint64_t v70 = 1;
          uint64_t v69 = (uint64_t)v86;
        }

        v54(v69, v70, 1, v21);
        uint64_t v65 = v94;
        sub_100096408(v69, v94, (uint64_t *)&unk_100909A40);
        id v62 = v88;
      }
      else
      {
        uint64_t v71 = (uint64_t)v87;
        if (v64 != v90) {
          goto LABEL_40;
        }
        (*v95)(v63, v26);
        id v88 = *v63;
        id v72 = [v88 pinnedDate];
        if (v72)
        {
          uint64_t v73 = v72;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v74 = 0;
        }
        else
        {
          uint64_t v74 = 1;
        }

        v54(v71, v74, 1, v21);
        uint64_t v65 = v94;
        sub_100096408(v71, v94, (uint64_t *)&unk_100909A40);
      }
      if (v59(v65, 1, v21) == 1)
      {
        (*v92)(v99, v21);
        sub_1000966BC(v65, (uint64_t *)&unk_100909A40);
        uint64_t v42 = *v111;
        (*v111)((void **)v120, v26);
        v42((void **)v118, v26);
        uint64_t v18 = v103;
        uint64_t v41 = v101;
LABEL_5:
        v119 += v100;
        v41 += v100;
        if (++v102 == v84) {
          return;
        }
        goto LABEL_6;
      }
      uint64_t v75 = v91;
      ((void (*)(char *, uint64_t, uint64_t))v62)(v91, v65, v21);
      int v76 = v99;
      char v77 = static Date.< infix(_:_:)();
      uint64_t v78 = *v92;
      (*v92)(v75, v21);
      v78(v76, v21);
      uint64_t v79 = *v111;
      (*v111)((void **)v120, v26);
      v79((void **)v118, v26);
      uint64_t v18 = v103;
      uint64_t v41 = v101;
      uint64_t v61 = v117;
      if ((v77 & 1) == 0) {
        goto LABEL_5;
      }
    }
    uint64_t v80 = *v116;
    if (!*v116) {
      break;
    }
    uint64_t v81 = (char *)(v80 + v119 + v43);
    uint64_t v82 = *v112;
    (*v112)(v113, v80 + v41 + v43, v26);
    swift_arrayInitWithTakeFrontToBack();
    v82(v81, (uint64_t)v113, v26);
    v43 -= v100;
    uint64_t v44 = v61 + 1;
    uint64_t v18 = v103;
    uint64_t v45 = v110;
    if (v102 == v44) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_40:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_10046974C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v193 = a2;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v166 = (char *)v160 - v11;
  __chkstk_darwin(v12);
  unint64_t v172 = (void (**)(char *, uint64_t))((char *)v160 - v13);
  __chkstk_darwin(v14);
  id v168 = (char *)v160 - v15;
  __chkstk_darwin(v16);
  int v167 = (char *)v160 - v17;
  __chkstk_darwin(v18);
  unint64_t v181 = (unint64_t)v160 - v19;
  __chkstk_darwin(v20);
  id v169 = (char *)v160 - v21;
  __chkstk_darwin(v22);
  uint64_t v161 = (char *)v160 - v23;
  __chkstk_darwin(v24);
  uint64_t v173 = (void (**)(char *, uint64_t, uint64_t))((char *)v160 - v25);
  __chkstk_darwin(v26);
  uint64_t v165 = (char *)v160 - v27;
  __chkstk_darwin(v28);
  uint64_t v170 = (char *)v160 - v29;
  __chkstk_darwin(v30);
  uint64_t v180 = (uint64_t)v160 - v31;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v164 = (char *)v160 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v179 = (char *)v160 - v36;
  __chkstk_darwin(v37);
  int v163 = (char *)v160 - v38;
  __chkstk_darwin(v39);
  BOOL v178 = (char *)v160 - v40;
  uint64_t v41 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v171 = (void **)((char *)v160 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v44);
  id v177 = (id *)((char *)v160 - v45);
  __chkstk_darwin(v46);
  uint64_t v189 = (char *)v160 - v47;
  __chkstk_darwin(v48);
  char v186 = (char *)v160 - v49;
  __chkstk_darwin(v50);
  id v175 = (char *)v160 - v51;
  __chkstk_darwin(v52);
  uint64_t v176 = (id *)((char *)v160 - v53);
  __chkstk_darwin(v54);
  uint64_t v188 = (void (*)(char *))((char *)v160 - v55);
  __chkstk_darwin(v56);
  unint64_t v185 = (char *)v160 - v57;
  uint64_t v187 = *(void *)(v58 + 72);
  if (!v187)
  {
    __break(1u);
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (v193 - a1 == 0x8000000000000000 && v187 == -1) {
    goto LABEL_122;
  }
  int64_t v59 = a3 - v193;
  if (a3 - v193 == 0x8000000000000000 && v187 == -1)
  {
LABEL_123:
    __break(1u);
LABEL_124:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_125;
  }
  uint64_t v60 = (uint64_t)(v193 - a1) / v187;
  unint64_t v196 = a1;
  unint64_t v195 = a4;
  uint64_t v61 = v59 / v187;
  uint64_t v192 = v32;
  if (v60 >= v59 / v187)
  {
    if (v61 < 0) {
      goto LABEL_125;
    }
    uint64_t v63 = v61 * v187;
    v160[0] = v9;
    if (a4 < v193 || v193 + v63 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v193)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v109 = a4 + v63;
    unint64_t v194 = a4 + v63;
    unint64_t v196 = v193;
    if (v63 < 1 || a1 >= v193)
    {
LABEL_120:
      sub_1001F3F50(&v196, &v195, (uint64_t *)&v194);
      return 1;
    }
    uint64_t v111 = -v187;
    Class v113 = *(void (**)(char *))(v42 + 16);
    uint64_t v112 = v42 + 16;
    uint64_t v187 = v112 + 72;
    uint64_t v188 = v113;
    LODWORD(v185) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
    LODWORD(v174) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
    id v175 = (char *)(v112 + 80);
    LODWORD(v169) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
    uint64_t v191 = v112;
    uint64_t v114 = (void (**)(id *, uint64_t))(v112 - 8);
    uint64_t v183 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    uint64_t v184 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v173 = (void (**)(char *, uint64_t, uint64_t))(v33 + 32);
    uint64_t v170 = (char *)(v33 + 8);
    uint64_t v180 = a1;
    uint64_t v176 = (id *)a4;
    uint64_t v115 = v111;
    BOOL v178 = (char *)v111;
    uint64_t v162 = v41;
    while (1)
    {
      uint64_t v116 = v186;
      uint64_t v117 = v188;
      ((void (*)(char *, unint64_t, uint64_t))v188)(v186, v109 + v115, v41);
      BOOL v182 = (char *)(v193 + v115);
      v117(v189);
      uint64_t v118 = v177;
      ((void (*)(id *, char *, uint64_t))v117)(v177, v116, v41);
      uint64_t v119 = *(uint64_t (**)(void **, uint64_t))v187;
      int v120 = (*(uint64_t (**)(id *, uint64_t))v187)(v118, v41);
      unint64_t v190 = a3;
      if (v120 == v185)
      {
        (*v114)(v118, v41);
        unint64_t v121 = *v184;
        uint64_t v122 = v181;
        uint64_t v123 = v192;
        (*v184)(v181, 1, 1, v192);
        goto LABEL_87;
      }
      if (v120 == v174)
      {
        (*(void (**)(id *, uint64_t))v175)(v118, v41);
        id v124 = *v118;
        id v125 = [*v118 pinnedDate];
        if (!v125)
        {

          unint64_t v121 = *v184;
          id v132 = &v197;
LABEL_85:
          uint64_t v129 = *(v132 - 32);
          uint64_t v130 = v129;
          uint64_t v131 = 1;
          goto LABEL_86;
        }
        id v126 = v125;
        id v127 = &v197;
      }
      else
      {
        if (v120 != v169) {
          goto LABEL_124;
        }
        (*(void (**)(id *, uint64_t))v175)(v118, v41);
        id v124 = *v118;
        id v128 = [*v118 pinnedDate];
        if (!v128)
        {

          unint64_t v121 = *v184;
          id v132 = &v198;
          goto LABEL_85;
        }
        id v126 = v128;
        id v127 = &v198;
      }
      uint64_t v129 = *(v127 - 32);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v121 = *v184;
      uint64_t v130 = v129;
      uint64_t v131 = 0;
LABEL_86:
      uint64_t v123 = v192;
      v121(v130, v131, 1, v192);
      uint64_t v122 = v181;
      sub_100096408(v129, v181, (uint64_t *)&unk_100909A40);
LABEL_87:
      uint64_t v133 = *v183;
      if ((*v183)(v122, 1, v123) != 1)
      {
        uint64_t v135 = *v173;
        (*v173)(v179, v122, v123);
        id v136 = v171;
        ((void (*)(void **, char *, uint64_t))v188)(v171, v189, v41);
        int v137 = v119(v136, v41);
        if (v137 == v185)
        {
          (*v114)(v136, v41);
          unint64_t v138 = v172;
          v121((unint64_t)v172, 1, 1, v123);
          goto LABEL_101;
        }
        unint64_t v139 = v166;
        if (v137 == v174)
        {
          (*(void (**)(void **, uint64_t))v175)(v136, v41);
          uint64_t v140 = *v136;
          id v141 = [v140 pinnedDate];
          if (v141)
          {
            uint64_t v142 = v141;
            goto LABEL_97;
          }
          uint64_t v144 = 1;
        }
        else
        {
          if (v137 != v169) {
            goto LABEL_124;
          }
          (*(void (**)(void **, uint64_t))v175)(v136, v41);
          uint64_t v140 = *v136;
          id v143 = [v140 pinnedDate];
          if (v143)
          {
            uint64_t v142 = v143;
            unint64_t v139 = (char *)v160[0];
LABEL_97:
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v144 = 0;
          }
          else
          {
            uint64_t v144 = 1;
            unint64_t v139 = (char *)v160[0];
          }
        }

        uint64_t v145 = v144;
        uint64_t v123 = v192;
        v121((unint64_t)v139, v145, 1, v192);
        uint64_t v146 = (uint64_t)v139;
        unint64_t v138 = v172;
        sub_100096408(v146, (uint64_t)v172, (uint64_t *)&unk_100909A40);
LABEL_101:
        if (v133((uint64_t)v138, 1, v123) == 1)
        {
          (*(void (**)(char *, uint64_t))v170)(v179, v123);
          sub_1000966BC((uint64_t)v138, (uint64_t *)&unk_100909A40);
          char v134 = 0;
        }
        else
        {
          uint64_t v147 = v164;
          v135(v164, (uint64_t)v138, v123);
          int v148 = v179;
          uint64_t v149 = v123;
          char v134 = static Date.< infix(_:_:)();
          uint64_t v150 = *(void (**)(char *, uint64_t))v170;
          (*(void (**)(char *, uint64_t))v170)(v147, v149);
          v150(v148, v149);
          uint64_t v41 = v162;
        }
        goto LABEL_104;
      }
      sub_1000966BC(v122, (uint64_t *)&unk_100909A40);
      char v134 = 1;
LABEL_104:
      unint64_t v151 = v190;
      uint64_t v115 = (uint64_t)v178;
      id v152 = &v178[v190];
      uint64_t v153 = *v114;
      (*v114)((id *)v189, v41);
      v153((id *)v186, v41);
      if (v134)
      {
        if (v151 < v193 || (unint64_t)v152 >= v193)
        {
          uint64_t v156 = (unsigned int (**)(void, void, void))v182;
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v155 = v180;
          unint64_t v157 = (unint64_t)v176;
        }
        else
        {
          BOOL v154 = v151 == v193;
          unint64_t v155 = v180;
          uint64_t v156 = (unsigned int (**)(void, void, void))v182;
          unint64_t v157 = (unint64_t)v176;
          if (!v154) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v196 += v115;
      }
      else
      {
        unint64_t v158 = v194;
        v194 += v115;
        if (v151 < v158 || (unint64_t)v152 >= v158)
        {
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v156 = (unsigned int (**)(void, void, void))v193;
          unint64_t v155 = v180;
        }
        else
        {
          unint64_t v155 = v180;
          if (v151 != v158) {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v156 = (unsigned int (**)(void, void, void))v193;
        }
        unint64_t v157 = (unint64_t)v176;
      }
      unint64_t v109 = v194;
      if (v194 > v157)
      {
        unint64_t v193 = (unint64_t)v156;
        a3 = (unint64_t)v152;
        if ((unint64_t)v156 > v155) {
          continue;
        }
      }
      goto LABEL_120;
    }
  }
  if ((v60 & 0x8000000000000000) == 0)
  {
    uint64_t v62 = v60 * v187;
    if (a4 < a1 || a1 + v62 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v181 = a4 + v62;
    unint64_t v194 = a4 + v62;
    if (v62 >= 1 && v193 < a3)
    {
      id v66 = *(char **)(v42 + 16);
      uint64_t v65 = v42 + 16;
      uint64_t v189 = v66;
      char v186 = (char *)(v65 + 72);
      LODWORD(v184) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
      LODWORD(v177) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
      uint64_t v179 = (char *)(v65 + 80);
      LODWORD(v171) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
      uint64_t v191 = v65;
      id v67 = (void (**)(id *, uint64_t))(v65 - 8);
      BOOL v182 = (char *)(v33 + 48);
      uint64_t v183 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 56);
      id v174 = (void (**)(char *, uint64_t, uint64_t))(v33 + 32);
      unint64_t v172 = (void (**)(char *, uint64_t))(v33 + 8);
      unint64_t v190 = a3;
      while (1)
      {
        uint64_t v68 = v185;
        uint64_t v69 = (void (*)(char *, unint64_t, uint64_t))v189;
        ((void (*)(char *, unint64_t, uint64_t))v189)(v185, v193, v41);
        v69((char *)v188, a4, v41);
        uint64_t v70 = v176;
        v69((char *)v176, (unint64_t)v68, v41);
        uint64_t v71 = *(uint64_t (**)(char *, uint64_t))v186;
        int v72 = (*(uint64_t (**)(id *, uint64_t))v186)(v70, v41);
        if (v72 == v184)
        {
          (*v67)(v70, v41);
          uint64_t v73 = *v183;
          uint64_t v74 = v180;
          uint64_t v75 = v192;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v183)(v180, 1, 1, v192);
        }
        else
        {
          if (v72 == v177)
          {
            (*(void (**)(id *, uint64_t))v179)(v70, v41);
            id v76 = *v70;
            id v77 = [*v70 pinnedDate];
            if (v77)
            {
              uint64_t v78 = v77;
              uint64_t v79 = (uint64_t)v170;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v73 = *v183;
              ((void (*)(uint64_t, void, uint64_t, uint64_t))*v183)(v79, 0, 1, v192);
            }
            else
            {

              uint64_t v73 = *v183;
              uint64_t v79 = (uint64_t)v170;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v183)(v170, 1, 1, v192);
            }
            uint64_t v74 = v180;
            sub_100096408(v79, v180, (uint64_t *)&unk_100909A40);
            a3 = v190;
          }
          else
          {
            uint64_t v80 = v165;
            if (v72 != v171) {
              goto LABEL_124;
            }
            (*(void (**)(id *, uint64_t))v179)(v70, v41);
            id v81 = *v70;
            id v82 = [*v70 pinnedDate];
            if (v82)
            {
              uint64_t v83 = v82;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v84 = (uint64_t)v80;
              uint64_t v73 = *v183;
              ((void (*)(uint64_t, void, uint64_t, uint64_t))*v183)(v84, 0, 1, v192);
            }
            else
            {

              uint64_t v84 = (uint64_t)v80;
              uint64_t v73 = *v183;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v183)(v84, 1, 1, v192);
            }
            a3 = v190;
            uint64_t v74 = v180;
            sub_100096408(v84, v180, (uint64_t *)&unk_100909A40);
          }
          uint64_t v75 = v192;
        }
        uint64_t v85 = *(unsigned int (**)(void *, uint64_t, uint64_t))v182;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v182)(v74, 1, v75) == 1)
        {
          sub_1000966BC(v74, (uint64_t *)&unk_100909A40);
          uint64_t v86 = *v67;
          (*v67)((id *)v188, v41);
          v86((id *)v185, v41);
          goto LABEL_38;
        }
        unint64_t v89 = *v174;
        (*v174)(v178, v74, v75);
        int v90 = v175;
        ((void (*)(char *, void (*)(char *), uint64_t))v189)(v175, v188, v41);
        int v91 = v71(v90, v41);
        if (v91 != v184) {
          break;
        }
        (*v67)((id *)v90, v41);
        uint64_t v92 = v173;
        ((void (*)(void (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v73)(v173, 1, 1, v75);
        Swift::Int v93 = v92;
LABEL_56:
        if (v85(v93, 1, v75) == 1)
        {
          (*v172)(v178, v75);
          sub_1000966BC((uint64_t)v93, (uint64_t *)&unk_100909A40);
          uint64_t v102 = *v67;
          (*v67)((id *)v188, v41);
          v102((id *)v185, v41);
LABEL_59:
          unint64_t v87 = v196;
          unint64_t v108 = v195 + v187;
          if (v196 < v195 || v196 >= v108)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v196 != v195)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v195 = v108;
          unint64_t v88 = v193;
          goto LABEL_65;
        }
        uint64_t v103 = v163;
        v89(v163, (uint64_t)v93, v75);
        int v104 = v178;
        char v105 = static Date.< infix(_:_:)();
        int v106 = *v172;
        (*v172)(v103, v75);
        v106(v104, v75);
        uint64_t v107 = *v67;
        (*v67)((id *)v188, v41);
        v107((id *)v185, v41);
        if ((v105 & 1) == 0) {
          goto LABEL_59;
        }
LABEL_38:
        unint64_t v87 = v196;
        unint64_t v88 = v193 + v187;
        if (v196 < v193 || v196 >= v88)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v196 == v193)
        {
          unint64_t v87 = v193;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_65:
        unint64_t v196 = v87 + v187;
        a4 = v195;
        if (v195 < v181)
        {
          unint64_t v193 = v88;
          if (v88 < a3) {
            continue;
          }
        }
        goto LABEL_120;
      }
      uint64_t v94 = (uint64_t)v169;
      if (v91 == v177)
      {
        Swift::Int v95 = (void **)v175;
        (*(void (**)(char *, uint64_t))v179)(v175, v41);
        int v96 = *v95;
        id v97 = [v96 pinnedDate];
        if (!v97)
        {
          uint64_t v101 = 1;
          uint64_t v94 = (uint64_t)v161;
          goto LABEL_55;
        }
        Swift::Int v98 = v97;
        uint64_t v94 = (uint64_t)v161;
      }
      else
      {
        uint64_t v99 = (void **)v175;
        if (v91 != v171) {
          goto LABEL_124;
        }
        (*(void (**)(char *, uint64_t))v179)(v175, v41);
        int v96 = *v99;
        id v100 = [v96 pinnedDate];
        if (!v100)
        {
          uint64_t v101 = 1;
          goto LABEL_55;
        }
        Swift::Int v98 = v100;
      }
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v101 = 0;
LABEL_55:

      uint64_t v75 = v192;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v94, v101, 1, v192);
      Swift::Int v93 = v173;
      sub_100096408(v94, (uint64_t)v173, (uint64_t *)&unk_100909A40);
      a3 = v190;
      goto LABEL_56;
    }
    goto LABEL_120;
  }
LABEL_125:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10046ABF0(uint64_t a1, uint64_t a2)
{
  return sub_10046AC5C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10046B00C);
}

uint64_t sub_10046AC5C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5, a2);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, v5, a2);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_10046ADF8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v31 = *(void *)(a3 + 16);
  if (!v31)
  {
    uint64_t v26 = 0;
    goto LABEL_27;
  }
  uint64_t v32 = a4 + 56;
  uint64_t v30 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  for (uint64_t i = 0; i != v31; ++i)
  {
    unint64_t v7 = (uint64_t *)(v30 + 16 * i);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = 1 << v12;
    if (((1 << v12) & *(void *)(v32 + 8 * (v12 >> 6))) == 0) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a4 + 48);
    uint64_t v16 = (void *)(v15 + 16 * v12);
    BOOL v17 = *v16 == v9 && v16[1] == v8;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v21 = ~v11;
      for (unint64_t j = v12 + 1; ; unint64_t j = v23 + 1)
      {
        unint64_t v23 = j & v21;
        if (((*(void *)(v32 + (((j & v21) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v21)) & 1) == 0) {
          break;
        }
        uint64_t v24 = (void *)(v15 + 16 * v23);
        BOOL v25 = *v24 == v9 && v24[1] == v8;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v13 = v23 >> 6;
          uint64_t v14 = 1 << v23;
          goto LABEL_12;
        }
      }
LABEL_3:
      swift_bridgeObjectRelease();
      continue;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    unint64_t v19 = a1[v13];
    a1[v13] = v14 | v19;
    if ((v14 & v19) == 0 && __OFADD__(v28++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a2;
  uint64_t v26 = v28;
LABEL_27:
  swift_retain();
  return sub_1002402D0(a1, v5, v26, a4);
}

void sub_10046B00C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for REMObjectID_Codable();
    sub_100470490((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v41;
    uint64_t v36 = v42;
    uint64_t v5 = v43;
    uint64_t v6 = v44;
    unint64_t v7 = v45;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v36 = a3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  uint64_t v34 = 0;
  int64_t v35 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v39 = a4 + 56;
  uint64_t v38 = v4;
LABEL_8:
  uint64_t v11 = v6;
  unint64_t v12 = v7;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_45;
    }
    type metadata accessor for REMObjectID_Codable();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v46;
    swift_unknownObjectRelease();
    uint64_t v6 = v11;
    uint64_t v13 = v12;
    if (!v46) {
      goto LABEL_45;
    }
LABEL_33:
    Swift::Int v19 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
    uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    uint64_t v23 = 1 << v21;
    if (((1 << v21) & *(void *)(v39 + 8 * (v21 >> 6))) == 0) {
      goto LABEL_9;
    }
    type metadata accessor for REMObjectID_Codable();
    id v24 = *(id *)(*(void *)(a4 + 48) + 8 * v21);
    char v25 = static NSObject.== infix(_:_:)();

    if (v25)
    {

LABEL_41:
      uint64_t v4 = v38;
      unint64_t v31 = a1[v22];
      a1[v22] = v23 | v31;
      uint64_t v11 = v6;
      unint64_t v7 = v13;
      unint64_t v12 = v13;
      if ((v23 & v31) == 0)
      {
        if (!__OFADD__(v34++, 1)) {
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v26 = ~v20;
      for (unint64_t i = v21 + 1; ; unint64_t i = v28 + 1)
      {
        unint64_t v28 = i & v26;
        if (((*(void *)(v39 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
          break;
        }
        id v29 = *(id *)(*(void *)(a4 + 48) + 8 * v28);
        char v30 = static NSObject.== infix(_:_:)();

        if (v30)
        {

          unint64_t v22 = v28 >> 6;
          uint64_t v23 = 1 << v28;
          goto LABEL_41;
        }
      }
LABEL_9:

      uint64_t v11 = v6;
      uint64_t v4 = v38;
      unint64_t v12 = v13;
    }
  }
  if (v12)
  {
    uint64_t v13 = (v12 - 1) & v12;
    unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
    uint64_t v6 = v11;
LABEL_32:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    if (!v15) {
      goto LABEL_45;
    }
    goto LABEL_33;
  }
  int64_t v16 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v16 >= v35) {
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v36 + 8 * v16);
    uint64_t v6 = v11 + 1;
    if (!v17)
    {
      uint64_t v6 = v11 + 2;
      if (v11 + 2 >= v35) {
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v36 + 8 * v6);
      if (!v17)
      {
        uint64_t v6 = v11 + 3;
        if (v11 + 3 >= v35) {
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v36 + 8 * v6);
        if (!v17)
        {
          uint64_t v6 = v11 + 4;
          if (v11 + 4 >= v35) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v36 + 8 * v6);
          if (!v17)
          {
            uint64_t v6 = v11 + 5;
            if (v11 + 5 >= v35) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v36 + 8 * v6);
            if (!v17)
            {
              uint64_t v18 = v11 + 6;
              while (v35 != v18)
              {
                unint64_t v17 = *(void *)(v36 + 8 * v18++);
                if (v17)
                {
                  uint64_t v6 = v18 - 1;
                  goto LABEL_31;
                }
              }
LABEL_45:
              sub_1000C1AF8();
              swift_retain();
              sub_100240568(a1, a2, v34, a4);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v13 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_10046B43C(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = sub_100094134(&qword_1009192F8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v22 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v23 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
    *(void *)&v6[*(int *)(v4 + 48)] = v17;
    swift_bridgeObjectRetain();
    a2(v6, v17);
    uint64_t result = sub_1000966BC((uint64_t)v6, &qword_1009192F8);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v23) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10046B6A8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v4) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      [objc_allocWithZone((Class)type metadata accessor for REMAccount_Codable()) initWithStore:a2 storage:v7];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10046B80C(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t))
{
  uint64_t v22 = a4;
  uint64_t v5 = v4;
  uint64_t v21 = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    int64_t v12 = _swiftEmptyArrayStorage;
    if (!v11) {
      return (uint64_t)v12;
    }
    int64_t v23 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE28C(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0) {
      break;
    }
    v19[1] = v5;
    uint64_t v5 = 0;
    int64_t v12 = v23;
    void v19[2] = v8 + 32;
    unint64_t v20 = a1 & 0xC000000000000001;
    unint64_t v14 = a1;
    while (v11 != v5)
    {
      if (v20) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(a1 + 8 * v5 + 32);
      }
      id v16 = v15;
      swift_bridgeObjectRetain();
      v22(v16, a2);
      int64_t v23 = v12;
      unint64_t v18 = v12[2];
      unint64_t v17 = v12[3];
      if (v18 >= v17 >> 1)
      {
        sub_1001DE28C(v17 > 1, v18 + 1, 1);
        int64_t v12 = v23;
      }
      ++v5;
      v12[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, v10, v21);
      a1 = v14;
      if (v11 == v5) {
        return (uint64_t)v12;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_10046BA3C(void *a1, unint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v88 = (objc_class *)a6;
  id v85 = a3;
  uint64_t v86 = a5;
  unint64_t v89 = (void *)a4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v84 = v8;
  __chkstk_darwin(v8);
  id v81 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v82 = (char *)&v80 - v11;
  __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v80 - v13;
  uint64_t v14 = _s10PredicatesOMa_3();
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = _s10PredicatesOMa_1();
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  unint64_t v23 = (unint64_t)&v80 - v22;
  id v24 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[a2 type:v21]];
  unsigned int v25 = [v24 supportsCustomSmartLists];

  if (v25)
  {
    *(void *)unint64_t v23 = a1;
    *(unsigned char *)(v23 + 8) = 1;
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = qword_100907890;
    id v27 = a1;
    if (v26 == -1) {
      goto LABEL_3;
    }
    goto LABEL_45;
  }
  *(void *)unint64_t v19 = a1;
  v19[8] = 1;
  swift_storeEnumTagMultiPayload();
  id v36 = a1;
  uint64_t v37 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  unint64_t v23 = (unint64_t)[objc_allocWithZone((Class)NSFetchRequest) init];
  id v38 = [(id)swift_getObjCClassFromMetadata() entity];
  [(id)v23 setEntity:v38];

  Class isa = v88;
  if (v88)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v32 = (uint64_t)v89;
  [(id)v23 setAffectedStores:isa];

  [(id)v23 setPredicate:v37];
  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  [(id)v23 setSortDescriptors:v40];

  uint64_t v41 = (uint64_t)v87;
  uint64_t v42 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v43 = v41;
  if (v41)
  {

    uint64_t v35 = (uint64_t)v19;
LABEL_13:
    sub_10047053C(v35, (uint64_t (*)(void))_s10PredicatesOMa_1);
    return (void *)v32;
  }
  v92[0] = v42;
  id v27 = (id)sub_100094134(&qword_100910160);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  unint64_t v50 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_10047053C((uint64_t)v19, (uint64_t (*)(void))_s10PredicatesOMa_1);
  a2 = sub_10053B340(v50, v86);
  swift_bridgeObjectRelease();
  if (a2 >> 62) {
    goto LABEL_47;
  }
  uint64_t v51 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v51)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    unint64_t v88 = (objc_class *)v43;
    int v96 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v51 < 0) {
      break;
    }
    uint64_t v16 = 0;
    while (v51 != v16)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v53 = *(id *)(a2 + 8 * v16 + 32);
      }
      uint64_t v54 = v53;
      _s19PolymorphicListItemCMa();
      uint64_t v55 = swift_allocObject();
      uint64_t v93 = type metadata accessor for REMList_Codable();
      unint64_t v23 = (unint64_t)&type metadata accessor for REMList_Codable;
      uint64_t v94 = sub_100470490(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
      uint64_t v95 = sub_100470490(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
      v92[0] = v54;
      sub_1003F08EC((uint64_t)v92, (uint64_t)v91);
      sub_100094134(&qword_100919320);
      if (swift_dynamicCast())
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        unint64_t v52 = v90;
      }
      else
      {
        type metadata accessor for REMSmartList_Codable();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_72;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        unint64_t v52 = v90 | 0x8000000000000000;
      }
      *(void *)(v55 + 16) = v52;
      ++v16;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v91);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      id v27 = (id)v96[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v51 == v16)
      {
        uint64_t v32 = (uint64_t)v96;
        swift_bridgeObjectRelease();
        return (void *)v32;
      }
    }
    __break(1u);
LABEL_45:
    swift_once();
LABEL_3:
    id v81 = (char *)a2;
    unint64_t v28 = qword_100942570;
    id v29 = (void *)sub_100535B3C();
    char v30 = (void *)sub_1003BD0F4(0, v28, (uint64_t)v88, (uint64_t)v29);

    if (qword_100907888 != -1) {
      swift_once();
    }
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class v31 = Array._bridgeToObjectiveC()().super.isa;
    [v30 setSortDescriptors:v31];

    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    uint64_t v32 = (uint64_t)v89;
    id v33 = v87;
    uint64_t v34 = NSManagedObjectContext.fetch<A>(_:)();
    if (v33)
    {

      uint64_t v35 = v23;
      goto LABEL_13;
    }
    id v87 = v27;
    v92[0] = v34;
    sub_100094134(&qword_100910160);
    sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
    unint64_t v45 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    sub_10047053C(v23, (uint64_t (*)(void))_s10PredicatesOMa_1);
    uint64_t v46 = v86;
    unint64_t v17 = sub_10053B340(v45, v86);
    swift_bridgeObjectRelease();
    uint64_t v47 = v87;
    *(void *)uint64_t v16 = v87;
    *(unsigned char *)(v16 + 8) = 1;
    swift_storeEnumTagMultiPayload();
    id v48 = v47;
    id v27 = v89;
    unint64_t v49 = sub_100649DD0(v16, (uint64_t)v89, (uint64_t)v88);
    sub_10047053C(v16, (uint64_t (*)(void))_s10PredicatesOMa_3);
    uint64_t v43 = 0;
    unint64_t v23 = (unint64_t)sub_10064A824(v49, v46);
    swift_bridgeObjectRelease();
    if (v17 >> 62) {
      goto LABEL_50;
    }
    a2 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v87 = (id)v23;
    unint64_t v88 = 0;
    if (!a2) {
      goto LABEL_51;
    }
LABEL_32:
    int v96 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      if (qword_1009075F8 != -1) {
        swift_once();
      }
      uint64_t v74 = v84;
      uint64_t v75 = sub_10008E2DC(v84, (uint64_t)qword_100919168);
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v75, v74);
      while (1)
      {
LABEL_75:
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_10052ECB8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2);
        __break(1u);
LABEL_76:
        if (qword_1009075F8 != -1) {
          swift_once();
        }
        uint64_t v76 = v84;
        uint64_t v77 = sub_10008E2DC(v84, (uint64_t)qword_100919168);
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v80, v77, v76);
      }
    }
    uint64_t v56 = 0;
    unint64_t v23 = (unint64_t)&qword_100919320;
    while (a2 != v56)
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v57 = *(id *)(v17 + 8 * v56 + 32);
      }
      uint64_t v58 = v57;
      _s19PolymorphicListItemCMa();
      uint64_t v59 = swift_allocObject();
      uint64_t v93 = type metadata accessor for REMList_Codable();
      uint64_t v94 = sub_100470490(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
      uint64_t v95 = sub_100470490(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
      v92[0] = v58;
      sub_1003F08EC((uint64_t)v92, (uint64_t)v91);
      sub_100094134(&qword_100919320);
      if (swift_dynamicCast())
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        *(void *)(v59 + 16) = v90;
        uint64_t v43 = (uint64_t)v88;
      }
      else
      {
        type metadata accessor for REMSmartList_Codable();
        char v60 = swift_dynamicCast();
        uint64_t v43 = (uint64_t)v88;
        if ((v60 & 1) == 0) {
          goto LABEL_76;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        *(void *)(v59 + 16) = v90 | 0x8000000000000000;
      }
      ++v56;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v91);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      id v27 = (id)v96[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (a2 == v56)
      {
        uint64_t v61 = v96;
        swift_bridgeObjectRelease();
        id v27 = v89;
        unint64_t v23 = (unint64_t)v87;
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v51) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_50:
  swift_bridgeObjectRetain();
  a2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  id v87 = (id)v23;
  unint64_t v88 = (objc_class *)v43;
  if (a2) {
    goto LABEL_32;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  uint64_t v61 = _swiftEmptyArrayStorage;
LABEL_52:
  if (v23 >> 62) {
    goto LABEL_67;
  }
  uint64_t v62 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v62)
  {
    uint64_t v86 = v61;
    int v96 = _swiftEmptyArrayStorage;
    uint64_t v61 = &v96;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v62 < 0) {
      goto LABEL_71;
    }
    uint64_t v63 = 0;
    unint64_t v64 = v23 & 0xC000000000000001;
    while (v62 != v63)
    {
      if (v64) {
        id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v66 = *(id *)(v23 + 8 * v63 + 32);
      }
      id v67 = v66;
      _s19PolymorphicListItemCMa();
      uint64_t v68 = swift_allocObject();
      uint64_t v93 = type metadata accessor for REMSmartList_Codable();
      uint64_t v94 = sub_100470490(&qword_100919328, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
      uint64_t v95 = sub_100470490(&qword_100919330, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
      v92[0] = v67;
      sub_1003F08EC((uint64_t)v92, (uint64_t)v91);
      sub_100094134(&qword_100919320);
      type metadata accessor for REMList_Codable();
      if (swift_dynamicCast())
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        unint64_t v65 = v90;
      }
      else
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
          if (qword_1009075F8 != -1) {
            swift_once();
          }
          uint64_t v78 = v84;
          uint64_t v79 = sub_10008E2DC(v84, (uint64_t)qword_100919168);
          (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v79, v78);
          goto LABEL_75;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v92);
        unint64_t v65 = v90 | 0x8000000000000000;
      }
      *(void *)(v68 + 16) = v65;
      ++v63;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v91);
      uint64_t v61 = &v96;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      id v27 = (id)v96[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v23 = (unint64_t)v87;
      if (v62 == v63)
      {
        uint64_t v69 = v96;
        swift_bridgeObjectRelease();
        id v27 = v89;
        uint64_t v61 = v86;
        goto LABEL_69;
      }
    }
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = _swiftEmptyArrayStorage;
LABEL_69:
  v92[0] = v61;
  sub_100203C44((unint64_t)v69);
  uint64_t v70 = v92[0];
  v92[0] = v85;
  id v71 = v85;
  id v72 = [v81 remObjectID];
  uint64_t v32 = sub_10045D54C((unint64_t)v70, v72, v27, v92);
  uint64_t v73 = v92[0];
  swift_bridgeObjectRelease();

  return (void *)v32;
}

uint64_t sub_10046C9A8(unint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id v27 = a6;
  uint64_t v28 = a7;
  unsigned int v25 = a4;
  uint64_t v26 = a5;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v22 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (void *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    if (!v13) {
      return (uint64_t)v14;
    }
    Class v31 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DEA8C(0, v13 & ~(v13 >> 63), 0);
    if (v13 < 0) {
      break;
    }
    uint64_t v16 = 0;
    uint64_t v14 = v31;
    v20[1] = v10 + 32;
    unint64_t v21 = a1 & 0xC000000000000001;
    while (v13 != v16)
    {
      if (v21)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_retain();
      }
      uint64_t v30 = v17;
      sub_100464150(&v30, v24, v25, v26, v27, v28, &v29, v12);
      if (v8)
      {
        swift_release();
        swift_release();
        return (uint64_t)v14;
      }
      uint64_t v8 = 0;
      swift_release();
      Class v31 = v14;
      unint64_t v19 = v14[2];
      unint64_t v18 = v14[3];
      if (v19 >= v18 >> 1)
      {
        sub_1001DEA8C(v18 > 1, v19 + 1, 1);
        uint64_t v14 = v31;
      }
      ++v16;
      v14[2] = v19 + 1;
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(v10 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v19, v12, v22);
      if (v13 == v16) {
        return (uint64_t)v14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_10046CBF8(uint64_t a1, void *a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for REMAccountsListDataView.Model.Account() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = (void *)REMAccountsListDataView.Model.Account.account.getter();
      id v10 = [v9 objectID];

      id v11 = [a2 persistentStoreOfAccountWithAccountID:v10];
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10046CD80(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v25 = a1;
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  if (a2 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v3;
    unint64_t v6 = v3 & 0xC000000000000001;
    uint64_t v7 = 4;
    uint64_t v8 = &selRef_resolveConflicts_error_;
    while (1)
    {
      uint64_t v4 = v7 - 4;
      id v9 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v3 + 8 * v7);
      id v10 = v9;
      uint64_t v11 = v7 - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v12 = [v9 v8[21]];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = (void *)REMSmartListCustomContext.filter.getter();

        if (v14)
        {
          static Set<>.typesSupportedByCustomSmartList.getter();
          v24[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
          v24[4] = sub_1004705A8();
          v24[0] = a3;
          id v15 = a3;
          unint64_t v16 = v6;
          uint64_t v17 = v5;
          unint64_t v18 = v8;
          uint64_t v19 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);

          swift_bridgeObjectRelease();
          v24[0] = v19;
          sub_100094134(&qword_1009169B0);
          sub_1000967F4(&qword_1009169B8, &qword_1009169B0);
          uint64_t Predicate = Sequence<>.postFetchPredicateTypes.getter();
          uint64_t v8 = v18;
          uint64_t v5 = v17;
          unint64_t v6 = v16;
          unint64_t v3 = v22;
          swift_bridgeObjectRelease();
          sub_1002F65F8(Predicate);
        }
      }

      ++v7;
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v25;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_10046CF8C(void *a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v37 = a3;
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v7 = *(void (***)(uint64_t, uint64_t))(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v38 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Predicate = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate();
  id v9 = *(char **)(Predicate - 8);
  __chkstk_darwin(Predicate);
  Class v40 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_17;
    }
  }
  uint64_t v35 = v4;
  uint64_t v4 = 0;
  unsigned int v34 = enum case for REMCustomSmartListFilterDescriptor.PostFetchPredicate.account(_:);
  uint64_t v32 = v9 + 16;
  id v33 = v9 + 104;
  uint64_t v42 = v9;
  uint64_t v30 = v9 + 8;
  Class v31 = v7 + 1;
  long long v29 = xmmword_100776E40;
  while (2)
  {
    uint64_t v39 = a1;
    for (uint64_t i = v4; ; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        uint64_t v13 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v13 = (char *)*(id *)(a2 + 8 * i + 32);
      }
      id v9 = v13;
      uint64_t v4 = i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
        goto LABEL_16;
      }
      id v14 = [v13 customContext];
      if (v14)
      {
        a1 = v14;
        uint64_t v7 = (void (**)(uint64_t, uint64_t))REMSmartListCustomContext.filter.getter();

        if (v7) {
          break;
        }
      }

      if (v4 == v11)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    id v15 = [v9 accountID];
    id v16 = [v15 uuid];

    uint64_t v17 = v40;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*((void (**)(char *, void, uint64_t))v42 + 13))(v17, v34, Predicate);
    static Set<>.typesSupportedByCustomSmartList.getter();
    v43[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v43[4] = sub_1004705A8();
    v43[0] = v37;
    id v18 = v37;
    uint64_t v28 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v43);
    swift_bridgeObjectRelease();
    sub_100094134(&qword_100914738);
    unint64_t v19 = (v42[80] + 32) & ~(unint64_t)v42[80];
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = v29;
    (*((void (**)(unint64_t, char *, uint64_t))v42 + 2))(v20 + v19, v40, Predicate);
    v43[0] = v28;
    sub_100203A58(v20);
    uint64_t v28 = v43[0];
    id v21 = [v9 objectID];
    id v22 = [v21 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43[0] = v23;
    uint64_t v25 = v38;
    sub_1002C6638(v28, v38, isUniquelyReferenced_nonNull_native);
    a1 = (void *)v43[0];
    swift_bridgeObjectRelease();
    (*v31)(v25, v36);

    (*((void (**)(char *, uint64_t))v42 + 1))(v40, Predicate);
    if (v4 != v11) {
      continue;
    }
    break;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10046D438(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = (void *)a1;
  uint64_t v13 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      unint64_t v6 = v9;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v12 = v9;
      sub_100463958(&v13, &v12, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }

      if (v10 == v7)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

void *sub_10046D56C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  uint64_t v22 = a1;
  uint64_t v3 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result();
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Style = type metadata accessor for REMAccountsListDataView.CachablePropertyFetchStyle();
  uint64_t v7 = *(void *)(Style - 8);
  __chkstk_darwin(Style);
  id v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMAccountsListDataView.FetchOptions.fetchSmartListHashtagLabels.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, Style);
  if (v14 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.doNotFetch(_:)) {
    return _swiftEmptyArrayStorage;
  }
  if (v14 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.cachedOrStore(_:))
  {
    id v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.cachedOrStore(_:);
    goto LABEL_7;
  }
  if (v14 == enum case for REMAccountsListDataView.CachablePropertyFetchStyle.store(_:))
  {
    id v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.store(_:);
LABEL_7:
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *v16, v10);
    type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation();
    id v17 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    id v15 = [self daemonUserDefaults];
    sub_1005701D0((uint64_t)v15, (uint64_t)&off_1008CA6F0, v23, (uint64_t)v13, (uint64_t)v5);

    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      id v15 = (id)REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.labels.getter();
      REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.isUpToDate.getter();

      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    return v15;
  }
  uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void *sub_10046D8C4(void *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  BOOL v178 = a4;
  uint64_t v171 = a2;
  uint64_t v175 = type metadata accessor for REMManualOrdering.Predefined();
  uint64_t v174 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v7 = (char *)v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMManualOrdering.ManualOrderingID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v183 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  uint64_t v165 = (char *)v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  int v163 = (void **)((char *)v154 - v14);
  __chkstk_darwin(v15);
  uint64_t v166 = (char *)v154 - v16;
  __chkstk_darwin(v17);
  unint64_t v164 = (void **)((char *)v154 - v18);
  __chkstk_darwin(v19);
  BOOL v182 = (char *)v154 - v20;
  __chkstk_darwin(v21);
  unint64_t v181 = (char *)v154 - v22;
  __chkstk_darwin(v23);
  uint64_t v170 = (char *)v154 - v24;
  __chkstk_darwin(v25);
  int v167 = (void *)((char *)v154 - v26);
  __chkstk_darwin(v27);
  id v169 = (void **)((char *)v154 - v28);
  __chkstk_darwin(v29);
  id v168 = (void **)((char *)v154 - v30);
  uint64_t v161 = _s10PredicatesOMa_3();
  __chkstk_darwin(v161);
  uint64_t v162 = (char *)v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = _s10PredicatesOMa_1();
  __chkstk_darwin(v172);
  uint64_t v173 = (char *)v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = type metadata accessor for REMAccountsListDataView.Model.Account();
  uint64_t v177 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v35 = (void **)((char *)v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)v154 - v37;
  char v39 = REMAccountsListDataView.FetchOptions.fetchOrderedPinnedLists.getter();
  Class v40 = _swiftEmptyArrayStorage;
  if ((v39 & 1) == 0) {
    return v40;
  }
  uint64_t v160 = a3;
  if ((REMAccountsListDataView.FetchOptions.fetchAccounts.getter() & 1) == 0)
  {
    id v48 = (void *)sub_100349CDC();

    uint64_t v49 = v176;
    if (v48) {
      goto LABEL_13;
    }
    return _swiftEmptyArrayStorage;
  }
  unint64_t v158 = v11;
  unint64_t v41 = *v178;
  uint64_t v42 = *(void *)(*v178 + 16);
  if (!v42) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v156 = v7;
  id v159 = a1;
  uint64_t v157 = v8;
  uint64_t v155 = v9;
  unint64_t v180 = *(void *)(v177 + 16);
  unint64_t v43 = v41 + ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80));
  uint64_t v44 = (void (**)(char *, unint64_t))(v177 + 8);
  unint64_t v179 = *(void *)(v177 + 72);
  v154[1] = v41;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    ((void (*)(char *, unint64_t, unint64_t))v180)(v38, v43, v33);
    unint64_t v45 = (void *)REMAccountsListDataView.Model.Account.account.getter();
    id v46 = [v45 capabilities];

    LODWORD(v45) = [v46 supportsPinnedLists];
    (*v44)(v38, v33);
    if (v45) {
      break;
    }
    v43 += v179;
    if (!--v42)
    {
      swift_bridgeObjectRelease_n();
      return _swiftEmptyArrayStorage;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v49 = v176;
  uint64_t v9 = v155;
  uint64_t v8 = v157;
  uint64_t v11 = v158;
  a1 = v159;
  uint64_t v7 = v156;
LABEL_13:
  uint64_t v157 = v8;
  char v50 = REMAccountsListDataView.FetchOptions.fetchAccounts.getter();
  uint64_t v156 = v7;
  if (v50)
  {
    unint64_t v51 = *v178;
    unint64_t v52 = _swiftEmptyArrayStorage;
    char v186 = _swiftEmptyArrayStorage;
    uint64_t v53 = *(void *)(v51 + 16);
    if (v53)
    {
      id v159 = a1;
      unint64_t v158 = v11;
      uint64_t v155 = v9;
      uint64_t v54 = *(void (**)(void **, unint64_t, unint64_t))(v177 + 16);
      unint64_t v55 = v51 + ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80));
      uint64_t v56 = v177 + 8;
      uint64_t v57 = *(void *)(v177 + 72);
      unint64_t v180 = v51;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v54(v35, v55, v33);
        sub_100464BB4((unint64_t *)&v186);
        if (v49) {
          goto LABEL_102;
        }
        uint64_t v49 = 0;
        (*(void (**)(void **, unint64_t))v56)(v35, v33);
        v55 += v57;
        if (!--v53)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v52 = v186;
          uint64_t v9 = v155;
          uint64_t v11 = v158;
          a1 = v159;
          break;
        }
      }
    }
    uint64_t v58 = v184;
LABEL_20:
    id v159 = a1;
    uint64_t v187 = (uint64_t)v52;
    sub_100465C50((unint64_t *)&v187);
    uint64_t v59 = static REMSmartListType.manualOrderablePredefinedSmartListTypes.getter();
    unint64_t v180 = *(void *)(v59 + 16);
    if (v180)
    {
      unint64_t v158 = v11;
      uint64_t v155 = v9;
      uint64_t v176 = v49;
      LODWORD(v179) = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
      uint64_t v177 = *(void *)(v183 + 104);
      BOOL v178 = (unint64_t *)(v183 + 104);
      char v60 = (void (**)(char *, char *, uint64_t))(v183 + 32);
      swift_bridgeObjectRetain();
      uint64_t v61 = 0;
      uint64_t v62 = (char *)_swiftEmptyArrayStorage;
      uint64_t v63 = v182;
      unint64_t v64 = v181;
      do
      {
        uint64_t v65 = v59;
        id v66 = *(void **)(v59 + 8 * (void)v61 + 32);
        *(void *)unint64_t v64 = v66;
        ((void (*)(char *, void, uint64_t))v177)(v64, v179, v58);
        id v67 = *v60;
        (*v60)(v63, v64, v58);
        id v68 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v62 = (char *)sub_10030924C(0, *((void *)v62 + 2) + 1, 1, (unint64_t)v62);
        }
        unint64_t v70 = *((void *)v62 + 2);
        unint64_t v69 = *((void *)v62 + 3);
        uint64_t v63 = v182;
        if (v70 >= v69 >> 1)
        {
          uint64_t v71 = sub_10030924C(v69 > 1, v70 + 1, 1, (unint64_t)v62);
          uint64_t v63 = v182;
          uint64_t v62 = (char *)v71;
        }
        ++v61;
        *((void *)v62 + 2) = v70 + 1;
        uint64_t v58 = v184;
        v67(&v62[((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(void *)(v183 + 72) * v70], v63, v184);
        uint64_t v59 = v65;
      }
      while ((char *)v180 != v61);
      swift_bridgeObjectRelease();
      uint64_t v49 = v176;
      uint64_t v9 = v155;
      uint64_t v11 = v158;
    }
    else
    {
      uint64_t v62 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    char v186 = v62;
    sub_100201E40(v187);
    uint64_t v187 = (uint64_t)v186;
    uint64_t v82 = v174;
    uint64_t v83 = v156;
    uint64_t v84 = v175;
    (*(void (**)(char *, void, uint64_t))(v174 + 104))(v156, enum case for REMManualOrdering.Predefined.pinned(_:), v175);
    REMManualOrdering.Predefined.manualOrderingID.getter();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
    if (qword_100907B10 != -1) {
      swift_once();
    }
    id v85 = swift_retain();
    uint64_t v86 = sub_10034A86C(v85);
    swift_release();
    if (!v86)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v157);
      return (void *)v187;
    }
    id v87 = [v86 remObjectID];
    if (v87)
    {
      unint64_t v88 = v87;
      unint64_t v89 = (void *)REMManualOrdering.ManualOrderingID.listType.getter();
      unint64_t v90 = v11;
      uint64_t v91 = REMManualOrdering.ManualOrderingID.listID.getter();
      uint64_t v93 = v92;
      if (qword_100907B18 != -1) {
        swift_once();
      }
      uint64_t v94 = qword_100942620;
      swift_retain();
      uint64_t v95 = sub_1000CF564(v89, v91, v93, v88, v159, 1, v94);
      if (!v49)
      {
        uint64_t v101 = v95;
        swift_bridgeObjectRelease();
        swift_release();
        if (v101)
        {
          sub_1001B3874((uint64_t)v188);
          sub_100096408((uint64_t)v188, (uint64_t)v189, (uint64_t *)&unk_100915B90);
          uint64_t v102 = v189[0];
          if (v189[0])
          {
            uint64_t v155 = v9;
            uint64_t v176 = 0;
            unint64_t v181 = (char *)v189[1];
            BOOL v182 = (char *)v189[2];
            uint64_t v183 = v189[3];
            uint64_t v184 = v189[4];
            uint64_t v103 = v86;
            int v104 = sub_1005E82D8();
            uint64_t v105 = type metadata accessor for RDManualSortIDCache();
            uint64_t v106 = v105;
            if (qword_100907870 != -1) {
              uint64_t v105 = swift_once();
            }
            uint64_t v107 = qword_10091C658;
            __chkstk_darwin(v105);
            v154[-4] = v106;
            v154[-3] = v104;
            v154[-2] = v107;
            OS_dispatch_queue.sync<A>(execute:)();
            uint64_t v108 = (uint64_t)v186;
            type metadata accessor for RDManualSortIDAdapter();
            swift_initStackObject();
            uint64_t v109 = sub_1001A1374(v108, (uint64_t)v104, 0);

            uint64_t v110 = sub_1004A1104(v102, v88, v109, v187);
            swift_release();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            unint64_t v190 = v181;
            sub_1000F5C48((uint64_t)&v190);
            uint64_t v191 = v182;
            sub_1000F5C48((uint64_t)&v191);
            uint64_t v192 = v183;
            sub_1000F5C48((uint64_t)&v192);
            uint64_t v193 = v184;
            sub_1000F5C48((uint64_t)&v193);

            (*(void (**)(char *, uint64_t))(v155 + 8))(v90, v157);
            uint64_t v187 = v110;
            return (void *)v110;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v9 + 8))(v90, v157);

            return (void *)v187;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v90, v157);

          return (void *)v187;
        }
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v90, v157);

      swift_bridgeObjectRelease();
      swift_release();
      if (qword_1009075F8 != -1) {
        swift_once();
      }
      uint64_t v96 = type metadata accessor for Logger();
      sub_10008E2DC(v96, (uint64_t)qword_100919168);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v97))
      {
        Swift::Int v98 = (uint8_t *)swift_slowAlloc();
        char v186 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::Int v98 = 136315138;
        swift_getErrorValue();
        uint64_t v99 = Error.rem_errorDescription.getter();
        uint64_t v185 = sub_1000C51B8(v99, v100, (uint64_t *)&v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v86, v97, "Failed to fetch manual sort hint of pinned lists {error: %s}", v98, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        return (void *)v187;
      }
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v157);
    }

    return (void *)v187;
  }
  uint64_t v72 = (uint64_t)v173;
  swift_storeEnumTagMultiPayload();
  uint64_t v73 = (void *)sub_100535B3C();
  sub_10047053C(v72, (uint64_t (*)(void))_s10PredicatesOMa_1);
  if (qword_100907890 != -1) {
    swift_once();
  }
  uint64_t v74 = (void *)sub_1003BD0F4(0, qword_100942570, 0, (uint64_t)v73);
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  unint64_t v75 = NSManagedObjectContext.fetch<A>(_:)();

  if (v49) {
    return v40;
  }
  unint64_t v33 = sub_10053B340(v75, v171);
  swift_bridgeObjectRelease();
  uint64_t v76 = (uint64_t)v162;
  swift_storeEnumTagMultiPayload();
  uint64_t v77 = (void *)sub_100646F04();
  sub_10047053C(v76, (uint64_t (*)(void))_s10PredicatesOMa_3);
  uint64_t v35 = (void **)sub_1000963CC(0, (unint64_t *)&unk_100910210);
  id v78 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v79 = [(id)swift_getObjCClassFromMetadata() entity];
  id v159 = a1;
  id v80 = v79;
  [v78 setEntity:v79];

  [v78 setAffectedStores:0];
  [v78 setPredicate:v77];
  unint64_t v81 = NSManagedObjectContext.fetch<A>(_:)();

  uint64_t v111 = sub_10064A824(v81, v171);
  swift_bridgeObjectRelease();
  unint64_t v180 = (unint64_t)v111;
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v56 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v58 = v184;
  uint64_t v176 = 0;
  uint64_t v155 = v9;
  unint64_t v158 = v11;
  unint64_t v179 = v33;
  if (v56)
  {
    if (v56 < 1)
    {
      __break(1u);
      goto LABEL_101;
    }
    if ((v33 & 0xC000000000000001) != 0)
    {
      uint64_t v112 = 0;
      LODWORD(v178) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
      Class v113 = (void (**)(void **, void, uint64_t))(v183 + 104);
      uint64_t v114 = (void (**)(unint64_t, void **, uint64_t))(v183 + 32);
      uint64_t v115 = _swiftEmptyArrayStorage;
      unint64_t v33 = (unint64_t)v169;
      uint64_t v35 = v168;
      do
      {
        *uint64_t v35 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        (*v113)(v35, v178, v58);
        uint64_t v116 = *v114;
        (*v114)(v33, v35, v58);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v115 = (void *)sub_10030924C(0, v115[2] + 1, 1, (unint64_t)v115);
        }
        unint64_t v118 = v115[2];
        unint64_t v117 = v115[3];
        uint64_t v119 = v169;
        if (v118 >= v117 >> 1)
        {
          uint64_t v121 = sub_10030924C(v117 > 1, v118 + 1, 1, (unint64_t)v115);
          uint64_t v119 = v169;
          uint64_t v115 = (void *)v121;
        }
        ++v112;
        v115[2] = v118 + 1;
        unint64_t v120 = (unint64_t)v115
             + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))
             + *(void *)(v183 + 72) * v118;
        unint64_t v33 = (unint64_t)v119;
        uint64_t v58 = v184;
        v116(v120, v119, v184);
      }
      while (v56 != v112);
    }
    else
    {
      uint64_t v35 = (void **)(v33 + 32);
      LODWORD(v178) = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
      uint64_t v173 = *(char **)(v183 + 104);
      uint64_t v177 = v183 + 104;
      id v132 = (unint64_t *)(v183 + 32);
      uint64_t v115 = _swiftEmptyArrayStorage;
      uint64_t v133 = v166;
      char v134 = v164;
      do
      {
        uint64_t v135 = *v35;
        *char v134 = *v35;
        ((void (*)(void **, void, uint64_t))v173)(v134, v178, v58);
        unint64_t v33 = *v132;
        ((void (*)(char *, void **, uint64_t))*v132)(v133, v134, v58);
        id v136 = v135;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v115 = (void *)sub_10030924C(0, v115[2] + 1, 1, (unint64_t)v115);
        }
        unint64_t v138 = v115[2];
        unint64_t v137 = v115[3];
        uint64_t v133 = v166;
        if (v138 >= v137 >> 1)
        {
          uint64_t v139 = sub_10030924C(v137 > 1, v138 + 1, 1, (unint64_t)v115);
          uint64_t v133 = v166;
          uint64_t v115 = (void *)v139;
        }
        v115[2] = v138 + 1;
        uint64_t v58 = v184;
        ((void (*)(char *, char *, uint64_t))v33)((char *)v115+ ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(void *)(v183 + 72) * v138, v133, v184);
        ++v35;
        --v56;
      }
      while (v56);
    }
  }
  else
  {
    uint64_t v115 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  unint64_t v122 = v180;
  if (v180 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v56 = *(void *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v123 = v170;
  if (!v56)
  {
    id v126 = (char *)_swiftEmptyArrayStorage;
LABEL_83:
    swift_bridgeObjectRelease_n();
    char v186 = v115;
    sub_100201E40((uint64_t)v126);
    unint64_t v52 = v186;
    uint64_t v49 = v176;
    uint64_t v9 = v155;
    uint64_t v11 = v158;
    a1 = v159;
    goto LABEL_20;
  }
  if (v56 >= 1)
  {
    if ((v122 & 0xC000000000000001) != 0)
    {
      uint64_t v124 = 0;
      LODWORD(v179) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
      BOOL v178 = (unint64_t *)(v183 + 104);
      id v125 = (void (**)(char *, uint64_t *, uint64_t))(v183 + 32);
      id v126 = (char *)_swiftEmptyArrayStorage;
      id v127 = v167;
      do
      {
        uint64_t *v127 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        ((void (*)(uint64_t *, void, uint64_t))*v178)(v127, v179, v58);
        id v128 = *v125;
        (*v125)(v123, v127, v58);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v126 = (char *)sub_10030924C(0, *((void *)v126 + 2) + 1, 1, (unint64_t)v126);
        }
        unint64_t v130 = *((void *)v126 + 2);
        unint64_t v129 = *((void *)v126 + 3);
        if (v130 >= v129 >> 1) {
          id v126 = (char *)sub_10030924C(v129 > 1, v130 + 1, 1, (unint64_t)v126);
        }
        ++v124;
        *((void *)v126 + 2) = v130 + 1;
        unint64_t v131 = (unint64_t)&v126[((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))
                                     + *(void *)(v183 + 72) * v130];
        uint64_t v123 = v170;
        uint64_t v58 = v184;
        v128((char *)v131, (uint64_t *)v170, v184);
      }
      while (v56 != v124);
    }
    else
    {
      uint64_t v140 = (void **)(v122 + 32);
      LODWORD(v179) = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
      uint64_t v177 = *(void *)(v183 + 104);
      BOOL v178 = (unint64_t *)(v183 + 104);
      id v141 = (void (**)(void, void, void))(v183 + 32);
      id v126 = (char *)_swiftEmptyArrayStorage;
      uint64_t v142 = v165;
      do
      {
        uint64_t v143 = v58;
        uint64_t v144 = *v140;
        uint64_t v145 = v163;
        *int v163 = *v140;
        ((void (*)(void **, void, uint64_t))v177)(v145, v179, v143);
        uint64_t v146 = v141;
        uint64_t v147 = (void (*)(char *, void **, uint64_t))*v141;
        int v148 = v145;
        uint64_t v149 = v146;
        v147(v142, v148, v143);
        id v150 = v144;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v126 = (char *)sub_10030924C(0, *((void *)v126 + 2) + 1, 1, (unint64_t)v126);
        }
        unint64_t v152 = *((void *)v126 + 2);
        unint64_t v151 = *((void *)v126 + 3);
        uint64_t v142 = v165;
        if (v152 >= v151 >> 1)
        {
          uint64_t v153 = sub_10030924C(v151 > 1, v152 + 1, 1, (unint64_t)v126);
          uint64_t v142 = v165;
          id v126 = (char *)v153;
        }
        *((void *)v126 + 2) = v152 + 1;
        uint64_t v58 = v184;
        v147(&v126[((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(void *)(v183 + 72) * v152], (void **)v142, v184);
        id v141 = v149;
        ++v140;
        --v56;
      }
      while (v56);
    }
    goto LABEL_83;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  swift_bridgeObjectRelease();
  (*(void (**)(void **, unint64_t))v56)(v35, v33);
  uint64_t result = (void *)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10046F1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100919270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10046F234(void *a1, NSObject *a2)
{
  unint64_t result = sub_1005A52C0(a1, (unint64_t)_swiftEmptyArrayStorage);
  if (!v2)
  {
    unint64_t v5 = result;
    uint64_t v106 = 0;
    unint64_t v122 = &_swiftEmptySetSingleton;
    v121[0] = &_swiftEmptySetSingleton;
    if (result >> 62) {
      goto LABEL_109;
    }
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      unint64_t v113 = v5 & 0xC000000000000001;
      unint64_t v109 = v5 + 32;
      uint64_t v110 = v5 & 0xFFFFFFFFFFFFFF8;
      uint64_t v7 = &selRef_willSave;
      uint64_t v8 = &selRef_ckServerChangeTokens;
      uint64_t v116 = a2;
      unint64_t v111 = v5;
      uint64_t v112 = v6;
      unint64_t v9 = 0;
      while (1)
      {
        if (v113)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v9 >= *(void *)(v110 + 16)) {
            goto LABEL_108;
          }
          id v10 = *(id *)(v109 + 8 * v9);
        }
        id v115 = v10;
        BOOL v11 = __OFADD__(v9, 1);
        unint64_t v12 = v9 + 1;
        if (v11)
        {
          __break(1u);
          goto LABEL_107;
        }
        uint64_t v13 = [v10 changes];
        unint64_t v114 = v12;
        if (!v13)
        {
          if (qword_1009075F8 != -1) {
            swift_once();
          }
          uint64_t v101 = type metadata accessor for Logger();
          sub_10008E2DC(v101, (uint64_t)qword_100919168);
          id v102 = v115;
          a2 = Logger.logObject.getter();
          os_log_type_t v103 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(a2, v103))
          {
            uint64_t v104 = swift_slowAlloc();
            uint64_t v105 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v104 = 138412290;
            *(void *)(v104 + 4) = v102;
            *uint64_t v105 = v102;
            _os_log_impl((void *)&_mh_execute_header, a2, v103, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v104, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            unint64_t v5 = v111;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          goto LABEL_6;
        }
        a2 = v13;
        sub_1000963CC(0, &qword_10090FD90);
        unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v14 >> 62))
        {
          uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v15) {
            break;
          }
          goto LABEL_104;
        }
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15) {
          break;
        }
LABEL_104:

        swift_bridgeObjectRelease();
LABEL_6:
        unint64_t v9 = v114;
        if (v114 == v112)
        {
          swift_bridgeObjectRelease();
          return (unint64_t)v122;
        }
      }
      if (v15 >= 1)
      {
        uint64_t v16 = 0;
        unint64_t v119 = v14 & 0xC000000000000001;
        uint64_t v117 = v15;
        while (1)
        {
          if (v119) {
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v17 = *(id *)(v14 + 8 * v16 + 32);
          }
          uint64_t v18 = v17;
          if (objc_msgSend(v17, v7[485], v106) != (id)1)
          {
            if (qword_1009075F8 != -1) {
              swift_once();
            }
            uint64_t v36 = type metadata accessor for Logger();
            sub_10008E2DC(v36, (uint64_t)qword_100919168);
            id v37 = v18;
            a2 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(a2, v38))
            {
              uint64_t v39 = swift_slowAlloc();
              Class v40 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v39 = 138412290;
              *(void *)(v39 + 4) = v37;
              *Class v40 = v37;
              _os_log_impl((void *)&_mh_execute_header, a2, v38, "Skipping change because it's not update {change: %@}", (uint8_t *)v39, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              uint64_t v8 = &selRef_ckServerChangeTokens;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            goto LABEL_18;
          }
          unint64_t v19 = v14;
          id v20 = [v18 changedObjectID];
          id v21 = [v20 v8[228]];
          sub_1000963CC(0, &qword_10090ABC0);
          uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
          id v23 = v21;
          id v24 = [ObjCClassFromMetadata v8[228]];
          sub_1000963CC(0, (unint64_t *)&unk_100917C20);
          uint64_t v25 = v8;
          char v26 = static NSObject.== infix(_:_:)();

          if (v26)
          {

            a2 = v116;
            id v27 = sub_1005A2E48(v20);
            if (v27)
            {
              uint64_t v28 = v27;
              self;
              uint64_t v29 = swift_dynamicCastObjCClass();
              unint64_t v14 = v19;
              if (!v29)
              {
                uint64_t v15 = v117;
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v64 = type metadata accessor for Logger();
                sub_10008E2DC(v64, (uint64_t)qword_100919168);
                id v65 = v20;
                a2 = Logger.logObject.getter();
                os_log_type_t v66 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(a2, v66))
                {

                  goto LABEL_97;
                }
                unint64_t v118 = v18;
                uint64_t v67 = swift_slowAlloc();
                id v68 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v67 = 138412290;
                *(void *)(v67 + 4) = v65;
                *id v68 = v65;

                unint64_t v69 = a2;
                os_log_type_t v70 = v66;
                uint64_t v71 = "Failed to cast managedObject to REMCDAccount {objectID: %@}";
                goto LABEL_89;
              }
              uint64_t v30 = (void *)v29;
              id v31 = v28;
              id v32 = [v30 remObjectID];
              uint64_t v15 = v117;
              if (v32)
              {
                unint64_t v33 = v32;
                sub_100094134((uint64_t *)&unk_10090AF20);
                uint64_t inited = swift_initStackObject();
                *(_OWORD *)(inited + 16) = xmmword_10077A530;
                *(void *)(inited + 32) = swift_getKeyPath();
                id v120 = (id)inited;
                specialized Array._endMutation()();
                LOBYTE(inited) = sub_1004646B8((unint64_t)v120);
                swift_bridgeObjectRelease();
                if (inited)
                {
                  uint64_t v35 = (void *)REMObjectID.codable.getter();
                  a2 = &v122;
LABEL_38:
                  sub_10031DE8C(&v120, v35);

                  goto LABEL_39;
                }
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v80 = type metadata accessor for Logger();
                sub_10008E2DC(v80, (uint64_t)qword_100919168);
                a2 = Logger.logObject.getter();
                os_log_type_t v81 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(a2, v81))
                {
                  uint64_t v82 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v82 = 0;
                  _os_log_impl((void *)&_mh_execute_header, a2, v81, "Ignoring account change because it didn't update the name", v82, 2u);
                  swift_slowDealloc();

                  goto LABEL_97;
                }
              }
              else
              {
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v72 = type metadata accessor for Logger();
                sub_10008E2DC(v72, (uint64_t)qword_100919168);
                id v73 = v20;
                a2 = Logger.logObject.getter();
                os_log_type_t v74 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(a2, v74))
                {
                  unint64_t v118 = v18;
                  uint64_t v75 = swift_slowAlloc();
                  uint64_t v76 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v75 = 138412290;
                  *(void *)(v75 + 4) = v73;
                  void *v76 = v73;

                  uint64_t v77 = a2;
                  os_log_type_t v78 = v74;
                  id v79 = "Failed to get remObjectID from REMCDAccount {objectID: %@}";
                  goto LABEL_76;
                }
              }
              goto LABEL_97;
            }

            uint64_t v7 = &selRef_willSave;
            uint64_t v8 = &selRef_ckServerChangeTokens;
            unint64_t v14 = v19;
            uint64_t v15 = v117;
          }
          else
          {
            unint64_t v118 = v18;
            sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
            unint64_t v41 = (void *)swift_getObjCClassFromMetadata();
            id v42 = v23;
            id v43 = [v41 v25[228]];
            char v44 = static NSObject.== infix(_:_:)();

            uint64_t v8 = v25;
            if (v44)
            {

              a2 = v116;
              id v45 = sub_1005A2E48(v20);
              unint64_t v14 = v19;
              if (v45)
              {
                uint64_t v28 = v45;
                self;
                uint64_t v46 = swift_dynamicCastObjCClass();
                uint64_t v15 = v117;
                uint64_t v18 = v118;
                if (!v46)
                {
                  if (qword_1009075F8 != -1) {
                    swift_once();
                  }
                  uint64_t v83 = type metadata accessor for Logger();
                  sub_10008E2DC(v83, (uint64_t)qword_100919168);
                  id v65 = v20;
                  a2 = Logger.logObject.getter();
                  os_log_type_t v84 = static os_log_type_t.fault.getter();
                  if (os_log_type_enabled(a2, v84))
                  {
                    uint64_t v67 = swift_slowAlloc();
                    id v85 = (void *)swift_slowAlloc();
                    *(_DWORD *)uint64_t v67 = 138412290;
                    *(void *)(v67 + 4) = v65;
                    *id v85 = v65;
                    unint64_t v69 = a2;
                    os_log_type_t v70 = v84;
                    uint64_t v71 = "Failed to cast managedObject to REMCDList {objectID: %@}";
LABEL_89:
                    _os_log_impl((void *)&_mh_execute_header, v69, v70, v71, (uint8_t *)v67, 0xCu);
                    sub_100094134((uint64_t *)&unk_10090A040);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();

                    goto LABEL_96;
                  }
                  goto LABEL_90;
                }
                uint64_t v47 = (void *)v46;
                id v31 = v28;
                id v48 = [v47 remObjectID];
                if (v48)
                {
                  unint64_t v33 = v48;
                  uint64_t v35 = (void *)REMObjectID.codable.getter();
                  a2 = v121;
                  goto LABEL_38;
                }
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v86 = type metadata accessor for Logger();
                sub_10008E2DC(v86, (uint64_t)qword_100919168);
                id v73 = v20;
                a2 = Logger.logObject.getter();
                os_log_type_t v87 = static os_log_type_t.error.getter();
                if (!os_log_type_enabled(a2, v87))
                {

                  goto LABEL_97;
                }
                uint64_t v75 = swift_slowAlloc();
                unint64_t v88 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v75 = 138412290;
                *(void *)(v75 + 4) = v73;
                void *v88 = v73;
                uint64_t v77 = a2;
                os_log_type_t v78 = v87;
                id v79 = "Failed to get remObjectID from REMCDList {objectID: %@}";
LABEL_76:
                _os_log_impl((void *)&_mh_execute_header, v77, v78, v79, (uint8_t *)v75, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                goto LABEL_95;
              }

              uint64_t v7 = &selRef_willSave;
              uint64_t v15 = v117;
            }
            else
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090B040);
              id v49 = [(id)swift_getObjCClassFromMetadata() v25[228]];
              char v50 = static NSObject.== infix(_:_:)();

              unint64_t v14 = v19;
              if ((v50 & 1) == 0)
              {
                uint64_t v15 = v117;
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v59 = type metadata accessor for Logger();
                sub_10008E2DC(v59, (uint64_t)qword_100919168);
                id v60 = v20;
                a2 = Logger.logObject.getter();
                os_log_type_t v61 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(a2, v61))
                {
                  uint64_t v62 = swift_slowAlloc();
                  uint64_t v63 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v62 = 138412290;
                  *(void *)(v62 + 4) = v60;
                  *uint64_t v63 = v60;
                  _os_log_impl((void *)&_mh_execute_header, a2, v61, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v62, 0xCu);
                  sub_100094134((uint64_t *)&unk_10090A040);
                  swift_arrayDestroy();
                  uint64_t v8 = &selRef_ckServerChangeTokens;
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                }
                uint64_t v7 = &selRef_willSave;
                goto LABEL_18;
              }
              a2 = v116;
              id v51 = sub_1005A2E48(v20);
              uint64_t v15 = v117;
              uint64_t v18 = v118;
              if (v51)
              {
                uint64_t v28 = v51;
                self;
                uint64_t v52 = swift_dynamicCastObjCClass();
                if (v52)
                {
                  uint64_t v53 = (void *)v52;
                  id v54 = v28;
                  id v55 = [v53 list];
                  if (v55)
                  {
                    uint64_t v56 = v55;
                    id v57 = [v55 remObjectID];

                    if (v57)
                    {
                      uint64_t v58 = (void *)REMObjectID.codable.getter();
                      a2 = v121;
                      sub_10031DE8C(&v120, v58);

LABEL_39:
LABEL_97:
                      uint64_t v7 = &selRef_willSave;
                      uint64_t v8 = &selRef_ckServerChangeTokens;
                      goto LABEL_18;
                    }
                  }
                  if (qword_1009075F8 != -1) {
                    swift_once();
                  }
                  uint64_t v89 = type metadata accessor for Logger();
                  sub_10008E2DC(v89, (uint64_t)qword_100919168);
                  id v31 = v54;
                  a2 = Logger.logObject.getter();
                  os_log_type_t v90 = static os_log_type_t.info.getter();
                  if (!os_log_type_enabled(a2, v90))
                  {

                    goto LABEL_97;
                  }
                  os_log_type_t v107 = v90;
                  uint64_t v91 = (_DWORD *)swift_slowAlloc();
                  id v120 = (id)swift_slowAlloc();
                  uint64_t v108 = v91;
                  *uint64_t v91 = 136315138;
                  id v92 = [v53 remObjectID];
                  if (v92)
                  {
                    uint64_t v93 = v92;
                    id v94 = [v92 description];

                    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v97 = v96;

                    uint64_t v18 = v118;
                  }
                  else
                  {
                    unint64_t v97 = 0xE300000000000000;
                    uint64_t v95 = 7104878;
                  }
                  *(void *)(v108 + 1) = sub_1000C51B8(v95, v97, (uint64_t *)&v120);

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, a2, v107, "Updated reminder has no list -- skipping {reminder: %s}", (uint8_t *)v108, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

LABEL_95:
LABEL_96:

                  goto LABEL_97;
                }
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v98 = type metadata accessor for Logger();
                sub_10008E2DC(v98, (uint64_t)qword_100919168);
                id v65 = v20;
                a2 = Logger.logObject.getter();
                os_log_type_t v99 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(a2, v99))
                {
                  uint64_t v67 = swift_slowAlloc();
                  unint64_t v100 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v67 = 138412290;
                  *(void *)(v67 + 4) = v65;
                  *unint64_t v100 = v65;
                  unint64_t v69 = a2;
                  os_log_type_t v70 = v99;
                  uint64_t v71 = "Failed to cast managedObject to REMCDReminder {objectID: %@}";
                  goto LABEL_89;
                }
LABEL_90:

                goto LABEL_97;
              }

              uint64_t v7 = &selRef_willSave;
            }
          }
LABEL_18:
          if (v15 == ++v16)
          {

            swift_bridgeObjectRelease();
            unint64_t v5 = v111;
            goto LABEL_6;
          }
        }
      }
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (unint64_t)&_swiftEmptySetSingleton;
  }
  return result;
}

unint64_t sub_1004703DC()
{
  unint64_t result = qword_100919298;
  if (!qword_100919298)
  {
    sub_1000963CC(255, (unint64_t *)&unk_100916ED0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919298);
  }
  return result;
}

uint64_t _s5CacheVMa()
{
  uint64_t result = qword_100919390;
  if (!qword_100919390) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100470490(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004704D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s5CacheVMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047053C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10047059C(uint64_t a1, void *a2)
{
  return sub_100463564(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(unsigned char **)(v2 + 32), *(void **)(v2 + 40));
}

unint64_t sub_1004705A8()
{
  unint64_t result = qword_100919308;
  if (!qword_100919308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919308);
  }
  return result;
}

id sub_1004705FC@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_1002E3C48(a1, a2);
}

void sub_100470618(void *a1, void *a2)
{
  sub_100463FFC(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

void sub_100470638(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  unint64_t v9 = (unint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v52 - v11;
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v16 = (char *)&v52 - v15;
  id v17 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[a1 type:v14]];
  unint64_t v18 = (unint64_t)[v17 supportsCustomSmartLists];

  unint64_t v19 = sub_1003AE654((void *)a2);
  if (!v18)
  {
    if (v3) {
      return;
    }
    a2 = sub_10053B340(v19, a3);
    unint64_t v24 = 0;
    swift_bridgeObjectRelease();
    if (a2 >> 62)
    {
LABEL_36:
      swift_bridgeObjectRetain();
      a1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (a1) {
        goto LABEL_7;
      }
    }
    else
    {
      a1 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (a1)
      {
LABEL_7:
        unint64_t v57 = v24;
        os_log_type_t v66 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((a1 & 0x8000000000000000) == 0)
        {
          unint64_t v12 = 0;
          unint64_t v24 = a2 & 0xC000000000000001;
          while (1)
          {
            if ((char *)a1 == v12)
            {
              __break(1u);
              goto LABEL_35;
            }
            if (v24) {
              id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v22 = *(id *)(a2 + 8 * (void)v12 + 32);
            }
            id v23 = v22;
            _s19PolymorphicListItemCMa();
            uint64_t v16 = (char *)swift_allocObject();
            unint64_t v18 = type metadata accessor for REMList_Codable();
            uint64_t v63 = v18;
            uint64_t v64 = sub_100470490(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
            uint64_t v65 = sub_100470490(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
            v62[0] = v23;
            sub_1003F08EC((uint64_t)v62, (uint64_t)v61);
            sub_100094134(&qword_100919320);
            if (swift_dynamicCast())
            {
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
              unint64_t v21 = v60;
            }
            else
            {
              type metadata accessor for REMSmartList_Codable();
              if ((swift_dynamicCast() & 1) == 0)
              {
                if (qword_1009075F8 != -1) {
                  swift_once();
                }
                uint64_t v46 = v59;
                uint64_t v47 = sub_10008E2DC(v59, (uint64_t)qword_100919168);
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v58 + 16))(v9, v47, v46);
                sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
                sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
                sub_10052ECB8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2);
                __break(1u);
                goto LABEL_74;
              }
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
              unint64_t v21 = v60 | 0x8000000000000000;
            }
            *((void *)v16 + 2) = v21;
            ++v12;
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if ((char *)a1 == v12)
            {
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
        __break(1u);
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    return;
  }
  if (v3) {
    return;
  }
  unint64_t v9 = sub_10053B340(v19, a3);
  swift_bridgeObjectRelease();
  unint64_t v20 = sub_1003AFCD0(a1, (void *)a2, 0);
  unint64_t v24 = 0;
  unint64_t v18 = (unint64_t)sub_10064A824(v20, a3);
  swift_bridgeObjectRelease();
  if (v9 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v56 = v18;
    unint64_t v57 = a2;
    if (v25) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  uint64_t v25 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v56 = v18;
  unint64_t v57 = a2;
  if (v25)
  {
LABEL_22:
    os_log_type_t v66 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v25 & 0x8000000000000000) == 0)
    {
      unint64_t v18 = 0;
      unint64_t v53 = v9 & 0xC000000000000001;
      id v54 = (void *)v25;
      unint64_t v55 = v9;
      while (1)
      {
        if (v25 == v18)
        {
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if (v53) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(v9 + 8 * v18 + 32);
        }
        id v28 = v27;
        _s19PolymorphicListItemCMa();
        uint64_t v29 = swift_allocObject();
        uint64_t v63 = type metadata accessor for REMList_Codable();
        uint64_t v64 = sub_100470490(&qword_100919310, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
        uint64_t v65 = sub_100470490(&qword_100919318, (void (*)(uint64_t))&type metadata accessor for REMList_Codable);
        v62[0] = v28;
        sub_1003F08EC((uint64_t)v62, (uint64_t)v61);
        sub_100094134(&qword_100919320);
        if (swift_dynamicCast())
        {
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
          unint64_t v26 = v60;
        }
        else
        {
          type metadata accessor for REMSmartList_Codable();
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_74:
            if (qword_1009075F8 != -1) {
              swift_once();
            }
            uint64_t v48 = v59;
            uint64_t v49 = sub_10008E2DC(v59, (uint64_t)qword_100919168);
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v16, v49, v48);
            sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
            sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
            sub_10052ECB8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2);
            __break(1u);
LABEL_77:
            if (qword_1009075F8 != -1) {
              swift_once();
            }
            uint64_t v50 = v59;
            uint64_t v51 = sub_10008E2DC(v59, (uint64_t)qword_100919168);
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v12, v51, v50);
            sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
            sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
            sub_10052ECB8((uint64_t)"unknown or unsupported REM object type for REMAccountsListDataView.ListItem", 75, 2);
            __break(1u);
            return;
          }
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
          unint64_t v26 = v60 | 0x8000000000000000;
        }
        *(void *)(v29 + 16) = v26;
        unint64_t v9 = v55;
        ++v18;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v25 = (uint64_t)v54;
        a2 = v57;
        if (v54 == (void *)v18)
        {
          id v54 = v66;
          swift_bridgeObjectRelease();
          unint64_t v18 = v56;
          goto LABEL_41;
        }
      }
    }
    __break(1u);
    goto LABEL_68;
  }
LABEL_40:
  swift_bridgeObjectRelease();
  id v54 = _swiftEmptyArrayStorage;
LABEL_41:
  if (v18 >> 62) {
    goto LABEL_56;
  }
  uint64_t v30 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v30)
  {
    while (1)
    {
      os_log_type_t v66 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v30 < 0) {
        break;
      }
      uint64_t v31 = 0;
      unint64_t v55 = v18 & 0xC000000000000001;
      while (v30 != v31)
      {
        if (v55) {
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v33 = *(id *)(v18 + 8 * v31 + 32);
        }
        id v34 = v33;
        _s19PolymorphicListItemCMa();
        uint64_t v35 = swift_allocObject();
        uint64_t v63 = type metadata accessor for REMSmartList_Codable();
        uint64_t v64 = sub_100470490(&qword_100919328, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
        uint64_t v65 = sub_100470490(&qword_100919330, (void (*)(uint64_t))&type metadata accessor for REMSmartList_Codable);
        v62[0] = v34;
        sub_1003F08EC((uint64_t)v62, (uint64_t)v61);
        sub_100094134(&qword_100919320);
        type metadata accessor for REMList_Codable();
        if (swift_dynamicCast())
        {
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
          unint64_t v32 = v60;
        }
        else
        {
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_77;
          }
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v62);
          unint64_t v32 = v60 | 0x8000000000000000;
        }
        *(void *)(v35 + 16) = v32;
        unint64_t v18 = v56;
        ++v31;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v61);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        a2 = v57;
        if (v30 == v31)
        {
          uint64_t v36 = v66;
          swift_bridgeObjectRelease();
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_56:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v30) {
        goto LABEL_57;
      }
    }
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  uint64_t v36 = _swiftEmptyArrayStorage;
LABEL_58:
  v62[0] = v54;
  sub_100203C44((unint64_t)v36);
  unint64_t v37 = v62[0];
  id v38 = [(id)a1 remObjectID];
  if (v38)
  {
    a1 = (uint64_t)v38;
    if (!(v37 >> 62))
    {
      uint64_t v39 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v40 = v38;
      if (v39 <= 1)
      {
LABEL_70:

        return;
      }
LABEL_61:
      unint64_t v41 = sub_10022914C((void *)a1, (void *)a2);
      if (v24)
      {

        swift_errorRelease();
        return;
      }
      id v42 = (void *)v41;
      if (v41)
      {
        _s19PolymorphicListItemCMa();
        id v43 = v42;
        REMOrderedIdentifierMap.reorder<A>(objects:)();
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_70;
    }
LABEL_69:
    id v44 = (id)a1;
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45 <= 1) {
      goto LABEL_70;
    }
    goto LABEL_61;
  }
}

uint64_t *sub_1004711DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void sub_1004712AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_100471320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1004713A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_100471428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1004714A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_100471528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047153C);
}

uint64_t sub_10047153C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1004715FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100471610);
}

uint64_t sub_100471610(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1004716CC()
{
  uint64_t result = type metadata accessor for REMAccountsListDataView.ReminderCounts();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100471764()
{
  unint64_t result = qword_1009193D0;
  if (!qword_1009193D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009193D0);
  }
  return result;
}

uint64_t sub_1004717B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7265646E696D6572 && a2 == 0xEE0073746E756F43;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unsigned char *_s5CacheV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100471994);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5CacheV10CodingKeysOMa()
{
  return &_s5CacheV10CodingKeysON;
}

unint64_t sub_1004719D0()
{
  unint64_t result = qword_1009193F8;
  if (!qword_1009193F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009193F8);
  }
  return result;
}

unint64_t sub_100471A28()
{
  unint64_t result = qword_100919400;
  if (!qword_100919400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919400);
  }
  return result;
}

unint64_t sub_100471A80()
{
  unint64_t result = qword_100919408;
  if (!qword_100919408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919408);
  }
  return result;
}

ValueMetadata *_s34PersistentHistoryTruncationHandlerOMa()
{
  return &_s34PersistentHistoryTruncationHandlerON;
}

void sub_100471AE8(char a1, void *a2, uint64_t a3)
{
}

void sub_100471B10(char a1, void *a2, uint64_t a3)
{
}

void sub_100471B38(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  LODWORD(v6) = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_10008E2DC(v13, (uint64_t)qword_100917690);
        id v14 = v12;
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.fault.getter();
        id v17 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v18 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315650;
          if (v6) {
            uint64_t v19 = 0x44496D72616C61;
          }
          else {
            uint64_t v19 = 0x49746E756F636361;
          }
          if (v6) {
            unint64_t v20 = 0xE700000000000000;
          }
          else {
            unint64_t v20 = 0xE900000000000044;
          }
          char v68 = (char)v6;
          uint64_t v72 = sub_1000C51B8(v19, v20, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v21 = [(id)swift_getObjCClassFromMetadata() description];
          os_log_t log = v15;
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t type = v16;
          id v23 = v14;
          unint64_t v25 = v24;

          uint64_t v72 = sub_1000C51B8(v22, v25, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2080;
          id v26 = [v23 description];
          id v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v28 = v27;

          id v14 = v23;
          uint64_t v29 = (uint64_t)v6;
          LOBYTE(v6) = v68;
          uint64_t v72 = sub_1000C51B8(v29, v28, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v17 = &selRef_ckServerChangeTokens;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v50 = self;
        uint64_t v70 = 0;
        unint64_t v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._uint64_t countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x80000001007D5720;
        String.append(_:)(v51);
        LOBYTE(v72) = (_BYTE)v6;
        _print_unlocked<A, B>(_:_:)();
        v52._object = (void *)0x80000001007D5750;
        v52._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v52);
        sub_1000963CC(0, a5);
        id v53 = [(id)swift_getObjCClassFromMetadata() v17[166]];
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v56 = v55;

        v57._uint64_t countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._object = (void *)0xE900000000000020;
        v58._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v58);
        id v59 = [v14 v17[166]];
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v62 = v61;

        v63._uint64_t countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._uint64_t countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v50 internalErrorWithDebugDescription:v65];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10008E2DC(v30, (uint64_t)qword_100917690);
  id v31 = a2;
  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315394;
    if (v6) {
      uint64_t v35 = 0x44496D72616C61;
    }
    else {
      uint64_t v35 = 0x49746E756F636361;
    }
    if (v6) {
      unint64_t v36 = 0xE700000000000000;
    }
    else {
      unint64_t v36 = 0xE900000000000044;
    }
    char v69 = (char)v6;
    uint64_t v72 = sub_1000C51B8(v35, v36, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    id v6 = [v31 description];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    LOBYTE(v6) = v69;
    uint64_t v72 = sub_1000C51B8(v37, v39, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v40 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v41._object = (void *)0x80000001007D5700;
  String.append(_:)(v41);
  LOBYTE(v72) = (_BYTE)v6;
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v42._object = (void *)0xEC000000203A4449;
  String.append(_:)(v42);
  id v43 = [v31 description];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  v47._uint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 125;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v40 internalErrorWithDebugDescription:v49];

  swift_willThrow();
}

void sub_100472358(void *a1, uint64_t a2)
{
}

void sub_100472378(char a1, void *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315650;
          char v62 = a1;
          if (a1)
          {
            if (a1 == 1) {
              uint64_t v15 = 0x6341746E65726170;
            }
            else {
              uint64_t v15 = 0xD000000000000014;
            }
            if (a1 == 1) {
              unint64_t v16 = 0xEF4449746E756F63;
            }
            else {
              unint64_t v16 = 0x80000001007C6240;
            }
          }
          else
          {
            uint64_t v15 = 0x49746E756F636361;
            unint64_t v16 = 0xE900000000000044;
          }
          uint64_t v66 = sub_1000C51B8(v15, v16, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v14 + 12) = 2080;
          sub_1000963CC(0, &qword_10090ABC0);
          id v38 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;

          uint64_t v66 = sub_1000C51B8(v39, v41, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v14 + 22) = 2080;
          id v42 = [v11 description];
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

          uint64_t v66 = sub_1000C51B8(v43, v45, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v14, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v62;
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v66) = a1;
        _print_unlocked<A, B>(_:_:)();
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        v48._object = (void *)0x80000001007D5750;
        String.append(_:)(v48);
        sub_1000963CC(0, &qword_10090ABC0);
        id v49 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100917690);
  id v18 = a2;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315394;
    char v63 = a1;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v22 = 0x6341746E65726170;
      }
      else {
        uint64_t v22 = 0xD000000000000014;
      }
      if (a1 == 1) {
        unint64_t v23 = 0xEF4449746E756F63;
      }
      else {
        unint64_t v23 = 0x80000001007C6240;
      }
    }
    else
    {
      uint64_t v22 = 0x49746E756F636361;
      unint64_t v23 = 0xE900000000000044;
    }
    uint64_t v66 = sub_1000C51B8(v22, v23, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    id v24 = [v18 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v66 = sub_1000C51B8(v25, v27, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v63;
  }
  else
  {
  }
  unint64_t v28 = self;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29._object = (void *)0x80000001007D5700;
  String.append(_:)(v29);
  LOBYTE(v66) = a1;
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v30._object = (void *)0xEC000000203A4449;
  String.append(_:)(v30);
  id v31 = [v18 description];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  v35._uint64_t countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 125;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 internalErrorWithDebugDescription:v37];

  swift_willThrow();
}

void sub_100472BF0(char a1, void *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDTemplateSection();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315650;
          char v62 = a1;
          if (a1)
          {
            if (a1 == 1) {
              uint64_t v15 = 0x6341746E65726170;
            }
            else {
              uint64_t v15 = 0xD000000000000014;
            }
            if (a1 == 1) {
              unint64_t v16 = 0xEF4449746E756F63;
            }
            else {
              unint64_t v16 = 0x80000001007C6240;
            }
          }
          else
          {
            uint64_t v15 = 0x49746E756F636361;
            unint64_t v16 = 0xE900000000000044;
          }
          uint64_t v66 = sub_1000C51B8(v15, v16, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v14 + 12) = 2080;
          id v38 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;

          uint64_t v66 = sub_1000C51B8(v39, v41, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v14 + 22) = 2080;
          id v42 = [v11 description];
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

          uint64_t v66 = sub_1000C51B8(v43, v45, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v14, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v62;
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v66) = a1;
        _print_unlocked<A, B>(_:_:)();
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        v48._object = (void *)0x80000001007D5750;
        String.append(_:)(v48);
        id v49 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100917690);
  id v18 = a2;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315394;
    char v63 = a1;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v22 = 0x6341746E65726170;
      }
      else {
        uint64_t v22 = 0xD000000000000014;
      }
      if (a1 == 1) {
        unint64_t v23 = 0xEF4449746E756F63;
      }
      else {
        unint64_t v23 = 0x80000001007C6240;
      }
    }
    else
    {
      uint64_t v22 = 0x49746E756F636361;
      unint64_t v23 = 0xE900000000000044;
    }
    uint64_t v66 = sub_1000C51B8(v22, v23, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    id v24 = [v18 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v66 = sub_1000C51B8(v25, v27, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v63;
  }
  else
  {
  }
  unint64_t v28 = self;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29._object = (void *)0x80000001007D5700;
  String.append(_:)(v29);
  LOBYTE(v66) = a1;
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v30._object = (void *)0xEC000000203A4449;
  String.append(_:)(v30);
  id v31 = [v18 description];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  v35._uint64_t countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 125;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 internalErrorWithDebugDescription:v37];

  swift_willThrow();
}

void sub_100473448(char a1, void *a2, uint64_t a3)
{
}

void sub_100473478(char a1, void *a2, uint64_t a3)
{
}

void sub_1004734A8(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  int v7 = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v10 = a2;
    unint64_t v11 = sub_100306FE8((uint64_t)v10);
    if (v12)
    {
      id v13 = *(id *)(*(void *)(a3 + 56) + 16 * v11);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v13;
        unint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t type = v17;
          uint64_t v18 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315650;
          if (v7) {
            uint64_t v19 = 0x7265646E696D6572;
          }
          else {
            uint64_t v19 = 0x49746E756F636361;
          }
          os_log_t log = v16;
          if (v7) {
            unint64_t v20 = 0xEA00000000004449;
          }
          else {
            unint64_t v20 = 0xE900000000000044;
          }
          uint64_t v72 = sub_1000C51B8(v19, v20, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000963CC(0, a6);
          id v21 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v23 = v15;
          unint64_t v25 = v24;

          uint64_t v72 = sub_1000C51B8(v22, v25, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2080;
          id v26 = [v23 description];
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;

          uint64_t v30 = v27;
          id v15 = v23;
          uint64_t v72 = sub_1000C51B8(v30, v29, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        Swift::String v52 = self;
        uint64_t v70 = 0;
        unint64_t v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v53._uint64_t countAndFlagsBits = 0xD000000000000029;
        v53._object = (void *)0x80000001007D5720;
        String.append(_:)(v53);
        LOBYTE(v72) = v7;
        _print_unlocked<A, B>(_:_:)();
        v54._object = (void *)0x80000001007D5750;
        v54._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v54);
        sub_1000963CC(0, a6);
        id v55 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._object = (void *)0xE900000000000020;
        v60._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v60);
        id v61 = [v15 description];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v64 = v63;

        v65._uint64_t countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 125;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v52 internalErrorWithDebugDescription:v67];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100917690);
  id v32 = a2;
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    if (v7) {
      uint64_t v36 = 0x7265646E696D6572;
    }
    else {
      uint64_t v36 = 0x49746E756F636361;
    }
    if (v7) {
      unint64_t v37 = 0xEA00000000004449;
    }
    else {
      unint64_t v37 = 0xE900000000000044;
    }
    uint64_t v72 = sub_1000C51B8(v36, v37, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    id v38 = [v32 description];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v72 = sub_1000C51B8(v39, v41, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v42 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v43._object = (void *)0x80000001007D5700;
  String.append(_:)(v43);
  LOBYTE(v72) = v7;
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v44._object = (void *)0xEC000000203A4449;
  String.append(_:)(v44);
  id v45 = [v32 description];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v48 = v47;

  v49._uint64_t countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 125;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 internalErrorWithDebugDescription:v51];

  swift_willThrow();
}

void sub_100473CDC(char a1, void *a2, uint64_t a3)
{
}

void sub_100473D0C(char a1, void *a2, uint64_t a3)
{
  LODWORD(v4) = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDSavedReminder();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        char v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        uint64_t v14 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315650;
          if (v4) {
            uint64_t v16 = 0x7265646E696D6572;
          }
          else {
            uint64_t v16 = 0x49746E756F636361;
          }
          if (v4) {
            unint64_t v17 = 0xEA00000000004449;
          }
          else {
            unint64_t v17 = 0xE900000000000044;
          }
          uint64_t v66 = sub_1000C51B8(v16, v17, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          id v18 = [(id)swift_getObjCClassFromMetadata() description];
          char v19 = (char)v4;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t type = v13;
          unint64_t v22 = v21;

          uint64_t v66 = sub_1000C51B8(v20, v22, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2080;
          id v4 = [v11 description];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;

          LOBYTE(v4) = v19;
          uint64_t v66 = sub_1000C51B8(v23, v25, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v14 = &selRef_ckServerChangeTokens;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v66) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)();
        v48._object = (void *)0x80000001007D5750;
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v48);
        id v49 = [(id)swift_getObjCClassFromMetadata() v14[166]];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 v14[166]];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_100917690);
  id v27 = a2;
  unint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    if (v4) {
      uint64_t v31 = 0x7265646E696D6572;
    }
    else {
      uint64_t v31 = 0x49746E756F636361;
    }
    char v63 = (char)v4;
    if (v4) {
      id v4 = (id)0xEA00000000004449;
    }
    else {
      id v4 = (id)0xE900000000000044;
    }
    uint64_t v66 = sub_1000C51B8(v31, (unint64_t)v4, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    id v32 = [v27 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v66 = sub_1000C51B8(v33, v35, &v64);
    LOBYTE(v4) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v36 = self;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v37._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v37._object = (void *)0x80000001007D5700;
  String.append(_:)(v37);
  LOBYTE(v66) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v38._object = (void *)0xEC000000203A4449;
  String.append(_:)(v38);
  id v39 = [v27 description];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v42 = v41;

  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 125;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  NSString v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 internalErrorWithDebugDescription:v45];

  swift_willThrow();
}

void sub_100474518(char a1, void *a2, uint64_t a3)
{
}

void sub_100474540(char a1, void *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDSmartListSection();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        char v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = 0x49746E756F636361;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315650;
          unint64_t v16 = 0xE900000000000044;
          char v64 = a1;
          uint64_t v66 = v62;
          switch(a1)
          {
            case 1:
              uint64_t v14 = 0x6341746E65726170;
              unint64_t v16 = 0xEF4449746E756F63;
              break;
            case 2:
              uint64_t v14 = 0x694C746E65726170;
              unint64_t v16 = 0xEC00000044497473;
              break;
            case 3:
              unint64_t v16 = 0x80000001007C6240;
              uint64_t v14 = 0xD000000000000014;
              break;
            default:
              break;
          }
          uint64_t v68 = sub_1000C51B8(v14, v16, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          id v38 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;

          uint64_t v68 = sub_1000C51B8(v39, v41, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2080;
          id v42 = [v11 description];
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

          uint64_t v68 = sub_1000C51B8(v43, v45, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v64;
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v66 = 0;
        unint64_t v67 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v68) = a1;
        _print_unlocked<A, B>(_:_:)();
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        v48._object = (void *)0x80000001007D5750;
        String.append(_:)(v48);
        id v49 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100917690);
  id v18 = a2;
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = 0x49746E756F636361;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    unint64_t v23 = 0xE900000000000044;
    char v65 = a1;
    uint64_t v66 = v63;
    switch(a1)
    {
      case 1:
        uint64_t v21 = 0x6341746E65726170;
        unint64_t v23 = 0xEF4449746E756F63;
        break;
      case 2:
        uint64_t v21 = 0x694C746E65726170;
        unint64_t v23 = 0xEC00000044497473;
        break;
      case 3:
        unint64_t v23 = 0x80000001007C6240;
        uint64_t v21 = 0xD000000000000014;
        break;
      default:
        break;
    }
    uint64_t v68 = sub_1000C51B8(v21, v23, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    id v24 = [v18 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v68 = sub_1000C51B8(v25, v27, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v65;
  }
  else
  {
  }
  unint64_t v28 = self;
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v29._object = (void *)0x80000001007D5700;
  String.append(_:)(v29);
  LOBYTE(v68) = a1;
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v30._object = (void *)0xEC000000203A4449;
  String.append(_:)(v30);
  id v31 = [v18 description];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v34 = v33;

  v35._uint64_t countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 125;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v28 internalErrorWithDebugDescription:v37];

  swift_willThrow();
}

void sub_100474E30(char a1, void *a2, uint64_t a3)
{
}

void sub_100474E58(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        unint64_t v13 = 0xE900000000000044;
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v12;
        unint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t v68 = v17;
          os_log_t log = v16;
          char v18 = a1;
          uint64_t v19 = 0x49746E756F636361;
          uint64_t v20 = swift_slowAlloc();
          uint64_t v67 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315650;
          uint64_t v72 = v67;
          uint64_t v21 = v15;
          switch(v18)
          {
            case 1:
              uint64_t v19 = 0x6341746E65726170;
              unint64_t v13 = 0xEF4449746E756F63;
              break;
            case 2:
              uint64_t v19 = 0x694C746E65726170;
              unint64_t v13 = 0xEC00000044497473;
              break;
            case 3:
              unint64_t v13 = 0x80000001007C6240;
              uint64_t v19 = 0xD000000000000014;
              break;
            default:
              break;
          }
          uint64_t v74 = sub_1000C51B8(v19, v13, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v43 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v46 = v45;

          uint64_t v74 = sub_1000C51B8(v44, v46, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2080;
          id v15 = v21;
          id v47 = [v21 description];
          uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;

          uint64_t v74 = sub_1000C51B8(v48, v50, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v68, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v18;
        }
        else
        {
        }
        NSString v51 = self;
        uint64_t v72 = 0;
        unint64_t v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v52._uint64_t countAndFlagsBits = 0xD000000000000029;
        v52._object = (void *)0x80000001007D5720;
        String.append(_:)(v52);
        LOBYTE(v74) = a1;
        _print_unlocked<A, B>(_:_:)();
        v53._uint64_t countAndFlagsBits = 0xD000000000000010;
        v53._object = (void *)0x80000001007D5750;
        String.append(_:)(v53);
        sub_1000963CC(0, a5);
        id v54 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v57 = v56;

        v58._uint64_t countAndFlagsBits = v55;
        v58._object = v57;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._object = (void *)0xE900000000000020;
        v59._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v59);
        id v60 = [v15 description];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        v64._uint64_t countAndFlagsBits = v61;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._uint64_t countAndFlagsBits = 125;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        NSString v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v51 internalErrorWithDebugDescription:v66];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100917690);
  id v23 = a2;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = 0x49746E756F636361;
    uint64_t v27 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    unint64_t v28 = 0xE900000000000044;
    char v71 = a1;
    uint64_t v72 = (uint64_t)loga;
    switch(a1)
    {
      case 1:
        uint64_t v26 = 0x6341746E65726170;
        unint64_t v28 = 0xEF4449746E756F63;
        break;
      case 2:
        uint64_t v26 = 0x694C746E65726170;
        unint64_t v28 = 0xEC00000044497473;
        break;
      case 3:
        unint64_t v28 = 0x80000001007C6240;
        uint64_t v26 = 0xD000000000000014;
        break;
      default:
        break;
    }
    uint64_t v74 = sub_1000C51B8(v26, v28, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    id v29 = [v23 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    uint64_t v74 = sub_1000C51B8(v30, v32, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v71;
  }
  else
  {
  }
  uint64_t v33 = self;
  uint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v34._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v34._object = (void *)0x80000001007D5700;
  String.append(_:)(v34);
  LOBYTE(v74) = a1;
  _print_unlocked<A, B>(_:_:)();
  v35._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v35._object = (void *)0xEC000000203A4449;
  String.append(_:)(v35);
  id v36 = [v23 description];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  v40._uint64_t countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 125;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v33 internalErrorWithDebugDescription:v42];

  swift_willThrow();
}

void sub_100475768(char a1, void *a2, uint64_t a3)
{
}

void sub_100475790(char a1, void *a2, uint64_t a3)
{
}

void sub_1004757B8(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        unint64_t v13 = 0xE900000000000044;
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v12;
        unint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t v72 = v17;
          os_log_t log = v16;
          char v18 = a1;
          uint64_t v19 = 0x49746E756F636361;
          uint64_t v20 = swift_slowAlloc();
          uint64_t v71 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315650;
          uint64_t v76 = v71;
          uint64_t v21 = v15;
          switch(v18)
          {
            case 1:
              unint64_t v13 = 0xE600000000000000;
              uint64_t v19 = 0x44497473696CLL;
              break;
            case 2:
              uint64_t v19 = 0xD000000000000010;
              unint64_t v45 = "parentReminderID";
              goto LABEL_31;
            case 3:
              unint64_t v46 = "subtaskIDsToUndelete";
              goto LABEL_29;
            case 4:
              unint64_t v46 = "hashtagIDsToUndelete";
LABEL_29:
              unint64_t v13 = (unint64_t)(v46 - 32) | 0x8000000000000000;
              uint64_t v19 = 0xD000000000000014;
              break;
            case 5:
              uint64_t v19 = 0xD00000000000001FLL;
              unint64_t v45 = "siriFoundInAppsUserConfirmation";
LABEL_31:
              unint64_t v13 = (unint64_t)(v45 - 32) | 0x8000000000000000;
              break;
            default:
              break;
          }
          uint64_t v78 = sub_1000C51B8(v19, v13, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v47 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;

          uint64_t v78 = sub_1000C51B8(v48, v50, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2080;
          id v15 = v21;
          id v51 = [v21 description];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;

          uint64_t v78 = sub_1000C51B8(v52, v54, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v72, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v18;
        }
        else
        {
        }
        uint64_t v55 = self;
        uint64_t v76 = 0;
        unint64_t v77 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v56._uint64_t countAndFlagsBits = 0xD000000000000029;
        v56._object = (void *)0x80000001007D5720;
        String.append(_:)(v56);
        LOBYTE(v78) = a1;
        _print_unlocked<A, B>(_:_:)();
        v57._uint64_t countAndFlagsBits = 0xD000000000000010;
        v57._object = (void *)0x80000001007D5750;
        String.append(_:)(v57);
        sub_1000963CC(0, a5);
        id v58 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v61 = v60;

        v62._uint64_t countAndFlagsBits = v59;
        v62._object = v61;
        String.append(_:)(v62);
        swift_bridgeObjectRelease();
        v63._object = (void *)0xE900000000000020;
        v63._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v63);
        id v64 = [v15 description];
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v67 = v66;

        v68._uint64_t countAndFlagsBits = v65;
        v68._object = v67;
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._uint64_t countAndFlagsBits = 125;
        v69._object = (void *)0xE100000000000000;
        String.append(_:)(v69);
        NSString v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v55 internalErrorWithDebugDescription:v70];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100917690);
  id v23 = a2;
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = 0x49746E756F636361;
    uint64_t v27 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    unint64_t v28 = 0xE900000000000044;
    char v75 = a1;
    uint64_t v76 = (uint64_t)loga;
    switch(a1)
    {
      case 1:
        unint64_t v28 = 0xE600000000000000;
        uint64_t v26 = 0x44497473696CLL;
        break;
      case 2:
        uint64_t v26 = 0xD000000000000010;
        id v29 = "parentReminderID";
        goto LABEL_22;
      case 3:
        uint64_t v30 = "subtaskIDsToUndelete";
        goto LABEL_20;
      case 4:
        uint64_t v30 = "hashtagIDsToUndelete";
LABEL_20:
        unint64_t v28 = (unint64_t)(v30 - 32) | 0x8000000000000000;
        uint64_t v26 = 0xD000000000000014;
        break;
      case 5:
        uint64_t v26 = 0xD00000000000001FLL;
        id v29 = "siriFoundInAppsUserConfirmation";
LABEL_22:
        unint64_t v28 = (unint64_t)(v29 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v78 = sub_1000C51B8(v26, v28, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    id v31 = [v23 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    uint64_t v78 = sub_1000C51B8(v32, v34, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v75;
  }
  else
  {
  }
  Swift::String v35 = self;
  uint64_t v76 = 0;
  unint64_t v77 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v36._object = (void *)0x80000001007D5700;
  String.append(_:)(v36);
  LOBYTE(v78) = a1;
  _print_unlocked<A, B>(_:_:)();
  v37._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v37._object = (void *)0xEC000000203A4449;
  String.append(_:)(v37);
  id v38 = [v23 description];
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v41 = v40;

  v42._uint64_t countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 125;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v35 internalErrorWithDebugDescription:v44];

  swift_willThrow();
}

void sub_1004760F0(char a1, void *a2, uint64_t a3)
{
}

void sub_100476118(char a1, void *a2, uint64_t a3)
{
}

void sub_100476140(char a1, void *a2, uint64_t a3)
{
}

void sub_100476168(char a1, void *a2, uint64_t a3)
{
}

void sub_100476190(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  LODWORD(v6) = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_10008E2DC(v13, (uint64_t)qword_100917690);
        id v14 = v12;
        id v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.fault.getter();
        os_log_type_t v17 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v18 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315650;
          if (v6) {
            uint64_t v19 = 0xD000000000000016;
          }
          else {
            uint64_t v19 = 0xD000000000000011;
          }
          if (v6) {
            unint64_t v20 = 0x80000001007C65D0;
          }
          else {
            unint64_t v20 = 0x80000001007C65B0;
          }
          char v68 = (char)v6;
          uint64_t v72 = sub_1000C51B8(v19, v20, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v21 = [(id)swift_getObjCClassFromMetadata() description];
          os_log_type_t type = v16;
          uint64_t v22 = v14;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_t log = v15;
          unint64_t v25 = v24;

          uint64_t v72 = sub_1000C51B8(v23, v25, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2080;
          id v26 = [v22 description];
          id v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v28 = v27;

          id v14 = v22;
          uint64_t v29 = (uint64_t)v6;
          LOBYTE(v6) = v68;
          uint64_t v72 = sub_1000C51B8(v29, v28, &v70);
          os_log_type_t v17 = &selRef_ckServerChangeTokens;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        unint64_t v50 = self;
        uint64_t v70 = 0;
        unint64_t v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v51._uint64_t countAndFlagsBits = 0xD000000000000029;
        v51._object = (void *)0x80000001007D5720;
        String.append(_:)(v51);
        LOBYTE(v72) = (_BYTE)v6;
        _print_unlocked<A, B>(_:_:)();
        v52._uint64_t countAndFlagsBits = 0xD000000000000010;
        v52._object = (void *)0x80000001007D5750;
        String.append(_:)(v52);
        sub_1000963CC(0, a5);
        id v53 = [(id)swift_getObjCClassFromMetadata() v17[166]];
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v56 = v55;

        v57._uint64_t countAndFlagsBits = v54;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        v58._object = (void *)0xE900000000000020;
        String.append(_:)(v58);
        id v59 = [v14 v17[166]];
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v62 = v61;

        v63._uint64_t countAndFlagsBits = v60;
        v63._object = v62;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        v64._uint64_t countAndFlagsBits = 125;
        v64._object = (void *)0xE100000000000000;
        String.append(_:)(v64);
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v50 internalErrorWithDebugDescription:v65];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10008E2DC(v30, (uint64_t)qword_100917690);
  id v31 = a2;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315394;
    if (v6) {
      uint64_t v35 = 0xD000000000000016;
    }
    else {
      uint64_t v35 = 0xD000000000000011;
    }
    if (v6) {
      unint64_t v36 = 0x80000001007C65D0;
    }
    else {
      unint64_t v36 = 0x80000001007C65B0;
    }
    char v69 = (char)v6;
    uint64_t v72 = sub_1000C51B8(v35, v36, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    id v6 = [v31 description];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    LOBYTE(v6) = v69;
    uint64_t v72 = sub_1000C51B8(v37, v39, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  Swift::String v40 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v41._object = (void *)0x80000001007D5700;
  String.append(_:)(v41);
  LOBYTE(v72) = (_BYTE)v6;
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v42._object = (void *)0xEC000000203A4449;
  String.append(_:)(v42);
  id v43 = [v31 description];
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v46 = v45;

  v47._uint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 125;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v40 internalErrorWithDebugDescription:v49];

  swift_willThrow();
}

void sub_1004769A4(char a1, void *a2, uint64_t a3)
{
}

void sub_1004769CC(char a1, void *a2, uint64_t a3)
{
}

void sub_1004769F4(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        unint64_t v13 = 0xE900000000000044;
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v12;
        os_log_type_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t v68 = v17;
          os_log_t log = v16;
          char v18 = a1;
          uint64_t v19 = 0x49746E756F636361;
          uint64_t v20 = swift_slowAlloc();
          uint64_t v67 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315650;
          uint64_t v72 = v67;
          id v21 = v15;
          switch(v18)
          {
            case 1:
              uint64_t v19 = 0x7265646E696D6572;
              goto LABEL_24;
            case 2:
              uint64_t v19 = 0x65656E6769737361;
LABEL_24:
              unint64_t v13 = 0xEA00000000004449;
              break;
            case 3:
              uint64_t v19 = 0x74616E696769726FLL;
              unint64_t v13 = 0xEC0000004449726FLL;
              break;
            default:
              break;
          }
          uint64_t v74 = sub_1000C51B8(v19, v13, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v43 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v46 = v45;

          uint64_t v74 = sub_1000C51B8(v44, v46, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2080;
          id v15 = v21;
          id v47 = [v21 description];
          uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;

          uint64_t v74 = sub_1000C51B8(v48, v50, &v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v68, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v18;
        }
        else
        {
        }
        Swift::String v51 = self;
        uint64_t v72 = 0;
        unint64_t v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v52._uint64_t countAndFlagsBits = 0xD000000000000029;
        v52._object = (void *)0x80000001007D5720;
        String.append(_:)(v52);
        LOBYTE(v74) = a1;
        _print_unlocked<A, B>(_:_:)();
        v53._object = (void *)0x80000001007D5750;
        v53._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v53);
        sub_1000963CC(0, a5);
        id v54 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v57 = v56;

        v58._uint64_t countAndFlagsBits = v55;
        v58._object = v57;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v59._object = (void *)0xE900000000000020;
        v59._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v59);
        id v60 = [v15 description];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v63 = v62;

        v64._uint64_t countAndFlagsBits = v61;
        v64._object = v63;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        v65._uint64_t countAndFlagsBits = 125;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        NSString v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v51 internalErrorWithDebugDescription:v66];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100917690);
  id v23 = a2;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = 0x49746E756F636361;
    uint64_t v27 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    unint64_t v28 = 0xE900000000000044;
    char v71 = a1;
    uint64_t v72 = (uint64_t)loga;
    switch(a1)
    {
      case 1:
        uint64_t v26 = 0x7265646E696D6572;
        goto LABEL_17;
      case 2:
        uint64_t v26 = 0x65656E6769737361;
LABEL_17:
        unint64_t v28 = 0xEA00000000004449;
        break;
      case 3:
        uint64_t v26 = 0x74616E696769726FLL;
        unint64_t v28 = 0xEC0000004449726FLL;
        break;
      default:
        break;
    }
    uint64_t v74 = sub_1000C51B8(v26, v28, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    id v29 = [v23 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    uint64_t v74 = sub_1000C51B8(v30, v32, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v71;
  }
  else
  {
  }
  os_log_type_t v33 = self;
  uint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v34._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v34._object = (void *)0x80000001007D5700;
  String.append(_:)(v34);
  LOBYTE(v74) = a1;
  _print_unlocked<A, B>(_:_:)();
  v35._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v35._object = (void *)0xEC000000203A4449;
  String.append(_:)(v35);
  id v36 = [v23 description];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v39 = v38;

  v40._uint64_t countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 125;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v33 internalErrorWithDebugDescription:v42];

  swift_willThrow();
}

void sub_1004772E4(char a1, void *a2, uint64_t a3)
{
}

void sub_10047730C(char a1, void *a2, uint64_t a3)
{
}

void sub_10047733C(char a1, void *a2, uint64_t a3)
{
}

void sub_10047736C(char a1, void *a2, uint64_t a3)
{
}

void sub_10047739C(char a1, void *a2, uint64_t a3)
{
}

void sub_1004773CC(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  int v7 = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v10 = a2;
    unint64_t v11 = sub_100306FE8((uint64_t)v10);
    if (v12)
    {
      id v13 = *(id *)(*(void *)(a3 + 56) + 16 * v11);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v13;
        os_log_type_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t type = v17;
          uint64_t v18 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315650;
          if (v7) {
            uint64_t v19 = 0x4449746E65726170;
          }
          else {
            uint64_t v19 = 0x49746E756F636361;
          }
          os_log_t log = v16;
          if (v7) {
            unint64_t v20 = 0xE800000000000000;
          }
          else {
            unint64_t v20 = 0xE900000000000044;
          }
          uint64_t v72 = sub_1000C51B8(v19, v20, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000963CC(0, a6);
          id v21 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v23 = v15;
          unint64_t v25 = v24;

          uint64_t v72 = sub_1000C51B8(v22, v25, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2080;
          id v26 = [v23 description];
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;

          uint64_t v30 = v27;
          id v15 = v23;
          uint64_t v72 = sub_1000C51B8(v30, v29, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        Swift::String v52 = self;
        uint64_t v70 = 0;
        unint64_t v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v53._uint64_t countAndFlagsBits = 0xD000000000000029;
        v53._object = (void *)0x80000001007D5720;
        String.append(_:)(v53);
        LOBYTE(v72) = v7;
        _print_unlocked<A, B>(_:_:)();
        v54._object = (void *)0x80000001007D5750;
        v54._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v54);
        sub_1000963CC(0, a6);
        id v55 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._object = (void *)0xE900000000000020;
        v60._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v60);
        id v61 = [v15 description];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v64 = v63;

        v65._uint64_t countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 125;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v52 internalErrorWithDebugDescription:v67];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100917690);
  id v32 = a2;
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    if (v7) {
      uint64_t v36 = 0x4449746E65726170;
    }
    else {
      uint64_t v36 = 0x49746E756F636361;
    }
    if (v7) {
      unint64_t v37 = 0xE800000000000000;
    }
    else {
      unint64_t v37 = 0xE900000000000044;
    }
    uint64_t v72 = sub_1000C51B8(v36, v37, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    id v38 = [v32 description];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v72 = sub_1000C51B8(v39, v41, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  NSString v42 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v43._object = (void *)0x80000001007D5700;
  String.append(_:)(v43);
  LOBYTE(v72) = v7;
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v44._object = (void *)0xEC000000203A4449;
  String.append(_:)(v44);
  id v45 = [v32 description];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  v49._uint64_t countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 125;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 internalErrorWithDebugDescription:v51];

  swift_willThrow();
}

void sub_100477BF8(char a1, void *a2, uint64_t a3)
{
}

void sub_100477C28(char a1, void *a2, uint64_t a3)
{
}

void sub_100477C58(char a1, void *a2, uint64_t a3)
{
}

void sub_100477C88(char a1, void *a2, uint64_t a3)
{
}

void sub_100477CB8(char a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  int v7 = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v10 = a2;
    unint64_t v11 = sub_100306FE8((uint64_t)v10);
    if (v12)
    {
      id v13 = *(id *)(*(void *)(a3 + 56) + 16 * v11);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v13;
        os_log_type_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t type = v17;
          uint64_t v18 = swift_slowAlloc();
          uint64_t v70 = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315650;
          if (v7) {
            uint64_t v19 = 0x44497473696CLL;
          }
          else {
            uint64_t v19 = 0x49746E756F636361;
          }
          os_log_t log = v16;
          if (v7) {
            unint64_t v20 = 0xE600000000000000;
          }
          else {
            unint64_t v20 = 0xE900000000000044;
          }
          uint64_t v72 = sub_1000C51B8(v19, v20, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2080;
          sub_1000963CC(0, a6);
          id v21 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v23 = v15;
          unint64_t v25 = v24;

          uint64_t v72 = sub_1000C51B8(v22, v25, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 22) = 2080;
          id v26 = [v23 description];
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;

          uint64_t v30 = v27;
          id v15 = v23;
          uint64_t v72 = sub_1000C51B8(v30, v29, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v18, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        Swift::String v52 = self;
        uint64_t v70 = 0;
        unint64_t v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v53._uint64_t countAndFlagsBits = 0xD000000000000029;
        v53._object = (void *)0x80000001007D5720;
        String.append(_:)(v53);
        LOBYTE(v72) = v7;
        _print_unlocked<A, B>(_:_:)();
        v54._object = (void *)0x80000001007D5750;
        v54._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v54);
        sub_1000963CC(0, a6);
        id v55 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._object = (void *)0xE900000000000020;
        v60._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v60);
        id v61 = [v15 description];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v64 = v63;

        v65._uint64_t countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 125;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v52 internalErrorWithDebugDescription:v67];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100917690);
  id v32 = a2;
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    if (v7) {
      uint64_t v36 = 0x44497473696CLL;
    }
    else {
      uint64_t v36 = 0x49746E756F636361;
    }
    if (v7) {
      unint64_t v37 = 0xE600000000000000;
    }
    else {
      unint64_t v37 = 0xE900000000000044;
    }
    uint64_t v72 = sub_1000C51B8(v36, v37, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    id v38 = [v32 description];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t v72 = sub_1000C51B8(v39, v41, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  NSString v42 = self;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v43._object = (void *)0x80000001007D5700;
  String.append(_:)(v43);
  LOBYTE(v72) = v7;
  _print_unlocked<A, B>(_:_:)();
  v44._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v44._object = (void *)0xEC000000203A4449;
  String.append(_:)(v44);
  id v45 = [v32 description];
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  v49._uint64_t countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 125;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 internalErrorWithDebugDescription:v51];

  swift_willThrow();
}

void sub_1004784DC(char a1, void *a2, uint64_t a3)
{
}

void sub_100478504(char a1, void *a2, uint64_t a3)
{
}

void sub_10047852C(char a1, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (*(void *)(a3 + 16))
  {
    id v9 = a2;
    unint64_t v10 = sub_100306FE8((uint64_t)v9);
    if (v11)
    {
      id v12 = *(id *)(*(void *)(a3 + 56) + 16 * v10);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        unint64_t v13 = 0xE900000000000044;
        uint64_t v14 = type metadata accessor for Logger();
        sub_10008E2DC(v14, (uint64_t)qword_100917690);
        id v15 = v12;
        os_log_type_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v17))
        {
          os_log_type_t v70 = v17;
          os_log_t log = v16;
          char v18 = a1;
          uint64_t v19 = 0x49746E756F636361;
          uint64_t v20 = swift_slowAlloc();
          uint64_t v69 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315650;
          uint64_t v74 = v69;
          id v68 = v15;
          switch(v18)
          {
            case 1:
              uint64_t v19 = 0xD000000000000016;
              id v21 = "childListIDsToUndelete";
              goto LABEL_31;
            case 2:
              unint64_t v13 = 0x80000001007C61E0;
              uint64_t v19 = 0xD00000000000001BLL;
              break;
            case 3:
              uint64_t v19 = 0x6341746E65726170;
              unint64_t v13 = 0xEF4449746E756F63;
              break;
            case 4:
              uint64_t v19 = 0x694C746E65726170;
              unint64_t v13 = 0xEC00000044497473;
              break;
            case 5:
              uint64_t v19 = 0xD000000000000015;
              id v21 = "reminderIDsToUndelete";
              goto LABEL_31;
            case 6:
              uint64_t v19 = 0xD000000000000014;
              id v21 = "sectionIDsToUndelete";
LABEL_31:
              unint64_t v13 = (unint64_t)(v21 - 32) | 0x8000000000000000;
              break;
            default:
              break;
          }
          uint64_t v76 = sub_1000C51B8(v19, v13, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          sub_1000963CC(0, a5);
          id v44 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;

          uint64_t v76 = sub_1000C51B8(v45, v47, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 22) = 2080;
          id v15 = v68;
          id v48 = [v68 description];
          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v51 = v50;

          uint64_t v76 = sub_1000C51B8(v49, v51, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v70, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v20, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v18;
        }
        else
        {
        }
        Swift::String v52 = self;
        uint64_t v74 = 0;
        unint64_t v75 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v53._uint64_t countAndFlagsBits = 0xD000000000000029;
        v53._object = (void *)0x80000001007D5720;
        String.append(_:)(v53);
        LOBYTE(v76) = a1;
        _print_unlocked<A, B>(_:_:)();
        v54._uint64_t countAndFlagsBits = 0xD000000000000010;
        v54._object = (void *)0x80000001007D5750;
        String.append(_:)(v54);
        sub_1000963CC(0, a5);
        id v55 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._object = (void *)0xE900000000000020;
        v60._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v60);
        id v61 = [v15 description];
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v64 = v63;

        v65._uint64_t countAndFlagsBits = v62;
        v65._object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 125;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v52 internalErrorWithDebugDescription:v67];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_100917690);
  id v23 = a2;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = 0x49746E756F636361;
    uint64_t v27 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    unint64_t v28 = 0xE900000000000044;
    char v73 = a1;
    uint64_t v74 = (uint64_t)loga;
    switch(a1)
    {
      case 1:
        uint64_t v26 = 0xD000000000000016;
        unint64_t v29 = "childListIDsToUndelete";
        goto LABEL_22;
      case 2:
        unint64_t v28 = 0x80000001007C61E0;
        uint64_t v26 = 0xD00000000000001BLL;
        break;
      case 3:
        uint64_t v26 = 0x6341746E65726170;
        unint64_t v28 = 0xEF4449746E756F63;
        break;
      case 4:
        uint64_t v26 = 0x694C746E65726170;
        unint64_t v28 = 0xEC00000044497473;
        break;
      case 5:
        uint64_t v26 = 0xD000000000000015;
        unint64_t v29 = "reminderIDsToUndelete";
        goto LABEL_22;
      case 6:
        uint64_t v26 = 0xD000000000000014;
        unint64_t v29 = "sectionIDsToUndelete";
LABEL_22:
        unint64_t v28 = (unint64_t)(v29 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v76 = sub_1000C51B8(v26, v28, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    id v30 = [v23 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v76 = sub_1000C51B8(v31, v33, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v73;
  }
  else
  {
  }
  os_log_type_t v34 = self;
  uint64_t v74 = 0;
  unint64_t v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v35._object = (void *)0x80000001007D5700;
  v35._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  LOBYTE(v76) = a1;
  _print_unlocked<A, B>(_:_:)();
  v36._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v36._object = (void *)0xEC000000203A4449;
  String.append(_:)(v36);
  id v37 = [v23 description];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v40 = v39;

  v41._uint64_t countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 125;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v34 internalErrorWithDebugDescription:v43];

  swift_willThrow();
}

void sub_100478ED8(char a1, void *a2, uint64_t a3)
{
}

void sub_100478F00(char a1, void *a2, uint64_t a3)
{
}

void sub_100478F28(char a1, void *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDListSection();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = 0x49746E756F636361;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315650;
          unint64_t v16 = 0xE900000000000044;
          char v66 = a1;
          uint64_t v68 = v64;
          switch(a1)
          {
            case 1:
              uint64_t v14 = 0xD000000000000016;
              os_log_type_t v17 = "childListIDsToUndelete";
              goto LABEL_31;
            case 2:
              unint64_t v16 = 0x80000001007C61E0;
              uint64_t v14 = 0xD00000000000001BLL;
              break;
            case 3:
              uint64_t v14 = 0x6341746E65726170;
              unint64_t v16 = 0xEF4449746E756F63;
              break;
            case 4:
              uint64_t v14 = 0x694C746E65726170;
              unint64_t v16 = 0xEC00000044497473;
              break;
            case 5:
              uint64_t v14 = 0xD000000000000015;
              os_log_type_t v17 = "reminderIDsToUndelete";
              goto LABEL_31;
            case 6:
              uint64_t v14 = 0xD000000000000014;
              os_log_type_t v17 = "sectionIDsToUndelete";
LABEL_31:
              unint64_t v16 = (unint64_t)(v17 - 32) | 0x8000000000000000;
              break;
            default:
              break;
          }
          uint64_t v70 = sub_1000C51B8(v14, v16, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          id v40 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v43 = v42;

          uint64_t v70 = sub_1000C51B8(v41, v43, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2080;
          id v44 = [v11 description];
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;

          uint64_t v70 = sub_1000C51B8(v45, v47, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = v66;
        }
        else
        {
        }
        id v48 = self;
        uint64_t v68 = 0;
        unint64_t v69 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v49._uint64_t countAndFlagsBits = 0xD000000000000029;
        v49._object = (void *)0x80000001007D5720;
        String.append(_:)(v49);
        LOBYTE(v70) = a1;
        _print_unlocked<A, B>(_:_:)();
        v50._uint64_t countAndFlagsBits = 0xD000000000000010;
        v50._object = (void *)0x80000001007D5750;
        String.append(_:)(v50);
        id v51 = [(id)swift_getObjCClassFromMetadata() description];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v54 = v53;

        v55._uint64_t countAndFlagsBits = v52;
        v55._object = v54;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._object = (void *)0xE900000000000020;
        v56._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v56);
        id v57 = [v11 description];
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v60 = v59;

        v61._uint64_t countAndFlagsBits = v58;
        v61._object = v60;
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v62._uint64_t countAndFlagsBits = 125;
        v62._object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        NSString v63 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v48 internalErrorWithDebugDescription:v63];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100917690);
  id v19 = a2;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = 0x49746E756F636361;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    unint64_t v24 = 0xE900000000000044;
    char v67 = a1;
    uint64_t v68 = v65;
    switch(a1)
    {
      case 1:
        uint64_t v22 = 0xD000000000000016;
        os_log_type_t v25 = "childListIDsToUndelete";
        goto LABEL_22;
      case 2:
        unint64_t v24 = 0x80000001007C61E0;
        uint64_t v22 = 0xD00000000000001BLL;
        break;
      case 3:
        uint64_t v22 = 0x6341746E65726170;
        unint64_t v24 = 0xEF4449746E756F63;
        break;
      case 4:
        uint64_t v22 = 0x694C746E65726170;
        unint64_t v24 = 0xEC00000044497473;
        break;
      case 5:
        uint64_t v22 = 0xD000000000000015;
        os_log_type_t v25 = "reminderIDsToUndelete";
        goto LABEL_22;
      case 6:
        uint64_t v22 = 0xD000000000000014;
        os_log_type_t v25 = "sectionIDsToUndelete";
LABEL_22:
        unint64_t v24 = (unint64_t)(v25 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v70 = sub_1000C51B8(v22, v24, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    id v26 = [v19 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v70 = sub_1000C51B8(v27, v29, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v67;
  }
  else
  {
  }
  id v30 = self;
  uint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v31._object = (void *)0x80000001007D5700;
  v31._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v31);
  LOBYTE(v70) = a1;
  _print_unlocked<A, B>(_:_:)();
  v32._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v32._object = (void *)0xEC000000203A4449;
  String.append(_:)(v32);
  id v33 = [v19 description];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v36 = v35;

  v37._uint64_t countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 125;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v30 internalErrorWithDebugDescription:v39];

  swift_willThrow();
}

void sub_1004798A4(char a1, void *a2, uint64_t a3)
{
}

void sub_1004798D4(char a1, void *a2, uint64_t a3)
{
}

void sub_100479904(char a1, void *a2, uint64_t a3)
{
}

void sub_100479934(char a1, void *a2, uint64_t a3)
{
}

void sub_100479964(char a1, void *a2, uint64_t a3)
{
}

void sub_100479994(char a1, void *a2, uint64_t a3)
{
}

void sub_1004799C4(void *a1, uint64_t a2)
{
}

void sub_1004799E4(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    id v4 = a1;
    unint64_t v5 = sub_100306FE8((uint64_t)v4);
    if (v6)
    {
      id v7 = *(id *)(*(void *)(a2 + 56) + 16 * v5);

      self;
      if (!swift_dynamicCastObjCClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10008E2DC(v8, (uint64_t)qword_100917690);
        id v9 = v7;
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.fault.getter();
        id v12 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v13 = swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315650;
          uint64_t v60 = sub_1000C51B8(0x49746E756F636361, 0xE900000000000044, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v13 + 12) = 2080;
          sub_1000963CC(0, &qword_10090ABC0);
          id v14 = [(id)swift_getObjCClassFromMetadata() description];
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v17 = v16;

          uint64_t v60 = sub_1000C51B8(v15, v17, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 22) = 2080;
          id v18 = [v9 description];
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v21 = v20;

          uint64_t v22 = v19;
          id v12 = &selRef_ckServerChangeTokens;
          uint64_t v60 = sub_1000C51B8(v22, v21, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v13, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        unint64_t v42 = self;
        uint64_t v58 = 0;
        unint64_t v59 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v43._uint64_t countAndFlagsBits = 0xD000000000000029;
        v43._object = (void *)0x80000001007D5720;
        String.append(_:)(v43);
        _print_unlocked<A, B>(_:_:)();
        v44._object = (void *)0x80000001007D5750;
        v44._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v44);
        sub_1000963CC(0, &qword_10090ABC0);
        id v45 = [(id)swift_getObjCClassFromMetadata() v12[166]];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v48 = v47;

        v49._uint64_t countAndFlagsBits = v46;
        v49._object = v48;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._object = (void *)0xE900000000000020;
        v50._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v50);
        id v51 = [v9 v12[166]];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v54 = v53;

        v55._uint64_t countAndFlagsBits = v52;
        v55._object = v54;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._uint64_t countAndFlagsBits = 125;
        v56._object = (void *)0xE100000000000000;
        String.append(_:)(v56);
        NSString v57 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v42 internalErrorWithDebugDescription:v57];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E2DC(v23, (uint64_t)qword_100917690);
  id v24 = a1;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v60 = sub_1000C51B8(0x49746E756F636361, 0xE900000000000044, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2080;
    id v28 = [v24 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v31 = v30;

    uint64_t v60 = sub_1000C51B8(v29, v31, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  Swift::String v32 = self;
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v33._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v33._object = (void *)0x80000001007D5700;
  String.append(_:)(v33);
  _print_unlocked<A, B>(_:_:)();
  v34._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v34._object = (void *)0xEC000000203A4449;
  String.append(_:)(v34);
  id v35 = [v24 description];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v38 = v37;

  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 125;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v32 internalErrorWithDebugDescription:v41];

  swift_willThrow();
}

void sub_10047A194(char a1, void *a2, uint64_t a3)
{
}

void sub_10047A1C4(char a1, void *a2, uint64_t a3)
{
}

void sub_10047A1F4(char a1, void *a2, uint64_t a3)
{
}

void sub_10047A224(char a1, void *a2, uint64_t a3)
{
  LODWORD(v4) = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDTemplate();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        id v14 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315650;
          if (v4) {
            uint64_t v16 = 0x44497473696CLL;
          }
          else {
            uint64_t v16 = 0x49746E756F636361;
          }
          if (v4) {
            unint64_t v17 = 0xE600000000000000;
          }
          else {
            unint64_t v17 = 0xE900000000000044;
          }
          uint64_t v66 = sub_1000C51B8(v16, v17, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          id v18 = [(id)swift_getObjCClassFromMetadata() description];
          char v19 = (char)v4;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t type = v13;
          unint64_t v22 = v21;

          uint64_t v66 = sub_1000C51B8(v20, v22, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2080;
          id v4 = [v11 description];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;

          LOBYTE(v4) = v19;
          uint64_t v66 = sub_1000C51B8(v23, v25, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v14 = &selRef_ckServerChangeTokens;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v66) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)();
        v48._object = (void *)0x80000001007D5750;
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v48);
        id v49 = [(id)swift_getObjCClassFromMetadata() v14[166]];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 v14[166]];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_100917690);
  id v27 = a2;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    if (v4) {
      uint64_t v31 = 0x44497473696CLL;
    }
    else {
      uint64_t v31 = 0x49746E756F636361;
    }
    char v63 = (char)v4;
    if (v4) {
      id v4 = (id)0xE600000000000000;
    }
    else {
      id v4 = (id)0xE900000000000044;
    }
    uint64_t v66 = sub_1000C51B8(v31, (unint64_t)v4, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    id v32 = [v27 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v66 = sub_1000C51B8(v33, v35, &v64);
    LOBYTE(v4) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v36 = self;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v37._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v37._object = (void *)0x80000001007D5700;
  String.append(_:)(v37);
  LOBYTE(v66) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v38._object = (void *)0xEC000000203A4449;
  String.append(_:)(v38);
  id v39 = [v27 description];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 125;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  NSString v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 internalErrorWithDebugDescription:v45];

  swift_willThrow();
}

void sub_10047AA20(char a1, void *a2, uint64_t a3)
{
  LODWORD(v4) = a1 & 1;
  if (*(void *)(a3 + 16))
  {
    id v6 = a2;
    unint64_t v7 = sub_100306FE8((uint64_t)v6);
    if (v8)
    {
      id v9 = *(id *)(*(void *)(a3 + 56) + 16 * v7);

      type metadata accessor for REMCDTemplate();
      if (!swift_dynamicCastClass())
      {
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        id v11 = v9;
        id v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.fault.getter();
        id v14 = &selRef_ckServerChangeTokens;
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 136315650;
          if (v4) {
            uint64_t v16 = 0x4449746E65726170;
          }
          else {
            uint64_t v16 = 0x49746E756F636361;
          }
          if (v4) {
            unint64_t v17 = 0xE800000000000000;
          }
          else {
            unint64_t v17 = 0xE900000000000044;
          }
          uint64_t v66 = sub_1000C51B8(v16, v17, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2080;
          id v18 = [(id)swift_getObjCClassFromMetadata() description];
          char v19 = (char)v4;
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t type = v13;
          unint64_t v22 = v21;

          uint64_t v66 = sub_1000C51B8(v20, v22, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 22) = 2080;
          id v4 = [v11 description];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;

          LOBYTE(v4) = v19;
          uint64_t v66 = sub_1000C51B8(v23, v25, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v14 = &selRef_ckServerChangeTokens;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, type, "Mismatching class for relationship {key: %s, expectedType: %s, found: %s}", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v46 = self;
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v47._uint64_t countAndFlagsBits = 0xD000000000000029;
        v47._object = (void *)0x80000001007D5720;
        String.append(_:)(v47);
        LOBYTE(v66) = (_BYTE)v4;
        _print_unlocked<A, B>(_:_:)();
        v48._object = (void *)0x80000001007D5750;
        v48._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v48);
        id v49 = [(id)swift_getObjCClassFromMetadata() v14[166]];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        v54._object = (void *)0xE900000000000020;
        v54._uint64_t countAndFlagsBits = 0x3A646E756F66202CLL;
        String.append(_:)(v54);
        id v55 = [v11 v14[166]];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v58 = v57;

        v59._uint64_t countAndFlagsBits = v56;
        v59._object = v58;
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 125;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        NSString v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v46 internalErrorWithDebugDescription:v61];

        swift_willThrow();
      }
      return;
    }
  }
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_100917690);
  id v27 = a2;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    if (v4) {
      uint64_t v31 = 0x4449746E65726170;
    }
    else {
      uint64_t v31 = 0x49746E756F636361;
    }
    char v63 = (char)v4;
    if (v4) {
      id v4 = (id)0xE800000000000000;
    }
    else {
      id v4 = (id)0xE900000000000044;
    }
    uint64_t v66 = sub_1000C51B8(v31, (unint64_t)v4, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    id v32 = [v27 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v66 = sub_1000C51B8(v33, v35, &v64);
    LOBYTE(v4) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing relationship {key: %s, objectID: %s}", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v36 = self;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v37._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v37._object = (void *)0x80000001007D5700;
  String.append(_:)(v37);
  LOBYTE(v66) = (_BYTE)v4;
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 0x7463656A626F202CLL;
  v38._object = (void *)0xEC000000203A4449;
  String.append(_:)(v38);
  id v39 = [v27 description];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 125;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  NSString v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v36 internalErrorWithDebugDescription:v45];

  swift_willThrow();
}

void sub_10047B224(char a1, void *a2, uint64_t a3)
{
}

void sub_10047B254(char a1, void *a2, uint64_t a3)
{
}

NSString sub_10047B284(void *a1)
{
  NSString v4 = *v1;
  id v51 = 0;
  id v5 = [a1 remObjectIDWithError:&v51];
  if (!v5)
  {
    id v24 = v51;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v4;
  }
  id v6 = v5;
  id v7 = v51;
  id v8 = [a1 account];
  if (!v8
    || (id v9 = v8, v10 = [v8 remObjectID], v9, !v10))
  {
    if (qword_100907608 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_100919428);
    id v10 = v6;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      id v51 = v4;
      uint64_t v52 = v48;
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v21 = String.init<A>(describing:)();
      id v51 = (id)sub_1000C51B8(v21, v22, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      id v51 = v10;
      id v23 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v6;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: cdTemplateSection.account is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v19, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    unint64_t v25 = self;
    type metadata accessor for REMCDTemplateSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v4 = String._bridgeToObjectiveC()();
    [v25 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v4];

    swift_willThrow();
    goto LABEL_14;
  }
  id v11 = [a1 displayName];
  if (!v11)
  {
    if (qword_100907608 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100919428);
    id v29 = v6;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      Swift::String v47 = (void *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      id v51 = v4;
      uint64_t v52 = v49;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v50 = v6;
      uint64_t v33 = String.init<A>(describing:)();
      id v51 = (id)sub_1000C51B8(v33, v34, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2112;
      id v51 = v29;
      unint64_t v35 = v30;
      id v36 = v29;
      id v37 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v47 = v50;

      id v29 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, v31, "%s: cdTemplateSection.displayName is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v32, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    NSString v45 = self;
    type metadata accessor for REMCDTemplateSection();
    uint64_t v46 = swift_getObjCClassFromMetadata();
    NSString v4 = String._bridgeToObjectiveC()();
    [v45 unexpectedNilPropertyWithClass:v46 property:v4];

    swift_willThrow();
LABEL_14:

    return v4;
  }
  id v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v4 = v14;

  id v15 = sub_10047C350(a1, v6, v10, v13);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v38 = v15;
    swift_bridgeObjectRelease();
    id v39 = v38;
    [v39 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];

    id v40 = v39;
    [v40 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];

    [v40 setResolutionTokenMap:0];
    NSString v4 = v40;
    Class isa = (Class)[a1 resolutionTokenMapData];
    if (isa)
    {
      uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v42, v44);
    }
    [v4 setResolutionTokenMapData:isa];
  }
  return v4;
}

uint64_t sub_10047B9E8(uint64_t a1)
{
  return sub_100156B24(a1, qword_100919410, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_10047BA14(uint64_t a1)
{
  return sub_100156B24(a1, qword_100919428, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_10047BA40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F14B4(*a1, *a2);
}

uint64_t sub_10047BA4C()
{
  return sub_1005955E0(*v0);
}

uint64_t sub_10047BA54()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10047BB2C(uint64_t a1)
{
  return sub_1002F1314(a1, *v1);
}

unint64_t sub_10047BB34@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10047C900(*a1);
  *a2 = result;
  return result;
}

void sub_10047BB64(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001007C63B0;
      unint64_t v3 = 0xD000000000000017;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "creationDate");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x4E79616C70736964;
      *(void *)(a1 + 8) = 0xEB00000000656D61;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_10047BC14(void *a1@<X8>)
{
  *a1 = &off_1008B6E88;
}

unint64_t sub_10047BC24@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10047C900(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10047BC4C()
{
  unint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 3:
      unint64_t result = 0x4E79616C70736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10047BCF0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2C08, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10047BD50(void *a1@<X8>)
{
  *a1 = &off_1008B6EB0;
}

uint64_t sub_10047BD60@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2C08, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void *sub_10047BDC4()
{
  uint64_t result = sub_10047BDE4();
  qword_100942258 = (uint64_t)result;
  return result;
}

void *sub_10047BDE4()
{
  unint64_t v5 = 0;
  id v6 = _swiftEmptyDictionarySingleton;
  unint64_t v7 = (unint64_t)&off_1008B5820;
  id v8 = "daIsNotificationsCollection";
  do
  {
    if (v5 >= 4)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v4 = v5 + 1;
    uint64_t v0 = 0xE800000000000000;
    uint64_t v1 = 0x44497463656A626FLL;
    switch(*((unsigned char *)&off_1008B5820 + v5 + 32))
    {
      case 1:
        uint64_t v0 = 0x80000001007C63B0;
        uint64_t v1 = 0xD000000000000017;
        break;
      case 2:
        uint64_t v0 = 0xEC00000065746144;
        uint64_t v1 = 0x6E6F697461657263;
        break;
      case 3:
        uint64_t v0 = 0xEB00000000656D61;
        uint64_t v1 = 0x4E79616C70736964;
        break;
      default:
        break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::String v47 = _swiftEmptyDictionarySingleton;
    unint64_t v3 = sub_1001806F8(v1, v0);
    uint64_t v11 = _swiftEmptyDictionarySingleton[2];
    BOOL v12 = (v10 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      goto LABEL_29;
    }
    LOBYTE(v2) = v10;
    if (_swiftEmptyDictionarySingleton[3] >= v13)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v10) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v2) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v14 = sub_1001806F8(v1, v0);
      if ((v2 & 1) != (v15 & 1)) {
        goto LABEL_48;
      }
      unint64_t v3 = v14;
      if (v2)
      {
LABEL_2:
        uint64_t v2 = _swiftEmptyDictionarySingleton[7] + 16 * v3;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v2 = v1;
        *(void *)(v2 + 8) = v0;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v3 >> 6) + 8] |= 1 << v3;
    uint64_t v16 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v3);
    *uint64_t v16 = v1;
    v16[1] = v0;
    unint64_t v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v3);
    *unint64_t v17 = v1;
    v17[1] = v0;
    uint64_t v18 = _swiftEmptyDictionarySingleton[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_30;
    }
    _swiftEmptyDictionarySingleton[2] = v20;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = v4;
  }
  while (v4 != 4);
  uint64_t v21 = (uint64_t)&off_1008B5000;
  unint64_t v7 = 0x4449746E65726170;
  uint64_t v1 = 0x49746E756F636361;
  uint64_t v0 = 0xE900000000000044;
  uint64_t v4 = 0x746E756F636361;
  id v8 = (const char *)0xE700000000000000;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v47 = _swiftEmptyDictionarySingleton;
  unint64_t v3 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  uint64_t v24 = _swiftEmptyDictionarySingleton[2];
  BOOL v25 = (v23 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  LOBYTE(v2) = v23;
  if (_swiftEmptyDictionarySingleton[3] >= v26)
  {
    if (v22)
    {
      if ((v23 & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_27;
    }
LABEL_31:
    sub_100318A14();
    id v6 = v47;
    if ((v2 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  sub_10030E654(v26, v22);
  unint64_t v27 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  if ((v2 & 1) != (v28 & 1)) {
    goto LABEL_48;
  }
  unint64_t v3 = v27;
  if (v2)
  {
LABEL_27:
    id v29 = (uint64_t *)(v6[7] + 16 * v3);
    swift_bridgeObjectRelease();
    *id v29 = v4;
    v29[1] = (uint64_t)v8;
    goto LABEL_34;
  }
LABEL_32:
  v6[(v3 >> 6) + 8] |= 1 << v3;
  uint64_t v30 = (uint64_t *)(v6[6] + 16 * v3);
  *uint64_t v30 = v1;
  v30[1] = v0;
  os_log_type_t v31 = (uint64_t *)(v6[7] + 16 * v3);
  *os_log_type_t v31 = v4;
  v31[1] = (uint64_t)v8;
  uint64_t v32 = v6[2];
  BOOL v19 = __OFADD__(v32, 1);
  uint64_t v33 = v32 + 1;
  if (v19) {
    goto LABEL_47;
  }
  v6[2] = v33;
  swift_bridgeObjectRetain();
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v7;
  uint64_t v0 = 0xE800000000000000;
  uint64_t v21 = 0x6574616C706D6574;
  unint64_t v7 = 0xE800000000000000;
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v47 = v6;
  unint64_t v3 = sub_1001806F8(v1, 0xE800000000000000);
  uint64_t v36 = v6[2];
  BOOL v37 = (v35 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37)) {
    goto LABEL_42;
  }
  LOBYTE(v2) = v35;
  if (v6[3] >= v38)
  {
    if (v34)
    {
      if ((v35 & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_41;
    }
LABEL_43:
    sub_100318A14();
    id v6 = v47;
    if ((v2 & 1) == 0) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  sub_10030E654(v38, v34);
  unint64_t v39 = sub_1001806F8(v1, 0xE800000000000000);
  if ((v2 & 1) != (v40 & 1)) {
    goto LABEL_48;
  }
  unint64_t v3 = v39;
  if ((v2 & 1) == 0)
  {
LABEL_44:
    v6[(v3 >> 6) + 8] |= 1 << v3;
    uint64_t v42 = (uint64_t *)(v6[6] + 16 * v3);
    *uint64_t v42 = v1;
    v42[1] = v0;
    unint64_t v43 = (uint64_t *)(v6[7] + 16 * v3);
    uint64_t *v43 = v21;
    v43[1] = v7;
    uint64_t v44 = v6[2];
    BOOL v19 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (!v19)
    {
      v6[2] = v45;
      swift_bridgeObjectRetain();
      goto LABEL_46;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x10047C340);
  }
LABEL_41:
  NSString v41 = (uint64_t *)(v6[7] + 16 * v3);
  swift_bridgeObjectRelease();
  *NSString v41 = v21;
  v41[1] = v7;
LABEL_46:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_10047C350(void *a1, id a2, void *a3, uint64_t a4)
{
  uint64_t v44 = a4;
  uint64_t v43 = *v4;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v12 = __chkstk_darwin(v11 - 8).n128_u64[0];
  unint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [a1 template:v12];
  if (v15
    && (uint64_t v16 = v15, v17 = [v15 remObjectID], v16, v17))
  {
    uint64_t v43 = v8;
    id v18 = objc_allocWithZone((Class)REMTemplateSectionStorage);
    id v19 = a2;
    id v20 = a3;
    swift_bridgeObjectRetain();
    id v21 = v17;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v18 initWithObjectID:v19 accountID:v20 parentID:v21 displayName:v22];

    a2 = v23;
    id v24 = [a1 creationDate];
    if (v24)
    {
      BOOL v25 = v24;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = v45;
      uint64_t v27 = v43;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v14, v10, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v27);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v27) == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v14, 1, 1, v43);
      Class isa = 0;
    }
    [a2 setCreationDate:isa];
  }
  else
  {
    if (qword_100907608 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100919428);
    id v30 = a2;
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      char v34 = (void *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = v45;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v47 = v43;
      swift_getMetatypeMetadata();
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v47 = sub_1000C51B8(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2112;
      a2 = (id)(v33 + 14);
      uint64_t v47 = (uint64_t)v30;
      id v37 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: cdTemplateSection.template is nil {cdTemplateSection.remObjectID: %@}", (uint8_t *)v33, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v38 = self;
    type metadata accessor for REMCDTemplateSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v40 = String._bridgeToObjectiveC()();
    [v38 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v40];

    swift_willThrow();
  }
  return a2;
}

uint64_t type metadata accessor for REMTemplateSectionStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10047C8E8()
{
  return &off_1008C6A98;
}

_UNKNOWN **sub_10047C8F4()
{
  return &off_1008C6A68;
}

unint64_t sub_10047C900(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2C58, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

id sub_10047C94C(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    id v6 = &selRef_ckServerChangeTokens;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047EE20(v8, &qword_100907730, &qword_1009422E0, (uint64_t (*)(uint64_t))sub_1004FA360);
        NSString v11 = String._bridgeToObjectiveC()();
        double v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        id v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

unint64_t sub_10047CE04(char a1)
{
  if (qword_100906F68 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100941FE8;
  unint64_t v3 = sub_10015B2D0(a1);
  uint64_t v5 = v4;
  if (*(void *)(v2 + 16))
  {
    uint64_t v6 = v3;
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1001806F8(v6, v5);
    if (v8)
    {
      unint64_t v9 = *(void *)(*(void *)(v2 + 56) + 16 * v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_100917690);
  NSString v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315138;
    unint64_t v14 = sub_10015B2D0(a1);
    sub_1000C51B8(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unint64_t v9 = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
    case 6:
      unint64_t v9 = 0xD000000000000017;
      break;
    case 2:
      unint64_t v9 = 0x72756769666E6F63;
      break;
    case 3:
      unint64_t v9 = 1701667182;
      break;
    case 4:
      unint64_t v9 = 0x726F6C6F63;
      break;
    case 5:
      unint64_t v9 = 0x626D456567646162;
      break;
    case 7:
      unint64_t v9 = 0x53676E6974726F73;
      break;
    case 8:
      unint64_t v9 = 0xD000000000000015;
      break;
    case 9:
      unint64_t v9 = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t v9 = 0xD000000000000019;
      break;
    case 11:
      unint64_t v9 = 0xD000000000000027;
      break;
    default:
      return v9;
  }
  return v9;
}

uint64_t sub_10047D1B0(char a1)
{
  if (qword_100906F68 != -1) {
    swift_once();
  }
  uint64_t v2 = 0x49746E756F636361;
  uint64_t v3 = qword_100941FE8;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x6341746E65726170;
    }
    else {
      uint64_t v4 = 0xD000000000000014;
    }
    if (a1 == 1) {
      uint64_t v5 = 0xEF4449746E756F63;
    }
    else {
      uint64_t v5 = 0x80000001007C6240;
    }
    if (!*(void *)(qword_100941FE8 + 16)) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v4 = 0x49746E756F636361;
    uint64_t v5 = 0xE900000000000044;
    if (!*(void *)(qword_100941FE8 + 16)) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001806F8(v4, v5);
  if (v7)
  {
    uint64_t v2 = *(void *)(*(void *)(v3 + 56) + 16 * v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100917690);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    NSString v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)NSString v11 = 136315138;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v12 = 0x6341746E65726170;
      }
      else {
        uint64_t v12 = 0xD000000000000014;
      }
      if (a1 == 1) {
        unint64_t v13 = 0xEF4449746E756F63;
      }
      else {
        unint64_t v13 = 0x80000001007C6240;
      }
    }
    else
    {
      uint64_t v12 = 0x49746E756F636361;
      unint64_t v13 = 0xE900000000000044;
    }
    sub_1000C51B8(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown ingestable key {key: %s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1)
  {
    if (a1 == 1) {
      return 0x6341746E65726170;
    }
    else {
      return 0xD000000000000014;
    }
  }
  return v2;
}

uint64_t sub_10047D4FC(char a1)
{
  return sub_10047EBAC(a1, &qword_100907610, &qword_100942258);
}

unint64_t sub_10047D520(char a1)
{
  if (qword_100907018 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100942030;
  unint64_t v3 = sub_1001B542C(a1);
  uint64_t v5 = v4;
  if (*(void *)(v2 + 16))
  {
    uint64_t v6 = v3;
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1001806F8(v6, v5);
    if (v8)
    {
      unint64_t v9 = *(void *)(*(void *)(v2 + 56) + 16 * v7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_100917690);
  NSString v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    unint64_t v14 = sub_1001B542C(a1);
    sub_1000C51B8(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unint64_t v9 = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
    case 10:
      unint64_t v9 = 0xD000000000000017;
      break;
    case 2:
      unint64_t v9 = 0x73694C7472616D73;
      break;
    case 3:
      unint64_t v9 = 0x53676E6974726F73;
      break;
    case 4:
      unint64_t v9 = 0x614464656E6E6970;
      break;
    case 5:
      unint64_t v9 = 0x724F6C61756E616DLL;
      break;
    case 6:
      unint64_t v9 = 1701667182;
      break;
    case 7:
      unint64_t v9 = 0x726F6C6F63;
      break;
    case 8:
      unint64_t v9 = 0x626D456567646162;
      break;
    case 9:
      unint64_t v9 = 0x61447265746C6966;
      break;
    case 11:
      unint64_t v9 = 0xD00000000000001CLL;
      break;
    case 12:
      unint64_t v9 = 0xD000000000000019;
      break;
    case 13:
      unint64_t v9 = 0xD000000000000027;
      break;
    default:
      return v9;
  }
  return v9;
}

unint64_t sub_10047D91C(char a1)
{
  if (qword_100907018 != -1) {
    swift_once();
  }
  unint64_t v2 = 0x49746E756F636361;
  uint64_t v3 = qword_100942030;
  uint64_t v4 = 0x49746E756F636361;
  uint64_t v5 = 0xE900000000000044;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0x6341746E65726170;
      uint64_t v5 = 0xEF4449746E756F63;
      if (*(void *)(qword_100942030 + 16)) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 2:
      uint64_t v4 = 0x694C746E65726170;
      uint64_t v5 = 0xEC00000044497473;
      goto LABEL_7;
    case 3:
      uint64_t v5 = 0x80000001007C6240;
      uint64_t v4 = 0xD000000000000014;
      if (!*(void *)(qword_100942030 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_8;
    default:
LABEL_7:
      if (!*(void *)(qword_100942030 + 16)) {
        goto LABEL_12;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      unint64_t v6 = sub_1001806F8(v4, v5);
      if (v7)
      {
        unint64_t v2 = *(void *)(*(void *)(v3 + 56) + 16 * v6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_12:
        swift_bridgeObjectRelease();
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10008E2DC(v8, (uint64_t)qword_100917690);
        unint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          NSString v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          *(_DWORD *)NSString v11 = 136315138;
          unint64_t v12 = 0xE900000000000044;
          uint64_t v13 = 0x49746E756F636361;
          switch(a1)
          {
            case 1:
              uint64_t v13 = 0x6341746E65726170;
              unint64_t v12 = 0xEF4449746E756F63;
              break;
            case 2:
              uint64_t v13 = 0x694C746E65726170;
              unint64_t v12 = 0xEC00000044497473;
              break;
            case 3:
              unint64_t v12 = 0x80000001007C6240;
              uint64_t v13 = 0xD000000000000014;
              break;
            default:
              break;
          }
          sub_1000C51B8(v13, v12, &v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown ingestable key {key: %s}", v11, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        switch(a1)
        {
          case 0:
            return v2;
          case 1:
            unint64_t v2 = 0x6341746E65726170;
            break;
          case 2:
            unint64_t v2 = 0x694C746E65726170;
            break;
          case 3:
            unint64_t v2 = 0xD000000000000014;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return v2;
  }
}

uint64_t sub_10047DD38(char a1)
{
  return sub_10047EBAC(a1, &qword_1009076F0, &qword_1009422D8);
}

uint64_t sub_10047DD5C(uint64_t a1)
{
  return sub_10047EE20(a1, &qword_1009071C8, &qword_1009420D0, (uint64_t (*)(uint64_t))sub_10024776C);
}

unint64_t sub_10047DD94(char a1)
{
  if (qword_1009071C8 != -1) {
    swift_once();
  }
  unint64_t v2 = 0x49746E756F636361;
  uint64_t v3 = qword_1009420D0;
  uint64_t v4 = 0x49746E756F636361;
  unint64_t v5 = 0xE900000000000044;
  switch(a1)
  {
    case 1:
      unint64_t v5 = 0xE600000000000000;
      uint64_t v4 = 0x44497473696CLL;
      if (*(void *)(qword_1009420D0 + 16)) {
        goto LABEL_11;
      }
      goto LABEL_16;
    case 2:
      uint64_t v4 = 0xD000000000000010;
      unint64_t v6 = "parentReminderID";
      goto LABEL_15;
    case 3:
      char v7 = "subtaskIDsToUndelete";
      goto LABEL_9;
    case 4:
      char v7 = "hashtagIDsToUndelete";
LABEL_9:
      unint64_t v5 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      uint64_t v4 = 0xD000000000000014;
      goto LABEL_10;
    case 5:
      uint64_t v4 = 0xD00000000000001FLL;
      unint64_t v6 = "siriFoundInAppsUserConfirmation";
LABEL_15:
      unint64_t v5 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      if (!*(void *)(qword_1009420D0 + 16)) {
        goto LABEL_16;
      }
      goto LABEL_11;
    default:
LABEL_10:
      if (!*(void *)(qword_1009420D0 + 16)) {
        goto LABEL_16;
      }
LABEL_11:
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_1001806F8(v4, v5);
      if (v9)
      {
        unint64_t v2 = *(void *)(*(void *)(v3 + 56) + 16 * v8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRelease();
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10008E2DC(v10, (uint64_t)qword_100917690);
        NSString v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          uint64_t v19 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315138;
          unint64_t v14 = 0xE900000000000044;
          uint64_t v15 = 0x49746E756F636361;
          switch(a1)
          {
            case 1:
              unint64_t v14 = 0xE600000000000000;
              uint64_t v15 = 0x44497473696CLL;
              break;
            case 2:
              uint64_t v15 = 0xD000000000000010;
              uint64_t v16 = "parentReminderID";
              goto LABEL_26;
            case 3:
              uint64_t v17 = "subtaskIDsToUndelete";
              goto LABEL_24;
            case 4:
              uint64_t v17 = "hashtagIDsToUndelete";
LABEL_24:
              unint64_t v14 = (unint64_t)(v17 - 32) | 0x8000000000000000;
              uint64_t v15 = 0xD000000000000014;
              break;
            case 5:
              uint64_t v15 = 0xD00000000000001FLL;
              uint64_t v16 = "siriFoundInAppsUserConfirmation";
LABEL_26:
              unint64_t v14 = (unint64_t)(v16 - 32) | 0x8000000000000000;
              break;
            default:
              break;
          }
          sub_1000C51B8(v15, v14, &v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        switch(a1)
        {
          case 0:
            return v2;
          case 1:
            unint64_t v2 = 0x44497473696CLL;
            break;
          case 2:
            unint64_t v2 = 0xD000000000000010;
            break;
          case 3:
          case 4:
            unint64_t v2 = 0xD000000000000014;
            break;
          case 5:
            unint64_t v2 = 0xD00000000000001FLL;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return v2;
  }
}

uint64_t sub_10047E1DC(uint64_t a1)
{
  return sub_10047EE20(a1, &qword_100907218, &qword_1009420F0, (uint64_t (*)(uint64_t))sub_10028826C);
}

unint64_t sub_10047E214(char a1)
{
  if (qword_100907A18 != -1) {
    swift_once();
  }
  unint64_t v2 = 0x49746E756F636361;
  uint64_t v3 = qword_1009425D8;
  uint64_t v4 = 0x49746E756F636361;
  unint64_t v5 = 0xE900000000000044;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0xD000000000000016;
      unint64_t v6 = "childListIDsToUndelete";
      goto LABEL_11;
    case 2:
      uint64_t v4 = 0xD00000000000001BLL;
      unint64_t v6 = "childSmartListIDsToUndelete";
      goto LABEL_11;
    case 3:
      uint64_t v4 = 0x6341746E65726170;
      unint64_t v5 = 0xEF4449746E756F63;
      if (!*(void *)(qword_1009425D8 + 16)) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 4:
      uint64_t v4 = 0x694C746E65726170;
      unint64_t v5 = 0xEC00000044497473;
      if (!*(void *)(qword_1009425D8 + 16)) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 5:
      uint64_t v4 = 0xD000000000000015;
      unint64_t v6 = "reminderIDsToUndelete";
LABEL_11:
      unint64_t v5 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      goto LABEL_12;
    case 6:
      unint64_t v5 = 0x80000001007C6240;
      uint64_t v4 = 0xD000000000000014;
      if (!*(void *)(qword_1009425D8 + 16)) {
        goto LABEL_17;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (!*(void *)(qword_1009425D8 + 16)) {
        goto LABEL_17;
      }
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v7 = sub_1001806F8(v4, v5);
      if (v8)
      {
        unint64_t v2 = *(void *)(*(void *)(v3 + 56) + 16 * v7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_17:
        swift_bridgeObjectRelease();
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_10008E2DC(v9, (uint64_t)qword_100917690);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v17 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v12 = 136315138;
          unint64_t v13 = 0xE900000000000044;
          uint64_t v14 = 0x49746E756F636361;
          switch(a1)
          {
            case 1:
              uint64_t v14 = 0xD000000000000016;
              uint64_t v15 = "childListIDsToUndelete";
              goto LABEL_26;
            case 2:
              uint64_t v14 = 0xD00000000000001BLL;
              uint64_t v15 = "childSmartListIDsToUndelete";
              goto LABEL_26;
            case 3:
              uint64_t v14 = 0x6341746E65726170;
              unint64_t v13 = 0xEF4449746E756F63;
              break;
            case 4:
              uint64_t v14 = 0x694C746E65726170;
              unint64_t v13 = 0xEC00000044497473;
              break;
            case 5:
              uint64_t v14 = 0xD000000000000015;
              uint64_t v15 = "reminderIDsToUndelete";
LABEL_26:
              unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
              break;
            case 6:
              unint64_t v13 = 0x80000001007C6240;
              uint64_t v14 = 0xD000000000000014;
              break;
            default:
              break;
          }
          sub_1000C51B8(v14, v13, &v17);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unknown ingestable key {key: %s}", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        switch(a1)
        {
          case 0:
            return v2;
          case 1:
            unint64_t v2 = 0xD000000000000016;
            break;
          case 2:
            unint64_t v2 = 0xD00000000000001BLL;
            break;
          case 3:
            unint64_t v2 = 0x6341746E65726170;
            break;
          case 4:
            unint64_t v2 = 0x694C746E65726170;
            break;
          case 5:
            unint64_t v2 = 0xD000000000000015;
            break;
          case 6:
            unint64_t v2 = 0xD000000000000014;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return v2;
  }
}

unint64_t sub_10047E70C(char a1)
{
  if (qword_100907328 != -1) {
    swift_once();
  }
  unint64_t v2 = 0x44497463656A626FLL;
  uint64_t v3 = qword_100942118;
  uint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0x80000001007C63B0;
      uint64_t v5 = 0xD000000000000017;
      if (*(void *)(qword_100942118 + 16)) {
        goto LABEL_10;
      }
      goto LABEL_14;
    case 2:
      uint64_t v5 = 0x6E6F697461657263;
      uint64_t v4 = 0xEC00000065746144;
      if (!*(void *)(qword_100942118 + 16)) {
        goto LABEL_14;
      }
      goto LABEL_10;
    case 3:
      uint64_t v5 = 0x4E79616C70736964;
      uint64_t v4 = 0xEB00000000656D61;
      goto LABEL_9;
    case 4:
      uint64_t v5 = 0x6163696E6F6E6163;
      uint64_t v4 = 0xED0000656D614E6CLL;
      if (!*(void *)(qword_100942118 + 16)) {
        goto LABEL_14;
      }
      goto LABEL_10;
    default:
LABEL_9:
      if (!*(void *)(qword_100942118 + 16)) {
        goto LABEL_14;
      }
LABEL_10:
      swift_bridgeObjectRetain();
      unint64_t v6 = sub_1001806F8(v5, v4);
      if (v7)
      {
        unint64_t v2 = *(void *)(*(void *)(v3 + 56) + 16 * v6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10008E2DC(v8, (uint64_t)qword_100917690);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v11 = 136315138;
          unint64_t v12 = 0xE800000000000000;
          uint64_t v13 = 0x44497463656A626FLL;
          switch(a1)
          {
            case 1:
              unint64_t v12 = 0x80000001007C63B0;
              uint64_t v13 = 0xD000000000000017;
              break;
            case 2:
              uint64_t v13 = 0x6E6F697461657263;
              unint64_t v12 = 0xEC00000065746144;
              break;
            case 3:
              uint64_t v13 = 0x4E79616C70736964;
              unint64_t v12 = 0xEB00000000656D61;
              break;
            case 4:
              uint64_t v13 = 0x6163696E6F6E6163;
              unint64_t v12 = 0xED0000656D614E6CLL;
              break;
            default:
              break;
          }
          sub_1000C51B8(v13, v12, &v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown ingestable key {key: %s}", v11, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        switch(a1)
        {
          case 0:
            return v2;
          case 1:
            unint64_t v2 = 0xD000000000000017;
            break;
          case 2:
            unint64_t v2 = 0x6E6F697461657263;
            break;
          case 3:
            unint64_t v2 = 0x4E79616C70736964;
            break;
          case 4:
            unint64_t v2 = 0x6163696E6F6E6163;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return v2;
  }
}

uint64_t sub_10047EB88(char a1)
{
  return sub_10047EBAC(a1, &qword_100907328, &qword_100942118);
}

uint64_t sub_10047EBAC(char a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v5 = *a3;
  if (a1) {
    uint64_t v6 = 0x4449746E65726170;
  }
  else {
    uint64_t v6 = 0x49746E756F636361;
  }
  if (a1) {
    unint64_t v7 = 0xE800000000000000;
  }
  else {
    unint64_t v7 = 0xE900000000000044;
  }
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1001806F8(v6, v7);
    if (v9)
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 16 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_100917690);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1000C51B8(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown ingestable key {key: %s}", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v6;
}

uint64_t sub_10047EDE8(uint64_t a1)
{
  return sub_10047EE20(a1, &qword_100907A18, &qword_1009425D8, (uint64_t (*)(uint64_t))sub_1005D91F8);
}

uint64_t sub_10047EE20(uint64_t a1, void *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v7 = *a3;
  uint64_t v8 = a4(a1);
  uint64_t v10 = v9;
  if (*(void *)(v7 + 16))
  {
    uint64_t v11 = v8;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1001806F8(v11, v10);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v7 + 56) + 16 * v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100917690);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    uint64_t v19 = a4(a1);
    sub_1000C51B8(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unknown ingestable key {key: %s}", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return a4(a1);
}

unint64_t sub_10047F060(char a1)
{
  return sub_10047F084(a1, &qword_1009076F0, &qword_1009422D8);
}

unint64_t sub_10047F084(char a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  unint64_t v5 = 0x44497463656A626FLL;
  uint64_t v6 = *a3;
  uint64_t v7 = 0xE800000000000000;
  uint64_t v8 = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      uint64_t v7 = 0x80000001007C63B0;
      uint64_t v8 = 0xD000000000000017;
      if (*(void *)(v6 + 16)) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 2:
      uint64_t v8 = 0x6E6F697461657263;
      uint64_t v7 = 0xEC00000065746144;
      goto LABEL_7;
    case 3:
      uint64_t v8 = 0x4E79616C70736964;
      uint64_t v7 = 0xEB00000000656D61;
      if (!*(void *)(v6 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_8;
    default:
LABEL_7:
      if (!*(void *)(v6 + 16)) {
        goto LABEL_12;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1001806F8(v8, v7);
      if (v10)
      {
        unint64_t v5 = *(void *)(*(void *)(v6 + 56) + 16 * v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_12:
        swift_bridgeObjectRelease();
        if (qword_1009074C8 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_10008E2DC(v11, (uint64_t)qword_100917690);
        unint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          unint64_t v15 = 0xE800000000000000;
          uint64_t v16 = 0x44497463656A626FLL;
          switch(a1)
          {
            case 1:
              unint64_t v15 = 0x80000001007C63B0;
              uint64_t v16 = 0xD000000000000017;
              break;
            case 2:
              uint64_t v16 = 0x6E6F697461657263;
              unint64_t v15 = 0xEC00000065746144;
              break;
            case 3:
              uint64_t v16 = 0x4E79616C70736964;
              unint64_t v15 = 0xEB00000000656D61;
              break;
            default:
              break;
          }
          sub_1000C51B8(v16, v15, &v18);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unknown ingestable key {key: %s}", v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        switch(a1)
        {
          case 0:
            return v5;
          case 1:
            unint64_t v5 = 0xD000000000000017;
            break;
          case 2:
            unint64_t v5 = 0x6E6F697461657263;
            break;
          case 3:
            unint64_t v5 = 0x4E79616C70736964;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return v5;
  }
}

uint64_t sub_10047F46C(char a1)
{
  if (qword_100907730 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1009422E0;
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 0x44497473696CLL;
  }
  else {
    uint64_t v4 = 0x49746E756F636361;
  }
  if (v3) {
    unint64_t v5 = 0xE900000000000044;
  }
  else {
    unint64_t v5 = 0xE600000000000000;
  }
  if (*(void *)(qword_1009422E0 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1001806F8(v4, v5);
    if (v7)
    {
      uint64_t v4 = *(void *)(*(void *)(v2 + 56) + 16 * v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1009074C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100917690);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_1000C51B8(v4, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unknown ingestable key {key: %s}", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v4;
}

id sub_10047F6B8(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    unint64_t v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047CE04(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        unint64_t v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        unint64_t v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_10047F9F4(void *a1, uint64_t a2)
{
  id v16 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = &selRef_ckServerChangeTokens;
    do
    {
      char v7 = *(unsigned char *)(a2 + v4++ + 32);
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v9 = [a1 v5[341]:v8];

      if (v9)
      {
        sub_10047D1B0(v7);
        NSString v10 = String._bridgeToObjectiveC()();
        NSString v11 = v5;
        id v12 = [v16 v5[341] v10];

        if (!v12 || (id v13 = [v12 compare:v9], v12, v13 == (id)-1))
        {
          NSString v6 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v16 setToken:v9 forKey:v6];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v5 = v11;
      }
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  return v16;
}

id sub_10047FBE8(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    NSString v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047D520(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        NSString v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_10047FF6C(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    NSString v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341] v9];

      if (v10)
      {
        sub_10047D91C(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        NSString v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_1004801A8(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    NSString v6 = &selRef_ckServerChangeTokens;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + v5 + 32);
      sub_10024776C(*(unsigned char *)(a2 + v5 + 32));
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047EE20(v8, &qword_1009071C8, &qword_1009420D0, (uint64_t (*)(uint64_t))sub_10024776C);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        NSString v6 = v12;
      }
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_100480370(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    NSString v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047DD94(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        NSString v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_1004805E4(void *a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + v6++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 getTokenForKey:v9];

      if (v10)
      {
        sub_10047EE20(v8, &qword_100907218, &qword_1009420F0, (uint64_t (*)(uint64_t))sub_10028826C);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = [v4 getTokenForKey:v11];

        if (!v12 || (id v13 = [v12 compare:v10], v12, v13 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v4 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
  return v4;
}

id sub_100480A70(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341] v9];

      if (v10)
      {
        sub_10047E70C(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_100480CCC(void *a1, uint64_t a2)
{
  return sub_100481598(a1, a2, &qword_100907328, &qword_100942118);
}

id sub_100480CF0(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = &selRef_ckServerChangeTokens;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + v5 + 32);
      sub_1005D91F8(*(unsigned char *)(a2 + v5 + 32));
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047EE20(v8, &qword_100907A18, &qword_1009425D8, (uint64_t (*)(uint64_t))sub_1005D91F8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341] v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v6 = v12;
      }
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_100480EB8(void *a1, uint64_t a2)
{
  return sub_100480EDC(a1, a2, &qword_1009076F0, &qword_1009422D8);
}

id sub_100480EDC(void *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  id v5 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = &selRef_ckServerChangeTokens;
    do
    {
      char v10 = *(unsigned char *)(a2 + v7++ + 32);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [a1 v8[341]:v11];

      if (v12)
      {
        sub_10047F084(v10, a3, a4);
        NSString v13 = String._bridgeToObjectiveC()();
        id v14 = v8;
        id v15 = [v5 v8[341] v13];

        if (!v15 || (id v16 = [v15 compare:v12], v15, v16 == (id)-1))
        {
          NSString v9 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v5 setToken:v12 forKey:v9];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v8 = v14;
      }
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
  }
  return v5;
}

id sub_100481120(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5++ + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047E214(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v6 = v12;
      }
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_1004813D8(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = &selRef_ckServerChangeTokens;
    do
    {
      char v8 = *(unsigned char *)(a2 + v5 + 32);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = [a1 v6[341]:v9];

      if (v10)
      {
        sub_10047F46C(v8);
        NSString v11 = String._bridgeToObjectiveC()();
        id v12 = v6;
        id v13 = [v3 v6[341]:v11];

        if (!v13 || (id v14 = [v13 compare:v10], v13, v14 == (id)-1))
        {
          NSString v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v3 setToken:v10 forKey:v7];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        uint64_t v6 = v12;
      }
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  return v3;
}

id sub_100481598(void *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  id v5 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    char v8 = &selRef_ckServerChangeTokens;
    do
    {
      char v10 = *(unsigned char *)(a2 + v7 + 32);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [a1 v8[341]:v11];

      if (v12)
      {
        sub_10047EBAC(v10, a3, a4);
        NSString v13 = String._bridgeToObjectiveC()();
        id v14 = v8;
        id v15 = [v5 v8[341]:v13];

        if (!v15 || (id v16 = [v15 compare:v12], v15, v16 == (id)-1))
        {
          NSString v9 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v5 setToken:v12 forKey:v9];
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        char v8 = v14;
      }
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
  }
  return v5;
}

id sub_10048176C(void *a1, uint64_t a2)
{
  return sub_100481598(a1, a2, &qword_1009076F0, &qword_1009422D8);
}

void sub_100481790(void *a1, void *a2, uint64_t a3)
{
  char v8 = (void *)*v3;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v78 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)&double v16 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v74 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v81 = [a2 createResolutionTokenMapIfNecessary:v16];
  id v18 = [a1 resolutionTokenMap];
  if (v18)
  {
    unint64_t v77 = v9;
    uint64_t v71 = v4;
    uint64_t v19 = v18;
    id v20 = sub_100480EDC(v18, a3, &qword_100907610, &qword_100942258);
    uint64_t v21 = *(void *)(a3 + 16);
    if (v21)
    {
      unint64_t v75 = (uint64_t *)(v10 + 56);
      uint64_t v72 = (unsigned int (**)(char *, uint64_t, NSObject *))(v10 + 48);
      char v73 = (void (**)(char *, char *, NSObject *))(v10 + 32);
      id v69 = v19;
      uint64_t v70 = (void (**)(char *, NSObject *))(v10 + 8);
      id v79 = (void (**)(char *, uint64_t))(v15 + 8);
      id v80 = v20;
      swift_bridgeObjectRetain();
      uint64_t v22 = 0;
      id v23 = v74;
      do
      {
        uint64_t v27 = *(unsigned __int8 *)(a3 + v22++ + 32);
        switch(v27)
        {
          case 1:
            sub_10047F084(1, &qword_100907610, &qword_100942258);
            NSString v28 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v29 = [v81 mergeWithMap:v80 forKey:v28];

            if (v29) {
              [a2 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
            }
            break;
          case 2:
            sub_10047F084(2, &qword_100907610, &qword_100942258);
            NSString v30 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v31 = [v81 mergeWithMap:v80 forKey:v30];

            if (v31)
            {
              v26.super.Class isa = (Class)[a1 creationDate];
              if (v26.super.isa)
              {
                os_log_type_t v32 = v76;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v33 = v78;
                char v34 = v32;
                uint64_t v35 = v77;
                (*v73)(v78, v34, v77);
                ((void (*)(char *, void, uint64_t, NSObject *))*v75)(v33, 0, 1, v35);
                if ((*v72)(v33, 1, v35) == 1)
                {
                  v26.super.Class isa = 0;
                }
                else
                {
                  uint64_t v38 = v14;
                  uint64_t v39 = a3;
                  NSString v40 = a2;
                  NSString v41 = a1;
                  uint64_t v42 = v33;
                  v26.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
                  uint64_t v43 = v42;
                  a1 = v41;
                  a2 = v40;
                  a3 = v39;
                  uint64_t v14 = v38;
                  id v23 = v74;
                  (*v70)(v43, v35);
                }
              }
              else
              {
                ((void (*)(char *, uint64_t, uint64_t, NSObject *))*v75)(v78, 1, 1, v77);
              }
              [a2 setCreationDate:v26.super.isa];
              goto LABEL_5;
            }
            break;
          case 3:
            sub_10047F084(3, &qword_100907610, &qword_100942258);
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v37 = [v81 mergeWithMap:v80 forKey:v36];

            if (v37)
            {
              v26.super.Class isa = (Class)[a1 displayName];
              if (!v26.super.isa)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                v26.super.Class isa = (Class)String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              [a2 setDisplayName:v26.super.isa];
              goto LABEL_5;
            }
            break;
          default:
            id v24 = [a1 objectID];
            id v25 = [v24 uuid];

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            v26.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
            (*v79)(v23, v14);
            [a2 setIdentifier:v26.super.isa];
LABEL_5:

            break;
        }
      }
      while (v21 != v22);

      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::String v62 = v20;
    }
  }
  else
  {
    if (qword_100907600 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_10008E2DC(v44, (uint64_t)qword_100919410);
    swift_bridgeObjectRetain_n();
    id v45 = a1;
    uint64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      LODWORD(v79) = v47;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = (char *)swift_slowAlloc();
      id v80 = (id)swift_slowAlloc();
      id v82 = v80;
      *(_DWORD *)uint64_t v48 = 136315650;
      uint64_t v83 = v8;
      swift_getMetatypeMetadata();
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v83 = (void *)sub_1000C51B8(v50, v51, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2114;
      uint64_t v52 = [v45 objectID];
      uint64_t v83 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v78 = v49;
      *(void *)uint64_t v49 = v52;

      *(_WORD *)(v48 + 22) = 2082;
      int64_t v53 = *(void *)(a3 + 16);
      if (v53)
      {
        unint64_t v75 = &v84;
        uint64_t v76 = (char *)v48;
        unint64_t v77 = v46;
        uint64_t v83 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v53, 0);
        Swift::String v54 = v83;
        id v55 = (unsigned __int8 *)(a3 + 32);
        do
        {
          int v56 = *v55++;
          unint64_t v57 = 0xE800000000000000;
          unint64_t v58 = 0x44497463656A626FLL;
          switch(v56)
          {
            case 1:
              unint64_t v58 = 0xD000000000000017;
              unint64_t v57 = 0x80000001007C63B0;
              break;
            case 2:
              unint64_t v57 = 0xEC00000065746144;
              unint64_t v58 = 0x6E6F697461657263;
              break;
            case 3:
              unint64_t v57 = 0xEB00000000656D61;
              unint64_t v58 = 0x4E79616C70736964;
              break;
            default:
              break;
          }
          uint64_t v83 = v54;
          unint64_t v60 = v54[2];
          unint64_t v59 = v54[3];
          if (v60 >= v59 >> 1)
          {
            sub_1001DE058(v59 > 1, v60 + 1, 1);
            Swift::String v54 = v83;
          }
          _OWORD v54[2] = v60 + 1;
          NSString v61 = &v54[2 * v60];
          v61[4] = v58;
          v61[5] = v57;
          --v53;
        }
        while (v53);
        uint64_t v48 = (uint64_t)v76;
        uint64_t v46 = v77;
      }
      uint64_t v63 = Array.description.getter();
      unint64_t v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v83 = (void *)sub_1000C51B8(v63, v65, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v79, "%s: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v48, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v66 = self;
    sub_1000963CC(0, &qword_100913418);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v68 = String._bridgeToObjectiveC()();
    [v66 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v68];

    swift_willThrow();
  }
}

void sub_1004821F0(id a1, id a2, char a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v11 = *v4;
    id v12 = [a2 createResolutionTokenMapIfNecessary];
    id v13 = [a1 resolutionTokenMap];
    unint64_t v75 = v12;
    if (v13)
    {
      uint64_t v14 = v13;
      sub_100094134(&qword_100913C60);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(unsigned char *)(inited + 32) = 1;
      id v16 = sub_100481598(v14, inited, &qword_100907610, &qword_100942258);
      swift_setDeallocating();
      id v17 = [a1 parentTemplateID];
      sub_10047EBAC(1, &qword_100907610, &qword_100942258);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v19 = [v12 mergeWithMap:v16 forKey:v18];

      if (v19)
      {
        os_log_type_t type = v14;
        if (v17)
        {
          id v20 = v16;
          id v21 = v17;
          sub_10047AA20(1, v21, a4);
          if (v5)
          {

            return;
          }
          uint64_t v52 = v22;

          id v16 = v20;
        }
        else
        {
          uint64_t v52 = 0;
        }
        if (qword_100907600 != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        sub_10008E2DC(v53, (uint64_t)qword_100919410);
        Swift::String v54 = v52;
        id v55 = v52;
        id v56 = a2;
        id v57 = v55;
        id v58 = v56;
        unint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v70 = v59;
          id v71 = v16;
          uint64_t v61 = swift_slowAlloc();
          uint64_t v77 = swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 136446466;
          id v62 = [v58 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v63 = Optional.descriptionOrNil.getter();
          unint64_t v65 = v64;

          id v76 = (id)sub_1000C51B8(v63, v65, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v61 + 12) = 2082;
          if (v54)
          {
            id v76 = [v57 remObjectID];
            uint64_t v66 = Optional.descriptionOrNil.getter();
            unint64_t v68 = v67;
          }
          else
          {
            unint64_t v68 = 0xED00003E6574616CLL;
            uint64_t v66 = 0x706D6574206F6E3CLL;
          }
          id v69 = v75;
          id v76 = (id)sub_1000C51B8(v66, v68, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v60, "Updating cdTemplateSection.template {cdTemplateSection: %{public}s, template: %{public}s}", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v16 = v71;
        }
        else
        {

          id v69 = v75;
        }
        [v58 setTemplate:v57];
      }
      else
      {
      }
    }
    else
    {
      if (qword_100907600 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_10008E2DC(v40, (uint64_t)qword_100919410);
      id v41 = a1;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        id v45 = (void *)swift_slowAlloc();
        id v76 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315650;
        uint64_t v77 = v11;
        swift_getMetatypeMetadata();
        uint64_t v46 = String.init<A>(describing:)();
        uint64_t v77 = sub_1000C51B8(v46, v47, (uint64_t *)&v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2114;
        id v48 = [v41 objectID];
        uint64_t v77 = (uint64_t)v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v45 = v48;

        *(_WORD *)(v44 + 22) = 2082;
        uint64_t v77 = sub_1000C51B8(0x4449746E65726170, 0xE800000000000000, (uint64_t *)&v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s: establishRelationship(onStorage:into cdTemplateSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v44, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v49 = self;
      sub_1000963CC(0, &qword_100913418);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v51 = String._bridgeToObjectiveC()();
      [v49 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v51];

      swift_willThrow();
    }
  }
  else
  {
    id v9 = [a1 accountID];
    sub_1004773CC(0, v9, a4, (uint64_t)&type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey, (uint64_t)off_1008AA3D8, &qword_10090ABC0);
    if (v5)
    {
    }
    else
    {
      id v23 = v10;
      if (qword_100907600 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10008E2DC(v24, (uint64_t)qword_100919410);
      id v25 = a2;
      id v26 = v23;
      id v27 = v25;
      id v28 = v26;
      unsigned int v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136446466;
        id v32 = [v27 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        os_log_t log = v29;
        uint64_t v33 = Optional.descriptionOrNil.getter();
        os_log_type_t typea = v30;
        unint64_t v35 = v34;

        sub_1000C51B8(v33, v35, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        id v36 = [v28 remObjectID];
        uint64_t v37 = Optional.descriptionOrNil.getter();
        unint64_t v39 = v38;

        id v76 = (id)sub_1000C51B8(v37, v39, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, typea, "Updating cdTemplateSection.account {cdTemplateSection: %{public}s, account: %{public}s}", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v27 setAccount:v28];
    }
  }
}

unsigned char *storeEnumTagSinglePayload for REMTemplateSectionStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100482D04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMTemplateSectionStorageCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMTemplateSectionStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100482E08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMTemplateSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_100482E40()
{
  return sub_1000B2138(&qword_1009195E0, &qword_1009195E8);
}

unint64_t sub_100482E6C()
{
  unint64_t result = qword_1009195F0;
  if (!qword_1009195F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009195F0);
  }
  return result;
}

uint64_t sub_100482EC0()
{
  return sub_1000B2138(&qword_1009195F8, &qword_100919600);
}

unint64_t sub_100482EEC()
{
  unint64_t result = qword_100919608;
  if (!qword_100919608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919608);
  }
  return result;
}

uint64_t sub_100482F40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919610);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919610);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100483008(void *a1)
{
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
  uint64_t v44 = a1;
  id v12 = [a1 storeController];
  if (v12)
  {
    id v13 = v12;
    id v14 = [v12 inMemoryPrimaryActiveCKAccountREMObjectID];
    if (v14)
    {
      uint64_t v40 = v6;
      id v41 = v1;
      id v42 = v11;
      uint64_t v43 = v2;
      uint64_t v15 = v14;
      id v16 = [v14 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v18 = [v13 storeForAccountIdentifier:v17];

      if (v18)
      {
        id v39 = v15;
        sub_100094134(&qword_100916938);
        uint64_t v20 = (uint64_t)v40;
        id v19 = v41;
        id v21 = [v41 fromDate];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v22 = [v19 toDate];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        swift_storeEnumTagMultiPayload();
        id v23 = (void *)sub_10038F1F0();
        sub_1000963CC(0, (unint64_t *)&qword_10090B040);
        id v24 = [objc_allocWithZone((Class)NSFetchRequest) init];
        id v25 = [(id)swift_getObjCClassFromMetadata() entity];
        [v24 setEntity:v25];

        [v24 setAffectedStores:0];
        [v24 setPredicate:v23];

        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_10077A530;
        *(void *)(v26 + 32) = v18;
        uint64_t v45 = v26;
        specialized Array._endMutation()();
        sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
        id v27 = v18;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v24 setAffectedStores:isa];

        uint64_t v29 = v43;
        uint64_t v30 = NSManagedObjectContext.count<A>(for:)();
        if (v29)
        {
          sub_1000C6DAC(v20);
          id v11 = v42;
        }
        else
        {
          id v36 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v30];
          id v37 = REMAppStoreCreatedOrCompletedRemindersLastMonthCountFetchResultKey;
          id v38 = v42;
          [v42 storeProperty:v36 forKey:v37];

          id v11 = v38;
          sub_1000C6DAC(v20);
        }
        return v11;
      }

      id v11 = v42;
    }
    else
    {
    }
  }
  if (qword_100907618 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_10008E2DC(v31, (uint64_t)qword_100919610);
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "REMAppStoreDataViewInvocation: No primary CloudKit account signed in. Returning no results", v34, 2u);
    swift_slowDealloc();
  }

  return v11;
}

id sub_10048354C(void *a1)
{
  return sub_100483008(a1);
}

id sub_100483570()
{
  return sub_100483588();
}

id sub_100483588()
{
  id v0 = [self sharedConfiguration];
  id v1 = [v0 appStoreReviewCreatedOrCompletedRemindersCountThreshold];
  id v2 = [v0 appStoreReviewNumberOfForegroundsThreshold];
  [v0 appStoreReviewTimeIntervalOfInterest];
  double v4 = v3;
  [v0 appStoreReviewTimeIntervalSinceInitialForeground];
  double v6 = v5;
  [v0 appStoreReviewTimeIntervalSinceLastPrompt];
  double v8 = v7;
  [v0 appStoreReviewTimeIntervalSinceLastFetch];
  id v10 = [objc_allocWithZone((Class)REMAppStoreDataViewConfigurationsInvocationResult) initWithCreatedOrCompletedRemindersCountThreshold:v1 numberOfForegroundsThreshold:v2 timeIntervalOfInterest:v4 timeIntervalSinceInitialForeground:v6 timeIntervalSinceLastPrompt:v8 timeIntervalSinceLastFetch:v9];

  return v10;
}

uint64_t sub_100483698()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919628);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919628);
  if (qword_100907810 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942478);
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100483760()
{
  uint64_t v1 = v0;
  uint64_t v50 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v2 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  double v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v9 = (void *)v1[2];
  void *v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_4:
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_100919628);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    int v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      int v47 = v16;
      NSString v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v52 = v46;
      *(_DWORD *)NSString v17 = 136446210;
      int64_t v18 = v8[2];
      if (v18)
      {
        id v42 = v17;
        uint64_t v43 = v15;
        uint64_t v45 = v1;
        NSString v51 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v18, 0);
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
        uint64_t v19 = v2 + 16;
        uint64_t v21 = *(unsigned __int8 *)(v19 + 64);
        uint64_t v44 = v8;
        id v22 = (char *)v8 + ((v21 + 32) & ~v21);
        uint64_t v48 = *(void *)(v19 + 56);
        uint64_t v49 = v20;
        id v23 = (void (**)(char *, uint64_t))(v19 - 8);
        do
        {
          uint64_t v24 = v50;
          v49(v4, v22, v50);
          id v25 = (void *)REMAccountsListDataView.Model.GroupChild.objectID.getter();
          id v26 = [v25 stringRepresentation];

          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;

          (*v23)(v4, v24);
          uint64_t v30 = v51;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1001DE058(0, v30[2] + 1, 1);
            uint64_t v30 = v51;
          }
          unint64_t v32 = v30[2];
          unint64_t v31 = v30[3];
          if (v32 >= v31 >> 1)
          {
            sub_1001DE058(v31 > 1, v32 + 1, 1);
            uint64_t v30 = v51;
          }
          void v30[2] = v32 + 1;
          os_log_type_t v33 = &v30[2 * v32];
          v33[4] = v27;
          v33[5] = v29;
          v22 += v48;
          --v18;
        }
        while (v18);
        double v8 = v44;
        uint64_t v1 = v45;
        NSString v17 = v42;
        uint64_t v15 = v43;
      }
      uint64_t v38 = Array.description.getter();
      unint64_t v40 = v39;
      swift_bridgeObjectRelease();
      NSString v51 = (void *)sub_1000C51B8(v38, v40, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v47, "Updating application shortcuts from RDApplicationShortcutEngine {lists: %{public}s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v1[5]) {
        goto LABEL_22;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!v1[5]) {
        goto LABEL_22;
      }
    }
    sub_100128A20((uint64_t)v8);
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v12 = v1[3];
  if (v12)
  {
    double v8 = *(void **)(v12 + 16);
    uint64_t v13 = qword_100907620;
    swift_bridgeObjectRetain();
    if (v13 == -1) {
      goto LABEL_4;
    }
    goto LABEL_24;
  }
  if (qword_100907620 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E2DC(v34, (uint64_t)qword_100919628);
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDApplicationShortcutEngine has no provider; not updating shortcuts",
      v37,
      2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100483CB8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDApplicationShortcutEngine()
{
  return self;
}

void sub_100483D24()
{
}

uint64_t sub_100483D4C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100489864(a1, (uint64_t)sub_10048A148, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100483DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v64 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v49 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v13 = sub_100094134(&qword_100919928);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  int v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v49 - v18;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v53 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  unint64_t v59 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v60 = 0;
  unint64_t v65 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v66 = v5 + 16;
  int64_t v54 = (unint64_t)(v21 + 63) >> 6;
  id v55 = (char *)&v49 - v18;
  int64_t v50 = v54 - 1;
  uint64_t v51 = v5;
  uint64_t v52 = a2;
  id v57 = v12;
  uint64_t v58 = a1;
  id v56 = v16;
  if (!v23) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v61 = (v23 - 1) & v23;
  unint64_t v24 = __clz(__rbit64(v23)) | (v60 << 6);
  while (2)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v16, *(void *)(a1 + 48) + *(void *)(v5 + 72) * v24, v4);
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = sub_100094134(&qword_100919930);
    *(void *)&v16[*(int *)(v26 + 48)] = *(void *)(v25 + 8 * v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 0, 1, v26);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100096408((uint64_t)v16, (uint64_t)v19, &qword_100919928);
      uint64_t v31 = sub_100094134(&qword_100919930);
      uint64_t v32 = 1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v19, 1, v31) == 1) {
        return v32;
      }
      uint64_t v33 = *(int *)(v31 + 48);
      (*v59)(v12, v19, v4);
      uint64_t v34 = *(void *)&v19[v33];
      unint64_t v35 = sub_100306EC4((uint64_t)v12);
      char v37 = v36;
      uint64_t v38 = *v65;
      (*v65)(v12, v4);
      if ((v37 & 1) == 0
        || (v39 = *(void *)(*(void *)(a2 + 56) + 8 * v35), uint64_t v40 = *(void *)(v39 + 16), v40 != *(void *)(v34 + 16)))
      {
LABEL_44:
        swift_bridgeObjectRelease();
        return 0;
      }
      if (!v40 || v39 == v34)
      {
        uint64_t result = swift_bridgeObjectRelease();
        int v16 = v56;
        uint64_t v12 = v57;
        uint64_t v19 = v55;
        a1 = v58;
        unint64_t v23 = v61;
        if (v61) {
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v41 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v62 = *(void *)(v5 + 72);
        uint64_t v63 = v39;
        id v42 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v40; ++i)
        {
          uint64_t result = v42(v10, v63 + v41, v4);
          if (i >= *(void *)(v34 + 16))
          {
            __break(1u);
            goto LABEL_48;
          }
          uint64_t v44 = v4;
          uint64_t v45 = v10;
          uint64_t v46 = v64;
          v42(v64, v34 + v41, v44);
          sub_100124954();
          char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v48 = v46;
          id v10 = v45;
          uint64_t v4 = v44;
          v38(v48, v44);
          v38(v10, v44);
          if ((v47 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
          v41 += v62;
        }
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = v51;
        a2 = v52;
        uint64_t v12 = v57;
        a1 = v58;
        uint64_t v19 = v55;
        int v16 = v56;
        unint64_t v23 = v61;
        if (v61) {
          goto LABEL_6;
        }
      }
LABEL_8:
      int64_t v27 = v60 + 1;
      if (__OFADD__(v60, 1))
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (v27 < v54)
      {
        unint64_t v28 = *(void *)(v53 + 8 * v27);
        if (v28) {
          goto LABEL_11;
        }
        int64_t v29 = v60 + 2;
        ++v60;
        if (v27 + 1 < v54)
        {
          unint64_t v28 = *(void *)(v53 + 8 * v29);
          if (v28) {
            goto LABEL_14;
          }
          int64_t v60 = v27 + 1;
          if (v27 + 2 < v54)
          {
            unint64_t v28 = *(void *)(v53 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_11;
            }
            int64_t v60 = v27 + 2;
            if (v27 + 3 < v54)
            {
              unint64_t v28 = *(void *)(v53 + 8 * (v27 + 3));
              if (v28)
              {
                v27 += 3;
                goto LABEL_11;
              }
              int64_t v29 = v27 + 4;
              int64_t v60 = v27 + 3;
              if (v27 + 4 < v54) {
                break;
              }
            }
          }
        }
      }
LABEL_28:
      uint64_t v30 = sub_100094134(&qword_100919930);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v16, 1, 1, v30);
      uint64_t v61 = 0;
    }
    unint64_t v28 = *(void *)(v53 + 8 * v29);
    if (v28)
    {
LABEL_14:
      int64_t v27 = v29;
LABEL_11:
      int64_t v60 = v27;
      uint64_t v61 = (v28 - 1) & v28;
      unint64_t v24 = __clz(__rbit64(v28)) + (v27 << 6);
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v54)
    {
      int64_t v60 = v50;
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v53 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_100484404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedReminder();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v53 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_100919918);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v44 - v17;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v54 = 0;
  uint64_t v49 = a1;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v20 = a1 + 64;
  uint64_t v19 = v21;
  uint64_t v22 = 1 << *(unsigned char *)(v20 - 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v19;
  uint64_t v48 = v52 + 16;
  int64_t v50 = (void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  uint64_t v46 = v20;
  int64_t v47 = (unint64_t)(v22 + 63) >> 6;
  int64_t v45 = v47 - 1;
  while (1)
  {
    if (v24)
    {
      unint64_t v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v26 = v25 | (v54 << 6);
LABEL_8:
      uint64_t v27 = v49;
      (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v15, *(void *)(v49 + 48) + *(void *)(v52 + 72) * v26, v9);
      uint64_t v28 = *(void *)(v27 + 56) + *(void *)(v55 + 72) * v26;
      uint64_t v29 = sub_100094134(&qword_100919920);
      sub_1000D57B8(v28, (uint64_t)&v15[*(int *)(v29 + 48)]);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v15, 0, 1, v29);
      goto LABEL_30;
    }
    int64_t v30 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v30 < v47)
    {
      unint64_t v31 = *(void *)(v46 + 8 * v30);
      if (v31) {
        goto LABEL_12;
      }
      int64_t v32 = v54 + 2;
      ++v54;
      if (v30 + 1 < v47)
      {
        unint64_t v31 = *(void *)(v46 + 8 * v32);
        if (v31) {
          goto LABEL_15;
        }
        int64_t v54 = v30 + 1;
        if (v30 + 2 < v47)
        {
          unint64_t v31 = *(void *)(v46 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          int64_t v54 = v30 + 2;
          if (v30 + 3 < v47)
          {
            unint64_t v31 = *(void *)(v46 + 8 * (v30 + 3));
            if (v31)
            {
              v30 += 3;
              goto LABEL_12;
            }
            int64_t v32 = v30 + 4;
            int64_t v54 = v30 + 3;
            if (v30 + 4 < v47) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v33 = sub_100094134(&qword_100919920);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v15, 1, 1, v33);
    unint64_t v24 = 0;
LABEL_30:
    sub_100096408((uint64_t)v15, (uint64_t)v18, &qword_100919918);
    uint64_t v34 = sub_100094134(&qword_100919920);
    int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v18, 1, v34);
    BOOL v36 = v35 == 1;
    if (v35 == 1) {
      return v36;
    }
    uint64_t v37 = (uint64_t)&v18[*(int *)(v34 + 48)];
    (*v51)(v11, v18, v9);
    sub_1000D56F8(v37, (uint64_t)v8);
    unint64_t v38 = sub_100306EC4((uint64_t)v11);
    char v40 = v39;
    (*v50)(v11, v9);
    if ((v40 & 1) == 0)
    {
      sub_1000D575C((uint64_t)v8);
      return 0;
    }
    uint64_t v41 = *(void *)(a2 + 56) + *(void *)(v55 + 72) * v38;
    uint64_t v42 = v53;
    sub_1000D57B8(v41, v53);
    char v43 = sub_10014BDE0(v42, v8);
    sub_1000D575C(v42);
    uint64_t result = sub_1000D575C((uint64_t)v8);
    if ((v43 & 1) == 0) {
      return v36;
    }
  }
  unint64_t v31 = *(void *)(v46 + 8 * v32);
  if (v31)
  {
LABEL_15:
    int64_t v30 = v32;
LABEL_12:
    unint64_t v24 = (v31 - 1) & v31;
    unint64_t v26 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v54 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v30 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v30 >= v47)
    {
      int64_t v54 = v45;
      goto LABEL_29;
    }
    unint64_t v31 = *(void *)(v46 + 8 * v30);
    ++v32;
    if (v31) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10048496C(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v46 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_1009198F8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v45 = (char *)&v37 - v10;
  int64_t v47 = 0;
  uint64_t v41 = a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v38 = a1 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v39 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v40 = v44 + 16;
  uint64_t v42 = (void (**)(uint64_t, uint64_t))(v44 + 8);
  char v43 = (void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
  int64_t v37 = v39 - 1;
  uint64_t v15 = (uint64_t *)&unk_100919900;
  uint64_t v16 = (uint64_t)v46;
  uint64_t v17 = v48;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v47 << 6);
LABEL_8:
      uint64_t v20 = v41;
      (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v8, *(void *)(v41 + 48) + *(void *)(v44 + 72) * v19, v48);
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t v22 = sub_100094134(v15);
      *(void *)&v8[*(int *)(v22 + 48)] = *(void *)(v21 + 8 * v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 0, 1, v22);
      swift_bridgeObjectRetain();
      uint64_t v23 = (uint64_t)v45;
      goto LABEL_30;
    }
    int64_t v24 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v23 = (uint64_t)v45;
    if (v24 < v39)
    {
      unint64_t v25 = *(void *)(v38 + 8 * v24);
      if (v25) {
        goto LABEL_12;
      }
      int64_t v26 = v47 + 2;
      ++v47;
      if (v24 + 1 < v39)
      {
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (v25) {
          goto LABEL_15;
        }
        int64_t v47 = v24 + 1;
        if (v24 + 2 < v39)
        {
          unint64_t v25 = *(void *)(v38 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_12;
          }
          int64_t v47 = v24 + 2;
          if (v24 + 3 < v39)
          {
            unint64_t v25 = *(void *)(v38 + 8 * (v24 + 3));
            if (v25)
            {
              v24 += 3;
              goto LABEL_12;
            }
            int64_t v26 = v24 + 4;
            int64_t v47 = v24 + 3;
            if (v24 + 4 < v39) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v27 = sub_100094134(v15);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v8, 1, 1, v27);
    unint64_t v14 = 0;
LABEL_30:
    sub_100096408((uint64_t)v8, v23, &qword_1009198F8);
    uint64_t v28 = v15;
    uint64_t v29 = sub_100094134(v15);
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v23, 1, v29);
    BOOL v31 = v30 == 1;
    if (v30 == 1) {
      return v31;
    }
    uint64_t v32 = *(int *)(v29 + 48);
    (*v43)(v16, v23, v17);
    uint64_t v33 = *(void *)(v23 + v32);
    sub_100306EC4(v16);
    LOBYTE(v32) = v34;
    (*v42)(v16, v17);
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v35 = swift_bridgeObjectRetain();
    char v36 = sub_100350CCC(v35, v33);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = v28;
    if ((v36 & 1) == 0) {
      return v31;
    }
  }
  unint64_t v25 = *(void *)(v38 + 8 * v26);
  if (v25)
  {
LABEL_15:
    int64_t v24 = v26;
LABEL_12:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v47 = v24;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v39)
    {
      int64_t v47 = v37;
      goto LABEL_29;
    }
    unint64_t v25 = *(void *)(v38 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100484E30(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v55 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100919908);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v52 = (char *)&v44 - v10;
  int64_t v56 = 0;
  uint64_t v49 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v48 = v53 + 16;
  int64_t v50 = (uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v53 + 32);
  uint64_t v46 = v12;
  int64_t v47 = (unint64_t)(v14 + 63) >> 6;
  int64_t v45 = v47 - 1;
  uint64_t v17 = (uint64_t *)&unk_100919910;
  uint64_t v18 = v57;
  while (v16)
  {
    unint64_t v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v20 = v19 | (v56 << 6);
    uint64_t v21 = (uint64_t)v52;
LABEL_9:
    uint64_t v22 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v8, *(void *)(v49 + 48) + *(void *)(v53 + 72) * v20, v57);
    uint64_t v23 = (void *)(*(void *)(v22 + 56) + 16 * v20);
    uint64_t v24 = sub_100094134(v17);
    unint64_t v25 = &v8[*(int *)(v24 + 48)];
    uint64_t v26 = v23[1];
    *(void *)unint64_t v25 = *v23;
    *((void *)v25 + 1) = v26;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 0, 1, v24);
    swift_bridgeObjectRetain();
LABEL_31:
    sub_100096408((uint64_t)v8, v21, &qword_100919908);
    uint64_t v31 = sub_100094134(v17);
    BOOL v32 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v21, 1, v31) == 1;
    uint64_t result = v32;
    if (v32) {
      return result;
    }
    BOOL v54 = v32;
    uint64_t v33 = v17;
    char v34 = (uint64_t *)(v21 + *(int *)(v31 + 48));
    uint64_t v35 = (uint64_t)v55;
    (*v51)(v55, v21, v18);
    uint64_t v36 = *v34;
    uint64_t v37 = v34[1];
    unint64_t v38 = sub_100306EC4(v35);
    LOBYTE(v34) = v39;
    uint64_t result = (*v50)(v35, v18);
    if ((v34 & 1) == 0)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v40 = (void *)(*(void *)(a2 + 56) + 16 * v38);
    uint64_t v41 = v40[1];
    if (v41)
    {
      if (!v37) {
        return v54;
      }
      BOOL v42 = *v40 == v36 && v41 == v37;
      uint64_t v17 = v33;
      if (v42)
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = v54;
        if ((v43 & 1) == 0) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v17 = v33;
      if (v37) {
        goto LABEL_43;
      }
    }
  }
  int64_t v27 = v56 + 1;
  uint64_t v21 = (uint64_t)v52;
  if (__OFADD__(v56, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v27 >= v47)
  {
LABEL_30:
    uint64_t v30 = sub_100094134(v17);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 1, 1, v30);
    unint64_t v16 = 0;
    goto LABEL_31;
  }
  unint64_t v28 = *(void *)(v46 + 8 * v27);
  if (v28)
  {
LABEL_13:
    unint64_t v16 = (v28 - 1) & v28;
    unint64_t v20 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v56 = v27;
    goto LABEL_9;
  }
  int64_t v29 = v56 + 2;
  ++v56;
  if (v27 + 1 >= v47) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void *)(v46 + 8 * v29);
  if (v28) {
    goto LABEL_16;
  }
  int64_t v56 = v27 + 1;
  if (v27 + 2 >= v47) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void *)(v46 + 8 * (v27 + 2));
  if (v28)
  {
    v27 += 2;
    goto LABEL_13;
  }
  int64_t v56 = v27 + 2;
  if (v27 + 3 >= v47) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void *)(v46 + 8 * (v27 + 3));
  if (v28)
  {
    v27 += 3;
    goto LABEL_13;
  }
  int64_t v29 = v27 + 4;
  int64_t v56 = v27 + 3;
  if (v27 + 4 >= v47) {
    goto LABEL_30;
  }
  unint64_t v28 = *(void *)(v46 + 8 * v29);
  if (v28)
  {
LABEL_16:
    int64_t v27 = v29;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v47)
    {
      int64_t v56 = v45;
      goto LABEL_30;
    }
    unint64_t v28 = *(void *)(v46 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_13;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100485338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v61 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v53 - v8;
  __chkstk_darwin(v7);
  uint64_t v62 = (char *)&v53 - v10;
  uint64_t v11 = sub_100094134(&qword_100915578);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v53 - v16;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v60 = a2;
  int64_t v63 = 0;
  uint64_t v57 = a1;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v18 = v20;
  uint64_t v21 = 1 << *(unsigned char *)(v19 - 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v18;
  uint64_t v65 = v68 + 16;
  uint64_t v66 = v4;
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v68 + 32);
  unint64_t v59 = (void (**)(uint64_t, uint64_t))(v68 + 8);
  uint64_t v55 = v19;
  int64_t v56 = (unint64_t)(v21 + 63) >> 6;
  int64_t v54 = v56 - 1;
  uint64_t v24 = (uint64_t *)&unk_100915570;
  while (1)
  {
    if (v23)
    {
      uint64_t v67 = (v23 - 1) & v23;
      unint64_t v25 = __clz(__rbit64(v23)) | (v63 << 6);
LABEL_8:
      uint64_t v26 = v57;
      unint64_t v27 = *(void *)(v68 + 72) * v25;
      unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
      uint64_t v29 = v66;
      v28(v14, *(void *)(v57 + 48) + v27, v66);
      unint64_t v30 = *(void *)(v26 + 56) + v27;
      uint64_t v31 = sub_100094134(v24);
      v28(&v14[*(int *)(v31 + 48)], v30, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 0, 1, v31);
      goto LABEL_30;
    }
    int64_t v32 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v32 < v56)
    {
      unint64_t v33 = *(void *)(v55 + 8 * v32);
      if (v33) {
        goto LABEL_12;
      }
      int64_t v34 = v63 + 2;
      ++v63;
      if (v32 + 1 < v56)
      {
        unint64_t v33 = *(void *)(v55 + 8 * v34);
        if (v33) {
          goto LABEL_15;
        }
        int64_t v63 = v32 + 1;
        if (v32 + 2 < v56)
        {
          unint64_t v33 = *(void *)(v55 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_12;
          }
          int64_t v63 = v32 + 2;
          if (v32 + 3 < v56)
          {
            unint64_t v33 = *(void *)(v55 + 8 * (v32 + 3));
            if (v33)
            {
              v32 += 3;
              goto LABEL_12;
            }
            int64_t v34 = v32 + 4;
            int64_t v63 = v32 + 3;
            if (v32 + 4 < v56) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v35 = sub_100094134(v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v14, 1, 1, v35);
    uint64_t v67 = 0;
LABEL_30:
    sub_100096408((uint64_t)v14, (uint64_t)v17, &qword_100915578);
    uint64_t v36 = sub_100094134(v24);
    int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v17, 1, v36);
    BOOL v64 = v37 == 1;
    if (v37 == 1) {
      return v64;
    }
    unint64_t v38 = v24;
    char v39 = v14;
    uint64_t v40 = &v17[*(int *)(v36 + 48)];
    uint64_t v41 = *v58;
    uint64_t v42 = (uint64_t)v62;
    char v43 = v17;
    uint64_t v44 = v66;
    (*v58)(v62, v17, v66);
    v41(v9, v40, v44);
    uint64_t v45 = v60;
    uint64_t v46 = v9;
    unint64_t v47 = sub_100306EC4(v42);
    LOBYTE(v41) = v48;
    uint64_t v49 = *v59;
    (*v59)(v42, v44);
    if ((v41 & 1) == 0)
    {
      v49((uint64_t)v46, v44);
      return 0;
    }
    unint64_t v50 = *(void *)(v45 + 56) + *(void *)(v68 + 72) * v47;
    uint64_t v51 = v61;
    (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v61, v50, v44);
    sub_100124954();
    char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49((uint64_t)v51, v44);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v46, v44);
    uint64_t v9 = v46;
    uint64_t v14 = v39;
    uint64_t v17 = v43;
    uint64_t v24 = v38;
    unint64_t v23 = v67;
    if ((v52 & 1) == 0) {
      return v64;
    }
  }
  unint64_t v33 = *(void *)(v55 + 8 * v34);
  if (v33)
  {
LABEL_15:
    int64_t v32 = v34;
LABEL_12:
    uint64_t v67 = (v33 - 1) & v33;
    unint64_t v25 = __clz(__rbit64(v33)) + (v32 << 6);
    int64_t v63 = v32;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v32 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v32 >= v56)
    {
      int64_t v63 = v54;
      goto LABEL_29;
    }
    unint64_t v33 = *(void *)(v55 + 8 * v32);
    ++v34;
    if (v33) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1004858F0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1001806F8(v16, v17);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v22 = *(void **)(*(void *)(a2 + 56) + 8 * v19);
    uint64_t v23 = v22[2];
    if (v23 != v18[2]) {
      goto LABEL_50;
    }
    if (v23) {
      BOOL v24 = v22 == v18;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      BOOL v25 = v22[4] == v18[4] && v22[5] == v18[5];
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
      if (v23 != 1)
      {
        BOOL v26 = v22[6] == v18[6] && v22[7] == v18[7];
        if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_50;
        }
        uint64_t v27 = v23 - 2;
        if (v27)
        {
          uint64_t v28 = 0;
          while (1)
          {
            BOOL v29 = v22[v28 + 8] == v18[v28 + 8] && v22[v28 + 9] == v18[v28 + 9];
            if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              break;
            }
            v28 += 2;
            if (!--v27) {
              goto LABEL_6;
            }
          }
LABEL_50:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
LABEL_6:
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_100485B60(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1001806F8(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    BOOL v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100485D80(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    double v18 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1001806F8(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(double *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_100485F34(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    double v18 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_1001806F8(v16, v17);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    id v23 = *(id *)(*(void *)(a2 + 56) + 8 * v20);
    char v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0) {
      return;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10048612C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = v2[4];
  char v6 = sub_100489144(a1, v5);
  uint64_t v7 = *v2;
  if (v6)
  {
    unint64_t v8 = (void *)v2[1];
    int64_t v9 = (void *)v2[2];
    uint64_t v10 = v2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = v7;
    goto LABEL_41;
  }
  uint64_t v66 = a2;
  uint64_t v13 = v2[2];
  uint64_t v72 = v2[1];
  uint64_t v70 = v2[3];
  uint64_t v71 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000F5C74((uint64_t)&v72);
  sub_1000F5C74((uint64_t)&v71);
  sub_1000F5C74((uint64_t)&v70);
  swift_bridgeObjectRetain();
  uint64_t v68 = v13;
  uint64_t v12 = sub_10048A61C(v7, v13, a1);
  uint64_t v64 = a1;
  swift_bridgeObjectRelease();
  sub_1000F5C48((uint64_t)&v72);
  sub_1000F5C48((uint64_t)&v71);
  sub_1000F5C48((uint64_t)&v70);
  swift_bridgeObjectRelease();
  uint64_t v65 = v5;
  swift_bridgeObjectRelease();
  id v69 = (void *)sub_1002EE218((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v67 = v12;
  if (v14)
  {
    uint64_t v15 = v72;
    swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t *)(v12 + 40);
    do
    {
      if (*(void *)(v15 + 16))
      {
        uint64_t v18 = *(v16 - 1);
        uint64_t v17 = *v16;
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_1001806F8(v18, v17);
        if (v20)
        {
          uint64_t v21 = *(void *)(*(void *)(v15 + 56) + 8 * v19);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v24 = sub_1001806F8(v18, v17);
          uint64_t v25 = v69[2];
          BOOL v26 = (v23 & 1) == 0;
          uint64_t v27 = v25 + v26;
          if (__OFADD__(v25, v26))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          char v28 = v23;
          if (v69[3] >= v27)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100319638();
            }
          }
          else
          {
            sub_100310668(v27, isUniquelyReferenced_nonNull_native);
            unint64_t v29 = sub_1001806F8(v18, v17);
            if ((v28 & 1) != (v30 & 1)) {
              goto LABEL_46;
            }
            unint64_t v24 = v29;
          }
          if (v28)
          {
            uint64_t v31 = v69[7];
            swift_bridgeObjectRelease();
            *(void *)(v31 + 8 * v24) = v21;
          }
          else
          {
            v69[(v24 >> 6) + 8] |= 1 << v24;
            int64_t v32 = (uint64_t *)(v69[6] + 16 * v24);
            *int64_t v32 = v18;
            v32[1] = v17;
            *(void *)(v69[7] + 8 * v24) = v21;
            uint64_t v33 = v69[2];
            BOOL v34 = __OFADD__(v33, 1);
            uint64_t v35 = v33 + 1;
            if (v34) {
              goto LABEL_44;
            }
            void v69[2] = v35;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRelease();
      }
      v16 += 2;
      --v14;
    }
    while (v14);
    uint64_t v12 = v67;
    swift_bridgeObjectRelease();
  }
  int64_t v9 = (void *)sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = *(void *)(v12 + 16);
  uint64_t v37 = v68;
  if (!v36) {
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  unint64_t v38 = (uint64_t *)(v12 + 40);
  do
  {
    if (!*(void *)(v37 + 16)) {
      goto LABEL_24;
    }
    uint64_t v40 = *(v38 - 1);
    uint64_t v39 = *v38;
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_1001806F8(v40, v39);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    char v43 = (uint64_t *)(*(void *)(v37 + 56) + 16 * v41);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v46 = v9;
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v49 = sub_1001806F8(v40, v39);
    uint64_t v50 = v46[2];
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_43;
    }
    char v53 = v48;
    if (v46[3] >= v52)
    {
      if (v47)
      {
        int64_t v9 = v46;
        if ((v48 & 1) == 0) {
          goto LABEL_36;
        }
      }
      else
      {
        sub_100318A14();
        int64_t v9 = v46;
        if ((v53 & 1) == 0) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      sub_10030E654(v52, v47);
      unint64_t v54 = sub_1001806F8(v40, v39);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_46;
      }
      unint64_t v49 = v54;
      int64_t v9 = v46;
      if ((v53 & 1) == 0)
      {
LABEL_36:
        v9[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v57 = (uint64_t *)(v9[6] + 16 * v49);
        *uint64_t v57 = v40;
        v57[1] = v39;
        uint64_t v58 = (void *)(v9[7] + 16 * v49);
        void *v58 = v44;
        v58[1] = v45;
        uint64_t v59 = v9[2];
        BOOL v34 = __OFADD__(v59, 1);
        uint64_t v60 = v59 + 1;
        if (v34) {
          goto LABEL_45;
        }
        v9[2] = v60;
        swift_bridgeObjectRetain();
        goto LABEL_38;
      }
    }
    int64_t v56 = (void *)(v9[7] + 16 * v49);
    swift_bridgeObjectRelease();
    *int64_t v56 = v44;
    v56[1] = v45;
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v37 = v68;
LABEL_24:
    v38 += 2;
    --v36;
  }
  while (v36);
  uint64_t v12 = v67;
  swift_bridgeObjectRelease();
LABEL_40:
  uint64_t v61 = v70;
  swift_bridgeObjectRetain();
  uint64_t v62 = (void *)sub_1002ED110((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000F5C74((uint64_t)&v72);
  sub_1000F5C74((uint64_t)&v71);
  sub_1000F5C74((uint64_t)&v70);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10048A1A8(v62, v65, v64, v61);
  swift_bridgeObjectRelease();
  sub_1000F5C48((uint64_t)&v72);
  sub_1000F5C48((uint64_t)&v71);
  sub_1000F5C48((uint64_t)&v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v63 = swift_bridgeObjectRetain();
  uint64_t result = sub_1001261C0(v63);
  uint64_t v5 = result;
  a2 = v66;
  unint64_t v8 = v69;
LABEL_41:
  *a2 = v12;
  a2[1] = (uint64_t)v8;
  a2[2] = (uint64_t)v9;
  a2[3] = v10;
  a2[4] = v5;
  return result;
}

uint64_t sub_1004866A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009196F0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009196F0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10048676C(char *a1, char *a2)
{
  return sub_1002F28C4(*a1, *a2);
}

Swift::Int sub_100486778()
{
  return Hasher._finalize()();
}

uint64_t sub_100486804()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10048687C()
{
  return Hasher._finalize()();
}

uint64_t sub_100486904@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4A30, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100486964(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x44497463656A626FLL;
  if (*v1) {
    uint64_t v2 = 0x6465696669646F6DLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEC00000065746144;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1004869AC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4A30, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100486A10()
{
  if (*v0) {
    return 0x6465696669646F6DLL;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

void sub_100486A54(void *a1@<X8>)
{
  *a1 = &off_1008B6ED8;
}

Swift::Int sub_100486A64()
{
  return Hasher._finalize()();
}

uint64_t sub_100486ABC()
{
  return String.hash(into:)();
}

Swift::Int sub_100486AD8()
{
  return Hasher._finalize()();
}

uint64_t sub_100486B2C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6F00, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100486B80(void *a1@<X8>)
{
  *a1 = 0x49746E756F636361;
  a1[1] = 0xE900000000000044;
}

uint64_t sub_100486BA0@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B5088, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100486BF8()
{
  return 0x49746E756F636361;
}

void sub_100486C14(void *a1@<X8>)
{
  *a1 = &off_1008B6F38;
}

void sub_100486C24(void *a1, char *a2, void *a3)
{
  uint64_t v145 = a2;
  uint64_t v4 = v3;
  uint64_t v146 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v146);
  unint64_t v8 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = (void *)type metadata accessor for Date();
  *(void *)&long long v142 = *(v143 - 1);
  __chkstk_darwin(v143);
  uint64_t v140 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  *(void *)&long long v141 = (char *)&v131 - v16;
  uint64_t v149 = a3;
  id v17 = [a3 remObjectID:v15];
  uint64_t v147 = v10;
  uint64_t v148 = v9;
  if (!v17)
  {
LABEL_12:
    uint64_t v152 = 0;
    unint64_t v153 = 0xE000000000000000;
    _StringGuts.grow(_:)(177);
    v37._uint64_t countAndFlagsBits = 0xD00000000000007ELL;
    v37._object = (void *)0x80000001007D5850;
    String.append(_:)(v37);
    id v38 = *(id *)(v4 + 16);
    id v39 = [v38 description];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v42 = v41;

    v43._uint64_t countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);

    swift_bridgeObjectRelease();
    v44._object = (void *)0x80000001007D58D0;
    v44._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v44);
    id v45 = [a1 remObjectID];
    id v46 = [v45 description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    v50._uint64_t countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);

    swift_bridgeObjectRelease();
    v51._uint64_t countAndFlagsBits = 0xD000000000000018;
    v51._object = (void *)0x80000001007D58F0;
    String.append(_:)(v51);
    id v52 = [v149 identifier];
    if (v52)
    {
      char v53 = v52;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56))(v8, 0, 1, v148);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56))(v8, 1, 1, v148);
    }
    unint64_t v54 = self;
    uint64_t v55 = Optional.descriptionOrNil.getter();
    uint64_t v57 = v56;
    sub_1001260DC((uint64_t)v8);
    v58._uint64_t countAndFlagsBits = v55;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._uint64_t countAndFlagsBits = 125;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v54 internalErrorWithDebugDescription:v60];

    swift_willThrow();
    return;
  }
  uint64_t v18 = v17;
  unint64_t v137 = v12;
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  uint64_t v139 = v4;
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {

    uint64_t v4 = v139;
    goto LABEL_12;
  }
  LODWORD(v146) = [a1 listType];
  NSString v19 = [a1 listID];
  id v135 = v18;
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;
  char v23 = v145;
  if (qword_100907628 != -1) {
    swift_once();
  }
  id v136 = v19;
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_10008E2DC(v24, (uint64_t)qword_1009196F0);
  swift_bridgeObjectRetain_n();
  id v26 = a1;
  uint64_t v133 = v25;
  uint64_t v27 = Logger.logObject.getter();
  int v28 = static os_log_type_t.info.getter();
  BOOL v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
  unint64_t v138 = v22;
  id v134 = v26;
  if (v29)
  {
    int v132 = v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v131 = swift_slowAlloc();
    uint64_t v152 = v131;
    *(_DWORD *)uint64_t v30 = 136315650;
    LOWORD(v150) = v146;
    type metadata accessor for REMManualOrderingListType(0);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v150 = sub_1000C51B8(v31, v32, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v150 = sub_1000C51B8(v20, v22, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 22) = 2048;
    id v33 = [v26 topLevelElementIDs];
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v36 = (void *)v20;
    swift_bridgeObjectRelease();
    uint64_t v150 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v132, "merging manual ordering {list type: %s, list ID: %s, top-level reminders count: %ld}", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    char v23 = v145;
  }
  else
  {
    uint64_t v36 = (void *)v20;

    swift_bridgeObjectRelease_n();
  }
  unsigned __int16 v61 = v146;
  [v23 setListTypeRawValue:v146];
  id v62 = v136;
  [v23 setListID:v136];

  uint64_t v63 = self;
  id v64 = [v63 sharedConfiguration];
  id v65 = [v64 manualSortHintLastAccessedUpdatePolicy];

  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v68 = v67;

  v69._uint64_t countAndFlagsBits = v66;
  v69._object = v68;
  unint64_t v70 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1538, v69);
  swift_bridgeObjectRelease();
  if (v70 >= 3) {
    char v71 = 2;
  }
  else {
    char v71 = v70;
  }
  sub_10026BAC0(v71);
  id v72 = [v23 storeControllerManagedObjectContext];
  if (!v72)
  {

    swift_bridgeObjectRelease();
    return;
  }
  char v73 = v72;
  uint64_t v74 = v144;
  uint64_t v75 = sub_1004881F4(v149, v61);
  if (v74)
  {

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v76 = v75;
  uint64_t v149 = v36;
  uint64_t v152 = 0;
  __chkstk_darwin(v75);
  *(&v131 - 4) = v77;
  *(&v131 - 3) = (uint64_t)v73;
  *(&v131 - 2) = (uint64_t)&v152;
  id v78 = v134;
  swift_retain();
  id v79 = v73;
  NSManagedObjectContext.performAndWait<A>(_:)();
  uint64_t v144 = v76;
  uint64_t v80 = v152;
  if (!v152) {
    uint64_t v80 = sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
  }
  sub_1004E5A68(v78, v80, v144, v79, &v154);
  sub_1001B3874((uint64_t)v157);
  id v136 = v79;
  sub_100096408((uint64_t)v157, (uint64_t)v173, (uint64_t *)&unk_100915B90);
  if (*(void *)&v173[0])
  {
    long long v175 = v173[0];
    long long v176 = v173[1];
    uint64_t v177 = (char *)v174;
    sub_1004884E8((uint64_t *)&v154, 1, v158);
    v198[0] = v154;
    sub_1000F5C48((uint64_t)v198);
    uint64_t v197 = v155;
    sub_1000F5C48((uint64_t)&v197);
    uint64_t v196 = *((void *)&v155 + 1);
    sub_1000F5C48((uint64_t)&v196);
    uint64_t v195 = v156;
    sub_1000F5C48((uint64_t)&v195);
    uint64_t v194 = *((void *)&v156 + 1);
    sub_1000F5C48((uint64_t)&v194);
    id v94 = [v63 sharedConfiguration];
    [v94 manualSortHintClientSideExpiration];

    uint64_t v95 = v140;
    Date.init()();
    unint64_t v96 = (char *)v141;
    Date.addingTimeInterval(_:)();
    unint64_t v97 = *(void (**)(char *, void *))(v142 + 8);
    uint64_t v98 = v143;
    v97(v95, v143);
    Date.timeIntervalSinceReferenceDate.getter();
    double v100 = v99;
    v97(v96, v98);
    uint64_t v101 = v159;
    uint64_t v192 = v158[1];
    uint64_t v193 = v158[0];
    uint64_t v190 = v159;
    uint64_t v191 = v158[2];
    sub_1000F5C74((uint64_t)&v193);
    sub_1000F5C74((uint64_t)&v192);
    sub_1000F5C74((uint64_t)&v191);
    sub_1000F5C74((uint64_t)&v190);
    uint64_t v102 = swift_bridgeObjectRetain();
    uint64_t v103 = sub_10048A7C0(v102, v101, v100);
    sub_1000F5C48((uint64_t)&v193);
    sub_1000F5C48((uint64_t)&v192);
    sub_1000F5C48((uint64_t)&v191);
    sub_1000F5C48((uint64_t)&v190);
    uint64_t v104 = sub_10012674C(v103);
    swift_bridgeObjectRelease();
    sub_10048612C(v104, (uint64_t *)&v160);
    swift_bridgeObjectRelease();
    sub_1000F5C48((uint64_t)&v193);
    sub_1000F5C48((uint64_t)&v192);
    sub_1000F5C48((uint64_t)&v191);
    sub_1000F5C48((uint64_t)&v190);
    swift_bridgeObjectRelease();
    uint64_t v143 = v160;
    if ((sub_10034F5D4(v160, (void *)v175) & 1) != 0
      && (sub_1004858F0(v161, *((uint64_t *)&v175 + 1)) & 1) != 0
      && (sub_100485B60(*((uint64_t *)&v161 + 1), v176) & 1) != 0)
    {
      *(void *)&long long v142 = v162;
      if (sub_100485D80(v162, *((uint64_t *)&v176 + 1)))
      {
        uint64_t v140 = v177;
        *(void *)&long long v141 = *((void *)&v162 + 1);
        if (sub_100596C74(*((uint64_t *)&v162 + 1), (uint64_t)v177))
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    sub_10041697C(&v163);
    swift_bridgeObjectRelease();
    uint64_t v178 = *((void *)&v175 + 1);
    sub_1000F5C48((uint64_t)&v178);
    uint64_t v179 = v176;
    sub_1000F5C48((uint64_t)&v179);
    uint64_t v180 = *((void *)&v176 + 1);
    sub_1000F5C48((uint64_t)&v180);
    v181[0] = (uint64_t)v177;
    sub_1000F5C48((uint64_t)v181);
    sub_10041697C(&v168);
    char v23 = v145;
    swift_bridgeObjectRelease();
    char v125 = sub_10034F5D4(v163, v168);
    if (v125)
    {
      uint64_t v126 = v164;
      uint64_t v127 = v169;
      char v128 = sub_1004858F0(v164, v169);
      uint64_t v81 = v139;
      if ((v128 & 1) == 0 || (sub_100485B60(v165, v170) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        LODWORD(v149) = 1;
LABEL_66:
        uint64_t v189 = v126;
        sub_1000F5C48((uint64_t)&v189);
        uint64_t v188 = v165;
        sub_1000F5C48((uint64_t)&v188);
        uint64_t v187 = v166;
        sub_1000F5C48((uint64_t)&v187);
        uint64_t v186 = v167;
        sub_1000F5C48((uint64_t)&v186);
        swift_bridgeObjectRelease();
        uint64_t v185 = v127;
        sub_1000F5C48((uint64_t)&v185);
        uint64_t v184 = v170;
        sub_1000F5C48((uint64_t)&v184);
        uint64_t v183 = v171;
        sub_1000F5C48((uint64_t)&v183);
        uint64_t v182 = v172;
        sub_1000F5C48((uint64_t)&v182);
        long long v141 = v162;
        long long v142 = v161;
        goto LABEL_28;
      }
      if (sub_100485D80(v166, v171))
      {
        int v129 = sub_100596C74(v167, v172);
        swift_bridgeObjectRelease();
        int v130 = v129 ^ 1;
      }
      else
      {
        swift_bridgeObjectRelease();
        int v130 = 1;
      }
      LODWORD(v149) = v130;
      char v23 = v145;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v126 = v164;
      LODWORD(v149) = 1;
      uint64_t v127 = v169;
    }
    uint64_t v81 = v139;
    goto LABEL_66;
  }
  swift_bridgeObjectRelease();
  long long v141 = v156;
  long long v142 = v155;
  LODWORD(v149) = 1;
  uint64_t v143 = v154;
  uint64_t v81 = v139;
LABEL_28:
  id v82 = v143;
  v198[1] = v143;
  long long v199 = v142;
  long long v200 = v141;
  uint64_t v83 = swift_bridgeObjectRetain();
  uint64_t v84 = sub_100489E1C(v83);
  sub_10026B960(v84);
  uint64_t v85 = sub_1004E63C0(1, v82, v142, *((uint64_t *)&v142 + 1));
  sub_10026B974(v85);
  id v86 = [v23 concatenatedContainerIDsWithLocalContainerIDPrefix];
  if (v86)
  {
    os_log_type_t v87 = v86;
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v90 = v89;

    uint64_t v152 = v88;
    unint64_t v153 = v90;
    uint64_t v91 = *(void *)&v145[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                         + 8];
    uint64_t v150 = *(void *)&v145[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    uint64_t v151 = v91;
    sub_1000E4FD8();
    uint64_t v92 = StringProtocol.components<A>(separatedBy:)();
    char v23 = v145;
    swift_bridgeObjectRelease();
    uint64_t v93 = (void *)sub_10012674C(v92);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v93 = &_swiftEmptySetSingleton;
  }
  uint64_t v105 = v93[2];
  swift_bridgeObjectRelease();
  if (v105) {
    goto LABEL_45;
  }
  id v106 = [v23 concatenatedElementIDsWithLocalElementIDPrefix];
  if (v106)
  {
    os_log_type_t v107 = v106;
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v110 = v109;

    uint64_t v152 = v108;
    unint64_t v153 = v110;
    uint64_t v111 = *(void *)&v145[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix
                          + 8];
    uint64_t v150 = *(void *)&v145[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    uint64_t v151 = v111;
    sub_1000E4FD8();
    uint64_t v112 = StringProtocol.components<A>(separatedBy:)();
    char v23 = v145;
    swift_bridgeObjectRelease();
    unint64_t v113 = (void *)sub_10012674C(v112);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v113 = &_swiftEmptySetSingleton;
  }
  uint64_t v114 = v113[2];
  swift_bridgeObjectRelease();
  if (v114)
  {
LABEL_45:
    id v115 = *(void **)(v81 + 24);
    if (qword_100907630 != -1) {
      swift_once();
    }
    [v115 postNotificationName:qword_100942260 object:0];
  }
  uint64_t v116 = sub_1000F49E8();
  unint64_t v118 = v117;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100097F34(v116, v118);
  [v23 setHintData:isa];

  if (v149)
  {
    id v120 = v137;
    UUID.init()();
    Class v121 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v120, v148);
    [v23 setETag:v121];
  }
  [v23 setSerializationVersion:1];
  id v122 = v135;
  id v123 = v136;
  switch((__int16)v146)
  {
    case 1:
    case 2:
    case 3:
      goto LABEL_53;
    case 4:
    case 5:
    case 6:
      id v124 = [v23 minimumSupportedVersion];
      if (v124 == (id)kREMSupportedVersionUnset) {
        [v23 setMinimumSupportedVersion:kREMSupportedVersionFor2022];
      }
LABEL_53:

      swift_release();
      break;
    default:

      swift_release();
      break;
  }
}

uint64_t sub_1004881F4(void *a1, unsigned __int16 a2)
{
  if (a2 > 6u) {
    goto LABEL_12;
  }
  if (((1 << a2) & 0x3A) == 0)
  {
    if (((1 << a2) & 0x44) != 0)
    {
      id v2 = a1;
      unint64_t v8 = sub_1005E82D8();
      uint64_t v9 = type metadata accessor for RDManualSortIDCache();
      if (qword_100907870 != -1) {
        uint64_t v9 = swift_once();
      }
      __chkstk_darwin(v9);
      OS_dispatch_queue.sync<A>(execute:)();
      type metadata accessor for RDManualSortIDAdapter();
      swift_allocObject();
      uint64_t v5 = v16;
      uint64_t v6 = (uint64_t)v8;
      char v7 = 1;
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v12 = self;
    _StringGuts.grow(_:)(108);
    v13._object = (void *)0x80000001007D5940;
    v13._uint64_t countAndFlagsBits = 0xD00000000000006ALL;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = 0xE000000000000000;
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 internalErrorWithDebugDescription:v15];

    swift_willThrow();
    return v10;
  }
  id v2 = a1;
  uint64_t v3 = sub_1005E82D8();
  uint64_t v4 = type metadata accessor for RDManualSortIDCache();
  if (qword_100907870 != -1) {
    uint64_t v4 = swift_once();
  }
  __chkstk_darwin(v4);
  OS_dispatch_queue.sync<A>(execute:)();
  type metadata accessor for RDManualSortIDAdapter();
  swift_allocObject();
  uint64_t v5 = v16;
  uint64_t v6 = (uint64_t)v3;
  char v7 = 0;
LABEL_10:
  uint64_t v10 = sub_1001A1374(v5, v6, v7);

  return v10;
}

uint64_t sub_1004884E8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v91 = sub_100094134(&qword_1009198B8);
  uint64_t v88 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v90 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v105[0] = a1[4];
    __chkstk_darwin(v8);
    swift_bridgeObjectRetain();
    sub_100094134(&qword_100911CB0);
    sub_1000967F4((unint64_t *)&qword_100911CB8, &qword_100911CB0);
    uint64_t v10 = Sequence.compactMapToSet<A>(_:)();
    swift_bridgeObjectRelease();
  }
  char v11 = sub_100489144(v10, *(void *)(v4 + 32));
  unint64_t v89 = a3;
  if (v11)
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *a1;
    uint64_t v13 = a1[1];
    unint64_t v15 = a1[2];
    uint64_t v14 = a1[3];
    uint64_t v16 = a1[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_80:
    uint64_t v84 = v89;
    *unint64_t v89 = v12;
    v84[1] = v13;
    v84[2] = v15;
    v84[3] = v14;
    v84[4] = v16;
    return result;
  }
  uint64_t v87 = 0;
  sub_10048612C(v10, v102);
  sub_10048612C(v10, v105);
  swift_bridgeObjectRelease();
  uint64_t v110 = v102[0];
  uint64_t v100 = v102[0];
  uint64_t v98 = v105[0];
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  BidirectionalCollection<>.difference<A>(from:)();
  sub_100094134(&qword_1009198C0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v95 = MutableOrderedSet.init(_:)();
  swift_allocObject();
  uint64_t v94 = MutableOrderedSet.init(_:)();
  uint64_t v109 = v105[1];
  sub_1000F5C48((uint64_t)&v109);
  uint64_t v108 = v105[2];
  sub_1000F5C48((uint64_t)&v108);
  uint64_t v107 = v105[3];
  sub_1000F5C48((uint64_t)&v107);
  uint64_t v106 = v105[4];
  sub_1000F5C48((uint64_t)&v106);
  uint64_t v93 = v4;
  uint64_t v18 = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  uint64_t v19 = CollectionDifference.removals.getter();
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v92 = v19;
  if (v20)
  {
    unint64_t v21 = (unsigned char *)(v19 + 40 * v20 + 25);
    do
    {
      if (*v21 == 1)
      {
        uint64_t v23 = *(void *)(v21 - 17);
        uint64_t v100 = *(void *)(v21 - 25);
        uint64_t v22 = v100;
        uint64_t v101 = v23;
        sub_10048ACD8();
        swift_bridgeObjectRetain();
        MutableOrderedSet.remove(_:)();
        swift_bridgeObjectRetain();
        unint64_t v24 = sub_1001806F8(v22, v23);
        char v26 = v25;
        swift_bridgeObjectRelease();
        if (v26)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v98 = v18;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100319638();
            uint64_t v18 = v98;
          }
          swift_bridgeObjectRelease();
          sub_1002C2184(v24, v18);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        MutableOrderedSet.remove(_:)();
        swift_bridgeObjectRelease();
        sub_10048ACE0();
      }
      v21 -= 40;
      --v20;
    }
    while (v20);
  }
  swift_bridgeObjectRelease();
  char v28 = MutableOrderedSet.isEmpty.getter();
  uint64_t v29 = *(void *)(CollectionDifference.insertions.getter() + 16);
  if (v28)
  {
    uint64_t v30 = v93;
    if (v29)
    {
      uint64_t v31 = swift_bridgeObjectRetain() + 40;
      unint64_t v32 = _swiftEmptyArrayStorage;
      do
      {
        if ((*(unsigned char *)(v31 + 25) & 1) == 0)
        {
          uint64_t v35 = *(void *)v31;
          uint64_t v34 = *(void *)(v31 + 8);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v32 = sub_100308F88(0, v32[2] + 1, 1, v32);
          }
          unint64_t v37 = v32[2];
          unint64_t v36 = v32[3];
          if (v37 >= v36 >> 1) {
            unint64_t v32 = sub_100308F88((void *)(v36 > 1), v37 + 1, 1, v32);
          }
          _OWORD v32[2] = v37 + 1;
          id v33 = &v32[2 * v37];
          v33[4] = v35;
          v33[5] = v34;
          uint64_t v30 = v93;
        }
        v31 += 40;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v32 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    MutableOrderedSet.addValues(from:)((Swift::OpaquePointer)v32);
    goto LABEL_52;
  }
  uint64_t v30 = v93;
  if (!v29)
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  uint64_t v86 = swift_bridgeObjectRetain();
  id v38 = (unsigned char *)(v86 + 65);
  while (1)
  {
    if (*v38) {
      goto LABEL_31;
    }
    uint64_t v39 = *(void *)(v38 - 33);
    uint64_t v40 = *(void *)(v38 - 17);
    int v41 = *(v38 - 1);
    uint64_t v100 = *(void *)(v38 - 25);
    uint64_t v101 = v40;
    LODWORD(v92) = v41;
    if (!v39)
    {
      sub_10048ACD8();
      swift_bridgeObjectRetain();
      MutableOrderedSet.value(at:)();
      if (!v97) {
        goto LABEL_47;
      }
      uint64_t v98 = v96;
      uint64_t v99 = v97;
      MutableOrderedSet.index(of:)();
      if (v44)
      {
        swift_bridgeObjectRelease();
LABEL_47:
        MutableOrderedSet.add(_:)();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      MutableOrderedSet.insert(_:at:)();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    if (__OFSUB__(v39, 1)) {
      goto LABEL_83;
    }
    if (v39 - 1 < 0) {
      goto LABEL_86;
    }
    sub_10048ACD8();
    swift_bridgeObjectRetain();
    MutableOrderedSet.value(at:)();
    if (v97) {
      break;
    }
LABEL_28:
    MutableOrderedSet.add(_:)();
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    sub_10048ACE0();
LABEL_31:
    v38 += 40;
    if (!--v29)
    {
      swift_bridgeObjectRelease_n();
LABEL_53:
      uint64_t v45 = v102[1];
      swift_bridgeObjectRetain();
      char v46 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v100 = v18;
      uint64_t v47 = v87;
      sub_100489B34(v45, (uint64_t)sub_10048A160, 0, v46, &v100);
      if (v47) {
        goto LABEL_87;
      }
      uint64_t v13 = v100;
      swift_bridgeObjectRelease();
      uint64_t v48 = MutableOrderedSet.array.getter();
      unint64_t v15 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v49 = *(void *)(v48 + 16);
      if (!v49)
      {
LABEL_79:
        swift_bridgeObjectRelease();
        uint64_t v81 = *(void *)(v30 + 24);
        swift_bridgeObjectRetain();
        uint64_t v82 = swift_bridgeObjectRetain();
        uint64_t v14 = sub_100483D4C(v82, v81);
        sub_1000F5C48((uint64_t)&v110);
        swift_bridgeObjectRelease();
        uint64_t v100 = v103;
        sub_1000F5C48((uint64_t)&v100);
        swift_bridgeObjectRelease();
        uint64_t v98 = v104;
        sub_1000F5C48((uint64_t)&v98);
        uint64_t v83 = swift_bridgeObjectRetain();
        uint64_t v16 = sub_1001261C0(v83);
        uint64_t v12 = MutableOrderedSet.array.getter();
        swift_release();
        swift_release();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v90, v91);
        goto LABEL_80;
      }
      v85[2] = 0;
      uint64_t v86 = v45;
      uint64_t v87 = v13;
      uint64_t v50 = v103;
      swift_bridgeObjectRetain();
      v85[1] = v48;
      Swift::String v51 = (uint64_t *)(v48 + 40);
      uint64_t v92 = v50;
      while (1)
      {
        uint64_t v54 = *(v51 - 1);
        uint64_t v53 = *v51;
        uint64_t v55 = *(void *)(v50 + 16);
        swift_bridgeObjectRetain();
        if (v55 && (unint64_t v56 = sub_1001806F8(v54, v53), (v57 & 1) != 0))
        {
          Swift::String v58 = (uint64_t *)(*(void *)(v50 + 56) + 16 * v56);
          uint64_t v59 = *v58;
          uint64_t v60 = v58[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v61 = *(void *)(v30 + 16);
          if (!*(void *)(v61 + 16))
          {
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
          swift_bridgeObjectRetain();
          unint64_t v62 = sub_1001806F8(v54, v53);
          if ((v63 & 1) == 0)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_58;
          }
          id v64 = (uint64_t *)(*(void *)(v61 + 56) + 16 * v62);
          uint64_t v59 = *v64;
          uint64_t v60 = v64[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        unint64_t v65 = v15;
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v100 = v15;
        unint64_t v68 = sub_1001806F8(v54, v53);
        uint64_t v69 = *(void *)(v15 + 16);
        BOOL v70 = (v67 & 1) == 0;
        uint64_t v71 = v69 + v70;
        if (__OFADD__(v69, v70))
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_86;
        }
        char v72 = v67;
        if (*(void *)(v65 + 24) >= v71)
        {
          if (v66)
          {
            uint64_t v75 = (void *)v100;
            if ((v67 & 1) == 0) {
              goto LABEL_72;
            }
          }
          else
          {
            sub_100318A14();
            uint64_t v75 = (void *)v100;
            if ((v72 & 1) == 0) {
              goto LABEL_72;
            }
          }
        }
        else
        {
          sub_10030E654(v71, v66);
          unint64_t v73 = sub_1001806F8(v54, v53);
          if ((v72 & 1) != (v74 & 1)) {
            goto LABEL_85;
          }
          unint64_t v68 = v73;
          uint64_t v75 = (void *)v100;
          if ((v72 & 1) == 0)
          {
LABEL_72:
            v75[(v68 >> 6) + 8] |= 1 << v68;
            uint64_t v76 = (uint64_t *)(v75[6] + 16 * v68);
            uint64_t *v76 = v54;
            v76[1] = v53;
            uint64_t v77 = (void *)(v75[7] + 16 * v68);
            void *v77 = v59;
            v77[1] = v60;
            uint64_t v78 = v75[2];
            BOOL v79 = __OFADD__(v78, 1);
            uint64_t v80 = v78 + 1;
            if (v79) {
              goto LABEL_82;
            }
            unint64_t v15 = (unint64_t)v75;
            void v75[2] = v80;
            swift_bridgeObjectRetain();
            goto LABEL_57;
          }
        }
        unint64_t v15 = (unint64_t)v75;
        id v52 = (void *)(v75[7] + 16 * v68);
        swift_bridgeObjectRelease();
        *id v52 = v59;
        v52[1] = v60;
LABEL_57:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v30 = v93;
        uint64_t v50 = v92;
LABEL_58:
        v51 += 2;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v13 = v87;
          goto LABEL_79;
        }
      }
    }
  }
  uint64_t v98 = v96;
  uint64_t v99 = v97;
  uint64_t v42 = MutableOrderedSet.index(of:)();
  if (v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if (v42 == -1) {
    goto LABEL_84;
  }
  MutableOrderedSet.insert(_:at:)();
  swift_bridgeObjectRelease();
  if ((v39 & 0x8000000000000000) == 0)
  {
LABEL_44:
    MutableOrderedSet.insert(_:at:)();
    goto LABEL_29;
  }
LABEL_86:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_87:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for REMManualOrderingCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1004890F4()
{
  return &off_1008C6C50;
}

_UNKNOWN **sub_100489100()
{
  return &off_1008C6C20;
}

NSString sub_10048910C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100942260 = (uint64_t)result;
  return result;
}

uint64_t sub_100489144(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v31 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      if (!*(void *)(v4 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    int64_t v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v30) {
        goto LABEL_41;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v30) {
          goto LABEL_41;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    if (!*(void *)(v4 + 16))
    {
LABEL_40:
      uint64_t v2 = 0;
      goto LABEL_42;
    }
LABEL_25:
    uint64_t v16 = v3;
    id v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = v4;
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v24 = *(void *)(v21 + 48);
    char v25 = (void *)(v24 + 16 * v23);
    BOOL v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        char v28 = (void *)(v24 + 16 * v23);
        BOOL v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
LABEL_42:
      sub_1000C1AF8();
      return v2;
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }
  int64_t v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_41:
    uint64_t v2 = 1;
    goto LABEL_42;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v12 = i + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void sub_100489438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.count.getter();
    unint64_t v6 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    if (*(void *)(a1 + 16) < v5) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (__CocoaSet.count.getter() < v5) {
    return;
  }
LABEL_7:
  if (v4)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100094134(&qword_1009148E0);
    sub_1000967F4(&qword_10091A8B0, &qword_1009148E0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v37;
    uint64_t v33 = v38;
    uint64_t v7 = v39;
    uint64_t v8 = v40;
    unint64_t v9 = v41;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v33 = v2 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(v2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
  }
  sub_100094134(&qword_1009148E0);
  int64_t v32 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v35 = a1 + 56;
  while (1)
  {
    while (1)
    {
      unint64_t v14 = v9;
      uint64_t v15 = v8;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_46;
      }
      swift_dynamicCast();
      id v17 = v36;
      uint64_t v34 = v14;
      if (v6) {
        goto LABEL_14;
      }
LABEL_36:
      uint64_t v22 = v2;
      if (!*(void *)(a1 + 16)) {
        goto LABEL_43;
      }
      unint64_t v23 = v6;
      Swift::Int v24 = NSObject._rawHashValue(seed:)(*(void *)(a1 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(a1 + 32);
      unint64_t v26 = v24 & ~v25;
      if (((*(void *)(v35 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
        goto LABEL_43;
      }
      id v27 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
      char v28 = static NSObject.== infix(_:_:)();

      if ((v28 & 1) == 0)
      {
        uint64_t v29 = ~v25;
        while (1)
        {
          unint64_t v26 = (v26 + 1) & v29;
          if (((*(void *)(v35 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
            break;
          }
          id v30 = *(id *)(*(void *)(a1 + 48) + 8 * v26);
          char v31 = static NSObject.== infix(_:_:)();

          if (v31) {
            goto LABEL_42;
          }
        }
LABEL_43:

LABEL_44:
        sub_1000C1AF8();
        return;
      }
LABEL_42:

      uint64_t v2 = v22;
      unint64_t v6 = v23;
      unint64_t v9 = v34;
    }
    if (v9)
    {
      uint64_t v34 = (v9 - 1) & v9;
      unint64_t v16 = __clz(__rbit64(v9)) | (v8 << 6);
      goto LABEL_35;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      return;
    }
    if (v18 >= v32) {
      goto LABEL_46;
    }
    unint64_t v19 = *(void *)(v33 + 8 * v18);
    ++v8;
    if (!v19)
    {
      uint64_t v8 = v15 + 2;
      if (v15 + 2 >= v32) {
        goto LABEL_46;
      }
      unint64_t v19 = *(void *)(v33 + 8 * v8);
      if (!v19)
      {
        uint64_t v8 = v15 + 3;
        if (v15 + 3 >= v32) {
          goto LABEL_46;
        }
        unint64_t v19 = *(void *)(v33 + 8 * v8);
        if (!v19)
        {
          uint64_t v8 = v15 + 4;
          if (v15 + 4 >= v32) {
            goto LABEL_46;
          }
          unint64_t v19 = *(void *)(v33 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_34:
    uint64_t v34 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_35:
    id v17 = *(void **)(*(void *)(v2 + 48) + 8 * v16);
    unint64_t v36 = v17;
    id v21 = v17;
    if (!v6) {
      goto LABEL_36;
    }
LABEL_14:
    char v13 = __CocoaSet.contains(_:)();

    unint64_t v9 = v34;
    if ((v13 & 1) == 0) {
      goto LABEL_44;
    }
  }
  uint64_t v20 = v15 + 5;
  while (v32 != v20)
  {
    unint64_t v19 = *(void *)(v33 + 8 * v20++);
    if (v19)
    {
      uint64_t v8 = v20 - 1;
      goto LABEL_34;
    }
  }
LABEL_46:
  sub_1000C1AF8();
}

uint64_t sub_100489864(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_1001A65E8();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  char v13 = (void *)*a5;
  unint64_t v15 = sub_1001806F8(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      uint64_t v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100318398();
      uint64_t v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    unint64_t v23 = (uint64_t *)(v22[6] + 16 * v15);
    *unint64_t v23 = v10;
    v23[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v26;
LABEL_13:
    uint64_t v27 = sub_1001A65E8();
    if (v28)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      do
      {
        uint64_t v35 = (void *)*a5;
        unint64_t v37 = sub_1001806F8(v30, v31);
        uint64_t v38 = v35[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39)) {
          goto LABEL_25;
        }
        char v41 = v36;
        if (v35[3] < v40)
        {
          sub_10030D8F0(v40, 1);
          unint64_t v42 = sub_1001806F8(v30, v31);
          if ((v41 & 1) != (v43 & 1)) {
            goto LABEL_27;
          }
          unint64_t v37 = v42;
        }
        char v44 = (void *)*a5;
        if (v41)
        {
          swift_bridgeObjectRelease();
          *(void *)(v44[7] + 8 * v37) = v32;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          uint64_t v45 = (uint64_t *)(v44[6] + 16 * v37);
          *uint64_t v45 = v30;
          v45[1] = v31;
          *(void *)(v44[7] + 8 * v37) = v32;
          uint64_t v46 = v44[2];
          BOOL v25 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v25) {
            goto LABEL_26;
          }
          _OWORD v44[2] = v47;
        }
        uint64_t v30 = sub_1001A65E8();
        uint64_t v31 = v33;
        uint64_t v32 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000C1AF8();
    return swift_release();
  }
  sub_10030D8F0(v18, a4 & 1);
  unint64_t v20 = sub_1001806F8(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    uint64_t v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    *(void *)(v22[7] + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100489B34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_1001A6770();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  char v13 = (void *)*a5;
  unint64_t v15 = sub_1001806F8(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      uint64_t v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100319638();
      uint64_t v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v24 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v24 = v10;
    v24[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v25 = v22[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    uint64_t v28 = sub_1001A6770();
    if (v29)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      do
      {
        unint64_t v37 = (void *)*a5;
        unint64_t v39 = sub_1001806F8(v31, v32);
        uint64_t v40 = v37[2];
        BOOL v41 = (v38 & 1) == 0;
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          goto LABEL_25;
        }
        char v43 = v38;
        if (v37[3] < v42)
        {
          sub_100310668(v42, 1);
          unint64_t v44 = sub_1001806F8(v31, v32);
          if ((v43 & 1) != (v45 & 1)) {
            goto LABEL_27;
          }
          unint64_t v39 = v44;
        }
        uint64_t v46 = (void *)*a5;
        if (v43)
        {
          swift_bridgeObjectRelease();
          uint64_t v34 = v46[7];
          swift_bridgeObjectRelease();
          *(void *)(v34 + 8 * v39) = v33;
        }
        else
        {
          v46[(v39 >> 6) + 8] |= 1 << v39;
          uint64_t v47 = (uint64_t *)(v46[6] + 16 * v39);
          uint64_t *v47 = v31;
          v47[1] = v32;
          *(void *)(v46[7] + 8 * v39) = v33;
          uint64_t v48 = v46[2];
          BOOL v26 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v26) {
            goto LABEL_26;
          }
          v46[2] = v49;
        }
        uint64_t v31 = sub_1001A6770();
        uint64_t v32 = v35;
        uint64_t v33 = v36;
      }
      while (v35);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000C1AF8();
    return swift_release();
  }
  sub_100310668(v18, a4 & 1);
  unint64_t v20 = sub_1001806F8(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    uint64_t v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v23 = v22[7];
    swift_bridgeObjectRelease();
    *(void *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100489E1C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100489F80((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_100489F80((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_100489F80(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v20 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_5:
    swift_bridgeObjectRetain();
    v13._uint64_t countAndFlagsBits = 0x7C6C61636F6CLL;
    v13._object = (void *)0xE600000000000000;
    Swift::Bool v14 = String.hasPrefix(_:)(v13);
    uint64_t result = swift_bridgeObjectRelease();
    if (v14)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_1002402D0(v20, a2, v4, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10048A148@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10048A160@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10048A1A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v52 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v54 = a3 + 56;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    while (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      if (*(void *)(a3 + 16)) {
        goto LABEL_26;
      }
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v15 >= v52) {
      goto LABEL_56;
    }
    unint64_t v16 = *(void *)(v51 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v52) {
        goto LABEL_56;
      }
      unint64_t v16 = *(void *)(v51 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v52) {
          goto LABEL_56;
        }
        unint64_t v16 = *(void *)(v51 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v52) {
            goto LABEL_56;
          }
          unint64_t v16 = *(void *)(v51 + 8 * v9);
          if (!v16)
          {
            int64_t v17 = v15 + 4;
            if (v17 >= v52)
            {
LABEL_56:
              swift_release();
              return (uint64_t)a1;
            }
            unint64_t v16 = *(void *)(v51 + 8 * v17);
            int64_t v9 = v17;
            if (!v16) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v9 << 6);
    if (*(void *)(a3 + 16))
    {
LABEL_26:
      uint64_t v18 = a4;
      char v19 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v14);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v22 = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v24 = v22 & ~v23;
      if (((*(void *)(v54 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      BOOL v26 = (void *)(v25 + 16 * v24);
      BOOL v27 = *v26 == v21 && v26[1] == v20;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v41 = ~v23;
        do
        {
          unint64_t v24 = (v24 + 1) & v41;
          if (((*(void *)(v54 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            goto LABEL_7;
          }
          uint64_t v42 = (void *)(v25 + 16 * v24);
          BOOL v43 = *v42 == v21 && v42[1] == v20;
        }
        while (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      a4 = v18;
      uint64_t v28 = *(void *)(v18 + 16);
      swift_bridgeObjectRetain();
      if (v28 && (unint64_t v29 = sub_1001806F8(v21, v20), (v30 & 1) != 0))
      {
        uint64_t v31 = *(void *)(*(void *)(v18 + 56) + 8 * v29);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v33 = sub_1001806F8(v21, v20);
        uint64_t v35 = a1[2];
        BOOL v36 = (v34 & 1) == 0;
        BOOL v37 = __OFADD__(v35, v36);
        uint64_t v38 = v35 + v36;
        if (v37) {
          goto LABEL_59;
        }
        char v39 = v34;
        if (a1[3] >= v38)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v48 = v33;
            sub_100318398();
            unint64_t v33 = v48;
          }
        }
        else
        {
          sub_10030D8F0(v38, isUniquelyReferenced_nonNull_native);
          unint64_t v33 = sub_1001806F8(v21, v20);
          if ((v39 & 1) != (v40 & 1)) {
            goto LABEL_61;
          }
        }
        if (v39)
        {
          *(void *)(a1[7] + 8 * v33) = v31;
        }
        else
        {
          a1[(v33 >> 6) + 8] |= 1 << v33;
          char v45 = (uint64_t *)(a1[6] + 16 * v33);
          *char v45 = v21;
          v45[1] = v20;
          *(void *)(a1[7] + 8 * v33) = v31;
          uint64_t v46 = a1[2];
          BOOL v37 = __OFADD__(v46, 1);
          uint64_t v47 = v46 + 1;
          if (v37) {
            goto LABEL_60;
          }
          a1[2] = v47;
          swift_bridgeObjectRetain();
        }
LABEL_55:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v10 = sub_1001806F8(v21, v20);
        char v12 = v11;
        swift_bridgeObjectRelease();
        if (v12)
        {
          uint64_t v44 = (uint64_t)a1;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100318398();
            uint64_t v44 = (uint64_t)a1;
          }
          swift_bridgeObjectRelease();
          a1 = (void *)v44;
          sub_1002C1DD0(v10, v44);
          goto LABEL_55;
        }
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        a4 = v18;
      }
    }
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v52) {
      goto LABEL_56;
    }
    unint64_t v16 = *(void *)(v51 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_25;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10048A61C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = result + 40;
    uint64_t v7 = -(uint64_t)v3;
    unint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v23 = result + 40;
    while (1)
    {
      uint64_t v25 = v8;
      uint64_t v9 = v5 <= v3 ? v3 : v5;
      uint64_t v10 = -v9;
      for (int64_t i = (uint64_t *)(v6 + 16 * v5++); ; i += 2)
      {
        if (v10 + v5 == 1)
        {
          __break(1u);
          return result;
        }
        if (*(void *)(a2 + 16)) {
          break;
        }
LABEL_8:
        ++v5;
        if (v7 + v5 == 1) {
          return (uint64_t)v25;
        }
      }
      uint64_t v13 = *(i - 1);
      uint64_t v12 = *i;
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_1001806F8(v13, v12);
      if ((v15 & 1) == 0) {
        break;
      }
      unint64_t v16 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v14);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      char v19 = sub_1001CBC20(v18, v17, a3);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        break;
      }
      unint64_t v8 = v25;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1001DE058(0, v25[2] + 1, 1);
        unint64_t v8 = v25;
      }
      unint64_t v21 = v8[2];
      unint64_t v20 = v8[3];
      if (v21 >= v20 >> 1)
      {
        uint64_t result = sub_1001DE058(v20 > 1, v21 + 1, 1);
        unint64_t v8 = v25;
      }
      _OWORD v8[2] = v21 + 1;
      Swift::Int v22 = &v8[2 * v21];
      v22[4] = v13;
      void v22[5] = v12;
      unint64_t v3 = v24;
      uint64_t v6 = v23;
      if (!(v7 + v5)) {
        return (uint64_t)v8;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_10048A7C0(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 56;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 56);
  char v30 = _swiftEmptyArrayStorage;
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    while (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      if (*(void *)(a2 + 16)) {
        goto LABEL_25;
      }
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v14 >= v11) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v11) {
            goto LABEL_39;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
    if (*(void *)(a2 + 16))
    {
LABEL_25:
      uint64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v13);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      swift_bridgeObjectRetain_n();
      unint64_t v20 = sub_1001806F8(v19, v18);
      if ((v21 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      double v22 = *(double *)(*(void *)(a2 + 56) + 8 * v20);
      swift_bridgeObjectRelease();
      if (qword_100907780 != -1) {
        swift_once();
      }
      BOOL v23 = v19 == qword_1009422F0 && v18 == *(void *)algn_1009422F8;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || v22 >= a3)
      {
        unint64_t v24 = v30;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v32 = v30;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1001DE058(0, v30[2] + 1, 1);
          unint64_t v24 = v30;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        unint64_t v27 = v26 + 1;
        if (v26 >= v25 >> 1)
        {
          unint64_t v31 = v26 + 1;
          unint64_t v29 = v24[2];
          uint64_t result = sub_1001DE058(v25 > 1, v26 + 1, 1);
          unint64_t v27 = v31;
          unint64_t v26 = v29;
          unint64_t v24 = v32;
        }
        uint64_t v24[2] = v27;
        char v30 = v24;
        uint64_t v28 = &v24[2 * v26];
        v28[4] = v19;
        v28[5] = v18;
      }
      else
      {
LABEL_5:
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_39:
    swift_release();
    return (uint64_t)v30;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_24;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10048AA78(void *a1, char *a2)
{
  uint64_t v4 = v2;
  uint64_t v32 = a2;
  unint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&double v7 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void **)(v4 + 16);
  id v11 = [v10 uuid:v7];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = UUID.uuidString.getter();
  int64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  unint64_t v15 = sub_1003835CC(v12, v14);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    int64_t v16 = v15;
    uint64_t v17 = v29;
    uint64_t v18 = v32;
    swift_bridgeObjectRelease();
    if (v16)
    {
      sub_100486C24(v17, v18, v16);
    }
    else
    {
      uint64_t v19 = self;
      uint64_t v30 = 0;
      unint64_t v31 = 0xE000000000000000;
      _StringGuts.grow(_:)(97);
      v20._object = (void *)0x80000001007D57F0;
      v20._uint64_t countAndFlagsBits = 0xD00000000000005FLL;
      String.append(_:)(v20);
      id v21 = v10;
      id v22 = [v21 description];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      v26._uint64_t countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);

      swift_bridgeObjectRelease();
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 internalErrorWithDebugDescription:v27];

      swift_willThrow();
    }
  }
}

uint64_t sub_10048ACD8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10048ACE0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10048ACE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10048AD28(*a1, a1[1], *(void *)(*(void *)(v2 + 16) + 24), *(void *)(*(void *)(v2 + 24) + 24));
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_10048AD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  if (*(void *)(a3 + 16))
  {
    unint64_t v8 = sub_1001806F8(a1, a2);
    if (v9)
    {
      if (!*(void *)(a4 + 16)) {
        return 0;
      }
      double v10 = *(double *)(*(void *)(a3 + 56) + 8 * v8);
      unint64_t v11 = sub_1001806F8(v5, a2);
      if ((v12 & 1) == 0 || v10 >= *(double *)(*(void *)(a4 + 56) + 8 * v11)) {
        return 0;
      }
    }
  }
  swift_bridgeObjectRetain();
  return v5;
}

unsigned char *storeEnumTagSinglePayload for REMManualOrderingCDIngestor.RelationshipKey(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10048AE78);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMManualOrderingCDIngestor.RelationshipKey()
{
  return &type metadata for REMManualOrderingCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMManualOrderingCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10048AF7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMManualOrderingCDIngestor.ValueKey()
{
  return &type metadata for REMManualOrderingCDIngestor.ValueKey;
}

uint64_t sub_10048AFB4()
{
  return sub_1000967F4(&qword_1009198C8, &qword_1009198D0);
}

unint64_t sub_10048AFF4()
{
  unint64_t result = qword_1009198D8;
  if (!qword_1009198D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009198D8);
  }
  return result;
}

uint64_t sub_10048B048()
{
  return sub_1000967F4(&qword_1009198E0, &qword_1009198E8);
}

unint64_t sub_10048B088()
{
  unint64_t result = qword_1009198F0;
  if (!qword_1009198F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009198F0);
  }
  return result;
}

unint64_t sub_10048B0DC(char a1)
{
  unint64_t result = 0x6854664F73796164;
  switch(a1)
  {
    case 3:
      unint64_t result = 0x4965746144646E65;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x636E657571657266;
      break;
    case 6:
      unint64_t result = 0x6C61767265746E69;
      break;
    case 7:
      unint64_t result = 0x664F7368746E6F6DLL;
      break;
    case 8:
      unint64_t result = 0x7469736F50746573;
      break;
    case 9:
      unint64_t result = 0x54664F736B656577;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10048B250(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_100919960);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000C0DE0(a1, a1[3]);
  sub_10048D758();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100096408(v3, (uint64_t)v17, &qword_100919968);
  sub_100096408((uint64_t)v17, (uint64_t)v11, &qword_100919968);
  HIBYTE(v10) = 0;
  sub_100094134(&qword_10091F060);
  sub_10048D800(&qword_100919970);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_100096408(v3 + 8, (uint64_t)v16, &qword_100919978);
    sub_100096408((uint64_t)v16, (uint64_t)v11, &qword_100919978);
    HIBYTE(v10) = 1;
    sub_100094134(&qword_100919948);
    sub_10048D864(&qword_100919980, (void (*)(void))sub_10048D8D4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408(v3 + 16, (uint64_t)v15, &qword_100919968);
    sub_100096408((uint64_t)v15, (uint64_t)v11, &qword_100919968);
    HIBYTE(v10) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100096408(v3 + 64, (uint64_t)v14, &qword_100919968);
    sub_100096408((uint64_t)v14, (uint64_t)v11, &qword_100919968);
    HIBYTE(v10) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408(v3 + 72, (uint64_t)v13, &qword_100919968);
    sub_100096408((uint64_t)v13, (uint64_t)v11, &qword_100919968);
    HIBYTE(v10) = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100096408(v3 + 80, (uint64_t)v12, &qword_100919968);
    sub_100096408((uint64_t)v12, (uint64_t)v11, &qword_100919968);
    HIBYTE(v10) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10048B694()
{
  return sub_10048B0DC(*v0);
}

uint64_t sub_10048B69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10048CBAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10048B6C4(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10048B6D0(uint64_t a1)
{
  unint64_t v2 = sub_10048D758();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10048B70C(uint64_t a1)
{
  unint64_t v2 = sub_10048D758();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10048B748@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10048D09C(a1, v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10048B7A4(void *a1)
{
  return sub_10048B250(a1);
}

BOOL sub_10048B7F0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  void v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  void v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10048BA9C((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_10048B85C(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_1009199A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10048DACC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10048B9C4(uint64_t a1)
{
  unint64_t v2 = sub_10048DACC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10048BA00(uint64_t a1)
{
  unint64_t v2 = sub_10048DACC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048BA3C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10048D928(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10048BA68(void *a1)
{
  return sub_10048B85C(a1);
}

BOOL sub_10048BA84(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_10048BA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (v4)
  {
    if (!v5 || !sub_100350808(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(int64x2_t **)(a1 + 8);
  uint64_t v7 = *(int64x2_t **)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    sub_100350874(v6, v7);
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  char v9 = *(void **)(a1 + 16);
  char v10 = *(void **)(a2 + 16);
  if (v9)
  {
    if (!v10 || !sub_100350808(v9, v10)) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  char v11 = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      char v11 = 1;
    }
    if (v11) {
      return 0;
    }
  }
  if (*(void *)(a1 + 40) != *(void *)(a2 + 40)
    || *(void *)(a1 + 48) != *(void *)(a2 + 48)
    || *(void *)(a1 + 56) != *(void *)(a2 + 56))
  {
    return 0;
  }
  char v12 = *(void **)(a1 + 64);
  unint64_t v13 = *(void **)(a2 + 64);
  if (v12)
  {
    if (!v13 || !sub_100350808(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  int64_t v14 = *(void **)(a1 + 72);
  unint64_t v15 = *(void **)(a2 + 72);
  if (v14)
  {
    if (!v15 || !sub_100350808(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  int64_t v16 = *(void **)(a1 + 80);
  uint64_t v17 = *(void **)(a2 + 80);
  if (v16) {
    return v17 && sub_100350808(v16, v17);
  }
  return !v17;
}

void sub_10048BBE0(id a1@<X0>, void *a2@<X8>)
{
  uint64_t v104 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v105 = (char *)&v98 - v7;
  uint64_t v8 = type metadata accessor for Date();
  unint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v101 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a1 daysOfTheMonth:v10];
  id v107 = a1;
  unint64_t v108 = v9;
  uint64_t v106 = v5;
  if (!v12)
  {
    uint64_t v103 = 0;
    goto LABEL_16;
  }
  unint64_t v13 = v12;
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v103 = _swiftEmptyArrayStorage;
    a1 = v107;
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE694(0, v15 & ~(v15 >> 63), 0);
  if (v15 < 0)
  {
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v16 = 0;
  uint64_t v17 = v109;
  do
  {
    uint64_t v18 = v17;
    if ((v14 & 0xC000000000000001) != 0) {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v19 = *(id *)(v14 + 8 * v16 + 32);
    }
    Swift::String v20 = v19;
    id v21 = [v19 integerValue];

    uint64_t v17 = v18;
    uint64_t v109 = v18;
    unint64_t v22 = v18[2];
    unint64_t v23 = v17[3];
    if (v22 >= v23 >> 1)
    {
      sub_1001DE694(v23 > 1, v22 + 1, 1);
      uint64_t v17 = v109;
    }
    ++v16;
    v17[2] = v22 + 1;
    v17[v22 + 4] = v21;
  }
  while (v15 != v16);
  uint64_t v103 = v17;
  swift_bridgeObjectRelease();
  a1 = v107;
  unint64_t v9 = v108;
  uint64_t v5 = v106;
LABEL_16:
  id v24 = [a1 daysOfTheWeek];
  if (!v24)
  {
    uint64_t v102 = 0;
    goto LABEL_31;
  }
  unint64_t v25 = v24;
  sub_1000963CC(0, &qword_1009127D8);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v26 >> 62))
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v27) {
      goto LABEL_19;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v102 = _swiftEmptyArrayStorage;
    a1 = v107;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE66C(0, v27 & ~(v27 >> 63), 0);
  if (v27 < 0)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  id v100 = (id)v8;
  uint64_t v28 = 0;
  unint64_t v29 = v109;
  do
  {
    uint64_t v30 = v29;
    if ((v26 & 0xC000000000000001) != 0) {
      id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v31 = *(id *)(v26 + 8 * v28 + 32);
    }
    uint64_t v32 = v31;
    id v33 = [v31 dayOfTheWeek];
    id v34 = [v32 weekNumber];

    unint64_t v29 = v30;
    uint64_t v109 = v30;
    unint64_t v35 = v30[2];
    unint64_t v36 = v29[3];
    if (v35 >= v36 >> 1)
    {
      sub_1001DE66C(v36 > 1, v35 + 1, 1);
      unint64_t v29 = v109;
    }
    ++v28;
    id v29[2] = v35 + 1;
    BOOL v37 = &v29[2 * v35];
    v37[4] = v33;
    v37[5] = v34;
  }
  while (v27 != v28);
  uint64_t v102 = v29;
  swift_bridgeObjectRelease();
  a1 = v107;
  unint64_t v9 = v108;
  uint64_t v8 = (uint64_t)v100;
  uint64_t v5 = v106;
LABEL_31:
  id v38 = [a1 daysOfTheYear];
  if (!v38)
  {
    uint64_t v99 = 0;
    goto LABEL_46;
  }
  char v39 = v38;
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v40 >> 62))
  {
    uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v41) {
      goto LABEL_34;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v99 = _swiftEmptyArrayStorage;
    a1 = v107;
    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v41) {
    goto LABEL_45;
  }
LABEL_34:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE694(0, v41 & ~(v41 >> 63), 0);
  if (v41 < 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v42 = 0;
  BOOL v43 = v109;
  do
  {
    uint64_t v44 = v43;
    if ((v40 & 0xC000000000000001) != 0) {
      id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v45 = *(id *)(v40 + 8 * v42 + 32);
    }
    uint64_t v46 = v45;
    id v47 = [v45 integerValue];

    BOOL v43 = v44;
    uint64_t v109 = v44;
    unint64_t v48 = v44[2];
    unint64_t v49 = v43[3];
    if (v48 >= v49 >> 1)
    {
      sub_1001DE694(v49 > 1, v48 + 1, 1);
      BOOL v43 = v109;
    }
    ++v42;
    v43[2] = v48 + 1;
    v43[v48 + 4] = v47;
  }
  while (v41 != v42);
  uint64_t v99 = v43;
  swift_bridgeObjectRelease();
  a1 = v107;
  unint64_t v9 = v108;
  uint64_t v5 = v106;
LABEL_46:
  id v50 = [a1 recurrenceEnd];
  if (!v50)
  {
    uint64_t v53 = (uint64_t)v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v105, 1, 1, v8);
LABEL_52:
    sub_1000EACF4(v53);
    int v54 = 1;
    uint64_t v55 = 0;
    goto LABEL_54;
  }
  uint64_t v51 = v50;
  id v52 = [v50 endDate];

  if (v52)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
  }
  uint64_t v53 = (uint64_t)v105;
  sub_100096408((uint64_t)v5, (uint64_t)v105, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v53, 1, v8) == 1) {
    goto LABEL_52;
  }
  unint64_t v56 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v101, v53, v8);
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v55 = v57;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v56, v8);
  int v54 = 0;
LABEL_54:
  Swift::String v58 = (char *)[a1 firstDayOfTheWeek];
  uint64_t v59 = (char *)[a1 frequency];
  id v100 = [a1 interval];
  id v60 = [a1 monthsOfTheYear];
  LODWORD(v106) = v54;
  uint64_t v105 = v58;
  uint64_t v101 = v59;
  if (!v60)
  {
    unint64_t v65 = 0;
    goto LABEL_69;
  }
  uint64_t v61 = v60;
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v62 >> 62))
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v63) {
      goto LABEL_57;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    unint64_t v65 = _swiftEmptyArrayStorage;
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_68;
  }
LABEL_57:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE694(0, v63 & ~(v63 >> 63), 0);
  if (v63 < 0)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v64 = 0;
  unint64_t v65 = v109;
  do
  {
    if ((v62 & 0xC000000000000001) != 0) {
      id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v66 = *(id *)(v62 + 8 * v64 + 32);
    }
    char v67 = v66;
    id v68 = [v66 integerValue];

    uint64_t v109 = v65;
    unint64_t v70 = v65[2];
    unint64_t v69 = v65[3];
    if (v70 >= v69 >> 1)
    {
      sub_1001DE694(v69 > 1, v70 + 1, 1);
      unint64_t v65 = v109;
    }
    ++v64;
    v65[2] = v70 + 1;
    v65[v70 + 4] = v68;
  }
  while (v63 != v64);
  swift_bridgeObjectRelease();
  a1 = v107;
LABEL_69:
  id v71 = [a1 setPositions];
  if (!v71)
  {
    uint64_t v76 = 0;
    goto LABEL_84;
  }
  char v72 = v71;
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v73 >> 62))
  {
    uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v74) {
      goto LABEL_72;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    uint64_t v76 = _swiftEmptyArrayStorage;
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v74) {
    goto LABEL_83;
  }
LABEL_72:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE694(0, v74 & ~(v74 >> 63), 0);
  if (v74 < 0)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v75 = 0;
  uint64_t v76 = v109;
  do
  {
    if ((v73 & 0xC000000000000001) != 0) {
      id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v77 = *(id *)(v73 + 8 * v75 + 32);
    }
    uint64_t v78 = v77;
    id v79 = [v77 integerValue];

    uint64_t v109 = v76;
    unint64_t v81 = v76[2];
    unint64_t v80 = v76[3];
    if (v81 >= v80 >> 1)
    {
      sub_1001DE694(v80 > 1, v81 + 1, 1);
      uint64_t v76 = v109;
    }
    ++v75;
    v76[2] = v81 + 1;
    v76[v81 + 4] = v79;
  }
  while (v74 != v75);
  swift_bridgeObjectRelease();
  a1 = v107;
LABEL_84:
  id v82 = [a1 weeksOfTheYear];
  if (!v82)
  {

    uint64_t v87 = 0;
LABEL_99:
    uint64_t v95 = v104;
    uint64_t v96 = v102;
    void *v104 = v103;
    v95[1] = v96;
    v95[2] = v99;
    uint64_t v95[3] = v55;
    *((unsigned char *)v95 + 32) = (_BYTE)v106;
    uint64_t v97 = v101;
    v95[5] = v105;
    v95[6] = v97;
    v95[7] = v100;
    v95[8] = v65;
    v95[9] = v76;
    v95[10] = v87;
    return;
  }
  uint64_t v83 = v82;
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v84 >> 62))
  {
    uint64_t v85 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v85) {
      goto LABEL_87;
    }
    goto LABEL_98;
  }
  swift_bridgeObjectRetain();
  uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v85)
  {
LABEL_98:
    swift_bridgeObjectRelease();

    uint64_t v87 = _swiftEmptyArrayStorage;
    goto LABEL_99;
  }
LABEL_87:
  uint64_t v109 = _swiftEmptyArrayStorage;
  sub_1001DE694(0, v85 & ~(v85 >> 63), 0);
  if ((v85 & 0x8000000000000000) == 0)
  {
    uint64_t v86 = 0;
    uint64_t v87 = v109;
    unint64_t v108 = v84 & 0xC000000000000001;
    unint64_t v88 = v84;
    uint64_t v89 = v85;
    do
    {
      if (v108) {
        id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v90 = *(id *)(v84 + 8 * v86 + 32);
      }
      uint64_t v91 = v90;
      id v92 = [v90 integerValue];

      uint64_t v109 = v87;
      unint64_t v94 = v87[2];
      unint64_t v93 = v87[3];
      if (v94 >= v93 >> 1)
      {
        sub_1001DE694(v93 > 1, v94 + 1, 1);
        uint64_t v87 = v109;
      }
      ++v86;
      void v87[2] = v94 + 1;
      v87[v94 + 4] = v92;
      unint64_t v84 = v88;
    }
    while (v89 != v86);
    swift_bridgeObjectRelease();

    goto LABEL_99;
  }
LABEL_105:
  __break(1u);
}

uint64_t destroy for RDSavedRecurrenceRule()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RDSavedRecurrenceRule(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedRecurrenceRule(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedRecurrenceRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedRecurrenceRule()
{
  return &type metadata for RDSavedRecurrenceRule;
}

ValueMetadata *type metadata accessor for RDSavedDayOfWeek()
{
  return &type metadata for RDSavedDayOfWeek;
}

uint64_t sub_10048CBAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6854664F73796164 && a2 == 0xEE0068746E6F4D65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6854664F73796164 && a2 == 0xED00006B65655765 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6854664F73796164 && a2 == 0xED00007261655965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4965746144646E65 && a2 == 0xEF6C61767265746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007C7010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x664F7368746E6F6DLL && a2 == 0xEF72616559656854 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7469736F50746573 && a2 == 0xEC000000736E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x54664F736B656577 && a2 == 0xEE00726165596568)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_10048D09C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_100919938);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10048D758();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  id v33 = a2;
  sub_100094134(&qword_10091F060);
  char v35 = 0;
  uint64_t v9 = sub_10048D800(&qword_10090F898);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v10 = v36;
  sub_100094134(&qword_100919948);
  char v35 = 1;
  sub_10048D864(&qword_100919950, (void (*)(void))sub_10048D7AC);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v35 = 2;
  uint64_t v32 = v36;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v31 = v9;
  uint64_t v11 = v36;
  LOBYTE(v36) = 3;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v34 = v11;
  int v29 = v13;
  uint64_t v30 = v12;
  LOBYTE(v36) = 4;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v36) = 5;
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v36) = 6;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v14;
  char v35 = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v35 = 8;
  uint64_t v25 = v36;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v15 = v36;
  char v35 = 9;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v36;
  swift_bridgeObjectRetain();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v25;
  swift_bridgeObjectRelease();
  uint64_t v18 = v34;
  swift_bridgeObjectRelease();
  uint64_t v19 = v32;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  id v21 = v33;
  *id v33 = v10;
  v21[1] = v19;
  uint64_t v22 = v30;
  v21[2] = v18;
  uint64_t v21[3] = v22;
  *((unsigned char *)v21 + 32) = v29 & 1;
  uint64_t v23 = v28;
  v21[5] = v27;
  v21[6] = v23;
  v21[7] = v26;
  v21[8] = v17;
  v21[9] = v15;
  v21[10] = v16;
  return result;
}

unint64_t sub_10048D758()
{
  unint64_t result = qword_100919940;
  if (!qword_100919940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919940);
  }
  return result;
}

unint64_t sub_10048D7AC()
{
  unint64_t result = qword_100919958;
  if (!qword_100919958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919958);
  }
  return result;
}

uint64_t sub_10048D800(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_10091F060);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10048D864(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_100919948);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10048D8D4()
{
  unint64_t result = qword_100919988;
  if (!qword_100919988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919988);
  }
  return result;
}

uint64_t sub_10048D928(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_100919990);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_10048DACC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_10048DACC()
{
  unint64_t result = qword_100919998;
  if (!qword_100919998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919998);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedDayOfWeek.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10048DBECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedDayOfWeek.CodingKeys()
{
  return &type metadata for RDSavedDayOfWeek.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDSavedRecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDSavedRecurrenceRule.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10048DD80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedRecurrenceRule.CodingKeys()
{
  return &type metadata for RDSavedRecurrenceRule.CodingKeys;
}

unint64_t sub_10048DDBC()
{
  unint64_t result = qword_1009199A8;
  if (!qword_1009199A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199A8);
  }
  return result;
}

unint64_t sub_10048DE14()
{
  unint64_t result = qword_1009199B0;
  if (!qword_1009199B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199B0);
  }
  return result;
}

unint64_t sub_10048DE6C()
{
  unint64_t result = qword_1009199B8;
  if (!qword_1009199B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199B8);
  }
  return result;
}

unint64_t sub_10048DEC4()
{
  unint64_t result = qword_1009199C0;
  if (!qword_1009199C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199C0);
  }
  return result;
}

unint64_t sub_10048DF1C()
{
  unint64_t result = qword_1009199C8;
  if (!qword_1009199C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199C8);
  }
  return result;
}

unint64_t sub_10048DF74()
{
  unint64_t result = qword_1009199D0;
  if (!qword_1009199D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009199D0);
  }
  return result;
}

uint64_t sub_10048DFC8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009199E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009199E0);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10048E090()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_10008E278(v0, qword_1009199F8);
  sub_10008E2DC(v0, (uint64_t)qword_1009199F8);
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.maxReminderCountToMigrate.getter()
{
  return *(void *)(v0
                   + OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate);
}

uint64_t RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.lastModifiedAfterDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CAA4C(v1+ OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate, a1);
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.__allocating_init(maxReminderCountToMigrate:lastModifiedAfterDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate] = a1;
  sub_1000CAA4C(a2, (uint64_t)&v5[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate]);
  v8.receiver = v5;
  v8.super_class = v2;
  id v6 = [super init];
  sub_1000966BC(a2, (uint64_t *)&unk_100909A40);
  return v6;
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.init(maxReminderCountToMigrate:lastModifiedAfterDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate] = a1;
  sub_1000CAA4C(a2, (uint64_t)&v2[OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate]);
  v8.receiver = v2;
  v8.super_class = ObjectType;
  id v6 = [super init];
  sub_1000966BC(a2, (uint64_t *)&unk_100909A40);
  return v6;
}

Swift::Void __swiftcall RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  if (qword_100907638 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_1009199E0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    BOOL v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders: migrating if needed", v7, 2u);
    swift_slowDealloc();
  }

  *(void *)&v12[0] = 0xD000000000000044;
  *((void *)&v12[0] + 1) = 0x800000010078DED0;
  id v8 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_1000D6CBC((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000966BC((uint64_t)v13, &qword_100908190);
LABEL_13:
    sub_10048E664(_.super.isa, metadata.super.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD000000000000044;
    v13[1] = 0x800000010078DED0;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v9 = (uint64_t)[v11 integerValue];

  if (v9 < 1) {
    goto LABEL_13;
  }
}

void sub_10048E664(void *a1, void *a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v13 = (char *)&v40 - v12;
  *(void *)&v48[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v48[0] + 1) = v14;
  swift_bridgeObjectRetain();
  id v15 = [a2 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v48, 0, sizeof(v48));
  }
  sub_1000D6CBC((uint64_t)v48, (uint64_t)aBlock);
  if (!v45)
  {
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)aBlock, &qword_100908190);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
LABEL_10:
    if (qword_100907638 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_1009199E0);
    id v17 = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      Swift::String v20 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String v20 = 136446210;
      id v21 = sub_1002ECF34();
      *(void *)&v48[0] = sub_1000C51B8((uint64_t)v21, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "UpdateAlternativeDueDatesOfCalDavReminders: accountIdentifier is nil, skip migration {store: %{public}s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  uint64_t v23 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v40 = v8 + 32;
  uint64_t v42 = v23;
  v23((unint64_t)v13, v6, v7);
  id v24 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v25 = [a1 persistentStoreCoordinator];
  [v24 setPersistentStoreCoordinator:v25];

  uint64_t v26 = v8;
  uint64_t v41 = v8;
  uint64_t v27 = v24;
  [v24 setTransactionAuthor:RDStoreControllerUpdateAlternativeDueDatesOfCalDavRemindersMigrationAuthor];
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v10, v13, v7);
  unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v29 = (v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = a1;
  unint64_t v31 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = swift_allocObject();
  v42(v33 + v28, v10, v7);
  *(void *)(v33 + v29) = v27;
  *(void *)(v33 + v31) = v30;
  uint64_t v34 = v43;
  *(void *)(v33 + v32) = v43;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_10049077C;
  *(void *)(v35 + 24) = v33;
  uint64_t v46 = sub_10008F6F4;
  uint64_t v47 = v35;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003B3260;
  id v45 = &unk_1008C7030;
  uint64_t v36 = _Block_copy(aBlock);
  id v37 = v27;
  id v38 = v30;
  id v39 = v34;
  swift_retain();
  swift_release();
  [v37 performBlockAndWait:v36];
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v7);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v27) {
    __break(1u);
  }
}

void sub_10048ED20(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v7 = [v5 objectIDWithUUID:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10077A530;
  *(void *)(v8 + 32) = v7;
  id v61 = (id)v8;
  specialized Array._endMutation()();
  id v9 = v7;
  uint64_t v10 = (void *)sub_1003AD42C((unint64_t)v61, 0, 1);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, &qword_10090ABC0);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];
  unint64_t v13 = NSManagedObjectContext.fetch<A>(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v47) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v13 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v14 = *(id *)(v13 + 32);
LABEL_6:
      id v15 = v14;
      swift_bridgeObjectRelease();
      id v16 = [v15 accountTypeHost];
      unsigned int v17 = [v16 isCalDav];

      if (v17)
      {
        if (qword_100907638 != -1) {
          swift_once();
        }
        Swift::String v58 = v15;
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E2DC(v18, (uint64_t)qword_1009199E0);
        id v19 = a3;
        Swift::String v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v20, v21))
        {
          unint64_t v22 = v19;
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          id v61 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136446210;
          id v24 = sub_1002ECF34();
          sub_1000C51B8((uint64_t)v24, v25, (uint64_t *)&v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "UpdateAlternativeDueDatesOfCalDavReminders BEGIN {store: %{public}s}", v23, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v19 = v22;
          swift_slowDealloc();
        }
        else
        {
        }
        sub_10048FCC4((uint64_t)a2, v19);
        unsigned int v38 = [a2 hasChanges];
        id v39 = v15;
        if (v38)
        {
          id v61 = 0;
          if ([a2 save:&v61])
          {
            id v40 = v61;
          }
          else
          {
            id v41 = v61;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRetain();
            swift_errorRetain();
            uint64_t v42 = Logger.logObject.getter();
            os_log_type_t v43 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v42, v43))
            {
              uint64_t v44 = (uint8_t *)swift_slowAlloc();
              id v61 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v44 = 136446210;
              swift_getErrorValue();
              uint64_t v45 = Error.rem_errorDescription.getter();
              sub_1000C51B8(v45, v46, (uint64_t *)&v61);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v42, v43, "UpdateAlternativeDueDatesOfCalDavReminders: error saving MOC {error: %{public}s}", v44, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
            }
            else
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_errorRelease();
            }
            id v39 = v58;
          }
        }
        sub_10048FAF0(v19);

        goto LABEL_30;
      }
      if (qword_100907638 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_1009199E0);
      id v27 = v9;
      id v28 = a3;
      id v60 = v27;
      id v29 = v28;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = (void *)swift_slowAlloc();
        id v61 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 138412546;
        uint64_t v59 = v15;
        id v34 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v33 = v60;

        *(_WORD *)(v32 + 12) = 2082;
        id v35 = sub_1002ECF34();
        sub_1000C51B8((uint64_t)v35, v36, (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "UpdateAlternativeDueDatesOfCalDavReminders: skip non-CalDAV account {accountID: %@, store: %{public}s}", (uint8_t *)v32, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  if (qword_100907638 != -1) {
LABEL_37:
  }
    swift_once();
  uint64_t v48 = type metadata accessor for Logger();
  sub_10008E2DC(v48, (uint64_t)qword_1009199E0);
  id v49 = v9;
  id v50 = a3;
  id v60 = v49;
  id v51 = v50;
  id v39 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    int v54 = (void *)swift_slowAlloc();
    id v61 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 138412546;
    id v55 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v54 = v60;

    *(_WORD *)(v53 + 12) = 2082;
    id v56 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v56, v57, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v52, "UpdateAlternativeDueDatesOfCalDavReminders: account not found {accountID: %@, store: %{public}s}", (uint8_t *)v53, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_30:
    return;
  }

LABEL_32:
}

void sub_10048FAF0(void *a1)
{
  if (qword_100907638 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_1009199E0);
  id v8 = a1;
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    id v6 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "UpdateAlternativeDueDatesOfCalDavReminders END {store: %{public}s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

unint64_t sub_10048FCC4(uint64_t a1, void *a2)
{
  unint64_t result = sub_100490008(a1, a2);
  if (!v2)
  {
    unint64_t v4 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v7 = *(id *)(v4 + 8 * i + 32);
          }
          id v8 = v7;
          sub_100490848(v8);
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100490008(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = _s10PredicatesOMa(0);
  __chkstk_darwin(v6);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAA4C(v2+ OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_lastModifiedAfterDate, (uint64_t)v8);
  swift_storeEnumTagMultiPayload();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v9 = swift_allocObject();
  long long v21 = xmmword_10077A530;
  *(_OWORD *)(v9 + 16) = xmmword_10077A530;
  if (qword_1009073F0 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_1009421B0;
  *(void *)(v9 + 32) = qword_1009421B0;
  unint64_t v22 = (objc_class *)v9;
  specialized Array._endMutation()();
  id v11 = v22;
  uint64_t v12 = *(void *)(v3
                  + OBJC_IVAR____TtC7remindd68RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders_maxReminderCountToMigrate);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077DE90;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  unint64_t v22 = (objc_class *)inited;
  specialized Array._endMutation()();
  unint64_t v14 = (unint64_t)v22;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = v21;
  *(void *)(v15 + 32) = a2;
  unint64_t v22 = (objc_class *)v15;
  specialized Array._endMutation()();
  uint64_t v16 = (uint64_t)v22;
  id v17 = v10;
  id v18 = a2;
  uint64_t v19 = sub_10039E88C((uint64_t)v8, v11, a1, (uint64_t)_swiftEmptyArrayStorage, 0, v12, v14, (uint64_t)_swiftEmptyArrayStorage, v16);
  sub_1000C6DAC((uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

void sub_100490244(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 importedICSData];
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1004902AC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  [v2 setImportedICSData:];
}

uint64_t sub_100490324@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 alternativeDisplayDateDate_forCalendar];
  if (v3)
  {
    Class v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1004903EC(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAA4C(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setAlternativeDisplayDateDate_forCalendar:isa];
}

uint64_t sub_100490518@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10009A1B0(a1, (uint64_t)&v4);
  sub_1000963CC(0, &qword_100919A60);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1004905BC()
{
  return type metadata accessor for RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders();
}

uint64_t type metadata accessor for RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders()
{
  uint64_t result = qword_100919A48;
  if (!qword_100919A48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100490610()
{
  sub_1000D68FC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1004906B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v8 + 8, v5);
}

void sub_10049077C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(v0 + v3);
  uint64_t v5 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10048ED20(v0 + v2, v4, v5);
}

uint64_t sub_100490820()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100490830(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100490840()
{
  return swift_release();
}

void sub_100490848(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v48 - v11;
  id v13 = [a1 alternativeDisplayDateDate_forCalendar:v10];
  if (v13)
  {
    unint64_t v14 = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v12, v5, v2);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v15(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) != 1)
    {
      sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
      return;
    }
  }
  else
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v15(v12, 1, 1, v2);
  }
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
  id v16 = [a1 importedICSData];
  if (v16)
  {
    id v17 = v16;
    id v51 = v8;
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    id v21 = objc_allocWithZone((Class)ICSDocument);
    sub_100097E38(v18, v20);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v52 = v18;
    unint64_t v53 = v20;
    sub_100097F34(v18, v20);
    id v56 = 0;
    id v23 = [v21 initWithData:isa options:0 error:&v56];

    if (v23)
    {
      id v24 = v56;
      id v25 = [v23 calendar];
      if (!v25) {
        goto LABEL_14;
      }
      uint64_t v26 = v25;
      id v27 = [v25 components];

      if (!v27) {
        goto LABEL_14;
      }
      uint64_t v55 = (uint64_t)v27;
      id v50 = (id)sub_1000963CC(0, &qword_100919A58);
      sub_1000963CC(0, &qword_100919A60);
      sub_100490F90();
      uint64_t v28 = v54;
      Sequence.firstMap<A>(_:)();
      uint64_t v54 = v28;

      if (v56)
      {
        id v29 = v56;
        id v30 = [v29 x_apple_alternative_due_date_for_calendar];
        if (v30)
        {
          id v50 = v30;
          Class v31 = (Class)[v30 rem_dateAsUTC];
          id v49 = v23;
          if (v31)
          {
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v32 = v51;
            (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v51, v5, v2);
            v15(v32, 0, 1, v2);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v32, 1, v2) == 1)
            {
              Class v31 = 0;
            }
            else
            {
              Class v31 = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
            }
          }
          else
          {
            v15(v51, 1, 1, v2);
          }
          [a1 setAlternativeDisplayDateDate_forCalendar:v31];

          id v38 = [a1 remObjectID];
          if (qword_100907638 != -1) {
            swift_once();
          }
          uint64_t v39 = type metadata accessor for Logger();
          sub_10008E2DC(v39, (uint64_t)qword_1009199E0);
          id v40 = v38;
          id v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v41, v42))
          {
            sub_100097F34(v52, v53);

            return;
          }
          os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v44 = (void *)swift_slowAlloc();
          uint64_t v55 = (uint64_t)v38;
          id v56 = v44;
          *(_DWORD *)os_log_type_t v43 = 136446210;
          id v51 = (char *)v29;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v45 = Optional.descriptionOrNil.getter();
          uint64_t v55 = sub_1000C51B8(v45, v46, (uint64_t *)&v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "UpdateAlternativeDueDatesOfCalDavReminders: set ADD {reminderID: %{public}s}}", v43, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v47 = v51;
        }
        else
        {
        }
      }
      else
      {
LABEL_14:
        uint64_t v33 = self;
        NSString v34 = String._bridgeToObjectiveC()();
        id v35 = [v33 internalErrorWithDebugDescription:v34];

        uint64_t v54 = (uint64_t)v35;
        swift_willThrow();
      }
    }
    else
    {
      id v36 = v56;
      uint64_t v37 = _convertNSErrorToError(_:)();

      uint64_t v54 = v37;
      swift_willThrow();
    }
    sub_100097F34(v52, v53);
  }
}

unint64_t sub_100490F90()
{
  unint64_t result = qword_100919A68;
  if (!qword_100919A68)
  {
    sub_1000963CC(255, &qword_100919A58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100919A68);
  }
  return result;
}

const char *sub_100491000()
{
  return "importedICSData";
}

const char *sub_100491014()
{
  return "alternativeDisplayDateDate_forCalendar";
}

void sub_100491028(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v137 = *v1;
  uint64_t v131 = (void *)type metadata accessor for UUID();
  uint64_t v133 = *(v131 - 1);
  __chkstk_darwin(v131);
  int v130 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v7 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v127 = (char *)&v116 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (os_log_t *)((char *)&v116 - v11);
  __chkstk_darwin(v13);
  uint64_t v15 = ((char *)&v116 - v14);
  if (qword_100907648 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_10008E2DC(v16, (uint64_t)qword_100919A70);
  swift_retain_n();
  uint64_t v129 = v17;
  uint64_t v18 = (char *)Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  id v136 = v18;
  BOOL v21 = os_log_type_enabled((os_log_t)v18, v19);
  uint64_t v126 = (NSObject **)v7;
  int v132 = v12;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    LODWORD(v124) = v20;
    uint64_t v23 = v22;
    uint64_t v24 = swift_slowAlloc();
    id v134 = v15;
    id v25 = (void *)v24;
    id v125 = (id)swift_slowAlloc();
    unint64_t v141 = (unint64_t)v125;
    *(_DWORD *)uint64_t v23 = 136446978;
    uint64_t v142 = (uint64_t)v137;
    swift_getMetatypeMetadata();
    char v128 = a1;
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v142 = sub_1000C51B8(v26, v27, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2114;
    uint64_t v28 = v2;
    id v29 = v2[2];
    uint64_t v142 = (uint64_t)v29;
    id v30 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v25 = v29;
    uint64_t v2 = v28;
    swift_release_n();
    *(_WORD *)(v23 + 22) = 2114;
    Class v31 = v28[3];
    uint64_t v142 = (uint64_t)v31;
    uint64_t v32 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25[1] = v31;
    swift_release_n();
    *(_WORD *)(v23 + 32) = 2048;
    swift_release();
    uint64_t v142 = 50;
    a1 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v33 = (char *)v136;
    _os_log_impl((void *)&_mh_execute_header, v136, (os_log_type_t)v124, "%{public}s: Start execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld}", (uint8_t *)v23, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v15 = v134;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  NSString v34 = v2[2];
  id v35 = v135;
  id v36 = (void *)sub_1002E3C78(v34, (uint64_t)a1, 0, 0);
  if (v35)
  {
    (*(void (**)(NSObject *, uint64_t))(v5 + 8))(v15, v138);
    return;
  }
  uint64_t v37 = v36;
  id v38 = [v36 objectID];

  uint64_t v39 = (char *)((uint64_t (*)(void *))(*v2)[18].isa)(a1);
  unint64_t v118 = *(void (**)(NSObject **, NSObject *, uint64_t))(v5 + 16);
  v118(v132, v15, v138);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v136 = v39;
  id v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  LODWORD(v125) = v41;
  BOOL v42 = os_log_type_enabled(v40, v41);
  id v134 = v15;
  uint64_t v122 = v5;
  id v120 = v34;
  uint64_t v119 = v5 + 16;
  uint64_t v123 = 0;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    id v124 = (void *)swift_slowAlloc();
    unint64_t v117 = swift_slowAlloc();
    unint64_t v141 = v117;
    *(_DWORD *)uint64_t v43 = 136446978;
    uint64_t v142 = (uint64_t)v137;
    swift_getMetatypeMetadata();
    uint64_t v44 = String.init<A>(describing:)();
    os_log_t v116 = v40;
    uint64_t v142 = sub_1000C51B8(v44, v45, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2114;
    char v128 = a1;
    id v135 = v38;
    unint64_t v46 = v2[3];
    uint64_t v142 = (uint64_t)v46;
    uint64_t v47 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v124 = v46;
    swift_release_n();
    *(_WORD *)(v43 + 22) = 2048;
    Class isa = v136[2].isa;
    swift_bridgeObjectRelease();
    uint64_t v142 = (uint64_t)isa;
    uint64_t v49 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 32) = 2048;
    Class v121 = (void (*)(NSObject **, uint64_t))(v43 + 34);
    id v50 = v127;
    Date.init()();
    uint64_t v51 = (uint64_t)v132;
    Date.timeIntervalSince(_:)();
    uint64_t v53 = v52;
    uint64_t v54 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v55 = v50;
    a1 = v128;
    v54(v55, v49);
    uint64_t v142 = v53;
    NSString v34 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v56 = v49;
    id v38 = v135;
    Class v121 = (void (*)(NSObject **, uint64_t))v54;
    v54((char *)v51, v56);
    os_log_t v57 = v116;
    _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v125, "%{public}s: Fetched reminders in source list {sourceListObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}", (uint8_t *)v43, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v58 = (char *)v136;
  }
  else
  {
    swift_release_n();
    Swift::String v58 = (char *)v136;
    swift_bridgeObjectRelease_n();
    Class v121 = *(void (**)(NSObject **, uint64_t))(v5 + 8);
    v121(v132, v138);
  }
  uint64_t v142 = (uint64_t)v58;
  sub_100094134(&qword_100912558);
  sub_1004522E0();
  id v124 = (void *)BidirectionalCollection<>.slices(by:)();
  uint64_t v142 = 0;
  id v59 = [v34 uuid];
  id v60 = v130;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v61 = UUID.uuidString.getter();
  uint64_t v63 = v62;
  Class v64 = v133[1].isa;
  ++v133;
  ((void (*)(char *, void *))v64)(v60, v131);
  unint64_t v141 = sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  int v132 = v2;
  unint64_t v65 = v2[4];
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v66 = qword_100942620;
  swift_retain();
  uint64_t v67 = v123;
  id v68 = sub_1000CF564((void *)6, v61, v63, v65, a1, 0, v66);
  if (v67)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v121((NSObject **)v134, v138);
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v69 = v68;
  swift_release();
  swift_bridgeObjectRelease();
  id v135 = v38;
  if (v69)
  {
    id v125 = [v69 objectID];
    type metadata accessor for REMMutableManualOrdering();
    [self newObjectID];
    id v70 = [v120 uuid];
    id v71 = v130;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    ((void (*)(char *, void *))v64)(v71, v131);
    uint64_t v133 = REMMutableManualOrdering.__allocating_init(objectID:listType:listID:)();
  }
  else
  {
    swift_retain_n();
    char v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      uint64_t v131 = (void *)swift_slowAlloc();
      uint64_t v133 = swift_slowAlloc();
      uint64_t v140 = v133;
      *(_DWORD *)uint64_t v74 = 136446466;
      char v128 = a1;
      uint64_t v75 = sub_1000D82B8();
      uint64_t v139 = sub_1000C51B8(v75, v76, (uint64_t *)&v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2114;
      id v77 = v120;
      uint64_t v139 = (uint64_t)v120;
      uint64_t v78 = v120;
      a1 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v131 = v77;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "%{public}s: Failed to fetch manual sort hint of template {templateObjectID: %{public}@}", (uint8_t *)v74, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v133 = 0;
    id v125 = 0;
  }
  id v79 = (char *)a1;
  uint64_t v80 = v124[2];
  if (v80)
  {
    unint64_t v81 = v124 + 7;
    do
    {
      uint64_t v83 = *(v81 - 1);
      unint64_t v82 = *v81;
      uint64_t v84 = *(v81 - 3);
      uint64_t v85 = *(v81 - 2);
      swift_unknownObjectRetain();
      unint64_t v87 = v82;
      unint64_t v88 = v132;
      sub_10049513C(v79, (uint64_t)v135, v84, v85, v83, v87, (uint64_t)v132, (uint64_t)&v141, v133, (void **)&v142, v125, (char *)v136, v134, v137);
      swift_unknownObjectRelease();
      v81 += 4;
      --v80;
    }
    while (v80);
  }
  else
  {
    unint64_t v88 = v132;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v89 = ((uint64_t (*)(char *))(*v88)[19].isa)(v79);
  unint64_t v90 = v89;
  if (v89 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v91 = v126;
    if (!v115) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v91 = v126;
  if (*(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    id v92 = v88;
    uint64_t v93 = v141;
    swift_bridgeObjectRetain();
    sub_10049383C(v90, v93, (uint64_t)v135, (uint64_t)v79);
    swift_bridgeObjectRelease();
    unint64_t v88 = v92;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  unint64_t v94 = v134;
  v118(v91, v134, v138);
  swift_retain_n();
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.default.getter();
  int v97 = v96;
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v98 = swift_slowAlloc();
    uint64_t v99 = (void *)swift_slowAlloc();
    id v136 = swift_slowAlloc();
    uint64_t v140 = v136;
    *(_DWORD *)uint64_t v98 = 136447234;
    LODWORD(v132) = v97;
    uint64_t v100 = sub_1000D82B8();
    uint64_t v123 = 0;
    uint64_t v139 = sub_1000C51B8(v100, v101, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v98 + 12) = 2114;
    unint64_t v137 = v95;
    uint64_t v102 = v120;
    uint64_t v139 = (uint64_t)v120;
    uint64_t v103 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v99 = v102;
    swift_release_n();
    *(_WORD *)(v98 + 22) = 2114;
    uint64_t v104 = v88[3];
    uint64_t v139 = (uint64_t)v104;
    uint64_t v105 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v99[1] = v104;
    swift_release_n();
    *(_WORD *)(v98 + 32) = 2048;
    swift_release();
    uint64_t v139 = 50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v98 + 42) = 2048;
    uint64_t v106 = v138;
    id v107 = (NSObject **)v127;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v109 = v108;
    uint64_t v110 = v107;
    uint64_t v111 = (void (*)(char *, uint64_t))v121;
    v121(v110, v106);
    uint64_t v139 = v109;
    uint64_t v112 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v111((char *)v91, v106);
    unint64_t v113 = v137;
    _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v132, "%{public}s: Finished execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}", (uint8_t *)v98, 0x34u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    (*(void (**)(NSObject *, uint64_t))(v122 + 8))(v112, v138);
  }
  else
  {
    swift_release_n();
    uint64_t v114 = (void (*)(NSObject *, uint64_t))v121;
    v121(v91, v138);

    swift_release();
    v114(v94, v138);
  }
  swift_bridgeObjectRelease();
}

id sub_1004921F0(void *a1, char *a2, void *a3, uint64_t a4)
{
  id v50 = a1;
  id v59 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMCDSavedReminder();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v14 = objc_allocWithZone(ObjCClassFromMetadata);
  uint64_t v46 = a4;
  id v15 = [v14 initWithContext:a4];
  id v16 = [(objc_class *)ObjCClassFromMetadata newObjectID];
  id v17 = v15;
  id v47 = v16;
  id v18 = [v16 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  int v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  unint64_t v60 = v9;
  v20(v12, v9);
  [v17 setIdentifier:isa];

  id v21 = v17;
  id v22 = [a3 account];
  [v21 setAccount:v22];

  id v23 = [v21 template];
  if (!v23) {
    goto LABEL_3;
  }
  uint64_t v24 = v23;
  type metadata accessor for REMCDTemplate();
  id v25 = a3;
  id v26 = v24;
  LOBYTE(v24) = static NSObject.== infix(_:_:)();

  if ((v24 & 1) == 0)
  {
LABEL_3:
    [v21 setTemplate:a3];
    id v27 = [v21 createResolutionTokenMapIfNecessary];
    NSString v28 = String._bridgeToObjectiveC()();
    [v27 updateForKey:v28];
  }
  if (v59)
  {
    id v29 = [v59 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v10 + 56))(v8, v30, 1, v60);
  uint64_t v48 = (uint64_t *)v21;
  sub_100242988((uint64_t)v8);
  sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
  id v31 = [objc_allocWithZone((Class)REMResolutionTokenMap) init];
  uint64_t v32 = self;
  uint64_t v33 = 0;
  unint64_t v60 = 0xD000000000000010;
  Swift::String v58 = "daIsNotificationsCollection";
  id v59 = "debugSyncDisabled";
  uint64_t v56 = "lastModifiedDate";
  os_log_t v57 = "daCalendarItemUniqueIdentifier";
  uint64_t v54 = "dueDateComponents";
  uint64_t v55 = "startDateComponents";
  uint64_t v52 = "dueDateDeltaAlertsData";
  uint64_t v53 = "attachments";
  uint64_t v51 = "dueDateDeltaAlertsToUpsert";
  do
  {
    ++v33;
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v35 = [v32 resolutionTokenKeyForChangedKeyInREMReminderChangeItemOfREMCDSavedReminder:v34];

    if (v35)
    {
      [v31 updateForKey:v35];
    }
  }
  while (v33 != 15);
  id v36 = v50;
  [v50 setResolutionTokenMap:v31];
  id v37 = [self defaultFetchOptions];
  type metadata accessor for REMSavedReminderStorageCDIngestor();
  swift_initStackObject();
  uint64_t v39 = v48;
  uint64_t v38 = v49;
  sub_1004FA5F8(v36, v48, (uint64_t)&off_1008B2FC0, 1, 0);

  if (!v38)
  {
    id v41 = [v36 attachments];
    if (!v41)
    {
      id v40 = v47;
LABEL_20:
      [v39 updateChangeCount];

      goto LABEL_21;
    }
    BOOL v42 = v41;
    sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v44) {
        goto LABEL_19;
      }
    }
    else if (!*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      id v40 = v47;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    sub_100492A34(v43, v39, v46);
    goto LABEL_19;
  }

  id v40 = v47;
LABEL_21:

  return v40;
}

void sub_100492A34(unint64_t a1, id a2, uint64_t a3)
{
  uint64_t v5 = v4;
  id v6 = a2;
  uint64_t v72 = *v3;
  id v81 = [a2 remObjectID];
  if (!v81)
  {
    unint64_t v60 = self;
    type metadata accessor for REMCDSavedReminder();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v62 = String._bridgeToObjectiveC()();
    [v60 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v62];

    swift_willThrow();
    return;
  }
  id v8 = [v6 account];
  if (v8)
  {
    uint64_t v9 = v8;
    id v79 = [v8 remObjectID];
    if (!v79)
    {
      uint64_t v67 = self;
      type metadata accessor for REMCDSavedReminder();
      uint64_t v68 = swift_getObjCClassFromMetadata();
      NSString v69 = String._bridgeToObjectiveC()();
      [v67 unexpectedNilPropertyWithClass:v68 property:v69];

      swift_willThrow();
      return;
    }
    type metadata accessor for REMSavedAttachmentCDIngestor();
    swift_initStackObject();
    if (a1 >> 62) {
      goto LABEL_39;
    }
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
    {
      type metadata accessor for REMCDSavedAttachment();
      uint64_t v11 = (objc_class *)swift_getObjCClassFromMetadata();
      unint64_t v78 = a1 & 0xC000000000000001;
      uint64_t v12 = 4;
      id v70 = v9;
      unint64_t v74 = a1;
      uint64_t v75 = v11;
      uint64_t v76 = v10;
      id v77 = v6;
      while (1)
      {
        id v23 = v78 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v12);
        uint64_t v24 = v23;
        if (__OFADD__(v12 - 4, 1)) {
          break;
        }
        uint64_t v82 = v12 - 3;
        id v25 = [objc_allocWithZone(v11) initWithContext:a3];
        [v25 setAccount:v9];
        uint64_t v84 = v25;
        [v25 setReminder:v6];
        self;
        uint64_t v26 = swift_dynamicCastObjCClass();
        uint64_t v83 = v12;
        if (v26)
        {
          uint64_t v27 = v26;
          id v28 = v24;
          id v29 = [(objc_class *)v11 newObjectID];
          uint64_t v30 = (objc_class *)REMURLAttachment;
        }
        else
        {
          self;
          uint64_t v31 = swift_dynamicCastObjCClass();
          if (!v31)
          {
            if (qword_100907648 != -1) {
              swift_once();
            }
            uint64_t v43 = type metadata accessor for Logger();
            sub_10008E2DC(v43, (uint64_t)qword_100919A70);
            id v44 = v24;
            id v45 = v6;
            id v46 = v44;
            id v47 = v45;
            uint64_t v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v73 = v5;
              uint64_t v50 = swift_slowAlloc();
              uint64_t v51 = (void *)swift_slowAlloc();
              uint64_t v85 = swift_slowAlloc();
              *(_DWORD *)uint64_t v50 = 136446722;
              uint64_t v86 = v72;
              swift_getMetatypeMetadata();
              uint64_t v52 = String.init<A>(describing:)();
              *(void *)(v50 + 4) = sub_1000C51B8(v52, v53, &v85);
              swift_bridgeObjectRelease();
              *(_WORD *)(v50 + 12) = 2082;
              id v54 = [v47 remObjectID];
              if (v54)
              {
                uint64_t v55 = v54;
                id v56 = [v54 description];

                uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v59 = v58;
              }
              else
              {
                unint64_t v59 = 0xE300000000000000;
                uint64_t v57 = 7104878;
              }
              *(void *)(v50 + 14) = sub_1000C51B8(v57, v59, &v85);

              swift_bridgeObjectRelease();
              *(_WORD *)(v50 + 22) = 2114;
              *(void *)(v50 + 24) = v46;
              *uint64_t v51 = v46;

              _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s: Skipped copying attachment into cdSavedReminder because attachment belongs to an unhandled subclass of REMAttachment {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@}", (uint8_t *)v50, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v5 = v73;
              uint64_t v9 = v70;
            }
            else
            {
            }
            goto LABEL_24;
          }
          uint64_t v27 = v31;
          id v32 = v24;
          id v29 = [(objc_class *)v11 newObjectID];
          uint64_t v30 = (objc_class *)REMFileAttachment;
        }
        id v33 = [objc_allocWithZone(v30) initWithAttachment:v27 objectID:v29 accountID:v79 reminderID:v81];

        sub_1001B3D18(v33, v84);
        if (v5)
        {
          swift_bridgeObjectRelease();

          uint64_t v66 = v81;
          goto LABEL_41;
        }
        [v84 updateChangeCount];
        if (qword_100907648 != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        sub_10008E2DC(v34, (uint64_t)qword_100919A70);
        id v35 = v24;
        id v36 = v6;
        id v37 = v33;
        id v38 = v35;
        id v39 = v36;
        id v40 = v37;
        id v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          os_log_type_t v71 = v42;
          uint64_t v13 = swift_slowAlloc();
          id v14 = (void *)swift_slowAlloc();
          uint64_t v85 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136446978;
          uint64_t v86 = v72;
          swift_getMetatypeMetadata();
          uint64_t v15 = String.init<A>(describing:)();
          *(void *)(v13 + 4) = sub_1000C51B8(v15, v16, &v85);
          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 12) = 2082;
          id v17 = [v39 remObjectID];
          if (v17)
          {
            id v18 = v17;
            id v19 = [v17 description];

            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v22 = v21;
          }
          else
          {
            unint64_t v22 = 0xE300000000000000;
            uint64_t v20 = 7104878;
          }
          a1 = v74;
          *(void *)(v13 + 14) = sub_1000C51B8(v20, v22, &v85);

          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 22) = 2114;
          *(void *)(v13 + 24) = v38;
          *id v14 = v38;

          *(_WORD *)(v13 + 32) = 2114;
          *(void *)(v13 + 34) = v40;
          v14[1] = v40;

          _os_log_impl((void *)&_mh_execute_header, v41, v71, "%{public}s: Copied attachment into cdSavedReminder {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@, savedAttachment: %{public}@}", (uint8_t *)v13, 0x2Au);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v5 = 0;
          uint64_t v9 = v70;
          goto LABEL_10;
        }

LABEL_24:
        a1 = v74;
LABEL_10:
        uint64_t v11 = v75;
        uint64_t v12 = v83 + 1;
        id v6 = v77;
        if (v82 == v76) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
    }
LABEL_40:

    swift_bridgeObjectRelease();
    uint64_t v66 = v79;
  }
  else
  {
    uint64_t v63 = self;
    type metadata accessor for REMCDSavedReminder();
    uint64_t v64 = swift_getObjCClassFromMetadata();
    NSString v65 = String._bridgeToObjectiveC()();
    [v63 unexpectedNilPropertyWithClass:v64 property:v65];

    swift_willThrow();
    uint64_t v66 = v81;
  }
LABEL_41:
}

void sub_1004933F4(void *a1, void *a2)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10077A530;
  *(void *)(v5 + 32) = a1;
  specialized Array._endMutation()();
  id v6 = self;
  id v7 = a1;
  id v8 = [v6 fetchOptionsIncludingDueDateDeltaAlerts];
  id v9 = objc_allocWithZone((Class)REMRemindersDataViewInvocation_fetchByObjectID);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithObjectIDs:isa fetchOptions:v8];

  id v12 = sub_100446ECC(a2);
  if (!v2)
  {
    self;
    uint64_t v13 = swift_dynamicCastObjCClass();
    if (v13)
    {
      id v14 = (void *)v13;
      id v29 = v12;
      Class v15 = (Class)[v14 accountStorages];
      if (!v15)
      {
        sub_1000963CC(0, &qword_100910180);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class v15 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      Class v28 = v15;
      Class v16 = (Class)[v14 listStorages];
      if (!v16)
      {
        sub_1000963CC(0, (unint64_t *)&unk_100914440);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class v16 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      Class v17 = (Class)[v14 reminderStorages:v12];
      if (!v17)
      {
        sub_1000963CC(0, &qword_1009100F8);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class v17 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      id v18 = self;
      uint64_t v19 = *(void *)(v30 + 48);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = v7;
      specialized Array._endMutation()();
      id v21 = v7;
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v18 remindersFromAccountStorages:v28 listStorages:v16 reminderStorages:v17 store:v19 requestedReminderIDs:v22];

      if (v23)
      {
        sub_1000963CC(0, &qword_1009168E0);
        unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v25 = v21;
        uint64_t v26 = sub_10012083C(v24);
        swift_bridgeObjectRelease();

        if (v26)
        {
          REMReminder.codable.getter();

          return;
        }
      }
      [self noSuchObjectErrorWithObjectID:v21];
      swift_willThrow();

      id v12 = v27;
    }
    else
    {
      [self noSuchObjectErrorWithObjectID:v7];
      swift_willThrow();
    }
  }
}

void sub_10049383C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v193 = a2;
  uint64_t v10 = *v4;
  uint64_t v11 = sub_100094134(&qword_100915578);
  __chkstk_darwin(v11 - 8);
  uint64_t v195 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v194 = (uint64_t)&v172 - v14;
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v15 - 8);
  uint64_t v182 = (uint64_t)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v188 = (uint64_t)&v172 - v18;
  __chkstk_darwin(v19);
  uint64_t v190 = (char *)&v172 - v20;
  __chkstk_darwin(v21);
  uint64_t v208 = (uint64_t)&v172 - v22;
  __chkstk_darwin(v23);
  uint64_t v206 = (char *)&v172 - v24;
  long long v211 = (void *)type metadata accessor for UUID();
  uint64_t v202 = (void *)*(v211 - 1);
  __chkstk_darwin(v211);
  uint64_t v187 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  long long v199 = (char *)&v172 - v27;
  __chkstk_darwin(v28);
  unint64_t v203 = (char *)&v172 - v29;
  __chkstk_darwin(v30);
  uint64_t v201 = (char *)&v172 - v31;
  __chkstk_darwin(v32);
  uint64_t v210 = (char *)&v172 - v33;
  uint64_t v34 = type metadata accessor for Date();
  id v35 = *(uint64_t **)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v180 = (char *)&v172 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  unint64_t v181 = (char *)&v172 - v38;
  __chkstk_darwin(v39);
  uint64_t v186 = (char *)&v172 - v40;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v172 - v42;
  Date.init()();
  unint64_t v214 = 0;
  id v44 = (char *)[(id)a4 existingObjectWithID:a3 error:&v214];
  id v45 = (id)v214;
  if (!v44)
  {
    id v51 = (id)v214;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_7:
    ((void (*)(char *, uint64_t))v35[1])(v43, v34);
    return;
  }
  id v46 = v44;
  type metadata accessor for REMCDTemplate();
  id v47 = (void *)swift_dynamicCastClass();
  if (!v47)
  {
    id v52 = v45;

    goto LABEL_7;
  }
  uint64_t v198 = v47;
  uint64_t v175 = v10;
  uint64_t v177 = v43;
  uint64_t v179 = (uint64_t *)v34;
  uint64_t v48 = *(uint64_t (**)(uint64_t))(*(void *)v197 + 160);
  id v49 = v45;
  uint64_t v50 = (void *)v48(a4);
  if (v5)
  {
    ((void (*)(char *, uint64_t *))v35[1])(v177, v179);

    return;
  }
  id v173 = v50;
  unint64_t v53 = _swiftEmptyArrayStorage;
  unint64_t v214 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v209 = (void *)sub_1002EE568((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v213 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v54 = a1 >> 62;
  uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, id))a1;
  id v56 = v179;
  uint64_t v196 = v55;
  if (v54) {
    goto LABEL_88;
  }
  uint64_t v57 = *(uint64_t **)(((unint64_t)v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_10:
  uint64_t v192 = v35;
  uint64_t v174 = v46;
  if (!v57)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  unint64_t v58 = v196;
  unint64_t v191 = (unint64_t)v196 & 0xC000000000000001;
  long long v200 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v202 + 7);
  uint64_t v184 = (void (**)(char *, uint64_t *))(v202 + 6);
  uint64_t v178 = (void (**)(char *, id, void *))(v202 + 4);
  uint64_t v183 = (v202 + 1);
  uint64_t v59 = 4;
  uint64_t v189 = a4;
  uint64_t v185 = v57;
  do
  {
    unint64_t v53 = (void *)(v59 - 4);
    if (v191) {
      uint64_t v63 = (unsigned int (*)(uint64_t, uint64_t, id))specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v63 = v58[v59];
    }
    uint64_t v64 = v63;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
LABEL_88:
      swift_bridgeObjectRetain();
      uint64_t v57 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
      goto LABEL_10;
    }
    uint64_t v207 = (uint64_t *)(v59 - 3);
    id v215 = 0;
    NSString v65 = (uint64_t *)[v63 remObjectIDWithError:&v215];
    if (!v65)
    {
      id v90 = v215;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
LABEL_32:
      ((void (*)(char *, uint64_t *))v35[1])(v177, v179);
LABEL_100:
      swift_bridgeObjectRelease();
      return;
    }
    id v56 = v65;
    id v66 = v215;
    id v67 = sub_100496584(v64, v198, a4);
    if (v6)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    uint64_t v205 = v64;
    uint64_t v68 = (char *)v67;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v214 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v214 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v69 = [v56 uuid];
    uint64_t v70 = (uint64_t)v210;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v204 = v68;
    id v71 = [v68 uuid];
    uint64_t v72 = (uint64_t)v206;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v73 = *v200;
    unint64_t v74 = v211;
    (*v200)(v72, 0, 1, v211);
    int v75 = ((uint64_t (*)(uint64_t, uint64_t, void *))*v184)(v72, 1, v74);
    os_log_t v76 = (os_log_t)v208;
    if (v75 == 1)
    {
      sub_1000966BC(v72, (uint64_t *)&unk_100909E50);
      id v77 = v209;
      swift_bridgeObjectRetain();
      unint64_t v78 = sub_100306EC4(v70);
      char v80 = v79;
      swift_bridgeObjectRelease();
      if (v80)
      {
        uint64_t i = 0;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v215 = v77;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10031967C();
          id v77 = v215;
        }
        uint64_t v82 = v202;
        unint64_t v83 = v202[9] * v78;
        unint64_t v84 = v77[6] + v83;
        Class isa = (void (*)(void, void))v202[1];
        uint64_t v209 = (void *)v78;
        uint64_t v86 = v211;
        isa(v84, v211);
        unint64_t v87 = v215;
        unint64_t v88 = (void (*)(uint64_t, unint64_t, void *))v82[4];
        os_log_t v76 = (os_log_t)v208;
        v88(v208, *((void *)v215 + 7) + v83, v86);
        int64_t v89 = (int64_t)v209;
        uint64_t v209 = v87;
        sub_1002C2610(v89, (uint64_t)v87);
        swift_bridgeObjectRelease();
        v73((uint64_t)v76, 0, 1, v86);
        uint64_t v6 = i;
        id v46 = v174;
      }
      else
      {
        uint64_t v86 = v211;
        v73((uint64_t)v76, 1, 1, v211);
        Class isa = (void (*)(void, void))v183->isa;
      }
      isa(v210, v86);
      sub_1000966BC((uint64_t)v76, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v60 = (uint64_t)v201;
      (*v178)(v201, (id)v72, v74);
      uint64_t v61 = v209;
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      id v215 = v61;
      sub_1002C4C4C(v60, v70, v62);
      uint64_t v209 = v215;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, void *))v183->isa)(v70, v74);
    }
    a4 = v189;

    ++v59;
    id v35 = v192;
    unint64_t v58 = v196;
  }
  while (v207 != v185);
  swift_bridgeObjectRelease();
  unint64_t v53 = (void *)v214;
  id v56 = v179;
LABEL_34:
  sub_10015E77C((unint64_t)v53, 1);
  if (v6)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t *))v35[1])(v177, v56);
    goto LABEL_100;
  }
  swift_bridgeObjectRelease();
  if (!v173 || !v209[2] || !*(void *)(v193 + 16))
  {
LABEL_82:
    if (v213 >> 62)
    {
LABEL_90:
      swift_bridgeObjectRetain();
      uint64_t v146 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v146) {
        goto LABEL_84;
      }
    }
    else if (*(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_84:
      id v142 = objc_allocWithZone((Class)REMMemberships);
      sub_1000963CC(0, (unint64_t *)&qword_10090C160);
      Class v143 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v144 = [v142 initWithMemberships:v143];

      id v145 = v144;
      sub_1002B19C0(v144, 1);
      if (v6)
      {
        ((void (*)(char *, uint64_t *))v35[1])(v177, v56);

        goto LABEL_100;
      }

LABEL_92:
      [v198 updateChangeCount];
      id v215 = 0;
      if ([(id)a4 save:&v215])
      {
        uint64_t v147 = v46;
        uint64_t i = v6;
        uint64_t v148 = qword_100907648;
        id v149 = v215;
        if (v148 != -1) {
          swift_once();
        }
        uint64_t v150 = type metadata accessor for Logger();
        sub_10008E2DC(v150, (uint64_t)qword_100919A70);
        uint64_t v151 = v181;
        ((void (*)(char *, char *, uint64_t *))v35[2])(v181, v177, v56);
        uint64_t v152 = v197;
        swift_retain_n();
        unint64_t v153 = Logger.logObject.getter();
        os_log_type_t v154 = static os_log_type_t.default.getter();
        int v155 = v154;
        if (os_log_type_enabled(v153, v154))
        {
          uint64_t v156 = swift_slowAlloc();
          uint64_t v157 = swift_slowAlloc();
          uint64_t v189 = a4;
          unint64_t v158 = (void *)v157;
          long long v211 = (void *)swift_slowAlloc();
          id v215 = v211;
          *(_DWORD *)uint64_t v156 = 136446978;
          uint64_t v159 = sub_1000D82B8();
          LODWORD(v210) = v155;
          uint64_t v212 = sub_1000C51B8(v159, v160, (uint64_t *)&v215);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v156 + 12) = 2114;
          uint64_t v208 = (uint64_t)v153;
          long long v161 = *(void **)(v152 + 16);
          uint64_t v212 = (uint64_t)v161;
          id v162 = v161;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v158 = v161;
          swift_release_n();
          *(_WORD *)(v156 + 22) = 2114;
          int v163 = *(void **)(v152 + 24);
          uint64_t v212 = (uint64_t)v163;
          id v164 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v158[1] = v163;
          swift_release_n();
          *(_WORD *)(v156 + 32) = 2048;
          uint64_t v165 = v180;
          Date.init()();
          uint64_t v166 = v181;
          Date.timeIntervalSince(_:)();
          uint64_t v168 = v167;
          uint64_t v169 = (void (*)(char *, uint64_t *))v35[1];
          v169(v165, v179);
          uint64_t v212 = v168;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v169(v166, v179);
          unint64_t v153 = v208;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v208, (os_log_type_t)v210, "%{public}s: Copied Sections to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v156, 0x2Au);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          a4 = v189;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v147 = v174;
          uint64_t v170 = v179;
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
          uint64_t v169 = (void (*)(char *, uint64_t *))v35[1];
          uint64_t v170 = v56;
          v169(v151, v56);
        }

        [(id)a4 reset];
        v169(v177, v170);
      }
      else
      {
        id v171 = v215;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        ((void (*)(char *, uint64_t *))v35[1])(v177, v56);
      }
      goto LABEL_100;
    }
    swift_bridgeObjectRelease();
    goto LABEL_92;
  }
  uint64_t v189 = a4;
  uint64_t v91 = *(void *)(v193 + 64);
  unint64_t v191 = v193 + 64;
  uint64_t v92 = 1 << *(unsigned char *)(v193 + 32);
  uint64_t v93 = -1;
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  a4 = v93 & v91;
  uint64_t v205 = (unsigned int (*)(uint64_t, uint64_t, id))(v202 + 2);
  uint64_t v210 = (char *)(v202 + 4);
  long long v200 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v202 + 7);
  uint64_t v196 = (unsigned int (**)(uint64_t, uint64_t, id))(v202 + 6);
  uint64_t v207 = v202 + 1;
  uint64_t v184 = (void (**)(char *, uint64_t *))(v35 + 1);
  char v204 = (char *)((unint64_t)(v92 + 63) >> 6);
  uint64_t v183 = (v204 - 1);
  uint64_t v206 = (char *)v173;
  swift_bridgeObjectRetain();
  uint64_t v208 = 0;
  id v35 = &qword_100915570;
  for (i = 0; ; uint64_t v6 = i)
  {
LABEL_43:
    if (a4)
    {
      unint64_t v96 = __clz(__rbit64(a4));
      a4 &= a4 - 1;
      unint64_t v97 = v96 | (v208 << 6);
LABEL_45:
      uint64_t v98 = v193;
      unint64_t v99 = v202[9] * v97;
      uint64_t v100 = (void (*)(char *, unint64_t, void *))v202[2];
      uint64_t v101 = (uint64_t)v195;
      uint64_t v102 = v211;
      v100(v195, *(void *)(v193 + 48) + v99, v211);
      unint64_t v103 = *(void *)(v98 + 56) + v99;
      id v56 = &qword_100915570;
      uint64_t v104 = sub_100094134(&qword_100915570);
      v100((char *)(v101 + *(int *)(v104 + 48)), v103, v102);
      id v35 = &qword_100915570;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v101, 0, 1, v104);
      goto LABEL_64;
    }
    uint64_t v105 = v208 + 1;
    if (__OFADD__(v208, 1))
    {
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v101 = (uint64_t)v195;
    if (v105 < (uint64_t)v204)
    {
      unint64_t v106 = *(void *)(v191 + 8 * v105);
      if (v106) {
        goto LABEL_49;
      }
      uint64_t v107 = v208 + 2;
      ++v208;
      if (v105 + 1 < (uint64_t)v204)
      {
        unint64_t v106 = *(void *)(v191 + 8 * v107);
        if (v106) {
          goto LABEL_52;
        }
        uint64_t v208 = v105 + 1;
        if (v105 + 2 < (uint64_t)v204)
        {
          unint64_t v106 = *(void *)(v191 + 8 * (v105 + 2));
          if (v106)
          {
            v105 += 2;
            goto LABEL_49;
          }
          uint64_t v107 = v105 + 3;
          uint64_t v208 = v105 + 2;
          if (v105 + 3 < (uint64_t)v204) {
            break;
          }
        }
      }
    }
LABEL_63:
    uint64_t v108 = sub_100094134(&qword_100915570);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v101, 1, 1, v108);
    a4 = 0;
LABEL_64:
    uint64_t v109 = v194;
    sub_1004969B8(v101, v194);
    uint64_t v110 = sub_100094134(&qword_100915570);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 48))(v109, 1, v110) == 1)
    {

      swift_release();
      a4 = v189;
      id v35 = v192;
      id v46 = v174;
      id v56 = v179;
      goto LABEL_82;
    }
    uint64_t v111 = v109 + *(int *)(v110 + 48);
    uint64_t v112 = v211;
    unint64_t v113 = *(void (**)(char *, uint64_t, void *))v210;
    (*(void (**)(char *, uint64_t, void *))v210)(v203, v109, v211);
    v113(v199, v111, v112);
    id v114 = [v206 membershipByMemberIdentifier];
    sub_1000963CC(0, (unint64_t *)&qword_10090C160);
    sub_10013E30C();
    id v46 = v203;
    uint64_t v115 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v115 + 16) || (unint64_t v116 = sub_100306EC4((uint64_t)v46), (v117 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      unint64_t v94 = (void (*)(char *, void *))*v207;
      uint64_t v95 = v211;
      ((void (*)(char *, void *))*v207)(v199, v211);
      v94(v46, v95);
      goto LABEL_43;
    }
    id v56 = (uint64_t *)*(id *)(*(void *)(v115 + 56) + 8 * v116);
    swift_bridgeObjectRelease();
    id v118 = [v56 groupIdentifier];
    if (!v118)
    {
      uint64_t v121 = (uint64_t)v190;
      id v46 = (char *)v211;
      (*v200)((uint64_t)v190, 1, 1, v211);
LABEL_73:

      uint64_t v129 = (void (*)(char *, void *))*v207;
      ((void (*)(char *, char *))*v207)(v199, v46);
      v129(v203, v46);
      sub_1000966BC(v121, (uint64_t *)&unk_100909E50);
      goto LABEL_43;
    }
    uint64_t v119 = v118;
    id v120 = v201;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v121 = (uint64_t)v190;
    id v46 = (char *)v211;
    v113(v190, (uint64_t)v120, v211);
    uint64_t v122 = *v200;
    (*v200)(v121, 0, 1, v46);
    uint64_t v123 = *v196;
    if ((*v196)(v121, 1, v46) == 1) {
      goto LABEL_73;
    }
    uint64_t v124 = (uint64_t)v187;
    v113(v187, v121, v46);
    id v125 = v209;
    if (v209[2] && (unint64_t v126 = sub_100306EC4(v124), (v127 & 1) != 0))
    {
      ((void (*)(uint64_t, unint64_t, void *))v202[2])(v188, v125[7] + v202[9] * v126, v211);
      uint64_t v128 = 0;
    }
    else
    {
      uint64_t v128 = 1;
    }
    uint64_t v185 = v56;
    uint64_t v130 = v188;
    uint64_t v131 = v211;
    v122(v188, v128, 1, v211);
    uint64_t v132 = v182;
    sub_1001248EC(v130, v182);
    static Date.now.getter();
    v133.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    if (v123(v132, 1, v131) == 1)
    {
      Class v134 = 0;
    }
    else
    {
      Class v134 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, void *))*v207)(v132, v131);
    }
    id v135 = v187;
    id v136 = objc_allocWithZone((Class)REMMembership);
    unint64_t v137 = v186;
    Class v138 = Date._bridgeToObjectiveC()().super.isa;
    id v46 = (char *)[v136 initWithMemberIdentifier:v133.super.isa groupIdentifier:v134 isObsolete:0 modifiedOn:v138];

    (*v184)(v137, v179);
    uint64_t v139 = v46;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v213 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    sub_1000966BC(v188, (uint64_t *)&unk_100909E50);
    uint64_t v140 = (void (*)(char *, void *))*v207;
    unint64_t v141 = v211;
    ((void (*)(char *, void *))*v207)(v135, v211);
    v140(v199, v141);
    v140(v203, v141);
  }
  unint64_t v106 = *(void *)(v191 + 8 * v107);
  if (v106)
  {
LABEL_52:
    uint64_t v105 = v107;
LABEL_49:
    a4 = (v106 - 1) & v106;
    unint64_t v97 = __clz(__rbit64(v106)) + (v105 << 6);
    uint64_t v208 = v105;
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v105 = v107 + 1;
    if (__OFADD__(v107, 1)) {
      break;
    }
    if (v105 >= (uint64_t)v204)
    {
      uint64_t v208 = (uint64_t)v183;
      goto LABEL_63;
    }
    unint64_t v106 = *(void *)(v191 + 8 * v105);
    ++v107;
    if (v106) {
      goto LABEL_49;
    }
  }
  __break(1u);
}

void sub_100495050(void *a1)
{
}

uint64_t sub_100495074()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919A70);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919A70);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10049513C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, NSObject *a9, void **a10, void *a11, char *a12, NSObject *a13, void *a14)
{
  uint64_t v15 = v14;
  uint64_t v133 = a8;
  uint64_t v142 = a7;
  uint64_t v134 = a4;
  uint64_t v128 = a3;
  uint64_t v20 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v20 - 8);
  uint64_t v132 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v130 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v145 = (void *)type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v135 = *(v145 - 1);
  __chkstk_darwin(v145);
  id v144 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v116 - v26;
  uint64_t v28 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v28 - 8);
  uint64_t v123 = (char *)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Date();
  uint64_t v124 = *(char **)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v31 = (char *)&v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v33 = __chkstk_darwin(v32).n128_u64[0];
  char v127 = (char *)&v116 - v34;
  id v149 = 0;
  id v35 = [a1 existingObjectWithID:a2 error:&v149];
  id v36 = v149;
  if (!v35)
  {
    id v56 = v149;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v37 = v35;
  type metadata accessor for REMCDTemplate();
  Class v143 = (void *)swift_dynamicCastClass();
  if (!v143)
  {
    id v57 = v36;
    goto LABEL_14;
  }
  uint64_t v121 = v27;
  os_log_t v141 = a9;
  os_log_t v38 = (os_log_t)(a6 >> 1);
  id v39 = v36;
  unint64_t v116 = v31;
  id v120 = a10;
  if (v38 != (os_log_t)a5)
  {
    os_log_t v119 = v38;
    swift_unknownObjectRetain();
    swift_beginAccess();
    uint64_t v139 = v135 + 16;
    id v118 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
    Class v138 = (void (**)(char *, void *))(v135 + 8);
    os_log_t v58 = v119;
    uint64_t v59 = v142;
    uint64_t v60 = v121;
    id v126 = v37;
    while (a5 < (uint64_t)v58)
    {
      uint64_t v61 = *(void *)(v135 + 72);
      uint64_t v122 = a5;
      uint64_t v136 = v61;
      unint64_t v137 = *(void (**)(char *, uint64_t, void *))(v135 + 16);
      v137(v60, v134 + v61 * a5, v145);
      uint64_t v62 = v59;
      uint64_t v63 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      sub_1004933F4(v63, a1);
      if (v15)
      {

        (*v138)(v60, v145);
        swift_unknownObjectRelease();
        return;
      }
      NSString v65 = v64;

      uint64_t v129 = v65;
      id v66 = [v65 storage];
      uint64_t v31 = (char *)sub_1004921F0(v66, 0, v143, (uint64_t)a1);
      uint64_t v59 = v62;

      id v67 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
      id v68 = [v67 uuid];

      uint64_t v69 = (uint64_t)v130;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v70 = [v31 uuid];
      uint64_t v71 = (uint64_t)v132;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*v118)(v71, 0, 1, v131);
      sub_10035D898(v71, v69);
      if (v141) {
        REMMutableManualOrdering.append(topLevelElementID:)();
      }
      uint64_t v140 = v31;
      uint64_t v72 = REMRemindersListDataView.ReminderLite.subtasks.getter();
      id v37 = v126;
      os_log_t v38 = v129;
      if (v72)
      {
        uint64_t v73 = *(void *)(v72 + 16);
        uint64_t v117 = v72;
        if (v73)
        {
          unint64_t v74 = v72 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
          do
          {
            v137(v144, v74, v145);
            int v75 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
            sub_1004933F4(v75, a1);
            id v77 = v76;

            id v78 = [v77 storage];
            char v79 = v140;
            uint64_t v31 = v140;
            char v80 = a1;
            id v81 = sub_1004921F0(v78, v79, v143, (uint64_t)a1);

            os_log_t v38 = v141;
            if (v141)
            {
              REMMutableManualOrdering.append(secondaryLevelElementID:forTopLevelElementID:)();

              (*v138)(v144, v145);
            }
            else
            {
              (*v138)(v144, v145);
            }
            v74 += v136;
            --v73;
            a1 = v80;
            uint64_t v15 = 0;
            uint64_t v59 = v142;
          }
          while (v73);
        }

        swift_bridgeObjectRelease();
        uint64_t v60 = v121;
        (*v138)(v121, v145);
        id v37 = v126;
      }
      else
      {
        (*v138)(v60, v145);
      }
      a5 = v122;
      if (__OFADD__(*v120, 1)) {
        goto LABEL_47;
      }
      a5 = v122 + 1;
      char *v120 = (char *)*v120 + 1;
      os_log_t v58 = v119;
      if ((os_log_t)a5 == v119)
      {
        swift_unknownObjectRelease();
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_4:
  if (v141 && a11)
  {
    id v147 = 0;
    id v40 = a11;
    swift_retain();
    id v41 = [a1 existingObjectWithID:v40 error:&v147];
    id v42 = v147;
    if (!v41)
    {
      id v82 = v147;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      return;
    }
    uint64_t v43 = v41;
    type metadata accessor for REMCDManualSortHint();
    id v44 = (void *)swift_dynamicCastClass();
    id v45 = v42;
    if (v44)
    {
      id v126 = v37;
      id v46 = [v44 account];
      if (v46)
      {
        id v47 = v46;
        id v48 = [v46 remObjectID];
        if (v48)
        {
          id v49 = v48;
          id v144 = a1;
          Date.init()();
          REMMutableManualOrdering.modifiedDate.setter();
          uint64_t v50 = self;
          id v51 = v49;
          id v52 = (char *)[v50 defaultCenter];
          type metadata accessor for REMManualOrderingCDIngestor();
          uint64_t inited = swift_initStackObject();
          id v145 = v51;
          *(void *)(inited + 16) = v51;
          *(void *)(inited + 24) = v52;
          uint64_t v140 = v52;
          unint64_t v54 = (void *)REMMutableManualOrdering.immutableCopy()();
          sub_100486C24(v54, (char *)v44, v47);
          if (v15)
          {

            id v55 = v145;
            swift_release();

            return;
          }

          id v83 = v145;
          swift_release();

          a1 = v144;
        }
        else
        {
          swift_release();
        }
      }
      else
      {
        swift_release();
      }
      id v37 = v126;
    }
    else
    {

      swift_release();
    }
  }
  a5 = v125;
  uint64_t v60 = v124;
  uint64_t v84 = (uint64_t)v123;
  static Date.now.getter();
  (*((void (**)(uint64_t, void, uint64_t, uint64_t))v60 + 7))(v84, 0, 1, a5);
  uint64_t KeyPath = (NSURL *)swift_getKeyPath();
  uint64_t v86 = v143;
  sub_10015F5D0(KeyPath, v84);
  swift_release();
  sub_1000966BC(v84, (uint64_t *)&unk_100909A40);
  [v86 updateChangeCount];
  id v147 = 0;
  if ([a1 save:&v147])
  {
    uint64_t v31 = a12;
    os_log_t v38 = a13;
    uint64_t v87 = qword_100907648;
    id v88 = v147;
    if (v87 == -1)
    {
LABEL_42:
      uint64_t v89 = type metadata accessor for Logger();
      sub_10008E2DC(v89, (uint64_t)qword_100919A70);
      (*((void (**)(char *, os_log_t, uint64_t))v60 + 2))(v116, v38, a5);
      id v90 = (void (**)(char *, uint64_t))v60;
      uint64_t v91 = v142;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      int v94 = v93;
      if (os_log_type_enabled(v92, v93))
      {
        os_log_t v141 = v92;
        uint64_t v95 = swift_slowAlloc();
        LODWORD(v140) = v94;
        uint64_t v96 = v95;
        id v145 = (void *)swift_slowAlloc();
        Class v143 = (void *)swift_slowAlloc();
        uint64_t v148 = v143;
        *(_DWORD *)uint64_t v96 = 136447490;
        id v144 = a1;
        id v147 = a14;
        swift_getMetatypeMetadata();
        id v126 = v37;
        uint64_t v97 = String.init<A>(describing:)();
        id v147 = (id)sub_1000C51B8(v97, v98, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v96 + 12) = 2048;
        unint64_t v99 = v120;
        swift_beginAccess();
        uint64_t v146 = *v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v96 + 22) = 2048;
        uint64_t v100 = (void *)*((void *)v31 + 2);
        swift_bridgeObjectRelease();
        uint64_t v146 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v96 + 32) = 2114;
        uint64_t v101 = *(void **)(v91 + 16);
        uint64_t v146 = v101;
        id v102 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v103 = v90;
        uint64_t v104 = v145;
        *id v145 = v101;
        swift_release_n();
        *(_WORD *)(v96 + 42) = 2114;
        uint64_t v105 = *(void **)(v91 + 24);
        uint64_t v146 = v105;
        id v106 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v104[1] = v105;
        swift_release_n();
        *(_WORD *)(v96 + 52) = 2048;
        uint64_t v107 = v127;
        Date.init()();
        uint64_t v108 = v116;
        Date.timeIntervalSince(_:)();
        uint64_t v110 = v109;
        uint64_t v111 = v103[1];
        uint64_t v112 = v107;
        uint64_t v113 = v125;
        v111(v112, v125);
        uint64_t v146 = v110;
        a1 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v111(v108, v113);
        os_log_t v114 = v141;
        _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v140, "%{public}s: Copied %ld out of %ld top-level reminders to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v96, 0x3Eu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_15;
      }
      swift_release_n();
      swift_bridgeObjectRelease_n();
      v90[1](v116, a5);

LABEL_14:
LABEL_15:
      [a1 reset:v116, v117];
      return;
    }
LABEL_48:
    swift_once();
    goto LABEL_42;
  }
  id v115 = v147;
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

void *sub_10049613C(uint64_t a1)
{
  return sub_10049617C(a1, "%{public}s: fetchRemindersInSourceList(in:) should be overridden by subclass");
}

void *sub_10049615C(uint64_t a1)
{
  return sub_10049617C(a1, "%{public}s: fetchSectionsInSourceList(in:) should be overridden by subclass");
}

void *sub_10049617C(uint64_t a1, const char *a2)
{
  uint64_t v4 = *v2;
  if (qword_100907648 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100919A70);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136446210;
    uint64_t v13 = v4;
    swift_getMetatypeMetadata();
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v13 = sub_1000C51B8(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100496344()
{
  uint64_t v1 = *v0;
  if (qword_100907648 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100919A70);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v10 = v1;
    swift_getMetatypeMetadata();
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v10 = sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: fetchSectionsInSourceList(in:) should be overridden by subclass", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100496508()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersToTemplate()
{
  return self;
}

id sub_100496584(void *a1, void *a2, uint64_t a3)
{
  uint64_t v32 = a1;
  id v33 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for REMCDTemplateSection();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v15 = [objc_allocWithZone(ObjCClassFromMetadata) initWithContext:a3];
  id v16 = [(objc_class *)ObjCClassFromMetadata newObjectID];
  id v17 = v15;
  id v34 = v16;
  id v18 = [v16 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  [v17 setIdentifier:isa];

  uint64_t v20 = v32;
  id v21 = v17;
  id v22 = v33;
  id v23 = [v33 account];
  [v21 setAccount:v23];

  [v21 setTemplate:v22];
  id v24 = v21;
  id v25 = [v20 displayName];
  [v24 setDisplayName:v25];

  id v26 = v24;
  Class v27 = (Class)[v20 creationDate];
  if (v27)
  {
    uint64_t v28 = v31;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v28, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
    {
      Class v27 = 0;
    }
    else
    {
      Class v27 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v9, 1, 1, v4);
  }
  [v26 setCreationDate:v27];

  id v29 = v26;
  [v29 setMinimumSupportedVersion:[v20 minimumSupportedVersion]];

  [v29 updateChangeCount];
  return v34;
}

uint64_t sub_1004969B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100915578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100496A28(void *a1)
{
}

uint64_t sub_100496A40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100919B98);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100919B98);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

char *sub_100496B20()
{
  return sub_1004976F0(*v0);
}

id sub_100496B54(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = a1;
  uint64_t v6 = (void *)a4();

  return v6;
}

id sub_100496BF4()
{
  uint64_t v1 = *v0;
  id v6 = 0;
  id v2 = [v1 attachmentRepresentationAndReturnError:&v6];
  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t type metadata accessor for REMAttachmentCDIngestor()
{
  return self;
}

uint64_t sub_100496CD0(unsigned __int8 *a1, char *a2)
{
  return sub_1002F2974(*a1, *a2);
}

Swift::Int sub_100496CDC()
{
  return sub_1005955E4();
}

uint64_t sub_100496CE4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100496DBC()
{
  return sub_1002F0B74();
}

unint64_t sub_100496DC4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100497658(*a1);
  *a2 = result;
  return result;
}

void sub_100496DF4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6911093;
      goto LABEL_3;
    case 2:
      *a1 = 0x657A6953656C6966;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x4C5255656C6966;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0xD000000000000012;
      a1[1] = 0x80000001007C6FC0;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_100496EA8(void *a1@<X8>)
{
  *a1 = &off_1008B6F60;
}

unint64_t sub_100496EB8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100497658(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100496EE0()
{
  unint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 6911093;
      break;
    case 2:
      unint64_t result = 0x657A6953656C6966;
      break;
    case 3:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100496F90@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B5038;
  return sub_100157960(v2, a1, a2);
}

void sub_100496F9C(void *a1@<X8>)
{
  *a1 = &off_1008B6F88;
}

uint64_t sub_100496FAC@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B5038;
  return sub_100157A14(a1, v2, a2);
}

uint64_t type metadata accessor for REMFileAttachmentCDIngestor()
{
  return self;
}

unint64_t sub_100496FDC(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 6911093;
      break;
    case 2:
      unint64_t result = 0x657A6953656C6966;
      break;
    case 3:
      unint64_t result = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x6874646977;
      break;
    case 6:
      unint64_t result = 0x746867696568;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004970B4(unsigned __int8 *a1, char *a2)
{
  return sub_1002F2698(*a1, *a2);
}

Swift::Int sub_1004970C0()
{
  return sub_1002F0C60();
}

uint64_t sub_1004970CC()
{
  return sub_1002F49EC();
}

Swift::Int sub_1004970D4()
{
  return sub_1002F0C60();
}

unint64_t sub_1004970DC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004976A4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10049710C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100496FDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100497138(void *a1@<X8>)
{
  *a1 = &off_1008B5628;
}

unint64_t sub_100497148@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004976A4(a1);
  *a2 = result;
  return result;
}

unint64_t sub_100497170()
{
  return sub_100496FDC(*v0);
}

uint64_t sub_100497178@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B5110;
  return sub_100157960(v2, a1, a2);
}

void sub_100497184(void *a1@<X8>)
{
  *a1 = &off_1008B6FB0;
}

uint64_t sub_100497194@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B5110;
  return sub_100157A14(a1, v2, a2);
}

uint64_t type metadata accessor for REMImageAttachmentCDIngestor()
{
  return self;
}

uint64_t sub_1004971C4(unsigned __int8 *a1, char *a2)
{
  return sub_1002F2C88(*a1, *a2);
}

Swift::Int sub_1004971D0()
{
  return Hasher._finalize()();
}

uint64_t sub_100497298()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100497348()
{
  return Hasher._finalize()();
}

unint64_t sub_10049740C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10049760C(*a1);
  *a2 = result;
  return result;
}

void sub_10049743C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6911093;
      goto LABEL_3;
    case 2:
      *a1 = 7107189;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 0x617461646174656DLL;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1004974C4(void *a1@<X8>)
{
  *a1 = &off_1008B6FD8;
}

unint64_t sub_1004974D4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10049760C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004974FC()
{
  uint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 6911093;
      break;
    case 2:
      uint64_t result = 7107189;
      break;
    case 3:
      uint64_t result = 0x617461646174656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100497578@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4FB0;
  return sub_100157960(v2, a1, a2);
}

void sub_100497584(void *a1@<X8>)
{
  *a1 = &off_1008B7000;
}

uint64_t sub_100497594@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B4FB0;
  return sub_100157A14(a1, v2, a2);
}

uint64_t type metadata accessor for REMURLAttachmentCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1004975C4()
{
  return &off_1008C70A8;
}

_UNKNOWN **sub_1004975D0()
{
  return &off_1008C7078;
}

_UNKNOWN **sub_1004975DC()
{
  return &off_1008C7108;
}

_UNKNOWN **sub_1004975E8()
{
  return &off_1008C70D8;
}

_UNKNOWN **sub_1004975F4()
{
  return &off_1008C7168;
}

_UNKNOWN **sub_100497600()
{
  return &off_1008C7138;
}

unint64_t sub_10049760C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4918, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_100497658(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4998, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004976A4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4BA8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

char *sub_1004976F0(void *a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = __chkstk_darwin(v9).n128_u64[0];
  uint64_t v12 = (char *)&v76 - v11;
  char v80 = 0;
  id v13 = [a1 remObjectIDWithError:&v80 v10];
  if (!v13)
  {
    id v37 = v80;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v8;
  }
  uint64_t v78 = v6;
  id v79 = v13;
  uint64_t v14 = v80;
  id v15 = [a1 account];
  if (v15)
  {
    id v16 = v15;
    id v17 = [v15 remObjectID];

    id v77 = v17;
    if (v17)
    {
      id v18 = [a1 reminder];
      if (v18
        && (uint64_t v19 = v18, v20 = [v18 remObjectID],
                       v19,
                       v20))
      {
        id v21 = [a1 url];
        if (v21)
        {
          id v22 = v21;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v23 = v78;
          id v24 = v8;
          uint64_t v8 = *(char **)(v78 + 32);
          ((void (*)(char *, char *, uint64_t))v8)(v4, v24, v5);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v4, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v4, 1, v5) != 1)
          {
            id v76 = v20;
            ((void (*)(char *, char *, uint64_t))v8)(v12, v4, v5);
            id v25 = [a1 metadata];
            if (v25)
            {
              Class v27 = v25;
              uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v30 = v29;

              URL._bridgeToObjectiveC()(v31);
              id v33 = v32;
              uint64_t v35 = v78;
              id v34 = v79;
              if (v30 >> 60 == 15)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_100097F20(v28, v30);
              }
              id v68 = v33;
            }
            else
            {
              URL._bridgeToObjectiveC()(v26);
              id v68 = v67;
              Class isa = 0;
              uint64_t v35 = v78;
              id v34 = v79;
            }
            id v69 = objc_allocWithZone((Class)REMURLAttachment);
            id v70 = v76;
            id v71 = v77;
            uint64_t v72 = (char *)[v69 initWithObjectID:v34 accountID:v77 reminderID:v76 url:v68 metadata:isa];
            uint64_t v73 = v34;
            Class v74 = isa;
            int v75 = v68;
            uint64_t v8 = v72;

            (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v5);
            return v8;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v4, 1, 1, v5);
        }

        sub_10016D594((uint64_t)v4);
      }
      else
      {
      }
    }
  }
  id v38 = [a1 account];

  if (v38)
  {
    id v39 = v79;
  }
  else
  {
    id v39 = v79;
    if (qword_100907650 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E2DC(v40, (uint64_t)qword_100919B98);
    id v41 = v39;
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      id v45 = (void *)swift_slowAlloc();
      *(_DWORD *)id v44 = 138412290;
      uint64_t v8 = (char *)(v44 + 4);
      char v80 = v41;
      id v46 = v41;
      id v39 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v45 = v39;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMURLAttachmentCDIngestor: cdURLAttachment.account is nil {cdURLAttachment.remObjectID: %@}", v44, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v42 = v41;
    }
  }
  id v47 = [a1 reminder];

  if (!v47)
  {
    swift_bridgeObjectRelease();
    if (qword_100907650 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E2DC(v48, (uint64_t)qword_100919B98);
    id v49 = v39;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      id v52 = (uint8_t *)swift_slowAlloc();
      unint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)id v52 = 138412290;
      char v80 = v49;
      uint64_t v8 = (char *)&v81;
      unint64_t v54 = v49;
      id v39 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v53 = v39;

      _os_log_impl((void *)&_mh_execute_header, v50, v51, "REMURLAttachmentCDIngestor: cdURLAttachment.reminder is nil {cdURLAttachment.remObjectID: %@}", v52, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v50 = v49;
    }
  }
  id v55 = [a1 uti];
  if (v55)
  {
    id v56 = v55;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100907650 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_10008E2DC(v57, (uint64_t)qword_100919B98);
    os_log_t v58 = v39;
    id v56 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 138412290;
      char v80 = v58;
      uint64_t v8 = (char *)&v81;
      uint64_t v62 = v58;
      id v39 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v61 = v39;

      _os_log_impl((void *)&_mh_execute_header, v56, v59, "REMURLAttachmentCDIngestor: cdURLAttachment.uti is nil {cdURLAttachment.remObjectID: %@}", v60, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v56 = v58;
    }
  }

  uint64_t v63 = self;
  sub_1000963CC(0, &qword_100915848);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v63 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v65];

  swift_willThrow();
  return v8;
}

void sub_100498070(void *a1, void *a2, uint64_t a3)
{
  uint64_t v32 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v31 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for UUID();
  __chkstk_darwin(v30);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    unint64_t v29 = (void (**)(char *, uint64_t))(v7 + 8);
    v27[1] = v3;
    uint64_t v28 = (void (**)(char *, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    do
    {
      uint64_t v20 = *(unsigned __int8 *)(a3 + v13++ + 32);
      switch(v20)
      {
        case 1:
          id v23 = [a1 uti];
          if (v23)
          {
            id isa = v23;
          }
          else
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id isa = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          uint64_t v19 = &selRef_setUti_;
          break;
        case 2:
          id v14 = [a1 url];
          id v15 = v31;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          URL._bridgeToObjectiveC()(v16);
          id isa = v17;
          (*v29)(v15, v32);
          uint64_t v19 = &selRef_setUrl_;
          break;
        case 3:
          id isa = [a1 metadata];
          if (isa)
          {
            uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v26 = v25;

            id isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v24, v26);
          }
          uint64_t v19 = &selRef_setMetadata_;
          break;
        default:
          id v21 = [a1 objectID];
          id v22 = [v21 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          id isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v28)(v11, v30);
          uint64_t v19 = &selRef_setIdentifier_;
          break;
      }
      [a2 *v19:isa];
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
  }
}

void sub_1004983C4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  id v68 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v69 = (char *)&v54 - v13;
  uint64_t v73 = type metadata accessor for UUID();
  __chkstk_darwin(v73);
  id v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v64 = v3;
    id v70 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    id v71 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v72 = (id *)(v14 + 8);
    id v66 = (void (**)(char *, uint64_t))(v10 + 8);
    id v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    NSString v65 = v9;
    while (1)
    {
      uint64_t v22 = a3 + v18++;
      switch(*(unsigned char *)(v22 + 32))
      {
        case 1:
          v21.super.Class isa = (Class)[a1 uti];
          if (!v21.super.isa)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            v21.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [a2 setUti:v21.super.isa];
          goto LABEL_4;
        case 2:
          unint64_t v23 = (unint64_t)[a1 fileSize];
          if ((v23 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
          }
          [a2 setFileSize:v23];
          goto LABEL_5;
        case 3:
          id v24 = [a1 fileURL];
          if (!v24)
          {
            (*v71)(v9, 1, 1, v74);
LABEL_24:
            sub_10016D594((uint64_t)v9);
            goto LABEL_5;
          }
          unint64_t v25 = v24;
          unint64_t v26 = v68;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          Class v27 = *v70;
          uint64_t v28 = v26;
          uint64_t v29 = v74;
          (*v70)(v9, v28, v74);
          (*v71)(v9, 0, 1, v29);
          uint64_t v30 = v29;
          uint64_t v31 = v69;
          if ((*v67)(v9, 1, v30) == 1) {
            goto LABEL_24;
          }
          v27(v31, v9, v74);
          id v32 = [a2 storeControllerManagedObjectContext];
          if (!v32
            || (id v33 = v32,
                id v34 = [v32 storeController],
                v33,
                !v34))
          {
            (*v66)(v31, v74);
LABEL_26:
            uint64_t v9 = v65;
            goto LABEL_5;
          }
          uint64_t v62 = static REMFileDigester.sha512Sum(url:)();
          uint64_t v63 = v35;
          if (v35)
          {
            uint64_t v36 = URL.lastPathComponent.getter();
            uint64_t v59 = v37;
            id v38 = [a1 objectID:v36];
            id v61 = v34;
            id v39 = v38;
            id v40 = [v38 uuid];

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            uint64_t v60 = (void (*)(char *, uint64_t))*v72;
            v60(v16, v73);
            id v41 = [a1 accountID];
            id v42 = [v41 uuid];

            static UUID._unconditionallyBridgeFromObjectiveC(_:)();
            Class v43 = UUID._bridgeToObjectiveC()().super.isa;
            v60(v16, v73);
            URL.lastPathComponent.getter();
            NSString v56 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v60 = (void (*)(char *, uint64_t))String._bridgeToObjectiveC()();
            URL._bridgeToObjectiveC()(v44);
            id v55 = v45;
            id v75 = 0;
            Class v46 = isa;
            id v47 = v56;
            unsigned int v57 = [v61 updateAttachmentFile:isa accountID:v43 fileName:v56 sha512Sum:v60 fileURL:v45 keepSource:1 error:&v75];

            id v48 = v75;
            if ((v57 & 1) == 0)
            {
              unint64_t v53 = v48;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              _convertNSErrorToError(_:)();

              swift_willThrow();
              (*v66)(v69, v74);
              return;
            }
            NSString v49 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [a2 setFileName:v49];

            NSString v50 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [a2 setSha512Sum:v50];

            (*v66)(v69, v74);
            goto LABEL_26;
          }
          (*v66)(v31, v74);

          uint64_t v9 = v65;
LABEL_5:
          if (v17 == v18)
          {
            swift_bridgeObjectRelease();
            return;
          }
          break;
        case 4:
          goto LABEL_5;
        case 5:
          unint64_t v51 = (unint64_t)[a1 width];
          if (v51 >> 15) {
            goto LABEL_32;
          }
          [a2 setWidth:(__int16)v51];
          goto LABEL_5;
        case 6:
          unint64_t v52 = (unint64_t)[a1 height];
          if (v52 >> 15) {
            goto LABEL_33;
          }
          [a2 setHeight:(__int16)v52];
          goto LABEL_5;
        default:
          id v19 = [a1 objectID];
          id v20 = [v19 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          v21.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
          ((void (*)(char *, uint64_t))*v72)(v16, v73);
          [a2 setIdentifier:v21.super.isa];
LABEL_4:

          goto LABEL_5;
      }
    }
  }
}

void sub_100498B9C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  id v66 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v71 = type metadata accessor for UUID();
  __chkstk_darwin(v71);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(a3 + 16);
  if (v73)
  {
    id v67 = v14;
    id v68 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    NSString v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    id v69 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    id v70 = (id *)(v15 + 8);
    uint64_t v63 = v3;
    uint64_t v64 = (void (**)(char *, uint64_t))(v10 + 8);
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v19 = v73;
    while (2)
    {
      uint64_t v21 = a3 + v18++;
      switch(*(unsigned char *)(v21 + 32))
      {
        case 1:
          NSString v20 = [a1 uti];
          if (!v20)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v20 = String._bridgeToObjectiveC()();
            uint64_t v19 = v73;
            swift_bridgeObjectRelease();
          }
          [a2 setUti:v20];

          goto LABEL_6;
        case 2:
          unint64_t v25 = (unint64_t)[a1 fileSize];
          if ((v25 & 0x8000000000000000) != 0) {
            __break(1u);
          }
          [a2 setFileSize:v25];
          goto LABEL_6;
        case 3:
          id v26 = [a1 fileURL];
          if (!v26)
          {
            (*v69)(v9, 1, 1, v72);
LABEL_20:
            sub_10016D594((uint64_t)v9);
            goto LABEL_6;
          }
          Class v27 = v26;
          uint64_t v28 = a2;
          uint64_t v29 = v66;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v30 = *v68;
          uint64_t v31 = v29;
          a2 = v28;
          uint64_t v32 = v72;
          uint64_t v19 = v73;
          (*v68)(v9, v31, v72);
          (*v69)(v9, 0, 1, v32);
          if ((*v65)(v9, 1, v32) == 1) {
            goto LABEL_20;
          }
          v30(v67, v9, v72);
          id v33 = [a2 storeControllerManagedObjectContext];
          if (v33
            && (id v34 = v33,
                id v35 = [v33 storeController],
                v34,
                v35))
          {
            uint64_t v36 = v67;
            uint64_t v61 = static REMFileDigester.sha512Sum(url:)();
            uint64_t v62 = v37;
            if (v37)
            {
              id v59 = v35;
              uint64_t v57 = URL.lastPathComponent.getter();
              uint64_t v58 = v38;
              id v39 = [a1 objectID];
              id v40 = [v39 uuid];

              static UUID._unconditionallyBridgeFromObjectiveC(_:)();
              Class isa = UUID._bridgeToObjectiveC()().super.isa;
              uint64_t v41 = v71;
              uint64_t v60 = (void (*)(char *, uint64_t))*v70;
              v60(v17, v71);
              id v42 = [a1 accountID];
              id v43 = [v42 uuid];

              static UUID._unconditionallyBridgeFromObjectiveC(_:)();
              Class v44 = UUID._bridgeToObjectiveC()().super.isa;
              v60(v17, v41);
              NSString v53 = String._bridgeToObjectiveC()();
              uint64_t v60 = (void (*)(char *, uint64_t))String._bridgeToObjectiveC()();
              URL._bridgeToObjectiveC()(v45);
              id v54 = v46;
              id v74 = 0;
              Class v47 = isa;
              id v48 = v53;
              unsigned int v55 = [v59 updateAttachmentFile:isa accountID:v44 fileName:v53 sha512Sum:v60 fileURL:v46 keepSource:1 error:&v74];

              id v49 = v74;
              if ((v55 & 1) == 0)
              {
                unint64_t v52 = v49;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                _convertNSErrorToError(_:)();

                swift_willThrow();
                (*v64)(v67, v72);
                return;
              }
              NSString v50 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [a2 setFileName:v50];

              NSString v51 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [a2 setSha512Sum:v51];

              (*v64)(v67, v72);
LABEL_9:
              uint64_t v19 = v73;
            }
            else
            {
              (*v64)(v36, v72);
            }
          }
          else
          {
            (*v64)(v67, v72);
          }
LABEL_6:
          if (v19 != v18) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        case 4:
          goto LABEL_6;
        default:
          id v22 = [a1 objectID];
          id v23 = [v22 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          Class v24 = UUID._bridgeToObjectiveC()().super.isa;
          ((void (*)(char *, uint64_t))*v70)(v17, v71);
          [a2 setIdentifier:v24];

          goto LABEL_9;
      }
      break;
    }
  }
}

void sub_100499324(void *a1, void *a2, char a3, uint64_t a4)
{
}

void sub_100499364(void *a1, void *a2, char a3, uint64_t a4)
{
}

void sub_1004993A4(void *a1, void *a2, char a3, uint64_t a4)
{
}

void sub_1004993E4(void *a1, void *a2, char a3, uint64_t a4, uint64_t (*a5)(void, id, uint64_t), uint64_t (*a6)(uint64_t, id, uint64_t))
{
  if (a3)
  {
    id v13 = [a1 reminderID];
    uint64_t v11 = (void *)a6(1, v13, a4);

    if (v6) {
      return;
    }
    [a2 setReminder:v11];
  }
  else
  {
    id v10 = [a1 accountID];
    uint64_t v11 = (void *)a5(0, v10, a4);

    if (v6) {
      return;
    }
    [a2 setAccount:v11];
  }
}

uint64_t sub_1004994D0(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(NSObject **)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v90 - v10;
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  uint64_t v15 = (char *)&v90 - v14;
  id v106 = 0;
  id v105 = [a1 remObjectIDWithError:&v106, v13];
  if (!v105)
  {
    id v43 = v106;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)v3;
  }
  uint64_t v101 = v3;
  id v102 = v11;
  uint64_t v104 = v15;
  uint64_t v16 = v106;
  id v17 = [a1 account];
  if (!v17
    || (uint64_t v18 = v17,
        uint64_t v3 = [v17 remObjectID],
        v18,
        (unint64_t v103 = v3) == 0))
  {
LABEL_14:
    id v44 = [a1 account];

    if (v44)
    {
      id v45 = v105;
    }
    else
    {
      id v45 = v105;
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_10008E2DC(v46, (uint64_t)qword_100919B98);
      uint64_t v3 = v45;
      Class v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        id v49 = (uint8_t *)swift_slowAlloc();
        NSString v50 = (void *)swift_slowAlloc();
        *(_DWORD *)id v49 = 138412290;
        id v106 = v3;
        uint64_t v3 = v3;
        id v45 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *NSString v50 = v45;

        _os_log_impl((void *)&_mh_execute_header, v47, v48, "REMImageAttachmentCDIngestor: cdImageAttachment.account is nil {cdImageAttachment.remObjectID: %@}", v49, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        Class v47 = v3;
      }
    }
    id v51 = [a1 reminder];

    if (v51)
    {
      unint64_t v52 = &selRef_includeReminderTitles;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_10008E2DC(v53, (uint64_t)qword_100919B98);
      uint64_t v3 = v45;
      id v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        NSString v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)NSString v56 = 138412290;
        id v106 = v3;
        uint64_t v3 = v3;
        id v45 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v45;

        _os_log_impl((void *)&_mh_execute_header, v54, v55, "REMImageAttachmentCDIngestor: cdImageAttachment.reminder is nil {cdImageAttachment.remObjectID: %@}", v56, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v54 = v3;
      }
      unint64_t v52 = &selRef_includeReminderTitles;
    }
    uint64_t v58 = [a1 v52[12]];
    if (v58)
    {
      id v59 = v58;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_10008E2DC(v60, (uint64_t)qword_100919B98);
      uint64_t v61 = v45;
      id v59 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      uint64_t v3 = v62;
      if (os_log_type_enabled(v59, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v64 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 138412290;
        id v106 = v61;
        NSString v65 = v61;
        id v45 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v64 = v45;

        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v3, "REMImageAttachmentCDIngestor: cdImageAttachment.uti is nil {cdImageAttachment.remObjectID: %@}", v63, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v59 = v61;
      }
    }

    id v66 = self;
    sub_1000963CC(0, (unint64_t *)&unk_100915850);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v66 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v68];

    swift_willThrow();
    return (uint64_t)v3;
  }
  id v19 = [a1 reminder];
  if (!v19
    || (NSString v20 = v19,
        uint64_t v21 = [v19 remObjectID],
        v20,
        !v21))
  {
    uint64_t v21 = v103;
LABEL_13:

    goto LABEL_14;
  }
  id v22 = [a1 uti];
  uint64_t v100 = v8;
  if (!v22)
  {

    goto LABEL_13;
  }
  id v23 = v22;
  unint64_t v99 = v21;
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = type metadata accessor for URL();
  uint64_t v98 = *(void *)(v24 - 8);
  uint64_t v25 = (uint64_t)v104;
  int v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
  uint64_t v95 = v98 + 56;
  v94(v104, 1, 1, v24);
  id v26 = [a1 storeControllerManagedObjectContext];
  if (v26)
  {
    Class v27 = v26;
    id v28 = [v26 storeController];

    id v96 = v28;
    if (v28)
    {
      id v29 = [a1 fileName];
      if (v29)
      {
        id v92 = v29;
        id v30 = [v105 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v93 = v24;
        uint64_t v31 = (void (*)(char *, uint64_t))v101[1].isa;
        v31(v5, v2);
        id v32 = [v103 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v33 = UUID._bridgeToObjectiveC()().super.isa;
        v31(v5, v2);
        uint64_t v24 = v93;
        id v34 = [a1 sha512Sum];
        Class v35 = isa;
        Class v36 = v33;
        Class v37 = v33;
        uint64_t v38 = v92;
        id v39 = [v96 URLForAttachmentFile:isa accountID:v36 fileName:v92 sha512Sum:v34];

        uint64_t v40 = (uint64_t)v102;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v41 = (uint64_t)v104;
        sub_10016D594((uint64_t)v104);
        v94((char *)v40, 0, 1, v24);
        uint64_t v42 = v40;
        uint64_t v25 = v41;
        sub_10036B73C(v42, v41);
      }
      else
      {
      }
    }
  }
  unint64_t v70 = (unint64_t)[a1 fileSize];
  if ((v70 & 0x8000000000000000) == 0)
  {
    unint64_t v71 = v70;
    uint64_t v72 = (uint64_t)v100;
    sub_10016D52C(v25, (uint64_t)v100);
    int v73 = [a1 width];
    uint64_t v74 = v73 & ~(v73 >> 31);
    int v75 = [a1 height];
    uint64_t v76 = v75 & ~(v75 >> 31);
    NSString v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v78 = v98;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v72, 1, v24) == 1)
    {
      char v80 = 0;
    }
    else
    {
      uint64_t v81 = (uint64_t)v100;
      uint64_t v82 = v78;
      URL._bridgeToObjectiveC()(v79);
      char v80 = v83;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v24);
    }
    id v84 = objc_allocWithZone((Class)REMImageAttachment);
    uint64_t v88 = v74;
    uint64_t v89 = v76;
    id v85 = v105;
    uint64_t v86 = v103;
    uint64_t v87 = v99;
    uint64_t v3 = [v84 initWithObjectID:v105 accountID:v103 reminderID:v99 UTI:v77 fileSize:v71 fileURL:v80 data:0 width:v88 height:v89];

    sub_10016D594((uint64_t)v104);
    return (uint64_t)v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10049A08C(id ObjCClassFromMetadata)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v86 - v10;
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  uint64_t v15 = (char *)&v86 - v14;
  id v102 = 0;
  id v101 = [ObjCClassFromMetadata remObjectIDWithError:&v102, v13];
  if (!v101)
  {
    id v45 = v102;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)ObjCClassFromMetadata;
  }
  uint64_t v97 = v3;
  uint64_t v98 = v11;
  uint64_t v100 = v15;
  uint64_t v16 = v102;
  id v17 = [ObjCClassFromMetadata account];
  if (!v17
    || (uint64_t v18 = v17,
        id v19 = [v17 remObjectID],
        v18,
        (id v99 = v19) == 0))
  {
LABEL_14:
    id v46 = [ObjCClassFromMetadata account];

    if (v46)
    {
      id v47 = v101;
    }
    else
    {
      id v47 = v101;
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_10008E2DC(v48, (uint64_t)qword_100919B98);
      id v49 = v47;
      NSString v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        unint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v52 = 138412290;
        id v102 = v49;
        id v54 = v49;
        id v47 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v53 = v47;

        _os_log_impl((void *)&_mh_execute_header, v50, v51, "REMFileAttachmentCDIngestor: cdFileAttachment.account is nil {cdFileAttachment.remObjectID: %@}", v52, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        NSString v50 = v49;
      }
    }
    id v55 = [ObjCClassFromMetadata reminder];

    if (v55)
    {
      NSString v56 = &selRef_includeReminderTitles;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_10008E2DC(v57, (uint64_t)qword_100919B98);
      uint64_t v58 = v47;
      id v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v62 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 138412290;
        id v102 = v58;
        uint64_t v63 = v58;
        id v47 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v62 = v47;

        _os_log_impl((void *)&_mh_execute_header, v59, v60, "REMFileAttachmentCDIngestor: cdFileAttachment.reminder is nil {cdFileAttachment.remObjectID: %@}", v61, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v59 = v58;
      }
      NSString v56 = &selRef_includeReminderTitles;
    }
    uint64_t v64 = [ObjCClassFromMetadata v56[12]];
    if (v64)
    {
      NSString v65 = v64;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100907650 != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      sub_10008E2DC(v66, (uint64_t)qword_100919B98);
      id v67 = v47;
      NSString v65 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v68))
      {
        id v69 = (uint8_t *)swift_slowAlloc();
        unint64_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)id v69 = 138412290;
        id v102 = v67;
        unint64_t v71 = v67;
        id v47 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v70 = v47;

        _os_log_impl((void *)&_mh_execute_header, v65, v68, "REMFileAttachmentCDIngestor: cdFileAttachment.uti is nil {cdFileAttachment.remObjectID: %@}", v69, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        NSString v65 = v67;
      }
    }

    uint64_t v72 = self;
    sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
    uint64_t ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
    NSString v73 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v72 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v73];

    swift_willThrow();
    return (uint64_t)ObjCClassFromMetadata;
  }
  id v20 = [ObjCClassFromMetadata reminder];
  if (!v20
    || (uint64_t v21 = v20, v22 = [v20 remObjectID], v21, !v22))
  {
    id v22 = v99;
LABEL_13:

    goto LABEL_14;
  }
  id v23 = [ObjCClassFromMetadata uti];
  if (!v23)
  {

    goto LABEL_13;
  }
  uint64_t v24 = v23;
  uint64_t v93 = v8;
  id v96 = v22;
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v25;

  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = (uint64_t)v100;
  uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v91 = v27 + 56;
  v90(v100, 1, 1, v26);
  id v29 = [ObjCClassFromMetadata storeControllerManagedObjectContext];
  if (v29)
  {
    id v30 = v29;
    id v31 = [v29 storeController];

    id v92 = v31;
    if (v31)
    {
      id v32 = [ObjCClassFromMetadata fileName];
      if (v32)
      {
        id v88 = v32;
        id v33 = [v101 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v89 = v27;
        id v34 = *(void (**)(char *, uint64_t))(v97 + 8);
        v34(v5, v2);
        id v35 = [v99 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v36 = UUID._bridgeToObjectiveC()().super.isa;
        v34(v5, v2);
        uint64_t v28 = (uint64_t)v100;
        id v37 = [ObjCClassFromMetadata sha512Sum];
        Class v38 = isa;
        Class v39 = v36;
        Class v40 = v36;
        uint64_t v41 = v88;
        id v42 = [v92 URLForAttachmentFile:isa accountID:v39 fileName:v88 sha512Sum:v37];

        uint64_t v43 = (uint64_t)v98;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10016D594(v28);
        v90((char *)v43, 0, 1, v26);
        uint64_t v44 = v43;
        uint64_t v27 = v89;
        sub_10036B73C(v44, v28);
      }
      else
      {
      }
    }
  }
  unint64_t v75 = (unint64_t)[ObjCClassFromMetadata fileSize];
  if ((v75 & 0x8000000000000000) == 0)
  {
    unint64_t v76 = v75;
    uint64_t v77 = (uint64_t)v93;
    sub_10016D52C(v28, (uint64_t)v93);
    NSString v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v77, 1, v26) == 1)
    {
      char v80 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v79);
      char v80 = v81;
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v77, v26);
    }
    id v82 = objc_allocWithZone((Class)REMFileAttachment);
    id v83 = v101;
    id v84 = v99;
    id v85 = v96;
    uint64_t ObjCClassFromMetadata = [v82 initWithObjectID:v101 accountID:v99 reminderID:v96 UTI:v78 fileSize:v76 fileURL:v80 data:0];

    sub_10016D594(v28);
    return (uint64_t)ObjCClassFromMetadata;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for REMFileAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMFileAttachmentCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMFileAttachmentCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10049ACE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMFileAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMFileAttachmentCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMImageAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMImageAttachmentCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMImageAttachmentCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10049ADFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMImageAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMImageAttachmentCDIngestor.ValueKey;
}

unsigned char *_s7remindd27REMFileAttachmentCDIngestorC15RelationshipKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10049AF00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMURLAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMURLAttachmentCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMURLAttachmentCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10049B004);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMURLAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMURLAttachmentCDIngestor.ValueKey;
}

uint64_t sub_10049B03C()
{
  return sub_1000B2138(&qword_10091A210, &qword_10091A218);
}

unint64_t sub_10049B068()
{
  unint64_t result = qword_10091A220;
  if (!qword_10091A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A220);
  }
  return result;
}

uint64_t sub_10049B0BC()
{
  return sub_1000B2138(&qword_10091A228, &qword_10091A230);
}

unint64_t sub_10049B0E8()
{
  unint64_t result = qword_10091A238;
  if (!qword_10091A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A238);
  }
  return result;
}

uint64_t sub_10049B13C()
{
  return sub_1000B2138(&qword_10091A240, &qword_10091A248);
}

unint64_t sub_10049B168()
{
  unint64_t result = qword_10091A250;
  if (!qword_10091A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A250);
  }
  return result;
}

uint64_t sub_10049B1BC()
{
  return sub_1000B2138(&qword_10091A258, &qword_10091A260);
}

unint64_t sub_10049B1E8()
{
  unint64_t result = qword_10091A268;
  if (!qword_10091A268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A268);
  }
  return result;
}

uint64_t sub_10049B23C()
{
  return sub_1000B2138(&qword_10091A270, &qword_10091A278);
}

unint64_t sub_10049B268()
{
  unint64_t result = qword_10091A280;
  if (!qword_10091A280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A280);
  }
  return result;
}

uint64_t sub_10049B2BC()
{
  return sub_1000B2138(&qword_10091A288, &qword_10091A290);
}

unint64_t sub_10049B2E8()
{
  unint64_t result = qword_10091A298;
  if (!qword_10091A298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A298);
  }
  return result;
}

uint64_t sub_10049B348()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091A2A0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091A2A0);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

char *sub_10049B410(void *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_cancellables] = &_swiftEmptySetSingleton;
  *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection] = a1;
  *(void *)&v5[OBJC_IVAR____TtC7remindd18RDClientConnection_notificationSubscriptionQueue] = a4;
  v5[OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive] = a5;
  uint64_t v11 = v5;
  id v12 = a1;
  id v45 = a4;
  unsigned int v13 = [v12 processIdentifier];
  id v14 = v12;
  uint64_t v15 = sub_10049F8A4(v14);
  uint64_t v17 = v16;
  uint64_t v19 = v18;

  unint64_t v20 = 0xFFFF800000000000;
  if (a5) {
    unint64_t v20 = 0xFFFF810000000000;
  }
  uint64_t v21 = &v11[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  *(void *)uint64_t v21 = v13;
  *((void *)v21 + 1) = v17;
  *((void *)v21 + 3) = 0;
  *((void *)v21 + 4) = 0;
  *((void *)v21 + 2) = v19;
  *((_WORD *)v21 + 22) = (v20 & 0xFFFFFFFE00000000 | v15 & 0x1FFFFFFFFLL) >> 32;
  *((_DWORD *)v21 + 10) = v15;
  id v22 = &v11[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon];
  *(void *)id v22 = a2;
  *((void *)v22 + 1) = a3;
  swift_unknownObjectRetain();

  v52.receiver = v11;
  v52.super_class = (Class)type metadata accessor for RDClientConnection();
  id v23 = (char *)[super init];
  uint64_t v24 = v23;
  switch(*(unsigned __int16 *)&v23[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 44] >> 14)
  {
    case 2:
      if ((*(_DWORD *)&v23[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 40] & 0x80) != 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    case 3:
LABEL_6:
      uint64_t v26 = v23;
      sub_10049C778();
      sub_10049CC84();
      break;
    default:
LABEL_5:
      uint64_t v25 = v23;
      break;
  }
  uint64_t v27 = OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection;
  uint64_t v28 = *(void **)&v24[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection];
  [v28 setExportedObject:v24];
  id v29 = self;
  id v30 = v28;
  id v31 = [v29 interface];
  [v30 setExportedInterface:v31];

  id v32 = *(void **)&v24[v27];
  id v33 = self;
  id v34 = v32;
  id v35 = [v33 interface];
  [v34 setRemoteObjectInterface:v35];

  Class v36 = *(void **)&v24[v27];
  uint64_t v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v50 = sub_1004A0AD4;
  uint64_t v51 = v37;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_100236C78;
  id v49 = &unk_1008C7610;
  Class v38 = _Block_copy(&aBlock);
  id v39 = v36;
  swift_release();
  [v39 setInterruptionHandler:v38];
  _Block_release(v38);

  Class v40 = *(void **)&v24[v27];
  uint64_t v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v50 = sub_1004A0ADC;
  uint64_t v51 = v41;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_100236C78;
  id v49 = &unk_1008C7638;
  id v42 = _Block_copy(&aBlock);
  id v43 = v40;
  swift_release();
  [v43 setInvalidationHandler:v42];

  swift_unknownObjectRelease();
  _Block_release(v42);

  return v24;
}

void sub_10049B83C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v1 = (void *)Strong;
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091A2A0);
  id v3 = v1;
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v6 = 136446210;
    sub_10010B4E8((uint64_t)v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v24);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100776E80;
    sub_10010B4E8((uint64_t)v24, (uint64_t)v25);
    unint64_t v8 = v26 | ((unint64_t)v27 << 32);
    unsigned int v9 = v27 >> 14;
    if (v9 >= 2)
    {
      if (v9 == 2)
      {
        unsigned __int16 v27 = WORD2(v8) & 0x3FFF;
        if ((v8 & 0x10000000000) != 0)
        {
          unint64_t v11 = 0x80000001007CB2F0;
          unint64_t v10 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      unsigned __int16 v27 = WORD2(v8) & 0x3FFF;
    }
    unint64_t v10 = 0;
    unint64_t v11 = 0xE000000000000000;
LABEL_11:
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v12 = sub_1000C5B38();
    *(void *)(v7 + 64) = v12;
    *(void *)(v7 + 32) = v10;
    *(void *)(v7 + 40) = v11;
    uint64_t v13 = sub_100696CF4();
    *(void *)(v7 + 96) = &type metadata for String;
    *(void *)(v7 + 104) = v12;
    *(void *)(v7 + 72) = v13;
    *(void *)(v7 + 80) = v14;
    uint64_t v15 = String.init(format:_:)();
    sub_1000C51B8(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Connection was interrupted unexpectedly {clientIdentity: %{public}s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_12;
  }

LABEL_12:
  uint64_t v17 = swift_unknownObjectWeakLoadStrong();
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(NSObject **)(v17 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v3;
    *(void *)(v20 + 24) = v18;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1004A0B4C;
    *(void *)(v21 + 24) = v20;
    aBlock[4] = (uint64_t)sub_100097240;
    void aBlock[5] = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003B3260;
    uint64_t aBlock[3] = (uint64_t)&unk_1008C7728;
    id v22 = _Block_copy(aBlock);
    id v3 = v3;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v19, v22);
    _Block_release(v22);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    if ((v19 & 1) == 0) {
      return;
    }
    __break(1u);
  }
}

void sub_10049BC38()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v1 = (void *)Strong;
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091A2A0);
  id v3 = v1;
  unsigned int v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v6 = 136446210;
    sub_10010B4E8((uint64_t)v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v24);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100776E80;
    sub_10010B4E8((uint64_t)v24, (uint64_t)v25);
    unint64_t v8 = v26 | ((unint64_t)v27 << 32);
    unsigned int v9 = v27 >> 14;
    if (v9 >= 2)
    {
      if (v9 == 2)
      {
        unsigned __int16 v27 = WORD2(v8) & 0x3FFF;
        if ((v8 & 0x10000000000) != 0)
        {
          unint64_t v11 = 0x80000001007CB2F0;
          unint64_t v10 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      unsigned __int16 v27 = WORD2(v8) & 0x3FFF;
    }
    unint64_t v10 = 0;
    unint64_t v11 = 0xE000000000000000;
LABEL_11:
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v12 = sub_1000C5B38();
    *(void *)(v7 + 64) = v12;
    *(void *)(v7 + 32) = v10;
    *(void *)(v7 + 40) = v11;
    uint64_t v13 = sub_100696CF4();
    *(void *)(v7 + 96) = &type metadata for String;
    *(void *)(v7 + 104) = v12;
    *(void *)(v7 + 72) = v13;
    *(void *)(v7 + 80) = v14;
    uint64_t v15 = String.init(format:_:)();
    sub_1000C51B8(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Connection was invalidated {clientIdentity: %{public}s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_12;
  }

LABEL_12:
  uint64_t v17 = swift_unknownObjectWeakLoadStrong();
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(NSObject **)(v17 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v3;
    *(void *)(v20 + 24) = v18;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1004A0B24;
    *(void *)(v21 + 24) = v20;
    aBlock[4] = (uint64_t)sub_10008F6F4;
    void aBlock[5] = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003B3260;
    uint64_t aBlock[3] = (uint64_t)&unk_1008C76B0;
    id v22 = _Block_copy(aBlock);
    id v3 = v3;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v19, v22);
    _Block_release(v22);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    if ((v19 & 1) == 0) {
      return;
    }
    __break(1u);
  }
}

id sub_10049C034()
{
  sub_10049CAB0();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDClientConnection();
  return [super dealloc];
}

id sub_10049C168()
{
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091A2A0);
  objc_super v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136446210;
    sub_10010B4E8((uint64_t)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity], (uint64_t)v19);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100776E80;
    sub_10010B4E8((uint64_t)v19, (uint64_t)v20);
    unint64_t v7 = v21 | ((unint64_t)v22 << 32);
    unsigned int v8 = v22 >> 14;
    if (v8 >= 2)
    {
      if (v8 == 2)
      {
        unsigned __int16 v22 = WORD2(v7) & 0x3FFF;
        if ((v7 & 0x10000000000) != 0)
        {
          unint64_t v10 = 0x80000001007CB2F0;
          unint64_t v9 = 0xD000000000000011;
          goto LABEL_10;
        }
      }
    }
    else
    {
      unsigned __int16 v22 = WORD2(v7) & 0x3FFF;
    }
    unint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
LABEL_10:
    *(void *)(v6 + 56) = &type metadata for String;
    unint64_t v11 = sub_1000C5B38();
    *(void *)(v6 + 64) = v11;
    *(void *)(v6 + 32) = v9;
    *(void *)(v6 + 40) = v10;
    uint64_t v12 = sub_100696CF4();
    *(void *)(v6 + 96) = &type metadata for String;
    *(void *)(v6 + 104) = v11;
    *(void *)(v6 + 72) = v12;
    *(void *)(v6 + 80) = v13;
    uint64_t v14 = String.init(format:_:)();
    uint64_t v17 = sub_1000C51B8(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDClientConnection: resuming XPC connection {clientIdentity: %{public}s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return [*(id *)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection] resume:v17, v18];
  }

  return [*(id *)&v2[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection] resume:v17, v18];
}

uint64_t sub_10049C468()
{
  uint64_t v1 = v0;
  v35[0] = 0;
  v35[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  v2._uint64_t countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v31.receiver = v0;
  v31.super_class = (Class)type metadata accessor for RDClientConnection();
  id v3 = [super description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001007D5DA0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  sub_10010B4E8((uint64_t)&v1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity], (uint64_t)v34);
  v9._uint64_t countAndFlagsBits = sub_100696CF4();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 91;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  sub_10010B4E8((uint64_t)v34, (uint64_t)v35);
  unint64_t v11 = v36 | ((unint64_t)v37 << 32);
  switch(v37 >> 14)
  {
    case 2:
      unsigned __int16 v37 = WORD2(v11) & 0x3FFF;
      break;
    case 3:
      break;
    default:
      unsigned __int16 v37 = WORD2(v11) & 0x3FFF;
      break;
  }
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001007D5DC0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  id v14 = [*(id *)&v1[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection] serviceName];
  if (v14)
  {
    unint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6C417065656B202CLL;
  v20._object = (void *)0xEC0000003D657669;
  String.append(_:)(v20);
  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction];
  if (v21) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v21) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0xD000000000000012;
  v25._object = (void *)0x80000001007D5DE0;
  String.append(_:)(v25);
  if (v1[OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive]) {
    uint64_t v26 = 1702195828;
  }
  else {
    uint64_t v26 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR____TtC7remindd18RDClientConnection_isUserInteractive]) {
    unint64_t v27 = 0xE400000000000000;
  }
  else {
    unint64_t v27 = 0xE500000000000000;
  }
  unint64_t v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 62;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  return v32;
}

void sub_10049C778()
{
  uint64_t v1 = OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction;
  if (*(void *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction)) {
    return;
  }
  uint64_t v2 = v0;
  unint64_t v3 = 0xD000000000000011;
  v23[0] = 0;
  v23[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v20 = 0xD00000000000001CLL;
  unint64_t v21 = 0x80000001007D5D60;
  sub_10010B4E8(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100776E80;
  sub_10010B4E8((uint64_t)v22, (uint64_t)v23);
  unint64_t v5 = v24 | ((unint64_t)v25 << 32);
  unsigned int v6 = v25 >> 14;
  if (v6 >= 2)
  {
    if (v6 == 2)
    {
      unsigned __int16 v25 = WORD2(v5) & 0x3FFF;
      if ((v5 & 0x10000000000) != 0)
      {
        unint64_t v7 = 0x80000001007CB2F0;
        goto LABEL_7;
      }
    }
  }
  else
  {
    unsigned __int16 v25 = WORD2(v5) & 0x3FFF;
  }
  unint64_t v3 = 0;
  unint64_t v7 = 0xE000000000000000;
LABEL_7:
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_1000C5B38();
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = v7;
  uint64_t v9 = sub_100696CF4();
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 72) = v9;
  *(void *)(v4 + 80) = v10;
  v11._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 93;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v14 = v20;
  unint64_t v13 = v21;
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10091A2A0);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v14, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: %{public}s}", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = os_transaction_create();
  swift_release();
  *(void *)(v2 + v1) = v19;
  swift_unknownObjectRelease();
}

void sub_10049CAB0()
{
  uint64_t v1 = OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction;
  if (*(void *)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_keepAliveTransaction))
  {
    uint64_t v2 = v0;
    swift_unknownObjectRetain();
    if (os_transaction_copy_description())
    {
      if (qword_100907658 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10008E2DC(v3, (uint64_t)qword_10091A2A0);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        unsigned int v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)unsigned int v6 = 136315138;
        uint64_t v7 = String.init(cString:)();
        sub_1000C51B8(v7, v8, &v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction RELEASE {name: %s}", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_slowDealloc();
    }
    *(void *)(v2 + v1) = 0;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10049CC84()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v5 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultCenter];
  if (qword_100907660 != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();
  id v41 = v11;
  id v43 = *(id *)(v1 + OBJC_IVAR____TtC7remindd18RDClientConnection_notificationSubscriptionQueue);
  id v12 = v43;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v36 = v13;
  uint64_t v39 = v14 + 56;
  Class v40 = v15;
  ((void (*)(char *, uint64_t, uint64_t))v15)(v4, 1, 1);
  uint64_t v16 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  unint64_t v17 = sub_1004A09E8();
  unint64_t v18 = sub_100096654();
  id v31 = v12;
  uint64_t v19 = v34;
  unint64_t v37 = v17;
  uint64_t v38 = v16;
  unint64_t v35 = v18;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_1009081C0);

  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v5 + 8;
  unint64_t v33 = v20;
  v20(v7, v19);
  uint64_t v21 = type metadata accessor for RDClientConnection();
  unint64_t v22 = sub_1004A0A40();
  uint64_t v32 = v21;
  unint64_t v30 = v22;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v42 + 8);
  v42 += 8;
  Swift::String v29 = v23;
  v23(v10, v8);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_100907668 != -1) {
    swift_once();
  }
  unsigned int v24 = v41;
  NSNotificationCenter.publisher(for:object:)();
  unsigned __int16 v25 = v31;
  id v43 = v31;
  v40(v4, 1, 1, v36);
  id v26 = v25;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_1009081C0);

  v33(v7, v19);
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  v29(v10, v8);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();

  return swift_release();
}

void sub_10049D168()
{
}

void sub_10049D18C()
{
}

uint64_t type metadata accessor for RDClientConnection()
{
  return self;
}

uint64_t sub_10049D204(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_100907360 != -1) {
    swift_once();
  }
  sub_10010B4E8(v3 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v11);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  sub_10036ED54((uint64_t)v11, 0x725465676E616863, 0xEF2E676E696B6361);
  uint64_t v7 = swift_bridgeObjectRelease();
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  return sub_1004A0824((void (*)(uint64_t *, id))sub_1004A0B50, v9, (void (*)(uint64_t *__return_ptr))sub_1004A09CC);
}

uint64_t sub_10049D388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v7 = v14 | ((unint64_t)v15 << 32);
  int v8 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v7) & 0x3FFF;
      int v8 = v7;
      break;
    case 3:
      break;
    default:
      int v8 = 2147483519;
      unsigned __int16 v15 = WORD2(v7) & 0x3FFF;
      break;
  }
  uint64_t result = sub_100662770(16, v8);
  if (!v3)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 8))(v12, a2, ObjectType, v10);
    *a3 = result;
  }
  return result;
}

uint64_t sub_10049D584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v12);
  sub_10010B4E8((uint64_t)v12, (uint64_t)v13);
  unint64_t v7 = v14 | ((unint64_t)v15 << 32);
  int v8 = 0x7FFFFFFF;
  switch(v15 >> 14)
  {
    case 2:
      unsigned __int16 v15 = WORD2(v7) & 0x3FFF;
      int v8 = v7;
      break;
    case 3:
      break;
    default:
      int v8 = 2147483519;
      unsigned __int16 v15 = WORD2(v7) & 0x3FFF;
      break;
  }
  uint64_t result = sub_100662770(32, v8);
  if (!v3)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, a2, ObjectType, v10);
    *a3 = result;
  }
  return result;
}

uint64_t sub_10049D870@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v41._uint64_t countAndFlagsBits = a4;
  v41._object = a5;
  uint64_t v8 = *(void *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity];
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 8];
  uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 16];
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 24];
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 32];
  unint64_t v12 = *(unsigned int *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 40] | ((unint64_t)*(unsigned __int16 *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 44] << 32);
  unint64_t v13 = v12;
  int v38 = *(unsigned __int16 *)&a1[OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity + 44] >> 14;
  switch(v38)
  {
    case 2:
      swift_bridgeObjectRetain();
      sub_10010B584(v8, v7, v10, v9, v11, v12);
      swift_bridgeObjectRelease();
      uint64_t v8 = v8;
      unint64_t v13 = v12 & 0x101FFFFFFFFLL | 0xFFFF800000000000;
      uint64_t v9 = a2;
      uint64_t v11 = a3;
      break;
    case 3:
      break;
    default:
      swift_bridgeObjectRetain();
      unint64_t v13 = v12;
      break;
  }
  v44[0] = v8;
  v44[1] = v7;
  _OWORD v44[2] = v10;
  void v44[3] = v9;
  v44[4] = v11;
  int v45 = v13;
  __int16 v46 = WORD2(v13);
  if (qword_100907360 != -1) {
    swift_once();
  }
  v43[0] = 0x2E65726F7473;
  v43[1] = 0xE600000000000000;
  sub_10010B584(v8, v7, v10, v9, v11, v13);
  String.append(_:)(v41);
  uint64_t v42 = v10;
  sub_10036ED54((uint64_t)v44, 0x2E65726F7473, 0xE600000000000000);
  swift_bridgeObjectRelease();
  unint64_t v16 = v13;
  sub_10012227C(v8, v7, v10, v9, v11, v13);
  int v17 = 0x7FFFFFFF;
  switch(v38)
  {
    case 2:
      int v17 = v12;
      break;
    case 3:
      break;
    default:
      int v17 = 2147483519;
      break;
  }
  sub_100662770(1, v17);
  if (log) {
    return sub_10012227C(v8, v7, v10, v9, v11, v13);
  }
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10091A2A0);
  uint64_t v20 = a1;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  os_log_t loga = v21;
  if (os_log_type_enabled(v21, v22))
  {
    os_log_type_t typea = v22;
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v23 = 136315138;
    uint64_t v24 = v8;
    uint64_t v25 = v7;
    id v26 = v20;
    id v27 = [v20 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v20 = v26;
    uint64_t v7 = v25;
    uint64_t v8 = v24;
    uint64_t v47 = sub_1000C51B8(v28, v30, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    unint64_t v16 = v13;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "RDClientConnection: returning storePerformer from %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v31 = *(void *)&v20[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v31 + 24))(v44, a6, ObjectType, v31);
  uint64_t result = sub_10012227C(v8, v7, v42, v9, v11, v16);
  *a7 = v33;
  return result;
}

uint64_t sub_10049DE40@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10010B4E8((uint64_t)a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v20);
  sub_10010B4E8((uint64_t)v20, (uint64_t)v21);
  unint64_t v5 = v22 | ((unint64_t)v23 << 32);
  int v6 = 0x7FFFFFFF;
  switch(v23 >> 14)
  {
    case 2:
      unsigned __int16 v23 = WORD2(v5) & 0x3FFF;
      int v6 = v5;
      break;
    case 3:
      break;
    default:
      int v6 = 2147483519;
      unsigned __int16 v23 = WORD2(v5) & 0x3FFF;
      break;
  }
  uint64_t result = sub_100662770(8, v6);
  if (!v2)
  {
    if (qword_100907658 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10091A2A0);
    uint64_t v9 = a1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)unint64_t v12 = 136315138;
      id v13 = [v9 description];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = a2;
      unint64_t v16 = v15;

      sub_1000C51B8(v14, v16, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a2 = v19;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDClientConnection: returning sync interface performer from %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v17 = *(void *)&v9[OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(v17 + 32))(v20, v9, ObjectType, v17);
    *a2 = result;
  }
  return result;
}

uint64_t sub_10049E2B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v10);
  sub_10010B4E8((uint64_t)v10, (uint64_t)v11);
  unint64_t v5 = v12 | ((unint64_t)v13 << 32);
  int v6 = 0x7FFFFFFF;
  switch(v13 >> 14)
  {
    case 2:
      unsigned __int16 v13 = WORD2(v5) & 0x3FFF;
      int v6 = v5;
      break;
    case 3:
      break;
    default:
      int v6 = 2147483519;
      unsigned __int16 v13 = WORD2(v5) & 0x3FFF;
      break;
  }
  uint64_t result = sub_100662770(64, v6);
  if (!v2)
  {
    uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcDaemon + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 40))(v10, ObjectType, v8);
    *a2 = result;
  }
  return result;
}

void sub_10049E580(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10049E6AC();
  if (v2)
  {
    [v2 cloudKitNetworkActivityDidUpdate:a1];
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100907658 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091A2A0);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "No clientProxy obtained.", v5, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10049E6AC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection);
  aBlock[4] = sub_10049E81C;
  void aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100742FE8;
  uint64_t aBlock[3] = &unk_1008C74F8;
  uint64_t v2 = _Block_copy(aBlock);
  id v3 = [v1 remoteObjectProxyWithErrorHandler:v2];
  _Block_release(v2);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100094134(&qword_10091A380);
  if (swift_dynamicCast()) {
    return v5;
  }
  else {
    return 0;
  }
}

void sub_10049E81C()
{
  if (qword_100907658 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10091A2A0);
  swift_errorRetain();
  swift_errorRetain();
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    swift_getErrorValue();
    uint64_t v3 = Error.localizedDescription.getter();
    sub_1000C51B8(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Unable to get remoteObjectProxy for the app from the daemon. Maybe the client is gone? {error: %s}", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

NSString sub_10049EA10()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100942270 = (uint64_t)result;
  return result;
}

NSString sub_10049EA48()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100942278 = (uint64_t)result;
  return result;
}

uint64_t sub_10049EA80(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 valueForEntitlement:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1000D6CBC((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_1000966BC((uint64_t)v11, &qword_100908190);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v8 = 0;
    return v8 & 1;
  }
  if (v10[0] == __PAIR128__(a2, a1))
  {
    swift_bridgeObjectRelease();
    char v8 = 1;
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

uint64_t sub_10049EBBC(char a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 valueForEntitlement:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v37, 0, 32);
  }
  sub_1000D6CBC((uint64_t)v37, (uint64_t)&v35);
  if (!v36)
  {
    id v7 = &v35;
    goto LABEL_9;
  }
  sub_10009A1A0(&v35, v37);
  sub_10009A1B0((uint64_t)v37, (uint64_t)&v35);
  sub_100094134((uint64_t *)&unk_10090AFB0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10009A1B0((uint64_t)v37, (uint64_t)&v35);
    sub_100094134((uint64_t *)&unk_100917670);
    if ((swift_dynamicCast() & 1) == 0)
    {
      if (qword_100907AE0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10008E2DC(v11, (uint64_t)qword_100920A70);
      sub_10009A1B0((uint64_t)v37, (uint64_t)&v35);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        v32[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136446210;
        sub_10009A1B0((uint64_t)&v35, (uint64_t)&v33);
        uint64_t v15 = String.init<A>(describing:)();
        *(void *)&long long v33 = sub_1000C51B8(v15, v16, (uint64_t *)v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v35);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected privateRemindd entitlement format {reminddEntitlements: %{public}s}", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_53:
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
        goto LABEL_54;
      }

LABEL_52:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v35);
      goto LABEL_53;
    }
    uint64_t v8 = 0x65726F7473;
    uint64_t v9 = 0xE500000000000000;
    uint64_t v10 = 0x65726F7473;
    switch(a1)
    {
      case 1:
        uint64_t v10 = 0x6E756F4669726973;
        uint64_t v9 = 0xEF737070416E4964;
        break;
      case 2:
        uint64_t v9 = 0xE400000000000000;
        uint64_t v10 = 1668184435;
        break;
      case 3:
        uint64_t v10 = 0x6775626564;
        break;
      case 4:
        uint64_t v9 = 0x80000001007CF7A0;
        uint64_t v10 = 0xD000000000000011;
        break;
      case 5:
        uint64_t v9 = 0xE800000000000000;
        uint64_t v10 = 0x676E697865646E69;
        break;
      case 6:
        uint64_t v10 = 0x65746E4972657375;
        uint64_t v9 = 0xEF65766974636172;
        break;
      case 7:
        uint64_t v10 = 0x76696C417065656BLL;
        uint64_t v9 = 0xE900000000000065;
        break;
      default:
        break;
    }
    if (*(void *)(v33 + 16) && (unint64_t v18 = sub_1001806F8(v10, v9), (v19 & 1) != 0))
    {
      sub_10009A1B0(*(void *)(v33 + 56) + 32 * v18, (uint64_t)&v33);
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v34 + 1))
    {
      sub_10009A1A0(&v33, &v35);
      sub_10009A1B0((uint64_t)&v35, (uint64_t)&v33);
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      if (swift_dynamicCast())
      {
        unsigned __int8 v17 = [v32[0] BOOLValue];

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v35);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
        return v17 & 1;
      }
      if (qword_100907AE0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_100920A70);
      sub_10009A1B0((uint64_t)&v35, (uint64_t)&v33);
      sub_10009A1B0((uint64_t)&v35, (uint64_t)v32);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446722;
        unint64_t v24 = 0xE500000000000000;
        switch(a1)
        {
          case 1:
            uint64_t v8 = 0x6E756F4669726973;
            unint64_t v24 = 0xEF737070416E4964;
            break;
          case 2:
            unint64_t v24 = 0xE400000000000000;
            uint64_t v8 = 1668184435;
            break;
          case 3:
            uint64_t v8 = 0x6775626564;
            break;
          case 4:
            unint64_t v24 = 0x80000001007CF7A0;
            uint64_t v8 = 0xD000000000000011;
            break;
          case 5:
            unint64_t v24 = 0xE800000000000000;
            uint64_t v8 = 0x676E697865646E69;
            break;
          case 6:
            uint64_t v8 = 0x65746E4972657375;
            unint64_t v24 = 0xEF65766974636172;
            break;
          case 7:
            uint64_t v8 = 0x76696C417065656BLL;
            unint64_t v24 = 0xE900000000000065;
            break;
          default:
            break;
        }
        v30[0] = sub_1000C51B8(v8, v24, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2082;
        sub_10009A1B0((uint64_t)&v33, (uint64_t)v30);
        uint64_t v25 = String.init<A>(describing:)();
        v30[0] = sub_1000C51B8(v25, v26, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v33);
        *(_WORD *)(v23 + 22) = 2082;
        sub_1000C0DE0(v32, (uint64_t)v32[3]);
        v30[0] = swift_getDynamicType();
        sub_100094134(&qword_10091A470);
        uint64_t v27 = String.init<A>(describing:)();
        v30[0] = sub_1000C51B8(v27, v28, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v32);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unexpected type for remindd entitlement {entitlement: %{public}s, value: %{public}s, type: %{public}s}", (uint8_t *)v23, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v32);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v33);
      }
      goto LABEL_52;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
    id v7 = &v33;
LABEL_9:
    sub_1000966BC((uint64_t)v7, &qword_100908190);
LABEL_54:
    unsigned __int8 v17 = 0;
    return v17 & 1;
  }
  uint64_t v5 = 0x65726F7473;
  uint64_t v6 = 0xE500000000000000;
  switch(a1)
  {
    case 1:
      uint64_t v5 = 0x6E756F4669726973;
      uint64_t v6 = 0xEF737070416E4964;
      break;
    case 2:
      uint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1668184435;
      break;
    case 3:
      uint64_t v5 = 0x6775626564;
      break;
    case 4:
      uint64_t v6 = 0x80000001007CF7A0;
      uint64_t v5 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x676E697865646E69;
      break;
    case 6:
      uint64_t v5 = 0x65746E4972657375;
      uint64_t v6 = 0xEF65766974636172;
      break;
    case 7:
      uint64_t v5 = 0x76696C417065656BLL;
      uint64_t v6 = 0xE900000000000065;
      break;
    default:
      break;
  }
  unsigned __int8 v17 = sub_1001BCB84(v5, v6, (void *)v33);
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t sub_10049F4F4(char a1)
{
  sub_100662AFC(a1);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1000D6CBC((uint64_t)v9, (uint64_t)&v7);
  if (v8)
  {
    sub_10009A1A0(&v7, v9);
    sub_10009A1B0((uint64_t)v9, (uint64_t)&v7);
    sub_1000963CC(0, (unint64_t *)&unk_100910040);
    if ((swift_dynamicCast() & 1) != 0
      || (sub_10009A1B0((uint64_t)v9, (uint64_t)&v7),
          sub_1000963CC(0, (unint64_t *)&qword_100909FB0),
          (swift_dynamicCast() & 1) != 0))
    {
      id v4 = [v6 BOOLValue];

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v9);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v9);
      return 1;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&v7, &qword_100908190);
    return 0;
  }
  return (uint64_t)v4;
}

uint64_t sub_10049F67C(char a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 valueForEntitlement:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1000D6CBC((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_1000966BC((uint64_t)v11, &qword_100908190);
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_10090AFB0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v7 = 0;
    return v7 & 1;
  }
  uint64_t v5 = 0xD000000000000014;
  unint64_t v6 = 0x80000001007D6050;
  switch(a1)
  {
    case 1:
      unint64_t v6 = 0x80000001007D6030;
      uint64_t v5 = 0xD000000000000011;
      break;
    case 2:
      uint64_t v5 = 0xD000000000000021;
      uint64_t v8 = "com.apple.remindd.userInteractive";
      goto LABEL_13;
    case 3:
      uint64_t v5 = 0xD00000000000001CLL;
      uint64_t v8 = "com.apple.suggestd.reminders";
      goto LABEL_13;
    case 4:
      uint64_t v5 = 0xD000000000000025;
      uint64_t v8 = "com.apple.siri-distributed-evaluation";
LABEL_13:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  char v7 = sub_1001BCB84(v5, v6, *(void **)&v10[0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10049F838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10049F848()
{
  return swift_release();
}

uint64_t sub_10049F850()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10049F888@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049E2B8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10049F8A4(void *a1)
{
  v111[3] = sub_1000963CC(0, &qword_10091A468);
  v111[4] = &off_1008CEC90;
  v111[0] = a1;
  unint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;
  a1;
  LOBYTE(a1) = sub_10049EA80(v2, v4);
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
LABEL_11:
    uint64_t v5 = _swiftEmptyArrayStorage;
    goto LABEL_12;
  }
  if (![self isInternalInstall])
  {
    if (qword_100907AE0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100920A70);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Device is running a non-internal Install. Not providing remindtool access level", v11, 2u);
      swift_slowDealloc();
    }

    goto LABEL_11;
  }
  uint64_t v5 = sub_10030A18C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = sub_10030A18C((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  uint64_t v5[2] = v7 + 1;
  *((_DWORD *)v5 + v7 + 8) = 0x7FFFFFFF;
LABEL_12:
  char v12 = sub_10049EA80(0xD00000000000001ELL, 0x80000001007D5E00);
  sub_100096838((uint64_t)v111, (uint64_t)v110);
  if (v12)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v110);
    sub_100096838((uint64_t)v111, (uint64_t)v108);
  }
  else
  {
    os_log_type_t v13 = (void *)*sub_1000C0DE0(v110, v110[3]);
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 valueForEntitlement:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v106, (uint64_t)v108);
    uint64_t v16 = v109;
    sub_1000966BC((uint64_t)v108, &qword_100908190);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v110);
    sub_100096838((uint64_t)v111, (uint64_t)v108);
    if (!v16)
    {
      id v82 = (void *)*sub_1000C0DE0(v108, v109);
      NSString v83 = String._bridgeToObjectiveC()();
      id v84 = [v82 valueForEntitlement:v83];

      if (v84)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v104 = 0u;
        long long v105 = 0u;
      }
      sub_1000D6CBC((uint64_t)&v104, (uint64_t)&v106);
      uint64_t v95 = *((void *)&v107 + 1);
      sub_1000966BC((uint64_t)&v106, &qword_100908190);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v108);
      if (!v95) {
        goto LABEL_28;
      }
      goto LABEL_19;
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v108);
LABEL_19:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
  }
  unint64_t v18 = v5[2];
  unint64_t v17 = v5[3];
  int64_t v19 = v17 >> 1;
  unint64_t v20 = v18 + 1;
  if (v17 >> 1 <= v18)
  {
    uint64_t v5 = sub_10030A18C((void *)(v17 > 1), v18 + 1, 1, v5);
    unint64_t v17 = v5[3];
    int64_t v19 = v17 >> 1;
  }
  uint64_t v5[2] = v20;
  *((_DWORD *)v5 + v18 + 8) = 1;
  unint64_t v21 = v18 + 2;
  if (v19 < (uint64_t)(v18 + 2)) {
    uint64_t v5 = sub_10030A18C((void *)(v17 > 1), v18 + 2, 1, v5);
  }
  uint64_t v5[2] = v21;
  *((_DWORD *)v5 + v20 + 8) = 4;
  unint64_t v22 = v5[3];
  if ((uint64_t)(v18 + 3) > (uint64_t)(v22 >> 1)) {
    uint64_t v5 = sub_10030A18C((void *)(v22 > 1), v18 + 3, 1, v5);
  }
  uint64_t v5[2] = v18 + 3;
  *((_DWORD *)v5 + v21 + 8) = 8;
LABEL_28:
  char v23 = sub_10049EA80(0xD000000000000012, 0x80000001007D5E80);
  sub_100096838((uint64_t)v111, (uint64_t)&v106);
  if (v23)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v106);
  }
  else
  {
    sub_1000C0DE0(&v106, *((uint64_t *)&v107 + 1));
    char v24 = sub_10049EA80(0xD000000000000026, 0x80000001007D5EA0);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v106);
    if ((v24 & 1) == 0) {
      goto LABEL_36;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
  }
  unint64_t v26 = v5[2];
  unint64_t v25 = v5[3];
  if (v26 >= v25 >> 1) {
    uint64_t v5 = sub_10030A18C((void *)(v25 > 1), v26 + 1, 1, v5);
  }
  uint64_t v5[2] = v26 + 1;
  *((_DWORD *)v5 + v26 + 8) = 2;
LABEL_36:
  uint64_t v27 = (void *)v111[0];
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 valueForEntitlement:v28];

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v102 = 0u;
    long long v103 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v102, (uint64_t)&v104);
  uint64_t v30 = *((void *)&v105 + 1);
  sub_1000966BC((uint64_t)&v104, &qword_100908190);
  sub_100096838((uint64_t)v111, (uint64_t)&v104);
  if (v30)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v104);
  }
  else
  {
    sub_1000C0DE0(&v104, *((uint64_t *)&v105 + 1));
    uint64_t v31 = sub_10049EA80(0xD000000000000024, 0x80000001007D5F00);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v104);
    if ((v31 & 1) == 0) {
      goto LABEL_53;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
  }
  unint64_t v33 = v5[2];
  unint64_t v32 = v5[3];
  int64_t v34 = v32 >> 1;
  unint64_t v35 = v33 + 1;
  if (v32 >> 1 <= v33)
  {
    uint64_t v5 = sub_10030A18C((void *)(v32 > 1), v33 + 1, 1, v5);
    unint64_t v32 = v5[3];
    int64_t v34 = v32 >> 1;
  }
  uint64_t v5[2] = v35;
  *((_DWORD *)v5 + v33 + 8) = 8;
  unint64_t v36 = v33 + 2;
  if (v34 < (uint64_t)(v33 + 2)) {
    uint64_t v5 = sub_10030A18C((void *)(v32 > 1), v33 + 2, 1, v5);
  }
  uint64_t v5[2] = v36;
  *((_DWORD *)v5 + v35 + 8) = 16;
  unint64_t v37 = v5[3];
  unint64_t v38 = v33 + 3;
  if ((uint64_t)(v33 + 3) > (uint64_t)(v37 >> 1)) {
    uint64_t v5 = sub_10030A18C((void *)(v37 > 1), v33 + 3, 1, v5);
  }
  uint64_t v5[2] = v38;
  *((_DWORD *)v5 + v36 + 8) = 4;
  unint64_t v39 = v5[3];
  if ((uint64_t)(v33 + 4) > (uint64_t)(v39 >> 1)) {
    uint64_t v5 = sub_10030A18C((void *)(v39 > 1), v33 + 4, 1, v5);
  }
  uint64_t v5[2] = v33 + 4;
  *((_DWORD *)v5 + v38 + 8) = 32;
LABEL_53:
  Class v40 = (void *)v111[0];
  if (sub_10049F4F4(15))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
    }
    unint64_t v42 = v5[2];
    unint64_t v41 = v5[3];
    if (v42 >= v41 >> 1) {
      uint64_t v5 = sub_10030A18C((void *)(v41 > 1), v42 + 1, 1, v5);
    }
    uint64_t v5[2] = v42 + 1;
    *((_DWORD *)v5 + v42 + 8) = 1;
  }
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v40 valueForEntitlement:v43];

  if (v44)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v100 = 0u;
    long long v101 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v100, (uint64_t)&v102);
  uint64_t v45 = *((void *)&v103 + 1);
  sub_1000966BC((uint64_t)&v102, &qword_100908190);
  sub_100096838((uint64_t)v111, (uint64_t)&v102);
  if (v45)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v102);
LABEL_65:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
    }
    unint64_t v48 = v5[2];
    unint64_t v47 = v5[3];
    int64_t v49 = v47 >> 1;
    unint64_t v50 = v48 + 1;
    if (v47 >> 1 <= v48)
    {
      uint64_t v5 = sub_10030A18C((void *)(v47 > 1), v48 + 1, 1, v5);
      unint64_t v47 = v5[3];
      int64_t v49 = v47 >> 1;
    }
    uint64_t v5[2] = v50;
    *((_DWORD *)v5 + v48 + 8) = 1;
    int64_t v51 = v48 + 2;
    if (v49 < v51) {
      uint64_t v5 = sub_10030A18C((void *)(v47 > 1), v51, 1, v5);
    }
    uint64_t v5[2] = v51;
    *((_DWORD *)v5 + v50 + 8) = 4;
    if (sub_10049EBBC(0))
    {
      unint64_t v53 = v5[2];
      unint64_t v52 = v5[3];
      if (v53 >= v52 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v52 > 1), v53 + 1, 1, v5);
      }
      uint64_t v5[2] = v53 + 1;
      *((_DWORD *)v5 + v53 + 8) = 1;
    }
    if (sub_10049EBBC(1))
    {
      unint64_t v55 = v5[2];
      unint64_t v54 = v5[3];
      if (v55 >= v54 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v54 > 1), v55 + 1, 1, v5);
      }
      uint64_t v5[2] = v55 + 1;
      *((_DWORD *)v5 + v55 + 8) = 2;
    }
    if (sub_10049EBBC(2))
    {
      unint64_t v57 = v5[2];
      unint64_t v56 = v5[3];
      int64_t v58 = v56 >> 1;
      unint64_t v59 = v57 + 1;
      if (v56 >> 1 <= v57)
      {
        uint64_t v5 = sub_10030A18C((void *)(v56 > 1), v57 + 1, 1, v5);
        unint64_t v56 = v5[3];
        int64_t v58 = v56 >> 1;
      }
      uint64_t v5[2] = v59;
      *((_DWORD *)v5 + v57 + 8) = 8;
      unint64_t v60 = v57 + 2;
      if (v58 < (uint64_t)(v57 + 2)) {
        uint64_t v5 = sub_10030A18C((void *)(v56 > 1), v57 + 2, 1, v5);
      }
      uint64_t v5[2] = v60;
      *((_DWORD *)v5 + v59 + 8) = 4;
      unint64_t v61 = v5[3];
      if ((uint64_t)(v57 + 3) > (uint64_t)(v61 >> 1)) {
        uint64_t v5 = sub_10030A18C((void *)(v61 > 1), v57 + 3, 1, v5);
      }
      uint64_t v5[2] = v57 + 3;
      *((_DWORD *)v5 + v60 + 8) = 16;
    }
    if (sub_10049EBBC(3))
    {
      unint64_t v63 = v5[2];
      unint64_t v62 = v5[3];
      if (v63 >= v62 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v62 > 1), v63 + 1, 1, v5);
      }
      uint64_t v5[2] = v63 + 1;
      *((_DWORD *)v5 + v63 + 8) = 32;
    }
    if (sub_10049EBBC(4))
    {
      unint64_t v65 = v5[2];
      unint64_t v64 = v5[3];
      if (v65 >= v64 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v64 > 1), v65 + 1, 1, v5);
      }
      uint64_t v5[2] = v65 + 1;
      *((_DWORD *)v5 + v65 + 8) = 1024;
    }
    if (sub_10049EBBC(5))
    {
      unint64_t v67 = v5[2];
      unint64_t v66 = v5[3];
      if (v67 >= v66 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v66 > 1), v67 + 1, 1, v5);
      }
      uint64_t v5[2] = v67 + 1;
      *((_DWORD *)v5 + v67 + 8) = 64;
    }
    if (sub_10049EBBC(6))
    {
      unint64_t v69 = v5[2];
      unint64_t v68 = v5[3];
      if (v69 >= v68 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v68 > 1), v69 + 1, 1, v5);
      }
      uint64_t v5[2] = v69 + 1;
      *((_DWORD *)v5 + v69 + 8) = 256;
    }
    if (sub_10049EBBC(7))
    {
      unint64_t v71 = v5[2];
      unint64_t v70 = v5[3];
      if (v71 >= v70 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v70 > 1), v71 + 1, 1, v5);
      }
      uint64_t v5[2] = v71 + 1;
      *((_DWORD *)v5 + v71 + 8) = 128;
    }
    goto LABEL_107;
  }
  sub_1000C0DE0(&v102, *((uint64_t *)&v103 + 1));
  uint64_t v46 = sub_10049F67C(1);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v102);
  if (v46) {
    goto LABEL_65;
  }
LABEL_107:
  uint64_t result = sub_1001BCC4C(1, (uint64_t)v5);
  if (result) {
    goto LABEL_115;
  }
  if (!kTCCServiceReminders)
  {
    __break(1u);
    return result;
  }
  NSString v73 = (void *)v111[0];
  id v74 = kTCCServiceReminders;
  [v73 auditToken];
  LODWORD(v73) = TCCAccessCheckAuditToken();

  if (!v73)
  {
LABEL_115:
    uint64_t v77 = 0;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
    }
    unint64_t v76 = v5[2];
    unint64_t v75 = v5[3];
    if (v76 >= v75 >> 1) {
      uint64_t v5 = sub_10030A18C((void *)(v75 > 1), v76 + 1, 1, v5);
    }
    uint64_t v5[2] = v76 + 1;
    *((_DWORD *)v5 + v76 + 8) = 1;
    uint64_t v77 = &_mh_execute_header;
  }
  char v78 = sub_1001BCC4C(1, (uint64_t)v5);
  sub_100096838((uint64_t)v111, (uint64_t)&v100);
  if (v78)
  {
    id v79 = (void *)*sub_1000C0DE0(&v100, *((uint64_t *)&v101 + 1));
    NSString v80 = String._bridgeToObjectiveC()();
    id v81 = [v79 valueForEntitlement:v80];

    if (v81)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v96 = 0u;
      long long v97 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v96, (uint64_t)v98);
    uint64_t v85 = v99;
    sub_1000966BC((uint64_t)v98, &qword_100908190);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v100);
    if (v85)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_10030A18C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v87 = v5[2];
      unint64_t v86 = v5[3];
      if (v87 >= v86 >> 1) {
        uint64_t v5 = sub_10030A18C((void *)(v86 > 1), v87 + 1, 1, v5);
      }
      uint64_t v5[2] = v87 + 1;
      *((_DWORD *)v5 + v87 + 8) = 512;
    }
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v100);
  }
  uint64_t v88 = v5[2];
  if (v88)
  {
    uint64_t v89 = 0;
    LODWORD(v90) = 0;
    do
    {
      int v91 = *((_DWORD *)v5 + v89 + 8);
      if ((v91 & ~v90) == 0) {
        int v91 = 0;
      }
      uint64_t v90 = v91 | v90;
      ++v89;
    }
    while (v88 != v89);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v90 = 0;
  }
  id v92 = (void *)v111[0];
  NSString v93 = String._bridgeToObjectiveC()();
  id v94 = [v92 valueForEntitlement:v93];

  if (v94)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v96 = 0u;
    long long v97 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v96, (uint64_t)v98);
  if (v99) {
    swift_dynamicCast();
  }
  else {
    sub_1000966BC((uint64_t)v98, &qword_100908190);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v111);
  return v90 | (unint64_t)v77;
}

uint64_t sub_1004A0824(void (*a1)(uint64_t *, id), uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v8);
  if (v8)
  {
    swift_unknownObjectRetain();
    a1(&v8, 0);
    return swift_unknownObjectRelease_n();
  }
  else
  {
    uint64_t v5 = self;
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 xpcPerformerUnavailableErrorWithDescription:v6];

    swift_willThrow();
    uint64_t v8 = 0;
    swift_errorRetain();
    a1(&v8, v7);
    swift_errorRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_1004A0944@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049DE40(*(void **)(v1 + 16), a1);
}

uint64_t sub_1004A0960@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049D870(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_1004A0984(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1004A09B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049D584(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1004A09CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049D388(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_1004A09E8()
{
  unint64_t result = qword_10091A460;
  if (!qword_10091A460)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A460);
  }
  return result;
}

unint64_t sub_1004A0A40()
{
  unint64_t result = qword_10090ABA0;
  if (!qword_10090ABA0)
  {
    sub_100096058((uint64_t *)&unk_10091A450);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090ABA0);
  }
  return result;
}

uint64_t sub_1004A0A9C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004A0AD4()
{
}

void sub_1004A0ADC()
{
}

uint64_t sub_1004A0AE4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004A0B24()
{
  sub_100121BC8(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_1004A0B2C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004A0B3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

char *sub_1004A0B88(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (id *)((char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  unint64_t v57 = (char *)v38 - v8;
  uint64_t v9 = type metadata accessor for REMManualOrdering.PinnedList();
  __chkstk_darwin(v9);
  int64_t v58 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  NSString v43 = (void *)((char *)v38 - v12);
  __chkstk_darwin(v13);
  unint64_t v56 = (void *)((char *)v38 - v14);
  __chkstk_darwin(v15);
  unint64_t v55 = (char *)v38 - v17;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v38[2] = v1;
    unint64_t v20 = *(void (**)(id *, char *, uint64_t))(v4 + 16);
    uint64_t v19 = v4 + 16;
    unint64_t v21 = (char *)(a1 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64)));
    unint64_t v50 = (uint64_t (**)(id *, uint64_t))(v19 + 72);
    int64_t v51 = v20;
    int v49 = enum case for REMAccountsListDataView.Model.PinnedList.predefinedSmartList(_:);
    int v42 = enum case for REMAccountsListDataView.Model.PinnedList.list(_:);
    int v39 = enum case for REMAccountsListDataView.Model.PinnedList.customSmartList(_:);
    unint64_t v47 = (void (**)(char *, uint64_t))(v19 - 8);
    unint64_t v48 = (void (**)(id *, uint64_t))(v19 + 80);
    unsigned int v41 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
    uint64_t v52 = v16;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v46 = (void (**)(void *, void, uint64_t))(v16 + 104);
    unsigned int v40 = enum case for REMManualOrdering.PinnedList.predefinedSmartList(_:);
    uint64_t v44 = *(void *)(v19 + 56);
    v38[1] = a1;
    swift_bridgeObjectRetain();
    unint64_t v22 = (char *)_swiftEmptyArrayStorage;
    unint64_t v53 = v6;
    uint64_t v54 = v19;
    while (1)
    {
      char v23 = v57;
      char v24 = v51;
      v51((id *)v57, v21, v3);
      v24(v6, v23, v3);
      int v25 = (*v50)(v6, v3);
      if (v25 == v49)
      {
        (*v47)(v23, v3);
        (*v48)(v6, v3);
        id v26 = *v6;
        uint64_t v27 = (char *)v56;
        *unint64_t v56 = v26;
        (*v46)(v27, v40, v9);
        NSString v28 = *v45;
      }
      else
      {
        if (v25 == v42)
        {
          (*v48)(v6, v3);
          id v29 = *v6;
          id v30 = [v29 objectID];

          (*v47)(v23, v3);
          uint64_t v31 = (char *)v43;
          char *v43 = v30;
        }
        else
        {
          if (v25 != v39)
          {
            unint64_t result = (char *)_diagnoseUnexpectedEnumCase<A>(type:)();
            __break(1u);
            return result;
          }
          (*v48)(v6, v3);
          id v32 = *v6;
          id v33 = [*v6 objectID];

          (*v47)(v23, v3);
          uint64_t v31 = (char *)v43;
          char *v43 = v33;
        }
        (*v46)(v31, v41, v9);
        NSString v28 = *v45;
        uint64_t v27 = (char *)v56;
        (*v45)((char *)v56, v31, v9);
      }
      int64_t v34 = v55;
      v28(v55, v27, v9);
      v28(v58, v34, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v22 = (char *)sub_100309280(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22);
      }
      unint64_t v36 = *((void *)v22 + 2);
      unint64_t v35 = *((void *)v22 + 3);
      if (v36 >= v35 >> 1) {
        unint64_t v22 = (char *)sub_100309280(v35 > 1, v36 + 1, 1, (unint64_t)v22);
      }
      *((void *)v22 + 2) = v36 + 1;
      v28(&v22[((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v36], v58, v9);
      v21 += v44;
      --v18;
      NSString v6 = v53;
      if (!v18)
      {
        swift_bridgeObjectRelease();
        return v22;
      }
    }
  }
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_1004A1104(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a1;
  uint64_t v80 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v6 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v77 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v71 = (char *)v65 - v9;
  __chkstk_darwin(v10);
  unint64_t v76 = (char *)v65 - v11;
  __chkstk_darwin(v12);
  unint64_t v69 = (char *)v65 - v13;
  uint64_t v14 = sub_1004A0B88(a4);
  v65[0] = 0;
  uint64_t v15 = sub_100126D04((uint64_t)v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_1001A22C4(v15, a2);
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_1002ED9F0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = *(void *)(a4 + 16);
  v65[1] = a4;
  uint64_t v74 = v6;
  if (v18)
  {
    unint64_t v19 = a4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v79 = *(void *)(v6 + 72);
    unint64_t v75 = v16 & 0xC000000000000001;
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFFF8;
    if (v16 < 0) {
      uint64_t v20 = v16;
    }
    uint64_t v73 = v20;
    unint64_t v67 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    unint64_t v70 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v68 = v16;
    while (1)
    {
      uint64_t v21 = REMAccountsListDataView.Model.PinnedList.objectID.getter();
      if (v21)
      {
        unint64_t v22 = (void *)v21;
        if (v75)
        {
          uint64_t v23 = __CocoaDictionary.lookup(_:)();
          if (v23)
          {
            uint64_t v81 = v23;
            type metadata accessor for RDElementManualSortID();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v24 = v82;
            swift_unknownObjectRelease();
            if (v24) {
              goto LABEL_15;
            }
          }
        }
        else if (*(void *)(v16 + 16))
        {
          unint64_t v25 = sub_100306FE8(v21);
          if (v26)
          {
            uint64_t v24 = *(void *)(*(void *)(v16 + 56) + 8 * v25);
            swift_retain();
            if (v24)
            {
LABEL_15:
              uint64_t v27 = *(void *)(v24 + 24);
              unint64_t v78 = v17;
              if (v27)
              {
                uint64_t v28 = *(void *)(v24 + 16);
                uint64_t v29 = v27;
              }
              else
              {
                v30._uint64_t countAndFlagsBits = UUID.uuidString.getter();
                uint64_t v82 = 0x7C6C61636F6CLL;
                unint64_t v83 = 0xE600000000000000;
                String.append(_:)(v30);
                swift_bridgeObjectRelease();
                uint64_t v28 = v82;
                uint64_t v29 = v83;
              }
              uint64_t v72 = *v67;
              uint64_t v31 = (uint64_t)v69;
              v72(v69, v19, v80);
              swift_bridgeObjectRetain();
              uint64_t v32 = v78;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v82 = v32;
              sub_1002C6838(v31, v28, v29, isUniquelyReferenced_nonNull_native);
              uint64_t v34 = v82;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v35._uint64_t countAndFlagsBits = UUID.uuidString.getter();
              uint64_t v82 = 0x7C6C61636F6CLL;
              unint64_t v83 = 0xE600000000000000;
              String.append(_:)(v35);
              swift_bridgeObjectRelease();
              uint64_t v36 = v82;
              uint64_t v37 = v83;
              v72((char *)v31, v19, v80);
              char v38 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v82 = v34;
              sub_1002C6838(v31, v36, v37, v38);
              unint64_t v17 = v82;
              swift_release();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v6 = v74;
              uint64_t v16 = v68;
              goto LABEL_6;
            }
          }
        }
      }
LABEL_6:
      v19 += v79;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(v66 + 16);
  if (v39)
  {
    unint64_t v75 = v6 + 16;
    uint64_t v40 = v6 + 32;
    uint64_t v73 = v6 + 8;
    unsigned int v41 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    int v42 = _swiftEmptyArrayStorage;
    unint64_t v78 = v17;
    do
    {
      if (*(void *)(v17 + 16))
      {
        uint64_t v44 = *(v41 - 1);
        uint64_t v45 = *v41;
        swift_bridgeObjectRetain();
        unint64_t v46 = sub_1001806F8(v44, v45);
        if (v47)
        {
          uint64_t v48 = *(void *)(v17 + 56);
          uint64_t v79 = *(void *)(v6 + 72);
          int v49 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
          uint64_t v50 = v40;
          int64_t v51 = v42;
          uint64_t v52 = v71;
          uint64_t v53 = v80;
          v49(v71, v48 + v79 * v46, v80);
          uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
          unint64_t v55 = v76;
          unint64_t v56 = v52;
          int v42 = v51;
          uint64_t v40 = v50;
          unint64_t v57 = v54;
          v54(v76, v56, v53);
          v49(v77, (unint64_t)v55, v53);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v42 = (void *)sub_10030924C(0, v42[2] + 1, 1, (unint64_t)v42);
          }
          unint64_t v59 = v42[2];
          unint64_t v58 = v42[3];
          uint64_t v6 = v74;
          if (v59 >= v58 >> 1) {
            int v42 = (void *)sub_10030924C(v58 > 1, v59 + 1, 1, (unint64_t)v42);
          }
          v42[2] = v59 + 1;
          uint64_t v43 = v80;
          v57((char *)v42+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ v59 * v79, v77, v80);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v76, v43);
          unint64_t v17 = v78;
        }
        swift_bridgeObjectRelease();
      }
      v41 += 2;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v60 = v42;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v60 = _swiftEmptyArrayStorage;
  }
  uint64_t v82 = (uint64_t)v60;
  sub_100094134(&qword_10091A478);
  sub_1001C1A64();
  sub_1004A17E4();
  sub_1001207D4();
  uint64_t v61 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v62 = swift_bridgeObjectRetain();
  unint64_t v63 = sub_1004A1840(v62, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v82 = (uint64_t)v60;
  sub_100201E40((uint64_t)v63);
  return v82;
}

uint64_t sub_1004A17A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMAccountsListDataView.Model.PinnedList.objectID.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1004A17E4()
{
  unint64_t result = qword_10091A480;
  if (!qword_10091A480)
  {
    sub_100096058(&qword_10091A478);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091A480);
  }
  return result;
}

void *sub_1004A1840(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for REMAccountsListDataView.Model.PinnedList();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v35 - v10;
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v47 = *(void *)(a1 + 16);
  if (v47)
  {
    v35[0] = v2;
    uint64_t v13 = 0;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
    uint64_t v14 = v6 + 16;
    unint64_t v16 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    v35[1] = v14;
    unint64_t v36 = v16;
    uint64_t v45 = a1 + v16;
    unint64_t v46 = v15;
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0) {
      uint64_t v18 = a2;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v17;
    uint64_t v42 = a2 + 56;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    unint64_t v40 = a2 & 0xC000000000000001;
    unsigned int v41 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v39 = a2;
    while (1)
    {
      v46(v11, v45 + v17 * v13, v5, v9);
      uint64_t v19 = REMAccountsListDataView.Model.PinnedList.objectID.getter();
      if (v19)
      {
        uint64_t v20 = (void *)v19;
        if (v40)
        {
          char v21 = __CocoaSet.contains(_:)();

          if ((v21 & 1) == 0) {
            goto LABEL_20;
          }
        }
        else
        {
          if (!*(void *)(a2 + 16)) {
            goto LABEL_19;
          }
          Swift::Int v22 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
          uint64_t v23 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v24 = v22 & ~v23;
          if (((*(void *)(v42 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
            goto LABEL_19;
          }
          sub_1001C1A64();
          id v25 = *(id *)(*(void *)(a2 + 48) + 8 * v24);
          char v26 = static NSObject.== infix(_:_:)();

          if ((v26 & 1) == 0)
          {
            uint64_t v27 = ~v23;
            while (1)
            {
              unint64_t v24 = (v24 + 1) & v27;
              a2 = v39;
              if (((*(void *)(v42 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
                break;
              }
              id v28 = *(id *)(*(void *)(v39 + 48) + 8 * v24);
              char v29 = static NSObject.== infix(_:_:)();

              if (v29) {
                goto LABEL_5;
              }
            }
LABEL_19:

LABEL_20:
            Swift::String v30 = *v43;
            (*v43)(v44, v11, v5);
            uint64_t v31 = v48;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1001DE2C8(0, v31[2] + 1, 1);
              uint64_t v31 = v48;
            }
            unint64_t v33 = v31[2];
            unint64_t v32 = v31[3];
            if (v33 >= v32 >> 1)
            {
              sub_1001DE2C8(v32 > 1, v33 + 1, 1);
              uint64_t v31 = v48;
            }
            _OWORD v31[2] = v33 + 1;
            uint64_t v34 = (char *)v31 + v36 + v33 * v38;
            uint64_t v17 = v38;
            v30(v34, v44, v5);
            uint64_t v48 = v31;
            goto LABEL_7;
          }
LABEL_5:

          uint64_t v17 = v38;
          a2 = v39;
        }
      }
      (*v41)(v11, v5);
LABEL_7:
      if (++v13 == v47) {
        return v48;
      }
    }
  }
  return result;
}

uint64_t sub_1004A1BA4()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1004A1CC8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091A490);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091A490);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1004A1D90()
{
  qword_10091A4A8 = 0x4122750000000000;
}

uint64_t sub_1004A1DA4()
{
  uint64_t v1 = *(NSObject **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1004A4720;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_10008F6F4;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  uint64_t v5[2] = sub_1003B3260;
  v5[3] = &unk_1008C7870;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

void sub_1004A1ED8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v49 = *(void *)(*(void *)(*(void *)v1 + 80) - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v42 - v3;
  uint64_t v46 = *(void *)(v5 + 88);
  uint64_t v47 = *(void *)(v46 + 8);
  uint64_t v7 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (void *)*((void *)v2 + 2);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v45 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if (v19)
  {
    if (qword_100907670 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v50 = sub_10008E2DC(v20, (uint64_t)qword_10091A490);
  char v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "CloudSchemaCatchUpSyncController: Starting", v23, 2u);
    swift_slowDealloc();
  }

  unint64_t v24 = &v2[*(void *)(*(void *)v2 + 104)];
  swift_beginAccess();
  uint64_t v25 = v9;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v24, v8);
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v13, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  if (v27 == 1)
  {
    uint64_t v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v4, &v2[*(void *)(*(void *)v2 + 112)], v7);
    uint64_t v29 = swift_allocObject();
    Swift::String v30 = v4;
    uint64_t v44 = v25;
    uint64_t v31 = v29;
    swift_weakInit();
    unint64_t v32 = (void *)swift_allocObject();
    uint64_t v33 = v46;
    _OWORD v32[2] = v7;
    v32[3] = v33;
    id v32[4] = v31;
    uint64_t v43 = v24;
    uint64_t v34 = v47;
    uint64_t v46 = v8;
    Swift::String v35 = *(void (**)(id, uint64_t (*)(), void *, uint64_t, uint64_t))(v47 + 24);
    swift_retain();
    unint64_t v36 = v48;
    v35(v45, sub_1004A4870, v32, v7, v34);
    swift_release();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v7);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v36, 0, 1, AssociatedTypeWitness);
    uint64_t v37 = v43;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v37, v36, v46);
    swift_endAccess();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v40 = 0;
      unsigned int v41 = "CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v38, v39, v41, v40, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v40 = 0;
      unsigned int v41 = "CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?";
      goto LABEL_10;
    }
  }
}

void sub_1004A24FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(v14 - 1);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (void *)v1[2];
  void *v18 = v19;
  (*(void (**)(void *, void, void *, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v14 = *(void **)((char *)v1 + *(void *)(*v1 + 120));
  if ([v14 schedulingState] != (id)1) {
    return;
  }
  id v21 = [v14 lastScheduledDate];
  if (v21)
  {
    os_log_type_t v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v4, v10, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v23(v13, v4, v5);
      Date.timeIntervalSinceNow.getter();
      double v24 = *(double *)((char *)v1 + *(void *)(*v1 + 136));
      if (v25 >= -v24)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      }
      else
      {
        if (qword_100907670 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_10091A490);
        int v27 = v42;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v42, v13, v5);
        swift_retain();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v41 = swift_slowAlloc();
          uint64_t v44 = v41;
          *(_DWORD *)uint64_t v30 = 134349314;
          uint64_t v43 = *(void *)&v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v30 + 12) = 2082;
          sub_1004A47B0((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
          os_log_t v40 = v28;
          uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v43 = sub_1000C51B8(v31, v32, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
          v33(v27, v5);
          os_log_t v34 = v40;
          _os_log_impl((void *)&_mh_execute_header, v40, v29, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
          v33(v27, v5);
        }
        sub_1004A3540();
        v33(v13, v5);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1000EACF4((uint64_t)v4);
  if (qword_100907670 != -1) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v35 = type metadata accessor for Logger();
  sub_10008E2DC(v35, (uint64_t)qword_10091A490);
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now", v38, 2u);
    swift_slowDealloc();
  }

  [v14 setSchedulingState:0];
  [v14 setLastScheduledDate:0];
  sub_1004A2CA4();
}

void sub_1004A2B98()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6) {
    sub_1004A2CA4();
  }
  else {
    __break(1u);
  }
}

void sub_1004A2CA4()
{
  uint64_t v1 = *(void *)(*(void *)(*v0 + 88) + 8);
  v45[1] = *(void *)(*v0 + 80);
  _OWORD v45[2] = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v45 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v8);
  v45[0] = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v46 = (char *)v45 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  __n128 v16 = (void *)((char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = (void *)v0[2];
  *__n128 v16 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v19 = (char *)v0 + *(void *)(*v0 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v19, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (qword_100907670 == -1)
    {
LABEL_4:
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091A490);
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out", v23, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_27:
    swift_once();
    goto LABEL_4;
  }
  double v24 = v46;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v46, v6, AssociatedTypeWitness);
  double v25 = *(void **)((char *)v0 + *(void *)(*v0 + 120));
  swift_getObjectType();
  id v26 = [v25 schedulingState];
  if (v26)
  {
    id v27 = v26;
    if (qword_100907670 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_10091A490);
    uint64_t v29 = v45[0];
    (*(void (**)(void, char *, uint64_t))(v7 + 16))(v45[0], v24, AssociatedTypeWitness);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 134349312;
      id v47 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 1026;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v35(v29, AssociatedTypeWitness);
      LODWORD(v47) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{BOOL,public}d}", (uint8_t *)v32, 0x12u);
      double v24 = v46;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v35(v29, AssociatedTypeWitness);
    }

    v35((uint64_t)v24, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v36 = swift_getAssociatedConformanceWitness();
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(AssociatedTypeWitness, v36))
    {
      if (qword_100907670 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_10008E2DC(v37, (uint64_t)qword_10091A490);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        os_log_t v40 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_t v40 = 134349056;
        id v47 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}", v40, 0xCu);
        swift_slowDealloc();
      }

      sub_1004A3FE8();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v36 + 24))(AssociatedTypeWitness, v36);
      sub_1004A3FE8();
      if (qword_100907670 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_10008E2DC(v41, (uint64_t)qword_10091A490);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria", v44, 2u);
        swift_slowDealloc();
      }
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v24, AssociatedTypeWitness);
  }
}

uint64_t sub_1004A34A4()
{
  swift_retain();
  sub_1004A2B98();

  return swift_release();
}

uint64_t sub_1004A34E0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1004A3540();
    return swift_release();
  }
  return result;
}

void sub_1004A3540()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v43 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (void *)((char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (void *)v1[2];
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  id v42 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    if (qword_100907670 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091A490);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CloudSchemaCatchUpSyncController: Running scheduled background activity...", v17, 2u);
    swift_slowDealloc();
  }

  id v18 = *(void **)((char *)v1 + *(void *)(*v1 + 120));
  uint64_t v19 = (void **)[v18 schedulingState];
  if (v19 == (void **)1)
  {
    [v18 setSchedulingState:2];
    uint64_t v20 = (char *)v1 + *(void *)(*v1 + 128);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t v22 = *((void *)v20 + 1);
    uint64_t v23 = Logger.logObject.getter();
    if (Strong)
    {
      uint64_t v40 = v3;
      uint64_t v41 = v6;
      uint64_t v24 = v2;
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v25))
      {
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v26, 2u);
        swift_slowDealloc();
      }

      uint64_t v27 = os_transaction_create();
      uint64_t v28 = (void *)swift_allocObject();
      v28[2] = Strong;
      v28[3] = v22;
      v39[5] = Strong;
      v39[6] = v27;
      v28[4] = v27;
      uint64_t v50 = sub_100096758;
      int64_t v51 = v28;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      void v39[4] = &v48;
      uint64_t v48 = sub_100236C78;
      uint64_t v49 = &unk_1008C78C0;
      uint64_t v29 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v30 = v43;
      static DispatchQoS.unspecified.getter();
      id v45 = _swiftEmptyArrayStorage;
      _OWORD v39[2] = sub_1004A47B0((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      v39[1] = sub_100094134((uint64_t *)&unk_10090AFD0);
      v39[3] = sub_1000D10E0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v29);
      uint64_t v40 = *(void *)(v40 + 8);
      ((void (*)(char *, uint64_t))v40)(v5, v24);
      uint64_t v44 = *(void *)(v44 + 8);
      uint64_t v31 = v41;
      ((void (*)(char *, uint64_t))v44)(v30, v41);
      swift_release();
      uint64_t v50 = sub_1004A47F8;
      int64_t v51 = v1;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      uint64_t v48 = sub_100236C78;
      uint64_t v49 = &unk_1008C78E8;
      uint64_t v32 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v45 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v32);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      ((void (*)(char *, uint64_t))v40)(v5, v24);
      ((void (*)(char *, uint64_t))v44)(v30, v31);
      swift_release();
    }
    else
    {
      uint64_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, (os_log_type_t)v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v37, "CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()", v38, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    uint64_t v33 = v19;
    int v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 134349056;
      uint64_t aBlock = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}", v36, 0xCu);
      swift_slowDealloc();
    }
  }
}

id sub_1004A3CA0()
{
  [v0 setSchedulingState:0];

  return [v0 setLastScheduledDate:0];
}

id sub_1004A3CE8()
{
  return [v0 setSchedulingState:2];
}

void sub_1004A3CFC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, const __CFString *, void, void, uint64_t, uint64_t))(a2 + 8))(1, @"CloudSchemaCatchUpSyncBackgroundActivity", 0, 0, ObjectType, a2);
  if (qword_100907670 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091A490);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "os_transaction RELEASE {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v6, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1004A3E24(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = (char *)a1 + *(void *)(v2 + 104);
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v7, 1, AssociatedTypeWitness);
  if (!result)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  }
  return result;
}

void sub_1004A3FE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v1 setSchedulingState:1];
  id v6 = [self rem_now];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v1 setLastScheduledDate:isa];
}

id *sub_1004A4110()
{
  uint64_t v1 = *v0;

  uint64_t v2 = (char *)v0 + *((void *)*v0 + 13);
  uint64_t v3 = v1[10];
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))((char *)v0 + *((void *)*v0 + 14), v3);
  swift_unknownObjectRelease();
  sub_1000F3DB4((uint64_t)v0 + *((void *)*v0 + 16));
  return v0;
}

uint64_t sub_1004A425C()
{
  sub_1004A4110();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDICCloudSchemaCatchUpSyncController()
{
  return sub_1000E6FBC();
}

uint64_t sub_1004A42CC()
{
  return sub_1004A1DA4();
}

uint64_t sub_1004A42F0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if ([v1 containsLargeDatabases])
  {
    double v2 = 1800.0;
  }
  else if ([v1 containsOnlySmallDatabases])
  {
    double v2 = 15.0;
  }
  else
  {
    double v2 = 300.0;
  }
  if (qword_100907670 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10091A490);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v6 = 134349056;
    *(double *)uint64_t v8 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDICCloudSchemaCatchUpSyncXPCActivity: Updating scheduler (xpcActivity) criteria {estimatedDuration: %{public}f}", v6, 0xCu);
    swift_slowDealloc();
  }

  v8[0] = xmmword_10078E7F0;
  v8[1] = xmmword_10078E7F0;
  uint64_t v9 = 0;
  int v10 = 257;
  char v11 = 0;
  double v12 = v2;
  __int16 v13 = 256;
  int v14 = 0;
  int v15 = 33620225;
  char v16 = 7;
  Swift::Int v17 = sub_100332130((uint64_t)&off_1008B6CF8);
  sub_100595B1C(v8);
  return swift_bridgeObjectRelease();
}