uint64_t sub_10054B3B0(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v8 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket();
  v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(sub_100094134(&qword_10091CCC8) + 48);
  v13 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, a3, v13);
  *(void *)&v11[v12] = a1;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *a4, v8);
  v14 = *a2;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_1003096A0(0, *(void *)(v14 + 16) + 1, 1, v14);
    *a2 = v14;
  }
  v17 = *(void *)(v14 + 16);
  v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    v14 = sub_1003096A0(v16 > 1, v17 + 1, 1, v14);
    *a2 = v14;
  }
  *(void *)(v14 + 16) = v17 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v17, v11, v8);
}

uint64_t sub_10054B588@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v34 = a5;
  uint64_t v35 = a2;
  uint64_t v8 = type metadata accessor for Calendar.Component();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v19 = __chkstk_darwin(v18).n128_u64[0];
  v21 = (char *)v31 - v20;
  id v22 = [*a1 completionDate:v19];
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_5;
  }
  v23 = v22;
  v31[1] = a4;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v24(v13, v17, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_5:
    uint64_t result = sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    uint64_t v28 = a3;
    goto LABEL_6;
  }
  v24(v21, v13, v14);
  uint64_t v26 = v32;
  uint64_t v25 = v33;
  v31[0] = *(void *)(v32 + 104);
  ((void (*)(char *, void, uint64_t))v31[0])(v10, enum case for Calendar.Component.era(_:), v33);
  uint64_t v35 = Calendar.component(_:from:)();
  v27 = *(void (**)(char *, uint64_t))(v26 + 8);
  v27(v10, v25);
  ((void (*)(char *, void, uint64_t))v31[0])(v10, enum case for Calendar.Component.year(_:), v25);
  uint64_t v28 = Calendar.component(_:from:)();
  v27(v10, v25);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, v14);
LABEL_6:
  v30 = v34;
  uint64_t *v34 = v35;
  v30[1] = v28;
  return result;
}

uint64_t sub_10054B8E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 completionDate];
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
}

BOOL sub_10054B9B4(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  return *a1 == *a2 && a1[1] < a2[1];
}

BOOL sub_10054B9E0(void *a1, void *a2)
{
  if (*a2 < *a1) {
    return 0;
  }
  return *a2 != *a1 || a2[1] >= a1[1];
}

BOOL sub_10054BA0C(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0;
  }
  return *a1 != *a2 || a1[1] >= a2[1];
}

BOOL sub_10054BA38(void *a1, void *a2)
{
  if (*a2 < *a1) {
    return 1;
  }
  return *a2 == *a1 && a2[1] < a1[1];
}

Swift::Int sub_10054BA64()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10054BAC0()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10054BAFC()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_10054BB54(uint64_t *a1)
{
  Swift::UInt v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_10054C294(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v6 = result;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      v92 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v2;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_147;
          }
          if (!v93) {
            goto LABEL_159;
          }
          v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_10054C330((char *)(v93 + 24 * v96), (char *)(v93 + 24 * *(void *)&v92[16 * v13 + 16]), v93 + 24 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v95 = sub_1001F433C((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_149;
          }
          v98 = &v95[16 * v94 + 32];
          *(void *)v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_150;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v103[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100094134(&qword_10090F780);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    v103 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *v2;
  uint64_t v102 = *v2 + 8;
  v100 = v2;
  uint64_t v101 = *v2 - 24;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v104 = v6;
  Swift::Int v105 = v3;
  uint64_t v106 = *v2;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 >= v3) {
      goto LABEL_47;
    }
    uint64_t v15 = (uint64_t *)(v11 + 24 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (void *)(v11 + 24 * v14);
    if (*v18 >= v16)
    {
      if (*v18 == v16)
      {
        BOOL v19 = v18[1] < v17;
        Swift::Int v10 = v14 + 2;
        if (v14 + 2 >= v3)
        {
LABEL_38:
          if (!v19) {
            goto LABEL_47;
          }
LABEL_39:
          if (v10 < v14) {
            goto LABEL_153;
          }
          goto LABEL_40;
        }
      }
      else
      {
        Swift::Int v10 = v14 + 2;
        if (v14 + 2 >= v3) {
          goto LABEL_47;
        }
        BOOL v19 = 0;
      }
LABEL_25:
      if (v3 <= v10 + 1) {
        Swift::Int v20 = v10 + 1;
      }
      else {
        Swift::Int v20 = v3;
      }
      v21 = (uint64_t *)(v102 + 24 * v10);
      do
      {
        uint64_t v22 = v16;
        uint64_t v16 = *(v21 - 1);
        uint64_t v23 = *v21;
        if (v22 < v16)
        {
          if (!v19) {
            goto LABEL_47;
          }
        }
        else if (v22 == v16)
        {
          if (((v19 ^ (v17 >= v23)) & 1) == 0) {
            goto LABEL_38;
          }
        }
        else if (v19)
        {
          goto LABEL_39;
        }
        v21 += 3;
        ++v10;
        uint64_t v17 = v23;
      }
      while (v10 < v3);
      Swift::Int v10 = v20;
      goto LABEL_38;
    }
    Swift::Int v10 = v14 + 2;
    if (v14 + 2 < v3)
    {
      BOOL v19 = 1;
      goto LABEL_25;
    }
LABEL_40:
    if (v14 < v10)
    {
      uint64_t v24 = 24 * v10;
      uint64_t v25 = 24 * v14;
      Swift::Int v26 = v10;
      Swift::Int v27 = v14;
      do
      {
        if (v27 != --v26)
        {
          if (!v11) {
            goto LABEL_158;
          }
          uint64_t v28 = v11 + v25;
          uint64_t v29 = v11 + v24;
          uint64_t v30 = *(void *)(v11 + v25 + 16);
          long long v31 = *(_OWORD *)(v11 + v25);
          uint64_t v32 = *(void *)(v11 + v24 - 8);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)(v11 + v24 - 24);
          *(void *)(v28 + 16) = v32;
          *(_OWORD *)(v29 - 24) = v31;
          *(void *)(v29 - 8) = v30;
        }
        ++v27;
        v24 -= 24;
        v25 += 24;
      }
      while (v27 < v26);
    }
LABEL_47:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_151;
      }
      if (v10 - v14 < v6) {
        break;
      }
    }
LABEL_68:
    if (v10 < v14) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1001F3D80(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v42 = *((void *)v12 + 2);
    unint64_t v41 = *((void *)v12 + 3);
    unint64_t v13 = v42 + 1;
    uint64_t v11 = v106;
    if (v42 >= v41 >> 1)
    {
      v91 = sub_1001F3D80((char *)(v41 > 1), v42 + 1, 1, v12);
      uint64_t v11 = v106;
      uint64_t v12 = v91;
    }
    *((void *)v12 + 2) = v13;
    v43 = v12 + 32;
    v44 = &v12[16 * v42 + 32];
    *(void *)v44 = v14;
    *((void *)v44 + 1) = v10;
    if (v42)
    {
      while (1)
      {
        unint64_t v45 = v13 - 1;
        if (v13 >= 4)
        {
          v50 = &v43[16 * v13];
          uint64_t v51 = *((void *)v50 - 8);
          uint64_t v52 = *((void *)v50 - 7);
          BOOL v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_135;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          char v49 = v56;
          if (v56) {
            goto LABEL_136;
          }
          unint64_t v57 = v13 - 2;
          v58 = &v43[16 * v13 - 32];
          uint64_t v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          BOOL v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_138;
          }
          BOOL v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_141;
          }
          if (v62 >= v53)
          {
            v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_145;
            }
            BOOL v73 = v48 < v83;
            goto LABEL_105;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *((void *)v12 + 4);
            uint64_t v75 = *((void *)v12 + 5);
            BOOL v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            char v68 = v56;
            goto LABEL_99;
          }
          uint64_t v47 = *((void *)v12 + 4);
          uint64_t v46 = *((void *)v12 + 5);
          BOOL v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          char v49 = v56;
        }
        if (v49) {
          goto LABEL_137;
        }
        unint64_t v57 = v13 - 2;
        v63 = &v43[16 * v13 - 32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        char v68 = v66;
        if (v66) {
          goto LABEL_140;
        }
        v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v56 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_143;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_144;
        }
        if (v67 + v72 >= v48)
        {
          BOOL v73 = v48 < v72;
LABEL_105:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v68) {
          goto LABEL_139;
        }
        v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_142;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        if (!v11) {
          goto LABEL_157;
        }
        v85 = &v43[16 * v84];
        uint64_t v86 = *(void *)v85;
        v87 = v43;
        v88 = &v43[16 * v45];
        uint64_t v89 = *((void *)v88 + 1);
        sub_10054C330((char *)(v11 + 24 * *(void *)v85), (char *)(v11 + 24 * *(void *)v88), v11 + 24 * v89, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v89 < v86) {
          goto LABEL_132;
        }
        if (v45 > *((void *)v12 + 2)) {
          goto LABEL_133;
        }
        *(void *)v85 = v86;
        *(void *)&v87[16 * v84 + 8] = v89;
        unint64_t v90 = *((void *)v12 + 2);
        if (v45 >= v90) {
          goto LABEL_134;
        }
        unint64_t v13 = v90 - 1;
        memmove(v88, v88 + 16, 16 * (v90 - 1 - v45));
        v43 = v87;
        *((void *)v12 + 2) = v90 - 1;
        uint64_t v11 = v106;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v104;
    Swift::Int v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      Swift::UInt v2 = v100;
      goto LABEL_118;
    }
  }
  Swift::Int v33 = v14 + v6;
  if (__OFADD__(v14, v6)) {
    goto LABEL_154;
  }
  if (v33 >= v3) {
    Swift::Int v33 = v3;
  }
  if (v33 >= v14)
  {
    if (v10 != v33)
    {
      uint64_t v34 = v101 + 24 * v10;
      do
      {
        uint64_t v35 = *(void *)(v11 + 24 * v10);
        Swift::Int v36 = v14;
        uint64_t v37 = v34;
        do
        {
          if (*(void *)v37 >= v35 && (*(void *)v37 != v35 || *(void *)(v37 + 8) >= *(void *)(v37 + 32))) {
            break;
          }
          if (!v11) {
            goto LABEL_156;
          }
          uint64_t v39 = *(void *)(v37 + 32);
          uint64_t v40 = *(void *)(v37 + 40);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)v37;
          *(void *)(v37 + 40) = *(void *)(v37 + 16);
          *(void *)uint64_t v37 = v35;
          *(void *)(v37 + 8) = v39;
          *(void *)(v37 + 16) = v40;
          v37 -= 24;
          ++v36;
        }
        while (v10 != v36);
        ++v10;
        v34 += 24;
      }
      while (v10 != v33);
      Swift::Int v10 = v33;
    }
    goto LABEL_68;
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10054C294(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 24 * a3 - 24;
LABEL_5:
    uint64_t v6 = *(void *)(v4 + 24 * a3);
    uint64_t v7 = result;
    uint64_t v8 = v5;
    while (1)
    {
      if (*(void *)v8 >= v6 && (*(void *)v8 != v6 || *(void *)(v8 + 8) >= *(void *)(v8 + 32)))
      {
LABEL_4:
        ++a3;
        v5 += 24;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      uint64_t v10 = *(void *)(v8 + 32);
      uint64_t v11 = *(void *)(v8 + 40);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
      *(void *)(v8 + 40) = *(void *)(v8 + 16);
      *(void *)uint64_t v8 = v6;
      *(void *)(v8 + 8) = v10;
      *(void *)(v8 + 16) = v11;
      v8 -= 24;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10054C330(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v30 = __src;
  uint64_t v29 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      uint64_t v17 = &v4[24 * v11];
      uint64_t v28 = v17;
      uint64_t v30 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v18 = a3 - 24;
        BOOL v19 = v6;
        while (1)
        {
          Swift::Int v20 = (char *)(v18 + 24);
          uint64_t v21 = *((void *)v17 - 3);
          uint64_t v23 = *((void *)v19 - 3);
          v19 -= 24;
          uint64_t v22 = v23;
          if (v23 < v21 || (v22 == v21 ? (BOOL v24 = *((void *)v6 - 2) < *((void *)v17 - 2)) : (BOOL v24 = 0), v24))
          {
            if (v20 != v6 || v18 >= (unint64_t)v6)
            {
              long long v26 = *(_OWORD *)v19;
              *(void *)(v18 + 16) = *((void *)v19 + 2);
              *(_OWORD *)unint64_t v18 = v26;
            }
            uint64_t v30 = v19;
            if (v19 <= v7) {
              goto LABEL_46;
            }
          }
          else
          {
            uint64_t v28 = v17 - 24;
            if (v20 < v17 || v18 >= (unint64_t)v17 || v20 != v17)
            {
              long long v25 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)unint64_t v18 = v25;
            }
            BOOL v19 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              goto LABEL_46;
            }
          }
          v18 -= 24;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    uint64_t v28 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(void *)v4 < *(void *)v6
          || (*(void *)v4 == *(void *)v6 ? (BOOL v13 = *((void *)v4 + 1) < *((void *)v6 + 1)) : (BOOL v13 = 0), v13))
        {
          uint64_t v15 = v6 + 24;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            long long v16 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v16;
          }
        }
        else
        {
          if (v7 != v4)
          {
            long long v14 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v14;
          }
          v4 += 24;
          uint64_t v29 = v4;
          uint64_t v15 = v6;
        }
        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v30 = v7;
    }
LABEL_46:
    sub_1001F3E7C((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10054C610(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v35 = a2;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  __chkstk_darwin(v11);
  uint64_t v34 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  long long v31 = (char *)v28 - v15;
  int64_t v16 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v28[1] = a4;
    v28[2] = a1;
    uint64_t v17 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    unint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    Swift::Int v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v29 = a3;
    uint64_t v30 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v19 = a4 & 1 | (2 * a3);
    uint64_t v20 = a3;
    while (1)
    {
      if (v20 >= v16)
      {
        __break(1u);
        return;
      }
      id v21 = *(id *)(v35 + 8 * v20);
      id v22 = [v21 completionDate];
      if (!v22) {
        break;
      }
      uint64_t v23 = v22;
      BOOL v24 = v34;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      long long v25 = *v17;
      (*v17)(v10, v24, v11);
      (*v18)(v10, 0, 1, v11);
      if ((*v33)(v10, 1, v11) == 1) {
        goto LABEL_4;
      }
      long long v26 = v31;
      v25(v31, v10, v11);
      sub_100550F58((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v30)(v26, v11);

      if ((v27 & 1) == 0)
      {
        if (v20 <= v29)
        {
          uint64_t v35 = 0;
          return;
        }
        if (v20 < 0) {
          __break(1u);
        }
        goto LABEL_13;
      }
LABEL_5:
      ++v20;
      v19 += 2;
      if (v16 == v20) {
        goto LABEL_13;
      }
    }
    (*v18)(v10, 1, 1, v11);
LABEL_4:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);

    goto LABEL_5;
  }
LABEL_13:
  swift_unknownObjectRetain();
}

void *sub_10054C94C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  int64_t v20 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v36[1] = v6;
    uint64_t v37 = (char *)v36 - v17;
    unint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v43 = v19;
    uint64_t v38 = v18;
    unint64_t v41 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t result = (void *)swift_unknownObjectRetain();
    id v21 = _swiftEmptyArrayStorage;
    uint64_t v45 = v15;
    uint64_t v44 = a2;
    uint64_t v39 = a1;
    uint64_t v40 = v20;
    while (a3 < v20)
    {
      id v23 = *(id *)(a2 + 8 * a3);
      id v24 = [v23 objectID];
      long long v25 = v24;
      if (*(void *)(a5 + 16) && (unint64_t v26 = sub_100306F98((uint64_t)v24), (v27 & 1) != 0)) {
        uint64_t v28 = *(void *)(*(void *)(a5 + 56) + 8 * v26);
      }
      else {
        uint64_t v28 = 0;
      }

      sub_100521784(v23, v28, 0, (uint64_t)v14);
      uint64_t v29 = v45;
      if ((*v42)(v14, 1, v45) == 1)
      {
        uint64_t result = (void *)sub_1000966BC((uint64_t)v14, &qword_10090FD78);
      }
      else
      {
        uint64_t v30 = *v41;
        long long v31 = v37;
        (*v41)(v37, v14, v29);
        v30(v43, v31, v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v21 = (void *)sub_1003091E4(0, v21[2] + 1, 1, (unint64_t)v21);
        }
        unint64_t v33 = v21[2];
        unint64_t v32 = v21[3];
        uint64_t v34 = v38;
        if (v33 >= v32 >> 1)
        {
          uint64_t v35 = sub_1003091E4(v32 > 1, v33 + 1, 1, (unint64_t)v21);
          uint64_t v34 = v38;
          id v21 = (void *)v35;
        }
        v21[2] = v33 + 1;
        uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v30)((char *)v21+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v33, v43, v45);
      }
      int64_t v20 = v40;
      ++a3;
      a2 = v44;
      if (v40 == a3)
      {
        swift_unknownObjectRelease();
        return v21;
      }
    }
    __break(1u);
  }
  return result;
}

void *sub_10054CC88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v83 = a7;
  uint64_t v90 = a5;
  uint64_t v85 = a2;
  uint64_t v94 = a1;
  uint64_t v84 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day();
  uint64_t v86 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v89 = (char *)&v73 - v13;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(char **)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v93 = (char *)&v73 - v19;
  __chkstk_darwin(v20);
  unint64_t v99 = (char *)&v73 - v21;
  __chkstk_darwin(v22);
  v103 = (char *)&v73 - v23;
  uint64_t v24 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v24 - 8);
  v80 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v97 = (uint64_t)&v73 - v27;
  __chkstk_darwin(v28);
  uint64_t v96 = (uint64_t)&v73 - v29;
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v73 - v31;
  __n128 v34 = __chkstk_darwin(v33);
  Swift::Int v36 = (char *)&v73 - v35;
  uint64_t v37 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v15 + 7);
  uint64_t v102 = v15 + 56;
  v108 = v37;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v37)((char *)&v73 - v35, 1, 1, v14, v34);
  int64_t v38 = a4 >> 1;
  unint64_t v105 = (a4 >> 1) - a3;
  uint64_t v77 = v11;
  if (a4 >> 1 != a3)
  {
    uint64_t v91 = a3;
    if ((uint64_t)(a4 >> 1) <= a3) {
      goto LABEL_45;
    }
    int64_t v81 = a4 >> 1;
    v100 = v36;
    uint64_t v75 = v17;
    uint64_t v87 = v7;
    uint64_t v106 = (void (**)(char *, char *, uint64_t))(v15 + 32);
    v107 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    v92 = (void (**)(uint64_t, char *, uint64_t))(v15 + 16);
    unint64_t v74 = a4;
    unint64_t v79 = a4 & 1;
    uint64_t v78 = v86 + 32;
    v76 = v15;
    v95 = (void (**)(char *, uint64_t))(v15 + 8);
    swift_unknownObjectRetain();
    uint64_t v40 = 0;
    uint64_t v104 = v85 + 8 * v91;
    v98 = _swiftEmptyArrayStorage;
    uint64_t v88 = v91;
    Swift::Int v36 = v99;
    uint64_t v15 = v102;
    while (1)
    {
      if (__OFADD__(v40, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        v98 = (void *)sub_10030966C(0, v98[2] + 1, 1, (unint64_t)v98);
LABEL_34:
        unint64_t v70 = v98[2];
        unint64_t v69 = v98[3];
        if (v70 >= v69 >> 1) {
          v98 = (void *)sub_10030966C(v69 > 1, v70 + 1, 1, (unint64_t)v98);
        }
        uint64_t v71 = v98;
        v98[2] = v70 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))((unint64_t)v71+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v70, v32, v84);
        swift_unknownObjectRelease();
        (*((void (**)(char *, uint64_t))v15 + 1))(v17, v14);
        goto LABEL_37;
      }
      uint64_t v17 = (char *)*(id *)(v104 + 8 * v40);
      id v41 = [v17 completionDate];
      if (!v41) {
        break;
      }
      unint64_t v42 = v41;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v43 = *v106;
      (*v106)(v32, v36, v14);
      v108(v32, 0, 1, v14);
      uint64_t v44 = *v107;
      if ((*v107)(v32, 1, v14) == 1) {
        goto LABEL_6;
      }
      uint64_t v101 = v43;
      v43(v103, v32, v14);
      uint64_t v45 = (uint64_t)v100;
      uint64_t v46 = v96;
      sub_1000BF710((uint64_t)v100, v96, (uint64_t *)&unk_100909A40);
      unsigned int v47 = v44((char *)v46, 1, v14);
      uint64_t v48 = v46;
      uint64_t v15 = v102;
      sub_1000966BC(v48, (uint64_t *)&unk_100909A40);
      if (v47 == 1)
      {
        sub_1000966BC(v45, (uint64_t *)&unk_100909A40);
        (*v92)(v45, v103, v14);
        v108((char *)v45, 0, 1, v14);
      }
      uint64_t v49 = v45;
      uint64_t v50 = v97;
      sub_1000BF710(v49, v97, (uint64_t *)&unk_100909A40);
      if (v44((char *)v50, 1, v14) == 1)
      {
        (*v95)(v103, v14);

        sub_1000966BC(v50, (uint64_t *)&unk_100909A40);
        Swift::Int v36 = v99;
      }
      else
      {
        uint64_t v51 = v93;
        v101(v93, (char *)v50, v14);
        uint64_t v15 = v103;
        char v52 = Calendar.isDate(_:inSameDayAs:)();
        Swift::Int v36 = v99;
        if (v52)
        {

          uint64_t v53 = *v95;
          (*v95)(v51, v14);
          v53(v15, v14);
          uint64_t v15 = v102;
        }
        else
        {
          int64_t v54 = v91 + v40;
          if (__OFADD__(v91, v40)) {
            goto LABEL_39;
          }
          uint64_t v55 = v88;
          if (v54 < v88) {
            goto LABEL_40;
          }
          if (v81 < v88) {
            goto LABEL_41;
          }
          if (v88 < v91) {
            goto LABEL_42;
          }
          if (v81 < v54) {
            goto LABEL_43;
          }
          if (v54 < 0) {
            goto LABEL_44;
          }
          uint64_t v82 = v91 + v40;
          uint64_t v56 = v79 | (2 * v54);
          uint64_t v57 = v94;
          swift_unknownObjectRetain();
          uint64_t v58 = v83;
          swift_bridgeObjectRetain();
          unint64_t v59 = v56;
          uint64_t v60 = v87;
          sub_10054C94C(v57, v85, v55, v59, v58);
          uint64_t v87 = v60;
          swift_bridgeObjectRelease();
          uint64_t v61 = v93;
          (*v92)((uint64_t)v36, v93, v14);
          REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v98 = (void *)sub_10030966C(0, v98[2] + 1, 1, (unint64_t)v98);
          }
          uint64_t v15 = v102;
          unint64_t v63 = v98[2];
          unint64_t v62 = v98[3];
          if (v63 >= v62 >> 1) {
            v98 = (void *)sub_10030966C(v62 > 1, v63 + 1, 1, (unint64_t)v98);
          }
          uint64_t v64 = v98;
          v98[2] = v63 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))((unint64_t)v64+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v63, v89, v84);
          swift_unknownObjectRelease();

          (*v95)(v61, v14);
          uint64_t v65 = (uint64_t)v100;
          sub_1000966BC((uint64_t)v100, (uint64_t *)&unk_100909A40);
          v101((char *)v65, v103, v14);
          v108((char *)v65, 0, 1, v14);
          uint64_t v88 = v82;
        }
      }
LABEL_7:
      if (v105 == ++v40)
      {
        swift_unknownObjectRelease();
        uint64_t v15 = v76;
        uint64_t v17 = v75;
        Swift::Int v36 = v100;
        a4 = v74;
        a3 = v91;
        int64_t v38 = v81;
        uint64_t v39 = v88;
        goto LABEL_29;
      }
    }
    v108(v32, 1, 1, v14);
LABEL_6:

    sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
    goto LABEL_7;
  }
  v98 = _swiftEmptyArrayStorage;
  uint64_t v39 = a3;
LABEL_29:
  unint64_t v32 = v80;
  if (v39 < v38)
  {
    uint64_t v66 = v39;
    sub_1000BF710((uint64_t)v36, (uint64_t)v80, (uint64_t *)&unk_100909A40);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v15 + 6))(v32, 1, v14) != 1)
    {
      (*((void (**)(char *, char *, uint64_t))v15 + 4))(v17, v32, v14);
      if (v66 < a3) {
        goto LABEL_46;
      }
      uint64_t v67 = v94;
      swift_unknownObjectRetain();
      uint64_t v68 = v83;
      swift_bridgeObjectRetain();
      sub_10054C94C(v67, v85, v66, a4, v68);
      swift_bridgeObjectRelease();
      (*((void (**)(char *, char *, uint64_t))v15 + 2))(v99, v17, v14);
      unint64_t v32 = v77;
      REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_47;
      }
      goto LABEL_34;
    }
    sub_1000966BC((uint64_t)v36, (uint64_t *)&unk_100909A40);
    Swift::Int v36 = v32;
  }
LABEL_37:
  sub_1000966BC((uint64_t)v36, (uint64_t *)&unk_100909A40);
  return v98;
}

uint64_t sub_10054D750(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t *a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v51 = a7;
  uint64_t v52 = a8;
  unint64_t v54 = a6;
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a5;
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v58 = *(void *)(v11 - 8);
  uint64_t v59 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v15 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v17 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v18 = a2[1];
  uint64_t v19 = a2[2];
  unint64_t v20 = a2[3];
  uint64_t v53 = a2;
  uint64_t v21 = swift_unknownObjectRetain();
  sub_10054C610(v21, v18, v19, v20, a1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  unint64_t v29 = v28;
  uint64_t result = swift_unknownObjectRelease();
  if (v23)
  {
    REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, Configuration);
    uint64_t v31 = v60;
    unint64_t v32 = sub_10054CC88(v23, v25, v27, v29, v56, (uint64_t)v13, v57);
    if (v31)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v59);
      return swift_unknownObjectRelease();
    }
    uint64_t v33 = (uint64_t)v32;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v59);
    __n128 v34 = (char *)(v29 >> 1);
    unint64_t v35 = v54;
    unint64_t v36 = v54 >> 62;
    if (v54 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      if (v47 < (uint64_t)v34) {
        goto LABEL_25;
      }
      uint64_t v17 = v47;
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v48 < (uint64_t)v34) {
        goto LABEL_26;
      }
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v49 >= v17) {
        goto LABEL_27;
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17 >= (unint64_t)v34)
      {
        swift_bridgeObjectRetain();
        unint64_t v37 = v35;
        if ((v35 & 0xC000000000000001) != 0)
        {
          while (v34 != (char *)v17)
          {
            if ((uint64_t)v34 < v17)
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090B040);
              Swift::Int v38 = v29 >> 1;
              do
              {
                uint64_t v39 = (char *)(v38 + 1);
                _ArrayBuffer._typeCheckSlowPath(_:)(v38);
                Swift::Int v38 = (Swift::Int)v39;
              }
              while ((char *)v17 != v39);
              break;
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            unint64_t v37 = v54;
            if ((v54 & 0xC000000000000001) == 0) {
              break;
            }
          }
        }
        if (v36)
        {
          swift_bridgeObjectRetain();
          uint64_t v40 = _CocoaArrayWrapper.subscript.getter();
          uint64_t v41 = v43;
          __n128 v34 = v44;
          uint64_t v42 = v45;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v40 = v37 & 0xFFFFFFFFFFFFFF8;
          uint64_t v41 = (v37 & 0xFFFFFFFFFFFFFF8) + 32;
          uint64_t v42 = (2 * v17) | 1;
        }
        uint64_t v46 = v53;
        swift_beginAccess();
        *uint64_t v46 = v40;
        v46[1] = v41;
        v46[2] = (uint64_t)v34;
        v46[3] = v42;
        swift_unknownObjectRelease();
        if (*(void *)(v33 + 16)) {
          sub_10054B3B0(v33, v51, v52, a9);
        }
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

NSString sub_10054DB54(void *a1, uint64_t a2)
{
  id v371 = a1;
  uint64_t v327 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle();
  uint64_t v321 = *(void *)(v327 - 8);
  __chkstk_darwin(v327);
  v326 = (char *)&v305 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v333 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate();
  uint64_t v320 = *(void *)(v333 - 8);
  __chkstk_darwin(v333);
  v328 = (char *)&v305 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v351 = type metadata accessor for Calendar.Component();
  uint64_t v354 = *(void *)(v351 - 8);
  __chkstk_darwin(v351);
  v350 = (char *)&v305 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v368 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket();
  uint64_t v359 = *(void *)(v368 - 8);
  __chkstk_darwin(v368);
  v332 = (char *)&v305 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v348 = (char *)&v305 - v8;
  __chkstk_darwin(v9);
  unint64_t v367 = (unint64_t)&v305 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  v323 = (char *)&v305 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v346 = (char *)&v305 - v14;
  __chkstk_darwin(v15);
  v360 = (void (**)(char *, char *, uint64_t))((char *)&v305 - v16);
  __chkstk_darwin(v17);
  v331 = (char *)&v305 - v18;
  __chkstk_darwin(v19);
  v338 = (char *)&v305 - v20;
  __chkstk_darwin(v21);
  v364 = (void (*)(char *, unint64_t, uint64_t))((char *)&v305 - v22);
  uint64_t v381 = type metadata accessor for Date();
  unint64_t v349 = *(void *)(v381 - 8);
  __chkstk_darwin(v381);
  v322 = (char *)&v305 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v345 = (char *)&v305 - v25;
  __chkstk_darwin(v26);
  v344 = (char *)&v305 - v27;
  __chkstk_darwin(v28);
  v355 = (char *)&v305 - v29;
  __chkstk_darwin(v30);
  v356 = (char *)&v305 - v31;
  __chkstk_darwin(v32);
  v330 = (char *)&v305 - v33;
  __chkstk_darwin(v34);
  v329 = (char *)&v305 - v35;
  __chkstk_darwin(v36);
  v336 = (char *)&v305 - v37;
  __chkstk_darwin(v38);
  v337 = (char *)&v305 - v39;
  __chkstk_darwin(v40);
  v375 = (char *)&v305 - v41;
  __chkstk_darwin(v42);
  v347 = (char *)&v305 - v43;
  __chkstk_darwin(v44);
  v378 = (char *)&v305 - v45;
  __chkstk_darwin(v46);
  v376 = (char *)&v305 - v47;
  uint64_t v334 = type metadata accessor for Calendar();
  uint64_t v335 = *(void *)(v334 - 8);
  __chkstk_darwin(v334);
  uint64_t v369 = (uint64_t)&v305 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v363 = (void *)_s10PredicatesOMa(0);
  __chkstk_darwin(v363);
  v362 = (uint64_t *)((char *)&v305 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v358 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  unint64_t v357 = *(void *)(v358 - 8);
  __chkstk_darwin(v358);
  v325 = (char *)&v305 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v343 = (char *)&v305 - v52;
  __chkstk_darwin(v53);
  v361 = (char *)&v305 - v54;
  __chkstk_darwin(v55);
  v373 = (char *)&v305 - v56;
  __chkstk_darwin(v57);
  v372 = (char *)&v305 - v58;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v60 = *(void *)(Subtasks - 8);
  v379 = (char **)Subtasks;
  uint64_t v380 = v60;
  __chkstk_darwin(Subtasks);
  unint64_t v341 = (unint64_t)&v305 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v352 = (char *)&v305 - v63;
  __chkstk_darwin(v64);
  v377 = (char *)&v305 - v65;
  __chkstk_darwin(v66);
  v374 = (char *)&v305 - v67;
  uint64_t v68 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v69 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v71 = (char *)&v305 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72);
  unint64_t v74 = (char *)&v305 - v73;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v76 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v324 = (char *)&v305 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  v342 = (char *)&v305 - v79;
  __chkstk_darwin(v80);
  v340 = (char *)&v305 - v81;
  __chkstk_darwin(v82);
  v339 = (char *)&v305 - v83;
  __chkstk_darwin(v84);
  uint64_t v86 = (char *)&v305 - v85;
  uint64_t v370 = a2;
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v88 = *(void (**)(char *, uint64_t))(v76 + 8);
  uint64_t v87 = v76 + 8;
  v365 = v88;
  v88(v86, Configuration);
  (*(void (**)(char *, void, uint64_t))(v69 + 104))(v71, enum case for REMRemindersListDataView.SortingStyle.default(_:), v68);
  LOBYTE(a2) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)();
  uint64_t v89 = *(void (**)(char *, uint64_t))(v69 + 8);
  v89(v71, v68);
  v89(v74, v68);
  if ((a2 & 1) == 0) {
    goto LABEL_3;
  }
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
  uint64_t v90 = v374;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v365(v86, Configuration);
  uint64_t v91 = v380;
  v92 = *(void (**)(char *))(v380 + 104);
  uint64_t v93 = v377;
  LODWORD(v318) = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  uint64_t v94 = v379;
  v92(v377);
  sub_100550F58(&qword_100911210, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks);
  char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v96 = *(void (**)(char *, char **))(v91 + 8);
  v96(v93, v94);
  v377 = (char *)v96;
  v96(v90, v94);
  if (v95) {
    goto LABEL_3;
  }
  uint64_t v100 = Configuration;
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
  uint64_t v101 = v372;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  uint64_t v311 = v87;
  v365(v86, Configuration);
  unint64_t v102 = v357;
  v103 = v373;
  uint64_t v104 = v358;
  (*(void (**)(char *, void, uint64_t))(v357 + 104))(v373, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v358);
  char v105 = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)();
  v108 = *(void (**)(char *, uint64_t))(v102 + 8);
  unint64_t v106 = v102 + 8;
  uint64_t v107 = (uint64_t)v108;
  v108(v103, v104);
  v108(v101, v104);
  if ((v105 & 1) == 0)
  {
LABEL_3:
    uint64_t v97 = self;
    NSString v98 = String._bridgeToObjectiveC()();
    [v97 internalErrorWithDebugDescription:v98];

    swift_willThrow();
    return v98;
  }
  uint64_t v307 = v100;
  v109 = (void (**)(void, void, void))v362;
  swift_storeEnumTagMultiPayload();
  v110 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v109);
  if (qword_100907790 != -1) {
    goto LABEL_183;
  }
  while (2)
  {
    uint64_t v111 = qword_100942318;
    swift_getKeyPath();
    unint64_t v383 = v111;
    swift_bridgeObjectRetain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v112 = v380;
    if (*(void *)((v383 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v383 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    unint64_t v113 = v383;
    swift_release();
    id v310 = (id)sub_1003BC8C4(v113, 0, 0, (uint64_t)v110);
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v114 = swift_allocObject();
    *(_OWORD *)(v114 + 16) = xmmword_10077B710;
    if (qword_100907410 != -1) {
      swift_once();
    }
    v308 = (void (*)(NSString, uint64_t))v107;
    id v309 = v110;
    v115 = (void *)qword_1009421D0;
    *(void *)(v114 + 32) = qword_1009421D0;
    uint64_t v116 = qword_1009073E8;
    id v117 = v115;
    if (v116 != -1) {
      swift_once();
    }
    v118 = (void *)qword_1009421A8;
    *(void *)(v114 + 40) = qword_1009421A8;
    unint64_t v383 = v114;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    id v119 = v118;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v121 = v310;
    [v310 setSortDescriptors:isa];

    uint64_t v122 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    NSString v98 = v371;
    uint64_t v123 = v366;
    uint64_t v124 = NSManagedObjectContext.fetch<A>(_:)();
    if (v123)
    {

      return v98;
    }
    unint64_t v353 = v124;
    uint64_t v319 = v122;
    uint64_t v366 = 0;
    v125 = v339;
    REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
    uint64_t v126 = (uint64_t)v352;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
    v127 = v125;
    uint64_t v128 = v307;
    v129 = v365;
    v365(v127, v307);
    v130 = v340;
    REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    v129(v130, v128);
    unint64_t v131 = v341;
    v132 = v379;
    (*(void (**)(unint64_t, uint64_t, char **))(v112 + 16))(v341, v126, v379);
    int v133 = (*(uint64_t (**)(unint64_t, char **))(v112 + 88))(v131, v132);
    if (v133 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v133 == v318)
    {
      unint64_t v341 = sub_1002EDB5C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v107 = (uint64_t)v364;
      NSString v98 = v361;
      v136 = (void (*)(char *, char **))v377;
    }
    else
    {
      if (v133 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
      {
LABEL_202:
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        goto LABEL_203;
      }
      NSString v98 = v361;
      uint64_t v134 = v366;
      sub_1005242F8(v353, v361, v371, 0);
      if (v134)
      {

        v308(v98, v358);
        ((void (*)(char *, char **))v377)(v352, v379);
        swift_bridgeObjectRelease();
        return v98;
      }
      unint64_t v341 = v135;
      uint64_t v366 = 0;
      uint64_t v107 = (uint64_t)v364;
      v136 = (void (*)(char *, char **))v377;
    }
    v308(v98, v358);
    v136(v352, v379);
    REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.calendar.getter();
    v137 = v378;
    REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.today.getter();
    Calendar.startOfDay(for:)();
    v372 = *(char **)(v349 + 8);
    v373 = (char *)(v349 + 8);
    ((void (*)(char *, uint64_t))v372)(v137, v381);
    uint64_t v138 = (uint64_t)v347;
    Calendar.beginningOfNextDay(_:)();
    v387 = _swiftEmptyArrayStorage;
    unint64_t v139 = v353;
    unint64_t v357 = v106;
    v363 = (void *)(v353 >> 62);
    if (v353 >> 62)
    {
LABEL_187:
      swift_bridgeObjectRetain_n();
      uint64_t v301 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v301 & 0x8000000000000000) == 0)
      {
        uint64_t v126 = v301;
        swift_bridgeObjectRetain();
        uint64_t v302 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v302 < 0)
        {
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
          goto LABEL_202;
        }
        swift_bridgeObjectRetain();
        uint64_t v303 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v303 >= v126) {
          goto LABEL_204;
        }
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
      }
      __break(1u);
      goto LABEL_199;
    }
    uint64_t v126 = *(void *)((v353 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_25:
    v340 = (char *)(v139 & 0xC000000000000001);
    if ((v139 & 0xC000000000000001) != 0 && v126)
    {
      Swift::Int v140 = 0;
      do
      {
        Swift::Int v141 = v140 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v140);
        Swift::Int v140 = v141;
      }
      while (v126 != v141);
    }
    uint64_t v380 = v126;
    if (v363)
    {
      swift_bridgeObjectRetain();
      uint64_t v143 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v144 = v145;
      uint64_t v142 = v146;
      uint64_t v126 = v147;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v142 = 0;
      uint64_t v143 = v139 & 0xFFFFFFFFFFFFFF8;
      uint64_t v144 = (v139 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v126 = (2 * v126) | 1;
    }
    unint64_t v383 = v143;
    uint64_t v384 = v144;
    v385 = (void (**)(void, void, void))v142;
    unint64_t v386 = v126;
    uint64_t v148 = swift_unknownObjectRetain();
    sub_10054C610(v148, v144, v142, v126, v138);
    uint64_t v150 = v149;
    Swift::Int v152 = (Swift::Int)v151;
    swift_unknownObjectRelease();
    if (v150)
    {
      Swift::Int v152 = (unint64_t)v152 >> 1;
      if (v380 < v152) {
        goto LABEL_192;
      }
      if (v363)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v126 = *(void *)((v353 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      if (v126 < v152) {
        goto LABEL_193;
      }
      uint64_t v126 = v380;
      if (!v340 || v152 == v380)
      {
        unint64_t v154 = v353;
      }
      else
      {
        if (v152 >= v380) {
          goto LABEL_194;
        }
        Swift::Int v153 = v152;
        unint64_t v154 = v353;
        do
        {
          Swift::Int v155 = v153 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v153);
          Swift::Int v153 = v155;
        }
        while (v126 != v155);
      }
      uint64_t v126 = v154 & 0xFFFFFFFFFFFFFF8;
      if (v363)
      {
        swift_bridgeObjectRetain();
        uint64_t v126 = _CocoaArrayWrapper.subscript.getter();
        uint64_t v156 = v158;
        Swift::Int v152 = (Swift::Int)v159;
        uint64_t v157 = v160;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v156 = v126 + 32;
        uint64_t v157 = (2 * v380) | 1;
      }
      swift_unknownObjectRelease();
      unint64_t v383 = v126;
      uint64_t v384 = v156;
      v385 = (void (**)(void, void, void))v152;
      unint64_t v386 = v157;
    }
    int v161 = 0;
    v379 = (char **)(v349 + 32);
    v162 = (char *)(v349 + 56);
    v377 = (char *)(v349 + 48);
    unint64_t v163 = v353;
    if ((v353 & 0x8000000000000000) == 0) {
      unint64_t v163 = v353 & 0xFFFFFFFFFFFFFF8;
    }
    unint64_t v318 = v163;
    v339 = (char *)(v353 & 0xFFFFFFFFFFFFFF8);
    unint64_t v313 = (v353 & 0xFFFFFFFFFFFFFF8) + 32;
    uint64_t v312 = (2 * v380) | 1;
    v317 = (void (**)(char *, unint64_t, uint64_t))(v349 + 16);
    LODWORD(v314) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
    v316 = (void (**)(uint64_t, void, uint64_t))(v359 + 104);
    uint64_t v315 = v359 + 32;
    v352 = (char *)(v349 + 40);
    v374 = (char *)(v349 + 56);
LABEL_55:
    LODWORD(v361) = v161;
    uint64_t v166 = v384;
    int64_t v167 = (int64_t)v385;
    unint64_t v106 = v386;
    uint64_t v168 = v386 >> 1;
    id v371 = (id)v383;
    swift_unknownObjectRetain();
    v362 = (void *)v167;
    if (v167 == v168)
    {
      int64_t v167 = v106 >> 1;
      uint64_t v126 = v380;
      goto LABEL_69;
    }
    unint64_t v349 = v106;
    unint64_t v106 = v106 & 1 | (2 * v167);
    while (1)
    {
      if (v167 >= v168)
      {
        __break(1u);
LABEL_98:
        ((void (*)(uint64_t, uint64_t))v167)(v166, v126);
        NSString v98 = v329;
        ((void (*)(char *, uint64_t, uint64_t))v375)(v329, v168, v126);
        goto LABEL_99;
      }
      id v169 = *(id *)(v166 + 8 * v167);
      id v170 = [v169 completionDate];
      if (v170) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v162)(v107, 1, 1, v381);
LABEL_59:
      sub_1000966BC(v107, (uint64_t *)&unk_100909A40);

LABEL_60:
      ++v167;
      v106 += 2;
      uint64_t v126 = v380;
      if (v168 == v167)
      {
        int64_t v167 = v168;
        unint64_t v106 = v349;
        goto LABEL_69;
      }
    }
    v171 = v170;
    v172 = v378;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v173 = *v379;
    v174 = v172;
    Swift::Int v152 = v381;
    ((void (*)(uint64_t, char *, uint64_t))*v379)(v107, v174, v381);
    (*(void (**)(uint64_t, void, uint64_t, Swift::Int))v162)(v107, 0, 1, v152);
    if ((*(unsigned int (**)(uint64_t, uint64_t, Swift::Int))v377)(v107, 1, v152) == 1) {
      goto LABEL_59;
    }
    v175 = v375;
    Swift::Int v152 = v381;
    ((void (*)(char *, uint64_t, uint64_t))v173)(v375, v107, v381);
    sub_100550F58((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v176 = dispatch thunk of static Comparable.< infix(_:_:)();
    v177 = v175;
    v162 = v374;
    ((void (*)(char *, Swift::Int))v372)(v177, v152);

    if (v176) {
      goto LABEL_60;
    }
    if ((uint64_t)v362 >= v167)
    {
      swift_unknownObjectRelease();
      uint64_t v126 = v381;
      unint64_t v106 = (unint64_t)v376;
      goto LABEL_53;
    }
    uint64_t v126 = v380;
    if (v167 < 0) {
      goto LABEL_186;
    }
LABEL_69:
    v110 = (void *)v341;
    swift_bridgeObjectRetain();
    uint64_t v178 = v366;
    v179 = sub_10054C94C((uint64_t)v371, v166, (uint64_t)v362, v106, (uint64_t)v110);
    swift_bridgeObjectRelease();
    if (v126 >= v167)
    {
      uint64_t v366 = v178;
      if (v363)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v180 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v180 = *((void *)v339 + 2);
        swift_bridgeObjectRetain();
      }
      unint64_t v106 = (unint64_t)v376;
      uint64_t v107 = (uint64_t)v364;
      if (v180 < v167) {
        goto LABEL_179;
      }
      if (v340 && v167 != v126)
      {
        if (v167 >= v126)
        {
          __break(1u);
LABEL_183:
          swift_once();
          continue;
        }
        Swift::Int v181 = v167;
        do
        {
          Swift::Int v182 = v181 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v181);
          Swift::Int v181 = v182;
        }
        while (v126 != v182);
      }
      if (v363)
      {
        swift_bridgeObjectRetain();
        uint64_t v183 = _CocoaArrayWrapper.subscript.getter();
        unint64_t v184 = v186;
        int64_t v167 = v187;
        uint64_t v185 = v188;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v183 = (uint64_t)v339;
        unint64_t v184 = v313;
        uint64_t v185 = v312;
      }
      swift_unknownObjectRelease();
      unint64_t v383 = v183;
      uint64_t v384 = v184;
      v385 = (void (**)(void, void, void))v167;
      unint64_t v386 = v185;
      if (v179[2])
      {
        uint64_t v126 = v381;
        (*v317)(v378, v106, v381);
        uint64_t v189 = v367;
        REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)();
        (*v316)(v189, v314, v368);
        unint64_t v190 = (unint64_t)v387;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v164 = (char)v361;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v190 = sub_1003096A0(0, *(void *)(v190 + 16) + 1, 1, v190);
        }
        unint64_t v193 = *(void *)(v190 + 16);
        unint64_t v192 = *(void *)(v190 + 24);
        if (v193 >= v192 >> 1) {
          unint64_t v190 = sub_1003096A0(v192 > 1, v193 + 1, 1, v190);
        }
        *(void *)(v190 + 16) = v193 + 1;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v359 + 32))(v190+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * v193, v367, v368);
        swift_unknownObjectRelease();
        v387 = (void *)v190;
LABEL_54:
        v165 = v378;
        Calendar.beginningOfPreviousDay(_:)();
        Swift::Int v152 = *(void *)v352;
        (*(void (**)(unint64_t, char *, uint64_t))v352)(v106, v165, v126);
        int v161 = 1;
        if (v164)
        {
          int v194 = enum case for Calendar.Component.day(_:);
          uint64_t v195 = v354;
          v196 = *(void (**)(char *, void, uint64_t))(v354 + 104);
          v197 = v350;
          uint64_t v198 = v351;
          unint64_t v349 = v354 + 104;
          v314 = v196;
          v196(v350, enum case for Calendar.Component.day(_:), v351);
          v199 = v338;
          Calendar.date(byAdding:value:to:wrappingComponents:)();
          v200 = *(void (**)(char *, uint64_t))(v195 + 8);
          uint64_t v354 = v195 + 8;
          v306 = v200;
          v200(v197, v198);
          uint64_t v201 = (uint64_t)v199;
          v202 = v336;
          v364 = *v317;
          v364(v336, v106, v126);
          id v371 = *(id *)v377;
          int v203 = ((uint64_t (*)(char *, uint64_t, uint64_t))v371)(v199, 1, v126);
          LODWORD(v367) = v194;
          if (v203 == 1)
          {
            uint64_t v204 = (uint64_t)v337;
            v375 = *v379;
            ((void (*)(char *, char *, uint64_t))v375)(v337, v202, v126);
            sub_1000966BC(v201, (uint64_t *)&unk_100909A40);
            v205 = (void (*)(uint64_t, uint64_t))v372;
          }
          else
          {
            v206 = v202;
            v205 = (void (*)(uint64_t, uint64_t))v372;
            ((void (*)(char *, uint64_t))v372)(v206, v126);
            uint64_t v204 = (uint64_t)v337;
            v375 = *v379;
            ((void (*)(char *, uint64_t, uint64_t))v375)(v337, v201, v126);
          }
          NSString v98 = (NSString)v341;
          uint64_t v207 = v369;
          uint64_t v208 = v366;
          sub_10054D750(v204, (uint64_t *)&v383, v369, v370, v341, v353, (unint64_t *)&v387, v106, (unsigned int *)&enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:));
          uint64_t v366 = v208;
          if (v208)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v205(v204, v126);
            v205((uint64_t)v347, v126);
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v207, v334);
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            v205(v106, v126);
            return v98;
          }
          int64_t v167 = (int64_t)v205;
          v209 = v378;
          Calendar.beginningOfPreviousDay(_:)();
          ((void (*)(uint64_t, uint64_t))v167)(v204, v126);
          ((void (*)(unint64_t, char *, uint64_t))v152)(v106, v209, v126);
          v210 = v350;
          uint64_t v211 = v351;
          v314(v350, v367, v351);
          uint64_t v168 = (uint64_t)v331;
          Calendar.date(byAdding:value:to:wrappingComponents:)();
          v306(v210, v211);
          uint64_t v166 = (uint64_t)v330;
          v364(v330, v106, v126);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v371)(v168, 1, v126) != 1) {
            goto LABEL_98;
          }
          NSString v98 = v329;
          ((void (*)(char *, uint64_t, uint64_t))v375)(v329, v166, v126);
          sub_1000966BC(v168, (uint64_t *)&unk_100909A40);
LABEL_99:
          uint64_t v212 = v366;
          uint64_t v213 = v369;
          sub_10054D750((uint64_t)v98, (uint64_t *)&v383, v369, v370, v341, v353, (unint64_t *)&v387, v106, (unsigned int *)&enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:));
          uint64_t v214 = v212;
          if (v212)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            ((void (*)(NSString, uint64_t))v167)(v98, v126);
            ((void (*)(char *, uint64_t))v167)(v347, v126);
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v213, v334);
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            ((void (*)(unint64_t, uint64_t))v167)(v106, v126);
            return v98;
          }
          v215 = v378;
          Calendar.beginningOfPreviousDay(_:)();
          ((void (*)(NSString, uint64_t))v167)(v98, v126);
          ((void (*)(unint64_t, char *, uint64_t))v152)(v106, v215, v126);
          uint64_t v216 = 1;
          swift_beginAccess();
          LODWORD(v336) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
          LODWORD(v338) = enum case for Calendar.Component.month(_:);
          while (2)
          {
            v361 = (char *)v216;
            uint64_t v366 = v214;
            Calendar.startOfMonth(for:)();
            unint64_t v106 = v384;
            uint64_t v219 = (uint64_t)v385;
            int64_t v167 = v386;
            v220 = (void (**)(void, void, void))(v386 >> 1);
            unint64_t v367 = v383;
            swift_unknownObjectRetain();
            uint64_t v221 = v106;
            v362 = (void *)v219;
            if ((void (**)(void, void, void))v219 == v220)
            {
              uint64_t v222 = v369;
              uint64_t v126 = v380;
              goto LABEL_118;
            }
            v337 = (char *)v167;
            int64_t v167 = v167 & 1 | (2 * v219);
LABEL_110:
            if (v219 >= (uint64_t)v220) {
              goto LABEL_180;
            }
            id v224 = *(id *)(v106 + 8 * v219);
            id v225 = [v224 completionDate];
            if (v225)
            {
              v226 = v225;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v223 = (uint64_t)v360;
              uint64_t v227 = v381;
              ((void (*)(void))v375)();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))v374)(v223, 0, 1, v227);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v371)(v223, 1, v227) == 1) {
                goto LABEL_108;
              }
              v228 = v355;
              uint64_t v229 = v381;
              ((void (*)(char *, uint64_t, uint64_t))v375)(v355, v223, v381);
              sub_100550F58((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
              char v230 = dispatch thunk of static Comparable.< infix(_:_:)();
              v231 = v228;
              unint64_t v106 = v221;
              ((void (*)(char *, uint64_t))v372)(v231, v229);

              if ((v230 & 1) == 0)
              {
                uint64_t v222 = v369;
                if ((uint64_t)v362 >= v219) {
                  goto LABEL_139;
                }
                uint64_t v126 = v380;
                if (v219 < 0) {
                  goto LABEL_197;
                }
LABEL_118:
                v232 = v342;
                REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
                uint64_t v233 = (uint64_t)v343;
                REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
                v365(v232, v307);
                uint64_t v234 = v366;
                v235 = sub_10054CC88(v367, v221, (uint64_t)v362, v167, v222, v233, v341);
                if (v234)
                {
                  v308((NSString)v233, v358);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_unknownObjectRelease();
                  uint64_t v260 = v381;
                  v261 = (void (*)(char *, uint64_t))v372;
                  NSString v98 = v373;
                  ((void (*)(char *, uint64_t))v372)(v356, v381);
                  v261(v347, v260);
                  (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v222, v334);
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
                  v261(v376, v260);
                  return v98;
                }
                v236 = v235;
                uint64_t v366 = 0;
                v308((NSString)v233, v358);
                int64_t v237 = (unint64_t)v167 >> 1;
                if (v126 < (uint64_t)((unint64_t)v167 >> 1))
                {
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
                  goto LABEL_187;
                }
                if (v363)
                {
                  swift_bridgeObjectRetain_n();
                  uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v126 = *((void *)v339 + 2);
                  swift_bridgeObjectRetain();
                }
                if (v126 < v237) {
                  goto LABEL_185;
                }
                if (!v340 || v237 == v380) {
                  goto LABEL_129;
                }
                if (v237 >= v380) {
                  goto LABEL_191;
                }
                Swift::Int v238 = (unint64_t)v167 >> 1;
                uint64_t v239 = v380;
                do
                {
                  Swift::Int v240 = v238 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v238);
                  Swift::Int v238 = v240;
                }
                while (v239 != v240);
LABEL_129:
                if (v363)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v241 = _CocoaArrayWrapper.subscript.getter();
                  unint64_t v242 = v244;
                  int64_t v237 = v245;
                  uint64_t v243 = v246;
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  uint64_t v241 = (uint64_t)v339;
                  unint64_t v242 = v313;
                  uint64_t v243 = v312;
                }
                unint64_t v383 = v241;
                uint64_t v384 = v242;
                v385 = (void (**)(void, void, void))v237;
                unint64_t v386 = v243;
                swift_unknownObjectRelease();
                if (!v236[2])
                {
                  swift_bridgeObjectRelease();
LABEL_139:
                  swift_unknownObjectRelease();
                  int64_t v167 = v381;
                  unint64_t v106 = (unint64_t)v376;
                  goto LABEL_140;
                }
                uint64_t v247 = *(int *)(sub_100094134(&qword_10091CCC8) + 48);
                v248 = v348;
                unint64_t v106 = (unint64_t)v376;
                int64_t v167 = v381;
                v364(v348, (unint64_t)v376, v381);
                *(void *)&v248[v247] = v236;
                (*v316)((uint64_t)v248, v336, v368);
                unint64_t v249 = (unint64_t)v387;
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v249 = sub_1003096A0(0, *(void *)(v249 + 16) + 1, 1, v249);
                }
                unint64_t v251 = *(void *)(v249 + 16);
                unint64_t v250 = *(void *)(v249 + 24);
                if (v251 >= v250 >> 1) {
                  unint64_t v249 = sub_1003096A0(v250 > 1, v251 + 1, 1, v249);
                }
                *(void *)(v249 + 16) = v251 + 1;
                (*(void (**)(unint64_t, char *, uint64_t))(v359 + 32))(v249+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * v251, v348, v368);
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                v387 = (void *)v249;
LABEL_140:
                v252 = v350;
                uint64_t v253 = v351;
                v314(v350, v338, v351);
                v254 = v346;
                v255 = v356;
                Calendar.date(byAdding:value:to:wrappingComponents:)();
                uint64_t v256 = (uint64_t)v254;
                v306(v252, v253);
                v257 = v345;
                v364(v345, (unint64_t)v255, v167);
                int v258 = ((uint64_t (*)(char *, uint64_t, int64_t))v371)(v254, 1, v167);
                uint64_t v214 = v366;
                if (v258 == 1)
                {
                  v217 = v344;
                  ((void (*)(char *, char *, int64_t))v375)(v344, v257, v167);
                  sub_1000966BC(v256, (uint64_t *)&unk_100909A40);
                  v218 = (void (*)(char *, int64_t))v372;
                }
                else
                {
                  v218 = (void (*)(char *, int64_t))v372;
                  ((void (*)(char *, int64_t))v372)(v257, v167);
                  v217 = v344;
                  ((void (*)(char *, uint64_t, int64_t))v375)(v344, v256, v167);
                }
                v218(v356, v167);
                ((void (*)(unint64_t, char *, int64_t))v152)(v106, v217, v167);
                uint64_t v216 = (uint64_t)(v361 + 1);
                if (v361 != (char *)12) {
                  continue;
                }
                swift_bridgeObjectRelease();
                if (v385 == (void (**)(void, void, void))(v386 >> 1))
                {
                  v259 = (void (*)(unint64_t, int64_t))v372;
                  ((void (*)(char *, int64_t))v372)(v347, v167);
                  swift_bridgeObjectRelease();

                  goto LABEL_182;
                }
                v262 = v350;
                uint64_t v263 = v351;
                v264 = v314;
                v314(v350, enum case for Calendar.Component.era(_:), v351);
                uint64_t v265 = v369;
                v374 = (char *)Calendar.component(_:from:)();
                v266 = v306;
                v306(v262, v263);
                v264(v262, enum case for Calendar.Component.year(_:), v263);
                uint64_t v126 = Calendar.component(_:from:)();
                v266(v262, v263);
                uint64_t v267 = v384;
                uint64_t v269 = (uint64_t)v385;
                unint64_t v268 = v386;
                __chkstk_darwin(v383);
                *(&v305 - 4) = (uint64_t)v374;
                *(&v305 - 3) = v126;
                unint64_t v367 = v126;
                uint64_t v304 = v265;
                uint64_t v270 = swift_unknownObjectRetain();
                sub_1005B9934(v270, v267, v269, v268, (void (*)(Swift::UInt *__return_ptr, id *))sub_100550F38);
                uint64_t v271 = swift_bridgeObjectRetain();
                v272 = (char *)sub_10020A15C(v271);
                swift_bridgeObjectRelease();
                v382 = v272;
                sub_100549740((void **)&v382);
                if (!v214)
                {
                  swift_bridgeObjectRelease();
                  v273 = v382;
                  uint64_t v366 = *((void *)v382 + 2);
                  if (!v366) {
                    goto LABEL_181;
                  }
                  unint64_t v274 = 0;
                  v363 = v382 + 32;
                  LODWORD(v354) = enum case for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle.allOf(_:);
                  v362 = (void *)(v321 + 104);
                  LODWORD(v355) = enum case for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle.restOfUnlessFirstDay(_:);
                  v360 = (void (**)(char *, char *, uint64_t))(v320 + 16);
                  v361 = (char *)(v320 + 8);
                  LODWORD(v356) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
                  while (2)
                  {
                    if (v274 >= *((void *)v273 + 2)) {
                      goto LABEL_195;
                    }
                    uint64_t v380 = v274;
                    v275 = (char **)&v363[3 * v274];
                    v276 = v275[2];
                    if (*v275 == v374 && v275[1] == (char *)v367)
                    {
                      v364(v378, v106, v381);
                      ((void (*)(char *, void, uint64_t))*v362)(v326, v355, v327);
                      swift_bridgeObjectRetain();
                      REMRemindersListDataView.DateBucketsModel.RepresentativeDate.init(date:formattingStyle:)();
LABEL_158:
                      if ((unint64_t)v276 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v280 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if (v280 < 0) {
                          goto LABEL_200;
                        }
                        swift_bridgeObjectRetain();
                        uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if (v126 < 0) {
                          goto LABEL_201;
                        }
                        swift_bridgeObjectRetain();
                        uint64_t v300 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if (v300 < v280) {
                          goto LABEL_196;
                        }
                      }
                      else
                      {
                        uint64_t v280 = *(void *)(((unint64_t)v276 & 0xFFFFFFFFFFFFFF8) + 0x10);
                      }
                      if (((unint64_t)v276 & 0xC000000000000001) != 0 && v280 != 0)
                      {
                        Swift::Int v282 = 0;
                        do
                        {
                          Swift::Int v283 = v282 + 1;
                          _ArrayBuffer._typeCheckSlowPath(_:)(v282);
                          Swift::Int v282 = v283;
                        }
                        while (v280 != v283);
                      }
                      if ((unint64_t)v276 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v285 = _CocoaArrayWrapper.subscript.getter();
                        uint64_t v126 = v287;
                        uint64_t v284 = v288;
                        unint64_t v286 = v289;
                        swift_bridgeObjectRelease_n();
                      }
                      else
                      {
                        uint64_t v284 = 0;
                        uint64_t v285 = (unint64_t)v276 & 0xFFFFFFFFFFFFFF8;
                        uint64_t v126 = ((unint64_t)v276 & 0xFFFFFFFFFFFFFF8) + 32;
                        unint64_t v286 = (2 * v280) | 1;
                      }
                      v290 = v324;
                      REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter();
                      uint64_t v291 = (uint64_t)v325;
                      REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
                      v365(v290, v307);
                      v292 = sub_10054CC88(v285, v126, v284, v286, v369, v291, v341);
                      int64_t v167 = v381;
                      v293 = v292;
                      v308((NSString)v291, v358);
                      swift_unknownObjectRelease();
                      uint64_t v294 = *(int *)(sub_100094134(&qword_10091CCC0) + 48);
                      v295 = v332;
                      v296 = v328;
                      (*v360)(v332, v328, v333);
                      *(void *)&v295[v294] = v293;
                      (*v316)((uint64_t)v295, v356, v368);
                      unint64_t v297 = (unint64_t)v387;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        unint64_t v297 = sub_1003096A0(0, *(void *)(v297 + 16) + 1, 1, v297);
                      }
                      unint64_t v106 = (unint64_t)v376;
                      unint64_t v299 = *(void *)(v297 + 16);
                      unint64_t v298 = *(void *)(v297 + 24);
                      if (v299 >= v298 >> 1) {
                        unint64_t v297 = sub_1003096A0(v298 > 1, v299 + 1, 1, v297);
                      }
                      *(void *)(v297 + 16) = v299 + 1;
                      (*(void (**)(unint64_t, char *, uint64_t))(v359 + 32))(v297+ ((*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80))+ *(void *)(v359 + 72) * v299, v332, v368);
                      v387 = (void *)v297;
                      (*(void (**)(char *, uint64_t))v361)(v296, v333);
                    }
                    else
                    {
                      v382 = v275[2];
                      swift_bridgeObjectRetain();
                      sub_100094134(&qword_10090D750);
                      sub_100431B78();
                      uint64_t v126 = (uint64_t)v323;
                      int64_t v278 = v381;
                      Sequence.firstMap<A>(_:)();
                      if (((unsigned int (*)(uint64_t, uint64_t, int64_t))v371)(v126, 1, v278) != 1)
                      {
                        v279 = v322;
                        ((void (*)(char *, uint64_t, int64_t))v375)(v322, v126, v278);
                        uint64_t v126 = (uint64_t)v378;
                        v364(v378, (unint64_t)v279, v278);
                        ((void (*)(char *, void, uint64_t))*v362)(v326, v354, v327);
                        REMRemindersListDataView.DateBucketsModel.RepresentativeDate.init(date:formattingStyle:)();
                        ((void (*)(char *, int64_t))v372)(v279, v278);
                        goto LABEL_158;
                      }
                      swift_bridgeObjectRelease();
                      sub_1000966BC(v126, (uint64_t *)&unk_100909A40);
                      int64_t v167 = v278;
                    }
                    unint64_t v274 = v380 + 1;
                    if (v380 + 1 == v366) {
                      goto LABEL_181;
                    }
                    continue;
                  }
                }
LABEL_203:
                swift_release();
                __break(1u);
LABEL_204:
                uint64_t v138 = (uint64_t)v347;
                unint64_t v139 = v353;
                uint64_t v107 = (uint64_t)v364;
                goto LABEL_25;
              }
            }
            else
            {
              uint64_t v223 = (uint64_t)v360;
              (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))v374)(v360, 1, 1, v381);
LABEL_108:
              sub_1000966BC(v223, (uint64_t *)&unk_100909A40);
            }
            break;
          }
          ++v219;
          v167 += 2;
          uint64_t v126 = v380;
          if (v220 == (void (**)(void, void, void))v219)
          {
            int64_t v167 = (int64_t)v337;
            uint64_t v222 = v369;
            goto LABEL_118;
          }
          goto LABEL_110;
        }
        goto LABEL_55;
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v126 = v381;
LABEL_53:
      char v164 = (char)v361;
      goto LABEL_54;
    }
    break;
  }
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:

  swift_release();
  swift_bridgeObjectRelease();
  v259 = (void (*)(unint64_t, int64_t))v372;
  ((void (*)(char *, int64_t))v372)(v347, v167);
LABEL_182:
  (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v369, v334);
  swift_unknownObjectRelease();
  NSString v98 = v387;
  v259(v106, v167);
  return v98;
}

uint64_t sub_100550F38@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10054B588(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100550F58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EraAndYear()
{
  return &type metadata for EraAndYear;
}

unint64_t sub_100550FB4()
{
  unint64_t result = qword_10091CCD0;
  if (!qword_10091CCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091CCD0);
  }
  return result;
}

uint64_t destroy for RDDARequest(uint64_t a1)
{
  return sub_1001B534C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for RDDARequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_1001B5280(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for RDDARequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_1001B5280(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_1001B534C(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for RDDARequest(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  sub_1001B534C(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDARequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDARequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDARequest()
{
  return &type metadata for RDDARequest;
}

uint64_t sub_100551230()
{
  sub_1000961A8(v0, (uint64_t)v14);
  if (v15)
  {
    uint64_t v1 = v14[0];
    Swift::UInt v2 = (void *)v14[1];
    uint64_t v3 = v14[2];
    int v4 = (void *)v14[3];
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    if (v15 == 1)
    {
      _StringGuts.grow(_:)(57);
      unint64_t v5 = 0x80000001007D8010;
      unint64_t v6 = 0xD000000000000027;
    }
    else
    {
      _StringGuts.grow(_:)(58);
      unint64_t v6 = 0xD000000000000028;
      unint64_t v5 = 0x80000001007D7FE0;
    }
    String.append(_:)(*(Swift::String *)&v6);
    v8._countAndFlagsBits = v1;
    v8._object = v2;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0x6E756F636361202CLL;
    v9._object = (void *)0xED0000203A444974;
    String.append(_:)(v9);
    v10._countAndFlagsBits = v3;
    v10._object = v4;
    String.append(_:)(v10);
  }
  else
  {
    strcpy((char *)v13, "{accountIDs ");
    BYTE5(v13[1]) = 0;
    HIWORD(v13[1]) = -5120;
    v7._countAndFlagsBits = Array.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  v11._countAndFlagsBits = 125;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v13[0];
}

uint64_t sub_1005513B0(void *a1, uint64_t a2)
{
  return sub_1005514B4(a1, a2, &qword_10090FF18, (Class)sub_10069758C);
}

uint64_t sub_1005513E4(void *a1, uint64_t a2)
{
  return sub_1005514B4(a1, a2, &qword_10090FFD8, (Class)sub_100697018);
}

uint64_t sub_100551418(void *a1, uint64_t a2)
{
  return sub_1005514B4(a1, a2, &qword_10090FFE0, (Class)sub_1006975D0);
}

uint64_t sub_10055144C(void *a1, uint64_t a2)
{
  return sub_1005514B4(a1, a2, &qword_10090FF10, (Class)sub_100697614);
}

uint64_t sub_100551480(void *a1, uint64_t a2)
{
  return sub_1005514B4(a1, a2, &qword_10090D2E0, (Class)sub_10069705C);
}

uint64_t sub_1005514B4(void *a1, uint64_t a2, uint64_t *a3, Class isa)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(a3);
  uint64_t v12 = swift_allocObject();
  long long v33 = xmmword_100776E40;
  *(_OWORD *)(v12 + 16) = xmmword_100776E40;
  *(void *)(v12 + 32) = a1;
  uint64_t v34 = v12;
  specialized Array._endMutation()();
  uint64_t v13 = v34;
  id v14 = a1;
  unint64_t v15 = ((uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t))isa)(v13, 0, 1, 0, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4) {
    return (uint64_t)isa;
  }
  uint64_t v17 = v11;
  uint64_t v18 = v36;
  if (!(v15 >> 62))
  {
    unint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v20 = v36;
    if (v19 < 2)
    {
      if (v19) {
        goto LABEL_5;
      }
LABEL_11:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v33;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v25;
    uint64_t v34 = 0;
    unint64_t v35 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v26._object = (void *)0x80000001007D84E0;
    v26._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v26);
    id v27 = [v14 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10056CA90((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v9);
    uint64_t v29 = v34;
    unint64_t v30 = v35;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v29;
    *(void *)(inited + 56) = v30;
    sub_1001805C0(inited);
    id v31 = objc_allocWithZone((Class)NSError);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 initWithDomain:v32 code:-1 userInfo:isa];

    swift_willThrow();
    return (uint64_t)isa;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v20 = v18;
  if (v22 > 1) {
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v21 = (objc_class *)*(id *)(v15 + 32);
LABEL_8:
    Class isa = v21;
    swift_bridgeObjectRelease();
    return (uint64_t)isa;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005518A0(uint64_t a1)
{
  return sub_1005518F0(a1, (unint64_t *)&unk_10090AF40);
}

uint64_t sub_1005518C8(uint64_t a1)
{
  return sub_1005518F0(a1, &qword_10091CEB0);
}

uint64_t sub_1005518F0(uint64_t a1, unint64_t *a2)
{
  sub_1000963CC(0, a2);
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:a1];
  v8[3] = sub_100094134(&qword_10091B530);
  v8[0] = v4;
  id v6 = v4;
  throwingCast<A>(_:as:failureMessage:)();

  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v8);
  if (!v2) {
    return v8[4];
  }
  return result;
}

uint64_t sub_100551A0C(uint64_t a1)
{
  return sub_1005518F0(a1, (unint64_t *)&qword_10090B040);
}

uint64_t sub_100551A34(uint64_t a1)
{
  return sub_100551A60(a1, (void (*)(void))type metadata accessor for REMCDGroceryOperationQueueItem);
}

uint64_t sub_100551A60(uint64_t a1, void (*a2)(void))
{
  a2(0);
  id v4 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v5 = [(id)swift_getObjCClassFromMetadata() entity];
  [v4 setEntity:v5];

  [v4 setAffectedStores:0];
  [v4 setPredicate:a1];
  v8[3] = sub_100094134(&qword_10091B530);
  v8[0] = v4;
  id v6 = v4;
  throwingCast<A>(_:as:failureMessage:)();

  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v8);
  if (!v2) {
    return v8[4];
  }
  return result;
}

uint64_t sub_100551B80(uint64_t a1)
{
  return sub_100551A60(a1, (void (*)(void))type metadata accessor for REMCDTemplateOperationQueueItem);
}

void sub_100551BB0(uint64_t a1)
{
  sub_1000961A8(a1, (uint64_t)v12);
  if (qword_1009075B8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100918C80);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = v1[2];
    unint64_t v7 = v1[3];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v8 = sub_100444494();
    sub_1000C51B8(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Putting event {identifier: %s, reader: %s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = *(void (**)(unsigned char *))(v1[5] + 48);
  if (v10)
  {
    swift_retain();
    v10(v12);
    sub_100096314((uint64_t)v10);
  }
}

void sub_100551DD4(uint64_t a1)
{
  uint64_t v12 = a1;
  if (qword_1009075B8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100918C80);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = v1[2];
    unint64_t v7 = v1[3];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v8 = sub_100444494();
    sub_1000C51B8(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Putting event {identifier: %s, reader: %s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = *(void (**)(uint64_t *))(v1[5] + 48);
  if (v10)
  {
    swift_retain();
    v10(&v12);
    sub_100096314((uint64_t)v10);
  }
}

id sub_100551FF4(uint64_t a1)
{
  uint64_t v3 = v1;
  if (!a1)
  {
    sub_10015997C(0, 0);
    return [v1 setSecondaryGroceryLocalesInfoAsData:0];
  }
  type metadata accessor for RDSecondaryGroceryLocalesInfo();
  sub_10056CA90(&qword_10091CDC8, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
  swift_retain();
  uint64_t v4 = REMChecksumRepresentable.rem_checksum.getter();
  if (v2) {
    return (id)swift_release();
  }
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  swift_bridgeObjectRetain();
  id v9 = [v1 secondaryGroceryLocalesInfoChecksum];
  if (!v9)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v7 == v11 && v8 == v13)
  {
    swift_release();
    return (id)swift_bridgeObjectRelease_n();
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_11:
    sub_10056CA90((unint64_t *)&unk_100920900, (void (*)(uint64_t))type metadata accessor for RDSecondaryGroceryLocalesInfo);
    uint64_t v15 = REMJSONRepresentable.toJSONData()();
    unint64_t v17 = v16;
    sub_10015997C(v7, v8);
    swift_bridgeObjectRelease();
    sub_100097E38(v15, v17);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v15, v17);
    [v3 setSecondaryGroceryLocalesInfoAsData:isa];

    sub_100097F34(v15, v17);
    return (id)swift_release();
  }
  swift_release();
  return (id)swift_bridgeObjectRelease();
}

id sub_100552258(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  if (!a1)
  {
    sub_100410A0C(0, 0, a2 & 1);
    return [v2 setRecentlyDeletedInfoAsData:0];
  }
  type metadata accessor for RDRecentlyDeletedInfo();
  sub_10056CA90(&qword_10091CD98, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
  swift_retain();
  uint64_t v6 = REMChecksumRepresentable.rem_checksum.getter();
  if (v3) {
    return (id)swift_release();
  }
  id v9 = v7;
  uint64_t v20 = v6;
  swift_bridgeObjectRetain();
  id v10 = [v2 recentlyDeletedInfoChecksum];
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v14 = v13;

  if (v20 == v12 && v9 == v14)
  {
    swift_release();
    return (id)swift_bridgeObjectRelease_n();
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_11:
    sub_10056CA90(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
    uint64_t v16 = REMJSONRepresentable.toJSONData()();
    unint64_t v18 = v17;
    sub_100410A0C(v20, v9, a2 & 1);
    swift_bridgeObjectRelease();
    sub_100097E38(v16, v18);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F34(v16, v18);
    [v4 setRecentlyDeletedInfoAsData:isa];

    sub_100097F34(v16, v18);
    return (id)swift_release();
  }
  swift_release();
  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_1005524D0(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091CCD8, &qword_1009077A0, (uint64_t)qword_100942328);
}

uint64_t sub_1005524FC(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091CCF0, &qword_1009077F0, (uint64_t)qword_100942418);
}

unint64_t sub_10055252C()
{
  unint64_t result = qword_10091CD10;
  if (!qword_10091CD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091CD10);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PermanentlyHideError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10055261CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PermanentlyHideError()
{
  return &type metadata for PermanentlyHideError;
}

id sub_100552654()
{
  uint64_t v1 = v0;
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091CCD8);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deallocating RDXPCStorePerformer", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = &v1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID];
  swift_beginAccess();
  *(void *)uint64_t v6 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for RDXPCStorePerformer();
  [super dealloc];
}

id sub_10055289C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_t v46 = (os_log_t)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10008E2DC(v6, (uint64_t)qword_10091CCD8);
  id v9 = a2;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v45 = v6;
  if (v12)
  {
    uint64_t v43 = v2;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    v48[0] = v9;
    id v14 = v9;
    uint64_t v51 = a1;
    id v15 = v14;
    uint64_t v3 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v42 = v9;

    a1 = v51;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Performing query in daemon {fetchRequest: %@}", v13, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v16 = [v9 fetchExecutor];
  v47[3] = sub_1000963CC(0, &qword_10091CEA0);
  v47[0] = v16;
  sub_100094134(&qword_10091CEA8);
  throwingCast<A>(_:as:failureMessage:)();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
  if (!v3)
  {
    switch((unint64_t)[v9 type])
    {
      case 0uLL:
        uint64_t v17 = v49;
        uint64_t v18 = v50;
        sub_1000C0DE0(v48, v49);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 8))(a1, v17, v18);
        break;
      case 1uLL:
        uint64_t v27 = v49;
        uint64_t v28 = v50;
        sub_1000C0DE0(v48, v49);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(a1, v27, v28);
        break;
      case 2uLL:
        uint64_t v22 = v49;
        uint64_t v23 = v50;
        sub_1000C0DE0(v48, v49);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(a1, v22, v23);
        break;
      case 3uLL:
        uint64_t v24 = v49;
        uint64_t v25 = v50;
        sub_1000C0DE0(v48, v49);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 40))(a1, v24, v25);
        break;
      case 4uLL:
        uint64_t v20 = v49;
        uint64_t v21 = v50;
        sub_1000C0DE0(v48, v49);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 56))(a1, v20, v21);
        break;
      default:
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v44 + 16))(v46, v8, v45);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
        sub_10052ECB8((uint64_t)"unknown type", 12, 2);
        __break(1u);
        JUMPOUT(0x100552EC8);
    }
    uint64_t v29 = (void *)v19;
    id v30 = v9;
    id v31 = v29;
    os_log_t v32 = (os_log_t)v30;
    id v9 = v31;
    long long v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      LODWORD(v51) = v35;
      uint64_t v37 = v36;
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412546;
      v47[0] = v32;
      uint64_t v39 = v32;
      os_log_t v46 = v33;
      uint64_t v40 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v38 = v32;

      *(_WORD *)(v37 + 12) = 2112;
      v47[0] = v9;
      id v41 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38[1] = v9;

      os_log_t v32 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v51, "Finished performing query in daemon {fetchRequest: %@, result: %@}", (uint8_t *)v37, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
  }
  return v9;
}

uint64_t sub_100552EDC(uint64_t a1, void *a2, void *a3)
{
  swift_beginAccess();
  if (a3)
  {
    id v5 = a2;
    sub_1001A6D3C((uint64_t)a3, (uint64_t)v5);
  }
  else
  {
    id v6 = a2;
    id v5 = (id)sub_10030D414(v6);
  }
  return swift_endAccess();
}

uint64_t type metadata accessor for RDXPCStorePerformer()
{
  return self;
}

void sub_100552FD8(id a1, uint64_t a2, unint64_t a3, NSObject *a4, void (*a5)(void *, id), uint64_t a6, NSObject *a7)
{
  uint64_t v8 = (uint64_t)v7;
  uint64_t v124 = a6;
  id v134 = a1;
  sub_1000963CC(0, &qword_10091CE78);
  id v15 = a1;
  sub_100094134(&qword_10091CE90);
  v125 = (void (*)(void *, id))a5;
  uint64_t v123 = a2;
  if (swift_dynamicCast())
  {
    sub_1000967D4(v132, (uint64_t)v129);
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = sub_10008E2DC(v16, (uint64_t)qword_10091CCD8);
    id v18 = v15;
    swift_bridgeObjectRetain_n();
    uint64_t v19 = v18;
    v120 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      id v117 = v20;
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v116 = v24;
      uint64_t v118 = swift_slowAlloc();
      *(void *)&v132[0] = v118;
      *(_DWORD *)uint64_t v23 = 138544130;
      uint64_t v122 = v7;
      id v134 = v19;
      id v119 = v19;
      id v121 = a4;
      uint64_t v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v19;

      LODWORD(v115) = v22;
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain();
      id v134 = (id)sub_1000C51B8(a2, a3, (uint64_t *)v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 22) = 2082;
      Swift::String v26 = self;
      id v27 = [v26 currentThread];
      id v28 = [v27 description];

      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      uint64_t v32 = v29;
      a4 = v121;
      id v134 = (id)sub_1000C51B8(v32, v31, (uint64_t *)v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 32) = 2048;
      long long v33 = v26;
      uint64_t v8 = (uint64_t)v122;
      id v34 = [v33 currentThread];
      id v35 = [v34 qualityOfService];

      id v134 = v35;
      uint64_t v19 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v115, "Performing store controller invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}", (uint8_t *)v23, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v57 = v130;
    uint64_t v58 = v131;
    sub_1000C0DE0(v129, v130);
    uint64_t v59 = *(uint64_t *)((char *)&a4->isa + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
    sub_10010B4E8((uint64_t)a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v132);
    uint64_t v60 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v58 + 16))(v59, v132, v57, v58);
    if (v8)
    {
      id v134 = (id)v8;
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v61 = sub_1000963CC(0, &qword_10090AFE0);
      swift_dynamicCast();
      uint64_t v62 = v19;
      swift_bridgeObjectRetain_n();
      id v63 = v128;
      uint64_t v64 = v62;
      id v65 = v63;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v69 = swift_slowAlloc();
        id v121 = v66;
        uint64_t v70 = (void *)swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 138543874;
        LODWORD(v120) = v68;
        id v119 = (void *)v61;
        uint64_t v71 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v70 = v64;

        *(_WORD *)(v69 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v123, a3, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v69 + 22) = 2082;
        sub_1000E4F40((unint64_t *)&unk_10090AFE8, &qword_10090AFE0);
        uint64_t v72 = Error.rem_errorDescription.getter();
        uint64_t v126 = sub_1000C51B8(v72, v73, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v120, "Error performing store controller invocation {invocation: %{public}@, client: %{public}s, error %{public}s}", (uint8_t *)v69, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v108 = v65;
      v125(0, v65);

      swift_errorRelease();
    }
    else
    {
      v92 = (void *)v60;
      uint64_t v93 = v19;
      swift_bridgeObjectRetain_n();
      uint64_t v94 = v93;
      char v95 = Logger.logObject.getter();
      uint64_t v96 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v95, (os_log_type_t)v96))
      {
        uint64_t v97 = swift_slowAlloc();
        id v119 = (void *)swift_slowAlloc();
        id v134 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 138543618;
        uint64_t v122 = v92;
        v120 = v95;
        NSString v98 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v119 = v94;

        *(_WORD *)(v97 + 12) = 2082;
        swift_bridgeObjectRetain();
        id v128 = (id)sub_1000C51B8(v123, a3, (uint64_t *)&v134);
        v92 = v122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v96, "Finished performing store controller invocation  {invocation: %{public}@, client: %{public}s}", (uint8_t *)v97, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v111 = v92;
      v125(v92, 0);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v129);
  }
  else
  {
    uint64_t v133 = 0;
    memset(v132, 0, sizeof(v132));
    sub_1000966BC((uint64_t)v132, &qword_10091CE98);
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    v120 = a7;
    uint64_t v36 = type metadata accessor for Logger();
    uint64_t v37 = sub_10008E2DC(v36, (uint64_t)qword_10091CCD8);
    id v38 = v15;
    swift_bridgeObjectRetain_n();
    id v39 = v38;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    int v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v43 = swift_slowAlloc();
      id v117 = v40;
      uint64_t v44 = (void *)swift_slowAlloc();
      v115 = v44;
      uint64_t v118 = swift_slowAlloc();
      *(void *)&v132[0] = v118;
      *(_DWORD *)uint64_t v43 = 138544130;
      LODWORD(v116) = v42;
      id v119 = (void *)v37;
      id v121 = a4;
      uint64_t v122 = v7;
      id v45 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v44 = v39;

      *(_WORD *)(v43 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, (uint64_t *)v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 22) = 2082;
      os_log_t v46 = self;
      id v47 = [v46 currentThread:v43 + 24, v115];
      id v48 = v39;
      unint64_t v49 = a3;
      id v50 = [v47 description];

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      a3 = v49;
      id v39 = v48;
      sub_1000C51B8(v51, v53, (uint64_t *)v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 32) = 2048;
      uint64_t v54 = v46;
      uint64_t v8 = (uint64_t)v122;
      id v55 = [v54 currentThread];
      id v56 = [v55 qualityOfService];

      v129[0] = (uint64_t)v56;
      a4 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v116, "Performing invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}", (uint8_t *)v43, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v74 = sub_10010B4E8((uint64_t)a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v132);
    __chkstk_darwin(v74);
    v114[2] = v120;
    sub_1003B970C((uint64_t)v132, (uint64_t)sub_10056DC18, (uint64_t)v114);
    if (v8)
    {
      v129[0] = v8;
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v76 = sub_1000963CC(0, &qword_10090AFE0);
      swift_dynamicCast();
      uint64_t v77 = v134;
      id v78 = v39;
      swift_bridgeObjectRetain_n();
      id v79 = v77;
      id v80 = v78;
      id v81 = v79;
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      int v84 = v83;
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v85 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        id v121 = v82;
        uint64_t v87 = (void *)v86;
        uint64_t v122 = (void *)swift_slowAlloc();
        uint64_t v127 = (uint64_t)v80;
        id v128 = v122;
        *(_DWORD *)uint64_t v85 = 138543874;
        LODWORD(v120) = v84;
        id v119 = (void *)v76;
        id v88 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v87 = v80;

        *(_WORD *)(v85 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v127 = sub_1000C51B8(v123, a3, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v85 + 22) = 2082;
        uint64_t v127 = (uint64_t)v81;
        sub_1000E4F40((unint64_t *)&unk_10090AFE8, &qword_10090AFE0);
        uint64_t v89 = Error.rem_errorDescription.getter();
        uint64_t v127 = sub_1000C51B8(v89, v90, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v91 = v121;
        _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v120, "Error performing invocation {invocation: %{public}@, client: %{public}s, error %{public}s}", (uint8_t *)v85, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v109 = (void (*)(void, id))v125;
      id v110 = v81;
      v109(0, v81);

      swift_errorRelease();
    }
    else
    {
      unint64_t v99 = v75;
      id v100 = v39;
      swift_bridgeObjectRetain_n();
      id v101 = v100;
      unint64_t v102 = Logger.logObject.getter();
      uint64_t v103 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v102, (os_log_type_t)v103))
      {
        uint64_t v104 = swift_slowAlloc();
        id v119 = (void *)swift_slowAlloc();
        id v121 = swift_slowAlloc();
        v129[0] = (uint64_t)v121;
        *(_DWORD *)uint64_t v104 = 138543618;
        id v134 = v101;
        uint64_t v122 = v99;
        id v105 = v101;
        v120 = v102;
        id v106 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v119 = v101;

        *(_WORD *)(v104 + 12) = 2082;
        swift_bridgeObjectRetain();
        id v134 = (id)sub_1000C51B8(v123, a3, v129);
        unint64_t v99 = v122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v107 = v120;
        _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v103, "Finished performing {invocation: %{public}@, client: %{public}s}", (uint8_t *)v104, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v112 = (void (*)(void *, void))v125;
      id v113 = v99;
      v112(v99, 0);
    }
  }
}

uint64_t sub_1005541FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  sub_1000C0DE0(a2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100554410@<X0>(void *a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t))
{
  v40[0] = 0;
  id v18 = [a1 latestFetchResultTokenWithError:v40];
  id v19 = v40[0];
  if (v18)
  {
    uint64_t v20 = v18;
    id v35 = a9;
    uint64_t v36 = a8;
    os_log_type_t v21 = *a2;
    *a2 = v18;
    id v22 = v19;
    id v23 = v20;

    uint64_t v24 = a3[3];
    uint64_t v25 = a3[4];
    sub_1000C0DE0(a3, v24);
    v40[3] = (id)a11(a10);
    v40[0] = a4;
    Swift::String v26 = *(uint64_t (**)(id *, void *, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8);
    id v27 = a4;
    uint64_t v28 = v26(v40, a1, v23, a5, a6, a7, v36, v24, v25);
    uint64_t v30 = v29;
    uint64_t v32 = v31;

    uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v40);
    if (!v11)
    {
      *id v35 = v28;
      v35[1] = v30;
      v35[2] = v32;
    }
  }
  else
  {
    id v34 = v40[0];
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1005547E4(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_10055485C, 0, 0);
}

uint64_t sub_10055485C()
{
  id v1 = [self sharedConfiguration];
  id v2 = [v1 minimumSearchTermLengthByBaseLanguage];

  uint64_t v3 = (void *)v0[2];
  if (v2)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1002EEC68((uint64_t)_swiftEmptyArrayStorage);
  }

  id v4 = (void (**)(void, void, void))v0[3];
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(void, Class, void))v4)[2](v4, isa, 0);

  _Block_release(v4);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void sub_1005549D8(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, void (*a16)(void))
{
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v21 = static OS_dispatch_queue.main.getter();
  id v22 = *(void **)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController];
  type metadata accessor for RDDatabaseSaver();
  uint64_t inited = (void *)swift_initStackObject();
  inited[2] = v21;
  inited[3] = v22;
  inited[4] = a2;
  swift_beginAccess();
  uint64_t v24 = *(void *)(a12 + 16);
  sub_10010B4E8((uint64_t)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity], (uint64_t)v43);
  id v25 = v22;
  swift_bridgeObjectRetain();
  uint64_t v26 = a8;
  id v39 = inited;
  sub_10071EF8C(a3, a4, a5, a6, a7, v26, a9, a10, a11, v24, a13, a14, (uint64_t)v43);
  unint64_t v37 = a4;
  swift_bridgeObjectRelease();
  sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler], *(void *)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler + 24]);
  sub_10038CD54(a10);
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10008E2DC(v27, (uint64_t)qword_10091CCD8);
  uint64_t v28 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v29 = v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    log = v30;
    uint64_t v32 = swift_slowAlloc();
    v42[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136448002;
    uint64_t v33 = sub_100696CF4();
    sub_1000C51B8(v33, v34, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2048;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2048;
    id v35 = a16;
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 32) = 2048;
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 42) = 2048;
    if (a6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 52) = 2048;
    if (a7 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 62) = 2048;
    if (a10 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 72) = 2048;
    swift_beginAccess();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, log, v31, "(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, listSectionStorages.count: %ld, smartListStorages.count: %ld, smartListSectionStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}", (uint8_t *)v32, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    id v35 = a16;
  }
  v35(0);
  swift_setDeallocating();
}

void sub_100555960(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091CCD8);
  id v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v35 = a5;
    uint64_t v33 = a3;
    id v15 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = v12;
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)id v15 = 138543362;
    id v16 = v12;
    a5 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v12;

    uint64_t v6 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchShareForObject: Fetching object with ID {objectID: %{public}@}", v15, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v33;
    swift_slowDealloc();
  }
  else
  {
  }
  id v17 = v12;
  id v18 = (void *)sub_100695D58((uint64_t)v17);
  if (!v6)
  {
    id v19 = v18;
    uint64_t v20 = (void *)sub_1005514B4(v18, 0, &qword_10090FF10, (Class)sub_100697614);

    if (v20)
    {
      id v21 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:a3];
      id v22 = (void *)swift_allocObject();
      v22[2] = a4;
      v22[3] = a5;
      v22[4] = v21;
      v22[5] = v20;
      aBlock[4] = sub_10056D704;
      aBlock[5] = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E13D0;
      aBlock[3] = &unk_1008CA468;
      id v23 = _Block_copy(aBlock);
      swift_retain();
      id v24 = v21;
      id v25 = v20;
      swift_release();
      [v24 fetchShareIfNecessaryForObject:v25 completionHandler:v23];
      _Block_release(v23);
    }
    else
    {
      uint64_t v26 = v17;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138543362;
        aBlock[0] = v26;
        os_log_type_t v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v30 = v26;

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "fetchShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}", v29, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v27 = v26;
      }

      [self noSuchObjectErrorWithObjectID:v26];
      swift_willThrow();
    }
  }
}

void sub_100555DD4(int a1, void (*a2)(id, void), int a3, void *a4, id a5)
{
  id v7 = [a5 objectID];
  id v8 = [a4 fetchShareForObjectWithManagedObjectID:v7];

  a2(v8, 0);
}

void sub_100555E88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v40 = a5;
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10091CCD8);
  id v13 = a2;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    buf = v16;
    *(_DWORD *)id v16 = 138543362;
    aBlock[0] = v13;
    id v18 = v13;
    uint64_t v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createShareForObject: Fetching object with ID {objectID: %{public}@}", buf, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v19 = v13;
  uint64_t v20 = (void *)sub_100695D58((uint64_t)v19);
  if (!v9)
  {
    id v21 = v20;
    id v22 = (void *)sub_1005514B4(v20, 0, &qword_10090FF10, (Class)sub_100697614);

    if (v22)
    {
      id v23 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:a3];
      id v24 = [v22 objectID];
      if (v40 >> 60 == 15) {
        Class isa = 0;
      }
      else {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
      }
      sub_1000963CC(0, (unint64_t *)&qword_10090F370);
      uint64_t v32 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v33 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v34 = (void *)swift_allocObject();
      v34[2] = v33;
      v34[3] = a7;
      v34[4] = a8;
      aBlock[4] = sub_10056D690;
      aBlock[5] = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100102758;
      aBlock[3] = &unk_1008CA3F0;
      uint64_t v35 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v23 createShareForObjectWithManagedObjectID:v24 appIconData:isa queue:v32 completionHandler:v35];
      _Block_release(v35);
    }
    else
    {
      uint64_t v26 = v19;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138543362;
        aBlock[0] = v26;
        os_log_type_t v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v30 = v26;

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "createShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}", v29, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v27 = v26;
      }

      [self noSuchObjectErrorWithObjectID:v26];
      swift_willThrow();
    }
  }
}

uint64_t sub_100556380(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  if (!a1) {
    return a4(a1, a2);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a1;
  uint64_t v11 = CKRecord.subscript.getter();

  swift_bridgeObjectRelease();
  if (!v11)
  {
LABEL_9:

    return a4(a1, a2);
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  id v13 = (void *)v12;
  os_log_type_t v28 = (uint64_t *)(a3 + 16);
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091CCD8);
  id v15 = v10;
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  uint64_t v30 = a5;
  os_log_type_t v31 = a4;
  uint64_t v29 = a2;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v13;
    id v18 = (uint8_t *)swift_slowAlloc();
    id v19 = (void *)swift_slowAlloc();
    *(_DWORD *)id v18 = 138477827;
    id v33 = [v15 recordID:v18 + 4];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v19 = v33;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "createShareForObject: Adding mapping for share recordID {recordID: %{private}@}", v18, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v13 = v27;
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v21 = (char *)Strong;
    id v22 = v15;
    id v23 = [v15 recordID];
    id v24 = [v13 recordID];
    os_log_type_t v28 = &v26;
    uint64_t v32 = *(void *)&v21[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock];
    __chkstk_darwin(v24);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();

    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
  }
  a4 = v31;
  a2 = v29;
  return a4(a1, a2);
}

uint64_t sub_100556824(void *a1, int a2, void *a3, int a4, void *aBlock, void (*a6)(id, uint64_t, uint64_t, id, void *))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  _Block_copy(v9);
  id v13 = a3;
  id v14 = a1;
  a6(v13, v10, v12, v14, v9);
  _Block_release(v9);
  _Block_release(v9);

  return swift_bridgeObjectRelease();
}

void sub_1005568DC(void *a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = qword_1009078B8;
    id v6 = a2;
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_10091CCD8);
    sub_100149368(a2, 0);
    id v8 = a1;
    sub_100149368(a2, 0);
    id v9 = v8;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412546;
      log = v10;
      id v14 = v6;
      id v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v9;

      id v6 = v14;
      *(_WORD *)(v12 + 12) = 2112;
      uint64_t v32 = (uint64_t)v14;
      id v16 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v13[1] = a2;
      sub_10011C62C(a2, 0);
      sub_10011C62C(a2, 0);
      uint64_t v10 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v11, "CKSystemSharingUIObserver: didSave: {recordID: %@ share: %@}", (uint8_t *)v12, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10011C62C(a2, 0);
      sub_10011C62C(a2, 0);
    }

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v29 = (void *)Strong;
      sub_100556E00(v6);
      sub_10011C62C(a2, 0);

      return;
    }
    uint64_t v26 = a2;
    char v27 = 0;
    goto LABEL_17;
  }
  swift_errorRetain();
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10091CCD8);
  sub_100149368(a2, 1);
  id v18 = a1;
  sub_100149368(a2, 1);
  id v19 = v18;
  oslog = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    id v22 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v33 = (uint64_t)v19;
    id v23 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v22 = v19;

    *(_WORD *)(v21 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v24 = Error.localizedDescription.getter();
    uint64_t v33 = sub_1000C51B8(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10011C62C(a2, 1);
    sub_10011C62C(a2, 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v20, "CKSystemSharingUIObserver: failed to save: {recordID: %@ error: %s}", (uint8_t *)v21, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v26 = a2;
    char v27 = 1;
LABEL_17:
    sub_10011C62C(v26, v27);
    return;
  }
  sub_10011C62C(a2, 1);

  sub_10011C62C(a2, 1);
  sub_10011C62C(a2, 1);
}

void sub_100556E00(void *a1)
{
  uint64_t v5 = v1;
  id v6 = [a1 recordID];
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();

  swift_release();
  NSString v3 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_100557604;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E13D0;
  aBlock[3] = &unk_1008CA238;
  id v4 = _Block_copy(aBlock);
  [v5 updateShare:a1 accountID:v3 completion:v4];
  _Block_release(v4);
}

void sub_100556F74(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10091CCD8);
    id v13 = a1;
    sub_1000CD9C4(a2, 1);
    id v14 = v13;
    sub_1000CD9C4(a2, 1);
    oslog = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      v24[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412546;
      uint64_t v25 = (uint64_t)v14;
      id v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v14;

      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v25 = sub_1000C51B8(v19, v20, (uint64_t *)v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a2, 1);
      sub_1000CD9D0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "CKSystemSharingUIObserver: stopped sharing failed: {recordID: %@ error: %s}", (uint8_t *)v16, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000CD9D0(a2, 1);
    }
    else
    {
      sub_1000CD9D0(a2, 1);

      sub_1000CD9D0(a2, 1);
      sub_1000CD9D0(a2, 1);
    }
  }
  else
  {
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10091CCD8);
    id v5 = a1;
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138412290;
      v24[0] = v5;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CKSystemSharingUIObserver: stopped sharing: {recordID: %@}", v8, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v22 = (void *)Strong;
      sub_1005573FC();
    }
  }
}

void sub_1005573FC()
{
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "cloudContext"));
  if (v1)
  {
    id v2 = v1;
    __chkstk_darwin(v1);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();

    swift_release();
  }
  else
  {
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091CCD8);
    id v6 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v4, "shareDidStop: Cloud Context is not intialized", v5, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100557604(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_10091CCD8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_1000C51B8(v4, v5, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to update share {error: %s}", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100557810(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID);
  swift_beginAccess();
  uint64_t v6 = *v5;
  id v7 = a2;
  swift_bridgeObjectRetain();
  id v8 = sub_1002F02E0(v7, v6);

  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_beginAccess();
    id v9 = v7;
    id v10 = (void *)sub_10030D414(v9);
    swift_endAccess();

    id v11 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:a3];
    NSString v12 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    id v13 = static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_100557B38;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100742FE8;
    aBlock[3] = &unk_1008CA210;
    id v14 = _Block_copy(aBlock);
    [v11 didStopSharingRecordID:v8 accountID:v12 queue:v13 completionHandler:v14];
    _Block_release(v14);
  }
  else
  {
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091CCD8);
    uint64_t v16 = v7;
    id v13 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)id v18 = 138412290;
      aBlock[0] = v16;
      unint64_t v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v16;

      _os_log_impl((void *)&_mh_execute_header, v13, v17, "No mapping for share record, cannot stop share. {recordID: %@}", v18, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v13 = v16;
    }
  }
}

void sub_100557B38()
{
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10091CCD8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "shareDidStop: Stopped share successfully.", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_100557C20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  id v8 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10056D4F8;
  *(void *)(v10 + 24) = v9;
  v12[4] = sub_10056D534;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100557D6C;
  v12[3] = &unk_1008CA170;
  id v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  [a1 acceptShareWithMetadata:a2 callbackQueue:v8 completionHandler:v11];
  _Block_release(v11);
}

uint64_t sub_100557D6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(void))(a1 + 32);
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a2;
  v5();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100557E20(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    if (a4)
    {
LABEL_3:
      uint64_t v9 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = 0;
LABEL_6:
  id v10 = (id)v9;
  (*(void (**)(uint64_t, void, NSString))(a5 + 16))(a5, a1 & 1, v8);
}

uint64_t sub_100557ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  v9[5] = a6;
  char v10 = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100551BB0((uint64_t)v9);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100557F88(void *a1, int a2, int a3, int a4, void *aBlock, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  NSString v8 = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  _Block_copy(v8);
  id v15 = a1;
  a6(v9, v11, v12, v14, v15, v8);
  _Block_release(v8);
  _Block_release(v8);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_100558058(uint64_t a1, void *a2, void (*a3)(id, id))
{
  BOOL v7 = sub_100558270(a2);
  if (!v3)
  {
    if (v7)
    {
      uint64_t v8 = sub_1005583BC((unint64_t)a2);
      BOOL v9 = sub_1005584AC((uint64_t)a2, a1, 64, (uint64_t (*)(uint64_t, uint64_t))sub_100547218, (void (*)(void))type metadata accessor for REMCDSavedReminder);
      BOOL v10 = sub_1005584AC((uint64_t)a2, a1, 96, (uint64_t (*)(uint64_t, uint64_t))sub_100547218, (void (*)(void))type metadata accessor for REMCDSavedReminder);
      BOOL v11 = sub_1005584AC((uint64_t)a2, a1, 128, (uint64_t (*)(uint64_t, uint64_t))sub_100547218, (void (*)(void))type metadata accessor for REMCDSavedReminder);
      id v12 = [objc_allocWithZone((Class)REMTemplateContentAttributes) initWithReminderCount:v8 hasDisplayDate:v9 hasHashtags:v10 hasLocationTriggersOrVehicleEventTriggers:v11 hasImageAttachments:sub_1005584AC((uint64_t)a2, a1, 66, (uint64_t (*)(uint64_t, uint64_t))sub_1005B22E0, (void (*)(void))type metadata accessor for REMCDSavedAttachment)];
      id v13 = v12;
      id v14 = 0;
    }
    else
    {
      id v13 = [self noSuchObjectErrorWithObjectID:a2];
      id v12 = 0;
      id v14 = v13;
    }
    a3(v12, v14);
  }
}

BOOL sub_100558270(void *a1)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10077A530;
  *(void *)(v2 + 32) = a1;
  unint64_t v9 = v2;
  specialized Array._endMutation()();
  id v3 = a1;
  uint64_t v4 = (void *)sub_1002E3548(v9, 1);
  swift_bridgeObjectRelease();
  type metadata accessor for REMCDTemplate();
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  uint64_t v7 = NSManagedObjectContext.count<A>(for:)();
  return v7 > 0;
}

uint64_t sub_1005583BC(unint64_t a1)
{
  os_log_type_t v1 = (void *)sub_100547218(a1, 32);
  type metadata accessor for REMCDSavedReminder();
  id v2 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  [v2 setEntity:v3];

  [v2 setAffectedStores:0];
  [v2 setPredicate:v1];

  uint64_t v4 = NSManagedObjectContext.count<A>(for:)();
  return v4;
}

BOOL sub_1005584AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), void (*a5)(void))
{
  id v6 = (void *)a4(a1, a3);
  a5(0);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];

  uint64_t v9 = NSManagedObjectContext.count<A>(for:)();
  return v9 > 0;
}

void sub_1005585C4(void *a1, void (*a2)(void, void), uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id v12 = (void *)sub_100349CDC();

  if (v12)
  {
    uint64_t updated = type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink();
    sub_100096838(a6, (uint64_t)v33);
    id v13 = self;
    id v14 = a4;
    id v15 = a5;
    os_log_type_t v31 = a2;
    id v16 = [v13 sharedConfiguration];
    [v16 templatePublicLinkTTL];
    double v18 = v17;

    uint64_t v20 = v34;
    uint64_t v19 = v35;
    uint64_t v21 = sub_100096204((uint64_t)v33, v34);
    __n128 v22 = __chkstk_darwin(v21);
    uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v25 + 16))(v24, v22);
    sub_1005A1B7C((uint64_t)v14, (uint64_t)v15, (uint64_t)v24, 0, 1000, v18, updated, v20, v19);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v33);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v31;
    *(void *)(v26 + 24) = a3;
    swift_retain();
    id v27 = [v13 sharedConfiguration];
    [v27 templatePublicLinkOperationTimeoutInterval];
    double v29 = v28;

    sub_10059C6D4(a1, (void (*)(uint64_t, uint64_t))sub_10056D3B4, v26, v29);
    swift_release();
    swift_release();
  }
  else
  {
    id v30 = [self noPrimaryActiveCloudKitAccountError];
    a2(0, v30);
  }
}

void sub_100558870(uint64_t a1, void (*a2)(void, id), uint64_t a3, void *a4, void *a5)
{
  BOOL v10 = (void *)sub_100349CDC();

  if (v10)
  {
    BOOL v11 = self;
    id v12 = a4;
    id v13 = a5;
    id v14 = [v11 sharedConfiguration];
    [v14 templatePublicLinkTTL];
    uint64_t v16 = v15;

    type metadata accessor for RDTemplateOperationCreateTemplatePublicContentPreview();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v12;
    *(void *)(inited + 24) = v13;
    *(void *)(inited + 32) = 1000;
    *(void *)(inited + 40) = v16;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = a3;
    swift_retain();
    sub_100357640(a1, (uint64_t (*)(void, void))sub_10056DDFC, v18);
    swift_release();
    swift_setDeallocating();
  }
  else
  {
    id v19 = [self noPrimaryActiveCloudKitAccountError];
    a2(0, v19);
  }
}

void sub_100558A14(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, id, void *))
{
  BOOL v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v13, v10);
  _Block_release(v10);
  _Block_release(v10);
}

void sub_100558AC4(uint64_t a1, void (*a2)(void, id), uint64_t a3, void *a4, uint64_t a5)
{
  BOOL v10 = (void *)sub_100349CDC();

  if (v10)
  {
    uint64_t v11 = type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink();
    sub_100096838(a5, (uint64_t)v27);
    uint64_t v12 = v28;
    uint64_t v13 = v29;
    uint64_t v14 = sub_100096204((uint64_t)v27, v28);
    __n128 v15 = __chkstk_darwin(v14);
    double v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(unsigned char *, __n128))(v18 + 16))(v17, v15);
    sub_1000CD70C((uint64_t)a4, (uint64_t)v17, 0, v11, v12, v13);
    id v19 = a4;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v27);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a2;
    *(void *)(v20 + 24) = a3;
    uint64_t v21 = self;
    swift_retain();
    id v22 = [v21 sharedConfiguration];
    [v22 templatePublicLinkOperationTimeoutInterval];
    double v24 = v23;

    sub_1000CADB8(a1, (void (*)(void, void))sub_10056DDFC, v20, v24);
    swift_release();
    swift_release();
  }
  else
  {
    id v25 = [self noPrimaryActiveCloudKitAccountError];
    a2(0, v25);
  }
}

void sub_100558D1C(void *a1, void (*a2)(void, id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)sub_100349CDC();

  if (v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
    sub_100096838(a5, (uint64_t)v23);
    type metadata accessor for RDTemplateOperationDownloadPublicTemplate();
    uint64_t v15 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID, v13, v10);
    sub_1000967D4(v23, v15 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController);
    *(unsigned char *)(v15 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_isUnitTestMode) = 0;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a2;
    *(void *)(v16 + 24) = a3;
    double v17 = self;
    swift_retain();
    id v18 = [v17 sharedConfiguration];
    [v18 templatePublicLinkOperationTimeoutInterval];
    double v20 = v19;

    sub_1003DF0B4(a1, (uint64_t)sub_10056D31C, v16, v20);
    swift_release();
    swift_setDeallocating();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID, v10);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v15 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController);
    swift_deallocClassInstance();
  }
  else
  {
    id v21 = [self noPrimaryActiveCloudKitAccountError];
    a2(0, v21);
  }
}

uint64_t sub_100558FD0(void *a1, char a2, void (*a3)(void *, void *), uint64_t a4, uint64_t (*a5)(void *, void))
{
  if (a2)
  {
    swift_errorRetain();
    id v8 = 0;
    uint64_t v9 = a1;
  }
  else
  {
    id v10 = a1;
    id v8 = a1;
    uint64_t v9 = 0;
  }
  a3(v8, v9);

  return a5(a1, a2 & 1);
}

void sub_100559174(void *a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = _s10PredicatesOMa_1();
  __chkstk_darwin(v6);
  id v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007895E0;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  *(void *)(inited + 56) = swift_getKeyPath();
  id v70 = (id)inited;
  specialized Array._endMutation()();
  unint64_t v10 = (unint64_t)v70;
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_10077A530;
  *(void *)(v11 + 32) = swift_getKeyPath();
  id v70 = (id)v11;
  specialized Array._endMutation()();
  unint64_t v12 = (unint64_t)v70;
  uint64_t v13 = (void *)sub_100535B3C();
  uint64_t v14 = (void *)sub_1003BD0F4(v10, v12, 0, (uint64_t)v13);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v14 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    sub_1003DC140((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    return;
  }
  id v63 = a1;
  uint64_t v67 = 0;
  id v70 = v16;
  sub_100094134(&qword_100910160);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  unint64_t v17 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1003DC140((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  unint64_t v19 = v17 >> 62;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v69 = v59;
    if (!v59) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v69 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v69) {
      goto LABEL_5;
    }
  }
  sub_1002EF9C4((uint64_t)_swiftEmptyArrayStorage);
  static Date.now.getter();
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v20);
  sub_1000963CC(0, &qword_100912AF8);
  v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v23 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v20) != 1)
  {
    Class v23 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v20);
  }
  id v24 = [objc_allocWithZone((Class)REMTextMemberships) initWithMemberships:v22.super.isa lastResetDate:v23];

  id v70 = v24;
  sub_1000963CC(0, &qword_100914A20);
  uint64_t v25 = v67;
  uint64_t v26 = REMJSONRepresentable.toJSONData()();
  if (v25)
  {

    goto LABEL_5;
  }
  unint64_t v28 = v27;
  uint64_t v66 = v26;
  unint64_t v62 = v19;
  id v70 = v24;
  uint64_t v29 = REMChecksumRepresentable.rem_checksum.getter();
  uint64_t v67 = 0;
  id v61 = v24;
  uint64_t v31 = v66;
  if (v69 < 1)
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  unint64_t v68 = v18 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  unint64_t v64 = 0x8000000100791860;
  unint64_t v65 = v28;
  do
  {
    if (v68) {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v39 = *(id *)(v18 + 8 * v34 + 32);
    }
    unint64_t v40 = v39;
    swift_bridgeObjectRetain();
    id v41 = [v40 groceryLocalCorrectionsChecksum];
    if (!v41)
    {
LABEL_16:
      NSString v35 = String._bridgeToObjectiveC()();
      [v40 setGroceryLocalCorrectionsChecksum:v35];

      id v36 = [v40 createResolutionTokenMapIfNecessary];
      NSString v37 = String._bridgeToObjectiveC()();
      [v36 updateForKey:v37];
      swift_bridgeObjectRelease();

      goto LABEL_17;
    }
    int v42 = v41;
    unint64_t v43 = v18;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    if (v44 == v32 && v46 == v33)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v18 = v43;
      unint64_t v28 = v65;
      uint64_t v31 = v66;
    }
    else
    {
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v18 = v43;
      unint64_t v28 = v65;
      uint64_t v31 = v66;
      if ((v48 & 1) == 0) {
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
LABEL_17:
    ++v34;
    Class v38 = Data._bridgeToObjectiveC()().super.isa;
    [v40 setGroceryLocalCorrectionsAsData:v38];

    [v40 updateChangeCount];
  }
  while (v69 != v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v70 = 0;
  if (([v63 save:&v70] & 1) == 0)
  {
    id v58 = v70;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_100097F34(v31, v28);
    return;
  }
  uint64_t v49 = qword_1009078C0;
  id v50 = v70;
  id v24 = v61;
  if (v49 != -1) {
LABEL_41:
  }
    swift_once();
  uint64_t v51 = type metadata accessor for Logger();
  sub_10008E2DC(v51, (uint64_t)qword_10091CCF0);
  swift_bridgeObjectRetain();
  unint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  unint64_t v55 = v62;
  if (v54)
  {
    id v56 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v56 = 134217984;
    if (v55)
    {
      swift_bridgeObjectRetain();
      uint64_t v57 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v57 = *(void **)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v70 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Cleared grocery local corrections of list owned by current user {lists.count: %ld}", v56, 0xCu);
    swift_slowDealloc();
    sub_100097F34(v31, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    sub_100097F34(v31, v28);
  }
}

uint64_t sub_100559AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_100559B0C, 0, 0);
}

uint64_t sub_100559B0C()
{
  sub_1001E2A94(*(void *)(v0 + 16), *(void *)(v0 + 24), 0, 1);
  (*(void (**)(void))(v0 + 32))();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100559D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v5.super.Class isa = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_100559DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 224) = v15;
  *(void *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 112) = v13;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 72) = a4;
  uint64_t v9 = type metadata accessor for REMTrialNamespace();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v8 + 160) = v10;
  *(void *)(v8 + 168) = *(void *)(v10 - 8);
  *(void *)(v8 + 176) = swift_task_alloc();
  return _swift_task_switch(sub_100559F34, 0, 0);
}

uint64_t sub_100559F34()
{
  uint64_t v1 = sub_10016F4B0(*(void *)(v0 + 72));
  if ((sub_1001BCB84(*(void *)(v0 + 80), *(void *)(v0 + 88), v1) & 1) == 0)
  {
    NSString v37 = *(void (**)(void, id))(v0 + 96);
    swift_bridgeObjectRelease();
    Class v38 = self;
    NSString v39 = String._bridgeToObjectiveC()();
    id v40 = [v38 invalidParameterErrorWithDescription:v39];

    v37(0, v40);
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
    return v64();
  }
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 144);
    unsigned int v69 = enum case for REMTrialNamespace.grocery(_:);
    uint64_t v67 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    unint64_t v68 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
    id v70 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 168) + 8);
    swift_bridgeObjectRetain();
    uint64_t v4 = (void (**)(char *, uint64_t))(v1 + 5);
    NSArray v5 = _swiftEmptyDictionarySingleton;
    uint64_t v66 = v0;
    while (1)
    {
      uint64_t v6 = (uint64_t)*(v4 - 1);
      id v7 = *v4;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      Date.init()();
      type metadata accessor for REMTrialClient();
      swift_allocObject();
      uint64_t v8 = REMTrialClient.init()();
      uint64_t v74 = v5;
      uint64_t v71 = v4;
      uint64_t v72 = v2;
      uint64_t v9 = *(void *)(v0 + 152);
      uint64_t v10 = *(void *)(v0 + 136);
      (*v68)(v9, v69, v10);
      uint64_t v11 = dispatch thunk of REMTrialClient.deploymentId(for:)();
      uint64_t v13 = v12;
      (*v67)(v9, v10);
      swift_retain();
      uint64_t v14 = sub_1001E68F4(v6, v7, v8);
      uint64_t v15 = *(void *)(v0 + 176);
      uint64_t v16 = v14;
      uint64_t v17 = *(void *)(v0 + 160);
      swift_release();
      uint64_t v18 = REMGroceryClassifier.modelTypesDescription.getter();
      sub_1007428EC(v15, v18, v19, 1, 2, v11, v13, v6, (uint64_t)v7, 0xD00000000000001ELL, 0x80000001007D83C0, 0, 0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v70)(v15, v17);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v27 = sub_1001806F8(v6, (uint64_t)v7);
      uint64_t v28 = v74[2];
      BOOL v29 = (v21 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
        return Sequence.asyncReduce<A>(_:_:)(v30, v21, v22, v23, v24, v25, v26);
      }
      char v31 = (char)v21;
      if (v74[3] >= v30)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v32 = v74;
          if (v21) {
            goto LABEL_13;
          }
        }
        else
        {
          sub_10031B1D4();
          uint64_t v32 = v74;
          if (v31) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        sub_100313444(v30, isUniquelyReferenced_nonNull_native);
        uint64_t v32 = v74;
        unint64_t v33 = sub_1001806F8(v6, (uint64_t)v7);
        if ((v31 & 1) != (v34 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v27 = v33;
        if (v31)
        {
LABEL_13:
          uint64_t v35 = v32[7];
          uint64_t v36 = 8 * v27;

          *(void *)(v35 + v36) = v16;
          goto LABEL_5;
        }
      }
      sub_1002C83CC(v27, v6, (uint64_t)v7, v16, v32);
      swift_bridgeObjectRetain();
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v71 + 2;
      NSArray v5 = v32;
      uint64_t v2 = v72 - 1;
      uint64_t v0 = v66;
      if (v72 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
  }
  uint64_t v32 = _swiftEmptyDictionarySingleton;
LABEL_19:
  *(void *)(v0 + 184) = v32;
  swift_bridgeObjectRelease();
  if (!v32[2])
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void (**)(void, id))(v0 + 96);
    uint64_t v59 = *(void *)(v0 + 80);
    id v58 = *(void **)(v0 + 88);
    uint64_t v60 = self;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = v59;
    v61._object = v58;
    String.append(_:)(v61);
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v63 = [v60 invalidParameterErrorWithDescription:v62];

    v57(0, v63);
    goto LABEL_26;
  }
  uint64_t v41 = *(void *)(v0 + 80);
  uint64_t v42 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  unint64_t v43 = sub_1001806F8(v41, v42);
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v75 = v0 + 48;
  char v73 = *(unsigned char *)(v0 + 224);
  uint64_t v45 = (void *)v0;
  uint64_t v46 = *(void *)(v0 + 120);
  uint64_t v47 = *(void *)(v0 + 128);
  uint64_t v48 = *(void *)(v0 + 112);
  uint64_t v49 = *(void *)(v0 + 72);
  id v50 = (char *)*(id *)(v32[7] + 8 * v43);
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)&v50[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
  uint64_t v52 = *(void *)&v50[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
  v45[24] = v52;
  swift_bridgeObjectRetain();

  v45[7] = v48;
  v45[8] = sub_1002EFAE8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v53 = swift_task_alloc();
  v45[25] = v53;
  *(void *)(v53 + 16) = v49;
  *(void *)(v53 + 24) = v32;
  *(void *)(v53 + 32) = v46;
  *(void *)(v53 + 40) = v47;
  *(unsigned char *)(v53 + 48) = v73;
  *(void *)(v53 + 56) = v51;
  *(void *)(v53 + 64) = v52;
  BOOL v54 = (void *)swift_task_alloc();
  v45[26] = v54;
  uint64_t v55 = sub_100094134(&qword_100911CB0);
  uint64_t v56 = sub_100094134(&qword_10091CE00);
  uint64_t v26 = sub_1000967F4((unint64_t *)&qword_100911CB8, &qword_100911CB0);
  *BOOL v54 = v45;
  v54[1] = sub_10055A730;
  NSDictionary v22 = &unk_10091CDF8;
  uint64_t v30 = v75;
  uint64_t v21 = v45 + 8;
  uint64_t v23 = v53;
  uint64_t v24 = v55;
  uint64_t v25 = v56;
  return Sequence.asyncReduce<A>(_:_:)(v30, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_10055A730()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10055A994;
  }
  else {
    uint64_t v2 = sub_10055A89C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10055A89C()
{
  uint64_t v1 = *(void (**)(id, void))(v0 + 96);
  id v2 = objc_allocWithZone((Class)REMGrocerySuggestions);
  sub_100094134(&qword_10091CE08);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithSuggestedSectionsByReminderTitle:isa];

  v1(v4, 0);
  swift_task_dealloc();
  swift_task_dealloc();
  NSArray v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10055A994()
{
  uint64_t v1 = v0[27];
  id v2 = (void (*)(void, uint64_t))v0[12];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10055AA38(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 216) = a8;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = v12;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  *(void *)(v8 + 72) = a1;
  *(void *)(v8 + 80) = a4;
  uint64_t v9 = *a2;
  *(void *)(v8 + 120) = v13;
  *(void *)(v8 + 128) = v9;
  uint64_t v10 = a3[1];
  *(void *)(v8 + 136) = *a3;
  *(void *)(v8 + 144) = v10;
  return _swift_task_switch(sub_10055AA7C, 0, 0);
}

uint64_t sub_10055AA7C()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v5 = self;
  swift_bridgeObjectRetain();
  id v6 = [v5 sharedConfiguration];
  uint64_t v7 = sub_1000963CC(0, &qword_1009081B0);
  v0[2] = v6;
  v0[5] = v7;
  v0[6] = &off_1008B8A68;
  sub_1000C0814(v2, v1, v4, v0 + 2, v3);
  v0[19] = v8;
  uint64_t v10 = v8;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v11 = *(void *)(v10 + 16);
  v0[20] = v11;
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v10 + 32);
  id v13 = *(id *)(v10 + 40);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0 || !_CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v14 = (void *)v0[12];
    v0[21] = v13;
    v0[22] = 1;
    if (v14)
    {
      [v14 floatValue];
      uint64_t v16 = v15;
      uint64_t v17 = (void *)v0[13];
      if (v17)
      {
LABEL_9:
        id v18 = [v17 integerValue];
        char v19 = v0[13] == 0;
LABEL_12:
        BOOL v20 = v0[12] == 0;
        v0[7] = v12;
        uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v23 = v22;
        v0[23] = v22;
        uint64_t v24 = (void *)swift_task_alloc();
        v0[24] = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_10055ADA0;
        uint64_t v26 = v0[17];
        uint64_t v25 = v0[18];
        return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(v26, v25, v16 | ((unint64_t)v20 << 32), (uint64_t)v18, v19, v21, v23, 0xD000000000000016);
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (void *)v0[13];
      if (v17) {
        goto LABEL_9;
      }
    }
    id v18 = 0;
    char v19 = 1;
    goto LABEL_12;
  }

LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v28 = v0[17];
  uint64_t v27 = v0[18];
  uint64_t v29 = v0[16];
  uint64_t v30 = (void *)v0[9];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C7C94((uint64_t)_swiftEmptyArrayStorage, v28, v27, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  void *v30 = v29;
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_10055ADA0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10055B328;
  }
  else
  {
    uint64_t v4 = sub_10055AEF8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055AEF8()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 112);
  unint64_t v3 = *(void *)(v0 + 120);
  id v5 = *(id *)(v0 + 168);
  swift_bridgeObjectRetain();
  uint64_t v6 = (char **)sub_1005631E8(v1, (uint64_t)v5, v4, v3);
  uint64_t v7 = *(void **)(v0 + 168);
  if (v2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_14:
    return v8();
  }
  uint64_t v9 = v6;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v10 = v9[2];
  if (v10)
  {
    *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = v9 + 7;
    uint64_t v9 = &selRef_resolveConflicts_error_;
    do
    {
      uint64_t v12 = *((void *)v11 - 3);
      int v13 = *v11;
      v11 += 8;
      id v14 = objc_allocWithZone((Class)REMGrocerySuggestedSection);
      swift_bridgeObjectRetain();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      LODWORD(v16) = v13;
      [v14 initWithLabelIndex:v12 sectionCanonicalName:v15 confidenceScore:v16];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v7 = *(void **)(*(void *)(v0 + 64) + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v10;
    }
    while (v10);
    unint64_t v17 = *(void *)(v0 + 64);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 152);
  if (v18 == *(void *)(v0 + 160))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v0 + 136);
    uint64_t v23 = *(void *)(v0 + 144);
    uint64_t v25 = *(void *)(v0 + 128);
    uint64_t v26 = *(void **)(v0 + 72);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C7C94(v17, v24, v23, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v26 = v25;
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_14;
  }
  if (v18 >= *(void *)(v19 + 16))
  {
    __break(1u);
LABEL_18:
    uint64_t v29 = v9;
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
  uint64_t v20 = v19 + 16 * v18;
  uint64_t v7 = *(void **)(v20 + 32);
  uint64_t v9 = *(char ***)(v20 + 40);
  if (v17 >> 62) {
    goto LABEL_18;
  }
  uint64_t v21 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v22 = v9;
  if (v21)
  {
LABEL_12:

    goto LABEL_13;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 168) = v9;
  *(void *)(v0 + 176) = v18 + 1;
  char v31 = *(void **)(v0 + 96);
  if (!v31)
  {
    uint64_t v33 = 0;
    char v34 = *(void **)(v0 + 104);
    if (v34) {
      goto LABEL_21;
    }
LABEL_23:
    id v35 = 0;
    char v36 = 1;
    goto LABEL_24;
  }
  [v31 floatValue];
  uint64_t v33 = v32;
  char v34 = *(void **)(v0 + 104);
  if (!v34) {
    goto LABEL_23;
  }
LABEL_21:
  id v35 = [v34 integerValue];
  char v36 = *(void *)(v0 + 104) == 0;
LABEL_24:
  BOOL v37 = *(void *)(v0 + 96) == 0;
  *(void *)(v0 + 56) = v7;
  uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v40 = v39;
  *(void *)(v0 + 184) = v39;
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_10055ADA0;
  uint64_t v43 = *(void *)(v0 + 136);
  uint64_t v42 = *(void *)(v0 + 144);
  return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(v43, v42, v33 | ((unint64_t)v37 << 32), (uint64_t)v35, v36, v38, v40, 0xD000000000000016);
}

uint64_t sub_10055B328()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10055B490(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = _s10PredicatesOMa_1();
  __chkstk_darwin(v6);
  uint64_t v8 = (unint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v9 = swift_allocObject();
  long long v29 = xmmword_10077A530;
  *(_OWORD *)(v9 + 16) = xmmword_10077A530;
  *(void *)(v9 + 32) = a2;
  unint64_t v30 = v9;
  specialized Array._endMutation()();
  *uint64_t v8 = v30;
  swift_storeEnumTagMultiPayload();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v29;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v30 = inited;
  specialized Array._endMutation()();
  unint64_t v11 = v30;
  id v12 = a2;
  int v13 = (void *)sub_100535B3C();
  id v14 = (void *)sub_1003BD0F4(v11, 0, 0, (uint64_t)v13);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v14 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    sub_1003DC140((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    return;
  }
  *(void *)&long long v29 = a3;
  unint64_t v30 = v16;
  sub_100094134(&qword_100910160);
  sub_1000967F4((unint64_t *)&qword_10090A988, &qword_100910160);
  unint64_t v17 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1003DC140((uint64_t)v8, (uint64_t (*)(void))_s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  if (!(v17 >> 62))
  {
    if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v12];
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v17 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v18 = (void **)v29;
  }
  else
  {
    unint64_t v18 = (void **)v29;
    if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v19 = *(id *)(v17 + 32);
  }
  swift_bridgeObjectRelease();
  id v20 = [v19 groceryLocalCorrectionsAsData];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    sub_1000963CC(0, &qword_100914A20);
    static REMJSONRepresentable.fromJSONData(_:)();
    sub_100097F34(v22, v24);
    uint64_t v25 = (void *)v30;
    unint64_t v18 = (void **)v29;
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v18;
  uint64_t v27 = *v18;
  *uint64_t v26 = v25;
}

void sub_10055B8E4(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t sub_10055B978(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100094134(&qword_100909BE0);
  __n128 v12 = __chkstk_darwin(v11 - 8);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(__n128))(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider))(v12);
  if (!v5)
  {
    uint64_t v16 = result;
    type metadata accessor for RDGroceryOperationSuggestConversionToGroceryList();
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 2;
    *(void *)(v17 + 24) = a3;
    *(void *)(v17 + 32) = v16;
    *(void *)(v17 + 40) = sub_10055BB0C;
    *(void *)(v17 + 48) = 0;
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
    id v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v17;
    v19[5] = a1;
    v19[6] = a4;
    v19[7] = a5;
    id v20 = a3;
    id v21 = a1;
    swift_retain();
    sub_1002BBD8C((uint64_t)v14, (uint64_t)&unk_10091CDD8, (uint64_t)v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_10055BB0C(uint64_t a1, void (*a2)(char *, uint64_t))
{
  return sub_100742C34(a1, a2, 0xD000000000000022, 0x80000001007D8320);
}

uint64_t sub_10055BB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  id v9 = (void *)swift_task_alloc();
  v7[4] = v9;
  *id v9 = v7;
  v9[1] = sub_10055BBDC;
  return sub_1005C1904(a5);
}

uint64_t sub_10055BBDC(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 40) = a1 & 1;
    return _swift_task_switch(sub_10055BD2C, 0, 0);
  }
}

uint64_t sub_10055BD2C()
{
  (*(void (**)(void, void))(v0 + 16))(*(unsigned __int8 *)(v0 + 40), 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10055BE28(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

uint64_t sub_10055BE98(uint64_t a1)
{
  sub_10010B4E8(v1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v6);
  uint64_t v5 = a1;
  return sub_1003B5ADC((uint64_t)v6, (uint64_t)sub_10056CCA8, (uint64_t)v4);
}

void sub_10055C154(void *a1, void *a2)
{
  id v5 = sub_1003B08C0((unint64_t)a1);
  if (!v2)
  {
    id v6 = v5;
    if (v5)
    {
      type metadata accessor for RDGroceryOperationQueue();

      id v21 = 0;
      if ([a1 save:&v21])
      {
        uint64_t v7 = qword_1009078C0;
        id v8 = v21;
        if (v7 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_10008E2DC(v9, (uint64_t)qword_10091CCF0);
        id v10 = a2;
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v11, v12))
        {

          return;
        }
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        id v20 = (void *)swift_slowAlloc();
        id v21 = v10;
        *(_DWORD *)uint64_t v13 = 138543362;
        id v14 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v20 = a2;

        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Inserted grocery operation queue item for determine whether to suggest to convert this list into a grocery list {listObjectID: %{public}@}", v13, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v19 = v21;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      if (qword_1009078C0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_10091CCF0);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipped inserting grocery operation queue item for downloading grocery model assets from Trial because there are no active CloudKit accounts.", v18, 2u);
        swift_slowDealloc();
      }
    }
  }
}

void sub_10055C4E8(void *a1, void (*a2)(void, id), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v81 = a2;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  __chkstk_darwin(v9);
  id v78 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v76 = *(void *)(v11 - 8);
  uint64_t v77 = v11;
  __chkstk_darwin(v11);
  uint64_t v75 = (BOOL *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)&v70 - v19;
  if (qword_100907B10 != -1) {
    swift_once();
  }
  id v21 = swift_retain();
  id v73 = a1;
  id v22 = sub_10034A86C(v21);
  swift_release();
  if (!v22)
  {
    uint64_t v41 = self;
    NSString v42 = String._bridgeToObjectiveC()();
    id v43 = [v41 internalErrorWithDebugDescription:v42];

    v81(0, v43);
    return;
  }
  id v74 = v22;
  sub_1000963CC(0, (unint64_t *)&qword_100908178);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v24 = [ObjCClassFromMetadata daemonUserDefaults];
  [v24 setAutomaticSecondaryGroceryLocalesLastModifiedDate:0];

  id v25 = [ObjCClassFromMetadata daemonUserDefaults];
  [v25 setAutomaticSecondaryGroceryLocales:0];

  uint64_t v72 = a3;
  if (a4)
  {
    int64_t v26 = *(void *)(a4 + 16);
    if (v26)
    {
      uint64_t v71 = v4;
      id v88 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n();
      sub_1001DE058(0, v26, 0);
      uint64_t v27 = v16 + 16;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      uint64_t v29 = *(unsigned __int8 *)(v16 + 80);
      uint64_t v70 = a4;
      uint64_t v30 = a4 + ((v29 + 32) & ~v29);
      uint64_t v83 = *(void *)(v16 + 72);
      int v84 = v28;
      uint64_t v82 = (void (**)(char *, uint64_t))(v16 + 8);
      do
      {
        unsigned int v32 = v85;
        uint64_t v31 = v86;
        uint64_t v33 = v27;
        v84(v85, v30, v86);
        uint64_t v34 = Locale.identifier.getter();
        uint64_t v36 = v35;
        (*v82)(v32, v31);
        BOOL v37 = v88;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE058(0, v37[2] + 1, 1);
          BOOL v37 = v88;
        }
        unint64_t v39 = v37[2];
        unint64_t v38 = v37[3];
        uint64_t v27 = v33;
        if (v39 >= v38 >> 1)
        {
          sub_1001DE058(v38 > 1, v39 + 1, 1);
          uint64_t v27 = v33;
          BOOL v37 = v88;
        }
        v37[2] = v39 + 1;
        uint64_t v40 = &v37[2 * v39];
        id v40[4] = v34;
        v40[5] = v36;
        v30 += v83;
        --v26;
      }
      while (v26);
      uint64_t v44 = v70;
      uint64_t v5 = v71;
      uint64_t v45 = v70;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      uint64_t v44 = a4;
      BOOL v37 = _swiftEmptyArrayStorage;
      uint64_t v45 = v44;
    }
  }
  else
  {
    sub_10040D448(0, v15);
    uint64_t v46 = v86;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v86) == 1)
    {
      sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_10090FDF0);
      BOOL v37 = 0;
      uint64_t v45 = 0;
    }
    else
    {
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v47(v20, v15, v46);
      sub_100094134(&qword_10090F628);
      unint64_t v48 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_100776E40;
      id v50 = v20;
      uint64_t v45 = v49;
      v47((char *)(v49 + v48), v50, v46);
      BOOL v37 = 0;
    }
    uint64_t v44 = 0;
  }
  uint64_t v51 = (void (*)(uint64_t, void))v81;
  type metadata accessor for REMAnalyticsManager();
  static REMAnalyticsManager.shared.getter();
  uint64_t v53 = v75;
  uint64_t v52 = v76;
  *uint64_t v75 = v44 == 0;
  *((void *)v53 + 1) = v37;
  uint64_t v54 = v77;
  (*(void (**)(BOOL *, void, uint64_t))(v52 + 104))(v53, enum case for REMAnalyticsEvent.groceryAdditionalLanguages(_:), v77);
  REMAnalyticsManager.post(event:)();
  swift_release();
  (*(void (**)(BOOL *, uint64_t))(v52 + 8))(v53, v54);
  uint64_t v55 = v78;
  Date.init()();
  type metadata accessor for RDSecondaryGroceryLocalesInfo();
  uint64_t v56 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v56 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate, v55, v80);
  *(void *)(v56 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales) = v44;
  swift_bridgeObjectRetain();
  uint64_t v57 = swift_retain();
  id v58 = v74;
  sub_100551FF4(v57);
  if (v5)
  {

    swift_release_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    [v58 updateChangeCount];
    id v88 = 0;
    if (![v73 save:&v88])
    {
      unint64_t v68 = v58;
      unsigned int v69 = v88;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      return;
    }
    uint64_t v59 = qword_1009078C0;
    uint64_t v60 = v88;
    if (v59 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_10008E2DC(v61, (uint64_t)qword_10091CCF0);
    swift_bridgeObjectRetain();
    NSString v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      unint64_t v64 = (uint8_t *)swift_slowAlloc();
      unint64_t v65 = (void *)swift_slowAlloc();
      uint64_t v86 = v45;
      id v88 = v65;
      uint64_t v71 = 0;
      *(_DWORD *)unint64_t v64 = 136446210;
      uint64_t v66 = sub_10040DC6C(v44);
      uint64_t v87 = sub_1000C51B8(v66, v67, (uint64_t *)&v88);
      uint64_t v51 = (void (*)(uint64_t, void))v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "set secondary grocery localeIDs: %{public}s", v64, 0xCu);
      swift_arrayDestroy();
      uint64_t v45 = v86;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v51(v45, 0);
    swift_release();
  }
  swift_bridgeObjectRelease();
}

void sub_10055CEA8(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    type metadata accessor for Locale();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_10055CF44(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = _swiftEmptyArrayStorage;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = _swiftEmptyArrayStorage;
  id v5 = [v2 personHandle];
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10055D38C(v5, v2, v4, v3);
  }
  id v7 = [v2 aliases];
  if (v7)
  {
    id v8 = v7;
    sub_1000963CC(0, &qword_10091CDB8);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      goto LABEL_15;
    }
  }
  if (v10 < 1)
  {
    __break(1u);
LABEL_25:
    swift_once();
    goto LABEL_20;
  }
  for (uint64_t i = 0; i != v10; ++i)
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v9 + 8 * i + 32);
    }
    uint64_t v13 = v12;
    sub_10055D38C(v12, v2, v4, v3);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(void *)(*(void *)(v3 + 16) + 16) || (swift_beginAccess(), *(void *)(*(void *)(v4 + 16) + 16)))
  {
    swift_beginAccess();
    id v14 = objc_allocWithZone((Class)REMContactRepresentation);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v17 = [v14 initWithPhones:isa emails:v16];
    swift_release();
    swift_release();

    goto LABEL_18;
  }
  if (qword_1009078B8 != -1) {
    goto LABEL_25;
  }
LABEL_20:
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10091CCD8);
  uint64_t v19 = v2;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    unint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)id v22 = 138412290;
    id v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v19;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "INPerson has no phone numbers or emails. Skipping {person: %@}", v22, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();

    id v20 = v19;
  }

  swift_release();
  id v17 = 0;
LABEL_18:
  *a2 = v17;
}

void sub_10055D38C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = [a1 value];
  if (!v8)
  {
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_10091CCD8);
    id v26 = a2;
    id v27 = a1;
    id v40 = v26;
    id v17 = v27;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412546;
      id v29 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v40;

      *(_WORD *)(v20 + 12) = 2112;
      id v30 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28[1] = v17;

      id v24 = "INPerson alias has missing value. Skipping {person: %@, handle: %@}";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  unint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  id v13 = [a1 type];
  if (v13 == (id)2)
  {
    uint64_t v31 = (void **)(a4 + 16);
  }
  else
  {
    if (v13 != (id)1)
    {
      if (v13)
      {
        swift_bridgeObjectRelease();
        if (qword_1009078B8 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        sub_10008E2DC(v37, (uint64_t)qword_10091CCD8);
        id v40 = a1;
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v38))
        {
          unint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v39 = 134349056;
          [v40 type];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v18, v38, "notifyOfInteraction: unknown INPersonHandleType: %{public}ld", v39, 0xCu);
          goto LABEL_26;
        }

        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      if (qword_1009078B8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_10091CCD8);
      id v15 = a2;
      id v16 = a1;
      id v40 = v15;
      id v17 = v16;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        os_log_type_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138412546;
        id v22 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v21 = v40;

        *(_WORD *)(v20 + 12) = 2112;
        id v23 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v21[1] = v17;

        id v24 = "INPerson has unknown alias type. Skipping {person: %@, handle: %@}";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v18, v19, v24, (uint8_t *)v20, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_26:
        swift_slowDealloc();

        return;
      }
LABEL_14:

LABEL_28:

      return;
    }
    uint64_t v31 = (void **)(a3 + 16);
  }
  swift_beginAccess();
  unsigned int v32 = *v31;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v31 = v32;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unsigned int v32 = sub_100308F88(0, v32[2] + 1, 1, v32);
    *uint64_t v31 = v32;
  }
  unint64_t v35 = v32[2];
  unint64_t v34 = v32[3];
  if (v35 >= v34 >> 1)
  {
    unsigned int v32 = sub_100308F88((void *)(v34 > 1), v35 + 1, 1, v32);
    *uint64_t v31 = v32;
  }
  v32[2] = v35 + 1;
  uint64_t v36 = &v32[2 * v35];
  v36[4] = v10;
  v36[5] = v12;
  swift_endAccess();
}

void sub_10055DA38(char a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, void, void))(a4 + 16))(a4, a1 & 1, a2 & 1);
}

uint64_t sub_10055DB8C(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  _Block_copy(v7);
  id v11 = a1;
  a5(v8, v10, v11, v7);
  _Block_release(v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

void sub_10055DCF0(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10055DE44()
{
  sub_10010B4E8(v0 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v2);
  return sub_1003B5ADC((uint64_t)v2, (uint64_t)sub_10055E064, 0);
}

void sub_10055E064(void *a1)
{
  id v3 = sub_1003B08C0((unint64_t)a1);
  if (!v1)
  {
    uint64_t v4 = v3;
    if (v3)
    {
      type metadata accessor for RDGroceryOperationQueue();

      id v16 = 0;
      if ([a1 save:&v16])
      {
        uint64_t v5 = qword_1009078C0;
        id v6 = v16;
        if (v5 != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        sub_10008E2DC(v7, (uint64_t)qword_10091CCF0);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "Inserted grocery operation queue item for downloading grocery model assets from Trial", v10, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        id v15 = v16;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      if (qword_1009078C0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10008E2DC(v11, (uint64_t)qword_10091CCF0);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Skipped inserting grocery operation queue item for downloading grocery model assets from Trial because there are no active CloudKit accounts.", v14, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_10055E4BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_10010B4E8(v4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v16);
  v11[2] = a1;
  char v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = ObjectType;
  return sub_1003B5ADC((uint64_t)v16, (uint64_t)sub_10056CAFC, (uint64_t)v11);
}

uint64_t sub_10055E72C(uint64_t a1, unint64_t a2, int a3, void (*a4)(uint64_t, void))
{
  sub_10055E7F8(a2, a3, a1);
  if (v4)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = swift_bridgeObjectRetain();
    a4(v11, 0);
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10055E7F8(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v97 = a3;
  LODWORD(v3) = a2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v86 - v10;
  Date.init()();
  unint64_t v103 = (unint64_t)_swiftEmptyArrayStorage;
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_10008E2DC(v12, (uint64_t)qword_10091CCD8);
  swift_bridgeObjectRetain_n();
  uint64_t v95 = v13;
  uint64_t v14 = Logger.logObject.getter();
  int v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
  unint64_t v99 = a1;
  if (v16)
  {
    int v88 = v15;
    os_log_t v90 = v14;
    uint64_t v91 = v8;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    v102[0] = v87;
    *(_DWORD *)uint64_t v17 = 136446466;
    LODWORD(v92) = v3;
    uint64_t v18 = Bool.yesno.getter();
    id v101 = (void *)sub_1000C51B8(v18, v19, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v89 = (uint8_t *)v17;
    *(_WORD *)(v17 + 12) = 2082;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v20)
    {
      id v101 = _swiftEmptyArrayStorage;
      sub_1001DE058(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
      {
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v93 = v11;
      uint64_t v94 = v6;
      uint64_t v86 = v5;
      uint64_t v21 = 0;
      id v22 = v101;
      unint64_t v23 = a1 & 0xC000000000000001;
      do
      {
        if (v23) {
          id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v24 = *(id *)(a1 + 8 * v21 + 32);
        }
        uint64_t v25 = v24;
        id v26 = [v24 stringRepresentation:v86];
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;

        id v101 = v22;
        unint64_t v31 = v22[2];
        unint64_t v30 = v22[3];
        if (v31 >= v30 >> 1)
        {
          sub_1001DE058(v30 > 1, v31 + 1, 1);
          id v22 = v101;
        }
        ++v21;
        v22[2] = v31 + 1;
        unsigned int v32 = &v22[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
        a1 = v99;
      }
      while (v20 != v21);
      uint64_t v5 = v86;
      uint64_t v11 = v93;
      uint64_t v6 = v94;
    }
    unint64_t v34 = v89;
    uint64_t v35 = Array.description.getter();
    unint64_t v3 = v36;
    swift_bridgeObjectRelease();
    id v101 = (void *)sub_1000C51B8(v35, v3, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v37 = v90;
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v88, "validatePhantomObjects: Validating {shouldRepair: %{public}s, childrenObjectIDs: %{public}s}", v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    LOBYTE(v3) = v92;
    uint64_t v8 = v91;
  }
  else
  {

    uint64_t v33 = swift_bridgeObjectRelease_n();
  }
  __chkstk_darwin(v33);
  uint64_t v38 = v97;
  uint64_t v39 = (uint64_t)v98;
  *(&v86 - 6) = a1;
  *(&v86 - 5) = v38;
  *(&v86 - 4) = (uint64_t)&v103;
  *((unsigned char *)&v86 - 24) = v3 & 1;
  *(&v86 - 2) = (uint64_t)v96;
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  uint64_t v17 = v39;
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  int v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v41, (os_log_type_t)v42))
  {
    swift_bridgeObjectRelease_n();

    os_log_type_t v63 = *(void (**)(char *, uint64_t))(v6 + 8);
    v63(v8, v5);
    v63(v11, v5);
LABEL_51:
    swift_beginAccess();
    return v103;
  }
  LODWORD(v95) = v42;
  os_log_t v96 = v41;
  id v43 = v8;
  uint64_t v44 = swift_slowAlloc();
  uint64_t v92 = swift_slowAlloc();
  v102[0] = v92;
  *(_DWORD *)uint64_t v44 = 68158722;
  LODWORD(v101) = 4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v44 + 8) = 2048;
  Date.rem_elapsedInMilliseconds.getter();
  id v101 = v45;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v46 = *(char **)(v6 + 8);
  v6 += 8;
  uint64_t v86 = v5;
  uint64_t v91 = v46;
  ((void (*)(char *, uint64_t))v46)(v43, v5);
  *(_WORD *)(v44 + 18) = 2082;
  uint64_t v47 = Bool.yesno.getter();
  id v101 = (void *)sub_1000C51B8(v47, v48, v102);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  unint64_t v49 = v99;
  swift_bridgeObjectRelease();
  NSString v98 = (uint8_t *)v44;
  *(_WORD *)(v44 + 28) = 2082;
  if (!(v49 >> 62))
  {
    uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_23;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_23:
  uint64_t v97 = v17;
  uint64_t v93 = v11;
  uint64_t v94 = v6;
  if (v50)
  {
    id v101 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE058(0, v50 & ~(v50 >> 63), 0);
    if (v50 < 0)
    {
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v51 = 0;
    uint64_t v52 = v101;
    unint64_t v53 = v99 & 0xC000000000000001;
    do
    {
      if (v53) {
        id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v54 = *(id *)(v99 + 8 * v51 + 32);
      }
      uint64_t v55 = v54;
      id v56 = [v54 stringRepresentation];
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;

      id v101 = v52;
      unint64_t v61 = v52[2];
      unint64_t v60 = v52[3];
      if (v61 >= v60 >> 1)
      {
        sub_1001DE058(v60 > 1, v61 + 1, 1);
        uint64_t v52 = v101;
      }
      ++v51;
      v52[2] = v61 + 1;
      NSString v62 = &v52[2 * v61];
      v62[4] = v57;
      v62[5] = v59;
    }
    while (v50 != v51);
    uint64_t v11 = v93;
  }
  unint64_t v64 = v98;
  uint64_t v65 = Array.description.getter();
  unint64_t v67 = v66;
  swift_bridgeObjectRelease();
  id v101 = (void *)sub_1000C51B8(v65, v67, v102);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *((_WORD *)v64 + 19) = 2082;
  swift_beginAccess();
  unint64_t v68 = v103;
  if (!(v103 >> 62))
  {
    uint64_t v69 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v69) {
      goto LABEL_36;
    }
LABEL_49:
    swift_bridgeObjectRelease();
LABEL_50:
    id v81 = v98;
    uint64_t v82 = Array.description.getter();
    unint64_t v84 = v83;
    swift_bridgeObjectRelease();
    id v100 = (void *)sub_1000C51B8(v82, v84, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v85 = v96;
    _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v95, "validatePhantomObjects: Done validating {elapsed: %.*f ms, shouldRepair: %{public}s, childrenObjectIDs: %{public}s, phantomIDs: %{public}s}", v81, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v91)(v11, v86);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
  if (!v69) {
    goto LABEL_49;
  }
LABEL_36:
  id v100 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE058(0, v69 & ~(v69 >> 63), 0);
  if ((v69 & 0x8000000000000000) == 0)
  {
    uint64_t v70 = 0;
    uint64_t v71 = v100;
    do
    {
      if ((v68 & 0xC000000000000001) != 0) {
        id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v72 = *(id *)(v68 + 8 * v70 + 32);
      }
      id v73 = v72;
      id v74 = [v72 stringRepresentation];
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v77 = v76;

      id v100 = v71;
      unint64_t v79 = v71[2];
      unint64_t v78 = v71[3];
      if (v79 >= v78 >> 1)
      {
        sub_1001DE058(v78 > 1, v79 + 1, 1);
        uint64_t v71 = v100;
      }
      ++v70;
      v71[2] = v79 + 1;
      uint64_t v80 = &v71[2 * v79];
      v80[4] = v75;
      v80[5] = v77;
    }
    while (v69 != v70);
    swift_bridgeObjectRelease();
    uint64_t v11 = v93;
    goto LABEL_50;
  }
LABEL_53:
  __break(1u);
  return result;
}

void sub_10055F300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_10055F3A8(void *a1, void *a2)
{
  sub_10055F410(a2, a1);
}

uint64_t sub_10055F410(void *a1, void *a2)
{
  id v43 = a2;
  id v46 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v46);
  uint64_t v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar.Component();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  int v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v48 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.day(_:), v5);
  if (a1 && [a1 integerValue] == (id)0x8000000000000000) {
    __break(1u);
  }
  uint64_t v17 = v48;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v18 = *(int *)(sub_100094134(&qword_100916950) + 48);
  sub_1000BF710((uint64_t)v15, (uint64_t)v4, (uint64_t *)&unk_100909A40);
  v4[v18] = 1;
  swift_storeEnumTagMultiPayload();
  unint64_t v19 = (void *)sub_10038F1F0();
  sub_1003DC140((uint64_t)v4, _s10PredicatesOMa);
  uint64_t v20 = (uint64_t)v47;
  uint64_t v21 = sub_1005518F0((uint64_t)v19, (unint64_t *)&qword_10090B040);
  if (v20)
  {

    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v17, v44);
  }
  else
  {
    unint64_t v23 = (void *)v21;

    id v24 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v23];
    [v24 setResultType:1];
    id v49 = 0;
    id v25 = [v43 executeRequest:v24 error:&v49];
    id v26 = v49;
    if (v25)
    {
      id v27 = v25;
      *((void *)&v52 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
      *(void *)&long long v51 = v27;
      sub_1000963CC(0, (unint64_t *)&unk_10090B030);
      id v28 = v26;
      throwingCast<A>(_:as:failureMessage:)();
      uint64_t v29 = v48;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v51);
      id v31 = v50;
      if ([v50 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v51 = 0u;
        long long v52 = 0u;
      }
      uint64_t v32 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000966BC((uint64_t)&v51, &qword_100908190);
      id v33 = v50;
      id v46 = self;
      sub_100094134(&qword_10090AF50);
      uint64_t inited = swift_initStackObject();
      uint64_t v47 = v15;
      uint64_t v35 = inited;
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)&long long v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v51 + 1) = v36;
      AnyHashable.init<A>(_:)();
      *(void *)(v35 + 96) = v32;
      *(void *)(v35 + 72) = v33;
      sub_1002EE418(v35);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_10077A530;
      id v39 = v43;
      *(void *)(v38 + 32) = v43;
      *(void *)&long long v51 = v38;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v40 = v39;
      Class v41 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v46 mergeChangesFromRemoteContextSave:isa intoContexts:v41];

      sub_1000966BC((uint64_t)v47, (uint64_t *)&unk_100909A40);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v29, v44);
    }
    else
    {
      id v30 = v49;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v48, v44);
    }
  }
}

void sub_10055FC58(void *a1, void *a2, void (*a3)(void), uint64_t a4, uint8_t *a5)
{
  uint64_t v47 = a4;
  unint64_t v48 = a5;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077A530;
  *(void *)(v12 + 32) = a2;
  id v49 = (id)v12;
  specialized Array._endMutation()();
  unint64_t v13 = (unint64_t)v49;
  id v14 = a2;
  int v15 = (void *)sub_1003AD42C(v13, 0, 1);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, &qword_10090ABC0);
  id v16 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v17 = [(id)swift_getObjCClassFromMetadata() entity];
  [v16 setEntity:v17];

  [v16 setAffectedStores:0];
  [v16 setPredicate:v15];

  unint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v5)
  {
LABEL_2:

    return;
  }
  unint64_t v19 = v18;
  uint64_t v20 = v48;
  id v46 = a3;
  if (!(v18 >> 62))
  {
    uint64_t v21 = a1;
    if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    if (qword_1009078B8 == -1)
    {
LABEL_17:
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E2DC(v38, (uint64_t)qword_10091CCD8);
      id v39 = v14;
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        unint64_t v48 = v42;
        id v49 = v39;
        *(_DWORD *)uint64_t v42 = 138412290;
        id v43 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v45 = v39;

        _os_log_impl((void *)&_mh_execute_header, v40, v41, "permanentlyHideReminders: Failed to get account for %@.", v48, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v44 = v46;
      sub_10056CA3C();
      swift_allocError();
      v44();
      swift_errorRelease();
      goto LABEL_2;
    }
LABEL_23:
    swift_once();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v21 = a1;
  if (!v37) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v19 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_23;
  }
  id v22 = *(id *)(v19 + 32);
LABEL_8:
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_bridgeObjectRetain();
  id v25 = sub_100563350(v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_100127E24((uint64_t)v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 1, 1, v27);
  type metadata accessor for RDRecentlyDeletedInfo();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v26;
  sub_100096408((uint64_t)v11, v28 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t *)&unk_100909A40);
  id v29 = [v23 recentlyDeletedInfoAsData];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    sub_10056CA90(&qword_100911D58, (void (*)(uint64_t))type metadata accessor for RDRecentlyDeletedInfo);
    static REMJSONRepresentable.fromJSONData(_:)();
    sub_100097F34(v31, v33);
    sub_10058BEB4(v28);
    swift_release();
  }
  else
  {
    swift_retain();
  }
  uint64_t v34 = swift_retain();
  sub_100552258(v34, 1);
  swift_release();
  [v23 updateChangeCount];
  id v49 = 0;
  if ([v21 save:&v49])
  {
    id v35 = v49;
    ((void (*)(void))v46)(0);
  }
  else
  {
    id v36 = v49;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  swift_release();
  swift_release();
}

uint64_t sub_100560380()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v0 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.userInteractive(_:), v5);
  v10[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_10056CA90((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_10091CD08 = result;
  return result;
}

void sub_1005606B0(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v110 = a4;
  uint64_t v109 = a3;
  id v111 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v124 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100094134(&qword_100917380);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t KeyPath = swift_getKeyPath();
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v108 = v4;
  if (v12)
  {
    v122[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001DE118(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
    {
      __break(1u);
      goto LABEL_158;
    }
    uint64_t v118 = (uint8_t *)KeyPath;
    uint64_t v119 = inited;
    uint64_t v13 = 0;
    id v14 = (void *)v122[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(a1 + 8 * v13 + 32);
      }
      id v16 = v15;
      id v17 = [v15 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 0, 1, v18);

      v122[0] = (uint64_t)v14;
      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_1001DE118(v19 > 1, v20 + 1, 1);
        id v14 = (void *)v122[0];
      }
      ++v13;
      v14[2] = v20 + 1;
      sub_100096408((uint64_t)v9, (uint64_t)v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v20, (uint64_t *)&unk_100909E50);
    }
    while (v12 != v13);
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t KeyPath = (uint64_t)v118;
    uint64_t inited = v119;
  }
  else
  {
    id v14 = _swiftEmptyArrayStorage;
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v21 = sub_1003A036C(KeyPath, (uint64_t)v14);
  swift_release();
  *(void *)(inited + 32) = v21;
  *(void *)(inited + 40) = sub_1002F51CC(0);
  v122[0] = inited;
  specialized Array._endMutation()();
  id v22 = (void *)sub_1002F52FC(v122[0]);
  uint64_t v119 = sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v106 = v22;
  id v24 = [ObjCClassFromMetadata ic_objectsMatchingPredicate:v22 context:v111];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = sub_10056188C(v25);
  swift_bridgeObjectRelease();
  if (v26) {
    uint64_t inited = (uint64_t)v26;
  }
  else {
    uint64_t inited = (uint64_t)_swiftEmptyArrayStorage;
  }
  v122[0] = (uint64_t)_swiftEmptyArrayStorage;
  *(void *)&v121[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)inited >> 62))
  {
    a1 = *(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (a1) {
      goto LABEL_19;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    a1 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t KeyPath = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  a1 = _CocoaArrayWrapper.endIndex.getter();
  if (!a1) {
    goto LABEL_34;
  }
LABEL_19:
  if (a1 < 1)
  {
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  uint64_t v7 = 0;
  do
  {
    if ((inited & 0xC000000000000001) != 0) {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v27 = *(id *)(inited + 8 * v7 + 32);
    }
    uint64_t v28 = v27;
    id v29 = [objc_allocWithZone((Class)NSMutableDictionary) init];
    unsigned int v30 = [v28 isConnectedToAccountObject:v29];

    if (v30)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
    }
    else
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)&v121[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v121[0] & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    ++v7;
  }
  while (a1 != v7);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = v122[0];
  a1 = *(void *)&v121[0];
LABEL_35:
  swift_bridgeObjectRelease();
  unint64_t v31 = swift_bridgeObjectRetain();
  sub_100202CFC(v31);
  if (qword_1009078B8 != -1) {
    goto LABEL_102;
  }
  while (1)
  {
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = sub_10008E2DC(v32, (uint64_t)qword_10091CCD8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v107 = v33;
    uint64_t v12 = Logger.logObject.getter();
    LODWORD(inited) = static os_log_type_t.info.getter();
    BOOL v34 = os_log_type_enabled((os_log_t)v12, (os_log_type_t)inited);
    uint64_t v116 = KeyPath;
    if (v34)
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      v122[0] = v7;
      *(_DWORD *)id v35 = 136446210;
      uint64_t v118 = v35;
      if (!((unint64_t)a1 >> 62))
      {
        uint64_t v36 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_39;
      }
      goto LABEL_160;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_54:
    uint64_t v123 = _swiftEmptyArrayStorage;
    if ((unint64_t)KeyPath >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v53)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        unint64_t v71 = (unint64_t)_swiftEmptyArrayStorage;
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v53 = *(void *)((KeyPath & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v53) {
        goto LABEL_104;
      }
    }
    unint64_t v54 = 0;
    unint64_t v115 = KeyPath & 0xC000000000000001;
    uint64_t v113 = KeyPath & 0xFFFFFFFFFFFFFF8;
    uint64_t v112 = KeyPath + 32;
    uint64_t v118 = (uint8_t *)&type metadata for Any + 8;
    uint64_t v114 = v53;
LABEL_59:
    if (v115)
    {
      id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_63;
    }
    if (v54 < *(void *)(v113 + 16)) {
      break;
    }
LABEL_101:
    __break(1u);
LABEL_102:
    swift_once();
  }
  id v55 = *(id *)(v112 + 8 * v54);
LABEL_63:
  a1 = (uint64_t)v55;
  BOOL v56 = __OFADD__(v54, 1);
  unint64_t v57 = v54 + 1;
  if (v56)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unint64_t v117 = v57;
  id v58 = [(id)swift_getObjCClassFromObject() keyPathsForValuesAffectingEffectiveMinimumSupportedVersion];
  uint64_t v59 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v60 = v59 + 56;
  uint64_t v61 = 1 << *(unsigned char *)(v59 + 32);
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  else {
    uint64_t v62 = -1;
  }
  uint64_t v63 = v62 & *(void *)(v59 + 56);
  int64_t v64 = (unint64_t)(v61 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t KeyPath = 0;
  do
  {
    while (2)
    {
      if (v63)
      {
        v63 &= v63 - 1;
      }
      else
      {
        int64_t v65 = KeyPath + 1;
        if (__OFADD__(KeyPath, 1))
        {
          __break(1u);
          goto LABEL_99;
        }
        if (v65 >= v64)
        {
LABEL_57:
          swift_release();
          swift_bridgeObjectRelease();

          goto LABEL_58;
        }
        uint64_t v66 = *(void *)(v60 + 8 * v65);
        ++KeyPath;
        if (!v66)
        {
          uint64_t KeyPath = v65 + 1;
          if (v65 + 1 >= v64) {
            goto LABEL_57;
          }
          uint64_t v66 = *(void *)(v60 + 8 * KeyPath);
          if (!v66)
          {
            uint64_t KeyPath = v65 + 2;
            if (v65 + 2 >= v64) {
              goto LABEL_57;
            }
            uint64_t v66 = *(void *)(v60 + 8 * KeyPath);
            if (!v66)
            {
              uint64_t KeyPath = v65 + 3;
              if (v65 + 3 >= v64) {
                goto LABEL_57;
              }
              uint64_t v66 = *(void *)(v60 + 8 * KeyPath);
              if (!v66)
              {
                uint64_t KeyPath = v65 + 4;
                if (v65 + 4 >= v64) {
                  goto LABEL_57;
                }
                uint64_t v66 = *(void *)(v60 + 8 * KeyPath);
                if (!v66)
                {
                  int64_t v67 = v65 + 5;
                  if (v67 >= v64) {
                    goto LABEL_57;
                  }
                  uint64_t v66 = *(void *)(v60 + 8 * v67);
                  if (!v66)
                  {
                    while (1)
                    {
                      uint64_t KeyPath = v67 + 1;
                      if (__OFADD__(v67, 1)) {
                        goto LABEL_100;
                      }
                      if (KeyPath >= v64) {
                        goto LABEL_57;
                      }
                      uint64_t v66 = *(void *)(v60 + 8 * KeyPath);
                      ++v67;
                      if (v66) {
                        goto LABEL_89;
                      }
                    }
                  }
                  uint64_t KeyPath = v67;
                }
              }
            }
          }
        }
LABEL_89:
        uint64_t v63 = (v66 - 1) & v66;
      }
      swift_bridgeObjectRetain();
      NSString v68 = String._bridgeToObjectiveC()();
      id v69 = [(id)a1 valueForKey:v68];

      if (v69)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v121, 0, sizeof(v121));
      }
      uint64_t v7 = (uint64_t)&qword_100908190;
      sub_100096408((uint64_t)v121, (uint64_t)v122, &qword_100908190);
      if (!v122[3])
      {
        sub_1000966BC((uint64_t)v122, &qword_100908190);
LABEL_69:
        swift_bridgeObjectRelease();
        continue;
      }
      break;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_69;
    }
    uint64_t v7 = (uint64_t)v120;
    unsigned __int8 v70 = [v120 isConcealed];
    swift_bridgeObjectRelease();
  }
  while ((v70 & 1) == 0);
  swift_release();
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
LABEL_58:
  uint64_t KeyPath = v116;
  unint64_t v54 = v117;
  if (v117 != v114) {
    goto LABEL_59;
  }
  swift_bridgeObjectRelease();
  unint64_t v71 = (unint64_t)v123;
LABEL_105:
  unint64_t v72 = swift_bridgeObjectRetain();
  sub_100202CFC(v72);
  swift_retain();
  id v73 = Logger.logObject.getter();
  int v74 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v73, (os_log_type_t)v74))
  {

    swift_release_n();
    goto LABEL_124;
  }
  uint64_t v7 = swift_slowAlloc();
  uint64_t v75 = swift_slowAlloc();
  v122[0] = v75;
  *(_DWORD *)uint64_t v7 = 136446210;
  if ((v71 & 0x8000000000000000) != 0 || (v71 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v76 = *(void *)(v71 + 16);
  }
  if (!v76) {
    goto LABEL_123;
  }
  *(void *)&v121[0] = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v76 & ~(v76 >> 63), 0);
  if (v76 < 0) {
    goto LABEL_165;
  }
  uint64_t v116 = v75;
  LODWORD(v117) = v74;
  uint64_t v118 = (uint8_t *)v7;
  uint64_t v119 = (uint64_t)v73;
  uint64_t v77 = 0;
  uint64_t v78 = *(void *)&v121[0];
  do
  {
    if ((v71 & 0xC000000000000001) != 0) {
      id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v79 = *(id *)(v71 + 8 * v77 + 32);
    }
    uint64_t v80 = v79;
    id v81 = [v79 remObjectID];
    if (v81)
    {
      uint64_t v82 = v81;
      id v83 = [v81 description];

      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v86 = v85;
    }
    else
    {

      unint64_t v86 = 0xE300000000000000;
      uint64_t v84 = 7104878;
    }
    *(void *)&v121[0] = v78;
    unint64_t v88 = *(void *)(v78 + 16);
    unint64_t v87 = *(void *)(v78 + 24);
    if (v88 >= v87 >> 1)
    {
      sub_1001DE058(v87 > 1, v88 + 1, 1);
      uint64_t v78 = *(void *)&v121[0];
    }
    ++v77;
    *(void *)(v78 + 16) = v88 + 1;
    uint64_t v89 = v78 + 16 * v88;
    *(void *)(v89 + 32) = v84;
    *(void *)(v89 + 40) = v86;
  }
  while (v76 != v77);
  uint64_t v7 = (uint64_t)v118;
  id v73 = v119;
  LOBYTE(v74) = v117;
LABEL_123:
  uint64_t v90 = Array.description.getter();
  unint64_t v92 = v91;
  swift_bridgeObjectRelease();
  *(void *)&v121[0] = sub_1000C51B8(v90, v92, v122);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v74, "validatePhantomObjects: {objectsWithConcealedParent: %{public}s}", (uint8_t *)v7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_124:
  a1 = v124;
  v122[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t KeyPath = v124 >> 62;
  if (v124 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t inited = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t inited = *(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
  if (!inited)
  {
    uint64_t v94 = _swiftEmptyArrayStorage;
    goto LABEL_136;
  }
  if (inited < 1)
  {
LABEL_159:
    __break(1u);
LABEL_160:
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_39:
    LODWORD(v117) = inited;
    unint64_t v115 = v7;
    if (!v36) {
      goto LABEL_53;
    }
    *(void *)&v121[0] = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v36 & ~(v36 >> 63), 0);
    if ((v36 & 0x8000000000000000) == 0)
    {
      uint64_t v114 = v12;
      uint64_t v37 = 0;
      uint64_t v38 = *(void *)&v121[0];
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v39 = *(id *)(a1 + 8 * v37 + 32);
        }
        id v40 = v39;
        id v41 = [v39 remObjectID];
        if (v41)
        {
          uint64_t v42 = v41;
          id v43 = [v41 description];

          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v46 = v45;
        }
        else
        {

          unint64_t v46 = 0xE300000000000000;
          uint64_t v44 = 7104878;
        }
        *(void *)&v121[0] = v38;
        unint64_t v48 = *(void *)(v38 + 16);
        unint64_t v47 = *(void *)(v38 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_1001DE058(v47 > 1, v48 + 1, 1);
          uint64_t v38 = *(void *)&v121[0];
        }
        ++v37;
        *(void *)(v38 + 16) = v48 + 1;
        uint64_t v49 = v38 + 16 * v48;
        *(void *)(v49 + 32) = v44;
        *(void *)(v49 + 40) = v46;
      }
      while (v36 != v37);
      uint64_t KeyPath = v116;
      uint64_t v12 = v114;
LABEL_53:
      id v50 = v118;
      uint64_t v7 = Array.description.getter();
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
      *(void *)&v121[0] = sub_1000C51B8(v7, v52, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, (os_log_type_t)v117, "validatePhantomObjects: {disconnected: %{public}s}", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();

      goto LABEL_54;
    }
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
    return;
  }
  uint64_t v93 = (id *)(a1 + 32);
  do
  {
    if ([*v93 remObjectID])
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v93;
    --inited;
  }
  while (inited);
  uint64_t v94 = (void *)v122[0];
LABEL_136:
  swift_bridgeObjectRelease();
  sub_100200CE8((unint64_t)v94);
  if ((v110 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v122[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (KeyPath)
  {
    swift_bridgeObjectRetain();
    uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
    if (!v95) {
      goto LABEL_149;
    }
LABEL_139:
    if (v95 >= 1)
    {
      os_log_t v96 = (id *)(a1 + 32);
      do
      {
        if ([*v96 objectID])
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v122[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v96;
        --v95;
      }
      while (v95);
      unint64_t v97 = v122[0];
      goto LABEL_150;
    }
    goto LABEL_166;
  }
  uint64_t v95 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v95) {
    goto LABEL_139;
  }
LABEL_149:
  unint64_t v97 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_150:
  swift_bridgeObjectRelease_n();
  if (v97 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v104 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v104) {
      goto LABEL_163;
    }
LABEL_152:
    sub_1000963CC(0, (unint64_t *)&qword_100914150);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v99 = (uint64_t)v111;
    id v100 = [v111 _debug_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:isa];

    uint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    __chkstk_darwin(v102);
    *(&v105 - 4) = v101;
    *(&v105 - 3) = v99;
    *(&v105 - 2) = v97;
    uint64_t v103 = v108;
    NSManagedObjectContext.rem_performAndWait<A>(_:)();
    if (v103)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_152;
    }
LABEL_163:
    swift_bridgeObjectRelease();
  }
}

void *sub_10056188C(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        uint64_t v8 = *(void **)(v6 + 8 * v5);
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

id sub_100561A74(unint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = v3;
  if (a1 >> 62) {
    goto LABEL_51;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v9)
  {
    while (1)
    {
      if (v9 < 1) {
        goto LABEL_66;
      }
      unint64_t v59 = a3;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v4 = 0;
      a3 = a1;
      id v63 = a2;
      uint64_t v66 = v9;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(a3 + 8 * (void)v4 + 32);
        }
        uint64_t v12 = v11;
        id v67 = 0;
        id v13 = [a2 existingObjectWithID:v11 error:&v67];
        id v14 = v67;
        if (!v13)
        {
          id v21 = v67;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
          uint64_t v6 = 0;
          goto LABEL_17;
        }
        id v5 = v13;
        self;
        id v15 = (void *)swift_dynamicCastObjCClass();
        id v16 = v14;
        if (!v15)
        {

LABEL_17:
          if (qword_1009078B8 != -1) {
            swift_once();
          }
          uint64_t v22 = type metadata accessor for Logger();
          sub_10008E2DC(v22, (uint64_t)qword_10091CCD8);
          id v23 = v12;
          id v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = swift_slowAlloc();
            id v27 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v26 = 138543362;
            *(void *)(v26 + 4) = v23;
            *id v27 = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "repairPhantomObjects: Couldn't get an REMCDObject, skipping {moid: %{public}@}", (uint8_t *)v26, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            a3 = a1;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
LABEL_6:
          id v10 = (void *)v66;
          goto LABEL_7;
        }
        id v17 = [v15 remObjectID];
        if (v17)
        {
          uint64_t v18 = v17;
          id v19 = [v17 description];

          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          a2 = v20;
        }
        else
        {
          a2 = (void *)0xE300000000000000;
          uint64_t v65 = 7104878;
        }
        if ([v15 isConcealed])
        {
          if (qword_1009078B8 != -1) {
            swift_once();
          }
          uint64_t v28 = type metadata accessor for Logger();
          sub_10008E2DC(v28, (uint64_t)qword_10091CCD8);
          swift_bridgeObjectRetain();
          id v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            id v67 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136446210;
            swift_bridgeObjectRetain();
            *(void *)(v31 + 4) = sub_1000C51B8(v65, (unint64_t)a2, (uint64_t *)&v67);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "repairPhantomObjects: Attempted to repair a non-phantom object which is already concealed {remObjectID: %{public}s}", (uint8_t *)v31, 0xCu);
            swift_arrayDestroy();
            a3 = a1;
            swift_slowDealloc();
            swift_slowDealloc();

LABEL_43:
            a2 = v63;
            goto LABEL_6;
          }

          swift_bridgeObjectRelease_n();
LABEL_42:

          goto LABEL_43;
        }
        id v32 = [objc_allocWithZone((Class)NSMutableDictionary) init];
        unsigned __int8 v33 = [v15 isConnectedToAccountObject:v32];

        if ((v33 & 1) == 0) {
          break;
        }
LABEL_36:
        if (![v15 validateEffectiveMinimumSupportedVersionApplyingChange:0])
        {

          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        id v41 = [v63 managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion];
        id v42 = [v15 ic_permanentObjectID];
        [v41 addObject:v42];

        if (qword_1009078B8 != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        sub_10008E2DC(v43, (uint64_t)qword_10091CCD8);
        id v5 = v5;
        swift_bridgeObjectRetain();
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v60 = v6;
          uint64_t v46 = swift_slowAlloc();
          id v67 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v46 = 136446466;
          swift_bridgeObjectRetain();
          *(void *)(v46 + 4) = sub_1000C51B8(v65, (unint64_t)a2, (uint64_t *)&v67);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v46 + 12) = 2082;
          [v15 effectiveMinimumSupportedVersion];
          sub_1000D0164();
          uint64_t v47 = BinaryInteger.description.getter();
          *(void *)(v46 + 14) = sub_1000C51B8(v47, v48, (uint64_t *)&v67);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "repairPhantomObjects: Repaired effectiveMiniumSupportedVersion for {remObjectID: %{public}s, newValue: %{public}s}", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v6 = v60;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        BOOL v49 = __OFADD__(v62++, 1);
        a2 = v63;
        a3 = a1;
        id v10 = (void *)v66;
        if (v49) {
          goto LABEL_50;
        }
LABEL_7:
        uint64_t v4 = (char *)v4 + 1;
        if (v10 == v4)
        {
          id result = (id)swift_bridgeObjectRelease();
          a3 = v59;
          unint64_t v51 = v61;
          uint64_t v4 = v62;
          goto LABEL_53;
        }
      }
      id v34 = [(id)swift_getObjCClassFromObject() keyPathsForValuesAffectingEffectiveMinimumSupportedVersion];
      uint64_t v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v36 = v5;
      swift_bridgeObjectRetain();
      sub_100562DAC(v35, v15, v65, (unint64_t)a2);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      [v15 markForDeletion];
      if (qword_1009078B8 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_10008E2DC(v37, (uint64_t)qword_10091CCD8);
      swift_bridgeObjectRetain_n();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        id v67 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v40 + 4) = sub_1000C51B8(v65, (unint64_t)a2, (uint64_t *)&v67);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "repairPhantomObjects: Repaired markedForDeletion state for {remObjectID: %{public}s}", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a3 = a1;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (!__OFADD__(v61, 1)) {
        break;
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_52;
      }
    }
    ++v61;
    goto LABEL_36;
  }
LABEL_52:
  id result = (id)swift_bridgeObjectRelease();
  uint64_t v4 = 0;
  unint64_t v51 = 0;
LABEL_53:
  id v5 = v51;
  BOOL v49 = __OFADD__(v51, v4);
  uint64_t v52 = (uint64_t)v4 + (void)v51;
  if (v49)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_once();
    goto LABEL_56;
  }
  if (v52 <= 0) {
    return result;
  }
  if (qword_1009078B8 != -1) {
    goto LABEL_67;
  }
LABEL_56:
  uint64_t v53 = type metadata accessor for Logger();
  sub_10008E2DC(v53, (uint64_t)qword_10091CCD8);
  swift_bridgeObjectRetain_n();
  unint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 134218496;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v57 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v57 = *(void **)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v67 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2048;
    id v67 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 22) = 2048;
    id v67 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "repairPhantomObjects: Saving repaired objects... {inputCount: %ld, disconnectedCount: %ld, unsupportedCount: %ld}", (uint8_t *)v56, 0x20u);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v67 = 0;
  if ([a2 save:&v67]) {
    return v67;
  }
  id v58 = v67;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void sub_1005625C8(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v9 = self;
  id v10 = (void *)swift_allocObject();
  void v10[2] = a2;
  v10[3] = v8;
  v10[4] = v7;
  aBlock[4] = sub_10056CBB4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C9AE0;
  id v11 = _Block_copy(aBlock);
  id v12 = a2;
  swift_bridgeObjectRetain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(v9) = [v9 catchObjCException:v11 error:aBlock];
  _Block_release(v11);
  id v13 = aBlock[0];
  if (!v9)
  {
    id v14 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091CCD8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v8, v7, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "repairPhantomObjects: Unknown parent key to try to unset {key %{public}s, remObjectiD: %{public}s}", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_100562920(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 valueForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100096408((uint64_t)v6, (uint64_t)v7, &qword_100908190);
  if (v8)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    if (swift_dynamicCast())
    {
      [v5 updateChangeCount];
    }
  }
  else
  {
    sub_1000966BC((uint64_t)v7, &qword_100908190);
  }
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 setValue:0 forKey:v4];
}

uint64_t sub_100562A68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  NSString v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1000C75D4;
  return v6();
}

uint64_t sub_100562B34(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *id v5 = v4;
  v5[1] = sub_1000C75D4;
  return v7();
}

uint64_t sub_100562C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000966BC(a1, &qword_100909BE0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100562DAC(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 56);
  int64_t v24 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    unint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    v23[0] = *v20;
    v23[1] = v21;
    swift_bridgeObjectRetain();
    sub_1005625C8(v23, a2, a3, a4);
    if (v4)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v24) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    if (!v18)
    {
      int64_t v19 = v14 + 1;
      if (v14 + 1 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 2;
      if (v14 + 2 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18) {
        goto LABEL_14;
      }
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v19);
      if (v18)
      {
LABEL_14:
        int64_t v14 = v19;
        goto LABEL_15;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v24) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v9 + 8 * v22);
      v14 += 4;
      if (!v18) {
        break;
      }
    }
LABEL_15:
    unint64_t v12 = (v18 - 1) & v18;
  }
  while (1)
  {
    int64_t v14 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v14 >= v24) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v22;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100562F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  unint64_t v28 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v5 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    id v34 = _swiftEmptyArrayStorage;
    sub_1001DEB40(0, v5 & ~(v5 >> 63), 0);
    uint64_t result = sub_1000E1630(v4);
    uint64_t v31 = result;
    uint64_t v32 = v7;
    char v33 = v8 & 1;
    if (v5 < 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v4;
      uint64_t v27 = a3;
      do
      {
        while (1)
        {
          uint64_t v15 = v31;
          uint64_t v16 = v32;
          char v17 = v33;
          sub_1000E1A6C(v30, v31, v32, v33, v4);
          uint64_t v19 = v18;
          uint64_t v20 = v30[0];
          uint64_t v21 = v34;
          swift_bridgeObjectRetain();
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1001DEB40(0, v21[2] + 1, 1);
            uint64_t v21 = v34;
          }
          unint64_t v23 = v21[2];
          unint64_t v22 = v21[3];
          if (v23 >= v22 >> 1)
          {
            uint64_t result = sub_1001DEB40(v22 > 1, v23 + 1, 1);
            uint64_t v21 = v34;
          }
          v21[2] = v23 + 1;
          int64_t v24 = &v21[4 * v23];
          v24[4] = v19;
          v24[5] = a2;
          v24[6] = v27;
          v24[7] = v20;
          if (v28) {
            break;
          }
          uint64_t v4 = v26;
          sub_1000E1604(v15, v16, v17, v26);
          uint64_t v10 = v9;
          uint64_t v12 = v11;
          char v14 = v13;
          sub_1000E4EA4(v15, v16, v17);
          uint64_t v31 = v10;
          uint64_t v32 = v12;
          char v33 = v14 & 1;
          if (!--v5) {
            goto LABEL_17;
          }
        }
        uint64_t v4 = v26;
        if ((v17 & 1) == 0) {
          goto LABEL_20;
        }
        if (__CocoaDictionary.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100094134(&qword_10091CE20);
        os_log_type_t v25 = (void (*)(void *, void))Dictionary.Index._asCocoa.modify();
        __CocoaDictionary.formIndex(after:isUnique:)();
        v25(v30, 0);
        --v5;
      }
      while (v5);
LABEL_17:
      sub_1000E4EA4(v31, v32, v33);
      return (uint64_t)v34;
    }
  }
  return result;
}

void *sub_1005631E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_1001DE6F8(0, v6, 0);
    unint64_t v26 = *(void *)(a2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    uint64_t v27 = *(void *)(a2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    for (unint64_t i = (_DWORD *)(a1 + 56); ; i += 8)
    {
      uint64_t v10 = *((void *)i - 3);
      uint64_t v11 = *((void *)i - 2);
      unint64_t v12 = *((void *)i - 1);
      float v13 = *(float *)i;
      swift_bridgeObjectRetain();
      float v17 = sub_1000C04C4(v10, v11, v12, v27, v26, a3, a4, v13);
      if (v5) {
        break;
      }
      uint64_t v18 = v14;
      uint64_t v19 = v15;
      uint64_t v20 = v16;
      float v21 = v17;
      swift_bridgeObjectRelease();
      unint64_t v23 = _swiftEmptyArrayStorage[2];
      unint64_t v22 = _swiftEmptyArrayStorage[3];
      if (v23 >= v22 >> 1) {
        sub_1001DE6F8(v22 > 1, v23 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v23 + 1;
      int64_t v24 = (float *)&_swiftEmptyArrayStorage[4 * v23];
      *((void *)v24 + 4) = v18;
      *((void *)v24 + 5) = v19;
      *((void *)v24 + 6) = v20;
      v24[14] = v21;
      if (!--v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100563350(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  id v73 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v61 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v77 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v13 - 8);
  NSString v68 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for RDPermanentlyHiddenReminder();
  __chkstk_darwin(v15);
  uint64_t v56 = &v53[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  unint64_t v54 = &v53[-v19];
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v69 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v76 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48);
  int64_t v70 = (unint64_t)(v21 + 63) >> 6;
  unint64_t v71 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32);
  id v67 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v62 = v5;
  id v63 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  unint64_t v59 = (void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32);
  uint64_t v60 = v5 + 16;
  int64_t v24 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  int64_t v64 = (void (**)(unsigned char *, uint64_t))(v11 + 8);
  uint64_t v55 = v18;
  uint64_t v75 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  uint64_t v78 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v26 = 0;
  unint64_t v57 = _swiftEmptyArrayStorage;
  uint64_t v65 = v24;
  uint64_t v66 = v15;
  id v58 = v9;
LABEL_4:
  uint64_t v27 = (uint64_t)v68;
  if (v23)
  {
LABEL_5:
    unint64_t v28 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    int64_t v79 = v26;
    unint64_t v29 = v28 | (v26 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v30 >= v70) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v69 + 8 * v30);
    int64_t v32 = v26 + 1;
    if (!v31)
    {
      int64_t v32 = v26 + 2;
      if (v26 + 2 >= v70) {
        goto LABEL_40;
      }
      unint64_t v31 = *(void *)(v69 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v26 + 3;
        if (v26 + 3 >= v70) {
          goto LABEL_40;
        }
        unint64_t v31 = *(void *)(v69 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = v26 + 4;
          if (v26 + 4 >= v70) {
            goto LABEL_40;
          }
          unint64_t v31 = *(void *)(v69 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v23 = (v31 - 1) & v31;
    int64_t v79 = v32;
    unint64_t v29 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_22:
    id v34 = (uint64_t *)(*(void *)(v78 + 48) + 16 * v29);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
    if ((*v76)(v9, 1, v10) == 1)
    {
      sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
      uint64_t v37 = 1;
      goto LABEL_32;
    }
    uint64_t v38 = *v71;
    (*v71)(v77, v9, v10);
    if (!*(void *)(v74 + 16))
    {
      uint64_t v43 = (uint64_t)v73;
      (*v67)((uint64_t)v73, 1, 1, v72);
LABEL_30:
      (*v64)(v77, v10);
      sub_1000966BC(v43, (uint64_t *)&unk_100909A40);
      uint64_t v37 = 1;
      uint64_t v27 = (uint64_t)v68;
      uint64_t v15 = v66;
      goto LABEL_32;
    }
    swift_bridgeObjectRetain();
    uint64_t v39 = v74;
    unint64_t v40 = sub_1001806F8(v36, v35);
    if (v41)
    {
      uint64_t v42 = v72;
      uint64_t v43 = (uint64_t)v73;
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v62 + 16))(v73, *(void *)(v39 + 56) + *(void *)(v62 + 72) * v40, v72);
      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = 1;
      uint64_t v42 = v72;
      uint64_t v43 = (uint64_t)v73;
    }
    int64_t v24 = v65;
    (*v67)(v43, v44, 1, v42);
    swift_bridgeObjectRelease();
    if ((*v63)(v43, 1, v42) == 1) {
      goto LABEL_30;
    }
    os_log_type_t v45 = *v59;
    uint64_t v46 = v61;
    uint64_t v47 = v72;
    (*v59)((uint64_t)v61, v73, v72);
    uint64_t v27 = (uint64_t)v68;
    v38(v68, v77, v10);
    uint64_t v15 = v66;
    unint64_t v48 = v46;
    uint64_t v9 = v58;
    v45(v27 + *(int *)(v66 + 20), v48, v47);
    int64_t v24 = v65;
    uint64_t v37 = 0;
LABEL_32:
    (*v24)(v27, v37, 1, v15);
    swift_bridgeObjectRelease();
    if ((*v75)(v27, 1, v15) != 1)
    {
      BOOL v49 = v54;
      sub_1001280D4(v27, (uint64_t)v54);
      sub_1001280D4((uint64_t)v49, (uint64_t)v56);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v57 = (void *)sub_10030BD38(0, v57[2] + 1, 1, (unint64_t)v57);
      }
      unint64_t v51 = v57[2];
      unint64_t v50 = v57[3];
      if (v51 >= v50 >> 1) {
        unint64_t v57 = (void *)sub_10030BD38(v50 > 1, v51 + 1, 1, (unint64_t)v57);
      }
      uint64_t v52 = v57;
      v57[2] = v51 + 1;
      uint64_t result = (void *)sub_1001280D4((uint64_t)v56, (uint64_t)v52+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v51);
      int64_t v26 = v79;
      goto LABEL_4;
    }
    uint64_t result = (void *)sub_1000966BC(v27, (uint64_t *)&unk_100914280);
    int64_t v26 = v79;
    if (v23) {
      goto LABEL_5;
    }
  }
  uint64_t v33 = v26 + 5;
  if (v26 + 5 >= v70)
  {
LABEL_40:
    swift_release();
    return v57;
  }
  unint64_t v31 = *(void *)(v69 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v26 + 5;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v70) {
      goto LABEL_40;
    }
    unint64_t v31 = *(void *)(v69 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_21;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_100563B54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100563B6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a5;
  v38[3] = sub_1000963CC(0, &qword_10091CE68);
  v38[0] = a1;
  sub_100094134(&qword_10091CE70);
  id v15 = a1;
  throwingCast<A>(_:as:failureMessage:)();
  uint64_t v16 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v38);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(a6 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider))(v16);
  id v35 = 0;
  uint64_t v18 = sub_10010B4E8(a6 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v38);
  __chkstk_darwin(v18);
  void v31[2] = &v35;
  v31[3] = v36;
  v31[4] = &v37;
  v31[5] = v17;
  v31[6] = a2;
  v31[7] = a3;
  v31[8] = a4;
  sub_1003B7FD4((uint64_t)v38, a8, (uint64_t)v31, &v32);
  uint64_t v19 = v32;
  unint64_t v20 = v33;
  uint64_t v21 = v34;
  sub_100097E38(v32, v33);
  sub_100421384(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)v17;
  id v23 = v35;
  id v24 = objc_allocWithZone((Class)REMStoreSwiftInvocationResult);
  id v25 = v23;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v24 initWithResultData:isa storages:v27 latestFetchResultToken:v25];

  sub_100097F34(v19, v20);
  unint64_t v29 = *(void (**)(uint64_t, id, void))(a7 + 16);
  id v30 = v28;
  v29(a7, v30, 0);

  sub_100097F34(v19, v20);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v36);
}

void sub_1005640B8(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091CCD8);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v17 = a2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v18 = a3;
    *(_DWORD *)uint64_t v10 = 138412290;
    v19[0] = v7;
    id v12 = v7;
    a2 = v17;
    a3 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Executing fetch request {fetchRequest: %@}", v10, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v13 = sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v19);
  __chkstk_darwin(v13);
  v16[2] = v7;
  sub_1003BB74C((uint64_t)v19, (uint64_t)sub_10056DC34, (uint64_t)v16);
  id v15 = v14;
  (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, v14, 0);
}

void sub_1005644C8(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  *(void *)(swift_allocObject() + 16) = a3;
  v42[0] = a1;
  _Block_copy(a3);
  sub_1000963CC(0, &qword_10091CE78);
  id v6 = a1;
  sub_100094134(&qword_10091CE80);
  if (swift_dynamicCast())
  {
    sub_1000967D4(v43, (uint64_t)v41);
    sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v42);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100776E80;
    sub_10010B4E8((uint64_t)v42, (uint64_t)v43);
    unint64_t v8 = v45 | ((unint64_t)v46 << 32);
    unsigned int v9 = v46 >> 14;
    if (v9 >= 2)
    {
      if (v9 == 2)
      {
        unsigned __int16 v46 = WORD2(v8) & 0x3FFF;
        if ((v8 & 0x10000000000) != 0)
        {
          unint64_t v17 = 0x80000001007CB2F0;
          unint64_t v16 = 0xD000000000000011;
          goto LABEL_11;
        }
      }
    }
    else
    {
      unsigned __int16 v46 = WORD2(v8) & 0x3FFF;
    }
    unint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
LABEL_11:
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v18 = sub_1000C5B38();
    *(void *)(v7 + 64) = v18;
    *(void *)(v7 + 32) = v16;
    *(void *)(v7 + 40) = v17;
    uint64_t v19 = sub_100696CF4();
    *(void *)(v7 + 96) = &type metadata for String;
    *(void *)(v7 + 104) = v18;
    *(void *)(v7 + 72) = v19;
    *(void *)(v7 + 80) = v20;
    uint64_t v21 = String.init(format:_:)();
    id v23 = v22;
    id v24 = [v6 name];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v25._countAndFlagsBits = 10272;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    v26._countAndFlagsBits = v21;
    v26._object = v23;
    String.append(_:)(v26);
    __chkstk_darwin(v27);
    static os_log_type_t.info.getter();
    measureTimeElapsed(_:level:block:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v41);
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v44 = 0;
  memset(v43, 0, sizeof(v43));
  sub_1000966BC((uint64_t)v43, &qword_10091CE88);
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091CCD8);
  uint64_t v11 = v6;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    unint64_t v40 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412290;
    *(void *)&v43[0] = v11;
    id v15 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v40 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invocation does not conform to RDInvocable {invocation: %@}", v14, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v12 = v11;
  }

  id v28 = self;
  *(void *)&v43[0] = 0;
  *((void *)&v43[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v29._countAndFlagsBits = 0xD000000000000038;
  v29._object = (void *)0x80000001007D85A0;
  String.append(_:)(v29);
  id v30 = [v11 description];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

  v34._countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 125;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v37 = [v28 internalErrorWithDebugDescription:v36];

  id v38 = v37;
  uint64_t v39 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void, void *))a3)[2](a3, 0, v39);
  swift_release();
}

void sub_100564A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v14);
  sub_10010B4E8((uint64_t)v14, (uint64_t)v15);
  unint64_t v5 = v16 | ((unint64_t)v17 << 32);
  int v6 = 0x7FFFFFFF;
  switch(v17 >> 14)
  {
    case 2:
      unsigned __int16 v17 = WORD2(v5) & 0x3FFF;
      int v6 = v5;
      break;
    case 3:
      break;
    default:
      int v6 = 2147483519;
      unsigned __int16 v17 = WORD2(v5) & 0x3FFF;
      break;
  }
  uint64_t v7 = sub_100662770(512, v6);
  __chkstk_darwin(v7);
  void v13[2] = a1;
  v13[3] = v14;
  uint64_t v8 = sub_1003BB2AC((uint64_t)v14, (uint64_t)sub_10056DDB4, (uint64_t)v13);
  sub_1002B13AC(v8);
  uint64_t v10 = v9;
  id v12 = v11;
  swift_bridgeObjectRelease();
  if (v10) {
    swift_bridgeObjectRelease();
  }
  else {
    id v12 = 0;
  }
  (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, v12, 0);
}

void sub_100564BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v10);
  sub_10010B4E8((uint64_t)v10, (uint64_t)v11);
  unint64_t v5 = v12 | ((unint64_t)v13 << 32);
  int v6 = 0x7FFFFFFF;
  switch(v13 >> 14)
  {
    case 2:
      unsigned __int16 v13 = WORD2(v5) & 0x3FFF;
      int v6 = v5;
      break;
    case 3:
      break;
    default:
      int v6 = 2147483519;
      unsigned __int16 v13 = WORD2(v5) & 0x3FFF;
      break;
  }
  uint64_t v7 = sub_100662770(0x7FFFFFFFLL, v6);
  __chkstk_darwin(v7);
  v9[2] = a1;
  v9[3] = v10;
  sub_1003BB2AC((uint64_t)v10, (uint64_t)sub_10056DBA8, (uint64_t)v9);
  sub_1000963CC(0, (unint64_t *)&unk_10090A3D8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
  swift_bridgeObjectRelease();
}

uint64_t sub_100564DB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeZone();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_100910410);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v32);
  uint64_t v16 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
  id v18 = v15;
  sub_10010B544((uint64_t)v32);
  id v19 = a1;
  static TimeZone.current.getter();
  v28[0] = &type metadata for SystemRandomNumberGenerator;
  v28[1] = &protocol witness table for SystemRandomNumberGenerator;
  type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(0);
  swift_allocObject();
  sub_10021164C(v18, (uint64_t)v32, v19, (uint64_t)v14, (uint64_t)v8, (uint64_t)&v26, (uint64_t)v11);
  sub_100212808((uint64_t)&v26);
  uint64_t v20 = sub_1002163B0();
  unint64_t v22 = v21;
  uint64_t v31 = v26;
  sub_1000F5C48((uint64_t)&v31);
  sub_100096408((uint64_t)&v27, (uint64_t)v30, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C((uint64_t)v30);
  sub_100096408((uint64_t)v28, (uint64_t)v29, (uint64_t *)&unk_10090A4C0);
  sub_1001E828C((uint64_t)v29);
  sub_100097E38(v20, v22);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);

  sub_100097F34(v20, v22);
  sub_100097F34(v20, v22);
  return swift_release();
}

void sub_1005651DC(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v21 = static OS_dispatch_queue.main.getter();
  unint64_t v22 = *(void **)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController];
  type metadata accessor for RDDatabaseSaver();
  uint64_t inited = (void *)swift_initStackObject();
  inited[2] = v21;
  inited[3] = v22;
  inited[4] = a2;
  swift_beginAccess();
  uint64_t v24 = *(void *)(a12 + 16);
  sub_10010B4E8((uint64_t)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity], (uint64_t)v42);
  v22;
  swift_bridgeObjectRetain();
  uint64_t v25 = a8;
  unint64_t v40 = inited;
  sub_10071EF8C(a3, a4, a5, a6, a7, v25, a9, a10, a11, v24, a13, a14, (uint64_t)v42);
  unint64_t v36 = a4;
  swift_bridgeObjectRelease();
  sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler], *(void *)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler + 24]);
  sub_10038CD54(a10);
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_10091CCD8);
  uint64_t v27 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  id v28 = v27;
  Swift::String v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    log = v29;
    uint64_t v31 = swift_slowAlloc();
    v41[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136448002;
    uint64_t v32 = sub_100696CF4();
    sub_1000C51B8(v32, v33, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2048;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2048;
    uint64_t v34 = a16;
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 32) = 2048;
    if (a5 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 42) = 2048;
    if (a6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 52) = 2048;
    if (a7 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 62) = 2048;
    if (a10 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 72) = 2048;
    swift_beginAccess();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, log, v30, "(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, listSectionStorages.count: %ld, smartListStorages.count: %ld, smartListSectionStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}", (uint8_t *)v31, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v34 = a16;
  }
  (*(void (**)(uint64_t, void))(v34 + 16))(v34, 0);
  swift_setDeallocating();
}

uint64_t sub_100565DE4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, void *a16, const void *a17)
{
  uint64_t v108 = a7;
  uint64_t v106 = a6;
  unint64_t v107 = a5;
  uint64_t v99 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  unint64_t v97 = (char *)v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  unint64_t v92 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v89);
  uint64_t v90 = (char *)v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for DispatchQoS();
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v94 = (char *)v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = a17;
  uint64_t v102 = a17;
  _Block_copy(a17);
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v105 = a13;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_10091CCD8);
  id v28 = a16;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v29 = v28;
  unint64_t v30 = a1;
  v88[1] = v27;
  uint64_t v31 = Logger.logObject.getter();
  LODWORD(v104) = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v31, (os_log_type_t)v104);
  unint64_t v110 = a3;
  unint64_t v109 = a8;
  uint64_t v113 = a9;
  unint64_t v114 = v30;
  unint64_t v112 = a4;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    aBlock = (void **)v101;
    *(_DWORD *)uint64_t v33 = 136447746;
    sub_10010B4E8((uint64_t)v29 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v123);
    uint64_t v34 = sub_100696CF4();
    uint64_t v122 = sub_1000C51B8(v34, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v103 = v29;
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2048;
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v37 = v112;
    swift_bridgeObjectRelease();
    uint64_t v122 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v122 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2048;
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v122 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 42) = 2048;
    if (a8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v40 = *(void *)((a8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v122 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 52) = 2048;
    uint64_t v41 = *(void *)(v113 + 16);
    swift_bridgeObjectRelease();
    uint64_t v122 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 62) = 2048;
    if ((a10 & 0xC000000000000001) != 0) {
      uint64_t v42 = __CocoaDictionary.count.getter();
    }
    else {
      uint64_t v42 = *(void *)(a10 + 16);
    }
    a3 = v110;
    swift_bridgeObjectRelease();
    uint64_t v122 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v104, "(daemon) SAVE START {author: %{public}s, accountStorage.count: %ld, listStorage.count: %ld, smartListStorages.count: %ld, reminderStorage.count: %ld, changedKeys.count: %ld, replicaManagers.count: %ld", (uint8_t *)v33, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v44 = v108;
    uint64_t v43 = v103;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v43 = v29;
    uint64_t v44 = v108;
  }
  LODWORD(v100) = a15;
  LODWORD(v101) = a14;
  unint64_t v104 = a12;
  id v103 = (id)a11;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = _swiftEmptyArrayStorage;
  sub_10010B4E8((uint64_t)v43 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v122);
  unint64_t v46 = sub_100159F08();
  if (v47)
  {
    uint64_t v48 = a2;
    uint64_t v49 = sub_100562F88(a10, v46, v47);
    swift_bridgeObjectRelease();
    uint64_t v50 = v45;
    *(void *)(v45 + 16) = v49;
    swift_bridgeObjectRelease();
LABEL_26:
    unint64_t v52 = v114;
    goto LABEL_27;
  }
  uint64_t v48 = a2;
  if ((a10 & 0xC000000000000001) != 0) {
    uint64_t v51 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v51 = *(void *)(a10 + 16);
  }
  unint64_t v52 = v114;
  uint64_t v50 = v45;
  if (v51)
  {
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Will not save replica managers. Bundle ID is missing", v55, 2u);
      a3 = v110;
      swift_slowDealloc();
    }

    goto LABEL_26;
  }
LABEL_27:
  uint64_t v56 = swift_allocObject();
  uint64_t v57 = v105;
  *(void *)(v56 + 16) = v43;
  *(void *)(v56 + 24) = v57;
  *(void *)(v56 + 32) = v52;
  *(void *)(v56 + 40) = v48;
  uint64_t v58 = v48;
  unint64_t v59 = v112;
  *(void *)(v56 + 48) = a3;
  *(void *)(v56 + 56) = v59;
  uint64_t v60 = v106;
  *(void *)(v56 + 64) = v107;
  *(void *)(v56 + 72) = v60;
  *(void *)(v56 + 80) = v44;
  unint64_t v61 = v109;
  uint64_t v62 = v113;
  *(void *)(v56 + 88) = v109;
  *(void *)(v56 + 96) = v62;
  uint64_t v63 = v50;
  uint64_t v64 = (uint64_t)v103;
  *(void *)(v56 + 104) = v50;
  *(void *)(v56 + 112) = v64;
  unint64_t v65 = v104;
  *(void *)(v56 + 120) = v104;
  uint64_t v66 = v58;
  int v67 = v100 & 1;
  *(unsigned char *)(v56 + 128) = v67;
  uint64_t v68 = v111;
  *(void *)(v56 + 136) = sub_10011FBC8;
  *(void *)(v56 + 144) = v68;
  if (v101)
  {
    unint64_t v69 = v65;
    uint64_t v99 = v66;
    LODWORD(v101) = v67;
    _Block_copy(v102);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v100 = v43;
    unint64_t v70 = v114;
    swift_bridgeObjectRetain();
    uint64_t v71 = v99;
    swift_bridgeObjectRetain();
    unint64_t v72 = v112;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v73 = v102;
    LOBYTE(v87) = v101;
    sub_1005651DC(v100, v105, v70, v71, v110, v72, v107, v106, v108, v61, v62, v63, (uint64_t)v103, v69, v87, (uint64_t)v102);
    _Block_release(v73);
    swift_release();
    swift_release();
  }
  else
  {
    if (v57 == 4499)
    {
      uint64_t v105 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v88[0] = v50;
      swift_retain();
      id v74 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v75 = v94;
      static DispatchQoS.unspecified.getter();
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10056CA90((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
      sub_100094134((uint64_t *)&unk_10090DDA0);
      sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      (*(void (**)(char *, void, uint64_t))(v91 + 104))(v92, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v93);
      uint64_t v76 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
      id v120 = sub_10056D7E0;
      uint64_t v121 = v56;
      aBlock = _NSConcreteStackBlock;
      uint64_t v117 = 1107296256;
      uint64_t v118 = sub_100236C78;
      uint64_t v119 = &unk_1008CA530;
      uint64_t v77 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      unint64_t v115 = _swiftEmptyArrayStorage;
      sub_10056CA90((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      uint64_t v78 = v97;
      uint64_t v79 = v99;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v77);
      swift_release();

      (*(void (**)(char *, uint64_t))(v98 + 8))(v78, v79);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v75, v96);
      swift_release();
    }
    else
    {
      uint64_t v80 = qword_1009070D0;
      id v81 = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v80 != -1) {
        swift_once();
      }
      id v120 = sub_10056D7E0;
      uint64_t v121 = v56;
      aBlock = _NSConcreteStackBlock;
      uint64_t v117 = 1107296256;
      uint64_t v118 = sub_100236C78;
      uint64_t v119 = &unk_1008CA508;
      uint64_t v82 = _Block_copy(&aBlock);
      swift_retain();
      id v83 = v94;
      static DispatchQoS.unspecified.getter();
      unint64_t v115 = _swiftEmptyArrayStorage;
      sub_10056CA90((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      uint64_t v84 = v97;
      uint64_t v85 = v99;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v82);
      swift_release();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v84, v85);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v83, v96);
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

void sub_100566EEC(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  id v8 = [v7 cloudContext];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v22);
    __chkstk_darwin(v10);
    v20[2] = a1;
    v20[3] = v9;
    v20[4] = sub_100149A20;
    v20[5] = v6;
    sub_1003B5ADC((uint64_t)v22, (uint64_t)sub_10056D69C, (uint64_t)v20);
    swift_release();
  }
  else
  {
    uint64_t v11 = self;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 internalErrorWithDebugDescription:v12];

    swift_willThrow();
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_10091CCD8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      v20[7] = sub_1000C51B8(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to fetch share object. {error: %s}", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    id v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v19);

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
}

void sub_100567250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  uint64_t v11 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  id v12 = [v11 cloudContext];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_10010B4E8(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v26);
    __chkstk_darwin(v14);
    v24[2] = a1;
    id v24[3] = v13;
    v24[4] = a2;
    v24[5] = a3;
    v24[6] = a4;
    v24[7] = sub_100149A20;
    v24[8] = v10;
    sub_1003B5ADC((uint64_t)v26, (uint64_t)sub_10056D600, (uint64_t)v24);
    swift_release();
  }
  else
  {
    os_log_type_t v15 = self;
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 internalErrorWithDebugDescription:v16];

    swift_willThrow();
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091CCD8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      v24[11] = sub_1000C51B8(v21, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create share. {error: %s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v23);

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
}

void sub_1005675C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a5;
  uint64_t v9 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  id v10 = [v9 cloudContext];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:v10];
    NSString v13 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10011FBC8;
    *(void *)(v15 + 24) = v8;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10011FBC4;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_10011FBC4;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100742FE8;
    aBlock[3] = &unk_1008CA378;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v12 didSaveShare:a1 accountID:v13 queue:v14 completionHandler:v17];
    _Block_release(v17);
    swift_release();
  }
  else
  {
    unint64_t v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 internalErrorWithDebugDescription:v19];

    id v21 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a5)[2](a5, v21);
    swift_release();
  }
}

void sub_100567874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a5;
  uint64_t v9 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  id v10 = [v9 cloudContext];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:v10];
    NSString v13 = String._bridgeToObjectiveC()();
    sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10011FBC8;
    *(void *)(v15 + 24) = v8;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10011FBC4;
    *(void *)(v16 + 24) = v15;
    aBlock[4] = sub_10011E21C;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100742FE8;
    aBlock[3] = &unk_1008CA2D8;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v12 didStopSharing:a1 accountID:v13 queue:v14 completionHandler:v17];
    _Block_release(v17);
    swift_release();
  }
  else
  {
    unint64_t v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 internalErrorWithDebugDescription:v19];

    id v21 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a5)[2](a5, v21);
    swift_release();
  }
}

void sub_100567B24(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID);
  swift_beginAccess();
  if (*(void *)(*v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001806F8(a1, a2);
    char v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_10;
    }
  }
  id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "cloudContext"));
  if (!v11) {
    goto LABEL_10;
  }
  id v12 = v11;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 containerForAccountID:v13];

  if (!v14)
  {

LABEL_10:
    (*(void (**)(uint64_t, void))(a4 + 16))(a4, 0);
    return;
  }
  unint64_t v30 = v12;
  id v15 = [objc_allocWithZone((Class)CKSystemSharingUIObserver) initWithContainer:v14];
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000E4F30((uint64_t)sub_10056D5AC);
  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter();
  swift_release();
  swift_release();
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v19 = (void *)swift_allocObject();
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000E4F30((uint64_t)sub_10056D5D4);
  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v20 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  sub_1002C7C68((uint64_t)v20, a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_10091CCD8);
  swift_bridgeObjectRetain_n();
  id v23 = v14;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  log = v24;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412546;
    id v28 = [v23 containerID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v28;

    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v25, "CKSystemSharingUIObserver: Added observer for container: {containerID: %@, accountID: %s}", (uint8_t *)v26, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(uint64_t, void))(a4 + 16))(a4, 0);
}

void sub_10056803C(void *a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  id v15 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  id v16 = [v15 cloudContext];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v30 = v11;
    uint64_t v31 = v10;
    uint64_t v32 = v7;
    id v18 = [objc_allocWithZone((Class)ICCollaborationController) initWithCloudContext:v16];
    if (qword_1009078C8 != -1) {
      swift_once();
    }
    NSString v19 = (void *)qword_10091CD08;
    id v20 = (void *)swift_allocObject();
    v20[2] = v18;
    v20[3] = a1;
    v20[4] = sub_10056D49C;
    v20[5] = v14;
    aBlock[4] = sub_10056D4EC;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CA0F8;
    id v21 = _Block_copy(aBlock);
    id v22 = v19;
    id v29 = v18;
    id v23 = a1;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_10056CA90((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v24 internalErrorWithDebugDescription:v25];

    uint64_t v32 = _convertErrorToNSError(_:)();
    a3[2](a3, 0, 0, v32);
    swift_release();

    uint64_t v27 = (void *)v32;
  }
}

uint64_t sub_1005684B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void))
{
  uint64_t v24 = a3;
  NSString v25 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  _Block_copy(a6);
  if (qword_100907BA8 != -1) {
    swift_once();
  }
  if (byte_1009426D9 == 1)
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    v23[1] = qword_100942060;
    id v18 = (void *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    NSString v19 = v25;
    v18[4] = v24;
    v18[5] = a4;
    v18[6] = sub_10011FBC8;
    v18[7] = v17;
    v18[8] = v19;
    aBlock[4] = sub_10056D468;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CA080;
    id v20 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v21 = v19;
    static DispatchQoS.unspecified.getter();
    uint64_t v27 = _swiftEmptyArrayStorage;
    sub_10056CA90((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_release();
    return swift_release();
  }
  else
  {
    a6[2](a6, 0);
    return swift_release();
  }
}

uint64_t sub_1005688A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void))
{
  uint64_t v24 = a3;
  NSString v25 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  _Block_copy(a6);
  if (qword_100907BA8 != -1) {
    swift_once();
  }
  if (byte_1009426D9 == 1)
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    v23[1] = qword_100942060;
    id v18 = (void *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    NSString v19 = v25;
    v18[4] = v24;
    v18[5] = a4;
    v18[6] = sub_10011FBC8;
    v18[7] = v17;
    v18[8] = v19;
    aBlock[4] = sub_10056D40C;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CA008;
    id v20 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v21 = v19;
    static DispatchQoS.unspecified.getter();
    uint64_t v27 = _swiftEmptyArrayStorage;
    sub_10056CA90((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_release();
    return swift_release();
  }
  else
  {
    a6[2](a6, 0);
    return swift_release();
  }
}

uint64_t sub_100568C98(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v9);
  v8[2] = a1;
  v8[3] = sub_100149A20;
  v8[4] = v6;
  _Block_copy(a3);
  sub_1003B5ADC((uint64_t)v9, (uint64_t)sub_10056D3E8, (uint64_t)v8);
  return swift_release();
}

void sub_100568DA4(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  char v9 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a4);
  if ([v9 supportsTemplateOperation])
  {
    sub_1000BF710(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v20, &qword_100916818);
    if (v21)
    {
      sub_1000967D4(&v20, (uint64_t)v19);
      uint64_t v10 = sub_10010B4E8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v20);
      __chkstk_darwin(v10);
      v17[2] = sub_100149A20;
      v17[3] = v8;
      v17[4] = a1;
      v17[5] = a2;
      v17[6] = v19;
      sub_1003B5ADC((uint64_t)&v20, (uint64_t)sub_10056D390, (uint64_t)v17);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
      swift_release();
    }
    else
    {
      sub_1000966BC((uint64_t)&v20, &qword_100916818);
      uint64_t v12 = self;
      type metadata accessor for RDXPCStorePerformer();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v14 = String._bridgeToObjectiveC()();
      id v15 = [v12 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v14];

      id v16 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void *))a4)[2](a4, 0, v16);
      swift_release();
    }
  }
  else
  {
    id v11 = [self notSupportedError];
    id v18 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, id))a4)[2](a4, 0, v18);
    swift_release();
  }
}

uint64_t sub_10056907C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  sub_10010B4E8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v11);
  void v10[2] = sub_100149A20;
  v10[3] = v8;
  v10[4] = a1;
  v10[5] = a2;
  _Block_copy(a4);
  sub_1003B5ADC((uint64_t)v11, (uint64_t)sub_10056D370, (uint64_t)v10);
  return swift_release();
}

void sub_10056918C(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  if ([v7 supportsTemplateOperation])
  {
    sub_1000BF710(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v18, &qword_100916818);
    if (v19)
    {
      sub_1000967D4(&v18, (uint64_t)v17);
      uint64_t v8 = sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v18);
      __chkstk_darwin(v8);
      v15[2] = sub_100149A20;
      v15[3] = v6;
      v15[4] = a1;
      v15[5] = v17;
      sub_1003B5ADC((uint64_t)&v18, (uint64_t)sub_10056D350, (uint64_t)v15);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      swift_release();
    }
    else
    {
      sub_1000966BC((uint64_t)&v18, &qword_100916818);
      uint64_t v10 = self;
      type metadata accessor for RDXPCStorePerformer();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v12 = String._bridgeToObjectiveC()();
      id v13 = [v10 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v12];

      NSString v14 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void *))a3)[2](a3, 0, v14);
      swift_release();
    }
  }
  else
  {
    id v9 = [self notSupportedError];
    id v16 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, id))a3)[2](a3, 0, v16);
    swift_release();
  }
}

void sub_100569450(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  if ([v7 supportsTemplateOperation])
  {
    sub_1000BF710(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v18, &qword_100916818);
    if (v19)
    {
      sub_1000967D4(&v18, (uint64_t)v17);
      uint64_t v8 = sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v18);
      __chkstk_darwin(v8);
      v15[2] = sub_1001493DC;
      v15[3] = v6;
      v15[4] = a1;
      v15[5] = v17;
      sub_1003B5ADC((uint64_t)&v18, (uint64_t)sub_10056D2C4, (uint64_t)v15);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      swift_release();
    }
    else
    {
      sub_1000966BC((uint64_t)&v18, &qword_100916818);
      uint64_t v10 = self;
      type metadata accessor for RDXPCStorePerformer();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v12 = String._bridgeToObjectiveC()();
      id v13 = [v10 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v12];

      NSString v14 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void *))a3)[2](a3, 0, v14);
      swift_release();
    }
  }
  else
  {
    id v9 = [self notSupportedError];
    id v16 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, id))a3)[2](a3, 0, v16);
    swift_release();
  }
}

uint64_t sub_100569714(uint64_t a1, uint64_t a2)
{
  sub_10010B4E8(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v4);
  sub_1003B5ADC((uint64_t)v4, (uint64_t)sub_100559174, 0);
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, 0);
}

void sub_10056997C(uint64_t a1, void *a2, void *a3, void *a4, int a5, void (**a6)(void, void, void))
{
  uint64_t v12 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v12 - 8);
  NSString v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a6;
  if (a2[2])
  {
    LODWORD(v27) = a5;
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = a2;
    *(void *)(v19 + 40) = v16;
    *(void *)(v19 + 48) = v17;
    *(void *)(v19 + 56) = sub_100149A20;
    *(void *)(v19 + 64) = v15;
    *(void *)(v19 + 72) = a1;
    *(void *)(v19 + 80) = a4;
    *(void *)(v19 + 88) = a3;
    *(unsigned char *)(v19 + 96) = v27 & 1;
    _Block_copy(a6);
    id v20 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v21 = a4;
    sub_1000C6B60((uint64_t)v14, (uint64_t)&unk_10091CDE8, v19);
    swift_release();
    swift_release();
  }
  else
  {
    id v22 = self;
    _Block_copy(a6);
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v22 invalidParameterErrorWithDescription:v23];

    uint64_t v27 = _convertErrorToNSError(_:)();
    a6[2](a6, 0, v27);
    swift_release();

    NSString v25 = (void *)v27;
  }
}

void sub_100569BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v9 = 0;
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v10);
  uint64_t v7 = a1;
  uint64_t v8 = &v9;
  sub_1003B5ADC((uint64_t)v10, (uint64_t)sub_10056CE20, (uint64_t)v6);
  unint64_t v5 = v9;
  (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, v9, 0);
}

uint64_t sub_100569F34(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v9);
  v8[2] = a2;
  v8[3] = a1;
  v8[4] = sub_10056DCD4;
  void v8[5] = v6;
  _Block_copy(a3);
  sub_1003B5ADC((uint64_t)v9, (uint64_t)sub_10056CCC4, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10056A1B4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v12);
  id v9 = sub_10056CC80;
  uint64_t v10 = v6;
  uint64_t v11 = a1;
  _Block_copy(a3);
  sub_1003B5ADC((uint64_t)v12, (uint64_t)sub_10056CC88, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10056A4D4(unint64_t a1, uint64_t a2, uint64_t (**a3)(void, void))
{
  int v4 = *(_DWORD *)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity + 40);
  uint64_t v5 = *(unsigned __int16 *)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity + 44) >> 14;
  int v6 = 0x7FFFFFFF;
  switch(v5)
  {
    case 2:
      int v6 = v4;
      break;
    case 3:
      break;
    default:
      int v6 = 2147483519;
      break;
  }
  sub_100662770(1024, v6);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_6;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_32;
  }
LABEL_6:
  unint64_t v37 = a3;
  if (v9 < 1)
  {
    __break(1u);
    _Block_release(a3);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x10056AAB8);
  }
  uint64_t v10 = 0;
  unint64_t v11 = a1 & 0xC000000000000001;
  uint64_t v12 = &qword_100907000;
  uint64_t v38 = v9;
  unint64_t v39 = a1;
  unint64_t v40 = a1 & 0xC000000000000001;
  do
  {
    if (v11) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(a1 + 8 * v10 + 32);
    }
    NSString v14 = v13;
    if (v12[279] != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091CCD8);
    id v16 = v14;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      v43[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315650;
      id v41 = [v16 personHandle];
      sub_100094134(&qword_10091CDA8);
      uint64_t v20 = Optional.descriptionOrNil.getter();
      unint64_t v22 = v21;

      *(void *)(v19 + 4) = sub_1000C51B8(v20, v22, (uint64_t *)v43);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      id v23 = [v16 aliases];
      if (v23)
      {
        id v24 = v23;
        sub_1000963CC(0, &qword_10091CDB8);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      sub_100094134(&qword_10091CDB0);
      uint64_t v25 = Optional.descriptionOrNil.getter();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      *(void *)(v19 + 14) = sub_1000C51B8(v25, v27, (uint64_t *)v43);

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2080;
      id v28 = [v16 contactIdentifier];
      if (v28)
      {
        id v29 = v28;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v30 = Optional.descriptionOrNil.getter();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      *(void *)(v19 + 24) = sub_1000C51B8(v30, v32, (uint64_t *)v43);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "notifyOfInteraction: {personHandle: %s, aliases: %s, contactIdentifier: %s}", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = v38;
      a1 = v39;
      uint64_t v12 = &qword_100907000;
    }
    else
    {
    }
    ++v10;
    unint64_t v11 = v40;
  }
  while (v9 != v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  a3 = v37;
  do
  {
    if (v40) {
      id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v34 = *(id *)(a1 + 8 * v33 + 32);
    }
    unint64_t v35 = v34;
    v43[0] = v34;
    sub_10055CF44(v43, &v42);

    if (v42)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v33;
  }
  while (v9 != v33);
  swift_bridgeObjectRelease();
LABEL_33:
  sub_100551DD4((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return a3[2](a3, 0);
}

void sub_10056AAC8()
{
  id v0 = [self sharedManager];
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = [v0 currentPersona];

    if (v2)
    {
      id v3 = [v2 generateAndRestorePersonaContextWithPersonaUniqueString:0];

      if (v3)
      {
        uint64_t v4 = qword_1009078B8;
        id v5 = v3;
        if (v4 != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        sub_10008E2DC(v6, (uint64_t)qword_10091CCD8);
        id v13 = v5;
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          uint64_t v14 = swift_slowAlloc();
          *(_DWORD *)uint64_t v9 = 136446210;
          id v10 = v13;
          sub_100094134((uint64_t *)&unk_10090ABB0);
          uint64_t v11 = String.init<A>(describing:)();
          sub_1000C51B8(v11, v12, &v14);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to drop persona for account utils calls {error: %{public}s}", v9, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10056AD50(char a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  sub_10056AAC8();
  if (objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils")))
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    sub_1005F4004(a1 & 1, (void *)qword_100942060, (uint64_t)sub_10056DE00, v6);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 internalErrorWithDebugDescription:v8];

    id v10 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, id))a3)[2](a3, 0, 0, v10);
    swift_release();
  }
}

void sub_10056AF00(uint64_t a1, void *a2, char a3, uint64_t a4, void (**a5)(void, void, void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  _Block_copy(a5);
  sub_10056AAC8();
  if (objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a4
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils")))
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    uint64_t v11 = (void *)qword_100942060;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_10056CC50;
    *(void *)(v12 + 24) = v10;
    swift_retain();
    sub_1005F3574(a1, a2, a3 & 1, v11, (uint64_t)sub_10056CC58, v12);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    id v13 = self;
    _StringGuts.grow(_:)(60);
    v14._object = (void *)0x80000001007D8240;
    v14._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v14);
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 125;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v13 internalErrorWithDebugDescription:v17];

    id v19 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, id))a5)[2](a5, 0, 0, v19);
    swift_release();
  }
}

void sub_10056B16C(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  sub_10056AAC8();
  if (objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils")))
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    id v5 = (void *)qword_100942060;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_10056CC20;
    *(void *)(v6 + 24) = v4;
    swift_retain();
    sub_1005F42A8(v5, (uint64_t)sub_10056CC28, v6);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 internalErrorWithDebugDescription:v8];

    id v10 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, id))a2)[2](a2, 0, v10);
    swift_release();
  }
}

void sub_10056B350(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  _Block_copy(a4);
  sub_10056AAC8();
  if (objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils")))
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    uint64_t v9 = qword_100942060;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_10011FBC8;
    *(void *)(v10 + 24) = v8;
    swift_retain();
    sub_1005F4514(a1, (unint64_t)a2, v9, (uint64_t)sub_10011E21C, v10);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v11 = self;
    _StringGuts.grow(_:)(108);
    v12._object = (void *)0x80000001007D8190;
    v12._countAndFlagsBits = 0xD000000000000069;
    String.append(_:)(v12);
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 125;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [v11 internalErrorWithDebugDescription:v15];

    id v17 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a4)[2](a4, v17);
    swift_release();
  }
}

void sub_10056B59C(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  sub_10056AAC8();
  if (objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "accountUtils")))
  {
    if (qword_1009070C0 != -1) {
      swift_once();
    }
    uint64_t v5 = qword_100942060;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_10011FBC8;
    *(void *)(v6 + 24) = v4;
    swift_retain();
    sub_1005F538C(v5, (uint64_t)sub_10011FBC4, v6);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 internalErrorWithDebugDescription:v8];

    id v10 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a2)[2](a2, v10);
    swift_release();
  }
}

void sub_10056B77C(void *a1, uint64_t a2)
{
  id v4 = [self sharedConfiguration];
  id v5 = [self daemonUserDefaults];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  v16[0] = sub_10056CC10;
  v16[1] = v6;
  v16[2] = sub_10056CC10;
  v16[3] = v7;
  v16[4] = sub_10056CC18;
  void v16[5] = v8;
  v16[6] = sub_10056CC18;
  v16[7] = v9;
  uint64_t v10 = qword_1009070C0;
  id v11 = v4;
  id v12 = v5;
  id v13 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  Swift::String v14 = (void *)qword_100942060;
  objc_allocWithZone((Class)type metadata accessor for RDXPCSuggestedAttributesPerformer());
  id v15 = sub_1001D1B90(v13, (uint64_t)v16, v14);
  (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v15, 0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_10056B9B0(uint64_t a1)
{
  id v2 = [self sharedConfiguration];
  id v3 = [v2 suggestedAttributesHarvestingOverrides];

  if (!v3)
  {
    long long v13 = 0u;
    long long v14 = 0u;
LABEL_11:
    sub_1000966BC((uint64_t)&v13, &qword_100908190);
    goto LABEL_12;
  }
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [(objc_class *)isa valueForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_100096408((uint64_t)v12, (uint64_t)&v13, &qword_100908190);
  if (!*((void *)&v14 + 1)) {
    goto LABEL_11;
  }
  sub_100094134(&qword_1009171E8);
  if (!swift_dynamicCast())
  {
LABEL_12:
    uint64_t v10 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 16))(a1, v10, 0);
  }
  uint64_t v7 = *(void *)&v12[0];
  if (!*(void *)(*(void *)&v12[0] + 16)
    || (unint64_t v8 = sub_1001806F8(0x4F64656C62616E65, 0xEC000000534F696ELL), (v9 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 16))(a1, v10, 0);
}

void sub_10056BBCC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 uuid:v6];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = UUID.uuidString.getter();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  id v13 = [self sharedInstance];
  id v14 = [v13 accountStore];

  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 accountWithIdentifier:v15];

  if (!v16)
  {
    id v25 = [self noSuchObjectErrorWithObjectID:a1];
    swift_willThrow();

    unint64_t v26 = (void *)_convertErrorToNSError(_:)();
    id v27 = [v26 domain];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
        if (qword_1009078B8 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_10008E2DC(v48, (uint64_t)qword_10091CCD8);
        id v49 = v25;
        swift_bridgeObjectRetain();
        id v35 = v49;
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v50))
        {
          uint64_t v51 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136446466;
          uint64_t v58 = v26;
          swift_bridgeObjectRetain();
          uint64_t v59 = sub_1000C51B8(v10, v12, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v51 + 12) = 2082;
          uint64_t v59 = (uint64_t)v35;
          id v52 = v35;
          sub_100094134((uint64_t *)&unk_10090ABB0);
          uint64_t v53 = String.init<A>(describing:)();
          uint64_t v59 = sub_1000C51B8(v53, v54, &v60);
          unint64_t v26 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v50, "xpcPerformer.isManagedAccount: Error when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy();
          goto LABEL_23;
        }
LABEL_24:

        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
    }
    if (qword_1009078B8 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10008E2DC(v33, (uint64_t)qword_10091CCD8);
    id v34 = v26;
    swift_bridgeObjectRetain();
    id v35 = v34;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v60 = v57;
      *(_DWORD *)uint64_t v38 = 136446466;
      uint64_t v58 = a2;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_1000C51B8(v10, v12, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v38 + 12) = 2082;
      uint64_t v56 = v38 + 14;
      id v39 = v35;
      id v40 = [v39 description];
      id v41 = v26;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v43 = v25;
      unint64_t v45 = v44;

      a2 = v58;
      uint64_t v46 = v42;
      unint64_t v26 = v41;
      uint64_t v59 = sub_1000C51B8(v46, v45, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v25 = v43;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "xpcPerformer.isManagedAccount: REMError when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
LABEL_23:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_25:
      id v14 = v25;
      id v47 = (id)_convertErrorToNSError(_:)();
      (*((void (**)(void *, void, id))a2 + 2))(a2, 0, v47);

      id v19 = v14;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  unint64_t v17 = (unint64_t)[v16 MCIsManaged];
  if (qword_1009078B8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10091CCD8);
  id v19 = v16;
  swift_bridgeObjectRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v58 = a2;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    uint64_t v60 = v56;
    *(_DWORD *)uint64_t v22 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_1000C51B8(v10, v12, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 1024;
    LODWORD(v57) = v17;
    LODWORD(v59) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 18) = 2114;
    id v23 = [v19 displayAccount];
    id v24 = v23;
    if (v23) {
      uint64_t v59 = (uint64_t)v23;
    }
    else {
      uint64_t v59 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v55 = v24;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "xpcPerformer.isManagedAccount: ACAccount.rem_isManagedAppleID result {acAccountID: %{public}s, isManaged: %{BOOL}d, displayAccount: %{public}@}", (uint8_t *)v22, 0x1Cu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v58;
    unint64_t v17 = v57;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v47 = [objc_allocWithZone((Class)NSNumber) initWithBool:v17];
  (*((void (**)(void *, id, void))a2 + 2))(a2, v47, 0);
LABEL_26:
}

uint64_t sub_10056C4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10010B4E8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v7);
  _OWORD v6[2] = a1;
  sub_1003B5ADC((uint64_t)v7, (uint64_t)sub_10056CAD8, (uint64_t)v6);
  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_10056C744(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  sub_10010B4E8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v11);
  void v10[2] = a2;
  v10[3] = sub_10011C2EC;
  v10[4] = v8;
  v10[5] = a1;
  _Block_copy(a4);
  sub_1003B5ADC((uint64_t)v11, (uint64_t)sub_10056CA1C, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_10056C9E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10056CA1C(void *a1)
{
  sub_10055FC58(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(uint8_t **)(v1 + 40));
}

unint64_t sub_10056CA3C()
{
  unint64_t result = qword_10091CD90;
  if (!qword_10091CD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091CD90);
  }
  return result;
}

uint64_t sub_10056CA90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10056CAD8(void *a1)
{
  sub_10055F3A8(a1, *(void **)(v1 + 16));
}

void sub_10056CAF4(uint64_t a1, uint64_t a2)
{
  sub_10055F300(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10056CAFC(uint64_t a1)
{
  return sub_10055E72C(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void (**)(uint64_t, void))(v1 + 32));
}

void sub_10056CB24()
{
  sub_1005606B0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

id sub_10056CB54()
{
  return sub_100561A74(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10056CB74()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10056CBB4()
{
  sub_100562920(*(void **)(v0 + 16));
}

uint64_t sub_10056CBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10056CBD0()
{
  return swift_release();
}

uint64_t sub_10056CBD8()
{
  return _swift_deallocObject(v0, 24, 7);
}

Class sub_10056CC10()
{
  return sub_1001D1AD8(*(void **)(v0 + 16));
}

Class sub_10056CC18()
{
  return sub_1001D1AE4(*(void **)(v0 + 16));
}

void sub_10056CC20(char a1, uint64_t a2)
{
  sub_10055BE28(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10056CC28()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10056CC50(char a1, char a2, uint64_t a3)
{
  sub_10055DA38(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_10056CC58()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10056CC80(objc_class *a1, uint64_t a2)
{
  sub_10055CEA8(a1, a2, *(void *)(v2 + 16));
}

void sub_10056CC88(void *a1)
{
  sub_10055C4E8(a1, *(void (**)(void, id))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10056CCA8(void *a1)
{
  sub_10055C154(a1, *(void **)(v1 + 16));
}

uint64_t sub_10056CCC4(void *a1)
{
  return sub_10055B978(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10056CCE4()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10056CD34()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000C6EF4;
  *(_OWORD *)(v3 + 16) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10055BBDC;
  return sub_1005C1904(v2);
}

void sub_10056CE20(uint64_t a1)
{
  sub_10055B490(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10056CE44()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_10056CEAC(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_1000C6EF4;
  return sub_100559DF4(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10056CFB8(uint64_t a1, void *a2, uint64_t *a3)
{
  long long v16 = *(_OWORD *)(v3 + 32);
  char v8 = *(unsigned char *)(v3 + 48);
  uint64_t v9 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = swift_task_alloc();
  long long v12 = *(_OWORD *)(v3 + 16);
  *(void *)(v4 + 16) = v11;
  *(void *)uint64_t v11 = v4;
  *(void *)(v11 + 8) = sub_1000C75D4;
  *(void *)(v11 + 112) = v9;
  *(void *)(v11 + 120) = v10;
  *(unsigned char *)(v11 + 216) = v8;
  *(_OWORD *)(v11 + 80) = v12;
  *(_OWORD *)(v11 + 96) = v16;
  *(void *)(v11 + 72) = a1;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  *(void *)(v11 + 128) = *a2;
  *(void *)(v11 + 136) = v13;
  *(void *)(v11 + 144) = v14;
  return _swift_task_switch(sub_10055AA7C, 0, 0);
}

void sub_10056D0B8(uint64_t a1, uint64_t a2)
{
  sub_100559D5C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10056D0C0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10056D108()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000C75D4;
  *(void *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = v2;
  return _swift_task_switch(sub_100559B0C, 0, 0);
}

const char *sub_10056D1CC()
{
  return "groceryLocalCorrectionsChecksum";
}

void sub_10056D1D8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10056D1F8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_10056D228(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_10056D248(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10056D268()
{
  return "ckCloudState";
}

id sub_10056D274@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 ckCloudState];
  *a2 = result;
  return result;
}

id sub_10056D2B0(void *a1, id *a2)
{
  return [*a2 setCkCloudState:*a1];
}

void sub_10056D2C4(void *a1)
{
  sub_100558D1C(a1, *(void (**)(void, id))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10056D2E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10056D31C(void *a1, char a2)
{
  return sub_100558FD0(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(void *)(v2 + 24), (uint64_t (*)(void *, void))sub_10011C62C);
}

void sub_10056D350(uint64_t a1)
{
  sub_100558AC4(a1, *(void (**)(void, id))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

void sub_10056D370(uint64_t a1)
{
  sub_100558870(a1, *(void (**)(void, id))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

void sub_10056D390(void *a1)
{
  sub_1005585C4(a1, *(void (**)(void, void))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10056D3B4(void *a1, char a2)
{
  return sub_100558FD0(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(void *)(v2 + 24), (uint64_t (*)(void *, void))sub_10011FBC0);
}

void sub_10056D3E8(uint64_t a1)
{
  sub_100558058(a1, *(void **)(v1 + 16), *(void (**)(id, id))(v1 + 24));
}

uint64_t sub_10056D40C()
{
  return sub_10056D470(2);
}

uint64_t sub_10056D418()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10056D468()
{
  return sub_10056D470(1);
}

uint64_t sub_10056D470(char a1)
{
  return sub_100557ED8(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], a1);
}

void sub_10056D49C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100557E20(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_10056D4A4()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10056D4EC()
{
  sub_100557C20(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10056D4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, a3, a4, a1);
}

uint64_t sub_10056D534()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10056D55C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10056D594()
{
  return sub_10056D640((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10056D5AC(void *a1, void *a2, char a3)
{
}

uint64_t sub_10056D5BC()
{
  return sub_10056D640((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10056D5D4(void *a1, uint64_t a2, char a3)
{
}

void sub_10056D5E4()
{
  sub_100557810(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10056D5F4()
{
  return sub_100552EDC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10056D600(uint64_t a1)
{
  sub_100555E88(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10056D628()
{
  return sub_10056D640((void (*)(void))&_swift_release);
}

uint64_t sub_10056D640(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10056D690(void *a1, uint64_t a2)
{
  return sub_100556380(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void *, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

void sub_10056D69C(uint64_t a1)
{
  sub_100555960(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10056D6BC()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10056D704(int a1)
{
  sub_100555DD4(a1, *(void (**)(id, void))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(id *)(v1 + 40));
}

uint64_t sub_10056D710()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10056D748()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

void sub_10056D7E0()
{
  LOBYTE(v1) = *(unsigned char *)(v0 + 128);
  sub_1005549D8(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), v1, *(void (**)(void))(v0 + 136));
}

uint64_t sub_10056D830()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10056D870()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000C75D4;
  long long v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10091CE28 + dword_10091CE28);
  return v5(v2, v3);
}

uint64_t sub_10056D920()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[1] = sub_1000C75D4;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10091CE38 + dword_10091CE38);
  return v6(v2, v3, v4);
}

uint64_t sub_10056D9E4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10056DA24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000C75D4;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10091CE48 + dword_10091CE48);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10056DAF0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000C75D4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10091CE58 + dword_10091CE58);
  return v6(a1, v4);
}

void sub_10056DBA8(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10052F318(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10056DBC4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10056DC94(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDXPCStorePerformer, a3);
}

void sub_10056DBF0()
{
  sub_100552FD8(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(NSObject **)(v0 + 40), *(void (**)(void *, id))(v0 + 48), *(void *)(v0 + 56), *(NSObject **)(v0 + 64));
}

uint64_t sub_10056DC18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005541FC(a1, *(void **)(v2 + 16), a2);
}

id sub_10056DC34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_10055289C(a1, *(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10056DC64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10056DC94(a1, 0, (uint64_t (*)(uint64_t))type metadata accessor for RDXPCSuggestedAttributesPerformer, a2);
}

uint64_t sub_10056DC94@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  return sub_100554410(a1, *(void ***)(v4 + 16), *(void **)(v4 + 24), **(void ***)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), a4, a2, a3);
}

void sub_10056DDB4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_10056DE04(void (**a1)(char *, uint64_t))
{
  uint64_t v3 = a1;
  if (!a1)
  {
    uint64_t v3 = sub_10056DF24();
    if (!v3)
    {
      LOBYTE(v8) = 0;
      return v8 & 1;
    }
  }
  uint64_t v4 = a1;
  uint64_t v5 = v3;
  id v6 = [v1 assignmentContext];
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  id v8 = [v6 currentAssignment];

  if (!v8)
  {
LABEL_8:
    uint64_t v10 = v5;
    goto LABEL_9;
  }
  uint64_t v9 = (void (**)(char *, uint64_t))[v8 assigneeID];

  if (!v9)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_8;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  uint64_t v10 = (void (**)(char *, uint64_t))[v5 objectID];
  LOBYTE(v8) = static NSObject.== infix(_:_:)();

  uint64_t v5 = v9;
LABEL_9:

  return v8 & 1;
}

void (**sub_10056DF24())(char *, uint64_t)
{
  id v1 = [v0 list];
  id v2 = [v1 shareeContext];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 sharees];

  sub_1000963CC(0, &qword_10090A3E8);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = [v0 list];
  id v6 = (void (**)(char *, uint64_t))[v5 currentUserShareParticipantID];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    swift_bridgeObjectRetain();
    id v6 = sub_10056E06C(v4, v7, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v6;
}

void (**sub_10056E06C(unint64_t a1, uint64_t a2, uint64_t a3))(char *, uint64_t)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v24 = a2;
  uint64_t v23 = type metadata accessor for UUID();
  id v6 = *(void (***)(char *, uint64_t))(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v21 = v4;
    unint64_t v22 = a1 & 0xC000000000000001;
    uint64_t v10 = v6 + 1;
    uint64_t v11 = 4;
    while (1)
    {
      uint64_t v4 = v11 - 4;
      long long v12 = v22
          ? (void (**)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (void (**)(char *, uint64_t))*(id *)(a1 + 8 * v11);
      id v6 = v12;
      uint64_t v13 = v11 - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v14 = [v12 objectID];
      id v15 = [v14 uuid];

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = UUID.uuidString.getter();
      uint64_t v18 = v17;
      (*v10)(v8, v23);
      uint64_t v27 = v16;
      uint64_t v28 = v18;
      uint64_t v25 = v24;
      uint64_t v26 = v29;
      sub_1000E4FD8();
      uint64_t v19 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        return v6;
      }

      ++v11;
      if (v13 == v9) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10056E2B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v1 + 16);
  *id v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v9 = *(void *)(v1 + 64);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    long long v12 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    v12(sub_10056F328, v11, ObjectType, v9);
    swift_release();
    return sub_10056E828();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10056E44C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091CEB8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091CEB8);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10056E514(void *a1)
{
  uint64_t v2 = REMStoreSyncReasonSignificantTimeChanged;
  v4[4] = sub_10056E5D8;
  v4[5] = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_1000E13D0;
  v4[3] = &unk_1008CA678;
  uint64_t v3 = _Block_copy(v4);
  [a1 triggerThrottledSyncWithReason:v2 discretionary:1 completion:v3];
  _Block_release(v3);
}

void sub_10056E5D8()
{
  if (qword_1009078D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10091CEB8);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446210;
    swift_errorRetain();
    sub_100094134(&qword_10090C320);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1000C51B8(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Polling sync did finish {error: %{public}s}", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_10056E7D0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10056E828();
    return swift_release();
  }
  return result;
}

uint64_t sub_10056E828()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v66 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v60 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v64 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v60 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)v60 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void **)(v1 + 16);
  *(void *)uint64_t v19 = v20;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v19 = *(char **)(v1 + 32);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = (void (*)(uint64_t, char *))*((void *)v19 + 1);
  uint64_t v65 = ObjectType;
  v23(ObjectType, v19);
  uint64_t v24 = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000EACF4((uint64_t)v6);
    if (qword_1009078D0 == -1)
    {
LABEL_4:
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E2DC(v25, (uint64_t)qword_10091CEB8);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "nil lastSyncPoll. Polling", v28, 2u);
        swift_slowDealloc();
      }

      goto LABEL_17;
    }
LABEL_21:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v29 = v15;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v6, v24);
  uint64_t v30 = *(void *)(v1 + 80);
  uint64_t v31 = swift_getObjectType();
  double v32 = (*(double (**)(uint64_t, uint64_t))(v30 + 8))(v31, v30);
  Date.timeIntervalSinceNow.getter();
  if (v33 < -v32)
  {
    if (qword_1009078D0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E2DC(v34, (uint64_t)qword_10091CEB8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v15, v24);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    int v37 = v36;
    uint64_t v38 = v29;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v63 = v29;
      uint64_t v40 = v39;
      uint64_t v64 = (char *)swift_slowAlloc();
      uint64_t v68 = v64;
      *(_DWORD *)uint64_t v40 = 136446722;
      v60[1] = v40 + 4;
      sub_100419CFC();
      os_log_t v62 = v35;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v67 = sub_1000C51B8(v41, v42, (uint64_t *)&v68);
      int v61 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v43 = v13;
      unint64_t v44 = *(void (**)(char *, uint64_t))(v8 + 8);
      v44(v43, v24);
      *(_WORD *)(v40 + 12) = 1040;
      LODWORD(v67) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 18) = 2048;
      uint64_t v67 = *(void *)&v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v45 = v62;
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v61, "lastSyncPoll > configurationInterval. Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}", (uint8_t *)v40, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v44(v63, v24);
LABEL_18:
      uint64_t v57 = v66;
      Date.init()();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v24);
      uint64_t v58 = (*((uint64_t (**)(char *, uint64_t, char *))v19 + 2))(v57, v65, v19);
      return (*(uint64_t (**)(uint64_t))(v1 + 40))(v58);
    }

    uint64_t v7 = v24;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v8 + 8);
    v56(v13, v7);
    v56(v38, v7);
LABEL_17:
    uint64_t v24 = v7;
    goto LABEL_18;
  }
  if (qword_1009078D0 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_10008E2DC(v46, (uint64_t)qword_10091CEB8);
  id v47 = v64;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v64, v29, v24);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc();
    uint64_t v63 = v29;
    uint64_t v51 = v50;
    uint64_t v68 = (char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136446722;
    sub_100419CFC();
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v67 = sub_1000C51B8(v52, v53, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v54 = *(void (**)(char *, uint64_t))(v8 + 8);
    v54(v47, v24);
    *(_WORD *)(v51 + 12) = 1040;
    LODWORD(v67) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 18) = 2048;
    uint64_t v67 = *(void *)&v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "lastSyncPoll < throttingInterval. Not Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}", (uint8_t *)v51, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return ((uint64_t (*)(char *, uint64_t))v54)(v63, v24);
  }
  else
  {

    uint64_t v59 = *(void (**)(char *, uint64_t))(v8 + 8);
    v59(v47, v24);
    return ((uint64_t (*)(char *, uint64_t))v59)(v29, v24);
  }
}

uint64_t sub_10056F0A4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10056F0FC@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 lastSyncPoll];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10056F1C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v2 setLastSyncPoll:];
}

id sub_10056F2BC()
{
  return [v0 launchAndSignificantTimeChangePollThrottleInterval];
}

uint64_t type metadata accessor for RDSyncPoller()
{
  return self;
}

uint64_t sub_10056F2F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10056F328()
{
  return sub_10056E7D0();
}

uint64_t sub_10056F330(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10056F340()
{
  return swift_release();
}

uint64_t sub_10056F348(uint64_t a1)
{
  uint64_t result = sub_100573AE0(&qword_10091CFC8, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_10056F3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_10065A2C8(a1);
    return (void *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_100321930(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_10023C684(a1, v2);
}

uint64_t sub_10056F4A8(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (!v6)
  {
    unsigned int v11 = v3 & 0x3F;
    if (v11 > 6)
    {
      int64_t v25 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v20 = *(void *)(a1 + 72);
      if (v20)
      {
        uint64_t v7 = 1;
        goto LABEL_37;
      }
      if (v11 >= 8)
      {
        unint64_t v20 = *(void *)(a1 + 80);
        if (v20)
        {
          uint64_t v7 = 2;
        }
        else
        {
          unint64_t v20 = *(void *)(a1 + 88);
          if (!v20) {
            goto LABEL_44;
          }
          uint64_t v7 = 3;
        }
        goto LABEL_37;
      }
    }
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __clz(__rbit64(v6));
  unint64_t v9 = (v6 - 1) & v6;
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  while (2)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_7:
    unint64_t v12 = v10 & 0xC000000000000001;
    if (v9)
    {
LABEL_8:
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      if (v15 >= v25) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v2 + 8 * v15);
      ++v7;
      if (!v16)
      {
        uint64_t v7 = v15 + 1;
        if (v15 + 1 >= v25) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v2 + 8 * v7);
        if (!v16)
        {
          uint64_t v7 = v15 + 2;
          if (v15 + 2 >= v25) {
            goto LABEL_33;
          }
          unint64_t v16 = *(void *)(v2 + 8 * v7);
          if (!v16)
          {
            uint64_t v7 = v15 + 3;
            if (v15 + 3 >= v25) {
              goto LABEL_33;
            }
            unint64_t v16 = *(void *)(v2 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 4;
              if (v17 >= v25)
              {
LABEL_33:
                swift_release();
                return v10;
              }
              unint64_t v16 = *(void *)(v2 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  uint64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    break;
                  }
                  if (v7 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = *(void *)(v2 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_24;
                  }
                }
                __break(1u);
LABEL_50:
                uint64_t v21 = 0;
                uint64_t v22 = 6;
                if (v25 > 6) {
                  uint64_t v22 = v25;
                }
                uint64_t v23 = v22 - 6;
                while (v23 != v21)
                {
                  unint64_t v20 = *(void *)(a1 + 112 + 8 * v21++);
                  if (v20)
                  {
                    uint64_t v7 = v21 + 5;
                    goto LABEL_37;
                  }
                }
                return 0;
              }
              uint64_t v7 = v17;
            }
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_25:
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
      if ((v18 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = __CocoaSet.count.getter();
        if (v12) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v18 + 16);
        swift_bridgeObjectRetain();
        if (v12)
        {
LABEL_27:
          if (v19 < __CocoaSet.count.getter()) {
            goto LABEL_6;
          }
          goto LABEL_31;
        }
      }
      if (v19 < *(void *)(v10 + 16))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        uint64_t v10 = v18;
        goto LABEL_7;
      }
LABEL_31:
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_44:
    if (v11 >= 9)
    {
      unint64_t v20 = *(void *)(a1 + 96);
      if (v20)
      {
        uint64_t v7 = 4;
      }
      else
      {
        unint64_t v20 = *(void *)(a1 + 104);
        if (!v20) {
          goto LABEL_50;
        }
        uint64_t v7 = 5;
      }
LABEL_37:
      unint64_t v9 = (v20 - 1) & v20;
      unint64_t v8 = __clz(__rbit64(v20)) + (v7 << 6);
      continue;
    }
    return 0;
  }
}

uint64_t sub_10056F7B0(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (!v6)
  {
    unsigned int v11 = v3 & 0x3F;
    if (v11 > 6)
    {
      int64_t v24 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v19 = *(void *)(a1 + 72);
      if (v19)
      {
        uint64_t v7 = 1;
        goto LABEL_37;
      }
      if (v11 >= 8)
      {
        unint64_t v19 = *(void *)(a1 + 80);
        if (v19)
        {
          uint64_t v7 = 2;
        }
        else
        {
          unint64_t v19 = *(void *)(a1 + 88);
          if (!v19) {
            goto LABEL_44;
          }
          uint64_t v7 = 3;
        }
        goto LABEL_37;
      }
    }
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __clz(__rbit64(v6));
  unint64_t v9 = (v6 - 1) & v6;
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  while (2)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_7:
    if (v9)
    {
LABEL_8:
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v7 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      int64_t v14 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      if (v14 >= v24) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v2 + 8 * v14);
      ++v7;
      if (!v15)
      {
        uint64_t v7 = v14 + 1;
        if (v14 + 1 >= v24) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v2 + 8 * v7);
        if (!v15)
        {
          uint64_t v7 = v14 + 2;
          if (v14 + 2 >= v24) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v2 + 8 * v7);
          if (!v15)
          {
            uint64_t v7 = v14 + 3;
            if (v14 + 3 >= v24) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v2 + 8 * v7);
            if (!v15)
            {
              int64_t v16 = v14 + 4;
              if (v16 >= v24)
              {
LABEL_33:
                swift_release();
                return v10;
              }
              unint64_t v15 = *(void *)(v2 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  uint64_t v7 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    break;
                  }
                  if (v7 >= v24) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = *(void *)(v2 + 8 * v7);
                  ++v16;
                  if (v15) {
                    goto LABEL_24;
                  }
                }
                __break(1u);
LABEL_50:
                uint64_t v20 = 0;
                uint64_t v21 = 6;
                if (v24 > 6) {
                  uint64_t v21 = v24;
                }
                uint64_t v22 = v21 - 6;
                while (v22 != v20)
                {
                  unint64_t v19 = *(void *)(a1 + 112 + 8 * v20++);
                  if (v19)
                  {
                    uint64_t v7 = v20 + 5;
                    goto LABEL_37;
                  }
                }
                return 0;
              }
              uint64_t v7 = v16;
            }
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_25:
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
      if ((v10 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = __CocoaSet.count.getter();
        if ((v17 & 0xC000000000000001) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(v10 + 16);
        swift_bridgeObjectRetain();
        if ((v17 & 0xC000000000000001) != 0)
        {
LABEL_27:
          if (v18 < __CocoaSet.count.getter()) {
            goto LABEL_6;
          }
          goto LABEL_31;
        }
      }
      if (v18 < *(void *)(v17 + 16))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        uint64_t v10 = v17;
        goto LABEL_7;
      }
LABEL_31:
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_44:
    if (v11 >= 9)
    {
      unint64_t v19 = *(void *)(a1 + 96);
      if (v19)
      {
        uint64_t v7 = 4;
      }
      else
      {
        unint64_t v19 = *(void *)(a1 + 104);
        if (!v19) {
          goto LABEL_50;
        }
        uint64_t v7 = 5;
      }
LABEL_37:
      unint64_t v9 = (v19 - 1) & v19;
      unint64_t v8 = __clz(__rbit64(v19)) + (v7 << 6);
      continue;
    }
    return 0;
  }
}

uint64_t sub_10056FAB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091CF90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091CF90);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10056FB80(uint64_t a1)
{
  uint64_t result = sub_100573AE0(&qword_10091CFF0, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10056FBD8@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  int64_t v14 = (char *)&v41 - v13;
  id v15 = *a1;
  id v16 = [*a1 name:v12];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = a2;
    unint64_t v42 = v2;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v19 = [v15 canonicalName];
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v28 = [v15 firstOccurrenceCreationDate];
    if (v28)
    {
      uint64_t v29 = v28;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v14, 0, 1, v30);
    }
    else
    {
      uint64_t v31 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
    }
    id v32 = [v15 recencyDate];
    if (v32)
    {
      double v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v10, 0, 1, v34);
    }
    else
    {
      uint64_t v35 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v10, 1, 1, v35);
    }
    id v36 = [v15 uuidForChangeTracking];
    if (v36)
    {
      int v37 = v36;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v7, 0, 1, v38);
    }
    else
    {
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v7, 1, 1, v39);
    }
    a2 = v18;
    type metadata accessor for REMHashtagLabelDetailed_Codable();
    uint64_t result = REMHashtagLabelDetailed_Codable.__allocating_init(name:canonicalName:firstOccurrenceCreationDate:recencyDate:uuidForChangeTracking:)();
  }
  else
  {
    if (qword_1009078D8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10091CF90);
    id v22 = v15;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      int64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      unint64_t v42 = a2;
      *(_DWORD *)int64_t v25 = 138412290;
      id v27 = [v22 objectID];
      id v43 = v27;
      a2 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unexpected nil name REMCDHashtagLabel from AllHashtagLabelsInvocation {mid: %@}", v25, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t sub_1005700CC(uint64_t a1)
{
  uint64_t result = sub_100573AE0(&qword_10091D018, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.ReminderIDsIncludeExcludeOperationInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100570124@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10057139C(a1, a2);
}

uint64_t sub_10057013C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REMObjectID.codable.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100570178(uint64_t a1)
{
  uint64_t result = sub_100573AE0(&qword_10091D040, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1005701D0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v96 = a3;
  uint64_t v97 = a5;
  uint64_t v91 = sub_100094134(&qword_10090EB20);
  __chkstk_darwin(v91);
  uint64_t v102 = &v78[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v95 = type metadata accessor for REMHashtagLabelCollection();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v99 = &v78[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v98 = &v78[-v12];
  __chkstk_darwin(v13);
  uint64_t v101 = &v78[-v14];
  uint64_t v15 = _s10PredicatesOMa_3();
  __chkstk_darwin(v15);
  id v103 = &v78[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Style = type metadata accessor for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle();
  uint64_t v18 = *(void *)(Style - 8);
  __n128 v19 = __chkstk_darwin(Style);
  uint64_t v21 = &v78[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, a4, Style, v19);
  int v22 = (*(uint64_t (**)(unsigned char *, uint64_t))(v18 + 88))(v21, Style);
  if (v22 == enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.cachedOrStore(_:))
  {
    uint64_t v24 = a1;
    if (sub_100572A60(a1, a2))
    {
      int64_t v25 = v23;
      sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      swift_bridgeObjectRetain();
      id v26 = v25;
      static NSObject.== infix(_:_:)();

      REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.init(labels:isUpToDate:)();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_5;
  }
  uint64_t v24 = a1;
  if (v22 == enum case for REMHashtagLabelDataView.HashtagLabelInFilterFetchStyle.store(_:))
  {
LABEL_5:
    id v27 = v5;
    swift_storeEnumTagMultiPayload();
    id v28 = (void *)sub_100646F04();
    sub_1000963CC(0, (unint64_t *)&unk_100910210);
    id v29 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v30 = [(id)swift_getObjCClassFromMetadata() entity];
    [v29 setEntity:v30];

    [v29 setAffectedStores:0];
    [v29 setPredicate:v28];

    if (qword_100907AB8 != -1) {
      goto LABEL_40;
    }
    while (1)
    {
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v100 = v29;
      [v29 setSortDescriptors:isa];

      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10077A530;
      *(void *)(inited + 32) = swift_getKeyPath();
      *(void *)&long long v110 = inited;
      specialized Array._endMutation()();
      uint64_t v33 = v110;
      unint64_t v112 = _swiftEmptyArrayStorage;
      sub_1001DE1C4(0, 1, 0);
      uint64_t v34 = v112;
      if ((v33 & 0xC000000000000001) != 0)
      {
        uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v35 = *(void *)(v33 + 32);
        swift_retain();
      }
      uint64_t v89 = v24;
      uint64_t v90 = a2;
      uint64_t v36 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v37)
      {
        *(void *)&long long v110 = 0;
        *((void *)&v110 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v77._object = (void *)0x80000001007CAF70;
        v77._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v77);
        uint64_t v109 = v35;
        sub_100094134(&qword_10090FF50);
        _print_unlocked<A, B>(_:_:)();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        break;
      }
      uint64_t v38 = v36;
      a2 = v37;
      uint64_t v111 = &type metadata for String;
      swift_release();
      *(void *)&long long v110 = v38;
      *((void *)&v110 + 1) = a2;
      unint64_t v40 = v34[2];
      unint64_t v39 = v34[3];
      if (v40 >= v39 >> 1)
      {
        sub_1001DE1C4(v39 > 1, v40 + 1, 1);
        uint64_t v34 = v112;
      }
      v34[2] = v40 + 1;
      sub_10009A1A0(&v110, &v34[4 * v40 + 4]);
      swift_bridgeObjectRelease();
      Class v41 = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      id v42 = v100;
      [v100 setPropertiesToFetch:v41];

      uint64_t v43 = NSManagedObjectContext.fetch<A>(_:)();
      unint64_t v44 = v27;
      if (v27)
      {
        sub_100501D98((uint64_t)v103);

        return;
      }
      unint64_t v45 = v43;
      REMHashtagLabelCollection.init()();
      if (v45 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v105 = v73;
        if (!v73)
        {
LABEL_42:
          swift_bridgeObjectRelease();
          id v74 = v101;
          uint64_t v75 = REMHashtagLabelCollection.labels.getter();
          uint64_t v76 = (void *)REMFetchResultToken.codable.getter();
          sub_100572D1C(v75, (uint64_t)v76, v89, v90);

          swift_bridgeObjectRelease();
          REMHashtagLabelCollection.labels.getter();
          REMHashtagLabelDataView.HashtagLabelsReferencedByCustomSmartListFiltersInvocation.Result.init(labels:isUpToDate:)();

          (*(void (**)(unsigned char *, uint64_t))(v94 + 8))(v74, v95);
          sub_100501D98((uint64_t)v103);
          return;
        }
      }
      else
      {
        uint64_t v105 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v105) {
          goto LABEL_42;
        }
      }
      unint64_t v106 = v45 & 0xC000000000000001;
      int v88 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.hashtags(_:);
      int v81 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.untagged(_:);
      int v79 = enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.any(_:);
      uint64_t v80 = (void (**)(unsigned char *, uint64_t))(v94 + 8);
      uint64_t v87 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v94 + 32);
      uint64_t v24 = 4;
      *(void *)&long long v46 = 136315138;
      long long v93 = v46;
      unint64_t v92 = (char *)&type metadata for Any + 8;
      unint64_t v104 = v45;
      uint64_t v47 = v105;
      while (1)
      {
        id v48 = v106 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v45 + 8 * v24);
        id v29 = v48;
        uint64_t v49 = v24 - 3;
        if (__OFADD__(v24 - 4, 1)) {
          break;
        }
        id v50 = [v48 filterData];
        if (v50)
        {
          uint64_t v51 = v50;
          a2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v53 = v52;

          type metadata accessor for REMCustomSmartListFilterDescriptor();
          sub_100097E38(a2, v53);
          [v29 minimumSupportedVersion];
          uint64_t v107 = a2;
          unint64_t v54 = (void *)REMCustomSmartListFilterDescriptor.__allocating_init(data:minimumSupportedVersion:)();
          unint64_t v108 = v53;
          if (v44)
          {
            if (qword_1009078D8 != -1) {
              swift_once();
            }
            uint64_t v55 = type metadata accessor for Logger();
            sub_10008E2DC(v55, (uint64_t)qword_10091CF90);
            swift_errorRetain();
            swift_errorRetain();
            id v27 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v27, v56))
            {
              uint64_t v57 = swift_slowAlloc();
              a2 = swift_slowAlloc();
              *(void *)&long long v110 = a2;
              *(_DWORD *)uint64_t v57 = v93;
              swift_getErrorValue();
              uint64_t v58 = Error.rem_errorDescription.getter();
              *(void *)(v57 + 4) = sub_1000C51B8(v58, v59, (uint64_t *)&v110);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v27, v56, "HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode filter {error: %s}", (uint8_t *)v57, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v47 = v105;
              swift_slowDealloc();

              swift_errorRelease();
              sub_100097F34(v107, v108);
            }
            else
            {
              sub_100097F34(v107, v108);

              swift_errorRelease();
              swift_errorRelease();
              swift_errorRelease();
            }
            unint64_t v44 = 0;
            unint64_t v45 = v104;
            goto LABEL_18;
          }
          id v27 = v54;
          a2 = (uint64_t)v102;
          REMCustomSmartListFilterDescriptor.hashtags.getter();

          uint64_t v60 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags();
          uint64_t v61 = *(void *)(v60 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(a2, 1, v60) == 1)
          {
LABEL_30:

            sub_100097F34(v107, v108);
LABEL_35:
            uint64_t v47 = v105;
            goto LABEL_18;
          }
          int v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(a2, v60);
          if (v62 == v88)
          {
            (*(void (**)(uint64_t, uint64_t))(v61 + 96))(a2, v60);
            uint64_t v83 = *(void *)(a2 + 8);
            uint64_t v85 = a2 + *(int *)(sub_100094134(&qword_10090EB50) + 64);
            uint64_t v63 = v99;
            REMHashtagLabelCollection.init(labels:)();
            uint64_t v64 = v101;
            REMHashtagLabelCollection.union(_:)();
            uint64_t v65 = *v80;
            uint64_t v82 = v65;
            uint64_t v66 = v63;
            a2 = v95;
            v65(v66, v95);
            v65(v64, a2);
            unint64_t v86 = 0;
            uint64_t v84 = *v87;
            uint64_t v67 = v64;
            uint64_t v68 = v98;
            v84(v64, v98, a2);
            unint64_t v69 = v99;
            REMHashtagLabelCollection.init(labels:)();
            REMHashtagLabelCollection.union(_:)();

            sub_100097F34(v107, v108);
            unint64_t v70 = v69;
            uint64_t v71 = v82;
            v82(v70, a2);
            v71(v67, a2);
            unint64_t v45 = v104;
            v84(v67, v68, a2);
            unint64_t v44 = v86;
            uint64_t v72 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v85, v72);
            goto LABEL_35;
          }
          if (v62 == v81) {
            goto LABEL_30;
          }
          uint64_t v47 = v105;
          if (v62 != v79) {
            goto LABEL_45;
          }

          sub_100097F34(v107, v108);
        }

LABEL_18:
        ++v24;
        if (v49 == v47) {
          goto LABEL_42;
        }
      }
      __break(1u);
LABEL_40:
      swift_once();
    }
  }
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_45:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

void sub_100570F4C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 filterData];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100570FB4(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  [v2 setFilterData:];
}

uint64_t sub_10057102C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100094134(&qword_10091D0A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100573A28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_100573A7C(&qword_100910628);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    type metadata accessor for REMFetchResultToken_Codable();
    sub_100573AE0(&qword_10091D0B0, (void (*)(uint64_t))&type metadata accessor for REMFetchResultToken_Codable);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100571228()
{
  if (*v0) {
    return 0x6E656B6F74;
  }
  else {
    return 0x736C6562616CLL;
  }
}

uint64_t sub_10057125C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1005736D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100571284(uint64_t a1)
{
  unint64_t v2 = sub_100573A28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005712C0(uint64_t a1)
{
  unint64_t v2 = sub_100573A28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005712FC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005737B4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100571328(void *a1)
{
  return sub_10057102C(a1, *v1, v1[1]);
}

uint64_t sub_100571344(uint64_t a1)
{
  uint64_t result = sub_100573AE0(&qword_10091D068, (void (*)(uint64_t))&type metadata accessor for REMHashtagLabelDataView.HashtagIDsWithHashtagLabelNamesInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10057139C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  static Locale.current.getter();
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  sub_1000E4FD8();
  uint64_t v9 = StringProtocol.foldedStringForWriting(locale:)();
  uint64_t v11 = v10;
  uint64_t result = sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_10090FDF0);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1005714B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v19 = a2;
    uint64_t result = __CocoaSet.count.getter();
    uint64_t v3 = _swiftEmptyArrayStorage;
    if (!result)
    {
LABEL_15:
      a2 = v19;
      goto LABEL_16;
    }
    uint64_t v4 = result;
    uint64_t v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = __CocoaSet.startIndex.getter();
    uint64_t v21 = result;
    uint64_t v22 = v5;
    a2 = 1;
    unsigned __int8 v23 = 1;
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v4)
  {
LABEL_16:
    *(void *)a2 = v3;
    return result;
  }
  uint64_t v19 = a2;
  uint64_t v24 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v21 = sub_1003CA790(v2);
  uint64_t v22 = v6;
  unsigned __int8 v23 = v7 & 1;
  while (1)
  {
LABEL_9:
    while (1)
    {
      uint64_t v13 = v21;
      uint64_t v14 = v22;
      uint64_t v15 = v23;
      sub_1003C9F34(v21, v22, v23, v2);
      uint64_t v17 = v16;
      REMObjectID.codable.getter();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if ((v2 & 0xC000000000000001) != 0) {
        break;
      }
      uint64_t v8 = sub_1003C9E34(v13, v14, v15, v2);
      uint64_t v10 = v9;
      char v12 = v11;
      sub_1000E4EA4(v13, v14, v15);
      uint64_t v21 = v8;
      uint64_t v22 = v10;
      unsigned __int8 v23 = v12 & 1;
      if (!--v4) {
        goto LABEL_14;
      }
    }
    if ((v15 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_100094134(&qword_100916988);
    uint64_t v18 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v18(v20, 0);
    if (!--v4)
    {
LABEL_14:
      uint64_t result = sub_1000E4EA4(v21, v22, v23);
      uint64_t v3 = v24;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

id sub_1005716D0@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = *a1;
  return v2;
}

uint64_t sub_100571700()
{
  id v1 = [v0 hashtagLabelsInCustomSmartListFilterCache];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_100571768(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    [v2 setHashtagLabelsInCustomSmartListFilterCache:0];
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F20(a1, a2);
    [v2 setHashtagLabelsInCustomSmartListFilterCache:isa];
  }
}

uint64_t sub_1005717EC(uint64_t a1)
{
  return sub_100571818(a1);
}

uint64_t sub_100571818(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100094134((uint64_t *)&unk_1009147D0);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v5 = 0;
  uint64_t v25 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  int64_t v23 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v24 = result + 64;
  id v26 = (void *)result;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v30 = v2;
  uint64_t v27 = (v11 - 1) & v11;
  int64_t v28 = v5;
  for (unint64_t i = __clz(__rbit64(v11)) | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v14 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v25 + 48) + 16 * i);
    uint64_t v18 = v17[1];
    uint64_t v29 = *v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100094134(&qword_10091D080);
    type metadata accessor for REMObjectID_Codable();
    sub_1005731B8(&qword_10091D088, &qword_10091D080);
    sub_100573AE0((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    uint64_t v19 = Sequence.mapToSet<A>(_:)();
    uint64_t v2 = v30;
    swift_bridgeObjectRelease();
    *(void *)(v24 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v26;
    uint64_t v20 = (void *)(v26[6] + 16 * i);
    *uint64_t v20 = v29;
    v20[1] = v18;
    *(void *)(v26[7] + 8 * i) = v19;
    uint64_t v21 = v26[2];
    BOOL v13 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v26[2] = v22;
    unint64_t v11 = v27;
    int64_t v5 = v28;
    if (v27) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v5, 1);
    int64_t v14 = v5 + 1;
    if (v13) {
      goto LABEL_25;
    }
    if (v14 >= v23) {
      return result;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    if (!v15) {
      break;
    }
LABEL_15:
    uint64_t v30 = v2;
    uint64_t v27 = (v15 - 1) & v15;
    int64_t v28 = v14;
  }
  int64_t v16 = v14 + 1;
  if (v14 + 1 >= v23) {
    return result;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  int64_t v16 = v14 + 2;
  if (v14 + 2 >= v23) {
    return result;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  int64_t v16 = v14 + 3;
  if (v14 + 3 >= v23) {
    return result;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_14:
    int64_t v14 = v16;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v14 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v14 >= v23) {
      return result;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v16;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100571ADC(uint64_t a1, Swift::Int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (v4)
    {
      if (a2 >= 0) {
        uint64_t v2 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v5 = __CocoaSet.count.getter();
      a2 = sub_100321930(v2, v5);
      a1 = v3;
      goto LABEL_7;
    }
    type metadata accessor for REMObjectID_Codable();
    __CocoaSet.makeIterator()();
    if (!__CocoaSet.Iterator.next()())
    {
LABEL_33:
      swift_release();
      return (Swift::Int)&_swiftEmptySetSingleton;
    }
    uint64_t v7 = v3 + 56;
    while (1)
    {
      swift_dynamicCast();
      if (*(void *)(v3 + 16))
      {
        Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
        uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v10 = v8 & ~v9;
        if ((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
        {
          id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
          char v12 = static NSObject.== infix(_:_:)();

          if (v12)
          {
LABEL_20:
            unint64_t v16 = *((void *)&_swiftEmptySetSingleton + 2);
            if (*((void *)&_swiftEmptySetSingleton + 3) <= v16) {
              sub_100322050(v16 + 1);
            }
            Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
            uint64_t v17 = (char *)&_swiftEmptySetSingleton + 56;
            uint64_t v18 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
            unint64_t v19 = result & ~v18;
            unint64_t v20 = v19 >> 6;
            if (((-1 << v19) & ~*((void *)&_swiftEmptySetSingleton + (v19 >> 6) + 7)) != 0)
            {
              unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*((void *)&_swiftEmptySetSingleton + (v19 >> 6) + 7))) | v19 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v22 = 0;
              unint64_t v23 = (unint64_t)(63 - v18) >> 6;
              do
              {
                if (++v20 == v23 && (v22 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }
                BOOL v24 = v20 == v23;
                if (v20 == v23) {
                  unint64_t v20 = 0;
                }
                v22 |= v24;
                uint64_t v25 = *(void *)&v17[8 * v20];
              }
              while (v25 == -1);
              unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            }
            *(void *)&v17[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
            *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v21) = v26;
            ++*((void *)&_swiftEmptySetSingleton + 2);
            goto LABEL_13;
          }
          uint64_t v13 = ~v9;
          while (1)
          {
            unint64_t v10 = (v10 + 1) & v13;
            if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
              break;
            }
            id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
            char v15 = static NSObject.== infix(_:_:)();

            if (v15) {
              goto LABEL_20;
            }
          }
        }
      }

LABEL_13:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
    }
  }
  if (v4)
  {
LABEL_7:
    return sub_10046ABF0(a1, a2);
  }

  return sub_1005AE3A4(a1, a2);
}

uint64_t sub_100571DFC()
{
  uint64_t v1 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100912528);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMHashtagLabelDataView.AllHashtagLabelsInvocation.Parameters.sortingStyle.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1000966BC((uint64_t)v7, &qword_100912528);
LABEL_5:
    char v9 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v8 == enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    goto LABEL_5;
  }
  if (v8 != enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.recencyDate(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  char v9 = 1;
LABEL_8:
  unint64_t v10 = (objc_class *)sub_1001FFC40((uint64_t)&off_1008B1458);
  swift_arrayDestroy();
  id v11 = _swiftEmptyArrayStorage;
  unint64_t v12 = sub_1003E5740(0, 2, v9, v10, (Class)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (!v0)
  {
    uint64_t v13 = sub_1003E5A30(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      unint64_t v21 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      char v15 = (objc_class *)type metadata accessor for REMHashtagLabel_Codable();
      uint64_t v16 = v13 + 40;
      do
      {
        id v17 = objc_allocWithZone(v15);
        swift_bridgeObjectRetain();
        NSString v18 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v17 initWithName:v18];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v16 += 16;
        --v14;
      }
      while (v14);
      id v11 = v21;
    }
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v11;
}

const char *sub_100572134()
{
  return "filterData";
}

void sub_100572148(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10056F7B0(v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      goto LABEL_31;
    }
    return;
  }
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_6;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v8) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_26;
      }
      uint64_t v12 = *(void *)(v4 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(v4 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_26;
          }
          uint64_t v12 = *(void *)(v4 + 8 * v9);
          if (!v12)
          {
            int64_t v9 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_26;
            }
            uint64_t v12 = *(void *)(v4 + 8 * v9);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    uint64_t v7 = (v12 - 1) & v12;
LABEL_6:
    unint64_t v10 = swift_bridgeObjectRetain();
    sub_1002F56D8(v10);
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_26:
    swift_release();
    return;
  }
  uint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v9 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_100572338(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  Swift::Int v3 = sub_10056F4A8(v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
      goto LABEL_31;
    }
    return;
  }
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_6;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v8) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_26;
      }
      uint64_t v12 = *(void *)(v4 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(v4 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_26;
          }
          uint64_t v12 = *(void *)(v4 + 8 * v9);
          if (!v12)
          {
            int64_t v9 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_26;
            }
            uint64_t v12 = *(void *)(v4 + 8 * v9);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    uint64_t v7 = (v12 - 1) & v12;
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    Swift::Int v3 = sub_100571ADC(v10, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_26:
    swift_release();
    return;
  }
  uint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v9 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  if (_CocoaArrayWrapper.endIndex.getter())
  {
    sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
  }
}

void *sub_100572558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v44 = a3;
  int64_t v9 = (void *)type metadata accessor for REMHashtagLabelDataView.Operation();
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    uint64_t v45 = a1;
    sub_100094134(&qword_100911CB0);
    sub_1005731B8((unint64_t *)&qword_100911CB8, &qword_100911CB0);
    uint64_t v13 = Sequence.compactMapToSet<A>(_:)();
    uint64_t v14 = sub_1003E76F8(v13, 0, a4);
    swift_bridgeObjectRelease();
    if (v4) {
      return v9;
    }
    uint64_t v43 = sub_100571818(v14);
    uint64_t v5 = 0;
    swift_bridgeObjectRelease();
    if (!*(void *)(a2 + 16)) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v43 = sub_1002EDB30((uint64_t)_swiftEmptyArrayStorage);
    if (!*(void *)(a2 + 16))
    {
LABEL_4:
      uint64_t v42 = a4;
      uint64_t v15 = sub_1002EDB30((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_8;
    }
  }
  uint64_t v45 = a2;
  sub_100094134(&qword_100911CB0);
  sub_1005731B8((unint64_t *)&qword_100911CB8, &qword_100911CB0);
  uint64_t v16 = Sequence.compactMapToSet<A>(_:)();
  uint64_t v17 = sub_1003E76F8(v16, 0, a4);
  if (v5) {
    goto LABEL_14;
  }
  uint64_t v18 = v17;
  uint64_t v42 = a4;
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100571818(v18);
  swift_bridgeObjectRelease();
LABEL_8:
  sub_100572148(v15);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, void *))(v10 + 16))(v12, v44, v9);
  int v21 = (*(uint64_t (**)(char *, void *))(v10 + 88))(v12, v9);
  if (v21 == enum case for REMHashtagLabelDataView.Operation.all(_:))
  {
    uint64_t v22 = v42;
    if (*(void *)(v43 + 16) == *(void *)(a1 + 16))
    {
      sub_100572338(v43);
      int64_t v9 = v23;
    }
    else
    {
      int64_t v9 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(a2 + 16);
    if (*(void *)(a1 + 16))
    {
      if (v28)
      {
        uint64_t v29 = v20;
        uint64_t v30 = (uint64_t)v9;
LABEL_21:
        int64_t v9 = sub_10056F3A0(v29, v30);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v31 = sub_1003E76F8(2, 2, v22);
      if (!v5)
      {
        uint64_t v32 = sub_100571818(v31);
        swift_bridgeObjectRelease();
        sub_100572148(v32);
        uint64_t v34 = v33;
        swift_release();
        uint64_t v29 = v20;
        uint64_t v30 = v34;
        goto LABEL_21;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      return v9;
    }
    goto LABEL_30;
  }
  uint64_t v24 = v42;
  if (v21 == enum case for REMHashtagLabelDataView.Operation.some(_:))
  {
    sub_100572148(v43);
    int64_t v9 = v25;
    swift_bridgeObjectRelease();
    if (!*(void *)(a2 + 16))
    {
      uint64_t v35 = *(void *)(a1 + 16);
      swift_bridgeObjectRelease();
      if (v35) {
        return v9;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0
        || !_CocoaArrayWrapper.endIndex.getter())
      {
        return &_swiftEmptySetSingleton;
      }
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      return (void *)v40;
    }
    uint64_t v26 = sub_1003E76F8(2, 2, v24);
    if (!v5)
    {
      uint64_t v36 = sub_100571818(v26);
      swift_bridgeObjectRelease();
      sub_100572148(v36);
      uint64_t v38 = v37;
      swift_release();
      unint64_t v39 = sub_10056F3A0(v20, v38);
      swift_bridgeObjectRelease();
      sub_10065D03C((unint64_t)v39, v9);
      return (void *)v40;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100572A60(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  unint64_t v6 = v5;
  uint64_t result = 0;
  if (v5 >> 60 != 15)
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100573110();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    sub_100097F20(v4, v6);
    return v8;
  }
  return result;
}

uint64_t sub_100572D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100573164();
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v7 = v6;
  if (qword_1009078D8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10091CF90);
  sub_100097E38(v5, v7);
  int64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134217984;
    uint64_t v12 = v11;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v5), v5)) {
          goto LABEL_9;
        }
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100573100);
      case 2uLL:
        if (!__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16))) {
          goto LABEL_9;
        }
        goto LABEL_12;
      default:
LABEL_9:
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100097F34(v5, v7);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "HashtagLabelsReferencedByCustomSmartListFiltersInvocation: saving cache {dataSize: %ld}", v12, 0xCu);
        swift_slowDealloc();
        break;
    }
  }
  else
  {
    sub_100097F34(v5, v7);
  }

  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 16))(v5, v7, ObjectType, a4);
}

unint64_t sub_100573110()
{
  unint64_t result = qword_10091D070;
  if (!qword_10091D070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D070);
  }
  return result;
}

unint64_t sub_100573164()
{
  unint64_t result = qword_10091D078;
  if (!qword_10091D078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D078);
  }
  return result;
}

uint64_t sub_1005731B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100573208()
{
  uint64_t v1 = type metadata accessor for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100912528);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMHashtagLabelDataView.AllHashtagLabelsDetailedInvocation.Parameters.sortingStyle.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1000966BC((uint64_t)v7, &qword_100912528);
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v8 == enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.alphabetical(_:))
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    goto LABEL_5;
  }
  if (v8 != enum case for REMHashtagLabelDataView.AllHashtagLabelsInvocation.SortingStyle.recencyDate(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  uint64_t v9 = 1;
LABEL_8:
  os_log_type_t v10 = (objc_class *)sub_1001FFC40((uint64_t)&off_1008B15A0);
  swift_arrayDestroy();
  unint64_t v11 = sub_1003E5740(0, 2, v9, v10, (Class)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (!v0)
  {
    uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
    if (v11 >> 62) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v13 = 4;
      while (1)
      {
        id v14 = (v11 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v11 + 8 * v13);
        uint64_t v15 = v14;
        uint64_t v16 = v13 - 3;
        if (__OFADD__(v13 - 4, 1)) {
          break;
        }
        id v19 = v14;
        sub_10056FBD8(&v19, &v18);

        if (v18)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v13;
        if (v16 == v12)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v20;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
  }
  return v9;
}

void *_s5CacheVwCP(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

void _s5CacheVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

void *_s5CacheVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t _s5CacheVwta(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *_s5CacheVMa_0()
{
  return &_s5CacheVN;
}

uint64_t sub_1005736D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736C6562616CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1005737B4(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_10091D090);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_100573A28();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AFB0);
    HIBYTE(v10) = 0;
    sub_100573A7C(&qword_10090F8B0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = (uint64_t)v11;
    type metadata accessor for REMFetchResultToken_Codable();
    HIBYTE(v10) = 1;
    sub_100573AE0(&qword_10091D0A0, (void (*)(uint64_t))&type metadata accessor for REMFetchResultToken_Codable);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    id v9 = v11;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);

    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100573A28()
{
  unint64_t result = qword_10091D098;
  if (!qword_10091D098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D098);
  }
  return result;
}

uint64_t sub_100573A7C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058((uint64_t *)&unk_10090AFB0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100573AE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s5CacheV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100573BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5CacheV10CodingKeysOMa_0()
{
  return &_s5CacheV10CodingKeysON_0;
}

unint64_t sub_100573C30()
{
  unint64_t result = qword_10091D0B8;
  if (!qword_10091D0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D0B8);
  }
  return result;
}

unint64_t sub_100573C88()
{
  unint64_t result = qword_10091D0C0;
  if (!qword_10091D0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D0C0);
  }
  return result;
}

unint64_t sub_100573CE0()
{
  unint64_t result = qword_10091D0C8;
  if (!qword_10091D0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D0C8);
  }
  return result;
}

uint64_t sub_100573D38@<X0>(uint64_t *a1@<X8>)
{
  return sub_10057013C(a1);
}

unint64_t sub_100573D50(uint64_t a1)
{
  unint64_t result = sub_100573D78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100573D78()
{
  unint64_t result = qword_10091D108;
  if (!qword_10091D108)
  {
    type metadata accessor for REMSuggestedAttributesFeatureExtractor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D108);
  }
  return result;
}

uint64_t sub_100573DD0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091D0D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091D0D0);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100573E98@<X0>(void (*a1)(char *, uint64_t)@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  id v169 = (uint8_t *)a1;
  uint64_t v159 = a3;
  uint64_t v163 = type metadata accessor for Date();
  uint64_t v154 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  char v164 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_100094134((uint64_t *)&unk_100916EE0);
  __chkstk_darwin(v158);
  uint64_t v157 = (char *)&v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v165 = (uint64_t)&v142 - v7;
  uint64_t v156 = type metadata accessor for REMSuggestedAttributesTrainer.Result.IntentionalWord();
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  uint64_t v160 = (uint64_t)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v161 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v166 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v14 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v142 - v16;
  uint64_t v18 = type metadata accessor for REMSuggestedAttributeInputDataFrame();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v21 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = REMSuggestedAttributesFeatureExtractor.Parameters.maxSampleCount.getter();
  uint64_t v23 = v170;
  uint64_t result = (uint64_t)sub_10028658C(v22, v169);
  if (!v23)
  {
    uint64_t v147 = v14;
    uint64_t v144 = v11;
    uint64_t v143 = v9;
    uint64_t v151 = v19;
    uint64_t v153 = v18;
    uint64_t v152 = a2;
    REMSuggestedAttributeInputDataFrame.init(reminderDataSourceArray:)();
    uint64_t v25 = REMSuggestedAttributeInputDataFrame.index.getter();
    __chkstk_darwin(v25);
    v162 = v21;
    Swift::Int v140 = v21;
    uint64_t v26 = sub_1003B3EC8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100286A20, (uint64_t)&v138);
    uint64_t v150 = 0;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v166 + 8);
    uint64_t v148 = v12;
    uint64_t v146 = v166 + 8;
    uint64_t v145 = v27;
    v27(v17, v12);
    countAndFlagsBits = _swiftEmptyDictionarySingleton;
    v176._countAndFlagsBits = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v29 = (void (*)(char *, uint64_t))v26[2];
    uint64_t v149 = v26;
    if (v29)
    {
      uint64_t v30 = v26 + 7;
      long long v168 = xmmword_100776E40;
      do
      {
        uint64_t v32 = *(v30 - 3);
        uint64_t v33 = *(v30 - 2);
        uint64_t v35 = *(v30 - 1);
        uint64_t v34 = *v30;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v37 = sub_1001806F8(v35, v34);
        uint64_t v38 = countAndFlagsBits[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        char v41 = v36;
        if (countAndFlagsBits[3] < v40)
        {
          sub_10030FF24(v40, 1);
          countAndFlagsBits = (void *)v176._countAndFlagsBits;
          unint64_t v42 = sub_1001806F8(v35, v34);
          if ((v41 & 1) != (v43 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v37 = v42;
        }
        if (v41)
        {
          id v169 = (uint8_t *)v29;
          uint64_t v170 = v32;
          swift_bridgeObjectRelease();
          uint64_t v44 = countAndFlagsBits[7];
          uint64_t v45 = *(void **)(v44 + 8 * v37);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v167 = v44;
          *(void *)(v44 + 8 * v37) = v45;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v45 = sub_100309784(0, v45[2] + 1, 1, v45);
            *(void *)(v167 + 8 * v37) = v45;
          }
          unint64_t v48 = v45[2];
          unint64_t v47 = v45[3];
          unint64_t v49 = v48 + 1;
          uint64_t v29 = (void (*)(char *, uint64_t))v169;
          if (v48 >= v47 >> 1)
          {
            unint64_t v142 = v48 + 1;
            id v50 = sub_100309784((void *)(v47 > 1), v48 + 1, 1, v45);
            unint64_t v49 = v142;
            uint64_t v45 = v50;
            *(void *)(v167 + 8 * v37) = v50;
          }
          v45[2] = v49;
          uint64_t v31 = &v45[4 * v48];
          v31[4] = v170;
          v31[5] = v33;
          v31[6] = v35;
          v31[7] = v34;
        }
        else
        {
          sub_100094134(&qword_100911EE0);
          uint64_t v51 = swift_allocObject();
          *(_OWORD *)(v51 + 16) = v168;
          *(void *)(v51 + 32) = v32;
          *(void *)(v51 + 40) = v33;
          *(void *)(v51 + 48) = v35;
          *(void *)(v51 + 56) = v34;
          countAndFlagsBits[(v37 >> 6) + 8] |= 1 << v37;
          unint64_t v52 = (uint64_t *)(countAndFlagsBits[6] + 16 * v37);
          *unint64_t v52 = v35;
          v52[1] = v34;
          *(void *)(countAndFlagsBits[7] + 8 * v37) = v51;
          uint64_t v53 = countAndFlagsBits[2];
          BOOL v54 = __OFADD__(v53, 1);
          uint64_t v55 = v53 + 1;
          if (v54) {
            goto LABEL_38;
          }
          countAndFlagsBits[2] = v55;
        }
        v30 += 4;
        uint64_t v29 = (void (*)(char *, uint64_t))((char *)v29 - 1);
      }
      while (v29);
    }
    swift_bridgeObjectRelease();
    unint64_t v56 = v150;
    sub_100275A88((uint64_t)countAndFlagsBits);
    unint64_t v37 = v56;
    swift_release();
    if (qword_1009078E0 != -1) {
LABEL_39:
    }
      swift_once();
    uint64_t v57 = type metadata accessor for Logger();
    sub_10008E2DC(v57, (uint64_t)qword_10091D0D0);
    swift_bridgeObjectRetain_n();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v170 = v37;
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      v176._countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v61 = Array.description.getter();
      unint64_t v63 = v62;
      swift_bridgeObjectRelease();
      v175._countAndFlagsBits = sub_1000C51B8(v61, v63, &v176._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      unint64_t v37 = v170;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Training REMFilteredTitleEmbedding with %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v64 = v153;
    uint64_t v65 = v162;
    uint64_t v66 = type metadata accessor for REMFilteredTitleEmbedding();
    swift_allocObject();
    uint64_t v67 = REMFilteredTitleEmbedding.init(from:stopWordThresholdByPercent:)();
    if (v37)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v65, v64);
    }
    else
    {
      uint64_t v68 = v67;
      REMSuggestedAttributeInputDataFrame.title.getter();
      swift_retain();
      sub_100286A3C();
      swift_release();
      swift_release();
      v176._countAndFlagsBits = REMFilteredTitleEmbedding.vector(for:)();
      sub_100094134(&qword_100911EE8);
      swift_allocObject();
      uint64_t v69 = Series.init(_:defaultValue:)();
      sub_1005750BC();
      uint64_t v70 = (uint64_t)v144;
      static REMPaths.writableURLForMLModel()();
      uint64_t v170 = type metadata accessor for REMSuggestedAttributesTrainer();
      unint64_t v71 = dispatch thunk of Series.values.getter();
      id v169 = (uint8_t *)REMSuggestedAttributesFeatureExtractor.Parameters.numOfIntentWords.getter();
      REMSuggestedAttributesFeatureExtractor.Parameters.randomSeed.getter();
      type metadata accessor for MersenneTwister();
      swift_allocObject();
      uint64_t v72 = MersenneTwister.init(seed:)();
      uint64_t v177 = v66;
      uint64_t v178 = &protocol witness table for REMFilteredTitleEmbedding;
      v176._countAndFlagsBits = v68;
      swift_retain();
      uint64_t v73 = REMSuggestedAttributesFeatureExtractor.Parameters.outputFileName.getter();
      *(void *)&long long v168 = v69;
      uint64_t v74 = v160;
      uint64_t v76 = sub_10027D6E4(v160, v71, v70, (void (*)(char *, uint64_t))v169, 0, v72, (uint64_t)&v176, v73, v75);
      uint64_t v150 = v68;
      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v74, v156);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v176);
      swift_retain();
      sub_100286E58(v168);
      uint64_t v167 = 0;
      uint64_t v160 = v76;
      swift_release();
      Swift::String v77 = v147;
      Series.index.getter();
      strcpy((char *)&v176, "missing intent");
      HIBYTE(v176._object) = -18;
      sub_100094134(&qword_100911EF8);
      swift_allocObject();
      uint64_t v170 = Series.init(_:index:defaultValue:)();
      char v78 = REMSuggestedAttributesFeatureExtractor.Parameters.includeTitleVector.getter();
      BOOL v79 = (v78 & 1) == 0;
      if (v78) {
        uint64_t v80 = 0xA726F746365762CLL;
      }
      else {
        uint64_t v80 = 10;
      }
      if (v79) {
        unint64_t v81 = 0xE100000000000000;
      }
      else {
        unint64_t v81 = 0xE800000000000000;
      }
      v176._countAndFlagsBits = 0xD000000000000036;
      v176._object = (void *)0x80000001007D8640;
      unint64_t v82 = v81;
      String.append(_:)(*(Swift::String *)&v80);
      swift_bridgeObjectRelease();
      Swift::String v175 = v176;
      uint64_t v83 = v162;
      REMSuggestedAttributeInputDataFrame.index.getter();
      uint64_t v84 = *(void (**)(char *, uint64_t))(v166 + 16);
      uint64_t v85 = (uint64_t)v157;
      uint64_t v86 = v148;
      v166 += 16;
      id v169 = (uint8_t *)v84;
      ((void (*)(char *, char *, uint64_t))v84)(v157, v77, v148);
      sub_1000967F4(&qword_100916EF0, (uint64_t *)&unk_100910990);
      dispatch thunk of Collection.startIndex.getter();
      v145(v77, v86);
      uint64_t v87 = v158;
      *(void *)(v85 + *(int *)(v158 + 36)) = v176._countAndFlagsBits;
      uint64_t v88 = v165;
      sub_1004B6BB4(v85, v165);
      uint64_t v89 = (uint64_t *)(v88 + *(int *)(v87 + 36));
      uint64_t v90 = *v89;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v91 = v153;
      if (v90 != v176._countAndFlagsBits)
      {
        unint64_t v92 = (void (**)(char *, uint64_t))(v154 + 8);
        long long v93 = v164;
        uint64_t v94 = v165;
        uint64_t v95 = v148;
        do
        {
          uint64_t v98 = (void (*)(Swift::String *, void))dispatch thunk of Collection.subscript.read();
          v98(&v176, 0);
          uint64_t v99 = v147;
          ((void (*)(char *, uint64_t, uint64_t))v169)(v147, v94, v95);
          dispatch thunk of Collection.formIndex(after:)();
          v145(v99, v95);
          REMSuggestedAttributeInputDataFrame.iloc(_:)();
          v100._countAndFlagsBits = REMSuggestedAttributeInput.title.getter();
          String.append(_:)(v100);
          swift_bridgeObjectRelease();
          v101._countAndFlagsBits = 44;
          v101._object = (void *)0xE100000000000000;
          String.append(_:)(v101);
          REMSuggestedAttributeInput.creationDate.getter();
          uint64_t v102 = Date.description.getter();
          id v103 = v93;
          uint64_t v105 = v104;
          (*v92)(v103, v163);
          v106._countAndFlagsBits = v102;
          v106._object = v105;
          String.append(_:)(v106);
          swift_bridgeObjectRelease();
          v107._countAndFlagsBits = 44;
          v107._object = (void *)0xE100000000000000;
          String.append(_:)(v107);
          REMSuggestedAttributeInput.list.getter();
          uint64_t v108 = REMSuggestedList.description.getter();
          long long v110 = v109;
          swift_release();
          v111._countAndFlagsBits = v108;
          v111._object = v110;
          String.append(_:)(v111);
          swift_bridgeObjectRelease();
          v112._countAndFlagsBits = 44;
          v112._object = (void *)0xE100000000000000;
          String.append(_:)(v112);
          REMSuggestedAttributeInput.dueDayOfWeek.getter();
          uint64_t v113 = REMSuggestedWeekDay.description.getter();
          unint64_t v115 = v114;
          swift_release();
          v116._countAndFlagsBits = v113;
          v116._object = v115;
          String.append(_:)(v116);
          swift_bridgeObjectRelease();
          v117._countAndFlagsBits = 44;
          v117._object = (void *)0xE100000000000000;
          String.append(_:)(v117);
          REMSuggestedAttributeInput.location.getter();
          uint64_t v118 = dispatch thunk of ClassificationLabel.description.getter();
          id v120 = v119;
          swift_release();
          v121._countAndFlagsBits = v118;
          v121._object = v120;
          String.append(_:)(v121);
          swift_bridgeObjectRelease();
          v122._countAndFlagsBits = 44;
          v122._object = (void *)0xE100000000000000;
          String.append(_:)(v122);
          dispatch thunk of Series.iloc(_:)();
          String.append(_:)(v176);
          swift_bridgeObjectRelease();
          if (REMSuggestedAttributesFeatureExtractor.Parameters.includeTitleVector.getter())
          {
            v123._countAndFlagsBits = 44;
            v123._object = (void *)0xE100000000000000;
            String.append(_:)(v123);
            dispatch thunk of Series.iloc(_:)();
            dispatch thunk of RDVector.data.getter();
            swift_release();
            uint64_t v124 = Array.description.getter();
            uint64_t v126 = v125;
            swift_bridgeObjectRelease();
            v176._countAndFlagsBits = v124;
            v176._object = v126;
            uint64_t v173 = 91;
            unint64_t v174 = 0xE100000000000000;
            uint64_t v171 = 0;
            unint64_t v172 = 0xE000000000000000;
            unint64_t v127 = sub_1000E4FD8();
            Swift::Int v140 = (char *)v127;
            unint64_t v141 = v127;
            unint64_t v139 = v127;
            uint64_t v138 = &type metadata for String;
            uint64_t v128 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
            uint64_t v130 = v129;
            swift_bridgeObjectRelease();
            v176._countAndFlagsBits = v128;
            v176._object = v130;
            uint64_t v173 = 93;
            unint64_t v174 = 0xE100000000000000;
            uint64_t v171 = 0;
            unint64_t v172 = 0xE000000000000000;
            Swift::Int v140 = (char *)v127;
            unint64_t v141 = v127;
            uint64_t v138 = &type metadata for String;
            unint64_t v139 = v127;
            uint64_t v131 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
            uint64_t v133 = v132;
            swift_bridgeObjectRelease();
            v176._countAndFlagsBits = v131;
            v176._object = v133;
            uint64_t v173 = 32;
            unint64_t v174 = 0xE100000000000000;
            uint64_t v171 = 0;
            unint64_t v172 = 0xE000000000000000;
            Swift::Int v140 = (char *)v127;
            unint64_t v141 = v127;
            uint64_t v138 = &type metadata for String;
            unint64_t v139 = v127;
            uint64_t v134 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
            v136 = v135;
            swift_bridgeObjectRelease();
            v137._countAndFlagsBits = v134;
            v137._object = v136;
            String.append(_:)(v137);
            swift_bridgeObjectRelease();
          }
          v96._countAndFlagsBits = 10;
          v96._object = (void *)0xE100000000000000;
          String.append(_:)(v96);
          swift_release();
          uint64_t v97 = *v89;
          uint64_t v94 = v165;
          uint64_t v95 = v148;
          dispatch thunk of Collection.endIndex.getter();
          long long v93 = v164;
        }
        while (v97 != v176._countAndFlagsBits);
        uint64_t v91 = v153;
        uint64_t v83 = v162;
      }
      sub_1004B6C1C(v165);
      REMSuggestedAttributesFeatureExtractor.Result.init(success:featureString:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v161 + 8))(v144, v143);
      return (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v83, v91);
    }
  }
  return result;
}

unint64_t sub_1005750BC()
{
  unint64_t result = qword_10090F3A0;
  if (!qword_10090F3A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090F3A0);
  }
  return result;
}

void sub_1005750FC(void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = [self cancelledError];
  *(unsigned char *)(inited + 56) = 1;
  void v11[3] = v6;
  v11[4] = &off_1008BBB60;
  v11[0] = inited;
  unint64_t v8 = sub_1003DE3B8((uint64_t)a1);
  if (!v3)
  {
    for (unint64_t i = (void *)v8; i; unint64_t i = (void *)sub_1003DE3B8((uint64_t)a1))
    {
      sub_100578670(i, v2, a2, (uint64_t)v11, 1, a1, &v12);
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v11);
}

uint64_t sub_10057521C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091D110);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091D110);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1005752E4()
{
  id result = [self templates];
  qword_10091D128 = (uint64_t)result;
  return result;
}

uint64_t sub_100575320()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v17 - v12;
  v17[1] = *(void *)(v0 + 88);
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10057B634;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CA858;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_10057BA80((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v21);
  v18(v13, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1005756E4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 104);
    if ((v2 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (!v3)
      {
LABEL_6:
        sub_1005757F4();
        sub_100576554(1);
        if (swift_unknownObjectWeakLoadStrong())
        {
          uint64_t v4 = *(void *)(v1 + 64);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v1, ObjectType, v4);
          swift_release();
          return swift_unknownObjectRelease();
        }
      }
    }
    else if (!*(void *)(v2 + 16))
    {
      goto LABEL_6;
    }
    return swift_release();
  }
  return result;
}

void sub_1005757F4()
{
  uint64_t v85 = *v0;
  uint64_t v1 = sub_100094134(&qword_10091D278);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v79 = v1;
  uint64_t v80 = v2;
  __chkstk_darwin(v1);
  char v78 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v74 = *(void *)(v6 - 8);
  uint64_t v75 = v6;
  __chkstk_darwin(v6);
  uint64_t v72 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v76 = *(void *)(v8 - 8);
  uint64_t v77 = v8;
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_10091D280);
  uint64_t v82 = *(void *)(v13 - 8);
  unint64_t v83 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = (void *)sub_100094134((uint64_t *)&unk_10090DD10);
  uint64_t v65 = *(v66 - 1);
  __chkstk_darwin(v66);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100094134((uint64_t *)&unk_10091D290);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = (void *)v0[11];
  void *v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  char v26 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if (v26)
  {
    unint64_t v81 = v0;
    uint64_t v27 = (void *)v0[9];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v25;
    uint64_t v30 = v29;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100776E40;
    *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v31 + 40) = v32;
    uint64_t v33 = (void *)sub_100407394(v27, v28, v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v34 = sub_10032D9A0((uint64_t)&off_1008B7230);
    swift_arrayDestroy();
    id v87 = v33;
    *(void *)(swift_allocObject() + 16) = v34;
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090F110);
    sub_100094134((uint64_t *)&unk_10090DD40);
    uint64_t v84 = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
    Publisher.map<A>(_:)();
    swift_release();
    uint64_t v64 = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_1000967F4((unint64_t *)&unk_10090DD50, (uint64_t *)&unk_10091D280);
    unint64_t v35 = v83;
    Publisher.filter(_:)();
    (*(void (**)(char *, unint64_t))(v82 + 8))(v15, v35);
    swift_release();
    swift_bridgeObjectRelease();
    char v36 = v60;
    id v87 = v60;
    uint64_t v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v38 = *(void *)(v37 - 8);
    unint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    uint64_t v63 = v38 + 56;
    uint64_t v59 = v37;
    v62(v12, 1, 1, v37);
    unint64_t v83 = sub_1000D0FD4();
    uint64_t v61 = &protocol conformance descriptor for Publishers.Filter<A>;
    sub_1000967F4(&qword_10090F130, (uint64_t *)&unk_10090DD10);
    uint64_t v82 = sub_10057BA80((unint64_t *)&qword_10090D990, (void (*)(uint64_t))sub_1000D0FD4);
    id v39 = v36;
    uint64_t v40 = v66;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, void *))(v65 + 8))(v17, v40);
    uint64_t v66 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
    sub_1000967F4(&qword_10091F850, (uint64_t *)&unk_10091D290);
    uint64_t v41 = v68;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v19, v41);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    id v87 = (id)sub_100407054((void *)0xD000000000000016, 0x80000001007C7A00, 0);
    sub_100094134((uint64_t *)&unk_1009081E0);
    sub_100094134((uint64_t *)&unk_10090AB80);
    sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
    unint64_t v42 = v69;
    Publisher.map<A>(_:)();
    sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
    uint64_t v43 = v71;
    uint64_t v44 = v72;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v42, v43);
    swift_release();
    id v87 = v39;
    uint64_t v45 = v62;
    v62(v12, 1, 1, v37);
    sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
    id v46 = v39;
    unint64_t v47 = v73;
    uint64_t v48 = v75;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v48);
    sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
    unint64_t v49 = v81;
    uint64_t v50 = v77;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v47, v50);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v51 = (void *)v49[12];
    id v86 = v46;
    id v87 = v51;
    v45(v12, 1, 1, v59);
    id v52 = v46;
    swift_retain();
    sub_100094134(&qword_10091D2A0);
    sub_1000967F4(&qword_10091D2A8, &qword_10091D2A0);
    uint64_t v53 = v78;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

    swift_release();
    sub_1000967F4(qword_10091D2B0, &qword_10091D278);
    uint64_t v54 = v79;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v54);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    if (qword_1009078E8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v55 = type metadata accessor for Logger();
  sub_10008E2DC(v55, (uint64_t)qword_10091D110);
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "RDTemplateOperationQueue: Did set up subscriptions", v58, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100576554(int a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v56 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v49 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (void *)v2[11];
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  if (v2[15]) {
    return result;
  }
  uint64_t v54 = v5;
  *((unsigned char *)v2 + 120) = 1;
  sub_100576BE0(0);
  if (qword_1009078E8 != -1) {
    goto LABEL_15;
  }
LABEL_4:
  int v55 = a1;
  uint64_t v53 = v4;
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10091D110);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDTemplateOperationQueue: Began handling template operation queue items", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = v9;
  Date.init()();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = 0;
  id v23 = [self sharedBabysitter];
  uint64_t v52 = v22;
  if (v23)
  {
    uint64_t v24 = v23;
    swift_bridgeObjectRetain();
    uint64_t v25 = v2[22];
    NSString v26 = String._bridgeToObjectiveC()();
    id v27 = [v24 tokenByRegisteringAccount:v25 forOperationWithName:v26];

    *(void *)(v22 + 16) = v27;
    BOOL v28 = v27 == 0;
    if (v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = self;
      NSString v30 = String._bridgeToObjectiveC()();
      id v31 = [v29 babySatErrorWithOperationName:v30];

      sub_100094134((uint64_t *)&unk_10090DC70);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)(inited + 32) = 0x696669746E656469;
      *(void *)(inited + 40) = 0xEA00000000007265;
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(inited + 48) = v33;
      unint64_t v34 = sub_1002EDFE8(inited);
      uint64_t v50 = type metadata accessor for Analytics();
      v49[1] = v2[21];
      sub_10042085C(v34);
      swift_bridgeObjectRelease();
      id v35 = v31;
      static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
      swift_bridgeObjectRelease();
    }
    LODWORD(v50) = v28;
  }
  else
  {
    LODWORD(v50) = 0;
  }
  id v36 = [(id)v2[9] newBackgroundContextWithAuthor:RDTemplateOperationAuthor];
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = v54;
  id v39 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v40 = v56;
  uint64_t v51 = v21;
  uint64_t v41 = v21;
  uint64_t v42 = v53;
  v39(v56, v41, v53);
  unint64_t v43 = (*(unsigned __int8 *)(v38 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v44 + v43, v40, v42);
  unint64_t v45 = v44 + ((v43 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v45 = v52;
  *(unsigned char *)(v45 + 8) = v50;
  unint64_t v46 = v44 + ((v43 + v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v46 = v36;
  *(unsigned char *)(v46 + 8) = v55 & 1;
  *(void *)(v44 + ((v43 + v6 + 39) & 0xFFFFFFFFFFFFFFF8)) = v57;
  aBlock[4] = sub_10057B78C;
  aBlock[5] = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CA8D0;
  unint64_t v47 = _Block_copy(aBlock);
  swift_retain();
  id v48 = v36;
  swift_release();
  [v48 performBlock:v47];
  _Block_release(v47);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v42);
  return swift_release();
}

void sub_100576BE0(char a1)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009078E8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10091D110);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction INIT {name: com.apple.remindd.RDTemplateOperationQueue.handleIncompleteOperationQueueItems}", v10, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + 120) != (a1 & 1))
  {
    if (*(unsigned char *)(v1 + 120))
    {
      *(void *)(v1 + 112) = os_transaction_create();
      swift_unknownObjectRelease();
      static os_signpost_type_t.begin.getter();
      if (qword_1009078F0 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      static os_signpost_type_t.end.getter();
      if (qword_1009078F0 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      *(void *)(v1 + 112) = 0;
      swift_unknownObjectRelease();
    }
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction RELEASE {name: com.apple.remindd.RDTemplateOperationQueue.handleIncompleteOperationQueueItems}", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100576F10()
{
  return sub_100576554(0);
}

void sub_100576F38()
{
  sub_100576F90();
}

void sub_100576F90()
{
  id v0 = [self sharedBabysitter];
  if (v0)
  {
    uint64_t v1 = v0;
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 giveAccountWithIDAnotherChance:v2];

    if (qword_1009078E8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10091D110);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      sub_1000C51B8(0xD000000000000035, 0x80000001007D87B0, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDTemplateOperationQueue: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void sub_100577174(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int16 *)(a2 + 44) << 32);
  if ((v2 & 0xC00000000000) == 0x800000000000)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v3)
    {
      if (v4 == v5 && v3 == v6)
      {
        swift_bridgeObjectRelease();
        if ((v2 & 0x10000000000) == 0) {
          return;
        }
        goto LABEL_9;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v2 & 0x10000000000) != 0 && (v8) {
LABEL_9:
      }
        sub_100577250();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100577250()
{
  uint64_t v1 = *v0;
  id v2 = [(id)v0[9] newBackgroundContextWithAuthor:RDTemplateOperationAuthor];
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v7[4] = sub_10057BB08;
  v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100236C78;
  v7[3] = &unk_1008CAA38;
  uint64_t v5 = _Block_copy(v7);
  id v6 = v2;
  swift_release();
  [v6 performBlock:v5];
  _Block_release(v5);
}

uint64_t sub_10057739C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, char a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    if (a4)
    {
      type metadata accessor for REMCDTemplateOperationQueueItem();
      id v17 = sub_1003DDC90(a5);
      if (qword_1009078E8 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_10091D110);
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 134218242;
        uint64_t v30 = (uint64_t)v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v21 + 12) = 2080;
        if (a6) {
          uint64_t v22 = 1702195828;
        }
        else {
          uint64_t v22 = 0x65736C6166;
        }
        if (a6) {
          unint64_t v23 = 0xE400000000000000;
        }
        else {
          unint64_t v23 = 0xE500000000000000;
        }
        uint64_t v30 = sub_1000C51B8(v22, v23, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDTemplateOperationQueue: Blocked by babysitter. Batch completed all incomplete template operation queue items. {affectedCount: %ld, isOnLaunch: %s}", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      id v14 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(result + 80)];
      swift_weakInit();
      LOBYTE(v30) = 0;
      for (unint64_t i = (void *)sub_1003DE3B8((uint64_t)a5); i; unint64_t i = (void *)sub_1003DE3B8((uint64_t)a5))
      {
        sub_1005791CC(i, a7, v14, v13 + 16, 0, a5, &v30);
      }
      swift_weakDestroy();
      if (v30)
      {
        id v24 = sub_1003DEB88(a5);
        if (qword_1009078E8 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        sub_10008E2DC(v25, (uint64_t)qword_10091D110);
        NSString v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          BOOL v28 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)BOOL v28 = 134217984;
          uint64_t v31 = (uint64_t)v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDTemplateOperationQueue: Batch deleted completed template operation queue items. {deletionCount: %ld}", v28, 0xCu);
          swift_slowDealloc();
        }

        sub_100578368((uint64_t)v24);
      }
      else
      {
      }
    }
    sub_100577C30(v13, a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_100577C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[0] = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(a1 + 88);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  *(void *)(v18 + v17) = v21[0];
  aBlock[4] = sub_10057B9B8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CA9C0;
  os_log_type_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_10057BA80((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_100578008(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    swift_unknownObjectRelease();
    if (Strong)
    {
      v16[2] = *(void *)(v11 + 88);
      uint64_t v13 = swift_allocObject();
      swift_weakInit();
      sub_100096838(a1, (uint64_t)v18);
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      v16[1] = v13;
      sub_1000967D4(v18, v14 + 24);
      aBlock[4] = sub_10057B884;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008CA920;
      uint64_t v15 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v16[3] = _swiftEmptyArrayStorage;
      sub_10057BA80((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      v16[0] = v6;
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v15);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, void))(v7 + 8))(v9, v16[0]);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100578368(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t result = swift_unknownObjectRelease();
  if (Strong)
  {
    uint64_t v18 = *(void *)(v1 + 88);
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = a1;
    aBlock[4] = sub_10057B8C8;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008CA970;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    os_log_type_t v19 = _swiftEmptyArrayStorage;
    sub_10057BA80((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v17 = v7;
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100578670(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, unsigned char *a7)
{
  uint64_t v8 = v7;
  if (qword_1009078E8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091D110);
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    v75[0] = v12;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v65 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}", v15, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v7;
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100579D6C(v12, a3, (uint64_t)v75);
  sub_10057B594((uint64_t)v75, (uint64_t)&v70);
  uint64_t v17 = &selRef_intersectsSet_;
  if (v71)
  {
    sub_1000967D4(&v70, (uint64_t)v72);
    uint64_t v18 = v73;
    uint64_t v19 = v74;
    sub_1000C0DE0(v72, v73);
    (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(a6, v18, v19);
    if (v8)
    {
      swift_errorRetain();
      id v20 = v12;
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v67 = v12;
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(void *)&long long v70 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138543618;
        id v25 = [v20 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v25;

        *(_WORD *)(v23 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v26 = Error.rem_errorDescription.getter();
        sub_1000C51B8(v26, v27, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v23, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        id v12 = v67;
        swift_slowDealloc();

        uint64_t v17 = &selRef_intersectsSet_;
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v72);
  }
  else
  {
    sub_1000966BC((uint64_t)&v70, (uint64_t *)&unk_10091D258);
    id v28 = v12;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v68 = v12;
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138543362;
      id v33 = [v28 objectID];
      v72[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;
      uint64_t v17 = &selRef_intersectsSet_;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}", v31, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      id v12 = v68;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  id v34 = [v12 v17[261]:v65];
  v72[0] = 0;
  id v35 = [a6 existingObjectWithID:v34 error:v72];

  id v36 = v72[0];
  if (v35)
  {
    type metadata accessor for REMCDTemplateOperationQueueItem();
    uint64_t v37 = (void *)swift_dynamicCastClass();
    id v38 = v36;
    if (!v37)
    {

      id v41 = v12;
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 138543362;
        id v54 = [v41 v17[261]];
        v72[0] = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v53 = v54;

        _os_log_impl((void *)&_mh_execute_header, v50, v51, "RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}", v52, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_31;
      }

      goto LABEL_30;
    }
    [v37 setIsCompleted:1];
    v72[0] = 0;
    unsigned __int8 v39 = [a6 save:v72];
    id v40 = v72[0];
    if (v39)
    {
      *a7 = 1;
      id v41 = v12;
      id v42 = v40;
      unint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        unint64_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v45 = 138543362;
        id v47 = [v41 v17[261]];
        v72[0] = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v46 = v47;

        _os_log_impl((void *)&_mh_execute_header, v43, v44, "RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}", v45, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_31;
      }

LABEL_30:
      goto LABEL_31;
    }
    id v48 = v12;
    id v55 = v72[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    id v48 = v12;
    id v49 = v72[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_errorRetain();
  id v56 = v48;
  swift_errorRetain();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v60 = (void *)swift_slowAlloc();
    v72[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v59 = 138543618;
    id v61 = [v56 objectID];
    *(void *)&long long v70 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v60 = v61;

    *(_WORD *)(v59 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v62 = Error.rem_errorDescription.getter();
    *(void *)&long long v70 = sub_1000C51B8(v62, v63, (uint64_t *)v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v59, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_31:
  [a6 reset];
  return sub_1000966BC((uint64_t)v75, (uint64_t *)&unk_10091D258);
}

uint64_t sub_1005791CC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, unsigned char *a7)
{
  uint64_t v8 = v7;
  if (qword_1009078E8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10091D110);
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    v74[0] = v12;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v64 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}", v15, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v7;
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100579D6C(v12, a3, (uint64_t)v74);
  sub_10057B594((uint64_t)v74, (uint64_t)&v69);
  uint64_t v17 = &selRef_intersectsSet_;
  if (v70)
  {
    sub_1000967D4(&v69, (uint64_t)v71);
    uint64_t v18 = v72;
    uint64_t v19 = v73;
    sub_1000C0DE0(v71, v72);
    (*(void (**)(void *, uint64_t, uint64_t))(v19 + 16))(a6, v18, v19);
    if (v8)
    {
      swift_errorRetain();
      id v66 = v12;
      id v20 = v12;
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(void *)&long long v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138543618;
        id v25 = [v20 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v25;

        *(_WORD *)(v23 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v26 = Error.rem_errorDescription.getter();
        sub_1000C51B8(v26, v27, (uint64_t *)&v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v23, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v17 = &selRef_intersectsSet_;
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
      id v12 = v66;
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v71);
  }
  else
  {
    sub_1000966BC((uint64_t)&v69, (uint64_t *)&unk_10091D258);
    id v28 = v12;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v67 = v12;
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138543362;
      id v33 = [v28 objectID];
      v71[0] = v33;
      uint64_t v17 = &selRef_intersectsSet_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v33;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}", v31, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      id v12 = v67;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  id v34 = [v12 v17[261]];
  v71[0] = 0;
  id v35 = [a6 existingObjectWithID:v34 error:v71];

  id v36 = v71[0];
  if (!v35)
  {
    id v48 = v71[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_26;
  }
  type metadata accessor for REMCDTemplateOperationQueueItem();
  uint64_t v37 = (void *)swift_dynamicCastClass();
  id v38 = v36;
  if (v37)
  {
    [v37 setIsCompleted:1];
    v71[0] = 0;
    unsigned __int8 v39 = [a6 save:v71];
    id v40 = v71[0];
    if (v39)
    {
      *a7 = 1;
      id v41 = v12;
      id v42 = v40;
      unint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        unint64_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v45 = 138543362;
        id v47 = [v41 v17[261]];
        v71[0] = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v46 = v47;

        _os_log_impl((void *)&_mh_execute_header, v43, v44, "RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}", v45, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_32;
      }

      goto LABEL_31;
    }
    id v54 = v71[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_26:
    swift_errorRetain();
    id v55 = v12;
    swift_errorRetain();
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = (void *)swift_slowAlloc();
      v71[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 138543618;
      id v60 = [v55 v17[261]];
      *(void *)&long long v69 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v59 = v60;

      *(_WORD *)(v58 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v61 = Error.rem_errorDescription.getter();
      *(void *)&long long v69 = sub_1000C51B8(v61, v62, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}", (uint8_t *)v58, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_32;
  }

  id v41 = v12;
  id v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v49, v50))
  {
    os_log_type_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v51 = 138543362;
    id v53 = [v41 v17[261]];
    v71[0] = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v52 = v53;

    _os_log_impl((void *)&_mh_execute_header, v49, v50, "RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}", v51, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_32;
  }

LABEL_31:
LABEL_32:
  sub_10057B594((uint64_t)v74, (uint64_t)&v69);
  if (v70)
  {
    sub_1000967D4(&v69, (uint64_t)v71);
    sub_100578008((uint64_t)v71);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v71);
  }
  else
  {
    sub_1000966BC((uint64_t)&v69, (uint64_t *)&unk_10091D258);
  }
  [a6 reset];
  return sub_1000966BC((uint64_t)v74, (uint64_t *)&unk_10091D258);
}

void sub_100579D6C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  switch((unsigned __int16)[a1 operationTypeRawValue])
  {
    case 1u:
      uint64_t v18 = sub_1001C2550();
      if (!v18) {
        goto LABEL_24;
      }
      uint64_t v19 = v18;
      id v20 = sub_1001C27B0();
      if (!v20) {
        goto LABEL_23;
      }
      id v21 = v20;
      uint64_t v22 = type metadata accessor for RDTemplateOperationCopyRemindersFromTemplateToREMList();
      uint64_t v23 = swift_allocObject();
      *(unsigned char *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = v19;
      *(void *)(v23 + 32) = v21;
      uint64_t v24 = a2;
      *(void *)(v23 + 40) = a2;
      *(void *)(v23 + 48) = 50;
      id v25 = &off_1008C6870;
      goto LABEL_13;
    case 2u:
      uint64_t v26 = sub_1001C2550();
      if (!v26) {
        goto LABEL_24;
      }
      uint64_t v19 = v26;
      id v27 = sub_1001C27B0();
      if (!v27) {
        goto LABEL_23;
      }
      id v28 = v27;
      uint64_t v22 = type metadata accessor for RDTemplateOperationCopyRemindersFromPublicTemplateToREMList();
      uint64_t v23 = swift_allocObject();
      *(unsigned char *)(v23 + 16) = 1;
      *(void *)(v23 + 24) = v19;
      *(void *)(v23 + 32) = v28;
      uint64_t v24 = a2;
      *(void *)(v23 + 40) = a2;
      *(void *)(v23 + 48) = 50;
      id v25 = &off_1008C29B0;
LABEL_13:
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v25;
      *(void *)a3 = v23;
      id v29 = v24;
      return;
    case 3u:
    case 4u:
      id v5 = sub_1001C2550();
      if (!v5) {
        goto LABEL_24;
      }
      uint64_t v6 = v5;
      id v7 = sub_1001C27B0();
      if (!v7) {
        goto LABEL_18;
      }
      uint64_t v8 = v7;
      id v9 = [a1 configurationData];
      if (!v9)
      {

        uint64_t v6 = v8;
LABEL_18:

        goto LABEL_24;
      }
      uint64_t v10 = v9;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      id v59 = 0;
      id v14 = [a2 fetchPrimaryActiveCloudKitAccountREMObjectIDWithError:&v59];
      id v15 = v59;
      if (!v14)
      {
        id v58 = (id)v11;
        id v32 = v59;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        if (qword_1009078E8 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_10091D110);
        id v34 = a1;
        id v35 = v6;
        id v36 = v8;
        id v37 = v34;
        id v38 = v35;
        id v39 = v36;
        id v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc();
          type = (void *)swift_slowAlloc();
          id v59 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v42 = 136315650;
          id v56 = v40;
          sub_1001C2508();
          sub_100094134(&qword_10091D268);
          os_log_type_t log = v41;
          uint64_t v43 = Optional.descriptionOrNil.getter();
          sub_1000C51B8(v43, v44, (uint64_t *)&v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v42 + 12) = 2114;
          id v45 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *type = v6;

          *(_WORD *)(v42 + 22) = 2114;
          id v46 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          type[1] = v8;

          uint64_t v19 = v56;
          _os_log_impl((void *)&_mh_execute_header, v56, log, "RDTemplateOperationQueue: Cannot create template operation without primary active CloudKit account {operationType: %s, templateObjectID: %{public}@, listObjectID: %{public}@}", (uint8_t *)v42, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100097F34((uint64_t)v58, v13);

LABEL_23:
        }
        else
        {

          sub_100097F34((uint64_t)v58, v13);
        }
LABEL_24:
        *(void *)(a3 + 32) = 0;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        return;
      }
      id v16 = v14;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      id v17 = v15;
      JSONDecoder.init()();
      type metadata accessor for REMTemplateConfiguration_Codable();
      sub_10057BA80(&qword_10091D270, (void (*)(uint64_t))&type metadata accessor for REMTemplateConfiguration_Codable);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      id v47 = v59;
      char v48 = sub_1001C2508();
      if (v48 == 2)
      {
        uint64_t v49 = type metadata accessor for RDTemplateOperationCopyRemindersFromREMListToTemplate();
        uint64_t v50 = swift_allocObject();
        *(unsigned char *)(v50 + 64) = 2;
        *(void *)(v50 + 16) = v6;
        *(void *)(v50 + 24) = v8;
        *(void *)(v50 + 32) = v16;
        *(void *)(v50 + 40) = v47;
        os_log_type_t v51 = a2;
        *(void *)(v50 + 48) = a2;
        *(void *)(v50 + 56) = 50;
        uint64_t v52 = &off_1008C1030;
      }
      else
      {
        uint64_t v49 = type metadata accessor for RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate();
        uint64_t v50 = swift_allocObject();
        *(unsigned char *)(v50 + 64) = 3;
        *(void *)(v50 + 16) = v6;
        *(void *)(v50 + 24) = v8;
        *(void *)(v50 + 32) = v16;
        *(void *)(v50 + 40) = v47;
        os_log_type_t v51 = a2;
        *(void *)(v50 + 48) = a2;
        *(void *)(v50 + 56) = 50;
        uint64_t v52 = &off_1008BAB30;
      }
      *(void *)(a3 + 24) = v49;
      *(void *)(a3 + 32) = v52;
      id v53 = v51;
      sub_100097F34(v11, v13);
      *(void *)a3 = v50;
      return;
    case 5u:
      uint64_t v30 = type metadata accessor for RDTemplateOperationBatchDeleteCachedPublicTemplates();
      uint64_t v31 = swift_allocObject();
      *(unsigned char *)(v31 + 16) = 4;
      *(void *)(v31 + 24) = 0;
      *(void *)(a3 + 24) = v30;
      *(void *)(a3 + 32) = &off_1008BF000;
      *(void *)a3 = v31;
      return;
    default:
      goto LABEL_24;
  }
}

uint64_t sub_10057A6A4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v5 = *(void *)(v4 + 64);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, a2, ObjectType, v5);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10057A754(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v5 = *(void *)(v4 + 64);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24))(v4, a2, ObjectType, v5);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_10057A804(uint64_t a1, void *a2, void *a3)
{
  uint64_t v52 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v16 = Strong;
    uint64_t v48 = v5;
    if (qword_100907B10 != -1) {
      swift_once();
    }
    id v17 = swift_retain();
    id v18 = sub_10034A86C(v17);
    swift_release();
    if (!v18) {
      goto LABEL_10;
    }
    uint64_t v49 = v16;
    if (sub_1003DEA54(4))
    {
      swift_release();

      return;
    }
    type metadata accessor for REMCDTemplateOperationQueueItem();
    id v27 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a2];
    id v47 = v18;
    [v27 setAccount:v18];
    [v27 setOperationTypeRawValue:5];
    [v27 setPriorityRawValue:10];
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v29 = v11;
    uint64_t v30 = v27;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v29);
    [v27 setCreationDate:isa];

    aBlock[0] = 0;
    if ([a2 save:aBlock])
    {
      uint64_t v31 = qword_1009078E8;
      id v32 = aBlock[0];
      if (v31 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_10008E2DC(v33, (uint64_t)qword_10091D110);
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        id v36 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)id v36 = 136315138;
        id v46 = v36 + 4;
        uint64_t v37 = sub_1000D82B8();
        id v54 = (void *)sub_1000C51B8(v37, v38, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s: Inserted template operation queue item for batch deleting cached public templates", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v39 = v49;
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v40 = *(void *)(v39 + 64);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v40 + 32))(v39, v30, ObjectType, v40);
        swift_unknownObjectRelease();
      }
      uint64_t v52 = *(void **)(v39 + 88);
      uint64_t v42 = (void *)swift_allocObject();
      swift_weakInit();
      aBlock[4] = sub_10057BB14;
      aBlock[5] = v42;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008CAA60;
      uint64_t v43 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      id v54 = _swiftEmptyArrayStorage;
      sub_10057BA80((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v43);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v51);
      swift_release();
      swift_release();
LABEL_10:
      swift_release();
      return;
    }
    id v44 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v45 = v47;
    if (qword_1009078E8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10091D110);
    swift_errorRetain();
    swift_errorRetain();
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      id v54 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      aBlock[0] = v52;
      swift_getMetatypeMetadata();
      uint64_t v23 = String.init<A>(describing:)();
      aBlock[0] = (id)sub_1000C51B8(v23, v24, (uint64_t *)&v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v25 = Error.rem_errorDescription.getter();
      aBlock[0] = (id)sub_1000C51B8(v25, v26, (uint64_t *)&v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Failed to insert template operation queue item for batch deleting cached public templates {error: %{public}s}", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_errorRelease();
    }
    else
    {

      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10057B0FC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100576554(0);
    return swift_release();
  }
  return result;
}

id sub_10057B1DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDTemplateOperationQueue.BabysitTarget();
  return [super dealloc];
}

id *sub_10057B214()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)(v0 + 2));
  sub_1000F3DB4((uint64_t)(v0 + 7));

  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10057B28C()
{
  sub_10057B214();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationQueue()
{
  return self;
}

uint64_t type metadata accessor for RDTemplateOperationQueue.BabysitTarget()
{
  return self;
}

void sub_10057B308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    char v12 = *(unsigned char *)(Strong + 120);
    *(unsigned char *)(v11 + 120) = 0;
    sub_100576BE0(v12);
    swift_release();
  }
  if (qword_1009078E8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091D110);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, a2, v3);
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134217984;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v18 = v17;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    v19(v7, v3);
    uint64_t v20 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v19(v9, v3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDTemplateOperationQueue: Finished handling template operation queue items {elapsedSeconds: %f}", v16, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

uint64_t sub_10057B594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10091D258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10057B5FC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057B634()
{
  return sub_1005756E4();
}

uint64_t sub_10057B63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10057B64C()
{
  return swift_release();
}

uint64_t sub_10057B654()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057B68C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10057B78C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v2;
  uint64_t v7 = *(void *)(v0 + v4);
  char v8 = *(unsigned char *)(v0 + v4 + 8);
  uint64_t v9 = v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void **)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  uint64_t v12 = *(void *)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFFFF8));

  return sub_10057739C(v5, v6, v7, v8, v10, v11, v12);
}

uint64_t sub_10057B844()
{
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10057B884()
{
  return sub_10057A6A4(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10057B890()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10057B8C8()
{
  return sub_10057A754(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10057B8D0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10057B9B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_10057B308(v2, v3);
}

uint64_t sub_10057BA48()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057BA80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10057BAC8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10057BB08()
{
  sub_10057A804(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10057BB14()
{
  return sub_10057B0FC();
}

uint64_t sub_10057BB4C()
{
  if ((static Array<A>.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for Array(), swift_getWitnessTable(), (static Dictionary<>.== infix(_:_:)() & 1) != 0)
    && (static Dictionary<>.== infix(_:_:)() & 1) != 0
    && (static Dictionary<>.== infix(_:_:)() & 1) != 0)
  {
    char v0 = static Set.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t sub_10057BC84()
{
  return sub_10057BB4C();
}

uint64_t sub_10057BC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10057BC9C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_10057BD68(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_10057BF3C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_10057C078(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_10057C1EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_10057C42C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_10057C5A0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_10057C7E0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_10057C924(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x10057CAFCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_10057CB24(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_10057CBEC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for RDManualSortHint.ValidationError()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10057CD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t type metadata accessor for RDManualSortHint()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10057CD4C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091D3C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091D3C0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10057CE14()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned int v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_10057EF10;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CAC80;
  unsigned int v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100517304((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_10057D090()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 24);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    if (qword_1009078F8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10091D3C0);
  int v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "ICCCU: Starting ICCloudConfigurationUpdater", v12, 2u);
    swift_slowDealloc();
  }

  sub_10057D258(v13);
}

void sub_10057D258(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)(*v1 + 80) - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v38 - v4;
  uint64_t v41 = *(void *)(v6 + 88);
  uint64_t v42 = *(void *)(v41 + 8);
  uint64_t v8 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v43 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  unsigned int v18 = (char **)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (void *)v2[3];
  *unsigned int v18 = v19;
  (*(void (**)(void *, void, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v40 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  int v20 = (char *)v2 + *(void *)(*v2 + 120);
  swift_beginAccess();
  uint64_t v21 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v13, v20, v9);
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v22 + 48))(v13, 1);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v9);
  if (v23 == 1)
  {
    uint64_t v24 = (char *)v2 + *(void *)(*v2 + 128);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v39 = v22;
    uint64_t v26 = v8;
    v25(v5, v24, v8);
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    id v28 = (void *)swift_allocObject();
    uint64_t v29 = v41;
    v28[2] = v8;
    void v28[3] = v29;
    void v28[4] = v27;
    unint64_t v38 = v20;
    uint64_t v30 = v42;
    uint64_t v41 = v9;
    uint64_t v31 = *(void (**)(id, uint64_t (*)(), void *, uint64_t, uint64_t))(v42 + 24);
    swift_retain();
    id v32 = v43;
    v31(v40, sub_10057EF9C, v28, v26, v30);
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v26);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v32, 0, 1, AssociatedTypeWitness);
    uint64_t v33 = v38;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v33, v32, v41);
    swift_endAccess();
    sub_10057E1C4();
    return;
  }
  if (qword_1009078F8 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E2DC(v34, (uint64_t)qword_10091D3C0);
  os_log_type_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ICCCU: Unexpectedly having an existing non-nil scheduler (xpcActivity) when trying to create and schedule a new one", v37, 2u);
    swift_slowDealloc();
  }
}

id sub_10057D7C4()
{
  if (qword_1009078F8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10091D3C0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ICCCU: Running scheduled background activity, let's check if we should download remote cloud configuration file", v3, 2u);
    swift_slowDealloc();
  }

  return sub_10057D8B0();
}

id sub_10057D8B0()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v1 - 8);
  uint64_t v61 = (char *)v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v55 - v4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v59 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v55 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v55 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  uint64_t v19 = (void *)((char *)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v20 = (void *)v0[3];
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  id v21 = v20;
  uint64_t ObjectType = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
  if ((ObjectType & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  id v60 = (id)v0[2];
  [v60 cloudConfigurationDownloadThrottleInterval];
  double v24 = v23;
  uint64_t v15 = v0[5];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000EACF4((uint64_t)v5);
    if (qword_1009078F8 == -1)
    {
LABEL_4:
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E2DC(v25, (uint64_t)qword_10091D3C0);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "ICCCU: lastCloudConfigurationDownload == nil, downloading remote config", v28, 2u);
        swift_slowDealloc();
      }

LABEL_17:
      id v53 = v61;
      Date.init()();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v53, 0, 1, v6);
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v53, ObjectType, v15);
      return [v60 downloadRemoteConfiguration];
    }
LABEL_20:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v29 = v14;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v5, v6);
  Date.timeIntervalSinceNow.getter();
  if (v30 < -v24)
  {
    if (qword_1009078F8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10091D3C0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    int v34 = v33;
    os_log_type_t v35 = v29;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v36 = swift_slowAlloc();
      id v58 = v29;
      uint64_t v37 = v36;
      id v59 = (char *)swift_slowAlloc();
      unint64_t v63 = v59;
      *(_DWORD *)uint64_t v37 = 136446722;
      v55[1] = v37 + 4;
      sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
      os_log_t v57 = v32;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1000C51B8(v38, v39, (uint64_t *)&v63);
      int v56 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v40 = v11;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
      v41(v40, v6);
      *(_WORD *)(v37 + 12) = 1040;
      LODWORD(v62) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 18) = 2048;
      uint64_t v62 = *(void *)&v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v42 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "ICCCU: lastCloudConfigurationDownload > configurationInterval, should download remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}", (uint8_t *)v37, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v41(v58, v6);
    }
    else
    {

      uint64_t v52 = *(void (**)(char *, uint64_t))(v7 + 8);
      v52(v11, v6);
      v52(v35, v6);
    }
    goto LABEL_17;
  }
  if (qword_1009078F8 != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  sub_10008E2DC(v43, (uint64_t)qword_10091D3C0);
  id v44 = v59;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v59, v29, v6);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    uint64_t v61 = (char *)swift_slowAlloc();
    unint64_t v63 = v61;
    *(_DWORD *)uint64_t v47 = 136446722;
    sub_100517304((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_1000C51B8(v48, v49, (uint64_t *)&v63);
    id v58 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v7 + 8);
    v50(v44, v6);
    *(_WORD *)(v47 + 12) = 1040;
    LODWORD(v62) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v47 + 18) = 2048;
    uint64_t v62 = *(void *)&v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "ICCCU: lastCloudConfigurationDownload < throttingInterval, not downloading remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}", (uint8_t *)v47, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (id)((uint64_t (*)(char *, uint64_t))v50)(v58, v6);
  }
  else
  {

    id v54 = *(void (**)(char *, uint64_t))(v7 + 8);
    v54(v44, v6);
    return (id)((uint64_t (*)(char *, uint64_t))v54)(v29, v6);
  }
}

uint64_t sub_10057E164()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10057D7C4();
    return swift_release();
  }
  return result;
}

void sub_10057E1C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v34 = *(void *)(*v0 + 88);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v35 = *(void *)(v34 + 8);
  uint64_t v36 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  uint64_t v37 = (char *)&v33 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v17 = (void *)v1[3];
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (qword_1009078F8 == -1)
    {
LABEL_4:
      uint64_t v20 = type metadata accessor for Logger();
      sub_10008E2DC(v20, (uint64_t)qword_10091D3C0);
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        double v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "ICCCU: Unexpectedly could not create an background scheduler (xpcActivity) when trying to schedule a new one", v23, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  double v24 = v37;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v37, v8, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness))
  {
    if (qword_1009078F8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10091D3C0);
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "ICCCU: Unexpectedly having pending activity on the background scheduler (xpcActivity) when trying to create and schedule a new one", v29, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    [(id)v1[2] cloudConfigurationDownloadThrottleInterval];
    double v31 = v30;
    uint64_t v32 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, double))(v32 + 24))(AssociatedTypeWitness, v32, v31);
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v24, AssociatedTypeWitness);
}

id *sub_10057E718()
{
  uint64_t v1 = *v0;
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  uint64_t v2 = (char *)v0 + *((void *)*v0 + 15);
  uint64_t v3 = v1[10];
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))((char *)v0 + *((void *)*v0 + 16), v3);
  return v0;
}

uint64_t sub_10057E83C()
{
  sub_10057E718();

  return swift_deallocClassInstance();
}

uint64_t sub_10057E894()
{
  return sub_10057CE14();
}

uint64_t sub_10057E8B8@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 lastCloudConfigurationDownload];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10057E980(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v2 setLastCloudConfigurationDownload:];
}

uint64_t sub_10057EA78()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdater()
{
  return sub_1000E6FBC();
}

uint64_t sub_10057EBA8(uint64_t a1)
{
  sub_100428A44(a1, 0.0, 1.0);
  double v2 = *(double *)(v1 + 16);
  double v4 = v3 + 1.0;
  if (qword_1009078F8 != -1) {
    swift_once();
  }
  double v5 = v2 * v4;
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091D3C0);
  swift_retain();
  Class v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v9 + 12) = 2048;
    *(double *)&long long v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "ICCCU-XPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, randomizedDelay: %f}", (uint8_t *)v9, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  long long v11 = xmmword_10078B600;
  double v12 = v5;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 65537;
  char v16 = 0;
  uint64_t v17 = 0x4024000000000000;
  int v18 = 0;
  __int16 v19 = 0;
  int v20 = 33619969;
  char v21 = 7;
  Swift::Int v22 = sub_100332130((uint64_t)&off_1008B6D20);
  sub_100595B1C(&v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10057ED90()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdaterXPCActivity()
{
  return self;
}

uint64_t sub_10057EDEC(uint64_t a1)
{
  return sub_10057EBA8(a1);
}

uint64_t type metadata accessor for RDICCloudConfigurationUpdaterXPCActivityFactory()
{
  return self;
}

_UNKNOWN **sub_10057EE34()
{
  return &off_1008CAC28;
}

void *sub_10057EE40@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for RDICCloudConfigurationUpdaterXPCActivity();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  type metadata accessor for RDDynamicXPCActivity();
  swift_allocObject();
  id v10 = a1;
  swift_retain();
  uint64_t result = sub_100597404(1, (uint64_t)sub_1000960FC, (uint64_t)v9);
  *(void *)(v8 + 24) = result;
  *a4 = v8;
  return result;
}

_UNKNOWN **sub_10057EF04()
{
  return &off_1008CAC48;
}

uint64_t sub_10057EF14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10057EF24()
{
  return swift_release();
}

uint64_t sub_10057EF2C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10057EF64()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10057EF9C()
{
  return sub_10057E164();
}

uint64_t sub_10057EFBC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10057EFFC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v122 = a1;
  uint64_t v113 = a3;
  uint64_t v107 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  unint64_t v114 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v112 = (uint64_t)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  Swift::String v123 = (char *)&v103 - v8;
  __chkstk_darwin(v9);
  uint64_t v119 = (uint64_t)&v103 - v10;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v12 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v14 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v15 - 8);
  uint64_t v111 = (uint64_t)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v110 = (uint64_t)&v103 - v18;
  __chkstk_darwin(v19);
  uint64_t v109 = (uint64_t)&v103 - v20;
  __chkstk_darwin(v21);
  uint64_t v105 = (char *)&v103 - v22;
  __chkstk_darwin(v23);
  uint64_t v117 = (uint64_t)&v103 - v24;
  __chkstk_darwin(v25);
  uint64_t v118 = (uint64_t)&v103 - v26;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v103 - v28;
  __chkstk_darwin(v30);
  uint64_t v108 = (uint64_t)&v103 - v31;
  __chkstk_darwin(v32);
  uint64_t v116 = (uint64_t)&v103 - v33;
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v103 - v35;
  __chkstk_darwin(v37);
  uint64_t v39 = (uint64_t)&v103 - v38;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
  uint64_t v115 = v39;
  v41(v39, 1, 1, v40);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter();
  uint64_t v121 = a2;
  LOBYTE(v39) = sub_1001CC0F4((uint64_t)v14, a2);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v12 + 8);
  os_log_t v42 = (char *)(v12 + 8);
  uint64_t v120 = PredicateType;
  uint64_t v124 = v43;
  v43(v14, PredicateType);
  if (v39)
  {
    id v44 = [v122 identifier];
    if (v44)
    {
      uint64_t v45 = v44;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v46 = 1;
    }
    uint64_t v47 = v115;
    sub_1000966BC(v115, (uint64_t *)&unk_100909E50);
    v41((uint64_t)v36, v46, 1, v40);
    sub_100096408((uint64_t)v36, v47, (uint64_t *)&unk_100909E50);
  }
  uint64_t v48 = v116;
  v41(v116, 1, 1, v40);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter();
  char v49 = sub_1001CC0F4((uint64_t)v14, v121);
  v124(v14, v120);
  if (v49)
  {
    id v50 = [v122 list];
    if (v50)
    {
      uint64_t v51 = v50;
      id v52 = [v50 identifier];

      if (v52)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = 1;
      }
      sub_1000966BC(v48, (uint64_t *)&unk_100909E50);
      v41((uint64_t)v29, v53, 1, v40);
      uint64_t v54 = v108;
      sub_100096408((uint64_t)v29, v108, (uint64_t *)&unk_100909E50);
    }
    else
    {
      sub_1000966BC(v48, (uint64_t *)&unk_100909E50);
      uint64_t v54 = v108;
      v41(v108, 1, 1, v40);
    }
    sub_100096408(v54, v48, (uint64_t *)&unk_100909E50);
  }
  v41(v118, 1, 1, v40);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter();
  char v55 = sub_1001CC0F4((uint64_t)v14, v121);
  uint64_t v56 = v120;
  v124(v14, v120);
  id v57 = v122;
  if (v55)
  {
    id v58 = [v122 account];
    if (v58)
    {
      id v59 = v58;
      id v60 = [v58 identifier];

      if (v60)
      {
        uint64_t v61 = (uint64_t)v105;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v62 = 1;
        uint64_t v61 = (uint64_t)v105;
      }
      uint64_t v63 = v118;
      sub_1000966BC(v118, (uint64_t *)&unk_100909E50);
      v41(v61, v62, 1, v40);
      uint64_t v64 = v117;
      sub_100096408(v61, v117, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v63 = v118;
      sub_1000966BC(v118, (uint64_t *)&unk_100909E50);
      uint64_t v64 = v117;
      v41(v117, 1, 1, v40);
    }
    sub_100096408(v64, v63, (uint64_t *)&unk_100909E50);
  }
  uint64_t v65 = type metadata accessor for Date();
  id v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56);
  v66(v119, 1, 1, v65);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter();
  uint64_t v67 = v121;
  char v68 = sub_1001CC0F4((uint64_t)v14, v121);
  v124(v14, v56);
  if ((v68 & 1) != 0
    || (static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(),
        char v69 = sub_1001CC0F4((uint64_t)v14, v67),
        v124(v14, v56),
        (v69 & 1) != 0))
  {
    uint64_t v70 = v42;
    id v71 = [v57 displayDateDate];
    if (v71)
    {
      uint64_t v72 = v71;
      uint64_t v73 = (uint64_t)v123;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v74 = 0;
    }
    else
    {
      uint64_t v74 = 1;
      uint64_t v73 = (uint64_t)v123;
    }
    uint64_t v75 = v119;
    sub_1000966BC(v119, (uint64_t *)&unk_100909A40);
    v66(v73, v74, 1, v65);
    sub_100096408(v73, v75, (uint64_t *)&unk_100909A40);
    LODWORD(v108) = [v57 displayDateIsAllDay];
    uint64_t v67 = v121;
    os_log_t v42 = v70;
    uint64_t v56 = v120;
  }
  else
  {
    LODWORD(v108) = 2;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter();
  char v76 = sub_1001CC0F4((uint64_t)v14, v67);
  v124(v14, v56);
  uint64_t v77 = v114;
  if ((v76 & 1) != 0 && (id v78 = [v57 alarmStorage]) != 0)
  {
    uint64_t v105 = v42;
    unint64_t v135 = (unint64_t)_swiftEmptyArrayStorage;
    id v79 = v78;
    NSOrderedSet.makeIterator()();
    id v104 = v79;

    unint64_t v80 = sub_1002913D4();
    uint64_t v81 = v107;
    dispatch thunk of IteratorProtocol.next()();
    if (v134)
    {
      uint64_t v82 = (unint64_t *)&unk_100909AC0;
      Swift::String v123 = (char *)&type metadata for Any + 8;
      uint64_t v117 = v80;
      do
      {
        sub_10009A1A0(&v133, &v132);
        sub_10009A1B0((uint64_t)&v132, (uint64_t)v129);
        sub_1000963CC(0, v82);
        if (swift_dynamicCast())
        {
          unint64_t v83 = v82;
          uint64_t v84 = (void *)v126;
          id v85 = [(id)v126 remObjectID];
          if (v85)
          {
            id v86 = v85;
            id v87 = [v84 account];
            if (v87)
            {
              uint64_t v88 = v87;
              id v89 = [v87 remObjectID];

              if (v89)
              {
                id v90 = [v84 trigger];
                if (v90
                  && (id v125 = v90,
                      sub_1000963CC(0, (unint64_t *)&unk_100910DD0),
                      sub_100094134(&qword_10090E048),
                      (swift_dynamicCast() & 1) != 0))
                {
                  if (*((void *)&v127 + 1))
                  {
                    sub_1000967D4(&v126, (uint64_t)v129);
                    uint64_t v91 = v130;
                    uint64_t v92 = v131;
                    sub_1000C0DE0(v129, v130);
                    (*(void (**)(id, void *, uint64_t, uint64_t))(v92 + 8))(v89, v86, v91, v92);

                    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v129);
                    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v132);
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    uint64_t v81 = v107;
                    uint64_t v77 = v114;
                    if (*(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v135 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    id v57 = v122;
                    uint64_t v56 = v120;
                    uint64_t v82 = v83;
                    goto LABEL_49;
                  }
                }
                else
                {
                  uint64_t v128 = 0;
                  long long v126 = 0u;
                  long long v127 = 0u;
                }

                sub_1000966BC((uint64_t)&v126, &qword_10090E050);
              }
              else
              {
              }
              id v57 = v122;
              uint64_t v56 = v120;
            }
            else
            {
            }
          }
          else
          {
          }
          uint64_t v82 = v83;
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v132);
LABEL_49:
        dispatch thunk of IteratorProtocol.next()();
      }
      while (v134);
    }
    (*(void (**)(char *, uint64_t))(v106 + 8))(v77, v81);
    long long v93 = (char *)v135;

    uint64_t v67 = v121;
  }
  else
  {
    long long v93 = 0;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter();
  int v94 = sub_1001CC0F4((uint64_t)v14, v67);
  v124(v14, v56);
  if (v94)
  {
    if (((unint64_t)[v57 priority] & 0x8000000000000000) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v117 = REMReminderPriorityLevelForPriority();
  }
  else
  {
    uint64_t v117 = 0;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter();
  char v95 = sub_1001CC0F4((uint64_t)v14, v67);
  v124(v14, v56);
  if (v95) {
    int v96 = (uint64_t)[v57 flagged] > 0;
  }
  else {
    int v96 = 2;
  }
  LODWORD(v114) = v96;
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter();
  char v97 = sub_1001CC0F4((uint64_t)v14, v67);
  swift_bridgeObjectRelease();
  v124(v14, v56);
  Swift::String v123 = v93;
  LODWORD(v121) = v94;
  if (v97) {
    [v57 completed];
  }
  uint64_t v98 = v115;
  sub_1000BF710(v115, v109, (uint64_t *)&unk_100909E50);
  uint64_t v99 = v116;
  sub_1000BF710(v116, v110, (uint64_t *)&unk_100909E50);
  uint64_t v100 = v118;
  sub_1000BF710(v118, v111, (uint64_t *)&unk_100909E50);
  uint64_t v101 = v119;
  sub_1000BF710(v119, v112, (uint64_t *)&unk_100909A40);
  REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(identifier:listIdentifier:accountIdentifier:displayDateDate:displayDateIsAllDay:alarmTriggers:priority:flagged:completed:)();

  sub_1000966BC(v101, (uint64_t *)&unk_100909A40);
  sub_1000966BC(v100, (uint64_t *)&unk_100909E50);
  sub_1000966BC(v99, (uint64_t *)&unk_100909E50);
  return sub_1000966BC(v98, (uint64_t *)&unk_100909E50);
}

uint64_t sub_10057FFEC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091D630);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091D630);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_1005800B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v5);
  type metadata accessor for RDTransactionRegistrar();
  uint64_t v6 = (void *)swift_allocObject();
  v6[4] = 0;
  v6[5] = 0;
  _OWORD v6[2] = 0xD000000000000031;
  void v6[3] = 0x80000001007D89A0;
  sub_10016F330();
  sub_100094134(&qword_100908280);
  sub_10036F50C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  v6[6] = UnfairLock.init(options:)();
  v2[4] = v6;
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

id sub_1005801F4()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    id v3 = [self newCloudContainerWithPublicCloudDatabase];
    uint64_t v4 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void sub_100580260(void *a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, void), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v72 = a6;
  uint64_t v73 = a7;
  uint64_t v70 = a8;
  uint64_t v71 = a9;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  char v69 = (char *)&v64 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v64 - v22;
  if (a3)
  {
    swift_errorRetain();
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
    sub_100149368(a2, 1);
    id v42 = a1;
    sub_100149368(a2, 1);
    id v43 = v42;
    id v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    int v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc();
      LODWORD(v67) = v46;
      uint64_t v48 = v47;
      uint64_t v68 = swift_slowAlloc();
      uint64_t v74 = v68;
      uint64_t v75 = a10;
      *(_DWORD *)uint64_t v48 = 136446978;
      os_log_t v66 = v44;
      swift_getMetatypeMetadata();
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v75 = sub_1000C51B8(v49, v50, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2082;
      id v51 = [v43 recordName];
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v15;
      unint64_t v54 = v53;

      uint64_t v75 = sub_1000C51B8(v52, v54, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2048;
      char v55 = v69;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v57 = v56;
      id v58 = *(void (**)(char *, uint64_t))(v16 + 8);
      id v59 = v55;
      uint64_t v60 = v65;
      v58(v59, v65);
      uint64_t v75 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v58(v18, v60);
      *(_WORD *)(v48 + 32) = 2082;
      swift_getErrorValue();
      uint64_t v61 = Error.rem_errorDescription.getter();
      uint64_t v75 = sub_1000C51B8(v61, v62, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
      os_log_t v63 = v66;
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v67, "%{public}s: [perRecordSaveBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
    }
    swift_errorRetain();
    sub_1005815B4((uint64_t)a2, 1, v72, v73);
    sub_10011C62C(a2, 1);
    sub_10011C62C(a2, 1);
  }
  else
  {
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v23, a5, v15);
    id v25 = a4;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      uint64_t v74 = v68;
      uint64_t v75 = a10;
      *(_DWORD *)uint64_t v29 = 136446722;
      os_log_t v67 = v26;
      swift_getMetatypeMetadata();
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v75 = sub_1000C51B8(v30, v31, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      id v32 = [v25 recordName];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      LODWORD(v66) = v28;
      unint64_t v35 = v34;

      uint64_t v75 = sub_1000C51B8(v33, v35, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2048;
      uint64_t v36 = v69;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v38 = v37;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v16 + 8);
      v39(v36, v15);
      uint64_t v75 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v39(v23, v15);
      os_log_t v40 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v66, "%{public}s: Did save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    }
    sub_1005815B4(0, 0, v72, v73);
  }
}

void sub_1005809C4(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v126 = a2;
  uint64_t v127 = a6;
  uint64_t v13 = *(void *)v7;
  uint64_t v129 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v16 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v106 - v18;
  unint64_t v125 = v20;
  __n128 v22 = __chkstk_darwin(v21);
  uint64_t v131 = (char *)&v106 - v23;
  uint64_t v24 = (*(uint64_t (**)(__n128))(v7 + 16))(v22);
  if (v24)
  {
    uint64_t v122 = v14;
    Swift::String v123 = a3;
    uint64_t v116 = a4;
    uint64_t v117 = a5;
    uint64_t v119 = v16;
    uint64_t v133 = *(void *)(*(void *)(v7 + 32) + 48);
    __chkstk_darwin(v24);
    unint64_t v114 = v25;
    *(&v106 - 2) = (void (*)(uint64_t, char *, uint64_t))v25;
    *(&v106 - 1) = (void (*)(uint64_t, char *, uint64_t))1;
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_release();
    uint64_t v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = 0;
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_10091D630);
    id v28 = a1;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v130 = v19;
    uint64_t v118 = v13;
    uint64_t v115 = v27;
    if (v31)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      uint64_t v133 = v13;
      *(_DWORD *)uint64_t v32 = 136446466;
      swift_getMetatypeMetadata();
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v133 = sub_1000C51B8(v33, v34, &v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2082;
      uint64_t v128 = (objc_class *)(v32 + 14);
      id v35 = [v28 recordName];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v39 = v130;
      uint64_t v133 = sub_1000C51B8(v36, v38, &v132);
      os_log_t v40 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s: Will delete CKRecord for publicCloudObject {recordName: %{public}s}", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v39 = v19;

      os_log_t v40 = v131;
    }
    Date.init()();
    id v42 = sub_1005801F4();
    sub_1000963CC(0, &qword_10091D6F8);
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_10077A530;
    *(void *)(v43 + 32) = v28;
    uint64_t v133 = v43;
    specialized Array._endMutation()();
    Swift::Bool v44 = v133;
    id v45 = v28;
    v136.value._rawValue = 0;
    v136.is_nil = v44;
    Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v136, v137).super.super.super.super.isa;
    [(objc_class *)isa setQualityOfService:17];
    [(objc_class *)isa setQueuePriority:0];
    uint64_t v47 = isa;
    id v48 = [v42 publicCloudDatabase];
    [(objc_class *)v47 setDatabase:v48];

    uint64_t v128 = v47;
    id v49 = [(objc_class *)v47 configuration];
    if (v49)
    {
      unint64_t v50 = v49;
      [v49 setContainer:v42];

      id v51 = [(objc_class *)v128 configuration];
      if (v51)
      {
        uint64_t v52 = v51;
        id v113 = v42;
        [v51 setTimeoutIntervalForRequest:a7];

        id v53 = [(objc_class *)v128 configuration];
        if (v53)
        {
          unint64_t v54 = v53;
          [v53 setTimeoutIntervalForResource:a7];

          uint64_t v55 = v122;
          uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
          uint64_t v120 = v122 + 16;
          uint64_t v121 = v56;
          uint64_t v57 = v129;
          v56(v39, v40, v129);
          uint64_t v58 = *(unsigned __int8 *)(v55 + 80);
          uint64_t v111 = v58 | 7;
          uint64_t v59 = (v58 + 24) & ~v58;
          uint64_t v112 = v59;
          unint64_t v60 = (v125 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v109 = v60;
          unint64_t v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v108 = v61;
          unint64_t v62 = (v61 + 23) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v110 = v62;
          unint64_t v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v125 = v63 + 8;
          unint64_t v107 = v63;
          uint64_t v64 = swift_allocObject();
          *(void *)(v64 + 16) = v45;
          uint64_t v65 = v64 + v59;
          uint64_t v106 = *(void (**)(uint64_t, char *, uint64_t))(v55 + 32);
          uint64_t v66 = v57;
          v106(v65, v130, v57);
          os_log_t v67 = v45;
          uint64_t v68 = v123;
          uint64_t v69 = v124;
          *(void *)(v64 + v60) = v124;
          uint64_t v70 = (void (**)(void))(v64 + v61);
          uint64_t v71 = v116;
          *uint64_t v70 = v68;
          v70[1] = v71;
          uint64_t v72 = v114;
          *(void *)(v64 + v62) = v114;
          uint64_t v73 = v118;
          *(void *)(v64 + v63) = v118;
          id v74 = v67;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v75 = v128;
          CKModifyRecordsOperation.perRecordDeleteBlock.setter();
          v121(v130, v131, v66);
          uint64_t v76 = swift_allocObject();
          *(void *)(v76 + 16) = v74;
          uint64_t v77 = v130;
          v106(v76 + v112, v130, v66);
          *(void *)(v76 + v109) = v69;
          id v78 = (void (**)(void))(v76 + v108);
          *id v78 = v123;
          v78[1] = v71;
          *(void *)(v76 + v110) = v72;
          *(void *)(v76 + v107) = v73;
          id v79 = v74;
          swift_retain();
          swift_retain();
          swift_retain();
          CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
          uint64_t v133 = 0x6574656C6544;
          unint64_t v134 = 0xE600000000000000;
          uint64_t v80 = v127;
          uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 24);
          uint64_t v82 = v75;
          v83._countAndFlagsBits = v81(v117, v80);
          String.append(_:)(v83);
          swift_bridgeObjectRelease();
          id v84 = [objc_allocWithZone((Class)CKOperationGroup) init];
          NSString v85 = String._bridgeToObjectiveC()();
          [v84 setName:v85];

          [v84 setQuantity:1];
          [v84 setExpectedSendSize:1];
          [v84 setExpectedReceiveSize:1];
          swift_bridgeObjectRelease();
          [(objc_class *)v82 setGroup:v84];

          id v86 = v119;
          v121(v119, v131, v66);
          id v87 = v79;
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v88, v89))
          {
            uint64_t v90 = swift_slowAlloc();
            uint64_t v127 = swift_slowAlloc();
            uint64_t v132 = v127;
            uint64_t v133 = v73;
            *(_DWORD *)uint64_t v90 = 136446722;
            swift_getMetatypeMetadata();
            uint64_t v91 = String.init<A>(describing:)();
            uint64_t v133 = sub_1000C51B8(v91, v92, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 12) = 2082;
            id v93 = [v87 recordName];
            int v94 = v77;
            uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v128 = v82;
            unint64_t v97 = v96;

            uint64_t v133 = sub_1000C51B8(v95, v97, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 22) = 2048;
            Date.init()();
            uint64_t v98 = v119;
            Date.timeIntervalSince(_:)();
            uint64_t v100 = v99;
            uint64_t v101 = *(void (**)(char *, uint64_t))(v122 + 8);
            uint64_t v102 = v94;
            uint64_t v103 = v129;
            v101(v102, v129);
            uint64_t v133 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v101(v98, v103);
            uint64_t v82 = v128;
            _os_log_impl((void *)&_mh_execute_header, v88, v89, "%{public}s: Deleting CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v90, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v101 = *(void (**)(char *, uint64_t))(v122 + 8);
            uint64_t v103 = v129;
            v101(v86, v129);
          }

          id v104 = v113;
          id v105 = [v113 publicCloudDatabase];
          [v105 addOperation:v82];

          v101(v131, v103);
          swift_release();
          return;
        }
LABEL_19:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v131 = (char *)[self internetNotReachableError];
  a3();
  uint64_t v41 = v131;
}

uint64_t sub_1005815B4(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, void))
{
  uint64_t v8 = (unsigned char *)(a3 + 16);
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a3 + 16) & 1) == 0)
  {
    swift_beginAccess();
    *uint64_t v8 = 1;
    uint64_t v10 = a4(a1, a2 & 1);
    __chkstk_darwin(v10);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1005816D4(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, void), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v73 = a6;
  id v74 = a7;
  uint64_t v71 = a8;
  uint64_t v72 = a9;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v70 = (char *)&v65 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v65 - v22;
  if (a3)
  {
    swift_errorRetain();
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
    sub_1000CD9C4(a2, 1);
    id v42 = a1;
    sub_1000CD9C4(a2, 1);
    id v43 = v42;
    Swift::Bool v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    int v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc();
      LODWORD(v68) = v46;
      uint64_t v48 = v47;
      uint64_t v69 = swift_slowAlloc();
      uint64_t v75 = v69;
      uint64_t v76 = a10;
      *(_DWORD *)uint64_t v48 = 136446978;
      os_log_t v67 = v44;
      swift_getMetatypeMetadata();
      uint64_t v49 = String.init<A>(describing:)();
      uint64_t v76 = sub_1000C51B8(v49, v50, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2082;
      id v51 = [v43 recordName];
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v15;
      unint64_t v54 = v53;

      uint64_t v76 = sub_1000C51B8(v52, v54, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2048;
      uint64_t v55 = v70;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v57 = v56;
      uint64_t v58 = *(void (**)(char *, uint64_t))(v16 + 8);
      uint64_t v59 = v55;
      uint64_t v60 = v66;
      v58(v59, v66);
      uint64_t v76 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v58(v18, v60);
      *(_WORD *)(v48 + 32) = 2082;
      swift_getErrorValue();
      uint64_t v61 = Error.rem_errorDescription.getter();
      uint64_t v76 = sub_1000C51B8(v61, v62, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a2, 1);
      sub_1000CD9D0(a2, 1);
      os_log_t v63 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "%{public}s: [perRecordDeleteBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      sub_1000CD9D0(a2, 1);
      sub_1000CD9D0(a2, 1);
    }
    swift_errorRetain();
    sub_1005815B4(a2, 1, v73, v74);
    sub_1000CD9D0(a2, 1);
    return sub_1000CD9D0(a2, 1);
  }
  else
  {
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v23, a5, v15);
    id v25 = a4;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      uint64_t v75 = v69;
      uint64_t v76 = a10;
      *(_DWORD *)uint64_t v29 = 136446722;
      os_log_t v68 = v26;
      swift_getMetatypeMetadata();
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v76 = sub_1000C51B8(v30, v31, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      id v32 = [v25 recordName];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      LODWORD(v67) = v28;
      unint64_t v35 = v34;

      uint64_t v76 = sub_1000C51B8(v33, v35, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2048;
      uint64_t v36 = v70;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v38 = v37;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v16 + 8);
      v39(v36, v15);
      uint64_t v76 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v39(v23, v15);
      os_log_t v40 = v68;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v67, "%{public}s: Did delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    }
    return sub_1005815B4(0, 0, v73, v74);
  }
}

void sub_100581E38(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void), uint64_t a7, uint64_t a8, uint64_t a9, const char *a10, uint64_t a11)
{
  uint64_t v52 = a7;
  uint64_t v53 = a5;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v43 - v21;
  if (a2)
  {
    id v51 = a6;
    uint64_t v49 = v20;
    uint64_t v50 = a11;
    swift_errorRetain();
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E2DC(v23, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, a4, v17);
    sub_1000CD9C4(a1, 1);
    id v24 = a3;
    sub_1000CD9C4(a1, 1);
    id v25 = v24;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      os_log_t v46 = v26;
      uint64_t v47 = a10;
      uint64_t v29 = swift_slowAlloc();
      int v44 = v28;
      uint64_t v30 = v29;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v54 = v45;
      uint64_t v55 = a9;
      *(_DWORD *)uint64_t v30 = 136446978;
      swift_getMetatypeMetadata();
      uint64_t v48 = a8;
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v55 = sub_1000C51B8(v31, v32, &v54);
      id v43 = &v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2082;
      id v33 = [v25 recordName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;

      uint64_t v55 = sub_1000C51B8(v34, v36, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2048;
      uint64_t v37 = v49;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v39 = v38;
      os_log_t v40 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v40(v37, v17);
      uint64_t v55 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v40((uint64_t)v22, v17);
      *(_WORD *)(v30 + 32) = 2082;
      swift_getErrorValue();
      uint64_t v41 = Error.rem_errorDescription.getter();
      uint64_t v55 = sub_1000C51B8(v41, v42, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      uint64_t v26 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, v47, (uint8_t *)v30, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
    }

    swift_errorRetain();
    sub_1005815B4(a1, 1, v53, v51);
    sub_1000CD9D0(a1, 1);
    sub_1000CD9D0(a1, 1);
  }
}

id sub_1005822B8(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v137 = a6;
  uint64_t v133 = a2;
  id v134 = a1;
  uint64_t v135 = *(void *)v7;
  sub_100096058((uint64_t *)&unk_10090ABB0);
  uint64_t v136 = a5;
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)v116 - v14);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v129 = (char *)v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v130 = (char *)v116 - v20;
  __n128 v22 = __chkstk_darwin(v21);
  uint64_t v138 = (char *)v116 - v23;
  uint64_t v24 = (*(uint64_t (**)(__n128))(v7 + 16))(v22);
  if ((v24 & 1) == 0)
  {
    *uint64_t v15 = [self internetNotReachableError];
    swift_storeEnumTagMultiPayload();
    a3(v15);
    return (id)(*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v126 = (void (*)(void))a3;
  uint64_t v127 = a4;
  uint64_t v128 = v17;
  uint64_t v140 = *(void *)(*(void *)(v7 + 32) + 48);
  __chkstk_darwin(v24);
  uint64_t v125 = v25;
  v116[-2] = v25;
  v116[-1] = 1;
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  uint64_t v132 = swift_allocObject();
  *(unsigned char *)(v132 + 16) = 0;
  if (qword_100907900 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_10091D630);
  id v28 = v134;
  uint64_t v122 = v27;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  int v31 = v30;
  uint64_t v32 = v16;
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v33 = swift_slowAlloc();
    id v134 = (id)swift_slowAlloc();
    uint64_t v139 = (uint64_t)v134;
    *(_DWORD *)uint64_t v33 = 136446466;
    uint64_t v140 = v135;
    swift_getMetatypeMetadata();
    uint64_t v34 = String.init<A>(describing:)();
    LODWORD(v124) = v31;
    uint64_t v140 = sub_1000C51B8(v34, v35, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2082;
    uint64_t v123 = v33 + 14;
    id v36 = [v28 recordName];
    uint64_t v37 = v32;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    uint64_t v41 = v138;
    uint64_t v42 = v38;
    uint64_t v32 = v37;
    uint64_t v140 = sub_1000C51B8(v42, v40, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v124, "%{public}s: Will fetch publicCloudObject from public cloud database {recordName: %{public}s}", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v43 = v128;
  }
  else
  {

    uint64_t v43 = v128;
    uint64_t v41 = v138;
  }
  Date.init()();
  id v45 = sub_1005801F4();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_10077A530;
  *(void *)(v46 + 32) = v28;
  uint64_t v140 = v46;
  specialized Array._endMutation()();
  id v47 = objc_allocWithZone((Class)CKFetchRecordsOperation);
  sub_1000963CC(0, &qword_100914310);
  id v48 = v28;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v50 = [v47 initWithRecordIDs:isa];

  [v50 setQualityOfService:17];
  [v50 setQueuePriority:8];
  id v51 = v50;
  id v52 = [v45 publicCloudDatabase];
  [v51 setDatabase:v52];

  id v134 = v51;
  id result = [v51 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v53 = result;
  [result setContainer:v45];

  id result = [v134 configuration];
  uint64_t v54 = v130;
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v55 = result;
  id v120 = v48;
  id v121 = v45;
  [result setTimeoutIntervalForRequest:a7];

  id result = [v134 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v56 = result;
  [result setTimeoutIntervalForResource:a7];

  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  uint64_t v123 = v43 + 16;
  uint64_t v124 = v57;
  v57(v54, v41, v32);
  uint64_t v58 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v131 = v32;
  uint64_t v59 = (v58 + 32) & ~v58;
  uint64_t v118 = v58 | 7;
  uint64_t v119 = v18 + 7;
  v116[0] = (v18 + 7 + v59) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = v43;
  unint64_t v61 = (v116[0] + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = swift_allocObject();
  uint64_t v66 = v137;
  *(void *)(v65 + 16) = v136;
  *(void *)(v65 + 24) = v66;
  uint64_t v67 = v65 + v59;
  os_log_t v68 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  v116[1] = v60 + 32;
  uint64_t v117 = v68;
  uint64_t v69 = v54;
  v68((char *)v67, v54, v131);
  *(void *)(v65 + v116[0]) = v133;
  uint64_t v70 = v120;
  *(void *)(v65 + v61) = v120;
  *(void *)(v65 + v62) = v132;
  uint64_t v71 = (void *)(v65 + v63);
  uint64_t v72 = v127;
  *uint64_t v71 = v126;
  v71[1] = v72;
  *(void *)(v65 + v64) = v125;
  *(void *)(v65 + ((v64 + 15) & 0xFFFFFFFFFFFFFFF8)) = v135;
  id v120 = v70;
  swift_retain();
  swift_retain();
  swift_retain();
  id v73 = v134;
  CKFetchRecordsOperation.perRecordResultBlock.setter();
  id v74 = v69;
  uint64_t v75 = v131;
  v124(v69, v138, v131);
  uint64_t v76 = (v58 + 40) & ~v58;
  unint64_t v77 = (v119 + v76) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v80 = (char *)swift_allocObject();
  uint64_t v81 = v137;
  *((void *)v80 + 2) = v136;
  *((void *)v80 + 3) = v81;
  uint64_t v82 = v120;
  *((void *)v80 + 4) = v120;
  v117(&v80[v76], v74, v75);
  *(void *)&v80[v77] = v132;
  Swift::String v83 = &v80[v78];
  uint64_t v84 = v135;
  uint64_t v85 = v127;
  *(void *)Swift::String v83 = v126;
  *((void *)v83 + 1) = v85;
  *(void *)&v80[v79] = v125;
  *(void *)&v80[(v79 + 15) & 0xFFFFFFFFFFFFFFF8] = v84;
  id v86 = v82;
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordsOperation.fetchRecordsResultBlock.setter();
  uint64_t v140 = 0x6863746546;
  unint64_t v141 = 0xE500000000000000;
  uint64_t v87 = v137;
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t))(v137 + 24);
  id v89 = v73;
  v90._countAndFlagsBits = v88(v136, v87);
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  id v91 = [objc_allocWithZone((Class)CKOperationGroup) init];
  NSString v92 = String._bridgeToObjectiveC()();
  [v91 setName:v92];

  [v91 setQuantity:1];
  [v91 setExpectedSendSize:1];
  [v91 setExpectedReceiveSize:1];
  swift_bridgeObjectRelease();
  [v89 setGroup:v91];

  id v93 = v129;
  v124(v129, v138, v75);
  id v94 = v86;
  uint64_t v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.default.getter();
  int v97 = v96;
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v98 = swift_slowAlloc();
    uint64_t v137 = swift_slowAlloc();
    uint64_t v139 = v137;
    uint64_t v140 = v84;
    *(_DWORD *)uint64_t v98 = 136446722;
    swift_getMetatypeMetadata();
    uint64_t v99 = String.init<A>(describing:)();
    LODWORD(v136) = v97;
    uint64_t v140 = sub_1000C51B8(v99, v100, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v98 + 12) = 2082;
    id v101 = [v94 recordName];
    uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v104 = v103;

    uint64_t v140 = sub_1000C51B8(v102, v104, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v98 + 22) = 2048;
    id v105 = v130;
    Date.init()();
    id v106 = v89;
    unint64_t v107 = v129;
    Date.timeIntervalSince(_:)();
    uint64_t v109 = v108;
    unint64_t v110 = *(void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v111 = v105;
    uint64_t v112 = v131;
    v110(v111, v131);
    uint64_t v140 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v113 = v107;
    id v89 = v106;
    v110(v113, v112);
    _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v136, "%{public}s: Fetching CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v98, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v110 = *(void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v112 = v131;
    v110(v93, v131);
  }

  id v114 = v121;
  id v115 = [v121 publicCloudDatabase];
  [v115 addOperation:v89];

  v110(v138, v112);
  return (id)swift_release();
}

uint64_t sub_100582FC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = (unsigned char *)(a2 + 16);
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess();
    *uint64_t v6 = 1;
    uint64_t v8 = a3(a1);
    __chkstk_darwin(v8);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1005830DC(NSObject *a1, void *a2, char a3, NSObject *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9, uint64_t a10, NSObject *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v137 = a8;
  uint64_t v136 = a7;
  id v131 = a6;
  uint64_t v130 = a5;
  unint64_t v142 = a4;
  uint64_t v140 = a1;
  os_log_t v134 = a11;
  uint64_t v135 = a10;
  uint64_t v139 = a9;
  sub_100096058((uint64_t *)&unk_10090ABB0);
  uint64_t v15 = type metadata accessor for Result();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = &v118[-v17];
  uint64_t v143 = a12;
  uint64_t v126 = *(void *)(a12 - 8);
  __chkstk_darwin(v19);
  uint64_t v133 = &v118[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v144 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  uint64_t v24 = &v118[-v23];
  __chkstk_darwin(v25);
  __chkstk_darwin(v26);
  id v28 = &v118[-v27];
  __chkstk_darwin(v29);
  uint64_t v33 = &v118[-v32];
  uint64_t v138 = v16;
  uint64_t v141 = a13;
  if (a3)
  {
    uint64_t v127 = v28;
    swift_errorRetain();
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_10008E2DC(v55, (uint64_t)qword_10091D630);
    uint64_t v56 = v144;
    (*(void (**)(unsigned char *, NSObject *, uint64_t))(v144 + 16))(v24, v142, v21);
    sub_100149368(a2, 1);
    uint64_t v57 = v140;
    sub_100149368(a2, 1);
    uint64_t v58 = v57;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    int v61 = v60;
    BOOL v62 = os_log_type_enabled(v59, v60);
    uint64_t v63 = v138;
    if (v62)
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v128 = v15;
      uint64_t v65 = v64;
      unint64_t v142 = swift_slowAlloc();
      uint64_t v145 = v142;
      *(_DWORD *)uint64_t v65 = 136446978;
      uint64_t v140 = v59;
      os_log_t v146 = v134;
      swift_getMetatypeMetadata();
      uint64_t v132 = v18;
      uint64_t v66 = String.init<A>(describing:)();
      uint64_t v129 = a2;
      os_log_t v146 = (os_log_t)sub_1000C51B8(v66, v67, (uint64_t *)&v145);
      uint64_t v133 = (unsigned char *)v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2082;
      id v68 = [v58 recordName];
      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      LODWORD(v134) = v61;
      uint64_t v70 = v63;
      uint64_t v71 = v69;
      unint64_t v73 = v72;

      a2 = v129;
      uint64_t v74 = v71;
      uint64_t v63 = v70;
      os_log_t v146 = (os_log_t)sub_1000C51B8(v74, v73, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v18 = v132;
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 22) = 2048;
      uint64_t v75 = v127;
      Date.init()();
      Date.timeIntervalSince(_:)();
      unint64_t v77 = v76;
      unint64_t v78 = *(void (**)(unsigned char *, unsigned char *))(v56 + 8);
      unint64_t v79 = v75;
      uint64_t v80 = v133;
      v78(v79, v133);
      os_log_t v146 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v78(v24, v80);
      *(_WORD *)(v65 + 32) = 2082;
      swift_getErrorValue();
      uint64_t v81 = Error.rem_errorDescription.getter();
      os_log_t v146 = (os_log_t)sub_1000C51B8(v81, v82, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
      Swift::String v83 = v140;
      _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v134, "%{public}s: [perRecordResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v65, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v15 = v128;
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v24, v21);
      sub_10011C62C(a2, 1);
      sub_10011C62C(a2, 1);
    }
    *uint64_t v18 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_100582FC4((uint64_t)v18, v136, v137);
    sub_10011C62C(a2, 1);
    return (*(uint64_t (**)(void *, uint64_t))(v63 + 8))(v18, v15);
  }
  else
  {
    uint64_t v122 = v31;
    uint64_t v123 = v30;
    uint64_t v132 = v18;
    uint64_t v34 = qword_100907900;
    id v125 = a2;
    if (v34 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    id v36 = sub_10008E2DC(v35, (uint64_t)qword_10091D630);
    uint64_t v37 = v144;
    uint64_t v38 = v21;
    uint64_t v124 = *(void (**)(unsigned char *, NSObject *, uint64_t))(v144 + 16);
    v124(v33, v142, v21);
    unint64_t v39 = v140;
    uint64_t v140 = v36;
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    int v42 = v41;
    BOOL v43 = os_log_type_enabled(v40, v41);
    uint64_t v129 = a2;
    uint64_t v128 = v15;
    if (v43)
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      uint64_t v145 = v121;
      *(_DWORD *)uint64_t v44 = 136446722;
      os_log_t v120 = v40;
      os_log_t v146 = v134;
      swift_getMetatypeMetadata();
      uint64_t v45 = String.init<A>(describing:)();
      uint64_t v127 = v28;
      os_log_t v146 = (os_log_t)sub_1000C51B8(v45, v46, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2082;
      id v47 = [v39 recordName];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v119 = v42;
      uint64_t v49 = v48;
      unint64_t v51 = v50;

      id v28 = v127;
      os_log_t v146 = (os_log_t)sub_1000C51B8(v49, v51, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2048;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v53 = v52;
      uint64_t v54 = *(NSObject **)(v144 + 8);
      ((void (*)(unsigned char *, uint64_t))v54)(v28, v38);
      os_log_t v146 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      ((void (*)(unsigned char *, uint64_t))v54)(v33, v38);
      unint64_t v40 = v120;
      _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v119, "%{public}s: Did fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v54 = *(NSObject **)(v37 + 8);
      ((void (*)(unsigned char *, uint64_t))v54)(v33, v38);
    }

    uint64_t v84 = v38;
    uint64_t v85 = v141;
    id v86 = *(void (**)(id, uint64_t, uint64_t))(v141 + 8);
    id v87 = v125;
    v86(v87, v143, v85);
    id v89 = v122;
    v124(v122, v142, v84);
    id v90 = v131;
    id v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.default.getter();
    int v93 = v92;
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v95 = swift_slowAlloc();
      uint64_t v140 = swift_slowAlloc();
      uint64_t v145 = v140;
      *(_DWORD *)uint64_t v95 = 136446722;
      LODWORD(v131) = v93;
      os_log_t v146 = v134;
      swift_getMetatypeMetadata();
      uint64_t v96 = String.init<A>(describing:)();
      int v97 = v28;
      os_log_t v146 = (os_log_t)sub_1000C51B8(v96, v98, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2082;
      id v99 = [v90 recordName];
      uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v134 = v91;
      uint64_t v101 = v84;
      uint64_t v102 = v100;
      unint64_t v142 = v54;
      unint64_t v104 = v103;

      os_log_t v146 = (os_log_t)sub_1000C51B8(v102, v104, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 22) = 2048;
      Date.init()();
      Date.timeIntervalSince(_:)();
      id v106 = v105;
      unint64_t v107 = v97;
      uint64_t v108 = v142;
      ((void (*)(unsigned char *, uint64_t))v142)(v107, v101);
      os_log_t v146 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      ((void (*)(unsigned char *, uint64_t))v108)(v89, v101);
      os_log_t v109 = v134;
      _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v131, "%{public}s: Did initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v95, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      ((void (*)(unsigned char *, uint64_t))v54)(v89, v84);
    }
    uint64_t v110 = v128;
    uint64_t v112 = v137;
    uint64_t v111 = v138;
    uint64_t v113 = v136;
    uint64_t v114 = v126;
    uint64_t v115 = (uint64_t)v132;
    uint64_t v116 = v133;
    uint64_t v117 = v143;
    (*(void (**)(void *, unsigned char *, uint64_t))(v126 + 16))(v132, v133, v143);
    swift_storeEnumTagMultiPayload();
    sub_100582FC4(v115, v113, v112);
    sub_10011C62C(v129, 0);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v110);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v114 + 8))(v116, v117);
  }
}

void sub_1005841C0(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v59 = a5;
  os_log_type_t v60 = a6;
  sub_100096058((uint64_t *)&unk_10090ABB0);
  uint64_t v58 = a10;
  uint64_t v17 = type metadata accessor for Result();
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v57 = v17;
  __chkstk_darwin(v17);
  uint64_t v55 = (void *)((char *)v48 - v18);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v48 - v24;
  if (a2)
  {
    uint64_t v53 = a11;
    uint64_t v54 = a7;
    swift_errorRetain();
    if (qword_100907900 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10091D630);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v25, a4, v19);
    sub_1000CD9C4(a1, 1);
    id v27 = a3;
    sub_1000CD9C4(a1, 1);
    id v28 = v27;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      os_log_t v51 = v29;
      uint64_t v32 = swift_slowAlloc();
      int v49 = v31;
      uint64_t v33 = v32;
      uint64_t v50 = swift_slowAlloc();
      uint64_t v61 = v50;
      uint64_t v62 = a9;
      *(_DWORD *)uint64_t v33 = 136446978;
      uint64_t v52 = a8;
      swift_getMetatypeMetadata();
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v62 = sub_1000C51B8(v34, v35, &v61);
      v48[2] = &v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2082;
      v48[1] = v33 + 14;
      id v36 = [v28 recordName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      uint64_t v62 = sub_1000C51B8(v37, v39, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 22) = 2048;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v41 = v40;
      int v42 = *(void (**)(char *, uint64_t))(v20 + 8);
      v42(v22, v19);
      uint64_t v62 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42(v25, v19);
      *(_WORD *)(v33 + 32) = 2082;
      swift_getErrorValue();
      uint64_t v43 = Error.rem_errorDescription.getter();
      uint64_t v62 = sub_1000C51B8(v43, v44, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      os_log_t v45 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v49, "%{public}s: [fetchRecordsResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}", (uint8_t *)v33, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v19);
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
    }
    uint64_t v46 = (uint64_t)v55;
    *uint64_t v55 = a1;
    uint64_t v47 = v57;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_100582FC4(v46, v59, v60);
    sub_1000CD9D0(a1, 1);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v46, v47);
  }
}

uint64_t sub_100584714()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDPublicCloudDatabaseController()
{
  return self;
}

id sub_100584780(void *a1, void (*a2)(void), uint64_t a3, double a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = sub_1000C0DE0(a1, a1[3]);

  return sub_100584C80((uint64_t)v9, a2, a3, v8, a4);
}

void sub_1005847E4(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6, double a7)
{
}

id sub_100584808(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  return sub_1005822B8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10058482C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10058483C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v5);
}

uint64_t sub_100584934(NSObject *a1, void *a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005830DC(a1, a2, v6, (v3 + v10), *(void *)(v3 + v11), *(void **)(v3 + v12), *(void *)(v3 + v13), *(uint64_t (**)(uint64_t))(v3 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v3 + ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v3+ ((((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v7, v8);
}

uint64_t sub_100584A3C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100584B58(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005841C0(a1, v4, *(void **)(v2 + 32), v2 + v8, *(void *)(v2 + v9), *(uint64_t (**)(uint64_t))(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v2 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v5, v6);
}

uint64_t sub_100584C44(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100585D34(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unint64_t, void, void, void, void, void))sub_1005816D4);
}

void sub_100584C60(uint64_t a1, char a2)
{
}

id sub_100584C80(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, double a5)
{
  os_log_t v127 = *(os_log_t *)a4;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  id v125 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v106 - v14;
  __chkstk_darwin(v16);
  uint64_t v126 = (char *)&v106 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v106 - v19;
  uint64_t v134 = type metadata accessor for RDPublicTemplate();
  uint64_t v135 = &off_1008B8DD8;
  uint64_t v21 = sub_1000C1FE8(&v133);
  uint64_t v22 = sub_1003E17D0(a1, (uint64_t)v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(a4 + 16))(v22);
  if ((v23 & 1) == 0)
  {
    id v46 = [self internetNotReachableError];
    a2();

    return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v133);
  }
  uint64_t v123 = (uint64_t)a2;
  uint64_t v122 = a3;
  os_log_t v120 = v15;
  uint64_t v130 = *(void *)(*(void *)(a4 + 32) + 48);
  __chkstk_darwin(v23);
  uint64_t v121 = v24;
  *(&v106 - 2) = (void (*)(uint64_t, char *, uint64_t))v24;
  *(&v106 - 1) = (void (*)(uint64_t, char *, uint64_t))1;
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  uint64_t v124 = swift_allocObject();
  *(unsigned char *)(v124 + 16) = 0;
  sub_1000C0DE0(&v133, v134);
  Class v25 = sub_1000D5500();
  if (qword_100907900 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E2DC(v26, (uint64_t)qword_10091D630);
  id v28 = v25;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  int v31 = v30;
  BOOL v32 = os_log_type_enabled(v29, v30);
  uint64_t v128 = v20;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    LODWORD(v118) = v31;
    uint64_t v34 = v33;
    uint64_t v129 = swift_slowAlloc();
    v132[0] = v129;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v119 = v11;
    uint64_t v130 = (uint64_t)v127;
    swift_getMetatypeMetadata();
    uint64_t v35 = String.init<A>(describing:)();
    os_log_t v117 = v29;
    id v36 = v28;
    uint64_t v130 = sub_1000C51B8(v35, v37, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2082;
    uint64_t v116 = v34 + 14;
    id v38 = [(objc_class *)v28 recordName];
    uint64_t v39 = v10;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v27;
    unint64_t v43 = v42;

    uint64_t v11 = v119;
    uint64_t v44 = v40;
    uint64_t v10 = v39;
    id v28 = v36;
    uint64_t v130 = sub_1000C51B8(v44, v43, v132);
    uint64_t v20 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v27 = v41;
    swift_bridgeObjectRelease();
    os_log_t v45 = v117;
    _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "%{public}s: Will save CKRecord for publicCloudObject {recordName: %{public}s}", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  Date.init()();
  id v47 = sub_1005801F4();
  sub_1000C0DE0(&v133, v134);
  Class v48 = sub_1000D440C();
  uint64_t v114 = v28;
  sub_1000963CC(0, &qword_10091D6F8);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_10077A530;
  *(void *)(v49 + 32) = v48;
  uint64_t v130 = v49;
  specialized Array._endMutation()();
  uint64_t v50 = (void *)v130;
  uint64_t v115 = v48;
  v136.value._rawValue = v50;
  v136.is_nil = 0;
  Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v136, v137).super.super.super.super.isa;
  [(objc_class *)isa setQualityOfService:17];
  [(objc_class *)isa setQueuePriority:8];
  uint64_t v52 = isa;
  id v53 = [v47 publicCloudDatabase];
  [(objc_class *)v52 setDatabase:v53];

  [(objc_class *)v52 setSavePolicy:2];
  uint64_t v126 = (char *)v52;
  id result = [(objc_class *)v52 configuration];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v55 = result;
  [result setContainer:v47];

  id result = [v126 configuration];
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v56 = result;
  uint64_t v57 = v10;
  uint64_t v113 = v27;
  id v118 = v47;
  [result setTimeoutIntervalForRequest:a5];

  id result = [v126 configuration];
  if (result)
  {
    uint64_t v58 = result;
    [result setTimeoutIntervalForResource:a5];

    uint64_t v59 = *(NSObject **)(v11 + 16);
    uint64_t v116 = v11 + 16;
    os_log_t v117 = v59;
    os_log_type_t v60 = v120;
    ((void (*)(char *, char *, uint64_t))v59)(v120, v20, v57);
    uint64_t v61 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v62 = v11;
    uint64_t v111 = v61 | 7;
    uint64_t v63 = (v61 + 24) & ~v61;
    uint64_t v112 = v63;
    unint64_t v64 = (v12 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v107 = v64;
    uint64_t v129 = v57;
    unint64_t v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v108 = v65;
    unint64_t v66 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v109 = v66;
    unint64_t v67 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v110 = v67 + 8;
    uint64_t v68 = swift_allocObject();
    uint64_t v69 = v114;
    *(void *)(v68 + 16) = v114;
    uint64_t v119 = v62;
    id v106 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 32);
    v106(v68 + v63, v60, v129);
    uint64_t v70 = v124;
    *(void *)(v68 + v64) = v124;
    uint64_t v71 = (uint64_t *)(v68 + v65);
    uint64_t v72 = v122;
    *uint64_t v71 = v123;
    v71[1] = v72;
    unint64_t v73 = v121;
    *(void *)(v68 + v66) = v121;
    os_log_t v74 = v127;
    *(void *)(v68 + v67) = v127;
    uint64_t v75 = v69;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v76 = v126;
    CKModifyRecordsOperation.perRecordSaveBlock.setter();
    ((void (*)(char *, char *, uint64_t))v117)(v60, v128, v129);
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = v75;
    v106(v77 + v112, v60, v129);
    *(void *)(v77 + v107) = v70;
    unint64_t v78 = (uint64_t *)(v77 + v108);
    uint64_t v79 = v129;
    *unint64_t v78 = v123;
    v78[1] = v72;
    *(void *)(v77 + v109) = v73;
    *(void *)(v77 + v67) = v74;
    uint64_t v80 = v75;
    swift_retain();
    swift_retain();
    swift_retain();
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
    uint64_t v130 = 1702256979;
    unint64_t v131 = 0xE400000000000000;
    uint64_t v81 = v76;
    unint64_t v82 = v115;
    v83._countAndFlagsBits = CKRecord.recordType.getter();
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    id v84 = [objc_allocWithZone((Class)CKOperationGroup) init];
    NSString v85 = String._bridgeToObjectiveC()();
    [v84 setName:v85];

    [v84 setQuantity:1];
    [v84 setExpectedSendSize:1];
    [v84 setExpectedReceiveSize:1];
    swift_bridgeObjectRelease();
    [v81 setGroup:v84];
    uint64_t v126 = v81;

    id v86 = v125;
    ((void (*)(char *, char *, uint64_t))v117)(v125, v128, v79);
    id v87 = v80;
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    int v90 = v89;
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v91 = swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      v132[0] = v123;
      *(_DWORD *)uint64_t v91 = 136446722;
      uint64_t v130 = (uint64_t)v74;
      swift_getMetatypeMetadata();
      os_log_t v127 = v88;
      uint64_t v92 = String.init<A>(describing:)();
      LODWORD(v122) = v90;
      uint64_t v130 = sub_1000C51B8(v92, v93, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 12) = 2082;
      id v94 = [(objc_class *)v87 recordName];
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v97 = v96;

      uint64_t v130 = sub_1000C51B8(v95, v97, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v79 = v129;
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 22) = 2048;
      unint64_t v98 = v120;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v100 = v99;
      uint64_t v101 = *(void (**)(char *, uint64_t))(v119 + 8);
      v101(v98, v79);
      uint64_t v130 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v101(v86, v79);
      os_log_t v102 = v127;
      _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v122, "%{public}s: Saving CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v91, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v82 = v115;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v101 = *(void (**)(char *, uint64_t))(v119 + 8);
      v101(v86, v79);
    }
    id v103 = v118;
    id v104 = [v118 publicCloudDatabase];
    id v105 = v126;
    [v104 addOperation:v126];

    v101(v128, v79);
    swift_release();
    return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v133);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100585D1C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100585D34(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unint64_t, void, void, void, void, void))sub_100580260);
}

uint64_t sub_100585D34(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, unint64_t, void, void, void, void, void))
{
  uint64_t v8 = a3 & 1;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a4(a1, a2, v8, *(void *)(v4 + 16), v4 + v10, *(void *)(v4 + v11), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4+ ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100585E28()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100585F44(uint64_t a1, char a2)
{
}

void sub_100585F64(uint64_t a1, char a2, const char *a3, uint64_t a4)
{
  char v8 = a2 & 1;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100581E38(a1, v8, *(void **)(v4 + 16), v4 + v10, *(void *)(v4 + v11), *(uint64_t (**)(uint64_t, void))(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), a3, a4);
}

uint64_t sub_100586050(unint64_t a1, char a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  char v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v31 - v9;
  uint64_t v34 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001D78D4((id)a1, a2);
    }
    else
    {
      uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      uint64_t v33 = _swiftEmptyArrayStorage;
      uint64_t result = sub_1001DE118(0, v15 & ~(v15 >> 63), 0);
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v32 = KeyPath;
      uint64_t v18 = 0;
      uint64_t v16 = v33;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v19 = *(id *)(a1 + 8 * v18 + 32);
        }
        uint64_t v20 = v19;
        id v21 = [v19 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 0, 1, v22);

        uint64_t v33 = v16;
        unint64_t v24 = v16[2];
        unint64_t v23 = v16[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001DE118(v23 > 1, v24 + 1, 1);
          uint64_t v16 = v33;
        }
        ++v18;
        v16[2] = v24 + 1;
        sub_1000F44F4((uint64_t)v8, (uint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v24);
      }
      while (v15 != v18);
      uint64_t KeyPath = v32;
    }
    sub_10039F8A4(KeyPath, (uint64_t)v16);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    uint64_t v11 = swift_getKeyPath();
    id v12 = [(id)a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
    sub_10032F24C(v11, (uint64_t)v10);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1001D78D4((id)a1, a2);
    if ((a2 & 1) == 0) {
      goto LABEL_26;
    }
  }
  sub_100398324(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100094134(&qword_10091D700);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = sub_10039F8B8(v26);
  swift_release();
  *(void *)(inited + 32) = v27;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = sub_10039F8DC(v28);
  swift_release();
  *(void *)(inited + 40) = v29;
  uint64_t v33 = (void *)inited;
  specialized Array._endMutation()();
  sub_100397E58(v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_26:
  uint64_t v30 = swift_getKeyPath();
  sub_10039F8DC(v30);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return sub_1002F52FC(v34);
}

uint64_t sub_100586570@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    a3();

    uint64_t v10 = ((uint64_t (*)(void))a4)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a4();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a5;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

void sub_100586650(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

uint64_t sub_100586798()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942578 = v0;
  return result;
}

uint64_t sub_100586820()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  *(void *)(v0 + 40) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942580 = v0;
  return result;
}

void *sub_1005868C0()
{
  sub_1001DE058(0, 5, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0xD000000000000023;
  v4[5] = 0x80000001007CE560;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1001DE058(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  uint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x696669746E656469;
  v7[5] = 0xEA00000000007265;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1001DE058(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
  v11[4] = 0xD00000000000001ALL;
  void v11[5] = 0x80000001007C6B40;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1001DE058(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  uint64_t v14 = &_swiftEmptyArrayStorage[2 * v10];
  v14[4] = 0xD00000000000001ELL;
  v14[5] = 0x80000001007C8BC0;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
  {
    sub_1001DE058(v15 > 1, v16 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16 + 1;
  uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
  v17[4] = 0x4E79616C70736964;
  v17[5] = 0xEB00000000656D61;
  return result;
}

uint64_t sub_100586DE0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v1 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  swift_release();
  unint64_t v5 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_100308F88(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    unint64_t v5 = sub_100308F88((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  unint64_t v8 = &v5[2 * v7];
  v8[4] = v3;
  void v8[5] = v4;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v9 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = sub_100308F88(0, v5[2] + 1, 1, v5);
    }
    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1) {
      unint64_t v5 = sub_100308F88((void *)(v13 > 1), v14 + 1, 1, v5);
    }
    v5[2] = v14 + 1;
    unint64_t v15 = &v5[2 * v14];
    v15[4] = v11;
    v15[5] = v12;
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  else
  {
LABEL_18:
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001007CAF70;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    sub_100094134(&qword_1009139F0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10058707C(unint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  uint64_t v9 = (void *)sub_100586050(a1, a2);
  type metadata accessor for REMCDListSection();
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v10 setPropertiesToFetch:isa];

  if (a6) {
    a6 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setRelationshipKeyPathsForPrefetching:a6];

  if (a4)
  {
    sub_1001BCA48();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setSortDescriptors:a4];

  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  return v12;
}

uint64_t sub_10058722C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100586570(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_100587274(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1005872C4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 list];
  *a2 = result;
  return result;
}

id sub_100587300(void *a1, id *a2)
{
  return [*a2 setList:*a1];
}

id sub_10058731C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_100587358(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_10058737C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100586570(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1005873C4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t type metadata accessor for RDObjectDescription()
{
  return self;
}

uint64_t sub_100587438(uint64_t a1)
{
  swift_getObjectType();
  sub_100094134(&qword_100917C30);
  v10[0] = String.init<A>(describing:)();
  v10[1] = v2;
  sub_1000E4FD8();
  uint64_t v3 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    Substring.init(_:)();
  }
  v10[0] = a1;
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100776E80;
  uint64_t v5 = static String._fromSubstring(_:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000C5B38();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = sub_100094134(&qword_10091D7A0);
  *(void *)(v4 + 104) = sub_100587600();
  *(void *)(v4 + 72) = v10;
  uint64_t v8 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_100587600()
{
  unint64_t result = qword_10091D7A8;
  if (!qword_10091D7A8)
  {
    sub_100096058(&qword_10091D7A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091D7A8);
  }
  return result;
}

uint64_t sub_10058765C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091D7B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091D7B0);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100587724()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  void *v4 = v5;
  uint64_t v6 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v8 = v5;
  char v9 = _dispatchPreconditionTest(_:)();
  id v10 = *(uint64_t (**)(void *, uint64_t))(v2 + 8);
  uint64_t result = v10(v4, v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_100587978();
  void *v4 = v8;
  v7(v4, v6, v1);
  id v12 = v8;
  char v13 = _dispatchPreconditionTest(_:)();
  uint64_t result = v10(v4, v1);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  void *v4 = v12;
  v7(v4, v6, v1);
  id v14 = v12;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t result = v10(v4, v1);
  if (v15)
  {
    sub_1000C0DE0(&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(void *)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    uint64_t v16 = swift_retain();
    uint64_t v17 = sub_1003CBF64(v16);
    swift_release();
    uint64_t v18 = sub_10058B2F4(v17, 0, 0);
    swift_bridgeObjectRelease();
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    uint64_t v20 = v0;
    sub_1002289C4(v20, (uint64_t)v18, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100587978()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue);
  void *v4 = v5;
  uint64_t v6 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v7 = v2 + 104;
  id v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v8((uint64_t)v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v9 = v5;
  uint64_t v10 = _dispatchPreconditionTest(_:)();
  char v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v11 = v2 + 8;
  id v12 = v13;
  v13((uint64_t)v4, v1);
  if ((v10 & 1) == 0) {
    goto LABEL_141;
  }
  id v14 = *(char **)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager);
  uint64_t v162 = OBJC_IVAR____TtC7remindd17RDLocationManager_queue;
  char v15 = *(void **)&v14[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  void *v4 = v15;
  unsigned int v165 = v6;
  char v164 = v8;
  v8((uint64_t)v4, v6, v1);
  id v16 = v15;
  uint64_t v10 = _dispatchPreconditionTest(_:)();
  v12((uint64_t)v4, v1);
  if ((v10 & 1) == 0)
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  uint64_t v161 = OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager;
  if (*(void *)&v14[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager])
  {
    unint64_t v174 = v14;
    long long v168 = v12;
    uint64_t v169 = v7;
    uint64_t v163 = v4;
    uint64_t v170 = v11;
    uint64_t v171 = v1;
    uint64_t v10 = *sub_1000C0DE0((void *)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource), *(void *)(v0 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24));
    uint64_t v17 = swift_retain();
    uint64_t v18 = sub_1003CBF64(v17);
    swift_release();
    Swift::Int v182 = &_swiftEmptySetSingleton;
    uint64_t v183 = &_swiftEmptySetSingleton;
    uint64_t v6 = *(void *)(v18 + 16);
    int64_t v175 = v18;
    if (v6)
    {
      uint64_t v19 = (id *)(v18 + 48);
      uint64_t v177 = &_swiftEmptyDictionarySingleton;
      while (1)
      {
        uint64_t v20 = *(v19 - 2);
        uint64_t v21 = *(v19 - 1);
        uint64_t v10 = (uint64_t)*v19;
        id v176 = v20;
        id v22 = v21;
        uint64_t v23 = sub_10058B484((void *)v10);
        uint64_t v25 = v24;
        id v26 = (id)v10;
        swift_bridgeObjectRetain();
        Swift::Int v27 = (Swift::Int)v177;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v184[0] = v27;
        unint64_t v30 = sub_1001806F8(v23, v25);
        uint64_t v31 = *(void *)(v27 + 16);
        BOOL v32 = (v29 & 1) == 0;
        uint64_t v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }
        uint64_t v10 = v29;
        if (*(void *)(v27 + 24) >= v33)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10031D264();
          }
        }
        else
        {
          sub_100316B78(v33, isUniquelyReferenced_nonNull_native);
          unint64_t v34 = sub_1001806F8(v23, v25);
          if ((v10 & 1) != (v35 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          unint64_t v30 = v34;
        }
        id v36 = (void *)v184[0];
        uint64_t v177 = (void *)v184[0];
        if (v10)
        {
          uint64_t v10 = *(void *)(v184[0] + 56);

          *(void *)(v10 + 8 * v30) = v26;
        }
        else
        {
          *(void *)(v184[0] + 8 * (v30 >> 6) + 64) |= 1 << v30;
          unint64_t v37 = (uint64_t *)(v36[6] + 16 * v30);
          *unint64_t v37 = v23;
          v37[1] = v25;
          *(void *)(v36[7] + 8 * v30) = v26;
          uint64_t v38 = v36[2];
          BOOL v39 = __OFADD__(v38, 1);
          uint64_t v40 = v38 + 1;
          if (v39) {
            goto LABEL_137;
          }
          void v36[2] = v40;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10031DC68(v184, v23, v25);

        swift_bridgeObjectRelease();
        v19 += 3;
        if (!--v6) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v177 = &_swiftEmptyDictionarySingleton;
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v45 = sub_1004F1028();
    Swift::Int v46 = v45;
    if ((v45 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = __CocoaSet.makeIterator()();
      sub_10058B670();
      sub_10058B700((unint64_t *)&qword_10091BA00, 255, (void (*)(uint64_t))sub_10058B670);
      Set.Iterator.init(_cocoa:)();
      Swift::Int v46 = v184[0];
      Swift::Int v47 = v184[1];
      Swift::Int v48 = v184[2];
      Swift::Int v49 = v184[3];
      unint64_t v50 = v184[4];
    }
    else
    {
      Swift::Int v49 = 0;
      uint64_t v51 = -1 << *(unsigned char *)(v45 + 32);
      Swift::Int v47 = v45 + 56;
      Swift::Int v48 = ~v51;
      uint64_t v52 = -v51;
      if (v52 < 64) {
        uint64_t v53 = ~(-1 << v52);
      }
      else {
        uint64_t v53 = -1;
      }
      unint64_t v50 = v53 & *(void *)(v45 + 56);
    }
    int64_t v175 = v48;
    id v176 = (id)(v46 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = (unint64_t)(v48 + 64) >> 6;
    if (v46 < 0) {
      goto LABEL_32;
    }
    while (1)
    {
      if (v50)
      {
        uint64_t v54 = (v50 - 1) & v50;
        unint64_t v55 = __clz(__rbit64(v50)) | (v49 << 6);
        Swift::Int v56 = v49;
        uint64_t v57 = (uint64_t)v177;
        goto LABEL_49;
      }
      uint64_t v60 = v49 + 1;
      uint64_t v57 = (uint64_t)v177;
      if (__OFADD__(v49, 1)) {
        goto LABEL_140;
      }
      if (v60 >= v6) {
        break;
      }
      unint64_t v61 = *(void *)(v47 + 8 * v60);
      Swift::Int v56 = v49 + 1;
      if (!v61)
      {
        Swift::Int v56 = v49 + 2;
        if (v49 + 2 >= v6) {
          break;
        }
        unint64_t v61 = *(void *)(v47 + 8 * v56);
        if (!v61)
        {
          Swift::Int v56 = v49 + 3;
          if (v49 + 3 >= v6) {
            break;
          }
          unint64_t v61 = *(void *)(v47 + 8 * v56);
          if (!v61)
          {
            Swift::Int v56 = v49 + 4;
            if (v49 + 4 >= v6) {
              break;
            }
            unint64_t v61 = *(void *)(v47 + 8 * v56);
            if (!v61)
            {
              Swift::Int v62 = v49 + 5;
              do
              {
                if (v6 == v62) {
                  goto LABEL_52;
                }
                unint64_t v61 = *(void *)(v47 + 8 * v62++);
              }
              while (!v61);
              Swift::Int v56 = v62 - 1;
            }
          }
        }
      }
      uint64_t v54 = (v61 - 1) & v61;
      unint64_t v55 = __clz(__rbit64(v61)) + (v56 << 6);
LABEL_49:
      id v59 = *(id *)(*(void *)(v46 + 48) + 8 * v55);
      if (!v59) {
        break;
      }
      while (1)
      {
        uint64_t v63 = sub_10058B484(v59);
        uint64_t v65 = v64;
        swift_bridgeObjectRetain();
        uint64_t v10 = (uint64_t)v59;
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        v179 = (void *)v57;
        sub_1002C7E4C(v10, v63, v65, v66);
        uint64_t v177 = v179;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10031DC68((Swift::Int *)&v179, v63, v65);

        swift_bridgeObjectRelease();
        Swift::Int v49 = v56;
        unint64_t v50 = v54;
        if ((v46 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_32:
        uint64_t v58 = __CocoaSet.Iterator.next()();
        if (v58)
        {
          uint64_t v178 = v58;
          sub_10058B670();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v59 = v179;
          swift_unknownObjectRelease();
          Swift::Int v56 = v49;
          uint64_t v54 = v50;
          uint64_t v57 = (uint64_t)v177;
          if (v59) {
            continue;
          }
        }
        goto LABEL_52;
      }
    }
LABEL_52:
    sub_1000C1AF8();
    uint64_t v67 = (uint64_t)v182;
    uint64_t v68 = (uint64_t)v183;
    if (v183[2] <= v182[2] >> 3)
    {
      v179 = v182;
      swift_bridgeObjectRetain();
      uint64_t v70 = swift_bridgeObjectRetain();
      sub_10065A5FC(v70);
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t)v179;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v69 = swift_bridgeObjectRetain();
      uint64_t v10 = (uint64_t)sub_10023CBC4(v69, v67);
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v67 + 16) <= *(void *)(v68 + 16) >> 3)
    {
      v179 = (void *)v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10065A5FC(v67);
      swift_bridgeObjectRelease();
      uint64_t v6 = (uint64_t)v179;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = (uint64_t)sub_10023CBC4(v67, v68);
      swift_bridgeObjectRelease();
    }
    if (qword_100907918 == -1)
    {
LABEL_59:
      uint64_t v160 = type metadata accessor for Logger();
      uint64_t v71 = sub_10008E2DC(v160, (uint64_t)qword_10091D7B0);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      BOOL v74 = os_log_type_enabled(v72, v73);
      int64_t v175 = v71;
      id v176 = (id)v10;
      if (v74)
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        v179 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v76 = Set.description.getter();
        unint64_t v78 = v77;
        swift_bridgeObjectRelease();
        uint64_t v181 = sub_1000C51B8(v76, v78, (uint64_t *)&v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "reconcileAllGeofences desiredSet = %s", v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        uint64_t v181 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v82 = Set.description.getter();
        unint64_t v84 = v83;
        swift_bridgeObjectRelease();
        uint64_t v180 = sub_1000C51B8(v82, v84, &v181);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "reconcileAllGeofences existingSet = %s", v81, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v10 = (uint64_t)v176;
      swift_bridgeObjectRetain_n();
      NSString v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        id v87 = (uint8_t *)swift_slowAlloc();
        uint64_t v181 = swift_slowAlloc();
        *(_DWORD *)id v87 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v88 = Set.description.getter();
        unint64_t v90 = v89;
        swift_bridgeObjectRelease();
        uint64_t v180 = sub_1000C51B8(v88, v90, &v181);
        uint64_t v10 = (uint64_t)v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "reconcileAllGeofences setToRemove = %s", v87, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRetain_n();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.debug.getter();
      BOOL v93 = os_log_type_enabled(v91, v92);
      uint64_t v172 = v6;
      if (v93)
      {
        id v94 = (uint8_t *)swift_slowAlloc();
        uint64_t v181 = swift_slowAlloc();
        *(_DWORD *)id v94 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v95 = Set.description.getter();
        unint64_t v97 = v96;
        swift_bridgeObjectRelease();
        uint64_t v180 = sub_1000C51B8(v95, v97, &v181);
        uint64_t v10 = (uint64_t)v176;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "reconcileAllGeofences setToAdd = %s", v94, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v6 = (uint64_t)v163;
      uint64_t v99 = v165;
      uint64_t v100 = v164;
      int64_t v101 = 0;
      uint64_t v102 = *(void *)(v10 + 56);
      uint64_t v173 = (void *)(v10 + 56);
      uint64_t v103 = 1 << *(unsigned char *)(v10 + 32);
      uint64_t v104 = -1;
      if (v103 < 64) {
        uint64_t v104 = ~(-1 << v103);
      }
      unint64_t v105 = v104 & v102;
      int64_t v175 = (unint64_t)(v103 + 63) >> 6;
      uint64_t v159 = &v181;
      *(void *)&long long v98 = 136315138;
      long long v158 = v98;
      v157[1] = (char *)&type metadata for Any + 8;
      id v106 = v174;
      unint64_t v107 = v177;
      while (1)
      {
        while (v105)
        {
          unint64_t v108 = __clz(__rbit64(v105));
          v105 &= v105 - 1;
          unint64_t v109 = v108 | (v101 << 6);
          if (!v107[2]) {
            continue;
          }
LABEL_90:
          uint64_t v113 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v109);
          uint64_t v115 = *v113;
          uint64_t v114 = v113[1];
          swift_bridgeObjectRetain();
          unint64_t v116 = sub_1001806F8(v115, v114);
          if (v117)
          {
            unint64_t v167 = v105;
            int64_t v166 = v101;
            id v118 = *(id *)(v107[7] + 8 * v116);
            swift_bridgeObjectRelease();
            uint64_t v119 = *(void **)&v106[v162];
            *(void *)uint64_t v6 = v119;
            uint64_t v120 = v171;
            v100(v6, v99, v171);
            uint64_t v10 = v119;
            char v121 = _dispatchPreconditionTest(_:)();
            uint64_t v122 = v168;
            v168(v6, v120);
            if ((v121 & 1) == 0) {
              goto LABEL_131;
            }
            *(void *)uint64_t v6 = v10;
            v100(v6, v99, v120);
            id v123 = (id)v10;
            uint64_t v10 = _dispatchPreconditionTest(_:)();
            v122(v6, v120);
            if ((v10 & 1) == 0) {
              goto LABEL_132;
            }
            id v106 = v174;
            uint64_t v124 = *(void **)&v174[v161];
            if (!v124) {
              goto LABEL_133;
            }
            uint64_t v125 = qword_100907708;
            id v126 = v124;
            if (v125 != -1) {
              swift_once();
            }
            sub_10008E2DC(v160, (uint64_t)qword_10091B930);
            id v127 = v118;
            swift_unknownObjectRetain_n();
            id v128 = v127;
            uint64_t v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.default.getter();
            BOOL v131 = os_log_type_enabled(v129, v130);
            unint64_t v105 = v167;
            if (v131)
            {
              uint64_t v132 = (uint8_t *)swift_slowAlloc();
              uint64_t v181 = swift_slowAlloc();
              *(_DWORD *)uint64_t v132 = v158;
              uint64_t v133 = sub_1004F2C58(v128);
              uint64_t v180 = sub_1000C51B8(v133, v134, &v181);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_unknownObjectRelease_n();
              id v106 = v174;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v129, v130, "stopMonitoring: %s", v132, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_unknownObjectRelease_n();
            }
            uint64_t v100 = v164;
            uint64_t v10 = (uint64_t)v176;
            int64_t v101 = v166;
            [v126 stopMonitoringForRegion:v128];

            uint64_t v6 = (uint64_t)v163;
            unint64_t v107 = v177;
            uint64_t v99 = v165;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v10 = (uint64_t)v176;
          }
        }
        int64_t v110 = v101 + 1;
        if (__OFADD__(v101, 1)) {
          goto LABEL_129;
        }
        if (v110 >= v175) {
          break;
        }
        unint64_t v111 = v173[v110];
        ++v101;
        if (!v111)
        {
          int64_t v101 = v110 + 1;
          if (v110 + 1 >= v175) {
            break;
          }
          unint64_t v111 = v173[v101];
          if (!v111)
          {
            int64_t v101 = v110 + 2;
            if (v110 + 2 >= v175) {
              break;
            }
            unint64_t v111 = v173[v101];
            if (!v111)
            {
              int64_t v112 = v110 + 3;
              if (v112 >= v175) {
                break;
              }
              unint64_t v111 = v173[v112];
              if (!v111)
              {
                while (1)
                {
                  int64_t v101 = v112 + 1;
                  if (__OFADD__(v112, 1)) {
                    break;
                  }
                  if (v101 >= v175) {
                    goto LABEL_100;
                  }
                  unint64_t v111 = v173[v101];
                  ++v112;
                  if (v111) {
                    goto LABEL_89;
                  }
                }
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
                goto LABEL_142;
              }
              int64_t v101 = v112;
            }
          }
        }
LABEL_89:
        unint64_t v105 = (v111 - 1) & v111;
        unint64_t v109 = __clz(__rbit64(v111)) + (v101 << 6);
        if (v107[2]) {
          goto LABEL_90;
        }
      }
LABEL_100:
      swift_release();
      int64_t v135 = 0;
      unint64_t v136 = v172 + 56;
      uint64_t v137 = 1 << *(unsigned char *)(v172 + 32);
      uint64_t v138 = -1;
      if (v137 < 64) {
        uint64_t v138 = ~(-1 << v137);
      }
      unint64_t v139 = v138 & *(void *)(v172 + 56);
      int64_t v140 = (unint64_t)(v137 + 63) >> 6;
      unint64_t v167 = v172 + 56;
      int64_t v166 = v140;
      while (1)
      {
        if (v139)
        {
          unint64_t v141 = __clz(__rbit64(v139));
          v139 &= v139 - 1;
          unint64_t v142 = v141 | (v135 << 6);
          if (!v107[2]) {
            continue;
          }
LABEL_122:
          int64_t v175 = v139;
          id v176 = (id)v135;
          os_log_t v146 = (uint64_t *)(*(void *)(v172 + 48) + 16 * v142);
          uint64_t v147 = *v146;
          uint64_t v10 = v146[1];
          swift_bridgeObjectRetain();
          unint64_t v148 = sub_1001806F8(v147, v10);
          if (v149)
          {
            uint64_t v173 = *(id *)(v107[7] + 8 * v148);
            swift_bridgeObjectRelease();
            uint64_t v150 = *(void **)&v106[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
            *(void *)uint64_t v6 = v150;
            uint64_t v151 = v171;
            v100(v6, v99, v171);
            uint64_t v10 = v150;
            char v152 = _dispatchPreconditionTest(_:)();
            uint64_t v153 = v168;
            v168(v6, v151);
            if ((v152 & 1) == 0) {
              goto LABEL_134;
            }
            *(void *)uint64_t v6 = v10;
            v100(v6, v99, v151);
            id v154 = (id)v10;
            uint64_t v10 = _dispatchPreconditionTest(_:)();
            v153(v6, v151);
            if ((v10 & 1) == 0) {
              goto LABEL_135;
            }
            id v106 = v174;
            uint64_t v155 = *(void **)&v174[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
            if (!v155) {
              goto LABEL_136;
            }
            uint64_t v10 = v155;
            uint64_t v156 = v173;
            sub_1004F07C4((void *)v10, v106, v173);

            unint64_t v107 = v177;
            unint64_t v136 = v167;
            int64_t v140 = v166;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          unint64_t v139 = v175;
          int64_t v135 = (int64_t)v176;
        }
        else
        {
          int64_t v143 = v135 + 1;
          if (__OFADD__(v135, 1)) {
            goto LABEL_130;
          }
          if (v143 >= v140)
          {
LABEL_127:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          unint64_t v144 = *(void *)(v136 + 8 * v143);
          ++v135;
          if (!v144)
          {
            int64_t v135 = v143 + 1;
            if (v143 + 1 >= v140) {
              goto LABEL_127;
            }
            unint64_t v144 = *(void *)(v136 + 8 * v135);
            if (!v144)
            {
              int64_t v135 = v143 + 2;
              if (v143 + 2 >= v140) {
                goto LABEL_127;
              }
              unint64_t v144 = *(void *)(v136 + 8 * v135);
              if (!v144)
              {
                int64_t v145 = v143 + 3;
                if (v145 >= v140) {
                  goto LABEL_127;
                }
                unint64_t v144 = *(void *)(v136 + 8 * v145);
                if (!v144)
                {
                  while (1)
                  {
                    int64_t v135 = v145 + 1;
                    if (__OFADD__(v145, 1)) {
                      goto LABEL_139;
                    }
                    if (v135 >= v140) {
                      goto LABEL_127;
                    }
                    unint64_t v144 = *(void *)(v136 + 8 * v135);
                    ++v145;
                    if (v144) {
                      goto LABEL_121;
                    }
                  }
                }
                int64_t v135 = v145;
              }
            }
          }
LABEL_121:
          unint64_t v139 = (v144 - 1) & v144;
          unint64_t v142 = __clz(__rbit64(v144)) + (v135 << 6);
          if (v107[2]) {
            goto LABEL_122;
          }
        }
      }
    }
LABEL_143:
    swift_once();
    goto LABEL_59;
  }
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_10008E2DC(v41, (uint64_t)qword_10091D7B0);
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "locationManager hasn't started. Not reconciling geofences.", v44, 2u);
    swift_slowDealloc();
  }
}

void sub_100588F0C(void (*a1)(void), uint64_t a2, uint64_t a3, unint64_t a4)
{
  a1();
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091D7B0);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)id v9 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a3, a4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction RELEASE {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10058915C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *uint64_t v5 = v6;
  uint64_t v7 = enum case for DispatchPredicate.onQueue(_:);
  os_log_type_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
  ((void (*)(void *, void, uint64_t, __n128))v8)(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v9 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v2 + 8);
  v10(v5, v1);
  if (v6)
  {
    BOOL v32 = (uint64_t (*)(void *, uint64_t))v10;
    if (qword_100907918 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v33 = v8;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_10008E2DC(v11, (uint64_t)qword_10091D7B0);
  char v13 = v0;
  uint64_t v31 = v12;
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = v2 + 104;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    v28[1] = v18;
    unsigned int v29 = v7;
    *(_DWORD *)uint64_t v17 = 136315138;
    v28[0] = v17 + 4;
    uint64_t v34 = 60;
    unint64_t v35 = 0xE100000000000000;
    uint64_t v36 = v18;
    v19._countAndFlagsBits = sub_100587438((uint64_t)v13);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 62;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v34 = sub_1000C51B8(v34, v35, &v36);
    uint64_t v7 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting location alarm producer {producer: %s}", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v21 = *(void *)&v13[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager];
  id v22 = *(void **)(v21 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *uint64_t v5 = v22;
  v33(v5, v7, v1);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t result = v32(v5, v1);
  if (v22)
  {
    if (*(void *)(v21 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager))
    {
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        Swift::Int v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::Int v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "locationManager started, reconciling all geofences", v27, 2u);
        swift_slowDealloc();
      }

      return sub_100587724();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100589530()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    if (qword_100907918 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10091D7B0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "alarmDatabaseDidChange, reconciling all geofences", v12, 2u);
    swift_slowDealloc();
  }

  return sub_100587724();
}

unint64_t sub_100589700()
{
  return 0xD000000000000017;
}

uint64_t sub_10058971C()
{
  return sub_10058915C();
}

uint64_t sub_100589740()
{
  return sub_100589530();
}

uint64_t sub_100589764()
{
  return sub_100587724();
}

uint64_t sub_100589788(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  id v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void **)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *id v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(void *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_1003CBF64(v12);
    uint64_t v14 = swift_release();
    __chkstk_darwin(v14);
    *(void *)&v18[-16] = a2;
    v18[-8] = 1;
    os_log_type_t v15 = sub_1002256B8((void (*)(uint64_t *__return_ptr, id *))sub_10058B7C4, (uint64_t)&v18[-32], v13);
    swift_bridgeObjectRelease();
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    uint64_t v17 = a1;
    sub_1002289C4(v17, (uint64_t)v15, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100589974(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  id v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void **)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  *id v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    sub_1000C0DE0(&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource], *(void *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource + 24]);
    uint64_t v12 = swift_retain();
    uint64_t v13 = sub_1003CBF64(v12);
    uint64_t v14 = swift_release();
    __chkstk_darwin(v14);
    *(void *)&v18[-16] = a2;
    v18[-8] = 0;
    os_log_type_t v15 = sub_1002256B8((void (*)(uint64_t *__return_ptr, id *))sub_10058B7A0, (uint64_t)&v18[-32], v13);
    swift_bridgeObjectRelease();
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    uint64_t v17 = a1;
    sub_1002289C4(v17, (uint64_t)v15, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100589B5C(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v95 = a4;
  uint64_t v99 = type metadata accessor for Date();
  uint64_t v102 = *(void *)(v99 - 8);
  uint64_t v7 = __chkstk_darwin(v99);
  BOOL v93 = (char *)v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v92 = (char *)v89 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v89 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v89 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  Swift::String v19 = (char *)v89 - v18;
  __chkstk_darwin(v17);
  int64_t v101 = (char *)v89 - v20;
  uint64_t v21 = type metadata accessor for Calendar();
  uint64_t v96 = *(void *)(v21 - 8);
  uint64_t v97 = v21;
  __chkstk_darwin(v21);
  uint64_t v100 = (char *)v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = *(void **)a1;
  uint64_t v24 = *(void **)(a1 + 8);
  uint64_t v25 = *(void **)(a1 + 16);
  id v98 = v23;
  id v94 = v24;
  id v103 = v25;
  id v26 = [v103 identifier];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  id v30 = [a2 identifier];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  if (v27 == v31 && v29 == v33)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
LABEL_13:
    id v37 = v98;
    id v48 = v98;
    Swift::Int v49 = v100;
    static Calendar.current.getter();
    uint64_t v40 = v101;
    Date.init()();
    char v50 = 1;
    goto LABEL_33;
  }
LABEL_7:
  unint64_t v35 = &selRef_notifyOnEntry;
  if ((a3 & 1) == 0) {
    unint64_t v35 = &selRef_notifyOnExit;
  }
  unsigned int v36 = [v103 *v35];
  id v37 = v98;
  id v38 = v98;
  BOOL v39 = v100;
  static Calendar.current.getter();
  uint64_t v40 = v101;
  Date.init()();
  if (v36)
  {
    id v41 = [v38 displayDate];
    uint64_t v42 = v102;
    if (v41)
    {
      id v91 = v41;
      id v43 = [v41 date];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v43) = Calendar.isDate(_:inSameDayAs:)();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      uint64_t v45 = v99;
      v44(v16, v19, v99);
      v44(v13, v40, v45);
      if (v43)
      {
        Swift::Int v46 = v13;
        Swift::Int v47 = *(void (**)(char *, uint64_t))(v42 + 8);
        v47(v46, v45);
        v47(v16, v45);
      }
      else
      {
        sub_10058B700((unint64_t *)&qword_1009123E0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
        char v55 = dispatch thunk of static Comparable.< infix(_:_:)();
        Swift::Int v56 = v13;
        Swift::Int v47 = *(void (**)(char *, uint64_t))(v42 + 8);
        v47(v56, v45);
        v47(v16, v45);
        if (v55)
        {
          uint64_t v57 = v19;
          if (qword_100907918 != -1) {
            swift_once();
          }
          uint64_t v58 = type metadata accessor for Logger();
          sub_10008E2DC(v58, (uint64_t)qword_10091D7B0);
          id v59 = v92;
          uint64_t v60 = v99;
          v44(v92, v57, v99);
          unint64_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v63 = (uint8_t *)swift_slowAlloc();
            BOOL v93 = (char *)swift_slowAlloc();
            unint64_t v105 = v93;
            unint64_t v90 = v63;
            *(_DWORD *)uint64_t v63 = 136315138;
            v89[1] = v63 + 4;
            sub_10058B700((unint64_t *)&qword_100908230, 255, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v104 = sub_1000C51B8(v64, v65, (uint64_t *)&v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v47(v59, v60);
            _os_log_impl((void *)&_mh_execute_header, v61, v62, "Reminder has displayDate that's in the future, firing geofence as passive instead of active. {displayDate.date: %s}", v90, 0xCu);
            char v66 = v47;
            char v50 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v66(v57, v60);
          }
          else
          {

            v47(v59, v60);
            v47(v57, v60);
            char v50 = 1;
          }
          goto LABEL_32;
        }
        uint64_t v45 = v99;
      }
      uint64_t v67 = v19;
      uint64_t v68 = v93;
      if (qword_100907918 != -1) {
        swift_once();
      }
      uint64_t v69 = type metadata accessor for Logger();
      sub_10008E2DC(v69, (uint64_t)qword_10091D7B0);
      v44(v68, v67, v45);
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        os_log_type_t v92 = v67;
        unint64_t v90 = (uint8_t *)v47;
        os_log_type_t v73 = (uint8_t *)v72;
        unint64_t v105 = (char *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v73 = 136315138;
        sub_10058B700((unint64_t *)&qword_100908230, 255, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v104 = sub_1000C51B8(v74, v75, (uint64_t *)&v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v76 = v68;
        unint64_t v77 = v90;
        ((void (*)(char *, uint64_t))v90)(v76, v45);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Reminder has displayDate that's in the past or same day, firing geofence as active as usual {displayDate.date: %s}", v73, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v77)(v92, v45);
      }
      else
      {

        v47(v68, v45);
        v47(v67, v45);
      }
      char v50 = 0;
LABEL_32:
      Swift::Int v49 = v100;
      uint64_t v40 = v101;
      id v37 = v98;
      goto LABEL_33;
    }
    if (qword_100907918 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10091D7B0);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Reminder has no displayDate, firing geofence as active", v54, 2u);
      swift_slowDealloc();
    }

    char v50 = 0;
    Swift::Int v49 = v100;
    uint64_t v40 = v101;
  }
  else
  {
    char v50 = 1;
    Swift::Int v49 = v39;
  }
LABEL_33:
  unint64_t v78 = v94;
  id v79 = v37;
  id v80 = v78;
  uint64_t v81 = sub_100680208(v80);
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  char v87 = v86;

  (*(void (**)(char *, uint64_t))(v102 + 8))(v40, v99);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v49, v97);

  uint64_t v88 = v95;
  void *v95 = v79;
  v88[1] = v81;
  void v88[2] = v83;
  v88[3] = v85;
  *((unsigned char *)v88 + 32) = v87;
  *((unsigned char *)v88 + 33) = v50;
  *((unsigned char *)v88 + 34) = 0;
}

void sub_10058A5B4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  id v48 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = __chkstk_darwin(v6).n128_u64[0];
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [v1 structuredLocation:v8];
  uint64_t v49 = REMStructuredLocation.clCircularRegion.getter();

  id v12 = [a1 objectID];
  id v13 = [v12 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  uint64_t v50 = v14;
  uint64_t v51 = v16;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 47;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v50;
  uint64_t v20 = v51;
  id v21 = [v2 objectID];
  id v22 = [v21 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v25 = v24;
  v17(v10, v6);
  uint64_t v50 = v19;
  uint64_t v51 = v20;
  id v26 = (void *)v49;
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = v23;
  v27._object = v25;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  [v26 center];
  double v29 = v28;
  double v31 = v30;
  [v26 radius];
  double v33 = v32;
  id v34 = objc_allocWithZone((Class)CLCircularRegion);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v36 = [v34 initWithCenter:v35 radius:v29 identifier:v31];

  [v36 setGeoReferenceFrame:[v26 geoReferenceFrame]];
  id v37 = [v2 proximity];
  if (!v37) {
    goto LABEL_12;
  }
  if (v37 == (id)2)
  {
    [v36 setNotifyOnEntry:0];
    [v36 setNotifyOnExit:1];
    uint64_t v38 = 0;
    goto LABEL_11;
  }
  if (v37 == (id)1)
  {
    [v36 setNotifyOnEntry:1];
    [v36 setNotifyOnExit:0];
    id v39 = [v2 structuredLocation];
    id v40 = [v39 contactLabel];

    if (!v40)
    {
      id v41 = [v2 structuredLocation];
      id v40 = [v41 title];

      if (!v40) {
        goto LABEL_12;
      }
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    if (String.containsNameOfHomeLocation.getter())
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v42 = String.containsNameOfWorkLocation.getter();
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
LABEL_12:

        return;
      }
    }
    uint64_t v38 = 1;
LABEL_11:
    id v43 = v36;
    [v43 setConservativeEntry:v38];

    goto LABEL_12;
  }
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v44 = v47;
  uint64_t v45 = sub_10008E2DC(v47, (uint64_t)qword_10091D7B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v45, v44);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_10052ECB8((uint64_t)"unknown proximity", 17, 2);
  __break(1u);
}

void sub_10058AB00(void *a1)
{
}

uint64_t type metadata accessor for RDLocationAlarmProducer()
{
  return self;
}

uint64_t sub_10058AB48(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10058B700(&qword_10091D810, a2, (void (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10058ABA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a5;
  uint64_t v40 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907918 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_10008E2DC(v14, (uint64_t)qword_10091D7B0);
  swift_bridgeObjectRetain_n();
  uint64_t v39 = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v41 = a1;
  if (v18)
  {
    uint64_t v38 = v12;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    id v37 = v11;
    uint64_t aBlock = v20;
    *(_DWORD *)uint64_t v19 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v45 = (void *)sub_1000C51B8(a2, (unint64_t)a3, &aBlock);
    uint64_t v12 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}", v19, 0xCu);
    swift_arrayDestroy();
    id v11 = v37;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t aBlock = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t aBlock = 0xD00000000000002ALL;
  unint64_t v47 = 0x80000001007D8A70;
  v21._countAndFlagsBits = a2;
  v21._object = a3;
  String.append(_:)(v21);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = os_transaction_create();
  swift_release();
  if (v22)
  {
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v43;
    void v23[2] = v40;
    v23[3] = v24;
    v23[4] = a2;
    v23[5] = a3;
    v23[6] = v22;
    uint64_t v50 = sub_10058B790;
    uint64_t v51 = v23;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v47 = 1107296256;
    id v48 = sub_100236C78;
    uint64_t v49 = &unk_1008CAF30;
    uint64_t v25 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_unknownObjectRetain();
    id v26 = v44;
    static DispatchQoS.unspecified.getter();
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_10058B700((unint64_t *)&qword_100908150, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000D10E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v36 = a2;
    swift_bridgeObjectRetain_n();
    Swift::String v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v37 = v11;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v38 = v12;
      double v30 = (uint8_t *)v29;
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)double v30 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v45 = (void *)sub_1000C51B8(v36, (unint64_t)a3, &aBlock);
      id v11 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDLocationAlarmProducer: Couldn't create os_transaction_t for %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = v38;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v31 = v40;
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = v43;
    *(void *)(v32 + 16) = v31;
    *(void *)(v32 + 24) = v33;
    uint64_t v50 = sub_10011C6C0;
    uint64_t v51 = (void *)v32;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v47 = 1107296256;
    id v48 = sub_100236C78;
    uint64_t v49 = &unk_1008CAEE0;
    id v34 = _Block_copy(&aBlock);
    swift_retain();
    id v26 = v44;
    static DispatchQoS.unspecified.getter();
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_10058B700((unint64_t *)&qword_100908150, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000D10E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v34);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v42);
  return swift_release();
}

void *sub_10058B2F4(uint64_t a1, void *a2, char a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    NSString v35 = _swiftEmptyArrayStorage;
    sub_1001DE7B4(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v7 = (void **)(a1 + 48);
    char v25 = a3 & 1;
    while (1)
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      v28[0] = *(v7 - 2);
      v28[1] = v8;
      void v28[2] = v9;
      id v10 = v28[0];
      id v11 = v8;
      id v12 = v9;
      sub_100589B5C((uint64_t)v28, a2, v25, &v29);
      if (v27) {
        break;
      }
      uint64_t v27 = 0;

      uint64_t v13 = v29;
      long long v14 = v30;
      uint64_t v15 = v31;
      char v16 = v32;
      char v17 = v33;
      char v18 = v34;
      NSString v35 = v4;
      unint64_t v20 = v4[2];
      unint64_t v19 = v4[3];
      if (v20 >= v19 >> 1)
      {
        long long v24 = v30;
        char v23 = v34;
        sub_1001DE7B4(v19 > 1, v20 + 1, 1);
        char v18 = v23;
        long long v14 = v24;
        uint64_t v4 = v35;
      }
      v4[2] = v20 + 1;
      Swift::String v21 = &v4[5 * v20];
      v21[4] = v13;
      *(_OWORD *)(v21 + 5) = v14;
      v21[7] = v15;
      *((unsigned char *)v21 + 64) = v16;
      *((unsigned char *)v21 + 65) = v17;
      *((unsigned char *)v21 + 66) = v18;
      v7 += 3;
      if (!--v3) {
        return v4;
      }
    }
    swift_release();
  }
  return v4;
}

uint64_t sub_10058B484(void *a1)
{
  id v2 = [a1 identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = a1;
    [v5 center];
    Double.write<A>(to:)();
    v7._countAndFlagsBits = 44;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    [v5 center];
    Double.write<A>(to:)();
    [v5 radius];
    Double.write<A>(to:)();
    [v5 geoReferenceFrame];
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    id v10 = v9;
    v11._countAndFlagsBits = 95;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 95;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 95;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v8;
    v16._object = v10;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
  }
  return v3;
}

unint64_t sub_10058B670()
{
  unint64_t result = qword_100916EC0;
  if (!qword_100916EC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100916EC0);
  }
  return result;
}

uint64_t sub_10058B6B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10058B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10058B6F8()
{
  return swift_release();
}

uint64_t sub_10058B700(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10058B748()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10058B790()
{
  sub_100588F0C(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_10058B7A0(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100589B5C(a1, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

void sub_10058B7C4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_10058B7E4@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  NSString v35 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  Swift::String v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  id v26 = a3;
  uint64_t v27 = a2;
  if (v14)
  {
    Swift::String v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v16 = v8 + 16;
    uint64_t v17 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v18 = *(void *)(v16 + 56);
    unint64_t v19 = v16 + 40;
    long long v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 32);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    char v32 = v15;
    uint64_t v33 = v16;
    uint64_t v28 = v18;
    uint64_t v29 = (void (**)(char *, uint64_t))(v16 - 8);
    swift_bridgeObjectRetain();
    char v34 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v19;
    unint64_t v25 = v19 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v32(v13, v17, v7);
      unint64_t v20 = *v34;
      (*v34)(v13, 0, 1, v7);
      if ((*v30)(v13, 1, v7) == 1) {
        break;
      }
      Swift::String v21 = *v31;
      (*v31)(v10, v13, v7);
      char v22 = v35(v10);
      if (v4)
      {
        (*v29)(v10, v7);
        return swift_bridgeObjectRelease();
      }
      if (v22)
      {
        swift_bridgeObjectRelease();
        long long v24 = v26;
        v21(v26, v10, v7);
        return v20(v24, 0, 1, v7);
      }
      (*v29)(v10, v7);
      v17 += v28;
      if (!--v14) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
    unint64_t v25 = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
LABEL_9:
    v20(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return v20(v26, 1, 1, v7);
}

uint64_t sub_10058BAFC@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  long long v30 = a1;
  uint64_t v27 = a3;
  uint64_t v5 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v28 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v29 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v31 = v6 + 48;
  char v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v33 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_100128070(*(void *)(v33 + 48) + *(void *)(v6 + 72) * i, (uint64_t)v11);
    char v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v23(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
    {
      swift_release();
      uint64_t v25 = v27;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v25, 1, 1, v5);
    }
    sub_1001280D4((uint64_t)v11, (uint64_t)v8);
    char v24 = v30(v8);
    if (v3)
    {
      sub_100128138((uint64_t)v8);
      return swift_release();
    }
    if (v24)
    {
      swift_release();
      uint64_t v26 = v27;
      sub_1001280D4((uint64_t)v8, v27);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v23)(v26, 0, 1, v5);
    }
    uint64_t result = sub_100128138((uint64_t)v8);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1)) {
      break;
    }
    if (v17 >= v29) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v28 + 8 * v17);
    if (!v21)
    {
      int64_t v22 = v17 + 1;
      if (v17 + 1 >= v29) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v29) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21) {
        goto LABEL_16;
      }
      int64_t v22 = v17 + 3;
      if (v17 + 3 >= v29) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v28 + 8 * v22);
      if (v21)
      {
LABEL_16:
        int64_t v17 = v22;
        goto LABEL_17;
      }
      int64_t v22 = v17 + 4;
      if (v17 + 4 < v29)
      {
        unint64_t v21 = *(void *)(v28 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_33;
            }
            if (v17 >= v29) {
              goto LABEL_30;
            }
            unint64_t v21 = *(void *)(v28 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_30:
      uint64_t v25 = v27;
      char v23 = *v32;
      (*v32)(v11, 1, 1, v5);
      swift_release();
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v25, 1, 1, v5);
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10058BEB4(uint64_t a1)
{
  uint64_t v96 = *v1;
  uint64_t v110 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v104 = (uint64_t)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v103 = (uint64_t)&v93 - v5;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v93 - v7;
  __chkstk_darwin(v9);
  unint64_t v109 = (char *)&v93 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v11 - 8);
  uint64_t v98 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v102 = (uint64_t)&v93 - v14;
  __chkstk_darwin(v15);
  id v106 = (char *)&v93 - v16;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v95 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v100 = (char *)&v93 - v21;
  uint64_t v22 = sub_100094134((uint64_t *)&unk_10091C320);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v26 - 8);
  uint64_t v99 = (uint64_t)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  long long v30 = (char *)&v93 - v29;
  __chkstk_darwin(v31);
  uint64_t v101 = (uint64_t)&v93 - v32;
  __chkstk_darwin(v33);
  unint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v93 - v34);
  __chkstk_darwin(v35);
  uint64_t v97 = (uint64_t)&v93 - v36;
  uint64_t v107 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
  uint64_t v38 = (uint64_t)&v25[*(int *)(v23 + 56)];
  sub_1000CAA4C((uint64_t)v1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t)v25);
  sub_1000CAA4C(v37, v38);
  uint64_t v39 = v18;
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v37) = v40(v38, 1, v17);
  int v41 = v40((uint64_t)v25, 1, v17);
  if (v37 != 1)
  {
    if (v41 != 1)
    {
      uint64_t v46 = (uint64_t)v25;
      unint64_t v47 = v105;
      sub_1000CAAB4(v46, (uint64_t)v105);
      uint64_t v48 = v101;
      sub_1000CAAB4(v38, v101);
      sub_1000CAA4C((uint64_t)v47, (uint64_t)v30);
      if (v40((uint64_t)v30, 1, v17) == 1)
      {
        sub_1000966BC((uint64_t)v47, (uint64_t *)&unk_100909A40);
        sub_1000966BC((uint64_t)v30, (uint64_t *)&unk_100909A40);
        uint64_t v43 = (uint64_t)v109;
        uint64_t v44 = (uint64_t)v106;
        uint64_t v45 = v107;
      }
      else
      {
        uint64_t v49 = v39;
        uint64_t v50 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
        uint64_t v51 = v100;
        uint64_t v52 = v30;
        os_log_type_t v53 = v50;
        v50((uint64_t)v100, v52, v17);
        uint64_t v54 = v48;
        uint64_t v55 = v99;
        sub_1000CAA4C(v54, v99);
        if (v40(v55, 1, v17) == 1)
        {
          (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v17);
          sub_1000966BC((uint64_t)v105, (uint64_t *)&unk_100909A40);
          sub_1000966BC(v55, (uint64_t *)&unk_100909A40);
          uint64_t v43 = (uint64_t)v109;
          uint64_t v44 = (uint64_t)v106;
        }
        else
        {
          id v94 = v1;
          Swift::Int v56 = v95;
          uint64_t v57 = v55;
          uint64_t v58 = v53;
          v53((uint64_t)v95, (char *)v57, v17);
          char v59 = static Date.> infix(_:_:)();
          uint64_t v60 = *(void (**)(char *, uint64_t))(v49 + 8);
          v60(v56, v17);
          sub_1000966BC((uint64_t)v105, (uint64_t *)&unk_100909A40);
          if (v59)
          {
            sub_1000966BC(v101, (uint64_t *)&unk_100909A40);
            uint64_t v61 = v97;
            v58(v97, v51, v17);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v61, 0, 1, v17);
            uint64_t v43 = (uint64_t)v109;
            uint64_t v44 = (uint64_t)v106;
            uint64_t v45 = v107;
            uint64_t v1 = v94;
            goto LABEL_18;
          }
          v60(v51, v17);
          uint64_t v43 = (uint64_t)v109;
          uint64_t v44 = (uint64_t)v106;
          uint64_t v1 = v94;
        }
        uint64_t v45 = v107;
        uint64_t v48 = v101;
      }
      sub_1000CAAB4(v48, v97);
      goto LABEL_18;
    }
    uint64_t v42 = v38;
    goto LABEL_7;
  }
  if (v41 != 1)
  {
    uint64_t v42 = (uint64_t)v25;
LABEL_7:
    sub_1000CAAB4(v42, v97);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v97, 1, 1, v17);
LABEL_8:
  uint64_t v43 = (uint64_t)v109;
  uint64_t v44 = (uint64_t)v106;
  uint64_t v45 = v107;
LABEL_18:
  uint64_t v62 = *(void *)(v45 + 16);
  uint64_t v111 = v62;
  int64_t v112 = &_swiftEmptySetSingleton;
  uint64_t v63 = v1[2];
  uint64_t v64 = *(void *)(v63 + 56);
  uint64_t v99 = v63 + 56;
  uint64_t v65 = 1 << *(unsigned char *)(v63 + 32);
  uint64_t v66 = -1;
  if (v65 < 64) {
    uint64_t v66 = ~(-1 << v65);
  }
  unint64_t v67 = v66 & v64;
  uint64_t v100 = (char *)((unint64_t)(v65 + 63) >> 6);
  uint64_t v101 = v62;
  unint64_t v105 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56);
  swift_bridgeObjectRetain();
  uint64_t v107 = v63;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v69 = 0;
  unint64_t v109 = 0;
  while (1)
  {
    if (v67)
    {
      unint64_t v73 = __clz(__rbit64(v67));
      v67 &= v67 - 1;
      unint64_t v74 = v73 | (v69 << 6);
      goto LABEL_37;
    }
    if (__OFADD__(v69++, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v69 >= (uint64_t)v100) {
      goto LABEL_46;
    }
    unint64_t v76 = *(void *)(v99 + 8 * v69);
    if (!v76) {
      break;
    }
LABEL_36:
    unint64_t v67 = (v76 - 1) & v76;
    unint64_t v74 = __clz(__rbit64(v76)) + (v69 << 6);
LABEL_37:
    uint64_t v78 = v108;
    sub_100128070(*(void *)(v107 + 48) + *(void *)(v108 + 72) * v74, v44);
    uint64_t v79 = v110;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v44, 0, 1, v110);
    id v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    if (v80(v44, 1, v79) == 1) {
      goto LABEL_47;
    }
    uint64_t v81 = (uint64_t)v8;
    uint64_t v82 = sub_1001280D4(v44, v43);
    __chkstk_darwin(v82);
    uint64_t v83 = v43;
    *(&v93 - 2) = v43;
    uint64_t v84 = v101;
    swift_bridgeObjectRetain();
    uint64_t v85 = v102;
    char v86 = v109;
    sub_10058BAFC((uint64_t (*)(char *))sub_1001EC214, v84, v102);
    unint64_t v109 = v86;
    swift_bridgeObjectRelease();
    if (v80(v85, 1, v110) == 1)
    {
      sub_1000966BC(v85, (uint64_t *)&unk_100914280);
      uint64_t v43 = v83;
LABEL_22:
      uint64_t v70 = v104;
      sub_100128070(v43, v104);
      uint64_t v71 = v103;
      sub_100320570(v103, v70);
      uint64_t v72 = v71;
      uint64_t v8 = (char *)v81;
      goto LABEL_23;
    }
    sub_1001280D4(v85, (uint64_t)v8);
    uint64_t v43 = v83;
    if ((static Date.> infix(_:_:)() & 1) == 0)
    {
      sub_100128138((uint64_t)v8);
      goto LABEL_22;
    }
    uint64_t v87 = v104;
    sub_100128070((uint64_t)v8, v104);
    uint64_t v88 = v103;
    sub_100320570(v103, v87);
    uint64_t v89 = v88;
    uint64_t v8 = (char *)v81;
    sub_100128138(v89);
    uint64_t v90 = v98;
    sub_10065B5C0(v81, v98);
    sub_1000966BC(v90, (uint64_t *)&unk_100914280);
    uint64_t v72 = v81;
LABEL_23:
    sub_100128138(v72);
    uint64_t result = sub_100128138(v43);
    uint64_t v44 = (uint64_t)v106;
  }
  uint64_t v77 = v69 + 1;
  if (v69 + 1 >= (uint64_t)v100) {
    goto LABEL_46;
  }
  unint64_t v76 = *(void *)(v99 + 8 * v77);
  if (v76) {
    goto LABEL_35;
  }
  uint64_t v77 = v69 + 2;
  if (v69 + 2 >= (uint64_t)v100) {
    goto LABEL_46;
  }
  unint64_t v76 = *(void *)(v99 + 8 * v77);
  if (v76) {
    goto LABEL_35;
  }
  uint64_t v77 = v69 + 3;
  if (v69 + 3 >= (uint64_t)v100)
  {
LABEL_46:
    (*v105)(v44, 1, 1, v110);
LABEL_47:
    swift_release();
    sub_1002F62C0(v111);
    id v91 = v112;
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = v91;
    sub_1000CAAB4(v97, v92 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate);
    return v92;
  }
  unint64_t v76 = *(void *)(v99 + 8 * v77);
  if (v76)
  {
LABEL_35:
    uint64_t v69 = v77;
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v69 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      break;
    }
    if (v69 >= (uint64_t)v100) {
      goto LABEL_46;
    }
    unint64_t v76 = *(void *)(v99 + 8 * v69);
    ++v77;
    if (v76) {
      goto LABEL_36;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10058C8EC()
{
  swift_bridgeObjectRelease();
  sub_1000966BC(v0 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t *)&unk_100909A40);

  return swift_deallocClassInstance();
}

uint64_t sub_10058C960()
{
  return type metadata accessor for RDRecentlyDeletedInfo();
}

uint64_t type metadata accessor for RDRecentlyDeletedInfo()
{
  uint64_t result = qword_10091D840;
  if (!qword_10091D840) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10058C9B4()
{
  sub_1000D68FC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10058CA54(uint64_t *a1, uint64_t *a2)
{
  return sub_10058CA60(*a1, *a2);
}

uint64_t sub_10058CA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100596560(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (v14)
  {
    uint64_t v15 = a1 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
    uint64_t v16 = a2 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate;
    uint64_t v17 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_1000CAA4C(v15, (uint64_t)v13);
    sub_1000CAA4C(v16, v17);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v18((uint64_t)v13, 1, v4) == 1)
    {
      int v19 = v18(v17, 1, v4);
      if (v19 == 1) {
        uint64_t v20 = (uint64_t *)&unk_100909A40;
      }
      else {
        uint64_t v20 = (uint64_t *)&unk_10091C320;
      }
      if (v19 == 1) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
    }
    else
    {
      sub_1000CAA4C((uint64_t)v13, (uint64_t)v10);
      if (v18(v17, 1, v4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
        char v21 = 0;
        uint64_t v20 = (uint64_t *)&unk_10091C320;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v17, v4);
        sub_10026D764();
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
        v22(v7, v4);
        v22(v10, v4);
        uint64_t v20 = (uint64_t *)&unk_100909A40;
      }
    }
    sub_1000966BC((uint64_t)v13, v20);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t static ICCloudContext.base64EncodedHMACString(from:usingSalt:)()
{
  return String.base64EncodedHMACString(using:)();
}

void sub_10058CE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_10058CE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_10058CE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    v11[4] = a3;
    void v11[5] = a4;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    void v11[2] = sub_100140BA8;
    void v11[3] = a7;
    uint64_t v10 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v10 = 0;
  }
  [v7 updateCloudContextStateWithSyncOption:a1 syncReason:a2 withCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_10058CEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10058CF04()
{
  return swift_release();
}

uint64_t sub_10058CF24()
{
  return swift_deallocClassInstance();
}

void sub_10058CFDC(uint64_t a1)
{
}

void sub_10058D010(uint64_t a1)
{
}

void sub_10058D044(uint64_t a1)
{
}

void sub_10058D078(uint64_t a1)
{
}

void sub_10058D088(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = objc_allocWithZone((Class)NSError);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithDomain:v6 code:a2 userInfo:0];

  *a3 = v7;
}

char *sub_10058D148(void *a1, char *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v98 = a7;
  id v99 = a3;
  uint64_t v97 = a2;
  id v84 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v92 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v90 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v88 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = (void *)type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v86 = *(v87 - 1);
  __chkstk_darwin(v87);
  uint64_t v85 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v89 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v95 = *(void *)(v17 - 8);
  uint64_t v96 = v17;
  __chkstk_darwin(v17);
  id v94 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v19 - 8);
  char v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100094134(&qword_10091DA38);
  uint64_t v75 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  unint64_t v74 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (uint64_t *)&v9[OBJC_IVAR___RDAccountPersonIDSaltObserver_propertyName];
  *uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27[1] = v28;
  uint64_t v29 = v9;
  UUID.init()();
  id v30 = v99;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_uuid], v26, v23);
  type metadata accessor for RDAccountPersonIDSaltObserver.AccountInfo();
  uint64_t v31 = swift_allocObject();
  id v32 = v84;
  uint64_t v33 = v97;
  *(void *)(v31 + 16) = v84;
  *(void *)(v31 + 24) = v33;
  *(void *)&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_account] = v31;
  uint64_t v34 = (uint64_t *)&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_successHandler];
  uint64_t v82 = a5;
  uint64_t *v34 = a5;
  v34[1] = a6;
  uint64_t v35 = &v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_errorHandler];
  *(void *)uint64_t v35 = v98;
  *((void *)v35 + 1) = a8;
  *(void *)&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_callbackQueue] = a4;
  id v80 = v32;
  uint64_t v100 = a6;
  swift_retain();
  uint64_t v101 = a8;
  swift_retain();
  id v36 = a4;
  if (v30)
  {
    id v37 = v30;
    uint64_t v38 = NSData.startIndex.getter();
    if (v38 != NSData.endIndex.getter())
    {
      int v40 = 0;
      uint64_t v39 = (uint64_t)v30;
      goto LABEL_7;
    }

    uint64_t v39 = 1;
  }
  else
  {
    uint64_t v39 = 0;
  }
  int v40 = 1;
LABEL_7:
  unint64_t v102 = v39;
  char v103 = v40;
  id v84 = (id)v39;
  int v83 = v40;
  sub_100094134(&qword_10091DA40);
  swift_allocObject();
  sub_10058EB38((id)v39, v40);
  *(void *)&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_currentValueSubject] = CurrentValueSubject.init(_:)();
  *(void *)&v29[OBJC_IVAR___RDAccountPersonIDSaltObserver_cancellables] = _swiftEmptyArrayStorage;

  int v41 = ObjectType;
  v105.receiver = v29;
  v105.super_class = ObjectType;
  uint64_t v42 = (char *)[v105 init];
  unint64_t v102 = *(void *)&v42[OBJC_IVAR___RDAccountPersonIDSaltObserver_currentValueSubject];
  id v104 = v36;
  uint64_t v77 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v43 = *(void *)(v77 - 8);
  unint64_t v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  uint64_t v78 = v43 + 56;
  v76(v21, 1, 1, v77);
  uint64_t v72 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4(&qword_10091DA48, &qword_10091DA40);
  unint64_t v73 = sub_100096654();
  uint64_t v44 = v42;
  uint64_t v71 = v21;
  uint64_t v97 = v44;
  swift_retain();
  uint64_t v45 = v74;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v21, (uint64_t *)&unk_1009081C0);
  swift_release();
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v82;
  v46[2] = v36;
  v46[3] = v47;
  uint64_t v48 = v101;
  uint64_t v49 = v98;
  v46[4] = v100;
  v46[5] = v49;
  v46[6] = v48;
  v46[7] = v41;
  uint64_t v98 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_1000967F4(&qword_10091DA50, &qword_10091DA38);
  swift_retain();
  swift_retain();
  uint64_t ObjectType = (objc_class *)v36;
  uint64_t v50 = v79;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v50);
  swift_beginAccess();
  sub_100094134(&qword_100908218);
  uint64_t v82 = sub_1000967F4((unint64_t *)&unk_100908220, &qword_100908218);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();
  id v51 = [self defaultCenter];
  uint64_t v52 = v85;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = sub_100405004(v53, v54, (void *)0xD00000000000001DLL, 0x8000000100792550, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void *))(v86 + 8))(v52, v87);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  uint64_t v57 = v80;
  *(void *)(inited + 32) = v80;
  unint64_t v102 = inited;
  specialized Array._endMutation()();
  unint64_t v58 = v102;
  uint64_t v87 = v57;
  uint64_t v59 = sub_100126B08(v58);
  swift_bridgeObjectRelease();
  unint64_t v102 = v55;
  *(void *)(swift_allocObject() + 16) = v59;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134((uint64_t *)&unk_10090AB80);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  uint64_t v60 = v88;
  Publisher.map<A>(_:)();
  swift_release();
  sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  uint64_t v61 = v89;
  uint64_t v62 = v92;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v60, v62);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v63 = ObjectType;
  unint64_t v102 = (unint64_t)ObjectType;
  uint64_t v64 = (uint64_t)v71;
  v76(v71, 1, 1, v77);
  sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  uint64_t v65 = v93;
  uint64_t v66 = v94;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v64, (uint64_t *)&unk_1009081C0);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v61, v65);
  swift_allocObject();
  unint64_t v67 = v97;
  swift_unknownObjectWeakInit();
  sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
  uint64_t v68 = v96;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v68);
  swift_beginAccess();
  AnyCancellable.store<A>(in:)();
  swift_endAccess();

  swift_release();
  swift_release();
  sub_10058EC80(v84, v83);
  swift_release();

  return v67;
}

void sub_10058DD88(uint64_t a1, void *a2, void (*a3)(void *), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)a1;
  char v15 = *(unsigned char *)(a1 + 8);
  void *v13 = a2;
  (*(void (**)(void *, void, uint64_t, __n128))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9, v11);
  id v16 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (a2)
  {
    if ((v15 & 1) == 0)
    {
      a3(v14);
      sub_10058EC80(v14, 0);
      return;
    }
    switch((char)v14)
    {
      case 1:
        if (qword_100907930 != -1) {
          swift_once();
        }
        uint64_t v17 = qword_1009425A0;
        break;
      case 2:
        if (qword_100907928 != -1) {
          swift_once();
        }
        uint64_t v17 = qword_100942598;
        break;
      case 3:
        if (qword_100907938 != -1) {
          swift_once();
        }
        uint64_t v17 = qword_1009425A8;
        break;
      default:
        if (qword_100907920 == -1) {
          goto LABEL_5;
        }
        goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
LABEL_18:
    swift_once();
LABEL_5:
    uint64_t v17 = qword_100942590;
  }
  a5(v17);
}

uint64_t sub_10058E008()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();

    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void sub_10058E22C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (id *)((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___RDAccountPersonIDSaltObserver_callbackQueue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    return;
  }
  sub_1000E6E80(a1, (uint64_t)&v16);
  if (!v18)
  {
    sub_1000966BC((uint64_t)&v16, &qword_100908190);
    goto LABEL_7;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100917E00);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    uint64_t v16 = 2;
    char v17 = 1;
    CurrentValueSubject.send(_:)();
    return;
  }
  id v11 = v15[1];
  uint64_t v12 = NSData.startIndex.getter();
  uint64_t v13 = NSData.endIndex.getter();

  if (v12 == v13)
  {
    uint64_t v16 = 1;
    char v17 = 1;
    CurrentValueSubject.send(_:)();
  }
  else
  {
    uint64_t v16 = (uint64_t)v11;
    char v17 = 0;
    id v14 = v11;
    CurrentValueSubject.send(_:)();
  }
}

uint64_t sub_10058E528()
{
  _StringGuts.grow(_:)(52);
  v1._object = (void *)0x80000001007D8D50;
  v1._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v1);
  v2._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x746E756F63636120;
  v3._object = (void *)0xEB000000003A4449;
  String.append(_:)(v3);
  id v4 = [*(id *)(v0 + OBJC_IVAR___RDAccountPersonIDSaltObserver_account) objectID];
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

id sub_10058E658()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v4 = 1;
  CurrentValueSubject.send(completion:)();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  [super dealloc];
}

uint64_t sub_10058E820()
{
  return type metadata accessor for RDAccountPersonIDSaltObserver();
}

uint64_t type metadata accessor for RDAccountPersonIDSaltObserver()
{
  uint64_t result = qword_10091D978;
  if (!qword_10091D978) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10058E8A4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDAccountPersonIDSaltObserver.AccountInfo()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RDAccountPersonIDSaltObserver.SaltValueError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10058EA70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDAccountPersonIDSaltObserver.SaltValueError()
{
  return &type metadata for RDAccountPersonIDSaltObserver.SaltValueError;
}

unint64_t sub_10058EAAC()
{
  unint64_t result = qword_10091DA30;
  if (!qword_10091DA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DA30);
  }
  return result;
}

uint64_t sub_10058EB00()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id sub_10058EB38(id result, char a2)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  return result;
}

uint64_t sub_10058EB44()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10058EB8C(uint64_t a1)
{
  sub_10058DD88(a1, *(void **)(v1 + 16), *(void (**)(void *))(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_10058EB9C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_10058EF84(v4, a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_10058EC00()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058EC38@<X0>(uint64_t *a1@<X8>)
{
  return sub_10058EB9C(*(void *)(v1 + 16), a1);
}

uint64_t sub_10058EC40()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058EC78()
{
  return sub_10058E008();
}

void sub_10058EC80(id a1, char a2)
{
  if ((a2 & 1) == 0) {
}
  }

void sub_10058EC8C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v37 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v39 = a4 & 0xC000000000000001;
  uint64_t v40 = a4 + 56;
  int64_t v35 = v10;
LABEL_5:
  uint64_t v34 = v5;
  while (v9)
  {
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v6 << 6);
LABEL_21:
    uint64_t v19 = *(void *)(v4 + 48) + 24 * v15;
    uint64_t v20 = *(void **)(v19 + 8);
    char v21 = *(void **)(v19 + 16);
    if (v39)
    {
      id v11 = v20;
      id v12 = v21;
      char v13 = __CocoaSet.contains(_:)();

      if (v13) {
        goto LABEL_31;
      }
    }
    else if (*(void *)(a4 + 16))
    {
      Swift::Int v22 = *(void *)(a4 + 40);
      id v38 = v20;
      id v23 = v21;
      Swift::Int v24 = NSObject._rawHashValue(seed:)(v22);
      uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v26 = v24 & ~v25;
      if ((*(void *)(v40 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        id v27 = *(id *)(*(void *)(a4 + 48) + 8 * v26);
        char v28 = static NSObject.== infix(_:_:)();

        if (v28)
        {
LABEL_30:

          int64_t v10 = v35;
          uint64_t v4 = a3;
LABEL_31:
          *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
          uint64_t v5 = v34 + 1;
          if (!__OFADD__(v34, 1)) {
            goto LABEL_5;
          }
          __break(1u);
LABEL_34:
          swift_retain();
          sub_10023FC68(a1, a2, v34, v4);
          return;
        }
        uint64_t v29 = ~v25;
        while (1)
        {
          unint64_t v26 = (v26 + 1) & v29;
          if (((*(void *)(v40 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
            break;
          }
          id v30 = *(id *)(*(void *)(a4 + 48) + 8 * v26);
          char v31 = static NSObject.== infix(_:_:)();

          if (v31) {
            goto LABEL_30;
          }
        }
      }

      int64_t v10 = v35;
      uint64_t v4 = a3;
    }
  }
  int64_t v16 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v16 >= v10) {
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v37 + 8 * v16);
  ++v6;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v6 = v16 + 1;
  if (v16 + 1 >= v10) {
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v37 + 8 * v6);
  if (v17)
  {
LABEL_20:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_21;
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v10) {
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v37 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v10) {
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v37 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_10058EF84(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    sub_10058EC8C((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    uint64_t v11 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    id v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    sub_10058EC8C((unint64_t *)v12, v7, a1, a2);
    uint64_t v11 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

double sub_10058F158@<D0>(uint64_t a1@<X8>)
{
  id v3 = [self daemonUserDefaults];
  unsigned int v4 = [v3 enableHashingUserIdentifiablesWithPersonIDSalt];

  if (!v4)
  {
LABEL_15:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  id v5 = [v1 accountTypeHost];
  unsigned int v6 = [v5 isCloudKit];

  if (!v6)
  {
    if (qword_100907940 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091DA58);
    id v16 = v1;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      id v20 = [v16 remObjectID];
      if (v20)
      {
        char v21 = v20;
        id v22 = [v20 description];

        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;
      }
      else
      {
        unint64_t v25 = 0xE300000000000000;
        uint64_t v23 = 7104878;
      }
      sub_1000C51B8(v23, v25, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "We don't currently support providing hash key other than cloudkit accounts. This log indicates there's some programming errors to pass on an incorrect account object {account: %{public}s}", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_15;
  }
  uint64_t v7 = type metadata accessor for _RDManualSortIDPrimaryCloudKitAccountHashKeyProvider();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10078EDC0;
  id v9 = v1;
  id v10 = [v9 personIDSalt];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {

    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v14;
  sub_100097F20(0, 0xF000000000000000);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = &off_1008CB138;
  *(void *)a1 = v8;
  return result;
}

uint64_t sub_10058F468()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DA58);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DA58);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10058F530()
{
  sub_100097F20(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _RDManualSortIDPrimaryCloudKitAccountHashKeyProvider()
{
  return self;
}

uint64_t sub_10058F58C()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 24);
  if (v1 >> 60 == 15) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)v0 + 16);
  sub_100097E38(v3, *(void *)(*(void *)v0 + 24));
  uint64_t v2 = String.base64EncodedHMACString(using:)();
  sub_100097F20(v3, v1);
  return v2;
}

id sub_10058F620()
{
  id result = [*(id *)(v0 + 16) personIDSalt];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    sub_100097F34(v3, v5);
    uint64_t v6 = String.init<A>(_:)();
    String.append<A>(contentsOf:)();
    return (id)v6;
  }
  return result;
}

uint64_t type metadata accessor for RDManualSortIDUnitTestHashKeyProvider()
{
  return self;
}

id sub_10058F724()
{
  return sub_10058F620();
}

uint64_t sub_10058F748()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DBB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DBB0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10058F818(unsigned __int8 *a1, char *a2)
{
  return sub_1002F4240(*a1, *a2);
}

Swift::Int sub_10058F824()
{
  return Hasher._finalize()();
}

uint64_t sub_10058F914()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10058F9EC()
{
  return Hasher._finalize()();
}

unint64_t sub_10058FAD8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100591BC4(*a1);
  *a2 = result;
  return result;
}

void sub_10058FB08(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEC00000065746144;
  uint64_t v3 = 0x6E6F697461657263;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB00000000656D61;
      uint64_t v3 = 0x4E79616C70736964;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "canonicalName");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 3:
      *(void *)a1 = 1953720684;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_10058FBB8(void *a1@<X8>)
{
  *a1 = &off_1008B72E0;
}

_UNKNOWN **static REMCDListSection.recordTypes()()
{
  return &off_1008B7308;
}

uint64_t static REMCDListSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDListSection();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDListSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100907948 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10091DBB0);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          char v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDListSection.recordType()()
{
  uint64_t v0 = 0x746365537473694CLL;
  uint64_t v1 = (void *)0xEB000000006E6F69;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDListSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  NSString v4 = String._bridgeToObjectiveC()();
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for REMCDListSection();
  [super mergeDataFromRecord:from.super.isa accountID:v4];

  id v5 = [(objc_class *)from.super.isa recordID];
  NSString v6 = [v5 recordName];

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v7 = [v2 ckIdentifierFromRecordName:v6];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v7];

  id v8 = [v2 mergeDataRevertedLocallyMarkedForDeletion];
  id v9 = [v2 mergeDataRefusedToMergeMarkedForDeletion];
  char v14 = 0;
  id v10 = v2;
  id v11 = from.super.isa;
  sub_1004CEA24(v11, v8, v9, v10, v10, v11, &v14);

  if (v14 == 1)
  {
    id v12 = [v10 list];
    if (v12)
    {
      uint64_t v13 = v12;
      if (([v12 ckNeedsInitialFetchFromCloud] & 1) == 0) {
        sub_1002F88CC();
      }
    }
  }
}

void sub_1005903E0(unsigned char *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v57 = a4;
  uint64_t v59 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v56 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  objc_super v15 = (char *)&v55 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - v17;
  __chkstk_darwin(v19);
  char v21 = (char *)&v55 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v55 - v23;
  uint64_t v25 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v26 = __chkstk_darwin(v25 - 8).n128_u64[0];
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*a1)
  {
    case 1:
      id v32 = [a3 encryptedValues:v26];
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = [v32 objectForKeyedSubscript:v33];
      swift_unknownObjectRelease();

      if (v34)
      {
        NSString v60 = v34;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          NSString v34 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v34 = 0;
        }
      }
      [v59 setDisplayName:v34];
      goto LABEL_18;
    case 2:
      id v35 = [a3 encryptedValues:v26];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      if (v61)
      {
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v34 = 0;
      }
      [v59 setCanonicalName:v34];
LABEL_18:

      return;
    case 3:
      id v36 = [v59 list:v26];
      if (v36)
      {
        uint64_t v37 = v36;
        id v38 = [v36 identifier];

        if (v38)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
          v39(v21, 0, 1, v6);
        }
        else
        {
          unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
          v39(v21, 1, 1, v6);
        }
        sub_100096408((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100909E50);
      }
      else
      {
        unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
        v39(v24, 1, 1, v6);
      }
      if (CKRecord.subscript.getter())
      {
        self;
        uint64_t v40 = (void *)swift_dynamicCastObjCClass();
        if (!v40) {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
      int v41 = v59;
      uint64_t v42 = sub_1004B9C44(v40, v59);

      [v41 setList:v42];
      id v43 = [v41 list];
      if (v43)
      {
        uint64_t v44 = v43;
        id v45 = [v43 identifier];

        if (v45)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v46 = 0;
        }
        else
        {
          uint64_t v46 = 1;
        }
        uint64_t v47 = v58;
        v39(v15, v46, 1, v6);
        sub_100096408((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v47 = v58;
        v39(v18, 1, 1, v6);
      }
      uint64_t v48 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_1001248EC((uint64_t)v18, (uint64_t)v10);
      sub_1001248EC((uint64_t)v24, v48);
      uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
      if (v49((uint64_t)v10, 1, v6) == 1)
      {
        sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        if (v49(v48, 1, v6) == 1)
        {
          sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
          char v50 = 0;
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      uint64_t v51 = v56;
      sub_1001248EC((uint64_t)v10, v56);
      if (v49(v48, 1, v6) == 1)
      {
        sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v6);
LABEL_36:
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
        char v50 = 1;
        goto LABEL_38;
      }
      uint64_t v52 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v55, v48, v6);
      sub_100124954();
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v52, v6);
      sub_1000966BC((uint64_t)v18, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
      v54((char *)v51, v6);
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      char v50 = v53 ^ 1;
LABEL_38:
      *uint64_t v57 = v50 & 1;
      return;
    default:
      sub_10012451C();
      uint64_t v29 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v30 = *(void *)(v29 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
      }
      [v59 setCreationDate:isa];

      return;
  }
}

CKRecord_optional __swiftcall REMCDListSection.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  NSString v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v8 = (objc_class *)type metadata accessor for REMCDListSection();
  v43.receiver = v0;
  v43.super_class = v8;
  id v10 = [super newlyCreatedRecord];
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = &selRef_intersectsSet_;
    while (2)
    {
      uint64_t v19 = *((unsigned __int8 *)&off_1008B7368 + v11++ + 32);
      switch(v19)
      {
        case 1:
          id v13 = [v10 encryptedValues];
          id v14 = [v1 displayName];
          if (v14)
          {
            objc_super v15 = v14;
            uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v18 = v17;

            *((void *)&v41 + 1) = &type metadata for String;
            uint64_t v42 = &protocol witness table for String;
            *(void *)&long long v40 = v16;
            *((void *)&v40 + 1) = v18;
            uint64_t v12 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
          }
          goto LABEL_5;
        case 2:
          id v23 = [v10 encryptedValues];
          id v24 = [v1 canonicalName];
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v28 = v27;

            *((void *)&v41 + 1) = &type metadata for String;
            uint64_t v42 = &protocol witness table for String;
            *(void *)&long long v40 = v26;
            *((void *)&v40 + 1) = v28;
            uint64_t v12 = &selRef_intersectsSet_;
          }
          else
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
          }
LABEL_5:
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          goto LABEL_6;
        case 3:
          if ([v1 markedForDeletion]) {
            goto LABEL_13;
          }
          id v30 = [v1 list];
          id v29 = v30;
          if (v30)
          {
            id v31 = [v30 v12[418]];

            if (v31)
            {
              id v32 = [v10 v12[418]];
              id v33 = [v32 zoneID];

              id v34 = [v31 zoneID];
              unsigned int v35 = [v33 isEqual:v34];

              if (v35)
              {
                id v29 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v31];

                if (v29) {
                  id v36 = v29;
                }
              }
              else
              {

                id v29 = 0;
              }
              uint64_t v12 = &selRef_intersectsSet_;
            }
            else
            {
LABEL_13:
              id v29 = 0;
            }
          }
          CKRecord.subscript.setter();

LABEL_6:
          if (v11 != 4) {
            continue;
          }
          goto LABEL_29;
        default:
          id v20 = [v1 creationDate];
          if (v20)
          {
            char v21 = v20;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v22 = type metadata accessor for Date();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 0, 1, v22);
          }
          else
          {
            uint64_t v22 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
          }
          sub_100096408((uint64_t)v4, (uint64_t)v7, (uint64_t *)&unk_100909A40);
          type metadata accessor for Date();
          uint64_t v37 = *(void *)(v22 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v7, 1, v22) == 1)
          {
            sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
            long long v40 = 0u;
            long long v41 = 0u;
            uint64_t v42 = 0;
          }
          else
          {
            *((void *)&v41 + 1) = v22;
            uint64_t v42 = &protocol witness table for Date;
            id v38 = sub_1000C1FE8((uint64_t *)&v40);
            (*(void (**)(uint64_t *, char *, uint64_t))(v37 + 32))(v38, v7, v22);
          }
          sub_10012451C();
          CKRecordKeyValueSetting.subscript.setter();
          goto LABEL_6;
      }
    }
  }
LABEL_29:
  unint64_t v39 = (objc_class *)v10;
  result.value.super.Class isa = v39;
  result.is_nil = v9;
  return result;
}

Swift::Void __swiftcall REMCDListSection.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907948 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091DBB0);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    NSString v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)NSString v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917438);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDListSection.fixBrokenReferences()()
{
  if (qword_100907948 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091DBB0);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = 7104878;
  uint64_t v7 = swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136446466;
  id v8 = [v2 remObjectID];
  if (v8)
  {
    Swift::Bool v9 = v8;
    id v10 = [v8 description];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  sub_1000C51B8(v11, v13, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2082;
  id v14 = [v2 list];
  if (!v14) {
    goto LABEL_12;
  }
  objc_super v15 = v14;
  id v16 = [v14 remObjectID];
  if (!v16)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  id v18 = [v16 description];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

LABEL_13:
  uint64_t v5 = &selRef_intersectsSet_;
  sub_1000C51B8(v6, v20, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in list {listSectionID: %{public}s, listID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v21 = [v2 v5[120]];
  if (!v21) {
    return;
  }
  uint64_t v22 = v21;
  if ([v21 markedForDeletion]
    && ([v2 markedForDeletion] & 1) == 0)
  {
    id v23 = v2;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25))
    {

LABEL_28:
      [v23 markForDeletion];
      goto LABEL_29;
    }
    uint64_t v26 = v5;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    id v28 = [v23 remObjectID];
    if (v28)
    {
      id v29 = v28;
      id v30 = [v28 description];

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;
    }
    else
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v31 = 7104878;
    }
    sub_1000C51B8(v31, v33, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    id v34 = [v23 v26[120]];
    if (v34)
    {
      unsigned int v35 = v34;
      id v36 = [v34 remObjectID];
      if (v36)
      {
        uint64_t v37 = v36;
        id v38 = [v36 description];

        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

LABEL_27:
        sub_1000C51B8(v39, v41, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "List is marked for deletion but section in list is not {listSectionID: %{public}s, listID: %{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_28;
      }
    }
    unint64_t v41 = 0xE300000000000000;
    uint64_t v39 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  [v22 forcePushToCloud];
}

unint64_t sub_100591BC4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B7260, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t _s7remindd16REMCDListSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907948 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091DBB0);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917438);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd16REMCDListSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907948 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091DBB0);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917438);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

unsigned char *_s6FieldsOwst_5(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *CKRecord_optional result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059206CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *CKRecord_optional result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_5()
{
  return &_s6FieldsON_5;
}

unint64_t sub_1005920A4(uint64_t a1)
{
  unint64_t result = sub_1005920CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005920CC()
{
  unint64_t result = qword_10091DBD0;
  if (!qword_10091DBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DBD0);
  }
  return result;
}

unint64_t sub_100592120(uint64_t a1)
{
  unint64_t result = sub_100592148();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100592148()
{
  unint64_t result = qword_10091DBD8;
  if (!qword_10091DBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DBD8);
  }
  return result;
}

unint64_t sub_1005921A0()
{
  unint64_t result = qword_10091DBE0;
  if (!qword_10091DBE0)
  {
    sub_100096058(&qword_10091DBE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DBE0);
  }
  return result;
}

unint64_t sub_100592200()
{
  unint64_t result = qword_10091DBF0;
  if (!qword_10091DBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DBF0);
  }
  return result;
}

uint64_t sub_100592254(uint64_t a1)
{
  uint64_t result = sub_100594D4C(&qword_10091DC28, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1005922AC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v33 = a4;
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.ListsModel();
  uint64_t v37 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = v38;
  uint64_t v19 = sub_100593860(a1, a3);
  if (!v18)
  {
    uint64_t v38 = v19;
    id v28 = v8;
    id v29 = v14;
    uint64_t v31 = v12;
    unint64_t v32 = v17;
    id v30 = v11;
    uint64_t v20 = a1;
    sub_100594894(a1);
    id v21 = v32;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    id v22 = [v35 fetchResultTokenToDiffAgainst];
    uint64_t v23 = (uint64_t)v30;
    sub_10051F2BC(v22, v20, (uint64_t)v30);

    uint64_t v24 = v37;
    os_log_type_t v25 = v21;
    uint64_t v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v29, v25, v31);
    uint64_t v27 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v28, v23, v6);
    sub_100594D4C(&qword_10091C7E0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel);
    sub_100594D4C(&qword_10091C7E8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v6);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v32, v26);
  }
}

uint64_t sub_10059261C()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  *(void *)(v0 + 32) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_10091DC00 = v0;
  return result;
}

uint64_t sub_100592690@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v65 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v68 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v64 = (char *)&v57 - v11;
  __chkstk_darwin(v12);
  uint64_t v63 = (char *)&v57 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  uint64_t v62 = (char *)&v57 - v23;
  uint64_t v24 = *a1;
  id v25 = [v24 identifier:v22];
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_21;
  }
  uint64_t v26 = v25;
  id v60 = v24;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = v18;
  id v28 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v28(v16, v20, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v16, 0, 1, v17);
  uint64_t v61 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, v17) == 1)
  {
LABEL_21:
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
LABEL_23:
    uint64_t v47 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v66, 1, 1, v47);
  }
  uint64_t v29 = (uint64_t)v62;
  v28(v62, v16, v17);
  if (!*(void *)(a2 + 16) || (unint64_t v30 = sub_100306EC4(v29), (v31 & 1) == 0))
  {
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v29, v17);
    goto LABEL_23;
  }
  unint64_t v32 = *(void *)(*(void *)(a2 + 56) + 8 * v30);
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v33 = result;
    uint64_t v57 = v17;
    if (result) {
      goto LABEL_7;
    }
LABEL_25:
    unint64_t v67 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  uint64_t v57 = v17;
  if (!v33) {
    goto LABEL_25;
  }
LABEL_7:
  if (v33 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v35 = 0;
  unint64_t v36 = v32 & 0xC000000000000001;
  uint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  uint64_t v38 = (void (**)(char *, char *, uint64_t))(v65 + 32);
  unint64_t v67 = (char *)_swiftEmptyArrayStorage;
  unint64_t v58 = v32 & 0xC000000000000001;
  uint64_t v59 = v33;
  do
  {
    if (v36) {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v39 = *(id *)(v32 + 8 * v35 + 32);
    }
    sub_100521784(v39, 0, 0, (uint64_t)v7);
    if ((*v37)(v7, 1, v8))
    {
      sub_1000966BC((uint64_t)v7, &qword_10090FD78);
    }
    else
    {
      unint64_t v40 = v32;
      unint64_t v41 = *v38;
      uint64_t v42 = v64;
      (*v38)(v64, v7, v8);
      objc_super v43 = v63;
      v41(v63, v42, v8);
      v41(v68, v43, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v67 = (char *)sub_1003091E4(0, *((void *)v67 + 2) + 1, 1, (unint64_t)v67);
      }
      unint64_t v45 = *((void *)v67 + 2);
      unint64_t v44 = *((void *)v67 + 3);
      if (v45 >= v44 >> 1) {
        unint64_t v67 = (char *)sub_1003091E4(v44 > 1, v45 + 1, 1, (unint64_t)v67);
      }
      uint64_t v46 = v67;
      *((void *)v67 + 2) = v45 + 1;
      v41(&v46[((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v45], v68, v8);
      unint64_t v32 = v40;
      unint64_t v36 = v58;
      uint64_t v33 = v59;
    }
    ++v35;
  }
  while (v33 != v35);
LABEL_26:
  swift_bridgeObjectRelease_n();
  uint64_t v48 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v50 = [v48 objectIDWithUUID:isa];

  REMObjectID.codable.getter();
  id v51 = [v60 displayName];
  if (v51)
  {
    uint64_t v52 = v51;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v53 = [v60 color:v57];
  if (v53)
  {
    uint64_t v54 = v53;
    REMColor.codable.getter();
  }
  uint64_t v55 = v66;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v57);
  uint64_t v56 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
}

uint64_t sub_100592D94(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1001B2758((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1001B2758((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_100592EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s10PredicatesOMa_1();
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    unint64_t v36 = v11;
    uint64_t v37 = v9;
    uint64_t v38 = v2;
    *(void *)&long long v43 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = self;
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = v5 + 16;
    unint64_t v41 = v16;
    id v42 = v14;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v40 = *(void *)(v15 + 56);
    do
    {
      v41(v7, v17, v4);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v19 = [v42 objectIDWithUUID:isa];

      (*(void (**)(char *, uint64_t))(v15 - 8))(v7, v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v17 += v40;
      --v12;
    }
    while (v12);
    uint64_t v13 = (void *)v43;
    uint64_t v11 = v36;
  }
  *uint64_t v11 = v13;
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (void *)sub_100535B3C();
  sub_100594D94((uint64_t)v11, (uint64_t (*)(void))_s10PredicatesOMa_1);
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v21 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v22 = [(id)swift_getObjCClassFromMetadata() entity];
  [v21 setEntity:v22];

  [v21 setAffectedStores:0];
  [v21 setPredicate:v20];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v23 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  *(void *)&long long v43 = v23;
  specialized Array._endMutation()();
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v21 setSortDescriptors:v24];

  unint64_t v45 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 3, 0);
  id v25 = v45;
  unint64_t v44 = &type metadata for String;
  *(void *)&long long v43 = 0x696669746E656469;
  *((void *)&v43 + 1) = 0xEA00000000007265;
  unint64_t v27 = v45[2];
  unint64_t v26 = v45[3];
  if (v27 >= v26 >> 1)
  {
    sub_1001DE1C4(v26 > 1, v27 + 1, 1);
    id v25 = v45;
  }
  v25[2] = v27 + 1;
  sub_10009A1A0(&v43, &v25[4 * v27 + 4]);
  unint64_t v44 = &type metadata for String;
  *(void *)&long long v43 = 1701667182;
  *((void *)&v43 + 1) = 0xE400000000000000;
  unint64_t v45 = v25;
  unint64_t v29 = v25[2];
  unint64_t v28 = v25[3];
  if (v29 >= v28 >> 1)
  {
    sub_1001DE1C4(v28 > 1, v29 + 1, 1);
    id v25 = v45;
  }
  v25[2] = v29 + 1;
  sub_10009A1A0(&v43, &v25[4 * v29 + 4]);
  unint64_t v44 = &type metadata for String;
  *(void *)&long long v43 = 0x726F6C6F63;
  *((void *)&v43 + 1) = 0xE500000000000000;
  unint64_t v45 = v25;
  unint64_t v31 = v25[2];
  unint64_t v30 = v25[3];
  if (v31 >= v30 >> 1)
  {
    sub_1001DE1C4(v30 > 1, v31 + 1, 1);
    id v25 = v45;
  }
  v25[2] = v31 + 1;
  sub_10009A1A0(&v43, &v25[4 * v31 + 4]);
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v21 setPropertiesToFetch:v32];

  uint64_t v33 = NSManagedObjectContext.fetch<A>(_:)();
  return v33;
}

void sub_1005934F0(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134(&qword_10091C7F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)type metadata accessor for REMRemindersListDataView.ListsModel.Sublist();
  uint64_t v28 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v27 = (char *)&v25 - v12;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v32 = a1 & 0xC000000000000001;
    uint64_t v29 = v28 + 32;
    unint64_t v30 = (unsigned int (**)(char *, uint64_t, void *))(v28 + 48);
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4;
    uint64_t v25 = a2;
    unint64_t v26 = a1;
    uint64_t v31 = v13;
    uint64_t v15 = (void (**)(char *, char *, void *))(v28 + 32);
    while (1)
    {
      uint64_t v16 = v9;
      uint64_t v17 = v32 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v14);
      uint64_t v9 = v17;
      uint64_t v18 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      uint64_t v35 = v17;
      sub_100592690(&v35, a2, (uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v9 = v16;
      if ((*v30)(v8, 1, v16) == 1)
      {
        sub_1000966BC((uint64_t)v8, &qword_10091C7F0);
      }
      else
      {
        id v19 = *v15;
        uint64_t v20 = v27;
        (*v15)(v27, v8, v16);
        v19(v33, v20, v16);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v21 = (unint64_t)v34;
        }
        else {
          unint64_t v21 = sub_10030931C(0, v34[2] + 1, 1, (unint64_t)v34);
        }
        unint64_t v23 = *(void *)(v21 + 16);
        unint64_t v22 = *(void *)(v21 + 24);
        if (v23 >= v22 >> 1) {
          unint64_t v21 = sub_10030931C(v22 > 1, v23 + 1, 1, v21);
        }
        *(void *)(v21 + 16) = v23 + 1;
        unint64_t v24 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        uint64_t v34 = (void *)v21;
        uint64_t v9 = v16;
        v19((char *)(v21 + v24 + *(void *)(v28 + 72) * v23), v33, v16);
        a2 = v25;
        a1 = v26;
      }
      ++v14;
      if (v18 == v31) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

uint64_t sub_100593860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v124 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v134 = (uint64_t)v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v132 = (char *)v115 - v9;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v129 = (char *)v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v125 = (char *)v115 - v13;
  __chkstk_darwin(v14);
  id v126 = (unsigned int (**)(char *, uint64_t, void *))((char *)v115 - v15);
  __chkstk_darwin(v16);
  uint64_t v133 = (char *)v115 - v17;
  uint64_t v18 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v127 = *(void *)(v18 - 8);
  id v128 = (unsigned int (**)(char *, uint64_t, uint64_t))v18;
  __chkstk_darwin(v18);
  id v123 = (void (**)(uint64_t, uint64_t))((char *)v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v20 - 8);
  *(void *)&long long v122 = (char *)v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v120);
  uint64_t v119 = (char *)v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v115 - v24;
  id v121 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v121);
  BOOL v131 = (id *)((char *)v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = REMRemindersListDataView.SearchInvocation.Parameters.objectIDs.getter();
  uint64_t v130 = v6;
  id v118 = v25;
  if ((v27 & 0xC000000000000001) == 0)
  {
    uint64_t v28 = (void *)sub_100592D94(v27);
LABEL_28:
    uint64_t v52 = (uint64_t)sub_100209B04((uint64_t)v28);
    swift_release();
    if (v52 < 0 || (v52 & 0x4000000000000000) != 0)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v53 = _bridgeCocoaArray<A>(_:)();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      uint64_t v53 = v52;
    }
    uint64_t v54 = v131;
    swift_release();
    sub_100094134(&qword_10090E538);
    *uint64_t v54 = v53;
    REMRemindersListDataView.SearchInvocation.Parameters.showCompleted.getter();
    swift_storeEnumTagMultiPayload();
    id v121 = (id)sub_10038F1F0();
    sub_100594D94((uint64_t)v54, _s10PredicatesOMa);
    if (qword_100907790 != -1) {
      goto LABEL_86;
    }
    goto LABEL_32;
  }
  uint64_t v28 = &_swiftEmptySetSingleton;
  uint64_t v137 = &_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  uint64_t v29 = __CocoaSet.Iterator.next()();
  if (!v29)
  {
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  uint64_t v30 = v29;
  v115[1] = a2;
  unint64_t v116 = v2;
  uint64_t v117 = a1;
  uint64_t v25 = (char *)type metadata accessor for REMObjectID_Codable();
  a1 = -1;
  while (1)
  {
    uint64_t v135 = v30;
    swift_dynamicCast();
    id v37 = [v136 entityName];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    uint64_t v3 = (void (**)(char *, uint64_t, uint64_t, uint64_t))[self cdEntityName];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;

    if (v38 == v41 && v40 == v43) {
      break;
    }
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_15;
    }

LABEL_7:
    uint64_t v30 = __CocoaSet.Iterator.next()();
    if (!v30)
    {
      uint64_t v28 = v137;
      a1 = v117;
      uint64_t v6 = v130;
      uint64_t v25 = v118;
      uint64_t v3 = v116;
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_15:
  id v46 = v136;
  uint64_t v6 = (uint64_t)v137;
  unint64_t v47 = v137[2];
  if (v137[3] <= v47)
  {
    sub_100322050(v47 + 1);
    uint64_t v6 = (uint64_t)v137;
  }
  Swift::Int v31 = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
  uint64_t v32 = v6 + 56;
  uint64_t v33 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v34 = v31 & ~v33;
  unint64_t v35 = v34 >> 6;
  if (((-1 << v34) & ~*(void *)(v6 + 56 + 8 * (v34 >> 6))) != 0)
  {
    unint64_t v36 = __clz(__rbit64((-1 << v34) & ~*(void *)(v6 + 56 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
LABEL_6:
    *(void *)(v32 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    *(void *)(*(void *)(v6 + 48) + 8 * v36) = v46;
    ++*(void *)(v6 + 16);
    goto LABEL_7;
  }
  char v48 = 0;
  unint64_t v49 = (unint64_t)(63 - v33) >> 6;
  while (++v35 != v49 || (v48 & 1) == 0)
  {
    BOOL v50 = v35 == v49;
    if (v35 == v49) {
      unint64_t v35 = 0;
    }
    v48 |= v50;
    uint64_t v51 = *(void *)(v32 + 8 * v35);
    if (v51 != -1)
    {
      unint64_t v36 = __clz(__rbit64(~v51)) + (v35 << 6);
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  swift_once();
LABEL_32:
  unint64_t v55 = qword_100942318;
  if (qword_100907950 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_10091DC00;
  if ((unint64_t)qword_10091DC00 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090B070);
    unint64_t v57 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    unint64_t v57 = v56;
  }
  unint64_t v58 = (void *)sub_1003BC8C4(v55, v57, 0, (uint64_t)v121);
  swift_bridgeObjectRelease();
  uint64_t v59 = v122;
  REMRemindersListDataView.SearchInvocation.Parameters.sortingStyle.getter();
  uint64_t v60 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v61 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v62 = (uint64_t)v119;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v119, v60, v61);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4(v59, v62, (uint64_t)v25);
  uint64_t v63 = (uint64_t)v123;
  REMRemindersListDataView.SearchInvocation.Parameters.showCompleted.getter();
  sub_100527148((uint64_t)v25, v63, 0);
  (*(void (**)(uint64_t, unsigned int (**)(char *, uint64_t, uint64_t)))(v127 + 8))(v63, v128);
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v58 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v65 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v120 = (uint64_t)v3;
  if (v3)
  {
    sub_100594D94((uint64_t)v25, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);

    goto LABEL_94;
  }
  unint64_t v66 = v65;
  uint64_t v137 = _swiftEmptyArrayStorage;
  if (v65 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v67 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v117 = a1;
  unint64_t v116 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v58;
  if (!v67)
  {
    swift_bridgeObjectRelease();
    unint64_t v83 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_60;
  }
  if (v67 < 1)
  {
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v68 = 0;
  BOOL v131 = (id *)(v66 & 0xC000000000000001);
  uint64_t v3 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
  uint64_t v127 = v124 + 32;
  id v128 = (unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
  while (2)
  {
    if (v131) {
      uint64_t v70 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v70 = (char *)*(id *)(v66 + 8 * v68 + 32);
    }
    uint64_t v25 = v70;
    uint64_t v71 = v67;
    unint64_t v58 = (void *)v66;
    id v72 = [v70 identifier];
    if (!v72)
    {
      uint64_t v69 = v133;
      (*v3)(v133, 1, 1, v6);
LABEL_44:
      sub_1000966BC((uint64_t)v69, (uint64_t *)&unk_100909E50);

      goto LABEL_45;
    }
    unint64_t v73 = v72;
    unint64_t v74 = v132;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v69 = v133;
    (*(void (**)(char *, char *, uint64_t))v127)(v133, v74, v6);
    uint64_t v75 = *v3;
    (*v3)(v69, 0, 1, v6);
    unint64_t v76 = *v128;
    if ((*v128)(v69, 1, v6) == 1) {
      goto LABEL_44;
    }
    sub_1000966BC((uint64_t)v69, (uint64_t *)&unk_100909E50);
    id v77 = [v25 list];
    if (!v77)
    {
      uint64_t v69 = (char *)v126;
      v75((char *)v126, 1, 1, v6);
      goto LABEL_44;
    }
    uint64_t v78 = v77;
    id v79 = [v77 identifier];

    if (v79)
    {
      id v80 = v125;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v81 = 0;
    }
    else
    {
      uint64_t v81 = 1;
      id v80 = v125;
    }
    uint64_t v6 = v130;
    v75(v80, v81, 1, v130);
    uint64_t v82 = (uint64_t)v80;
    uint64_t v69 = (char *)v126;
    sub_1000F44F4(v82, (uint64_t)v126);
    if (v76(v69, 1, v6) == 1) {
      goto LABEL_44;
    }
    sub_1000966BC((uint64_t)v69, (uint64_t *)&unk_100909E50);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    uint64_t v6 = v130;
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_45:
    unint64_t v66 = (unint64_t)v58;
    uint64_t v67 = v71;
    if (v71 != ++v68) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v83 = (unint64_t)v137;
LABEL_60:
  uint64_t v137 = _swiftEmptyDictionarySingleton;
  if ((v83 & 0x8000000000000000) != 0 || (v83 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v84) {
      goto LABEL_63;
    }
LABEL_91:
    uint64_t v85 = _swiftEmptyDictionarySingleton;
LABEL_92:
    swift_release();
    uint64_t v109 = swift_retain();
    a1 = (uint64_t)sub_100209DC0(v109);
    swift_release();
    uint64_t v110 = v120;
    uint64_t v111 = sub_100592EF8(a1, v117);
    if (v110)
    {
      sub_100594D94((uint64_t)v118, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      swift_release();

      swift_release();
LABEL_94:
    }
    else
    {
      unint64_t v113 = v111;
      swift_release();
      swift_retain();
      sub_1005934F0(v113, (uint64_t)v85);
      a1 = v114;

      swift_release();
      sub_100594D94((uint64_t)v118, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      swift_bridgeObjectRelease();
      swift_release();
    }
    return a1;
  }
  uint64_t v84 = *(void *)(v83 + 16);
  if (!v84) {
    goto LABEL_91;
  }
LABEL_63:
  BOOL v131 = (id *)(v124 + 32);
  uint64_t v127 = v124 + 56;
  id v128 = (unsigned int (**)(char *, uint64_t, uint64_t))(v83 & 0xC000000000000001);
  id v126 = (unsigned int (**)(char *, uint64_t, void *))(v124 + 48);
  id v123 = (void (**)(uint64_t, uint64_t))(v124 + 8);
  uint64_t v85 = _swiftEmptyDictionarySingleton;
  a1 = 4;
  long long v122 = xmmword_10077A530;
  uint64_t v125 = (char *)v84;
  while (1)
  {
    uint64_t v87 = a1 - 4;
    if (v128)
    {
      uint64_t v88 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v89 = (char *)(a1 - 3);
      if (__OFADD__(v87, 1)) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v88 = (char *)*(id *)(v83 + 8 * a1);
      uint64_t v89 = (char *)(a1 - 3);
      if (__OFADD__(v87, 1)) {
        goto LABEL_83;
      }
    }
    uint64_t v133 = v89;
    uint64_t v25 = v88;
    id v90 = [v88 list];
    if (!v90) {
      break;
    }
    uint64_t v91 = v90;
    unint64_t v58 = (void *)v6;
    id v92 = [v90 identifier];

    if (!v92) {
      goto LABEL_99;
    }
    uint64_t v93 = v132;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = (uint64_t)v131;
    uint64_t v3 = (void (**)(char *, uint64_t, uint64_t, uint64_t))*v131;
    id v94 = v129;
    ((void (*)(char *, char *, void *))*v131)(v129, v93, v58);
    (*(void (**)(char *, void, uint64_t, void *))v127)(v94, 0, 1, v58);
    if ((*v126)(v94, 1, v58) == 1) {
      goto LABEL_100;
    }
    uint64_t v95 = v134;
    ((void (*)(uint64_t, char *, void *))v3)(v134, v94, v58);
    unint64_t v97 = sub_100306EC4(v95);
    uint64_t v98 = v85[2];
    BOOL v99 = (v96 & 1) == 0;
    uint64_t v100 = v98 + v99;
    if (__OFADD__(v98, v99)) {
      goto LABEL_84;
    }
    char v101 = v96;
    if (v85[3] < v100)
    {
      sub_10030ECEC(v100, 1);
      uint64_t v85 = v137;
      unint64_t v102 = sub_100306EC4(v134);
      if ((v101 & 1) != (v103 & 1)) {
        goto LABEL_101;
      }
      unint64_t v97 = v102;
    }
    if (v101)
    {
      uint64_t v6 = v130;
      (*v123)(v134, v130);
      uint64_t v85 = v137;
      uint64_t v86 = (void *)(v137[7] + 8 * v97);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v86 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = v122;
      *(void *)(v104 + 32) = v25;
      id v136 = (id)v104;
      specialized Array._endMutation()();
      id v105 = v136;
      v85[(v97 >> 6) + 8] |= 1 << v97;
      uint64_t v6 = v130;
      ((void (*)(unint64_t, uint64_t, uint64_t))v3)(v85[6] + *(void *)(v124 + 72) * v97, v134, v130);
      *(void *)(v85[7] + 8 * v97) = v105;
      uint64_t v106 = v85[2];
      BOOL v107 = __OFADD__(v106, 1);
      uint64_t v108 = v106 + 1;
      if (v107) {
        goto LABEL_85;
      }
      v85[2] = v108;
    }
    ++a1;
    if (v133 == v125) {
      goto LABEL_92;
    }
  }
LABEL_98:
  __break(1u);
LABEL_99:
  (*(void (**)(char *, uint64_t, uint64_t, void *))v127)(v129, 1, 1, v58);
LABEL_100:
  __break(1u);
LABEL_101:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100594894(uint64_t a1)
{
  uint64_t v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = REMRemindersListDataView.SearchInvocation.Parameters.countCompleted.getter();
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = REMRemindersListDataView.SearchInvocation.Parameters.objectIDs.getter();
  if ((v7 & 0xC000000000000001) == 0)
  {
    uint64_t v8 = (void *)sub_100592D94(v7);
    goto LABEL_30;
  }
  uint64_t v8 = &_swiftEmptySetSingleton;
  char v48 = &_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  uint64_t v9 = __CocoaSet.Iterator.next()();
  if (!v9) {
    goto LABEL_29;
  }
  uint64_t v10 = v9;
  v41[1] = v3;
  uint64_t v42 = v5;
  uint64_t v43 = a1;
  int v44 = v6;
  uint64_t v45 = v1;
  type metadata accessor for REMObjectID_Codable();
  uint64_t v5 = -1;
  do
  {
    uint64_t v46 = v10;
    swift_dynamicCast();
    id v17 = [v47 entityName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = [self cdEntityName];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v18 == v22 && v20 == v24)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {

        goto LABEL_8;
      }
    }
    id v27 = v47;
    uint64_t v28 = v48;
    unint64_t v29 = v48[2];
    if (v48[3] <= v29)
    {
      sub_100322050(v29 + 1);
      uint64_t v28 = v48;
    }
    Swift::Int v11 = NSObject._rawHashValue(seed:)(v28[5]);
    uint64_t v12 = v28 + 7;
    uint64_t v13 = -1 << *((unsigned char *)v28 + 32);
    unint64_t v14 = v11 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~v28[(v14 >> 6) + 7]) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~v28[(v14 >> 6) + 7])) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        BOOL v32 = v15 == v31;
        if (v15 == v31) {
          unint64_t v15 = 0;
        }
        v30 |= v32;
        uint64_t v33 = v12[v15];
      }
      while (v33 == -1);
      unint64_t v16 = __clz(__rbit64(~v33)) + (v15 << 6);
    }
    *(void *)((char *)v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(void *)(v28[6] + 8 * v16) = v27;
    ++v28[2];
LABEL_8:
    uint64_t v10 = __CocoaSet.Iterator.next()();
  }
  while (v10);
  uint64_t v8 = v48;
  uint64_t v5 = v42;
LABEL_29:
  swift_release();
LABEL_30:
  uint64_t v35 = (uint64_t)sub_100209B04((uint64_t)v8);
  swift_release();
  if (v35 < 0 || (v35 & 0x4000000000000000) != 0)
  {
LABEL_35:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v36 = _bridgeCocoaArray<A>(_:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v36 = v35;
  }
  swift_release();
  *(void *)uint64_t v5 = v36;
  swift_storeEnumTagMultiPayload();
  id v37 = (void *)sub_10038F1F0();
  sub_100594D94(v5, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v38 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v39 = [(id)swift_getObjCClassFromMetadata() entity];
  [v38 setEntity:v39];

  [v38 setAffectedStores:0];
  [v38 setPredicate:v37];
  uint64_t v34 = NSManagedObjectContext.count<A>(for:)();

  return v34;
}

uint64_t sub_100594D4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100594D94(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100594E04(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

unint64_t sub_100594E64(char a1)
{
  unint64_t result = 0xD000000000000030;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000034;
      break;
    case 3:
      unint64_t result = 0xD000000000000031;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100594F10()
{
  return Hasher._finalize()();
}

Swift::Int sub_100594FFC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005950F4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10059517C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100595294()
{
  return Hasher._finalize()();
}

Swift::Int sub_10059531C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005953A4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005954C8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005955E4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005956D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005957C4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005958C0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100595968()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005959E8()
{
  return Hasher._finalize()();
}

void sub_100595B1C(long long *a1)
{
  uint64_t v2 = v1;
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091DC30);
  swift_retain();
  sub_10059B9F8((uint64_t)a1);
  swift_retain();
  sub_10059B9F8((uint64_t)a1);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    uint64_t v8 = 0xD000000000000030;
    unint64_t v9 = 0x80000001007C7430;
    switch(*(unsigned char *)(v2 + 16))
    {
      case 1:
        uint64_t v8 = 0xD00000000000002DLL;
        uint64_t v10 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_9;
      case 2:
        uint64_t v8 = 0xD000000000000034;
        uint64_t v10 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_9;
      case 3:
        uint64_t v8 = 0xD000000000000031;
        uint64_t v10 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_9:
        unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v9 = 0x80000001007C7520;
        uint64_t v8 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    *(void *)&long long aBlock = sub_1000C51B8(v8, v9, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    long long v11 = a1[3];
    long long v31 = a1[2];
    long long v32 = v11;
    long long v33 = a1[4];
    long long v12 = a1[1];
    long long aBlock = *a1;
    long long v30 = v12;
    sub_10059B9F8((uint64_t)a1);
    uint64_t v13 = String.init<A>(describing:)();
    *(void *)&long long aBlock = sub_1000C51B8(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10059BA24((uint64_t)a1);
    sub_10059BA24((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDDynamicXPCActivity UPDATE START {identifier: %{public}s, newCriteria: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    sub_10059BA24((uint64_t)a1);
    sub_10059BA24((uint64_t)a1);
  }

  *(void *)&long long aBlock = *(void *)(v2 + 120);
  __chkstk_darwin(v15);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  if (v34 == 1)
  {
    char v16 = *(unsigned char *)(v2 + 16);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v23;
    *(unsigned char *)(v24 + 24) = v16;
    long long v25 = a1[3];
    *(_OWORD *)(v24 + 64) = a1[2];
    *(_OWORD *)(v24 + 80) = v25;
    *(_OWORD *)(v24 + 96) = a1[4];
    long long v26 = a1[1];
    *(_OWORD *)(v24 + 32) = *a1;
    *(_OWORD *)(v24 + 48) = v26;
    *(void *)&long long v31 = sub_10059BAD0;
    *((void *)&v31 + 1) = v24;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v30 = sub_100594E04;
    *((void *)&v30 + 1) = &unk_1008CB478;
    id v27 = _Block_copy(&aBlock);
    sub_10059B9F8((uint64_t)a1);
    swift_release();
    uint64_t v28 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    xpc_activity_register((const char *)(v28 + 32), XPC_ACTIVITY_CHECK_IN, v27);
    swift_release();
    _Block_release(v27);
  }
  else
  {
    swift_retain_n();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v20 = 0xD000000000000030;
      unint64_t v21 = 0x80000001007C7430;
      switch(*(unsigned char *)(v2 + 16))
      {
        case 1:
          uint64_t v20 = 0xD00000000000002DLL;
          uint64_t v22 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_20;
        case 2:
          uint64_t v20 = 0xD000000000000034;
          uint64_t v22 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_20;
        case 3:
          uint64_t v20 = 0xD000000000000031;
          uint64_t v22 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_20:
          unint64_t v21 = (unint64_t)(v22 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v21 = 0x80000001007C7520;
          uint64_t v20 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      uint64_t v34 = sub_1000C51B8(v20, v21, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDDynamicXPCActivity UPDATE END pendingCriteria == newCriteria {identifier: %{public}s}", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_100596208()
{
  uint64_t v1 = v0;
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091DC30);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = 0xD000000000000030;
    unint64_t v7 = 0x80000001007C7430;
    switch(*(unsigned char *)(v1 + 16))
    {
      case 1:
        uint64_t v6 = 0xD00000000000002DLL;
        uint64_t v8 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_9;
      case 2:
        uint64_t v6 = 0xD000000000000034;
        uint64_t v8 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_9;
      case 3:
        uint64_t v6 = 0xD000000000000031;
        uint64_t v8 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_9:
        unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v7 = 0x80000001007C7520;
        uint64_t v6 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    sub_1000C51B8(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDDynamicXPCActivity UNREGISTER {identifier: %{public}s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v11 = *(void *)(v1 + 120);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  uint64_t v9 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  xpc_activity_unregister((const char *)(v9 + 32));
  return swift_release();
}

void sub_100596560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - v12;
  __chkstk_darwin(v14);
  char v16 = (char *)&v44 - v15;
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100914280);
  __n128 v19 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != a2 && *(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    int64_t v21 = 0;
    uint64_t v22 = a1 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a1 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & *(void *)(a1 + 56);
    int64_t v26 = (unint64_t)(v23 + 63) >> 6;
    uint64_t v53 = v5 + 48;
    uint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
    uint64_t v55 = a2 + 56;
    uint64_t v48 = v5;
    uint64_t v49 = a1;
    uint64_t v46 = a1 + 56;
    id v47 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    int64_t v45 = v26;
    uint64_t v52 = a2;
    if (v25) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    if (v29 < v26)
    {
      unint64_t v30 = *(void *)(v22 + 8 * v29);
      int64_t v31 = v21 + 1;
      if (v30) {
        goto LABEL_21;
      }
      int64_t v31 = v21 + 2;
      if (v21 + 2 >= v26) {
        goto LABEL_34;
      }
      unint64_t v30 = *(void *)(v22 + 8 * v31);
      if (v30) {
        goto LABEL_21;
      }
      int64_t v31 = v21 + 3;
      if (v21 + 3 >= v26) {
        goto LABEL_34;
      }
      unint64_t v30 = *(void *)(v22 + 8 * v31);
      if (v30)
      {
LABEL_21:
        uint64_t v27 = v4;
        uint64_t v50 = (v30 - 1) & v30;
        int64_t v51 = v31;
        for (unint64_t i = __clz(__rbit64(v30)) + (v31 << 6); ; unint64_t i = __clz(__rbit64(v25)) | (v21 << 6))
        {
          uint64_t v33 = *(void *)(v5 + 72);
          uint64_t v34 = (uint64_t)v20;
          sub_100128070(*(void *)(a1 + 48) + v33 * i, (uint64_t)v20);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v34, 0, 1, v27);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v34, 1, v27) == 1) {
            return;
          }
          sub_1001280D4(v34, (uint64_t)v16);
          uint64_t v35 = v52;
          Hasher.init(_seed:)();
          type metadata accessor for UUID();
          sub_10059C108((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          uint64_t v36 = v27;
          uint64_t v37 = v35;
          type metadata accessor for Date();
          sub_10059C108(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
          dispatch thunk of Hashable.hash(into:)();
          Swift::Int v38 = Hasher._finalize()();
          uint64_t v39 = -1 << *(unsigned char *)(v35 + 32);
          unint64_t v40 = v38 & ~v39;
          if (((*(void *)(v55 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
          {
LABEL_32:
            sub_100128138((uint64_t)v16);
            return;
          }
          uint64_t v41 = ~v39;
          while (1)
          {
            sub_100128070(*(void *)(v37 + 48) + v40 * v33, (uint64_t)v13);
            char v42 = static UUID.== infix(_:_:)();
            sub_100128070((uint64_t)v13, (uint64_t)v10);
            sub_100128070((uint64_t)v16, (uint64_t)v7);
            if (v42) {
              break;
            }
            sub_100128138((uint64_t)v7);
            sub_100128138((uint64_t)v10);
            sub_100128138((uint64_t)v13);
LABEL_26:
            unint64_t v40 = (v40 + 1) & v41;
            if (((*(void *)(v55 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
              goto LABEL_32;
            }
          }
          char v43 = static Date.== infix(_:_:)();
          sub_100128138((uint64_t)v7);
          sub_100128138((uint64_t)v10);
          sub_100128138((uint64_t)v13);
          if ((v43 & 1) == 0) {
            goto LABEL_26;
          }
          sub_100128138((uint64_t)v16);
          uint64_t v4 = v36;
          uint64_t v5 = v48;
          a1 = v49;
          uint64_t v22 = v46;
          uint64_t v20 = v47;
          int64_t v26 = v45;
          unint64_t v25 = v50;
          int64_t v21 = v51;
          if (!v50) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v27 = v4;
          uint64_t v50 = (v25 - 1) & v25;
          int64_t v51 = v21;
        }
      }
      uint64_t v32 = v21 + 4;
      if (v21 + 4 < v26)
      {
        unint64_t v30 = *(void *)(v22 + 8 * v32);
        if (v30)
        {
          int64_t v31 = v21 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v31 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_36;
          }
          if (v31 >= v26) {
            break;
          }
          unint64_t v30 = *(void *)(v22 + 8 * v31);
          ++v32;
          if (v30) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_34:
    (*v54)(v20, 1, 1, v4, v19);
  }
}

Swift::Int sub_100596A7C(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_35;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    unint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(unsigned __int8 *)(v19 + v18) == v16) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_100596C74(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    int64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100596F18()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DC30);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DC30);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  int64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100596FE0(char *a1, char *a2)
{
  return sub_1002F3C88(*a1, *a2);
}

Swift::Int sub_100596FEC()
{
  return sub_1005957C4();
}

uint64_t sub_100596FF4()
{
  return sub_1002F4DD8();
}

Swift::Int sub_100596FFC()
{
  return sub_1002F05DC();
}

unint64_t sub_100597004@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10059C150(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100597034@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100594E64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100597060(void *a1@<X8>)
{
  *a1 = &off_1008B7428;
}

uint64_t sub_100597070(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1005970A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a4;
  v17[3] = a5;
  v17[4] = a1;
  v17[5] = a2;
  aBlock[4] = sub_10059C0FC;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CB630;
  Swift::Int v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_10059C108((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_100597374(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0);
}

void *sub_100597404(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for UnfairLock.Options();
  uint64_t v8 = __chkstk_darwin(v7);
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 13) = 0u;
  *(_OWORD *)(v4 + 11) = 0u;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  if (qword_100907960 != -1) {
    uint64_t v8 = swift_once();
  }
  aBlock[0] = qword_10091DC50;
  __chkstk_darwin(v8);
  *((unsigned char *)&v16 - 16) = a1;
  *(&v16 - 1) = v6;
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  swift_release();
  *((unsigned char *)v4 + 16) = a1;
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10059C108((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v9 = a1;
  swift_allocObject();
  v4[15] = UnfairLock.init(options:)();
  *((unsigned char *)v4 + 17) = 0;
  uint64_t v10 = v17;
  v4[3] = v16;
  v4[4] = v10;
  *(_OWORD *)(v4 + 5) = 0u;
  *(_OWORD *)(v4 + 7) = 0u;
  *(_OWORD *)(v4 + 9) = 0u;
  *(_OWORD *)(v4 + 11) = 0u;
  *(_OWORD *)(v4 + 13) = 0u;
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(unsigned char *)(v12 + 24) = v9;
  aBlock[4] = sub_10059C034;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100594E04;
  aBlock[3] = &unk_1008CB568;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  xpc_activity_register((const char *)(v14 + 32), XPC_ACTIVITY_CHECK_IN, v13);
  swift_release();
  swift_release();
  _Block_release(v13);
  return v4;
}

void sub_10059783C(Swift::Int a1)
{
  if (qword_100907968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = qword_10091DC58;
  swift_bridgeObjectRetain();
  char v3 = sub_1001CC66C(a1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (qword_100907958 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10091DC30);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v12[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v8 = 0xD000000000000030;
      unint64_t v9 = 0x80000001007C7430;
      switch((char)a1)
      {
        case 1:
          uint64_t v8 = 0xD00000000000002DLL;
          uint64_t v10 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_12;
        case 2:
          uint64_t v8 = 0xD000000000000034;
          uint64_t v10 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_12;
        case 3:
          uint64_t v8 = 0xD000000000000031;
          uint64_t v10 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_12:
          unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v9 = 0x80000001007C7520;
          uint64_t v8 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      uint64_t v11 = sub_1000C51B8(v8, v9, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDDynamicXPCActivity registered more than once {identifier: %{public}s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    swift_beginAccess();
    sub_100320C34(&v11, a1);
    swift_endAccess();
  }
}

void sub_100597AF4(_xpc_activity_s *a1, uint64_t a2, char a3)
{
  uint64_t v5 = type metadata accessor for REM_os_activity.Options();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = Strong;
    xpc_activity_state_t state = xpc_activity_get_state(a1);
    if (state)
    {
      xpc_activity_state_t v12 = state;
      if (state == 2)
      {
        if (qword_100907958 != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        sub_10008E2DC(v34, (uint64_t)qword_10091DC30);
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v59 = swift_slowAlloc();
          aBlock[0] = v59;
          *(_DWORD *)uint64_t v37 = 136446210;
          uint64_t v38 = 0xD000000000000030;
          unint64_t v39 = 0x80000001007C7430;
          switch(a3)
          {
            case 1:
              uint64_t v38 = 0xD00000000000002DLL;
              unint64_t v40 = "com.apple.remindd.ICCloudConfigurationUpdater";
              goto LABEL_49;
            case 2:
              uint64_t v38 = 0xD000000000000034;
              unint64_t v40 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
              goto LABEL_49;
            case 3:
              uint64_t v38 = 0xD000000000000031;
              unint64_t v40 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_49:
              unint64_t v39 = (unint64_t)(v40 - 32) | 0x8000000000000000;
              break;
            case 4:
              unint64_t v39 = 0x80000001007C7520;
              uint64_t v38 = 0xD00000000000001BLL;
              break;
            default:
              break;
          }
          uint64_t v61 = sub_1000C51B8(v38, v39, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDDynamicXPCActivity CHECKIN RUN {identifier: %{public}s}", v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v54 = swift_allocObject();
        *(void *)(v54 + 16) = v10;
        *(void *)(v54 + 24) = a1;
        uint64_t v55 = swift_allocObject();
        id v47 = sub_10059C084;
        *(void *)(v55 + 16) = sub_10059C084;
        *(void *)(v55 + 24) = v54;
        aBlock[4] = (uint64_t)sub_100097240;
        void aBlock[5] = v55;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1003B3260;
        aBlock[3] = (uint64_t)&unk_1008CB5E0;
        uint64_t v56 = _Block_copy(aBlock);
        sub_100094134((uint64_t *)&unk_10091DD40);
        uint64_t v57 = swift_allocObject();
        *(_OWORD *)(v57 + 16) = xmmword_100776E40;
        swift_retain();
        swift_unknownObjectRetain();
        static REM_os_activity.Options.ifNonePresent.getter();
        uint64_t v61 = v57;
        sub_10059C108((unint64_t *)&qword_1009108D0, (void (*)(uint64_t))&type metadata accessor for REM_os_activity.Options);
        sub_100094134((uint64_t *)&unk_10091DD50);
        sub_1000967F4((unint64_t *)&qword_1009108D8, (uint64_t *)&unk_10091DD50);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        static REM_os_activity.initiate(_:dso:options:execute:)();
        _Block_release(v56);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_release();
        goto LABEL_60;
      }
      if (state == 3)
      {
        if (qword_100907958 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_10008E2DC(v13, (uint64_t)qword_10091DC30);
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 136446210;
          uint64_t v17 = 0xD000000000000030;
          unint64_t v18 = 0x80000001007C7430;
          switch(a3)
          {
            case 1:
              uint64_t v17 = 0xD00000000000002DLL;
              uint64_t v19 = "com.apple.remindd.ICCloudConfigurationUpdater";
              goto LABEL_39;
            case 2:
              uint64_t v17 = 0xD000000000000034;
              uint64_t v19 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
              goto LABEL_39;
            case 3:
              uint64_t v17 = 0xD000000000000031;
              uint64_t v19 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_39:
              unint64_t v18 = (unint64_t)(v19 - 32) | 0x8000000000000000;
              break;
            case 4:
              unint64_t v18 = 0x80000001007C7520;
              uint64_t v17 = 0xD00000000000001BLL;
              break;
            default:
              break;
          }
          uint64_t v61 = sub_1000C51B8(v17, v18, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDDynamicXPCActivity should defer {identifier: %{public}s}", v16, 0xCu);
          char v48 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v47 = 0;
        }
        else
        {

          id v47 = 0;
          char v48 = 1;
        }
        goto LABEL_61;
      }
      if (qword_100907958 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_10008E2DC(v41, (uint64_t)qword_10091DC30);
      BOOL v28 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v28, v42))
      {
LABEL_59:

        id v47 = 0;
LABEL_60:
        char v48 = 0;
LABEL_61:
        *(unsigned char *)(v10 + 17) = v48;
        swift_release();
        sub_100096314((uint64_t)v47);
        return;
      }
      uint64_t v43 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136446466;
      uint64_t v44 = 0xD000000000000030;
      unint64_t v45 = 0x80000001007C7430;
      switch(a3)
      {
        case 1:
          uint64_t v44 = 0xD00000000000002DLL;
          uint64_t v46 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_55;
        case 2:
          uint64_t v44 = 0xD000000000000034;
          uint64_t v46 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_55;
        case 3:
          uint64_t v44 = 0xD000000000000031;
          uint64_t v46 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_55:
          unint64_t v45 = (unint64_t)(v46 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v45 = 0x80000001007C7520;
          uint64_t v44 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      uint64_t v61 = sub_1000C51B8(v44, v45, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2048;
      uint64_t v61 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_type_t v49 = v42;
      uint64_t v50 = "RDDynamicXPCActivity CHECKIN ERROR unexpected state {identifier: %{public}s, state: %ld}";
      int64_t v51 = v28;
      uint64_t v52 = (uint8_t *)v43;
      uint32_t v53 = 22;
    }
    else
    {
      if (qword_100907958 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_10008E2DC(v27, (uint64_t)qword_10091DC30);
      BOOL v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v28, v29)) {
        goto LABEL_59;
      }
      int64_t v30 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)int64_t v30 = 136446210;
      uint64_t v31 = 0xD000000000000030;
      unint64_t v32 = 0x80000001007C7430;
      switch(a3)
      {
        case 1:
          uint64_t v31 = 0xD00000000000002DLL;
          uint64_t v33 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_44;
        case 2:
          uint64_t v31 = 0xD000000000000034;
          uint64_t v33 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_44;
        case 3:
          uint64_t v31 = 0xD000000000000031;
          uint64_t v33 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_44:
          unint64_t v32 = (unint64_t)(v33 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v32 = 0x80000001007C7520;
          uint64_t v31 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      uint64_t v61 = sub_1000C51B8(v31, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v49 = v29;
      uint64_t v50 = "RDDynamicXPCActivity CHECKIN CHECKIN {identifier: %{public}s}";
      int64_t v51 = v28;
      uint64_t v52 = v30;
      uint32_t v53 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v51, v49, v50, v52, v53);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_59;
  }
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_10091DC30);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v23 = 136446210;
    uint64_t v24 = 0xD000000000000030;
    unint64_t v25 = 0x80000001007C7430;
    switch(a3)
    {
      case 1:
        uint64_t v24 = 0xD00000000000002DLL;
        uint64_t v26 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_33;
      case 2:
        uint64_t v24 = 0xD000000000000034;
        uint64_t v26 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_33;
      case 3:
        uint64_t v24 = 0xD000000000000031;
        uint64_t v26 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_33:
        unint64_t v25 = (unint64_t)(v26 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v25 = 0x80000001007C7520;
        uint64_t v24 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    uint64_t v61 = sub_1000C51B8(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDDynamicXPCActivity CHECKIN executed on deallocated instance {identifier: %{public}s}", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

void sub_100598724(_xpc_activity_s *a1)
{
  uint64_t v2 = v1;
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091DC30);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = 0xD000000000000030;
    unint64_t v9 = 0x80000001007C7430;
    switch(*(unsigned char *)(v2 + 16))
    {
      case 1:
        uint64_t v8 = 0xD00000000000002DLL;
        uint64_t v10 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_9;
      case 2:
        uint64_t v8 = 0xD000000000000034;
        uint64_t v10 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_9;
      case 3:
        uint64_t v8 = 0xD000000000000031;
        uint64_t v10 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_9:
        unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v9 = 0x80000001007C7520;
        uint64_t v8 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    uint64_t v30 = sub_1000C51B8(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDDynamicXPCActivity RUN START {identifier: %{public}s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (xpc_activity_set_state(a1, 4))
  {
    uint64_t v28 = *(void *)(v2 + 120);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_release();
    char v11 = *(unsigned char *)(v2 + 16);
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    v12._countAndFlagsBits = 0x7669746341637078;
    v12._object = (void *)0xEC0000005B797469;
    String.append(_:)(v12);
    LOBYTE(v30) = v11;
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 93;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v15 = v28;
    unint64_t v14 = v29;
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000C51B8(v15, v14, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction INIT {name: %{public}s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    String.utf8CString.getter();
    uint64_t v25 = os_transaction_create();
    swift_release();
    uint64_t v26 = *(void (**)(void (*)(char), uint64_t))(v2 + 24);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a1;
    *(unsigned char *)(v27 + 24) = v11;
    *(void *)(v27 + 32) = v15;
    *(void *)(v27 + 40) = v14;
    *(void *)(v27 + 48) = v25;
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v26(sub_10059BB64, v27);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = 0xD000000000000030;
      unint64_t v23 = 0x80000001007C7430;
      switch(*(unsigned char *)(v2 + 16))
      {
        case 1:
          uint64_t v22 = 0xD00000000000002DLL;
          uint64_t v24 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_23;
        case 2:
          uint64_t v22 = 0xD000000000000034;
          uint64_t v24 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_23;
        case 3:
          uint64_t v22 = 0xD000000000000031;
          uint64_t v24 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_23:
          unint64_t v23 = (unint64_t)(v24 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v23 = 0x80000001007C7520;
          uint64_t v22 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      uint64_t v30 = sub_1000C51B8(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_CONTINUE) failed {identifier: %{public}s}", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

Swift::Int sub_100598DD4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v7 = a2[7];
  uint64_t v6 = a2[8];
  uint64_t v9 = a2[9];
  uint64_t v8 = a2[10];
  uint64_t v11 = a2[11];
  uint64_t v10 = a2[12];
  uint64_t v12 = a2[13];
  uint64_t v13 = a2[14];
  if (v13)
  {
    *(void *)&long long v23 = a2[5];
    *((void *)&v23 + 1) = v4;
    *(void *)&long long v24 = v7;
    *((void *)&v24 + 1) = v6;
    uint64_t v25 = v9;
    LOWORD(v26) = v8;
    BYTE2(v26) = BYTE2(v8);
    BYTE3(v26) = BYTE3(v8);
    BYTE4(v26) = BYTE4(v8);
    uint64_t v27 = v11;
    LOWORD(v28) = v10 & 0xFF01;
    BYTE2(v28) = BYTE2(v10);
    BYTE3(v28) = BYTE3(v10);
    BYTE4(v28) = BYTE4(v10);
    BYTE5(v28) = BYTE5(v10);
    BYTE6(v28) = BYTE6(v10);
    HIBYTE(v28) = HIBYTE(v10);
    LOWORD(v29) = v12 & 0xFF01;
    BYTE2(v29) = BYTE2(v12);
    uint64_t v30 = v13;
    Swift::Int result = sub_10059BC44(a1, (uint64_t)&v23);
    char v15 = result ^ 1;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 72);
    unint64_t v19 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32);
    unint64_t v20 = ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 58) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 62) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 63) << 56) | *(unsigned char *)(a1 + 56) & 1;
    long long v21 = *(_OWORD *)(a1 + 16);
    unint64_t v22 = *(unsigned char *)(a1 + 64) & 1 | ((unint64_t)*(unsigned __int8 *)(a1 + 66) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 65) << 8);
    long long v23 = *(_OWORD *)a1;
    long long v24 = v21;
    uint64_t v25 = v17;
    unint64_t v26 = v19;
    uint64_t v27 = v16;
    unint64_t v28 = v20;
    unint64_t v29 = v22;
    uint64_t v30 = v18;
    uint64_t v31 = v5;
    uint64_t v32 = v4;
    uint64_t v33 = v7;
    uint64_t v34 = v6;
    uint64_t v35 = v9;
    uint64_t v36 = v8;
    uint64_t v37 = v11;
    uint64_t v38 = v10;
    uint64_t v39 = v12;
    uint64_t v40 = 0;
    sub_10059B9F8(a1);
    Swift::Int result = sub_10059BB78((uint64_t)&v23);
    char v15 = 1;
  }
  *a3 = v15 & 1;
  return result;
}

void sub_100598F88(_xpc_activity_s *a1, uint64_t a2, char a3, long long *a4)
{
  uint64_t v7 = type metadata accessor for REM_os_activity.Options();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = Strong;
    xpc_activity_state_t state = xpc_activity_get_state(a1);
    if (state)
    {
      uint64_t v14 = state;
      if (state == 2)
      {
        if (qword_100907958 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        sub_10008E2DC(v37, (uint64_t)qword_10091DC30);
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          uint64_t v61 = swift_slowAlloc();
          *(void *)&long long aBlock = v61;
          *(_DWORD *)uint64_t v40 = 136446210;
          uint64_t v41 = 0xD000000000000030;
          unint64_t v42 = 0x80000001007C7430;
          switch(a3)
          {
            case 1:
              uint64_t v41 = 0xD00000000000002DLL;
              uint64_t v43 = "com.apple.remindd.ICCloudConfigurationUpdater";
              goto LABEL_50;
            case 2:
              uint64_t v41 = 0xD000000000000034;
              uint64_t v43 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
              goto LABEL_50;
            case 3:
              uint64_t v41 = 0xD000000000000031;
              uint64_t v43 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_50:
              unint64_t v42 = (unint64_t)(v43 - 32) | 0x8000000000000000;
              break;
            case 4:
              unint64_t v42 = 0x80000001007C7520;
              uint64_t v41 = 0xD00000000000001BLL;
              break;
            default:
              break;
          }
          uint64_t v67 = sub_1000C51B8(v41, v42, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "RDDynamicXPCActivity UPDATE RUN {identifier: %{public}s", v40, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = v12;
        *(void *)(v56 + 24) = a1;
        uint64_t v57 = swift_allocObject();
        uint64_t v50 = sub_10059C6D0;
        *(void *)(v57 + 16) = sub_10059C6D0;
        *(void *)(v57 + 24) = v56;
        *(void *)&long long v64 = sub_10008F6F4;
        *((void *)&v64 + 1) = v57;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v63 = sub_1003B3260;
        *((void *)&v63 + 1) = &unk_1008CB4F0;
        uint64_t v58 = _Block_copy(&aBlock);
        sub_100094134((uint64_t *)&unk_10091DD40);
        uint64_t v59 = swift_allocObject();
        *(_OWORD *)(v59 + 16) = xmmword_100776E40;
        swift_retain();
        swift_unknownObjectRetain();
        static REM_os_activity.Options.ifNonePresent.getter();
        uint64_t v67 = v59;
        sub_10059C108((unint64_t *)&qword_1009108D0, (void (*)(uint64_t))&type metadata accessor for REM_os_activity.Options);
        sub_100094134((uint64_t *)&unk_10091DD50);
        sub_1000967F4((unint64_t *)&qword_1009108D8, (uint64_t *)&unk_10091DD50);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        static REM_os_activity.initiate(_:dso:options:execute:)();
        _Block_release(v58);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        swift_release();
        goto LABEL_61;
      }
      if (state == 3)
      {
        if (qword_100907958 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        sub_10008E2DC(v15, (uint64_t)qword_10091DC30);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136446210;
          uint64_t v19 = 0xD000000000000030;
          unint64_t v20 = 0x80000001007C7430;
          switch(a3)
          {
            case 1:
              uint64_t v19 = 0xD00000000000002DLL;
              long long v21 = "com.apple.remindd.ICCloudConfigurationUpdater";
              goto LABEL_40;
            case 2:
              uint64_t v19 = 0xD000000000000034;
              long long v21 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
              goto LABEL_40;
            case 3:
              uint64_t v19 = 0xD000000000000031;
              long long v21 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_40:
              unint64_t v20 = (unint64_t)(v21 - 32) | 0x8000000000000000;
              break;
            case 4:
              unint64_t v20 = 0x80000001007C7520;
              uint64_t v19 = 0xD00000000000001BLL;
              break;
            default:
              break;
          }
          uint64_t v67 = sub_1000C51B8(v19, v20, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDDynamicXPCActivity should defer {identifier: %{public}s}", v18, 0xCu);
          char v51 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v50 = 0;
        }
        else
        {

          uint64_t v50 = 0;
          char v51 = 1;
        }
        goto LABEL_62;
      }
      if (qword_100907958 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_10008E2DC(v44, (uint64_t)qword_10091DC30);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v31, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136446466;
        uint64_t v47 = 0xD000000000000030;
        unint64_t v48 = 0x80000001007C7430;
        switch(a3)
        {
          case 1:
            uint64_t v47 = 0xD00000000000002DLL;
            os_log_type_t v49 = "com.apple.remindd.ICCloudConfigurationUpdater";
            goto LABEL_56;
          case 2:
            uint64_t v47 = 0xD000000000000034;
            os_log_type_t v49 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
            goto LABEL_56;
          case 3:
            uint64_t v47 = 0xD000000000000031;
            os_log_type_t v49 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_56:
            unint64_t v48 = (unint64_t)(v49 - 32) | 0x8000000000000000;
            break;
          case 4:
            unint64_t v48 = 0x80000001007C7520;
            uint64_t v47 = 0xD00000000000001BLL;
            break;
          default:
            break;
        }
        uint64_t v67 = sub_1000C51B8(v47, v48, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2048;
        uint64_t v67 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v31, v45, "RDDynamicXPCActivity unexpected state {identifier: %{public}s, state: %ld}", (uint8_t *)v46, 0x16u);
LABEL_59:
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      *(void *)&long long aBlock = *(void *)(v12 + 120);
      __chkstk_darwin(0);
      *(&v60 - 2) = v12;
      *(&v60 - 1) = (uint64_t)a4;
      type metadata accessor for UnfairLock();
      swift_retain();
      Lock.sync<A>(_:)();
      swift_release();
      xpc_object_t v29 = sub_100599DE4();
      xpc_activity_set_criteria(a1, v29);
      swift_unknownObjectRelease();
      if (qword_100907958 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_10091DC30);
      sub_10059B9F8((uint64_t)a4);
      sub_10059B9F8((uint64_t)a4);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        uint64_t v34 = 0xD000000000000030;
        unint64_t v35 = 0x80000001007C7430;
        switch(a3)
        {
          case 1:
            uint64_t v34 = 0xD00000000000002DLL;
            uint64_t v36 = "com.apple.remindd.ICCloudConfigurationUpdater";
            goto LABEL_45;
          case 2:
            uint64_t v34 = 0xD000000000000034;
            uint64_t v36 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
            goto LABEL_45;
          case 3:
            uint64_t v34 = 0xD000000000000031;
            uint64_t v36 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_45:
            unint64_t v35 = (unint64_t)(v36 - 32) | 0x8000000000000000;
            break;
          case 4:
            unint64_t v35 = 0x80000001007C7520;
            uint64_t v34 = 0xD00000000000001BLL;
            break;
          default:
            break;
        }
        *(void *)&long long aBlock = sub_1000C51B8(v34, v35, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2082;
        long long v52 = a4[3];
        long long v64 = a4[2];
        long long v65 = v52;
        long long v66 = a4[4];
        long long v53 = a4[1];
        long long aBlock = *a4;
        long long v63 = v53;
        sub_10059B9F8((uint64_t)a4);
        uint64_t v54 = String.init<A>(describing:)();
        *(void *)&long long aBlock = sub_1000C51B8(v54, v55, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10059BA24((uint64_t)a4);
        sub_10059BA24((uint64_t)a4);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDDynamicXPCActivity UPDATE END Updated {identifier: %{public}s, newCriteria: %{public}s}", (uint8_t *)v33, 0x16u);
        goto LABEL_59;
      }
      sub_10059BA24((uint64_t)a4);
      sub_10059BA24((uint64_t)a4);
    }

    uint64_t v50 = 0;
LABEL_61:
    char v51 = 0;
LABEL_62:
    *(unsigned char *)(v12 + 17) = v51;
    swift_release();
    sub_100096314((uint64_t)v50);
    return;
  }
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_10091DC30);
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136446210;
    uint64_t v26 = 0xD000000000000030;
    unint64_t v27 = 0x80000001007C7430;
    switch(a3)
    {
      case 1:
        uint64_t v26 = 0xD00000000000002DLL;
        unint64_t v28 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_34;
      case 2:
        uint64_t v26 = 0xD000000000000034;
        unint64_t v28 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_34;
      case 3:
        uint64_t v26 = 0xD000000000000031;
        unint64_t v28 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_34:
        unint64_t v27 = (unint64_t)(v28 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v27 = 0x80000001007C7520;
        uint64_t v26 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    uint64_t v67 = sub_1000C51B8(v26, v27, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDDynamicXPCActivity UPDATE executed on deallocated instance {identifier: %{public}s}", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_100599D18(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 44);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 64);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 65);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 66);
  uint64_t v11 = *(void *)(a2 + 72);
  unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(a2 + 57) << 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 58) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 61) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 62) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 63) << 56) | *(unsigned char *)(a2 + 56) & 1;
  *(_OWORD *)(a1 + 56) = v3;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = v5 | (v6 << 32);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = (v9 << 8) | (v10 << 16) | v8 & 1;
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();

  return sub_10059B9F8(a2);
}

xpc_object_t sub_100599DE4()
{
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  sub_100096408(v0, (uint64_t)v46, &qword_10091DD60);
  sub_100096408((uint64_t)v46, (uint64_t)&v47, &qword_10091DD60);
  if ((unint64_t)BYTE9(v47) << 8 != 512)
  {
    *(_OWORD *)value = v47;
    *(_OWORD *)uint64_t v50 = v48[0];
    *(_OWORD *)&v50[9] = *(_OWORD *)((char *)v48 + 9);
    sub_100096408((uint64_t)value, (uint64_t)v66, &qword_1009127D0);
    sub_100096408((uint64_t)v66, (uint64_t)&v73, &qword_1009127D0);
    if ((v74 & 1) == 0)
    {
      if ((~*(void *)&v73 & 0x7FF0000000000000) == 0)
      {
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      if (v73 <= -9.22337204e18)
      {
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      if (v73 >= 9.22337204e18)
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_INTERVAL, (uint64_t)v73);
    }
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_REPEATING, value[9]);
    sub_100096408((uint64_t)v50, (uint64_t)v67, &qword_1009127D0);
    sub_100096408((uint64_t)v67, (uint64_t)&v71, &qword_1009127D0);
    if ((v72 & 1) == 0)
    {
      if ((~*(void *)&v71 & 0x7FF0000000000000) == 0)
      {
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      if (v71 <= -9.22337204e18)
      {
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      if (v71 >= 9.22337204e18)
      {
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_DELAY, (uint64_t)v71);
    }
    sub_100096408((uint64_t)&v50[16], (uint64_t)v68, &qword_1009127D0);
    sub_100096408((uint64_t)v68, (uint64_t)&v69, &qword_1009127D0);
    if ((v70 & 1) == 0)
    {
      if ((~*(void *)&v69 & 0x7FF0000000000000) == 0)
      {
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      if (v69 <= -9.22337204e18)
      {
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      if (v69 >= 9.22337204e18)
      {
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
        goto LABEL_120;
      }
      xpc_dictionary_set_int64(v1, XPC_ACTIVITY_GRACE_PERIOD, (uint64_t)v69);
    }
  }
  sub_100096408(v0 + 41, (uint64_t)&v45, &qword_10091DD68);
  sub_100096408((uint64_t)&v45, (uint64_t)&v51, &qword_10091DD68);
  if (v51 != 2)
  {
    if (v51) {
      uint64_t v2 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
    }
    else {
      uint64_t v2 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
    }
    xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v2);
  }
  sub_100096408(v0 + 42, (uint64_t)&v44, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v44, (uint64_t)&v52, (uint64_t *)&unk_10091DD70);
  if (v52 != 2) {
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY, v52 & 1);
  }
  sub_100096408(v0 + 43, (uint64_t)&v43, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v43, (uint64_t)&v53, (uint64_t *)&unk_10091DD70);
  if (v53 != 2) {
    xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, v53 & 1);
  }
  long long v3 = (const char *)XPC_ACTIVITY_EXPECTED_DURATION;
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  sub_100096408(v0 + 48, (uint64_t)v42, &qword_1009127D0);
  sub_100096408((uint64_t)v42, (uint64_t)&v54, &qword_1009127D0);
  if (v55) {
    goto LABEL_32;
  }
  if ((~*(void *)&v54 & 0x7FF0000000000000) == 0) {
    goto LABEL_106;
  }
  if (v54 <= -9.22337204e18)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (v54 >= 9.22337204e18)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  xpc_dictionary_set_int64(v1, v3, (uint64_t)v54);
LABEL_32:
  uint64_t v4 = (const char *)XPC_ACTIVITY_CPU_INTENSIVE;
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  sub_100096408(v0 + 57, (uint64_t)&v41, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v41, (uint64_t)&v56, (uint64_t *)&unk_10091DD70);
  if (v56 != 2) {
    xpc_dictionary_set_BOOL(v1, v4, v56 & 1);
  }
  uint64_t v5 = (const char *)XPC_ACTIVITY_MEMORY_INTENSIVE;
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE) {
    goto LABEL_122;
  }
  sub_100096408(v0 + 58, (uint64_t)&v40, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v40, (uint64_t)&v57, (uint64_t *)&unk_10091DD70);
  if (v57 != 2) {
    xpc_dictionary_set_BOOL(v1, v5, v57 & 1);
  }
  uint64_t v6 = (const char *)XPC_ACTIVITY_DISK_INTENSIVE;
  if (!XPC_ACTIVITY_DISK_INTENSIVE) {
    goto LABEL_123;
  }
  sub_100096408(v0 + 59, (uint64_t)&v39, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v39, (uint64_t)&v58, (uint64_t *)&unk_10091DD70);
  if (v58 != 2) {
    xpc_dictionary_set_BOOL(v1, v6, v58 & 1);
  }
  uint64_t v7 = (const char *)XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY) {
    goto LABEL_124;
  }
  sub_100096408(v0 + 62, (uint64_t)&v38, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v38, (uint64_t)&v59, (uint64_t *)&unk_10091DD70);
  if (v59 != 2) {
    xpc_dictionary_set_BOOL(v1, v7, v59 & 1);
  }
  char v8 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY) {
    goto LABEL_125;
  }
  sub_100096408(v0 + 63, (uint64_t)&v37, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v37, (uint64_t)&v60, (uint64_t *)&unk_10091DD70);
  if (v60 != 2) {
    xpc_dictionary_set_BOOL(v1, v8, v60 & 1);
  }
  uint64_t v9 = (const char *)XPC_ACTIVITY_MAY_REBOOT_DEVICE;
  if (!XPC_ACTIVITY_MAY_REBOOT_DEVICE) {
    goto LABEL_126;
  }
  sub_100096408(v0 + 60, (uint64_t)&v36, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v36, (uint64_t)&v61, (uint64_t *)&unk_10091DD70);
  if (v61 != 2) {
    xpc_dictionary_set_BOOL(v1, v9, v61 & 1);
  }
  uint64_t v10 = (const char *)XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY) {
    goto LABEL_127;
  }
  sub_100096408(v0 + 61, (uint64_t)&v35, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v35, (uint64_t)&v62, (uint64_t *)&unk_10091DD70);
  if (v62 != 2) {
    xpc_dictionary_set_BOOL(v1, v10, v62 & 1);
  }
  if (!XPC_ACTIVITY_POWER_NAP) {
    goto LABEL_128;
  }
  xpc_dictionary_set_BOOL(v1, XPC_ACTIVITY_POWER_NAP, *(unsigned char *)(v0 + 64));
  uint64_t v11 = (const char *)XPC_ACTIVITY_SHOULD_WAKE_DEVICE;
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  sub_100096408(v0 + 44, (uint64_t)&v34, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v34, (uint64_t)&v63, (uint64_t *)&unk_10091DD70);
  if (v63 != 2) {
    xpc_dictionary_set_BOOL(v1, v11, v63 & 1);
  }
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = v12 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v12 + 56);
  sub_10059B9F8(v0);
  int64_t v17 = 0;
  int64_t v18 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v19 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_C;
  unint64_t v20 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_B;
  long long v21 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_A;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v17 << 6);
    }
    else
    {
      int64_t v25 = v17 + 1;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
        goto LABEL_105;
      }
      if (v25 >= v18) {
        goto LABEL_84;
      }
      unint64_t v26 = *(void *)(v13 + 8 * v25);
      ++v17;
      if (!v26)
      {
        int64_t v17 = v25 + 1;
        if (v25 + 1 >= v18) {
          goto LABEL_84;
        }
        unint64_t v26 = *(void *)(v13 + 8 * v17);
        if (!v26)
        {
          int64_t v17 = v25 + 2;
          if (v25 + 2 >= v18) {
            goto LABEL_84;
          }
          unint64_t v26 = *(void *)(v13 + 8 * v17);
          if (!v26)
          {
            int64_t v27 = v25 + 3;
            if (v27 >= v18) {
              goto LABEL_84;
            }
            unint64_t v26 = *(void *)(v13 + 8 * v27);
            if (!v26)
            {
              while (1)
              {
                int64_t v17 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  break;
                }
                if (v17 >= v18) {
                  goto LABEL_84;
                }
                unint64_t v26 = *(void *)(v13 + 8 * v17);
                ++v27;
                if (v26) {
                  goto LABEL_77;
                }
              }
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
            int64_t v17 = v27;
          }
        }
      }
LABEL_77:
      unint64_t v16 = (v26 - 1) & v26;
      unint64_t v24 = __clz(__rbit64(v26)) + (v17 << 6);
    }
    int v28 = *(unsigned __int8 *)(*(void *)(v12 + 48) + v24);
    if (!v28)
    {
      uint64_t v22 = v21;
      if (!v21) {
        goto LABEL_118;
      }
      goto LABEL_61;
    }
    if (v28 != 1) {
      break;
    }
    uint64_t v22 = v20;
    if (!v20) {
      goto LABEL_119;
    }
LABEL_61:
    xpc_dictionary_set_BOOL(v1, v22, 1);
  }
  uint64_t v22 = v19;
  if (v19) {
    goto LABEL_61;
  }
  __break(1u);
LABEL_84:
  swift_release();
  xpc_object_t v29 = (const char *)XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE;
  if (!XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    JUMPOUT(0x10059A730);
  }
  sub_100096408(v0 + 65, (uint64_t)&v33, (uint64_t *)&unk_10091DD70);
  sub_100096408((uint64_t)&v33, (uint64_t)&v64, (uint64_t *)&unk_10091DD70);
  if (v64 != 2) {
    xpc_dictionary_set_BOOL(v1, v29, v64 & 1);
  }
  sub_100096408(v0 + 66, (uint64_t)&v32, (uint64_t *)&unk_10091DD80);
  sub_100096408((uint64_t)&v32, (uint64_t)&v65, (uint64_t *)&unk_10091DD80);
  switch(v65)
  {
    case 1:
      goto LABEL_90;
    case 2:
      goto LABEL_92;
    case 3:
      goto LABEL_94;
    case 4:
      goto LABEL_96;
    case 5:
      goto LABEL_100;
    case 6:
      goto LABEL_98;
    case 7:
      return v1;
    default:
      uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_STATIONARY;
      if (XPC_ACTIVITY_MOTION_STATE_STATIONARY) {
        goto LABEL_101;
      }
      __break(1u);
LABEL_90:
      uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_WALKING;
      if (!XPC_ACTIVITY_MOTION_STATE_WALKING)
      {
        __break(1u);
LABEL_92:
        uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_RUNNING;
        if (!XPC_ACTIVITY_MOTION_STATE_RUNNING)
        {
          __break(1u);
LABEL_94:
          uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_CYCLING;
          if (!XPC_ACTIVITY_MOTION_STATE_CYCLING)
          {
            __break(1u);
LABEL_96:
            uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE;
            if (!XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE)
            {
              __break(1u);
LABEL_98:
              uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE_STATIONARY;
              if (!XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE_STATIONARY)
              {
                __break(1u);
LABEL_100:
                uint64_t v30 = (const char *)XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE_MOVING;
                if (!XPC_ACTIVITY_MOTION_STATE_AUTOMOTIVE_MOVING) {
                  goto LABEL_132;
                }
              }
            }
          }
        }
      }
LABEL_101:
      if (!XPC_ACTIVITY_DESIRED_MOTION_STATE) {
        goto LABEL_131;
      }
      xpc_dictionary_set_string(v1, XPC_ACTIVITY_DESIRED_MOTION_STATE, v30);
      return v1;
  }
}

uint64_t sub_10059A750@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 112) != 0;
  return result;
}

uint64_t sub_10059A764()
{
  uint64_t v0 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v0);
  sub_10059C108((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  uint64_t result = UnfairLock.init(options:)();
  qword_10091DC50 = result;
  return result;
}

void sub_10059A8A4()
{
  qword_10091DC58 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_10059A8B8(uint64_t a1)
{
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091DC30);
  long long v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Clearing l_pendingCriteria", v5, 2u);
    swift_slowDealloc();
  }

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;

  return swift_bridgeObjectRelease();
}

void sub_10059A9C0(char a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = &qword_100907000;
  if (xpc_activity_set_completion_status())
  {
    if (qword_100907958 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091DC30);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = a4;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v15 = 0xD000000000000030;
      unint64_t v16 = 0x80000001007C7430;
      switch(a3)
      {
        case 1:
          uint64_t v15 = 0xD00000000000002DLL;
          int64_t v17 = "com.apple.remindd.ICCloudConfigurationUpdater";
          goto LABEL_15;
        case 2:
          uint64_t v15 = 0xD000000000000034;
          int64_t v17 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
          goto LABEL_15;
        case 3:
          uint64_t v15 = 0xD000000000000031;
          int64_t v17 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_15:
          unint64_t v16 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          break;
        case 4:
          unint64_t v16 = 0x80000001007C7520;
          uint64_t v15 = 0xD00000000000001BLL;
          break;
        default:
          break;
      }
      sub_1000C51B8(v15, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      unint64_t v24 = 0xE800000000000000;
      uint64_t v25 = 0x6574656C706D6F63;
      a4 = v13;
      switch(a1)
      {
        case 1:
          unint64_t v24 = 0xEB000000006B726FLL;
          uint64_t v25 = 0x57676E69646E6570;
          break;
        case 2:
          unint64_t v24 = 0xE600000000000000;
          uint64_t v25 = 0x6B726F576F6ELL;
          break;
        case 3:
          unint64_t v24 = 0xE500000000000000;
          uint64_t v25 = 0x726F727265;
          break;
        default:
          break;
      }
      sub_1000C51B8(v25, v24, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDDynamicXPCActivity RUN END {identifier: %{public}s, completionStatus: %{public}s}", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = &qword_100907000;
      goto LABEL_27;
    }
LABEL_12:

    goto LABEL_27;
  }
  if (qword_100907958 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10091DC30);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (!os_log_type_enabled(v11, v19)) {
    goto LABEL_12;
  }
  unint64_t v20 = (uint8_t *)swift_slowAlloc();
  uint64_t v30 = swift_slowAlloc();
  *(_DWORD *)unint64_t v20 = 136446210;
  uint64_t v21 = 0xD000000000000030;
  unint64_t v22 = 0x80000001007C7430;
  switch(a3)
  {
    case 1:
      uint64_t v21 = 0xD00000000000002DLL;
      unint64_t v23 = "com.apple.remindd.ICCloudConfigurationUpdater";
      goto LABEL_24;
    case 2:
      uint64_t v21 = 0xD000000000000034;
      unint64_t v23 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
      goto LABEL_24;
    case 3:
      uint64_t v21 = 0xD000000000000031;
      unint64_t v23 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_24:
      unint64_t v22 = (unint64_t)(v23 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v22 = 0x80000001007C7520;
      uint64_t v21 = 0xD00000000000001BLL;
      break;
    default:
      break;
  }
  sub_1000C51B8(v21, v22, &v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v11, v19, "RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_DONE) failed {identifier: %{public}s}", v20, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_27:
  if (v9[299] != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_10091DC30);
  swift_bridgeObjectRetain_n();
  int64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    xpc_object_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)xpc_object_t v29 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a4, a5, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "os_transaction RELEASE {name: %{public}s}", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10059B008()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDDynamicXPCActivity()
{
  return self;
}

uint64_t destroy for RDDynamicXPCActivity.Criteria()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 57) = *(void *)(a2 + 57);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDDynamicXPCActivity.Criteria(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  *(unsigned char *)(a1 + 42) = *((unsigned char *)a2 + 42);
  *(unsigned char *)(a1 + 43) = *((unsigned char *)a2 + 43);
  *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
  uint64_t v5 = *((void *)a2 + 6);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
  *(unsigned char *)(a1 + 58) = *((unsigned char *)a2 + 58);
  *(unsigned char *)(a1 + 59) = *((unsigned char *)a2 + 59);
  *(unsigned char *)(a1 + 60) = *((unsigned char *)a2 + 60);
  *(unsigned char *)(a1 + 61) = *((unsigned char *)a2 + 61);
  *(unsigned char *)(a1 + 62) = *((unsigned char *)a2 + 62);
  *(unsigned char *)(a1 + 63) = *((unsigned char *)a2 + 63);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(unsigned char *)(a1 + 65) = *((unsigned char *)a2 + 65);
  *(unsigned char *)(a1 + 66) = *((unsigned char *)a2 + 66);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for RDDynamicXPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 57) = *(_DWORD *)(a2 + 57);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(unsigned char *)(a1 + 62) = *(unsigned char *)(a2 + 62);
  *(unsigned char *)(a1 + 63) = *(unsigned char *)(a2 + 63);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.Criteria(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.Criteria(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Criteria()
{
  return &type metadata for RDDynamicXPCActivity.Criteria;
}

unsigned char *storeEnumTagSinglePayload for RDDynamicXPCActivity.CompletionStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059B3D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.CompletionStatus()
{
  return &type metadata for RDDynamicXPCActivity.CompletionStatus;
}

unsigned char *storeEnumTagSinglePayload for RDDynamicXPCActivity.Identifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059B4DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Identifier()
{
  return &type metadata for RDDynamicXPCActivity.Identifier;
}

uint64_t sub_10059B514()
{
  return sub_1000967F4(&qword_10091DD20, &qword_10091DD28);
}

unint64_t sub_10059B554()
{
  unint64_t result = qword_10091DD30;
  if (!qword_10091DD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DD30);
  }
  return result;
}

Swift::Int sub_10059B5A8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_10059BC44((uint64_t)v8, (uint64_t)v9) & 1;
}

Swift::Int sub_10059B604()
{
  return Hasher._finalize()();
}

uint64_t sub_10059B6E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10059B7A4()
{
  return Hasher._finalize()();
}

unint64_t sub_10059B87C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10059C19C(*a1);
  *a2 = result;
  return result;
}

void sub_10059B8AC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x6574656C706D6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB000000006B726FLL;
      uint64_t v3 = 0x57676E69646E6570;
      goto LABEL_3;
    case 2:
      *a1 = 0x6B726F576F6ELL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x726F727265;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10059B948(unsigned __int8 *a1, char *a2)
{
  return sub_1002F3AF8(*a1, *a2);
}

unint64_t sub_10059B958()
{
  unint64_t result = qword_10091DD38;
  if (!qword_10091DD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DD38);
  }
  return result;
}

BOOL sub_10059B9AC(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return sub_10059BBB0((uint64_t)&v5, (uint64_t)&v7);
}

uint64_t sub_10059B9F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10059BA24(uint64_t a1)
{
  return a1;
}

Swift::Int sub_10059BA50@<X0>(unsigned char *a1@<X8>)
{
  return sub_100598DD4(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10059BA58()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10059BA90()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

void sub_10059BAD0(_xpc_activity_s *a1)
{
  sub_100598F88(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), (long long *)(v1 + 32));
}

uint64_t sub_10059BAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10059BAF0()
{
  return swift_release();
}

uint64_t sub_10059BAFC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10059BB0C()
{
  return sub_100599D18(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10059BB14()
{
  return sub_10059A8B8(v0);
}

uint64_t sub_10059BB1C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10059BB64(char a1)
{
  sub_10059A9C0(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10059BB78(uint64_t a1)
{
  return a1;
}

BOOL sub_10059BBB0(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) == 0)
  {
    char v3 = *(unsigned char *)(a2 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      if (!*(unsigned char *)(a2 + 24)) {
        return 0;
      }
    }
    else
    {
      if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
        char v3 = 1;
      }
      if (v3) {
        return 0;
      }
    }
    char v4 = *(unsigned char *)(a2 + 40);
    if ((*(unsigned char *)(a1 + 40) & 1) == 0)
    {
      if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        char v4 = 1;
      }
      return (v4 & 1) == 0;
    }
    if (*(unsigned char *)(a2 + 40)) {
      return 1;
    }
  }
  return 0;
}

Swift::Int sub_10059BC44(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = (unsigned __int16)v3 & 0xFF00;
  if ((v2 & 0xFF00) == 0x200)
  {
    if (v4 != 512) {
      return 0;
    }
  }
  else
  {
    if (v4 == 512) {
      return 0;
    }
    uint64_t v8 = *(void *)(a2 + 24);
    if (v2)
    {
      if ((v3 & 1) == 0) {
        return 0;
      }
    }
    else if ((v3 & 1) != 0 || *(double *)a1 != *(double *)a2)
    {
      return 0;
    }
    if (((v2 >> 8) & 1) != ((v3 >> 8) & 1)) {
      return 0;
    }
    if (*(void *)(a1 + 24))
    {
      if ((v8 & 1) == 0) {
        return 0;
      }
    }
    else if ((v8 & 1) != 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 40))
    {
      if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 40) & 1) != 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
    {
      return 0;
    }
  }
  int v5 = *(unsigned __int8 *)(a1 + 41);
  int v6 = *(unsigned __int8 *)(a2 + 41);
  if (v5 == 2)
  {
    if (v6 != 2) {
      return 0;
    }
  }
  else if (v6 == 2 || ((v6 ^ v5) & 1) != 0)
  {
    return 0;
  }
  int v9 = *(unsigned __int8 *)(a1 + 42);
  int v10 = *(unsigned __int8 *)(a2 + 42);
  if (v9 == 2)
  {
    if (v10 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v11 = (v9 & 1) == 0;
    if (v10 == 2 || ((v11 ^ v10) & 1) == 0) {
      return 0;
    }
  }
  int v12 = *(unsigned __int8 *)(a1 + 43);
  int v13 = *(unsigned __int8 *)(a2 + 43);
  if (v12 == 2)
  {
    if (v13 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v14 = (v12 & 1) == 0;
    if (v13 == 2 || ((v14 ^ v13) & 1) == 0) {
      return 0;
    }
  }
  int v15 = *(unsigned __int8 *)(a1 + 44);
  int v16 = *(unsigned __int8 *)(a2 + 44);
  if (v15 == 2)
  {
    if (v16 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v17 = (v15 & 1) == 0;
    if (v16 == 2 || ((v17 ^ v16) & 1) == 0) {
      return 0;
    }
  }
  char v18 = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      char v18 = 1;
    }
    if (v18) {
      return 0;
    }
  }
  int v19 = *(unsigned __int8 *)(a1 + 57);
  int v20 = *(unsigned __int8 *)(a2 + 57);
  if (v19 == 2)
  {
    if (v20 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v21 = (v19 & 1) == 0;
    if (v20 == 2 || ((v21 ^ v20) & 1) == 0) {
      return 0;
    }
  }
  int v22 = *(unsigned __int8 *)(a1 + 58);
  int v23 = *(unsigned __int8 *)(a2 + 58);
  if (v22 == 2)
  {
    if (v23 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v24 = (v22 & 1) == 0;
    if (v23 == 2 || ((v24 ^ v23) & 1) == 0) {
      return 0;
    }
  }
  int v25 = *(unsigned __int8 *)(a1 + 59);
  int v26 = *(unsigned __int8 *)(a2 + 59);
  if (v25 == 2)
  {
    if (v26 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v27 = (v25 & 1) == 0;
    if (v26 == 2 || ((v27 ^ v26) & 1) == 0) {
      return 0;
    }
  }
  int v28 = *(unsigned __int8 *)(a1 + 60);
  int v29 = *(unsigned __int8 *)(a2 + 60);
  if (v28 == 2)
  {
    if (v29 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v30 = (v28 & 1) == 0;
    if (v29 == 2 || ((v30 ^ v29) & 1) == 0) {
      return 0;
    }
  }
  int v31 = *(unsigned __int8 *)(a1 + 61);
  int v32 = *(unsigned __int8 *)(a2 + 61);
  if (v31 == 2)
  {
    if (v32 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v33 = (v31 & 1) == 0;
    if (v32 == 2 || ((v33 ^ v32) & 1) == 0) {
      return 0;
    }
  }
  int v34 = *(unsigned __int8 *)(a1 + 62);
  int v35 = *(unsigned __int8 *)(a2 + 62);
  if (v34 == 2)
  {
    if (v35 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v36 = (v34 & 1) == 0;
    if (v35 == 2 || ((v36 ^ v35) & 1) == 0) {
      return 0;
    }
  }
  int v37 = *(unsigned __int8 *)(a1 + 63);
  int v38 = *(unsigned __int8 *)(a2 + 63);
  if (v37 == 2)
  {
    if (v38 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v39 = (v37 & 1) == 0;
    if (v38 == 2 || ((v39 ^ v38) & 1) == 0) {
      return 0;
    }
  }
  if ((*(unsigned __int8 *)(a1 + 64) ^ *(unsigned __int8 *)(a2 + 64))) {
    return 0;
  }
  int v40 = *(unsigned __int8 *)(a1 + 65);
  int v41 = *(unsigned __int8 *)(a2 + 65);
  if (v40 == 2)
  {
    if (v41 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v42 = (v40 & 1) == 0;
    if (v41 == 2 || ((v42 ^ v41) & 1) == 0) {
      return 0;
    }
  }
  int v43 = *(unsigned __int8 *)(a1 + 66);
  int v44 = *(unsigned __int8 *)(a2 + 66);
  if (v43 != 7)
  {
    if (v44 != 7 && v43 == v44) {
      return sub_100596A7C(*(void *)(a1 + 72), *(void *)(a2 + 72));
    }
    return 0;
  }
  if (v44 != 7) {
    return 0;
  }
  return sub_100596A7C(*(void *)(a1 + 72), *(void *)(a2 + 72));
}

uint64_t sub_10059BFD0()
{
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  return swift_bridgeObjectRelease();
}

void sub_10059BFF0()
{
  sub_10059783C(*(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_10059BFFC()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10059C034(_xpc_activity_s *a1)
{
  sub_100597AF4(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10059C044()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10059C084()
{
  sub_100598724(*(_xpc_activity_s **)(v0 + 24));
}

uint64_t sub_10059C0AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10059C0BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10059C0FC()
{
  return sub_100597374(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_10059C108(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10059C150(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B7390, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_10059C19C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B7450, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for RDDynamicXPCActivity.ProtectionClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059C2B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.ProtectionClass()
{
  return &type metadata for RDDynamicXPCActivity.ProtectionClass;
}

unsigned char *storeEnumTagSinglePayload for RDDynamicXPCActivity.MotionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059C3B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.MotionState()
{
  return &type metadata for RDDynamicXPCActivity.MotionState;
}

unsigned char *storeEnumTagSinglePayload for RDDynamicXPCActivity.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10059C4BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.Priority()
{
  return &type metadata for RDDynamicXPCActivity.Priority;
}

uint64_t getEnumTagSinglePayload for RDDynamicXPCActivity.IntervalInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDynamicXPCActivity.IntervalInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDynamicXPCActivity.IntervalInfo()
{
  return &type metadata for RDDynamicXPCActivity.IntervalInfo;
}

unint64_t sub_10059C5AC()
{
  unint64_t result = qword_10091DD90;
  if (!qword_10091DD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DD90);
  }
  return result;
}

unint64_t sub_10059C604()
{
  unint64_t result = qword_10091DD98;
  if (!qword_10091DD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DD98);
  }
  return result;
}

unint64_t sub_10059C65C()
{
  unint64_t result = qword_10091DDA0;
  if (!qword_10091DDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091DDA0);
  }
  return result;
}

uint64_t sub_10059C6D4(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, double a4)
{
  int v5 = (objc_class *)v4;
  id v327 = a1;
  int v9 = *v4;
  v314 = (void *)type metadata accessor for RDPublicTemplate();
  uint64_t v298 = *(v314 - 1);
  __chkstk_darwin(v314);
  uint64_t v305 = &v292[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v301 = &v292[-v12];
  uint64_t v299 = v13;
  __chkstk_darwin(v14);
  v306 = (uint64_t *)&v292[-v15];
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v16 - 8);
  unint64_t v313 = &v292[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  os_log_t v311 = (os_log_t)&v292[-v19];
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v312 = &v292[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v315 = &v292[-v24];
  uint64_t v297 = v25;
  __chkstk_darwin(v26);
  unint64_t v318 = &v292[-v27];
  uint64_t v28 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v295 = *(void *)(v28 - 8);
  __chkstk_darwin(v28 - 8);
  uint64_t v304 = &v292[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v30);
  id v310 = &v292[-v31];
  uint64_t v296 = v32;
  __chkstk_darwin(v33);
  v317 = &v292[-v34];
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v334 = *(void **)(v35 - 8);
  __chkstk_darwin(v35);
  id v309 = &v292[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v37);
  uint64_t v302 = &v292[-v38];
  __chkstk_darwin(v39);
  v326 = &v292[-v40];
  __chkstk_darwin(v41);
  uint64_t v303 = &v292[-v42];
  __chkstk_darwin(v43);
  uint64_t v307 = &v292[-v44];
  __chkstk_darwin(v45);
  uint64_t v300 = &v292[-v46];
  __chkstk_darwin(v47);
  os_log_type_t v49 = &v292[-v48];
  __chkstk_darwin(v50);
  uint64_t v333 = &v292[-v51];
  uint64_t v294 = v52;
  __chkstk_darwin(v53);
  uint64_t v335 = &v292[-v54];
  if (qword_100907970 != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  char v56 = (void *)sub_10008E2DC(v55, (uint64_t)qword_10091DDB0);
  swift_retain_n();
  v325 = v56;
  char v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  int v59 = v58;
  BOOL v60 = os_log_type_enabled(v57, v58);
  uint64_t v316 = v21;
  v332 = v9;
  uint64_t v336 = v35;
  uint64_t v323 = a3;
  uint64_t v321 = a2;
  v328 = v49;
  if (v60)
  {
    uint64_t v61 = swift_slowAlloc();
    LODWORD(v330) = v59;
    uint64_t v62 = v61;
    char v63 = (void *)swift_slowAlloc();
    v331 = (void *)swift_slowAlloc();
    v339 = v331;
    *(_DWORD *)uint64_t v62 = 136446978;
    v338[0] = v9;
    swift_getMetatypeMetadata();
    uint64_t v64 = String.init<A>(describing:)();
    v338[0] = (id)sub_1000C51B8(v64, v65, (uint64_t *)&v339);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v66 = v5;
    *(_WORD *)(v62 + 12) = 2114;
    uint64_t v67 = v20;
    uint64_t v68 = (void *)*((void *)v5 + 2);
    v338[0] = v68;
    id v69 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v63 = v68;
    uint64_t v20 = v67;
    swift_release_n();
    *(_WORD *)(v62 + 22) = 2114;
    char v70 = (void *)*((void *)v5 + 3);
    v338[0] = v70;
    id v71 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v63[1] = v70;
    int v5 = v66;
    swift_release_n();
    *(_WORD *)(v62 + 32) = 2048;
    char v72 = (void *)*((void *)v66 + 10);
    swift_release();
    v338[0] = v72;
    os_log_type_t v49 = v328;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v330, "%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}", (uint8_t *)v62, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v35 = v336;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  v331 = (void *)*((void *)v5 + 2);
  v324 = (void *)*((void *)v5 + 3);
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  double v73 = (void (*)(unsigned char *, uint64_t))v334[1];
  v330 = v334 + 1;
  v329 = v73;
  v73(v49, v35);
  int v74 = *((unsigned __int8 *)v5 + 72);
  uint64_t v320 = swift_allocObject();
  *(unsigned char *)(v320 + 16) = 0;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  v338[0] = (id)inited;
  specialized Array._endMutation()();
  unint64_t v76 = (unint64_t)v338[0];
  v339 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 2, 0);
  id v77 = v339;
  int v293 = v74;
  if ((v76 & 0xC000000000000001) != 0)
  {
    uint64_t v78 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v78 = *(void *)(v76 + 32);
    swift_retain();
  }
  uint64_t v79 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v80)
  {
    uint64_t v81 = v79;
    uint64_t v82 = v80;
    swift_release();
    unint64_t v84 = v77[2];
    unint64_t v83 = v77[3];
    if (v84 >= v83 >> 1)
    {
      sub_1001DE058(v83 > 1, v84 + 1, 1);
      id v77 = v339;
    }
    v77[2] = v84 + 1;
    uint64_t v85 = &v77[2 * v84];
    v85[4] = v81;
    v85[5] = v82;
    if ((v76 & 0xC000000000000001) != 0)
    {
      uint64_t v78 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v78 = *(void *)(v76 + 40);
      swift_retain();
    }
    uint64_t v86 = v336;
    uint64_t v87 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v88)
    {
      uint64_t v89 = v87;
      uint64_t v90 = v88;
      swift_release();
      v339 = v77;
      unint64_t v92 = v77[2];
      unint64_t v91 = v77[3];
      uint64_t v93 = v331;
      if (v92 >= v91 >> 1)
      {
        sub_1001DE058(v91 > 1, v92 + 1, 1);
        uint64_t v93 = v331;
        id v77 = v339;
      }
      v77[2] = v92 + 1;
      id v94 = &v77[2 * v92];
      v94[4] = v89;
      v94[5] = v90;
      swift_bridgeObjectRelease();
      id v95 = v327;
      uint64_t v96 = sub_1002E3C78(v93, (uint64_t)v327, (Class)v77, 0);
      v322 = v5;
      uint64_t v319 = 0;
      unint64_t v97 = (void *)v96;
      swift_release();
      id v98 = [v97 mostRecentPublicLinkUpdateRequestDate];
      if (v98)
      {
        BOOL v99 = v98;
        uint64_t v100 = (uint64_t)v310;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v101 = 0;
        uint64_t v102 = v316;
      }
      else
      {
        uint64_t v101 = 1;
        uint64_t v102 = v316;
        uint64_t v100 = (uint64_t)v310;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v334[7])(v100, v101, 1, v86);
      sub_1000CAAB4(v100, (uint64_t)v317);
      id v103 = [v97 publicLinkURLUUID];
      if (v103)
      {
        uint64_t v104 = v103;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        os_log_t v105 = v311;
        (*(void (**)(void))(v102 + 32))();
        uint64_t v106 = v20;
        BOOL v107 = *(void (**)(os_log_t, void, uint64_t, uint64_t))(v102 + 56);
        v107(v105, 0, 1, v106);
        uint64_t v108 = v106;
        LODWORD(v310) = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(v102 + 48))(v105, 1, v106) != 1;
      }
      else
      {
        uint64_t v109 = v20;
        BOOL v107 = *(void (**)(os_log_t, void, uint64_t, uint64_t))(v102 + 56);
        os_log_t v105 = v311;
        uint64_t v108 = v109;
        ((void (*)(os_log_t, uint64_t, uint64_t))v107)(v311, 1, 1);
        LODWORD(v310) = 0;
      }
      sub_1000966BC((uint64_t)v105, (uint64_t *)&unk_100909E50);
      id v110 = [v97 publicLinkURLUUID];
      if (v110)
      {
        uint64_t v111 = v110;
        int64_t v112 = v315;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v113 = *(void **)(v102 + 32);
        uint64_t v114 = (uint64_t)v313;
        ((void (*)(NSObject *, unsigned char *, uint64_t))v113)(v313, v112, v108);
        v107((os_log_t)v114, 0, 1, v108);
        uint64_t v115 = v108;
        int v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v114, 1, v108);
        uint64_t v117 = v314;
        if (v116 != 1)
        {
          id v118 = v312;
          ((void (*)(void *, uint64_t, uint64_t))v113)(v312, v114, v115);
          uint64_t v119 = v118;
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v114 = (uint64_t)v313;
        v107(v313, 1, 1, v108);
        uint64_t v115 = v108;
        uint64_t v117 = v314;
      }
      uint64_t v119 = v312;
      UUID.init()();
      sub_1000966BC(v114, (uint64_t *)&unk_100909E50);
      unint64_t v113 = *(void **)(v102 + 32);
LABEL_29:
      uint64_t v120 = v336;
      v314 = v113;
      ((void (*)(unsigned char *, void *, uint64_t))v113)(v318, v119, v115);
      id v121 = v328;
      static Date.now.getter();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      v329(v121, v120);
      [v97 setMostRecentPublicLinkUpdateRequestDate:isa];

      v338[0] = 0;
      if (![v95 save:v338])
      {
        id v130 = v338[0];
        uint64_t v131 = _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v132 = v326;
        uint64_t v133 = v331;
        uint64_t v134 = v332;
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v334[2])(v326, v335, v120);
        id v135 = v133;
        swift_errorRetain();
        id v136 = v135;
        swift_errorRetain();
        uint64_t v137 = Logger.logObject.getter();
        os_log_type_t v138 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v137, v138))
        {
          uint64_t v139 = swift_slowAlloc();
          int64_t v140 = (void *)swift_slowAlloc();
          uint64_t v308 = v115;
          unint64_t v141 = v140;
          v331 = v140;
          uint64_t v334 = (void *)swift_slowAlloc();
          v339 = v334;
          *(_DWORD *)uint64_t v139 = 136446978;
          v338[0] = v134;
          swift_getMetatypeMetadata();
          uint64_t v142 = String.init<A>(describing:)();
          v338[0] = (id)sub_1000C51B8(v142, v143, (uint64_t *)&v339);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v139 + 12) = 2114;
          v338[0] = v136;
          id v144 = v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v141 = v136;

          *(_WORD *)(v139 + 22) = 2082;
          swift_getErrorValue();
          uint64_t v145 = Error.rem_errorDescription.getter();
          v338[0] = (id)sub_1000C51B8(v145, v146, (uint64_t *)&v339);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v139 + 32) = 2048;
          uint64_t v147 = v328;
          Date.init()();
          unint64_t v148 = v326;
          Date.timeIntervalSince(_:)();
          uint64_t v150 = v149;
          uint64_t v151 = v147;
          char v152 = v329;
          v329(v151, v336);
          v338[0] = v150;
          uint64_t v134 = v332;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v152(v148, v336);
          os_log_type_t v153 = v138;
          id v154 = v152;
          _os_log_impl((void *)&_mh_execute_header, v137, v153, "%{public}s: Failed to fetch template {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v139, 0x2Au);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          uint64_t v115 = v308;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v120 = v336;
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          id v154 = v329;
          v329(v132, v120);
        }

        uint64_t v155 = v323;
        uint64_t v156 = v321;
        uint64_t v157 = v320;
        swift_errorRetain();
        uint64_t v290 = v155;
        long long v158 = v335;
        sub_10059EF58(v131, 1, v157, v136, v324, (uint64_t)v322, (uint64_t)v335, v156, v290, v134);
        swift_errorRelease();
        swift_errorRelease();
        v154(v158, v120);
        v154(v333, v120);
        if (!v319)
        {
          (*(void (**)(unsigned char *, uint64_t))(v316 + 8))(v318, v115);
          sub_1000966BC((uint64_t)v317, (uint64_t *)&unk_100909A40);
        }
        return swift_release();
      }
      id v123 = v338[0];

      uint64_t v124 = (uint64_t)v95;
      id v126 = (objc_class *)sub_1002E4598();
      uint64_t v127 = (void (*)(void, void, void))v319;
      uint64_t v128 = sub_1002E3C78(v331, v124, v126, 0);
      uint64_t v129 = (uint64_t)v127;
      uint64_t v308 = v115;
      if (!v127)
      {
        uint64_t v160 = (void *)v128;
        swift_bridgeObjectRelease();
        uint64_t v161 = v306;
        sub_10051B034((uint64_t)v318, (uint64_t)v333, v324, *((char **)v5 + 10), v306);

        uint64_t v234 = v301;
        sub_1003E17D0((uint64_t)v161, (uint64_t)v301);
        v235 = (char *)v334[2];
        v236 = v300;
        v326 = v334 + 2;
        uint64_t v319 = v235;
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v235)(v300, v335, v120);
        int64_t v237 = v331;
        Swift::Int v238 = Logger.logObject.getter();
        os_log_type_t v239 = static os_log_type_t.default.getter();
        LODWORD(v325) = v239;
        BOOL v240 = os_log_type_enabled(v238, v239);
        v331 = v237;
        if (v240)
        {
          uint64_t v241 = swift_slowAlloc();
          unint64_t v313 = swift_slowAlloc();
          uint64_t v312 = (void *)swift_slowAlloc();
          v338[0] = v312;
          *(_DWORD *)uint64_t v241 = 136447234;
          os_log_t v311 = v238;
          uint64_t v242 = sub_1000D82B8();
          v339 = (void *)sub_1000C51B8(v242, v243, (uint64_t *)v338);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v241 + 12) = 2114;
          v339 = v237;
          unint64_t v244 = (objc_class *)v237;
          int64_t v245 = v237;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v313->Class isa = v244;

          *(_WORD *)(v241 + 22) = 2082;
          id v309 = (unsigned char *)(v241 + 24);
          uint64_t v246 = v301;
          Class v247 = sub_1000D5500();
          id v248 = [(objc_class *)v247 recordName];

          uint64_t v249 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v250 = v5;
          unint64_t v252 = v251;

          uint64_t v161 = v306;
          v339 = (void *)sub_1000C51B8(v249, v252, (uint64_t *)v338);
          uint64_t v307 = &v340;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          int v5 = v250;
          uint64_t v120 = v336;
          swift_bridgeObjectRelease();
          sub_1003589D0((uint64_t)v246);
          *(_WORD *)(v241 + 32) = 2082;
          uint64_t v253 = Bool.yesno.getter();
          v339 = (void *)sub_1000C51B8(v253, v254, (uint64_t *)v338);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v241 + 42) = 2048;
          id v309 = (unsigned char *)(v241 + 44);
          v255 = v328;
          Date.init()();
          uint64_t v256 = v300;
          Date.timeIntervalSince(_:)();
          int v258 = v257;
          v259 = v329;
          v329(v255, v120);
          v339 = v258;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v259(v256, v120);
          Swift::Int v238 = v311;
          _os_log_impl((void *)&_mh_execute_header, v311, (os_log_type_t)v325, "%{public}s: Generated content for template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v241, 0x34u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_1003589D0((uint64_t)v234);
          v329(v236, v120);
        }

        uint64_t v260 = v316;
        uint64_t v261 = v299;
        uint64_t v262 = v298;
        [v327 reset];
        v325 = (void *)*((void *)v5 + 7);
        uint64_t v312 = (void *)*((void *)v5 + 8);
        unint64_t v313 = sub_1000C0DE0((void *)v5 + 4, (uint64_t)v325);
        v338[3] = v117;
        v338[4] = &off_1008B8DD8;
        uint64_t v263 = sub_1000C1FE8((uint64_t *)v338);
        sub_1003E17D0((uint64_t)v161, (uint64_t)v263);
        sub_1003E17D0((uint64_t)v161, (uint64_t)v305);
        v264 = (void (*)(unsigned char *, unsigned char *, uint64_t))v319;
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v319)(v328, v335, v120);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v260 + 16))(v315, v318, v115);
        v264(v303, v333, v120);
        sub_1000CAA4C((uint64_t)v317, (uint64_t)v304);
        unint64_t v265 = (*(unsigned __int8 *)(v262 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80);
        uint64_t v266 = v265 + v261;
        uint64_t v267 = v334;
        uint64_t v268 = *((unsigned __int8 *)v334 + 80);
        uint64_t v269 = (v268 + v265 + v261 + 1) & ~v268;
        uint64_t v301 = (unsigned char *)((v294 + 7 + v269) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v270 = (unint64_t)&v301[*(unsigned __int8 *)(v260 + 80) + 8] & ~(unint64_t)*(unsigned __int8 *)(v260 + 80);
        unint64_t v271 = (v297 + v268 + v270) & ~v268;
        v326 = (unsigned char *)((v294 + 7 + v271) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v319 = (char *)((unint64_t)(v326 + 15) & 0xFFFFFFFFFFFFFFF8);
        os_log_t v311 = (os_log_t)((unint64_t)(v319 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v307 = (char *)(((unint64_t)&v311[1].isa + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v302 = (unsigned char *)((unint64_t)&v307[*(unsigned __int8 *)(v295 + 80) + 16] & ~(unint64_t)*(unsigned __int8 *)(v295 + 80));
        id v309 = &v302[v296];
        unint64_t v272 = (unint64_t)&v302[v296] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v273 = swift_allocObject();
        uint64_t v300 = (unsigned char *)(v272 + v273);
        unint64_t v274 = v331;
        *(void *)(v273 + 16) = v331;
        sub_1003E176C((uint64_t)v305, v273 + v265);
        *(unsigned char *)(v273 + v266) = (_BYTE)v310;
        v275 = (void (*)(uint64_t, unsigned char *, uint64_t))v267[4];
        uint64_t v276 = v336;
        v275(v273 + v269, v328, v336);
        id v277 = v327;
        *(void *)&v301[v273] = v327;
        ((void (*)(unint64_t, unsigned char *, uint64_t))v314)(v273 + v270, v315, v115);
        v275(v273 + v271, v303, v276);
        int64_t v278 = v324;
        *(void *)&v326[v273] = v324;
        *(void *)&v319[v273] = v320;
        *(Class *)((char *)&v311->isa + v273) = v322;
        v279 = (void (**)(uint64_t, uint64_t))&v307[v273];
        uint64_t v280 = (uint64_t)&v302[v273];
        v281 = (void (*)(uint64_t, uint64_t))v323;
        char *v279 = v321;
        v279[1] = v281;
        sub_1000CAAB4((uint64_t)v304, v280);
        v309[v273] = v293;
        *((void *)v300 + 1) = v332;
        Swift::Int v282 = v312;
        Swift::Int v283 = (void (*)(id *, uint64_t (*)(uint64_t, char), uint64_t, void *, void *, double))v312[1];
        swift_retain();
        id v284 = v274;
        id v285 = v277;
        id v286 = v278;
        swift_retain();
        swift_retain();
        v283(v338, sub_1005A2058, v273, v325, v282, a4);
        swift_release();
        sub_1003589D0((uint64_t)v306);
        sub_1000966BC((uint64_t)v317, (uint64_t *)&unk_100909A40);
        uint64_t v287 = v336;
        uint64_t v288 = v329;
        v329(v335, v336);
        (*(void (**)(unsigned char *, uint64_t))(v316 + 8))(v318, v308);
        v288(v333, v287);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v338);
        return swift_release();
      }
      swift_bridgeObjectRelease();
      v326 = 0;
      uint64_t v162 = v332;
      uint64_t v163 = (char *)v334[2];
      char v164 = v307;
      v334 += 2;
      uint64_t v319 = v163;
      ((void (*)(char *, unsigned char *, uint64_t))v163)(v307, v335, v120);
      unsigned int v165 = v331;
      swift_errorRetain();
      int64_t v166 = v165;
      swift_errorRetain();
      unint64_t v167 = Logger.logObject.getter();
      os_log_type_t v168 = static os_log_type_t.error.getter();
      BOOL v169 = os_log_type_enabled(v167, v168);
      v331 = v166;
      if (v169)
      {
        uint64_t v170 = swift_slowAlloc();
        uint64_t v171 = (void *)swift_slowAlloc();
        uint64_t v315 = (unsigned char *)swift_slowAlloc();
        v339 = v315;
        *(_DWORD *)uint64_t v170 = 136447234;
        v338[0] = v162;
        swift_getMetatypeMetadata();
        uint64_t v172 = String.init<A>(describing:)();
        v338[0] = (id)sub_1000C51B8(v172, v173, (uint64_t *)&v339);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v170 + 12) = 2114;
        v338[0] = v331;
        unint64_t v174 = v331;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v171 = v331;

        *(_WORD *)(v170 + 22) = 2082;
        uint64_t v175 = Bool.yesno.getter();
        v338[0] = (id)sub_1000C51B8(v175, v176, (uint64_t *)&v339);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v170 + 32) = 2082;
        swift_getErrorValue();
        uint64_t v177 = Error.rem_errorDescription.getter();
        v338[0] = (id)sub_1000C51B8(v177, v178, (uint64_t *)&v339);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v170 + 42) = 2048;
        v179 = v328;
        Date.init()();
        Date.timeIntervalSince(_:)();
        uint64_t v181 = v180;
        Swift::Int v182 = v329;
        v329(v179, v336);
        v338[0] = v181;
        int64_t v166 = v331;
        uint64_t v162 = v332;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v182(v164, v336);
        _os_log_impl((void *)&_mh_execute_header, v167, v168, "%{public}s: Failed to generate content for template's public link. {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v170, 0x34u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v120 = v336;
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        v329(v164, v120);
      }

      id v183 = v327;
      unint64_t v184 = v326;
      uint64_t v185 = sub_1002E3C78(v166, (uint64_t)v327, (Class)&off_1008B3040, 0);
      if (v184)
      {
        uint64_t v186 = (uint64_t)v184;
        swift_arrayDestroy();
      }
      else
      {
        int64_t v187 = (void *)v185;
        swift_arrayDestroy();
        uint64_t KeyPath = (NSURL *)swift_getKeyPath();
        sub_10015F5D0(KeyPath, (uint64_t)v317);
        swift_release();
        [v187 updateChangeCount];

        v338[0] = 0;
        unsigned __int8 v189 = [v183 save:v338];
        id v190 = v338[0];
        if (v189)
        {
          v191 = v302;
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v319)(v302, v335, v120);
          unint64_t v192 = v331;
          id v193 = v190;
          int v194 = Logger.logObject.getter();
          os_log_type_t v195 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v194, v195))
          {
            uint64_t v196 = swift_slowAlloc();
            v197 = (void *)swift_slowAlloc();
            v326 = v197;
            uint64_t v334 = (void *)swift_slowAlloc();
            v338[0] = v334;
            *(_DWORD *)uint64_t v196 = 136446978;
            uint64_t v198 = sub_1000D82B8();
            v339 = (void *)sub_1000C51B8(v198, v199, (uint64_t *)v338);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v196 + 12) = 2114;
            v339 = v192;
            v200 = v192;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v197 = v192;

            uint64_t v120 = v336;
            *(_WORD *)(v196 + 22) = 2082;
            uint64_t v201 = Bool.yesno.getter();
            v339 = (void *)sub_1000C51B8(v201, v202, (uint64_t *)v338);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v196 + 32) = 2048;
            int v203 = v328;
            Date.init()();
            uint64_t v204 = v302;
            Date.timeIntervalSince(_:)();
            v206 = v205;
            uint64_t v207 = v203;
            uint64_t v208 = v329;
            v329(v207, v120);
            v339 = v206;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v208(v204, v120);
            _os_log_impl((void *)&_mh_execute_header, v194, v195, "%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v196, 0x2Au);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            v209 = v208;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            v209 = v329;
            v329(v191, v120);
          }
LABEL_52:

          uint64_t v227 = v308;
          uint64_t v228 = v316;
          uint64_t v229 = v323;
          char v230 = v322;
          v231 = v321;
          uint64_t v232 = v320;
          [v327 reset];
          swift_errorRetain();
          uint64_t v291 = v229;
          uint64_t v233 = v335;
          sub_10059EF58(v129, 1, v232, v331, v324, (uint64_t)v230, (uint64_t)v335, v231, v291, v332);
          swift_errorRelease();
          swift_errorRelease();
          sub_1000966BC((uint64_t)v317, (uint64_t *)&unk_100909A40);
          v209(v233, v120);
          (*(void (**)(unsigned char *, uint64_t))(v228 + 8))(v318, v227);
          v209(v333, v120);
          return swift_release();
        }
        id v210 = v338[0];
        uint64_t v186 = _convertNSErrorToError(_:)();

        swift_willThrow();
        int64_t v166 = v331;
      }
      uint64_t v211 = v309;
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v319)(v309, v335, v120);
      uint64_t v212 = v166;
      int v194 = Logger.logObject.getter();
      os_log_type_t v213 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v194, v213))
      {
        uint64_t v214 = swift_slowAlloc();
        v325 = (void *)swift_slowAlloc();
        uint64_t v334 = (void *)swift_slowAlloc();
        v339 = v334;
        *(_DWORD *)uint64_t v214 = 136446978;
        v338[0] = v162;
        swift_getMetatypeMetadata();
        uint64_t v215 = String.init<A>(describing:)();
        v338[0] = (id)sub_1000C51B8(v215, v216, (uint64_t *)&v339);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v214 + 12) = 2114;
        v338[0] = v212;
        v217 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v325 = v212;

        *(_WORD *)(v214 + 22) = 2082;
        uint64_t v218 = Bool.yesno.getter();
        v338[0] = (id)sub_1000C51B8(v218, v219, (uint64_t *)&v339);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v214 + 32) = 2048;
        v220 = v328;
        Date.init()();
        v326 = (unsigned char *)v186;
        uint64_t v221 = v309;
        Date.timeIntervalSince(_:)();
        uint64_t v223 = v222;
        id v224 = v220;
        id v225 = v329;
        v329(v224, v336);
        v338[0] = v223;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v225(v221, v336);
        os_log_type_t v226 = v213;
        v209 = v225;
        _os_log_impl((void *)&_mh_execute_header, v194, v226, "%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v214, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v120 = v336;
        swift_slowDealloc();
      }
      else
      {

        v209 = v329;
        v329(v211, v120);
      }
      swift_errorRelease();
      goto LABEL_52;
    }
  }
  v338[0] = 0;
  v338[1] = (id)0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v289._object = (void *)0x80000001007CAF70;
  v289._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v289);
  uint64_t v337 = v78;
  sub_100094134(&qword_10090FF80);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10059EE90()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DDB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DDB0);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10059EF58(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9, NSObject *a10)
{
  uint64_t v63 = a1;
  uint64_t v64 = a8;
  os_log_t v62 = a10;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v61 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v54 - v20;
  swift_beginAccess();
  if (*(unsigned char *)(a3 + 16))
  {
    if (qword_100907970 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10091DDB0);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v67[0] = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446210;
      os_log_t v66 = v62;
      swift_getMetatypeMetadata();
      uint64_t v26 = String.init<A>(describing:)();
      os_log_t v66 = (os_log_t)sub_1000C51B8(v26, v27, (uint64_t *)v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s: Attempted to call completion more than once", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v60 = a9;
    uint64_t v28 = a2 & 1;
    swift_beginAccess();
    *(unsigned char *)(a3 + 16) = 1;
    if (qword_100907970 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_10091DDB0);
    uint64_t v59 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, a7, v16);
    id v30 = a4;
    id v31 = a5;
    swift_retain_n();
    uint64_t v32 = v30;
    uint64_t v33 = v31;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      unsigned int v58 = v28;
      uint64_t v38 = v37;
      uint64_t v54 = (void *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v65 = v57;
      *(_DWORD *)uint64_t v38 = 136447234;
      int v56 = v36;
      v67[0] = v62;
      swift_getMetatypeMetadata();
      uint64_t v39 = String.init<A>(describing:)();
      os_log_t v62 = v34;
      v67[0] = (os_log_t)sub_1000C51B8(v39, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2114;
      v67[0] = v32;
      uint64_t v41 = v32;
      uint64_t v55 = v16;
      uint64_t v42 = v21;
      uint64_t v43 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v44 = v54;
      *uint64_t v54 = v32;

      *(_WORD *)(v38 + 22) = 2114;
      v67[0] = v33;
      uint64_t v45 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v44[1] = v33;

      *(_WORD *)(v38 + 32) = 2048;
      os_log_t v46 = *(os_log_t *)(a6 + 80);
      swift_release();
      v67[0] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v38 + 42) = 2048;
      uint64_t v47 = v61;
      Date.init()();
      Date.timeIntervalSince(_:)();
      os_log_t v49 = v48;
      uint64_t v50 = *(void (**)(char *, uint64_t))(v59 + 8);
      uint64_t v51 = v47;
      uint64_t v52 = v55;
      v50(v51, v55);
      v67[0] = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v50(v42, v52);
      os_log_t v53 = v62;
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v56, "%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}", (uint8_t *)v38, 0x34u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v28 = v58;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v21, v16);
    }
    v64(v63, v28);
  }
}

uint64_t sub_10059F57C(uint64_t a1, int a2, void *a3, uint64_t a4, int a5, unint64_t a6, void *a7, unint64_t a8, unint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  unint64_t v75 = a8;
  id v90 = a7;
  unint64_t v73 = a6;
  int v80 = a5;
  uint64_t v91 = a1;
  id v92 = a3;
  int v78 = a2;
  uint64_t v79 = a11;
  int v86 = a16;
  uint64_t v82 = a12;
  uint64_t v83 = a14;
  uint64_t v84 = a13;
  uint64_t v85 = a17;
  unint64_t v74 = a15;
  uint64_t v81 = a10;
  unint64_t v72 = a9;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v76 = *(void *)(v18 - 8);
  uint64_t v77 = *(void *)(v76 + 64);
  __chkstk_darwin(v18 - 8);
  uint64_t v89 = (uint64_t)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v87 = *(void *)(v20 - 8);
  uint64_t v88 = v20;
  uint64_t v21 = *(void *)(v87 + 64);
  __chkstk_darwin(v20);
  char v70 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  __chkstk_darwin(v22);
  id v71 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v66 - v26;
  id v69 = (char *)&v66 - v26;
  uint64_t v28 = type metadata accessor for RDPublicTemplate();
  uint64_t v66 = *(void *)(v28 - 8);
  uint64_t v29 = *(void *)(v66 + 64);
  __chkstk_darwin(v28 - 8);
  uint64_t v68 = (uint64_t)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003E17D0(a4, v68);
  id v30 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
  id v31 = v27;
  uint64_t v32 = v22;
  uint64_t v67 = v22;
  v30(v31, v73, v22);
  uint64_t v33 = v87;
  (*(void (**)(char *, unint64_t, uint64_t))(v87 + 16))((char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v75, v88);
  v30((char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v72, v32);
  sub_1000CAA4C(v74, v89);
  unint64_t v34 = (*(unsigned __int8 *)(v66 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  uint64_t v35 = v34 + v29;
  uint64_t v36 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v37 = (v36 + v34 + v29 + 1) & ~v36;
  uint64_t v38 = v24 + 7;
  unint64_t v39 = (v24 + 7 + v37) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (*(unsigned __int8 *)(v33 + 80) + v39 + 8) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v41 = (v21 + v36 + v40) & ~v36;
  unint64_t v75 = (v38 + v41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v74 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (*(unsigned __int8 *)(v76 + 80) + v72 + 16) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  unint64_t v43 = (v77 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v91;
  v78 &= 1u;
  *(unsigned char *)(v44 + 24) = v78;
  *(void *)(v44 + 32) = v92;
  sub_1003E176C(v68, v44 + v34);
  *(unsigned char *)(v44 + v35) = v80;
  uint64_t v45 = v44 + v37;
  uint64_t v46 = v79;
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  uint64_t v48 = v67;
  v47(v45, v69, v67);
  *(void *)(v44 + v39) = v90;
  unint64_t v49 = v44 + v40;
  uint64_t v50 = v82;
  (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v49, v70, v88);
  unint64_t v51 = v44 + v41;
  uint64_t v52 = v81;
  v47(v51, v71, v48);
  uint64_t v54 = v83;
  uint64_t v53 = v84;
  *(void *)(v44 + v75) = v52;
  *(void *)(v44 + v74) = v46;
  *(void *)(v44 + v73) = v50;
  uint64_t v55 = (void *)(v44 + v72);
  *uint64_t v55 = v53;
  v55[1] = v54;
  sub_1000CAAB4(v89, v44 + v42);
  *(void *)(v44 + v43) = v85;
  if (v86)
  {
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = sub_1005A26D0;
    *(void *)(v56 + 24) = v44;
    unint64_t v97 = sub_10008F6F4;
    uint64_t v98 = v56;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v94 = 1107296256;
    id v95 = sub_1003B3260;
    uint64_t v96 = &unk_1008CB958;
    uint64_t v57 = _Block_copy(&aBlock);
    sub_1000CD9C4(v91, v78);
    id v58 = v92;
    id v59 = v90;
    id v60 = v52;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v59 performBlockAndWait:v57];
    _Block_release(v57);
    LOBYTE(v57) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if ((v57 & 1) == 0) {
      return result;
    }
    __break(1u);
  }
  unint64_t v97 = sub_1005A26D0;
  uint64_t v98 = v44;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v94 = 1107296256;
  id v95 = sub_100236C78;
  uint64_t v96 = &unk_1008CB908;
  os_log_t v62 = _Block_copy(&aBlock);
  sub_1000CD9C4(v91, v78);
  id v63 = v92;
  id v64 = v90;
  id v65 = v52;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v64 performBlock:v62];
  _Block_release(v62);
  return swift_release();
}

id sub_10059FCDC(uint64_t a1, char a2, void *a3, void *a4, int a5, uint64_t a6, void *a7, uint64_t a8, NSObject *a9, void *a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t), uint64_t a14, uint64_t a15, NSObject *a16)
{
  Class v247 = (char *)a8;
  id v264 = a7;
  int v262 = a5;
  id v261 = a4;
  id v253 = a3;
  uint64_t v255 = a14;
  int v258 = a13;
  uint64_t v257 = a12;
  uint64_t v256 = a11;
  uint64_t v263 = a10;
  uint64_t v19 = type metadata accessor for Date();
  unint64_t v265 = *(NSObject **)(v19 - 8);
  __chkstk_darwin(v19);
  os_log_t v250 = (os_log_t)((char *)v238 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  os_log_t v249 = (os_log_t)((char *)v238 - v22);
  __chkstk_darwin(v23);
  int64_t v245 = ((char *)v238 - v24);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)v238 - v26;
  __chkstk_darwin(v28);
  uint64_t v246 = (char *)v238 - v29;
  __chkstk_darwin(v30);
  unint64_t v254 = (char *)v238 - v31;
  __chkstk_darwin(v32);
  unint64_t v34 = (char *)v238 - v33;
  uint64_t v252 = type metadata accessor for RDPublicTemplate();
  __chkstk_darwin(v252);
  id v248 = (char *)v238 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)v238 - v37;
  __chkstk_darwin(v39);
  __chkstk_darwin(v40);
  unint64_t v43 = (char *)v238 - v42;
  uint64_t v44 = a6;
  uint64_t v259 = a6;
  uint64_t v260 = a16;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100907970 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    int v78 = (void *)sub_10008E2DC(v77, (uint64_t)qword_10091DDB0);
    sub_1003E17D0((uint64_t)v261, (uint64_t)v38);
    uint64_t v79 = v265;
    Class isa = (char *)v265[2].isa;
    Class v247 = v27;
    os_log_t v249 = v265 + 2;
    id v248 = isa;
    ((void (*)(char *, uint64_t, uint64_t))isa)(v27, a6, v19);
    id v81 = v253;
    sub_1000CD9C4(a1, 1);
    id v82 = v81;
    sub_1000CD9C4(a1, 1);
    id v253 = v78;
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    int v85 = v84;
    BOOL v86 = os_log_type_enabled(v83, v84);
    unint64_t v244 = (void (*)(char *, uint64_t, uint64_t))a1;
    id v261 = v82;
    if (v86)
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      uint64_t v241 = (uint64_t)v88;
      uint64_t v246 = (char *)swift_slowAlloc();
      uint64_t v267 = (uint64_t)v246;
      *(_DWORD *)uint64_t v87 = 136447490;
      unint64_t v243 = v83;
      id v266 = v260;
      swift_getMetatypeMetadata();
      uint64_t v89 = String.init<A>(describing:)();
      id v266 = (id)sub_1000C51B8(v89, v90, &v267);
      LODWORD(v242) = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2114;
      id v266 = v261;
      id v91 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v88 = v261;

      *(_WORD *)(v87 + 22) = 2082;
      Class v92 = sub_1000D5500();
      id v93 = [(objc_class *)v92 recordName];

      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v96 = v95;

      id v266 = (id)sub_1000C51B8(v94, v96, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003589D0((uint64_t)v38);
      *(_WORD *)(v87 + 32) = 2082;
      uint64_t v97 = Bool.yesno.getter();
      id v266 = (id)sub_1000C51B8(v97, v98, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 42) = 2082;
      swift_getErrorValue();
      uint64_t v99 = Error.rem_errorDescription.getter();
      id v266 = (id)sub_1000C51B8(v99, v100, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      *(_WORD *)(v87 + 52) = 2048;
      uint64_t v101 = v254;
      Date.init()();
      uint64_t v102 = (uint64_t)v247;
      Date.timeIntervalSince(_:)();
      uint64_t v104 = v103;
      os_log_t v105 = (void (*)(char *, uint64_t))v265[1].isa;
      v105(v101, v19);
      id v266 = v104;
      id v82 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v106 = v19;
      v105((char *)v102, v19);
      BOOL v107 = v243;
      _os_log_impl((void *)&_mh_execute_header, v243, (os_log_type_t)v242, "%{public}s: Failed to upload content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v87, 0x3Eu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v259;
      swift_slowDealloc();
    }
    else
    {

      sub_1003589D0((uint64_t)v38);
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      os_log_t v105 = (void (*)(char *, uint64_t))v79[1].isa;
      uint64_t v106 = v19;
      v105(v247, v19);
    }
    uint64_t v150 = (void *)sub_1002E3C78(v82, (uint64_t)v264, (Class)&off_1008B74D0, 0);
    swift_arrayDestroy();
    uint64_t KeyPath = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(KeyPath, a15);
    swift_release();
    [v150 updateChangeCount];

    id v266 = 0;
    unsigned __int8 v152 = [v264 save:&v266];
    id v153 = v266;
    if (v152)
    {
      id v154 = v245;
      uint64_t v155 = a6;
      uint64_t v156 = v106;
      ((void (*)(NSObject *, uint64_t, uint64_t))v248)(v245, v155, v106);
      id v157 = v82;
      id v158 = v153;
      uint64_t v159 = Logger.logObject.getter();
      os_log_type_t v160 = static os_log_type_t.default.getter();
      int v161 = v160;
      if (os_log_type_enabled(v159, v160))
      {
        uint64_t v162 = swift_slowAlloc();
        os_log_t v249 = (os_log_t)swift_slowAlloc();
        uint64_t v163 = (void *)swift_slowAlloc();
        id v253 = v163;
        *(_DWORD *)uint64_t v162 = 136446978;
        LODWORD(v252) = v161;
        os_log_t v250 = v159;
        char v164 = v260;
        id v266 = v260;
        uint64_t v267 = (uint64_t)v163;
        swift_getMetatypeMetadata();
        uint64_t v165 = String.init<A>(describing:)();
        id v266 = (id)sub_1000C51B8(v165, v166, &v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 12) = 2114;
        id v266 = v157;
        id v167 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v249->Class isa = (Class)v157;

        *(_WORD *)(v162 + 22) = 2082;
        uint64_t v168 = Bool.yesno.getter();
        id v266 = (id)sub_1000C51B8(v168, v169, &v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v162 + 32) = 2048;
        uint64_t v170 = v254;
        Date.init()();
        uint64_t v171 = v245;
        Date.timeIntervalSince(_:)();
        unint64_t v173 = v172;
        v105(v170, v156);
        id v266 = v173;
        unint64_t v174 = v164;
        id v82 = v261;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v105((char *)v171, v156);
        os_log_t v175 = v250;
        _os_log_impl((void *)&_mh_execute_header, v250, (os_log_type_t)v252, "%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v162, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a6 = v259;
LABEL_28:
        uint64_t v235 = (uint64_t)v244;
        swift_errorRetain();
        sub_10059EF58(v235, 1, v256, v82, v263, v257, a6, v258, v255, v174);
        sub_1000CD9D0(v235, 1);
        sub_1000CD9D0(v235, 1);
        return [v264 reset];
      }

      v105((char *)v154, v156);
      a6 = v259;
    }
    else
    {
      id v209 = v266;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      os_log_t v210 = v250;
      ((void (*)(os_log_t, uint64_t, uint64_t))v248)(v250, a6, v106);
      id v211 = v82;
      swift_errorRetain();
      id v212 = v211;
      swift_errorRetain();
      os_log_type_t v213 = Logger.logObject.getter();
      os_log_type_t v214 = static os_log_type_t.error.getter();
      int v215 = v214;
      if (os_log_type_enabled(v213, v214))
      {
        uint64_t v216 = swift_slowAlloc();
        uint64_t v217 = swift_slowAlloc();
        uint64_t v251 = v106;
        uint64_t v218 = (void *)v217;
        unint64_t v219 = (void *)swift_slowAlloc();
        id v253 = v219;
        *(_DWORD *)uint64_t v216 = 136447234;
        os_log_t v249 = v213;
        LODWORD(v252) = v215;
        unint64_t v174 = v260;
        id v266 = v260;
        uint64_t v267 = (uint64_t)v219;
        swift_getMetatypeMetadata();
        uint64_t v220 = String.init<A>(describing:)();
        id v266 = (id)sub_1000C51B8(v220, v221, &v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v216 + 12) = 2114;
        id v266 = v212;
        id v222 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v218 = v212;

        *(_WORD *)(v216 + 22) = 2082;
        uint64_t v223 = Bool.yesno.getter();
        id v266 = (id)sub_1000C51B8(v223, v224, &v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v216 + 32) = 2082;
        swift_getErrorValue();
        uint64_t v225 = Error.rem_errorDescription.getter();
        id v266 = (id)sub_1000C51B8(v225, v226, &v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v216 + 42) = 2048;
        uint64_t v227 = v254;
        Date.init()();
        os_log_t v228 = v250;
        Date.timeIntervalSince(_:)();
        char v230 = v229;
        v231 = (void (*)(char *, uint64_t))v265[1].isa;
        uint64_t v232 = v227;
        uint64_t v233 = v251;
        v231(v232, v251);
        id v266 = v230;
        a6 = v259;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v231((char *)v228, v233);
        os_log_t v234 = v249;
        _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v252, "%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v216, 0x34u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        id v82 = v261;
        swift_slowDealloc();

        swift_errorRelease();
        goto LABEL_28;
      }
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
      v105((char *)v210, v106);
    }
    unint64_t v174 = v260;
    goto LABEL_28;
  }
  uint64_t v242 = v41;
  unint64_t v243 = a9;
  if (qword_100907970 != -1) {
    swift_once();
  }
  uint64_t v45 = type metadata accessor for Logger();
  uint64_t v46 = sub_10008E2DC(v45, (uint64_t)qword_10091DDB0);
  sub_1003E17D0((uint64_t)v261, (uint64_t)v43);
  uint64_t v47 = v265;
  uint64_t v48 = (void (*)(char *, uint64_t, uint64_t))v265[2].isa;
  uint64_t v49 = v19;
  int64_t v245 = v265 + 2;
  unint64_t v244 = v48;
  v48(v34, v44, v19);
  id v50 = v253;
  os_log_t v250 = v46;
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  int v53 = v52;
  BOOL v54 = os_log_type_enabled(v51, v52);
  uint64_t v55 = v263;
  uint64_t v251 = v49;
  if (v54)
  {
    uint64_t v56 = swift_slowAlloc();
    id v253 = v50;
    uint64_t v57 = v56;
    id v58 = (void *)swift_slowAlloc();
    v238[1] = v58;
    uint64_t v241 = swift_slowAlloc();
    id v266 = a16;
    uint64_t v267 = v241;
    *(_DWORD *)uint64_t v57 = 136447234;
    os_log_t v240 = v51;
    swift_getMetatypeMetadata();
    int v239 = v53;
    uint64_t v59 = String.init<A>(describing:)();
    id v266 = (id)sub_1000C51B8(v59, v60, &v267);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2114;
    id v266 = v253;
    id v61 = v253;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v58 = v253;

    *(_WORD *)(v57 + 22) = 2082;
    Class v62 = sub_1000D5500();
    id v63 = [(objc_class *)v62 recordName];

    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v66 = v65;

    uint64_t v67 = v259;
    id v266 = (id)sub_1000C51B8(v64, v66, &v267);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v68 = v262;
    swift_bridgeObjectRelease();
    sub_1003589D0((uint64_t)v43);
    *(_WORD *)(v57 + 32) = 2082;
    uint64_t v69 = Bool.yesno.getter();
    id v266 = (id)sub_1000C51B8(v69, v70, &v267);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 42) = 2048;
    id v71 = v254;
    Date.init()();
    Date.timeIntervalSince(_:)();
    unint64_t v73 = v72;
    unint64_t v74 = (void (*)(char *, uint64_t))v265[1].isa;
    v74(v71, v251);
    id v266 = v73;
    uint64_t v75 = v251;
    uint64_t v55 = v263;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v74(v34, v75);
    os_log_t v76 = v240;
    _os_log_impl((void *)&_mh_execute_header, v240, (os_log_type_t)v239, "%{public}s: Uploaded content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}", (uint8_t *)v57, 0x34u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v49 = v75;
    id v50 = v253;
    swift_slowDealloc();
  }
  else
  {

    sub_1003589D0((uint64_t)v43);
    unint64_t v74 = (void (*)(char *, uint64_t))v47[1].isa;
    v74(v34, v49);

    char v68 = v262;
    uint64_t v67 = v44;
  }
  uint64_t v108 = sub_1005A2940(v50, (uint64_t)v264, (uint64_t)v247, v243, v55, (v68 & 1) == 0);
  uint64_t v109 = (uint64_t)v248;
  id v110 = v108;
  id v266 = 0;
  unsigned __int8 v111 = [v264 save:&v266];
  id v112 = v266;
  if (v111)
  {
    uint64_t v113 = v242;
    sub_1003E17D0((uint64_t)v261, v242);
    uint64_t v114 = v246;
    v244(v246, v67, v49);
    id v115 = v50;
    int v116 = v110;
    id v117 = v115;
    id v118 = v116;
    id v119 = v112;
    uint64_t v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.default.getter();
    int v122 = v121;
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v123 = swift_slowAlloc();
      uint64_t v124 = (char *)swift_slowAlloc();
      id v248 = v124;
      uint64_t v125 = (void *)swift_slowAlloc();
      id v253 = v125;
      *(_DWORD *)uint64_t v123 = 136447490;
      os_log_t v250 = v120;
      id v126 = v260;
      id v266 = v260;
      uint64_t v267 = (uint64_t)v125;
      swift_getMetatypeMetadata();
      LODWORD(v249) = v122;
      uint64_t v127 = String.init<A>(describing:)();
      id v261 = v117;
      id v266 = (id)sub_1000C51B8(v127, v128, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v123 + 12) = 2114;
      id v266 = v261;
      id v129 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v124 = v261;

      *(_WORD *)(v123 + 22) = 2082;
      Class v130 = sub_1000D5500();
      id v131 = [(objc_class *)v130 recordName];

      uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v134 = v133;

      id v266 = (id)sub_1000C51B8(v132, v134, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003589D0(v113);
      *(_WORD *)(v123 + 32) = 2082;
      uint64_t v135 = Bool.yesno.getter();
      id v266 = (id)sub_1000C51B8(v135, v136, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v123 + 42) = 2082;
      id v137 = [v118 description];
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v140 = v139;

      unint64_t v141 = v263;
      id v266 = (id)sub_1000C51B8(v138, v140, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v123 + 52) = 2048;
      uint64_t v142 = v254;
      Date.init()();
      unint64_t v143 = v246;
      Date.timeIntervalSince(_:)();
      uint64_t v145 = v144;
      unint64_t v146 = (void (*)(char *, uint64_t))v265[1].isa;
      uint64_t v147 = v142;
      uint64_t v148 = v251;
      v146(v147, v251);
      id v266 = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v146(v143, v148);
      id v117 = v261;
      os_log_t v149 = v250;
      _os_log_impl((void *)&_mh_execute_header, v250, (os_log_type_t)v249, "%{public}s: Saved template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, publicLink: %{public}s, elapsedSeconds: %f}", (uint8_t *)v123, 0x3Eu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003589D0(v113);
      v74(v114, v49);

      id v126 = v260;
      unint64_t v141 = v263;
    }
    int64_t v237 = v118;
    sub_10059EF58((uint64_t)v118, 0, v256, v117, v141, v257, v259, v258, v255, v126);
  }
  else
  {
    id v176 = v266;
    uint64_t v177 = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1003E17D0((uint64_t)v261, v109);
    os_log_t v178 = v249;
    v244((char *)v249, v67, v49);
    id v179 = v50;
    swift_errorRetain();
    id v180 = v179;
    swift_errorRetain();
    uint64_t v181 = Logger.logObject.getter();
    os_log_type_t v182 = static os_log_type_t.error.getter();
    int v183 = v182;
    if (os_log_type_enabled(v181, v182))
    {
      uint64_t v184 = swift_slowAlloc();
      LODWORD(v253) = v183;
      uint64_t v185 = v184;
      uint64_t v186 = (char *)swift_slowAlloc();
      Class v247 = v186;
      id v261 = (id)swift_slowAlloc();
      uint64_t v267 = (uint64_t)v261;
      *(_DWORD *)uint64_t v185 = 136447490;
      os_log_t v250 = v181;
      id v266 = v260;
      swift_getMetatypeMetadata();
      uint64_t v187 = String.init<A>(describing:)();
      id v266 = (id)sub_1000C51B8(v187, v188, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v185 + 12) = 2114;
      id v266 = v180;
      id v189 = v180;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v186 = v180;

      *(_WORD *)(v185 + 22) = 2082;
      Class v190 = sub_1000D5500();
      id v191 = [(objc_class *)v190 recordName];

      uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v194 = v193;

      id v266 = (id)sub_1000C51B8(v192, v194, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003589D0(v109);
      *(_WORD *)(v185 + 32) = 2082;
      uint64_t v195 = Bool.yesno.getter();
      id v266 = (id)sub_1000C51B8(v195, v196, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v185 + 42) = 2082;
      v197 = v263;
      swift_getErrorValue();
      uint64_t v198 = Error.rem_errorDescription.getter();
      id v266 = (id)sub_1000C51B8(v198, v199, &v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v185 + 52) = 2048;
      v200 = v254;
      Date.init()();
      os_log_t v201 = v249;
      Date.timeIntervalSince(_:)();
      int v203 = v202;
      uint64_t v204 = (void (*)(char *, uint64_t))v265[1].isa;
      v205 = v200;
      uint64_t v206 = v251;
      v204(v205, v251);
      id v266 = v203;
      uint64_t v67 = v259;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v204((char *)v201, v206);
      os_log_t v207 = v250;
      _os_log_impl((void *)&_mh_execute_header, v250, (os_log_type_t)v253, "%{public}s: Failed to save template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v185, 0x3Eu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v208 = v260;
    }
    else
    {

      sub_1003589D0(v109);
      swift_errorRelease();
      swift_errorRelease();
      v74((char *)v178, v49);

      uint64_t v208 = v260;
      v197 = v263;
    }
    swift_errorRetain();
    sub_10059EF58(v177, 1, v256, v180, v197, v257, v67, v258, v255, v208);
    swift_errorRelease();
    swift_errorRelease();
  }
  return [v264 reset];
}

uint64_t sub_1005A1AF0()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink()
{
  return self;
}

uint64_t sub_1005A1B5C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1005A1B7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = a8;
  uint64_t v21 = a9;
  uint64_t v16 = sub_1000C1FE8((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(v16, a3, a8);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  sub_1000967D4(&v19, v17 + 32);
  *(unsigned char *)(v17 + 72) = a4;
  *(void *)(v17 + 80) = a5;
  *(double *)(v17 + 88) = a6;
  return v17;
}

uint64_t sub_1005A1C50()
{
  uint64_t v1 = type metadata accessor for RDPublicTemplate();
  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v28 + 24) & ~v28;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v6 + v2 + 1) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64) + 7;
  uint64_t v22 = v7;
  unint64_t v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v24 = v9;
  uint64_t v27 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v9 + v27 + 8) & ~v27;
  uint64_t v20 = (*(void *)(v11 + 64) + v6 + v19) & ~v6;
  unint64_t v21 = (v8 + v20) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8);
  uint64_t v26 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v23 = (v26 + ((((((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v26;
  uint64_t v25 = *(void *)(v12 + 64);

  uint64_t v13 = v0 + v2;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v14(v13 + *(int *)(v1 + 32), v10);
  uint64_t v15 = v13 + *(int *)(v1 + 36);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v18(v15, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v16(v0 + v22, v4);

  v14(v0 + v19, v10);
  v16(v0 + v20, v4);

  swift_release();
  swift_release();
  swift_release();
  if (!v18(v0 + v23, 1, v4)) {
    v16(v0 + v23, v4);
  }

  return _swift_deallocObject(v0, ((v23 + v25) & 0xFFFFFFFFFFFFFFF8) + 16, v28 | v6 | v27 | v26 | 7);
}

uint64_t sub_1005A2058(uint64_t a1, char a2)
{
  int v21 = a2 & 1;
  uint64_t v3 = *(void *)(type metadata accessor for RDPublicTemplate() - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v4 = v20 + *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 1) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64) + 7;
  unint64_t v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v6 + v11) & ~v6;
  unint64_t v13 = (v8 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + v16 + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  return sub_10059F57C(a1, v21, *(void **)(v2 + 16), v2 + v20, *(unsigned __int8 *)(v2 + v4), v2 + v7, *(void **)(v2 + v9), v2 + v11, v2 + v12, *(void **)(v2 + v13), *(void *)(v2 + v14), *(void *)(v2 + v15), *(void *)(v2 + v16), *(void *)(v2 + v16 + 8), v2 + v18, *(unsigned char *)(v2 + v18 + *(void *)(v17 + 64)), *(void *)(((v18 + *(void *)(v17 + 64)) & 0xFFFFFFFFFFFFFFF8) + v2 + 8));
}

uint64_t sub_1005A22B8()
{
  uint64_t v1 = type metadata accessor for RDPublicTemplate();
  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v28 + 40) & ~v28;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v6 + v2 + 1) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64) + 7;
  uint64_t v22 = v7;
  unint64_t v9 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v24 = v9;
  uint64_t v27 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v9 + v27 + 8) & ~v27;
  uint64_t v20 = (*(void *)(v11 + 64) + v6 + v19) & ~v6;
  unint64_t v21 = (v8 + v20) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8);
  uint64_t v26 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v23 = (v26 + ((((((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v26;
  uint64_t v25 = *(void *)(v12 + 64);
  sub_1000CD9D0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  uint64_t v13 = v0 + v2;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v14(v13 + *(int *)(v1 + 32), v10);
  uint64_t v15 = v13 + *(int *)(v1 + 36);
  unint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v18(v15, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v16(v0 + v22, v4);

  v14(v0 + v19, v10);
  v16(v0 + v20, v4);

  swift_release();
  swift_release();
  swift_release();
  if (!v18(v0 + v23, 1, v4)) {
    v16(v0 + v23, v4);
  }

  return _swift_deallocObject(v0, ((v25 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v28 | v6 | v27 | v26 | 7);
}

id sub_1005A26D0()
{
  uint64_t v1 = *(void *)(type metadata accessor for RDPublicTemplate() - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v2 = v18 + *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v2 + v4 + 1) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64) + 7;
  unint64_t v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v4 + v9) & ~v4;
  unint64_t v11 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  return sub_10059FCDC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void **)(v0 + 32), (void *)(v0 + v18), *(unsigned __int8 *)(v0 + v2), v0 + v5, *(void **)(v0 + v7), v0 + v9, (v0 + v10), *(void **)(v0 + v11), *(void *)(v0 + v12), *(void *)(v0 + v13), *(void (**)(uint64_t, uint64_t))(v0 + v14), *(void *)(v0 + v14 + 8), v0 + v16, *(NSObject **)(v0 + ((*(void *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1005A2918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005A2928()
{
  return swift_release();
}

uint64_t sub_1005A2930()
{
  return _swift_deallocObject(v0, 32, 7);
}

char *sub_1005A2940(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6)
{
  int v44 = a6;
  id v43 = a5;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1002E3C78(a1, a2, 0, 0);
  if (!v6)
  {
    unint64_t v21 = (void *)v20;
    v40[1] = 0;
    uint64_t v41 = a4;
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t v23 = v16;
    uint64_t v24 = *(void *)(v22 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, a3, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v19, 0, 1, v22);
    uint64_t KeyPath = (NSURL *)swift_getKeyPath();
    sub_100161A84(KeyPath, (uint64_t)v19);
    swift_release();
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    id v26 = v43;
    id v27 = v43;
    REMCDTemplate.publicLinkConfiguration.setter(v26);
    id v28 = [v21 createResolutionTokenMapIfNecessary];
    NSString v29 = String._bridgeToObjectiveC()();
    [v28 updateForKey:v29];

    static Date.now.getter();
    uint64_t v30 = *(void (**)(char *, void *, uint64_t))(v14 + 16);
    id v43 = v23;
    uint64_t v31 = v45;
    v30(v13, v23, v45);
    uint64_t v42 = v14;
    uint64_t v32 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    v32(v13, 0, 1, v31);
    uint64_t v33 = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(v33, (uint64_t)v13);
    swift_release();
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    if (v44)
    {
      v30(v13, v43, v31);
      v32(v13, 0, 1, v31);
      unint64_t v34 = (NSURL *)swift_getKeyPath();
      sub_10015F5D0(v34, (uint64_t)v13);
      swift_release();
      sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    }
    v30(v13, v41, v31);
    v32(v13, 0, 1, v31);
    uint64_t v35 = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(v35, (uint64_t)v13);
    swift_release();
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    [v21 updateChangeCount];
    uint64_t v36 = (char *)REMCDTemplate.publicLink.getter();
    if (v36)
    {
      unint64_t v13 = v36;
      (*(void (**)(id, uint64_t))(v42 + 8))(v43, v31);
    }
    else
    {
      type metadata accessor for REMCDTemplate();
      unint64_t v13 = (char *)self;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v39 = String._bridgeToObjectiveC()();
      [v13 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v39];

      swift_willThrow();
      (*(void (**)(id, uint64_t))(v42 + 8))(v43, v31);
    }
  }
  return v13;
}

id sub_1005A2E48(void *a1)
{
  uint64_t v2 = v1;
  id v53 = 0;
  id v4 = [v2 existingObjectWithID:a1 error:&v53];
  id v5 = v53;
  if (!v4)
  {
    uint64_t v6 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v7 = [a1 persistentStore];
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = [v7 identifier];

      if (v9)
      {
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        id v13 = [v2 persistentStoreCoordinator];
        if (v13)
        {
          uint64_t v14 = v13;
          NSString v15 = String._bridgeToObjectiveC()();
          id v16 = [v14 persistentStoreForIdentifier:v15];

          if (!v16)
          {
            if (qword_100907978 != -1) {
              swift_once();
            }
            uint64_t v31 = type metadata accessor for Logger();
            sub_10008E2DC(v31, (uint64_t)qword_10091DE90);
            id v32 = v2;
            id v33 = a1;
            swift_errorRetain();
            id v34 = v32;
            id v35 = v33;
            swift_errorRetain();
            swift_bridgeObjectRetain();
            uint64_t v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v36, v37))
            {
              swift_errorRelease();

              swift_bridgeObjectRelease_n();
              swift_errorRelease();
              swift_errorRelease();

              return 0;
            }
            id v50 = v35;
            os_log_type_t v51 = v37;
            os_log_type_t log = v36;
            uint64_t v38 = swift_slowAlloc();
            NSString v39 = (void *)swift_slowAlloc();
            id v53 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v38 = 138413314;
            id v40 = v34;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *NSString v39 = v34;

            *(_WORD *)(v38 + 12) = 2080;
            id v41 = [v40 persistentStoreCoordinator];
            if (v41)
            {
              uint64_t v42 = v41;
              id v43 = [v41 description];

              uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v46 = v45;
            }
            else
            {
              unint64_t v46 = 0xE300000000000000;
              uint64_t v44 = 7104878;
            }
            sub_1000C51B8(v44, v46, (uint64_t *)&v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v38 + 22) = 2080;
            swift_bridgeObjectRetain();
            sub_1000C51B8(v10, v12, (uint64_t *)&v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v38 + 32) = 2112;
            id v47 = v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v39[1] = v50;

            *(_WORD *)(v38 + 42) = 2080;
            swift_getErrorValue();
            uint64_t v48 = Error.localizedDescription.getter();
            sub_1000C51B8(v48, v49, (uint64_t *)&v53);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, log, v51, "The objectID's store does not exist in the PSC of MOC. This is an account store just got removed? {moc: %@, psc: %s, storeID: %s, objectID: %@, error: %s}", (uint8_t *)v38, 0x34u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_12;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (qword_100907978 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091DE90);
    id v18 = v2;
    id v19 = a1;
    swift_errorRetain();
    id v20 = v18;
    id v21 = v19;
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v22, v23))
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();

      return 0;
    }
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    id v53 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 138412802;
    id v26 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v20;

    *(_WORD *)(v24 + 12) = 2112;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25[1] = v21;

    *(_WORD *)(v24 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v28 = Error.localizedDescription.getter();
    sub_1000C51B8(v28, v29, (uint64_t *)&v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to fetch object with ID {moc: %@, objectID: %@, error: %s}", (uint8_t *)v24, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_12:
    swift_errorRelease();
    return 0;
  }
  return v4;
}

uint64_t sub_1005A362C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DE90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DE90);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_1005A36F4(unint64_t a1)
{
  id v9 = _swiftEmptyDictionarySingleton;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      id v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v8 = v4;
      sub_1005A3820(&v9, &v8);

      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyDictionarySingleton;
}

void sub_1005A3820(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = [*a2 entityName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = sub_1005A3BAC();
  if (v8[2] && (unint64_t v9 = sub_1001806F8(v5, v7), (v10 & 1) != 0))
  {
    unint64_t v11 = (uint64_t *)(v8[7] + 16 * v9);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v14 = v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v16 = (void *)*a1;
    id v34 = (void *)*a1;
    *a1 = 0x8000000000000000;
    unint64_t v18 = sub_1001806F8(v13, v12);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
LABEL_19:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_17:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10031D41C();
        id v16 = v34;
      }
LABEL_14:
      *a1 = v16;
      swift_bridgeObjectRelease();
      id v32 = (void *)*a1;
      swift_bridgeObjectRetain();
      if ((v22 & 1) == 0)
      {
        sub_1002C83CC(v18, v13, v12, (uint64_t)_swiftEmptyArrayStorage, v32);
        swift_bridgeObjectRetain();
      }
      uint64_t v33 = v32[7];
      swift_bridgeObjectRelease();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v33 + 8 * v18) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v33 + 8 * v18) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
        goto LABEL_17;
      goto LABEL_19;
    }
    sub_100316E90(v21, isUniquelyReferenced_nonNull_native);
    id v16 = v34;
    unint64_t v23 = sub_1001806F8(v13, v12);
    if ((v22 & 1) == (v24 & 1))
    {
      unint64_t v18 = v23;
      goto LABEL_14;
    }
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100907978 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_10091DE90);
    id v26 = v3;
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 138412290;
      id v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v30 = v26;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unknown root entity name for managed object ID {moid: %@}", v29, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void *sub_1005A3BAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134(&qword_10091DF18);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907980 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10091DEA8;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  uint64_t v8 = enum case for REMCache.ExecutionMode.synchronously<A, B>(_:);
  unint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v9(v5, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v2);
  uint64_t v10 = swift_allocObject();
  uint64_t v24 = v2;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v6;
  swift_retain();
  swift_retain();
  dispatch thunk of REMCache.performReadOnly(_:operations:)();
  uint64_t v11 = v24;
  swift_release();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v11);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v7 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  if (!v13)
  {
    char v22 = v12;
    unint64_t v23 = v9;
    id v14 = [self subclassesOfREMCDObjectRepresentingRootCoreDataEntities];
    sub_100094134(&qword_100917C30);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v26 = _swiftEmptyDictionarySingleton;
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v16; ++i)
      {
        uint64_t v25 = *(void *)(v15 + 8 * i + 32);
        sub_1005A418C((uint64_t *)&v26, (uint64_t)&v25, v1);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v13 = v26;
      uint64_t v11 = v24;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = _swiftEmptyDictionarySingleton;
    }
    uint64_t v18 = qword_10091DEA8;
    v23(v5, v8, v11);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v13;
    *(void *)(v19 + 24) = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
    swift_release();
    v22(v5, v11);
  }
  return v13;
}

uint64_t sub_1005A3FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1005A3BAC();
  if (v4[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1001806F8(a1, a2);
    if (v6)
    {
      uint64_t v7 = *(void *)(v4[7] + 16 * v5);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t type metadata accessor for RDRootEntityNameByEntityNameCache()
{
  uint64_t result = qword_10091DEC8;
  if (!qword_10091DEC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005A413C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1005A418C(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  unint64_t v5 = &stru_1008F6000;
  if ([ObjCClassFromMetadata respondsToSelector:"cdEntityName"])
  {
    id v6 = [ObjCClassFromMetadata cdEntityName];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    if ([ObjCClassFromMetadata respondsToSelector:"cdEntityName"])
    {
      id v10 = [ObjCClassFromMetadata cdEntityName];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v69 = *a1;
      *a1 = 0x8000000000000000;
      uint64_t v15 = v13;
      unint64_t v5 = &stru_1008F6000;
      sub_1002C3F10(v11, v15, v7, v9, isUniquelyReferenced_nonNull_native);
      *a1 = v69;
    }
    else
    {
      sub_10030C21C(v7, v9);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v16 = [ObjCClassFromMetadata entity];
    id v17 = [v16 subentities];
    sub_1000963CC(0, (unint64_t *)&unk_100917C20);
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v19 = a3;
    uint64_t v20 = sub_1005A677C((uint64_t)&_swiftEmptySetSingleton, v18, v19);

    swift_bridgeObjectRelease();
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v65 = v20 + 56;
    uint64_t v67 = v20;
    uint64_t v23 = 1 << *(unsigned char *)(v20 + 32);
    uint64_t v24 = -1;
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    unint64_t v25 = v24 & v22;
    int64_t v66 = (unint64_t)(v23 + 63) >> 6;
    id v26 = a1;
    id v63 = ObjCClassFromMetadata;
    if ((v24 & v22) != 0) {
      goto LABEL_10;
    }
LABEL_11:
    while (2)
    {
      int64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        break;
      }
      if (v29 < v66)
      {
        unint64_t v30 = *(void *)(v65 + 8 * v29);
        int64_t v31 = v21 + 1;
        if (v30) {
          goto LABEL_24;
        }
        int64_t v31 = v21 + 2;
        if (v21 + 2 >= v66) {
          return swift_release();
        }
        unint64_t v30 = *(void *)(v65 + 8 * v31);
        if (v30) {
          goto LABEL_24;
        }
        int64_t v31 = v21 + 3;
        if (v21 + 3 >= v66) {
          return swift_release();
        }
        unint64_t v30 = *(void *)(v65 + 8 * v31);
        if (v30)
        {
LABEL_24:
          unint64_t v25 = (v30 - 1) & v30;
          int64_t v68 = v31;
          for (unint64_t i = __clz(__rbit64(v30)) + (v31 << 6); ; unint64_t i = v27 | (v21 << 6))
          {
            uint64_t v33 = (uint64_t *)(*(void *)(v67 + 48) + 16 * i);
            uint64_t v35 = *v33;
            uint64_t v34 = v33[1];
            if ([ObjCClassFromMetadata respondsToSelector:v5[164].name]) {
              break;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v51 = sub_1001806F8(v35, v34);
            char v53 = v52;
            swift_bridgeObjectRelease();
            if (v53)
            {
              char v54 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v55 = *v26;
              uint64_t v71 = *v26;
              *id v26 = 0x8000000000000000;
              if ((v54 & 1) == 0)
              {
                sub_100318A14();
                uint64_t v55 = v71;
              }
              swift_bridgeObjectRelease();
              sub_1002C1FAC(v51, v55);
              *id v26 = v55;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            int64_t v21 = v68;
            if (!v25) {
              goto LABEL_11;
            }
LABEL_10:
            unint64_t v27 = __clz(__rbit64(v25));
            v25 &= v25 - 1;
            int64_t v68 = v21;
          }
          swift_bridgeObjectRetain();
          id v36 = [ObjCClassFromMetadata v5[164].name];
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          char v40 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v41 = *v26;
          unint64_t v70 = (void *)*v26;
          *id v26 = 0x8000000000000000;
          unint64_t v43 = sub_1001806F8(v35, v34);
          uint64_t v44 = *(void *)(v41 + 16);
          BOOL v45 = (v42 & 1) == 0;
          uint64_t v46 = v44 + v45;
          if (__OFADD__(v44, v45))
          {
            __break(1u);
            goto LABEL_45;
          }
          char v47 = v42;
          if (*(void *)(v41 + 24) < v46)
          {
            sub_10030E654(v46, v40);
            unint64_t v48 = sub_1001806F8(v35, v34);
            if ((v47 & 1) != (v49 & 1)) {
              goto LABEL_49;
            }
            unint64_t v43 = v48;
            id v50 = v70;
            if ((v47 & 1) == 0) {
              goto LABEL_39;
            }
LABEL_37:
            uint64_t v56 = (uint64_t *)(v50[7] + 16 * v43);
            swift_bridgeObjectRelease();
            *uint64_t v56 = v37;
            v56[1] = v39;
            goto LABEL_41;
          }
          if (v40)
          {
            id v50 = v70;
            if (v42) {
              goto LABEL_37;
            }
          }
          else
          {
            sub_100318A14();
            id v50 = v70;
            if (v47) {
              goto LABEL_37;
            }
          }
LABEL_39:
          v50[(v43 >> 6) + 8] |= 1 << v43;
          uint64_t v57 = (uint64_t *)(v50[6] + 16 * v43);
          *uint64_t v57 = v35;
          v57[1] = v34;
          id v58 = (uint64_t *)(v50[7] + 16 * v43);
          uint64_t *v58 = v37;
          v58[1] = v39;
          uint64_t v59 = v50[2];
          BOOL v60 = __OFADD__(v59, 1);
          uint64_t v61 = v59 + 1;
          if (v60) {
            goto LABEL_46;
          }
          v50[2] = v61;
          swift_bridgeObjectRetain();
LABEL_41:
          id v26 = a1;
          *a1 = (uint64_t)v50;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t ObjCClassFromMetadata = v63;
          unint64_t v5 = &stru_1008F6000;
          int64_t v21 = v68;
          if (!v25) {
            continue;
          }
          goto LABEL_10;
        }
        uint64_t v32 = v21 + 4;
        if (v21 + 4 < v66)
        {
          unint64_t v30 = *(void *)(v65 + 8 * v32);
          if (v30)
          {
            int64_t v31 = v21 + 4;
            goto LABEL_24;
          }
          while (1)
          {
            int64_t v31 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_47;
            }
            if (v31 >= v66) {
              return swift_release();
            }
            unint64_t v30 = *(void *)(v65 + 8 * v31);
            ++v32;
            if (v30) {
              goto LABEL_24;
            }
          }
        }
      }
      return swift_release();
    }
  }
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void (__swiftcall *sub_1005A4718(uint64_t *a1, unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = (Swift::Void (__swiftcall *)())*a1;
  }
  else
  {
    uint64_t v4 = sub_1005A47C4(a2, a3);
    uint64_t v7 = v6;
    swift_beginAccess();
    uint64_t v8 = *a1;
    *a1 = (uint64_t)v4;
    a1[1] = v7;
    swift_retain();
    sub_100096314(v8);
  }
  sub_1000E4F30(v3);
  return v4;
}

Swift::Void (__swiftcall *sub_1005A47C4(unint64_t a1, uint64_t a2))()
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = REMCDList.cleanUpAfterLocalObjectMerge();
    if (!v24) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = REMCDList.cleanUpAfterLocalObjectMerge();
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return v4;
    }
  }
  id v5 = [self entityDescriptionWithContext:a2];
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = [v5 propertiesByName];
    sub_1000963CC(0, (unint64_t *)&unk_100916ED0);
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v8 + 16))
    {
      unint64_t v9 = sub_1001806F8(0x456465676E616863, 0xED0000797469746ELL);
      if (v10)
      {
        id v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
        swift_bridgeObjectRelease();
        sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
        sub_100094134((uint64_t *)&unk_10090A430);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_100776E80;
        id v13 = v11;
        id v14 = [v13 name];
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        *(void *)(v12 + 56) = &type metadata for String;
        *(void *)(v12 + 64) = sub_1000C5B38();
        *(void *)(v12 + 32) = v15;
        *(void *)(v12 + 40) = v17;
        *(void *)(v12 + 96) = sub_100094134(&qword_10091DF40);
        *(void *)(v12 + 104) = sub_1000967F4(&qword_10091DF48, &qword_10091DF40);
        *(void *)(v12 + 72) = a1;
        swift_bridgeObjectRetain();
        uint64_t v18 = NSPredicate.init(format:_:)();

        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v6;
        *(void *)(v19 + 24) = v18;
        return (Swift::Void (__swiftcall *)())sub_1005A69A0;
      }
    }
    swift_bridgeObjectRelease();
  }
  if (qword_100907978 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_10091DE90);
  int64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "NSManagedObjectContext#transactionsAndChanges: failed to get changedEntityPropertyDescription", v23, 2u);
    swift_slowDealloc();
  }
  else
  {
  }
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

void sub_1005A4B48(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  [v6 setEntity:a2];
  [v6 setPredicate:a3];
  [a1 setFetchRequest:v6];
}

uint64_t sub_1005A4BE8()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v19 = *(void *)(v0 - 8);
  uint64_t v20 = v0;
  __chkstk_darwin(v0);
  uint64_t v18 = (char *)v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v8 = type metadata accessor for RDRootEntityNameByEntityNameCache();
  int64_t v21 = (void *)v8;
  v17[3] = sub_100094134(&qword_10091DF20);
  uint64_t v9 = String.init<A>(reflecting:)();
  v17[1] = v10;
  void v17[2] = v9;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static DispatchQoS.unspecified.getter();
  int64_t v21 = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = qword_10091DEB0;
  int64_t v21 = (void *)v8;
  swift_retain();
  String.init<A>(reflecting:)();
  id v13 = objc_allocWithZone((Class)NSString);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithString:v14];

  *(void *)(v11 + v12) = v15;
  swift_release();
  uint64_t result = REMCache.init(cacheQueue:countLimit:)();
  qword_10091DEA8 = result;
  return result;
}

uint64_t sub_1005A4FA0()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = qword_10091DEB0;
  swift_retain();
  sub_100094134(&qword_10091DF20);
  String.init<A>(reflecting:)();
  id v2 = objc_allocWithZone((Class)NSString);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithString:v3];

  *(void *)(v0 + v1) = v4;
  swift_release();
  return REMCache.init(cacheQueue:countLimit:)();
}

uint64_t sub_1005A508C(uint64_t a1, uint64_t a2)
{
  NSString v3 = (void *)REMCacheContext.object(forKey:)();
  if (v3)
  {
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    NSString v3 = 0;
  }
  swift_beginAccess();
  *(void *)(a2 + 16) = v3;
  return swift_bridgeObjectRelease();
}

void sub_1005A511C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    v2.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v2.super.Class isa = 0;
  }
  Class isa = v2.super.isa;
  REMCacheContext.setObject(_:forKey:)();
}

void sub_1005A5198()
{
}

uint64_t sub_1005A51A8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1005A51F8()
{
  return type metadata accessor for RDRootEntityNameByEntityNameCache();
}

uint64_t sub_1005A5200()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005A5238()
{
  return sub_1005A5270((void (*)(void))&_swift_release);
}

uint64_t sub_1005A5250(uint64_t a1)
{
  return sub_1005A508C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1005A5258()
{
  return sub_1005A5270((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1005A5270(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 32, 7);
}

void sub_1005A52B8(uint64_t a1)
{
  sub_1005A511C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1005A52C0(void *a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  unint64_t v151 = a2;
  id v152 = a1;
  uint64_t v132 = type metadata accessor for URL();
  uint64_t v6 = *(uint8_t **)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v125 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v133 = (uint64_t)&v122 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v154 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for Date();
  uint64_t v16 = *(void (***)(char *, uint64_t))(v147 - 8);
  *(void *)&double v17 = __chkstk_darwin(v147).n128_u64[0];
  unint64_t v146 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v153 = v5;
  id v19 = [v5 persistentStoreCoordinator];
  if (v19)
  {
    id v131 = v10;
    os_log_type_t v160 = _swiftEmptyArrayStorage;
    v165[0] = 0;
    v165[1] = 0;
    id v124 = v19;
    id v20 = [v19 persistentStores];
    uint64_t v150 = sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v21 >> 62) {
      goto LABEL_49;
    }
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v22)
    {
      unint64_t v149 = v21 & 0xC000000000000001;
      unint64_t v134 = v16 + 1;
      uint64_t v145 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      uint64_t v142 = (void (**)(char *, uint64_t))(v14 + 8);
      unint64_t v141 = &v162;
      unint64_t v128 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      uint64_t v127 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
      uint64_t v123 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      int v122 = (void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v14 = 4;
      *((void *)&v23 + 1) = 3;
      long long v148 = xmmword_10077A530;
      *(void *)&long long v23 = 134218754;
      long long v130 = v23;
      id v126 = (char *)&type metadata for Any + 8;
      uint64_t v129 = v13;
      unint64_t v144 = v21;
      uint64_t v143 = v22;
      while (1)
      {
        uint64_t v6 = (uint8_t *)(v14 - 4);
        unint64_t v25 = v149
            ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (char *)*(id *)(v21 + 8 * v14);
        uint64_t v16 = (void (**)(char *, uint64_t))v25;
        if (__OFADD__(v6, 1)) {
          break;
        }
        id v157 = (uint8_t *)(v14 - 3);
        id v158 = (uint8_t *)v14;
        id v26 = [v152 persistentHistoryTokens];
        sub_1000963CC(0, &qword_10091DF28);
        uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        id v28 = [v16 identifier];
        if (!v28)
        {
          __break(1u);
LABEL_60:

          __break(1u);
        }
        int64_t v29 = v28;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v32 = v31;

        if (*(void *)(v27 + 16) && (unint64_t v33 = sub_1001806F8(v30, v32), (v34 & 1) != 0))
        {
          id v159 = *(id *)(*(void *)(v27 + 56) + 8 * v33);
          id v35 = v159;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v36 = [self fetchHistoryAfterToken:v35];
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v37 = self;
          uint64_t v38 = v146;
          static Date.distantPast.getter();
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*v134)(v38, v147);
          id v36 = [v37 fetchHistoryAfterDate:isa];

          id v159 = 0;
        }
        [v36 setResultType:5 v122];
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = v148;
        *(void *)(v40 + 32) = v16;
        *(void *)&long long v163 = v40;
        specialized Array._endMutation()();
        id v41 = v36;
        char v42 = v16;
        Class v43 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v41 setAffectedStores:v43];

        id v44 = v153;
        BOOL v45 = sub_1005A4718(v165, v151, (uint64_t)v153);
        ((void (*)(id))v45)(v41);
        swift_release();
        *(void *)&long long v163 = 0;
        id v46 = [v44 executeRequest:v41 error:&v163];
        char v47 = (void *)v163;
        if (!v46)
        {
          id v98 = (id)v163;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          id v99 = v124;
LABEL_47:

          return sub_100096314(v165[0]);
        }
        unint64_t v48 = v46;
        uint64_t v164 = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
        *(void *)&long long v163 = v48;
        sub_1000963CC(0, &qword_10091DF30);
        id v49 = v47;
        id v50 = v48;
        throwingCast<A>(_:as:failureMessage:)();
        if (v4)
        {
          swift_bridgeObjectRelease();

          sub_100096314(v165[0]);
          swift_bridgeObjectRelease();
          return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v163);
        }
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v163);
        unint64_t v51 = (void *)v162;
        id v52 = [(id)v162 result];
        id v156 = v51;
        if (!v52)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_100907978 != -1) {
            swift_once();
          }
          id v139 = v50;
          sub_10008E2DC(v13, (uint64_t)qword_10091DE90);
          unint64_t v100 = v153;
          uint64_t v101 = Logger.logObject.getter();
          os_log_type_t v102 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v101, v102))
          {
            id v103 = (uint8_t *)swift_slowAlloc();
            id v157 = (uint8_t *)swift_slowAlloc();
            id v158 = v103;
            *(_DWORD *)id v103 = 138412290;
            *(void *)&long long v163 = v100;
            uint64_t v104 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)id v157 = v100;

            _os_log_impl((void *)&_mh_execute_header, v101, v102, "Failed to get transaction from CoreData. No error. {invocation: %@}", v158, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v101 = v100;
          }

          os_log_t v105 = self;
          *(void *)&long long v163 = 0;
          *((void *)&v163 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(67);
          v106._object = (void *)0x80000001007D9040;
          v106._countAndFlagsBits = 0xD000000000000040;
          String.append(_:)(v106);
          id v107 = [v100 description];
          uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v110 = v109;

          v111._countAndFlagsBits = v108;
          v111._object = v110;
          String.append(_:)(v111);
          swift_bridgeObjectRelease();
          v112._countAndFlagsBits = 125;
          v112._object = (void *)0xE100000000000000;
          String.append(_:)(v112);
          NSString v113 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v105 internalErrorWithDebugDescription:v113];

          swift_willThrow();
          id v99 = v156;
          goto LABEL_47;
        }
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_10009A1A0(&v162, &v163);
        sub_100094134(&qword_100910140);
        throwingCast<A>(_:as:failureMessage:)();
        id v155 = v41;
        unint64_t v53 = v162;
        if (qword_100907978 != -1) {
          swift_once();
        }
        uint64_t v54 = sub_10008E2DC(v13, (uint64_t)qword_10091DE90);
        uint64_t v55 = v154;
        (*v145)(v154, v54, v13);
        id v56 = v159;
        uint64_t v57 = v42;
        swift_bridgeObjectRetain_n();
        id v58 = v56;
        unint64_t v21 = v57;
        uint64_t v59 = v13;
        BOOL v60 = Logger.logObject.getter();
        int v61 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v60, (os_log_type_t)v61))
        {
          os_log_t v137 = v60;
          uint64_t v140 = 0;
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          *(void *)&long long v162 = v63;
          *(_DWORD *)uint64_t v62 = v130;
          id v139 = v50;
          uint64_t v135 = v63;
          if (v53 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v64 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          int v136 = v61;
          id v26 = v58;
          swift_bridgeObjectRelease();
          uint64_t v161 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v138 = v53;
          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 12) = 2080;
          id v65 = [(id)v21 identifier];
          if (!v65) {
            goto LABEL_60;
          }
          int64_t v66 = v65;
          uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v69 = v68;

          uint64_t v161 = sub_1000C51B8(v67, v69, (uint64_t *)&v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 22) = 2080;
          id v70 = [(id)v21 URL];
          if (v70)
          {
            uint64_t v71 = v70;
            uint64_t v72 = (uint64_t)v131;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v73 = 0;
            uint64_t v74 = v132;
          }
          else
          {
            uint64_t v73 = 1;
            uint64_t v74 = v132;
            uint64_t v72 = (uint64_t)v131;
          }
          id v50 = v139;
          id v58 = v26;
          (*v128)(v72, v73, 1, v74);
          uint64_t v75 = v133;
          sub_10036B73C(v72, v133);
          if ((*v127)(v75, 1, v74))
          {
            sub_10016D594(v75);
            unint64_t v76 = 0xE500000000000000;
            uint64_t v77 = 0x296C696E28;
          }
          else
          {
            int v78 = v125;
            (*v123)(v125, v75, v74);
            sub_10016D594(v75);
            uint64_t v77 = URL.absoluteString.getter();
            unint64_t v76 = v79;
            (*v122)(v78, v74);
          }
          uint64_t v161 = sub_1000C51B8(v77, v76, (uint64_t *)&v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 32) = 2080;
          uint64_t v161 = (uint64_t)v159;
          sub_100094134(&qword_10091DF38);
          uint64_t v80 = Optional.descriptionOrNil.getter();
          uint64_t v161 = sub_1000C51B8(v80, v81, (uint64_t *)&v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v82 = v137;
          _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v136, "Fetched transactions for store {transactions.count: %ld, store.identifier: %s, store.url: %s, historyToken: %s}", (uint8_t *)v62, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v13 = v129;
          (*v142)(v154, v129);
          uint64_t v4 = v140;
          uint64_t v24 = (uint8_t *)v143;
          unint64_t v53 = v138;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*v142)(v55, v59);
          uint64_t v13 = v59;
          uint64_t v24 = (uint8_t *)v143;
        }
        sub_100201AF8(v53);

        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v163);
        uint64_t v14 = (uint64_t)(v158 + 1);
        unint64_t v21 = v144;
        if (v157 == v24) {
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_49:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_50:
    swift_bridgeObjectRelease();
    if (qword_100907978 != -1) {
      swift_once();
    }
    sub_10008E2DC(v13, (uint64_t)qword_10091DE90);
    unint64_t v114 = (unint64_t)v160;
    swift_bridgeObjectRetain_n();
    id v115 = v152;
    int v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = swift_slowAlloc();
      id v119 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v118 = 134218242;
      uint64_t v140 = v4;
      if (v114 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v120 = *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v163 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v118 + 12) = 2112;
      *(void *)&long long v163 = v115;
      id v121 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v119 = v115;

      _os_log_impl((void *)&_mh_execute_header, v116, v117, "Fetched all transactions {allTransactions.count: %ld, sourceToken: %@}", (uint8_t *)v118, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100096314(v165[0]);
    swift_beginAccess();
    return (uint64_t)v160;
  }
  else
  {
    if (qword_100907978 != -1) {
      swift_once();
    }
    sub_10008E2DC(v13, (uint64_t)qword_10091DE90);
    id v83 = v153;
    os_log_type_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v84, v85))
    {
      BOOL v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v87 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v86 = 138412290;
      *(void *)&long long v163 = v83;
      id v88 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v87 = v83;

      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: %@}", v86, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v89 = self;
    *(void *)&long long v163 = 0;
    *((void *)&v163 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(114);
    v90._countAndFlagsBits = 0xD000000000000070;
    v90._object = (void *)0x80000001007D8FC0;
    String.append(_:)(v90);
    id v91 = [v83 description];
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v93;

    v95._countAndFlagsBits = v92;
    v95._object = v94;
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    NSString v96 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v89 internalErrorWithDebugDescription:v96];

    return swift_willThrow();
  }
}

uint64_t sub_1005A677C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v23 = a1;
  uint64_t v4 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v20 = a2 & 0xC000000000000001;
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v4 = i - 4;
      id v11 = v20 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 8 * i);
      uint64_t v12 = v11;
      uint64_t v13 = i - 3;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v14 = [v11 name];
      if (v14)
      {
        uint64_t v15 = v14;
        Swift::Int v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v18 = v17;

        sub_10031DC68(&v22, v16, v18);
        swift_bridgeObjectRelease();
      }
      id v7 = [v12 subentities:v20];
      sub_1000963CC(0, (unint64_t *)&unk_100917C20);
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v9 = a3;
      uint64_t v10 = sub_1005A677C(&_swiftEmptySetSingleton, v8, v9);
      swift_bridgeObjectRelease();

      sub_1002F68B0(v10);
      if (v13 == v5)
      {
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1005A6960()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005A69A0(void *a1)
{
  sub_1005A4B48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005A69A8(uint64_t a1)
{
  uint64_t result = sub_1005A8344(&qword_10091DF88, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005A6A00()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DF50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DF50);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_1005A6AC8@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v195 = a3;
  uint64_t v180 = a2;
  unint64_t v196 = a1;
  uint64_t v166 = a5;
  uint64_t v165 = type metadata accessor for REMRemindersListDataView.ListSectionsModel();
  __chkstk_darwin(v165);
  uint64_t v164 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for REMRemindersListDataView.SectionsModel();
  uint64_t v169 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  long long v163 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v170 = (char *)&v150 - v9;
  uint64_t v173 = _s10PredicatesOMa(0);
  __chkstk_darwin(v173);
  uint64_t v172 = (char **)((char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v11 - 8);
  uint64_t v160 = (uint64_t)&v150 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v177 = *(void *)(v13 - 8);
  uint64_t v178 = v13;
  __chkstk_darwin(v13);
  id v176 = (char *)&v150 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v179 = (char *)&v150 - v16;
  uint64_t v175 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v174 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  long long v162 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v168 = (char *)&v150 - v19;
  __chkstk_darwin(v20);
  id v167 = (char *)&v150 - v21;
  __chkstk_darwin(v22);
  uint64_t v181 = (uint64_t)&v150 - v23;
  uint64_t v24 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v24 - 8);
  uint64_t v161 = (uint64_t)&v150 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v183 = (uint64_t)&v150 - v27;
  uint64_t v28 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  id v189 = *(void **)(v28 - 8);
  uint64_t v190 = v28;
  __chkstk_darwin(v28);
  uint64_t v186 = (char *)&v150 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v187 = *(void *)(Subtasks - 8);
  uint64_t v188 = Subtasks;
  __chkstk_darwin(Subtasks);
  uint64_t v185 = (char *)&v150 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v191 = v32;
  uint64_t v192 = v33;
  __chkstk_darwin(v32);
  id v35 = (char *)&v150 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v150 - v37;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v193 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  id v41 = (char *)&v150 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  id v44 = (char *)&v150 - v43;
  __chkstk_darwin(v45);
  char v47 = (char *)&v150 - v46;
  __chkstk_darwin(v48);
  id v50 = (void (*)(char *, uint64_t))((char *)&v150 - v49);
  __chkstk_darwin(v51);
  unint64_t v53 = (char *)&v150 - v52;
  uint64_t v54 = v194;
  uint64_t result = sub_1005A8160(a4, v196, v195);
  if (v54) {
    return result;
  }
  id v153 = v53;
  id v154 = v50;
  id v155 = v47;
  uint64_t v184 = v38;
  uint64_t v150 = v44;
  id v152 = v41;
  uint64_t v157 = Configuration;
  unint64_t v151 = v35;
  uint64_t v158 = a4;
  uint64_t v194 = 0;
  id v156 = result;
  id v56 = [result accountID];
  id v57 = [v196 persistentStoreOfAccountWithAccountID:v56];

  if (v57)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_10077A530;
    *(void *)(v58 + 32) = v57;
    v197 = (objc_class *)v58;
    specialized Array._endMutation()();
    id v159 = v197;
  }
  else
  {
    id v159 = 0;
  }
  uint64_t v59 = (uint64_t)v155;
  BOOL v60 = (char *)v154;
  int v61 = v153;
  uint64_t v62 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter();
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  uint64_t v63 = v193 + 8;
  uint64_t v64 = *(void (**)(char *, uint64_t))(v193 + 8);
  id v65 = v61;
  uint64_t v66 = v157;
  v64(v65, v157);
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  uint64_t v67 = v185;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v64(v60, v66);
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  uint64_t v68 = v59;
  uint64_t v69 = (uint64_t)v186;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v70 = (uint64_t)v184;
  v64((char *)v68, v66);
  uint64_t v71 = (uint64_t)v196;
  uint64_t v72 = v194;
  uint64_t v73 = sub_100410DC0(v62, (uint64_t)v196, v70, v67, v69, (uint64_t)v159);
  uint64_t v194 = v72;
  if (v72)
  {

    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v189[1])(v69, v190);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v67, v188);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v192 + 8))(v70, v191);
  }
  id v154 = v64;
  uint64_t v193 = v63;
  id v155 = (char *)v73;
  uint64_t v74 = v71;

  ((void (*)(uint64_t, uint64_t))v189[1])(v69, v190);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v67, v188);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v192 + 8);
  v192 += 8;
  v75(v70, v191);
  unint64_t v76 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter();
  id v77 = [v76 objectID];

  uint64_t v78 = qword_100907908;
  id v79 = v77;
  if (v78 != -1) {
    swift_once();
  }
  uint64_t v80 = (objc_class *)qword_100942578;
  unint64_t v81 = (objc_class *)sub_1005868C0();
  os_log_t v82 = (objc_class *)sub_100586DE0();
  uint64_t v83 = v194;
  uint64_t v84 = sub_10058707C((unint64_t)v77, 1, v74, v80, v81, v82);
  os_log_type_t v85 = v152;
  if (v83)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  unint64_t v86 = v84;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v87 = (void *)sub_1001FFDC4(v86);
  swift_bridgeObjectRelease();
  uint64_t v190 = sub_10013D83C(v87, (uint64_t)v155);
  swift_bridgeObjectRelease();
  id v88 = v182;
  uint64_t v89 = v183;
  sub_1005A7F20(v74, v183);
  id v90 = [v88 fetchResultTokenToDiffAgainst];
  uint64_t v91 = v181;
  sub_10051F2BC(v90, v74, v181);
  uint64_t v194 = 0;

  uint64_t v92 = v150;
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  id v93 = v179;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  v154(v92, v157);
  Swift::String v95 = (uint64_t *)v176;
  uint64_t v94 = v177;
  uint64_t v96 = v178;
  (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v176, v93, v178);
  int v97 = (*(uint64_t (**)(uint64_t *, uint64_t))(v94 + 88))(v95, v96);
  if (v97 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v94 + 96))(v95, v96);
    uint64_t v98 = *v95;
    swift_bridgeObjectRetain();
    uint64_t v99 = Array<A>.reminders.getter();
    uint64_t v100 = v98;
    uint64_t v96 = v178;
    id v189 = sub_1005280D0(v100, v99, v74, v195, v159);
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v195 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v101 = v195;
  if (v97 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    os_log_type_t v102 = (uint64_t *)v176;
    uint64_t v94 = v177;
    (*(void (**)(char *, uint64_t))(v177 + 96))(v176, v96);
    uint64_t v103 = *v102;
    swift_bridgeObjectRetain();
    id v189 = sub_100528BCC(v103, v91, v74, v195, v159);
    goto LABEL_17;
  }
  if (v97 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    if (v97 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
      uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    uint64_t v195 = _swiftEmptyArrayStorage;
    id v189 = _swiftEmptyArrayStorage;
    uint64_t v94 = v177;
    goto LABEL_19;
  }
  uint64_t v127 = v96;
  unint64_t v128 = (uint64_t *)v176;
  (*(void (**)(char *, uint64_t))(v177 + 96))(v176, v127);
  uint64_t v129 = *v128;
  uint64_t v130 = sub_100094134(&qword_100909C78);
  uint64_t v131 = v160;
  sub_1001326D0((uint64_t)v128 + *(int *)(v130 + 48), v160);
  swift_bridgeObjectRetain();
  uint64_t v132 = Array<A>.reminders.getter();
  uint64_t v133 = v159;
  id v189 = sub_1005280D0(v129, v132, v74, v101, v159);
  unint64_t v134 = v101;
  uint64_t v94 = v177;
  uint64_t v195 = sub_10052929C(v131, v132, v74, v134, (uint64_t)v133);
  uint64_t v96 = v178;
  swift_bridgeObjectRelease();
  sub_1000966BC(v131, &qword_100909C68);
LABEL_18:
  swift_bridgeObjectRelease();
  id v93 = v179;
LABEL_19:
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v96);
  uint64_t v104 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter();
  id v105 = [v104 objectID];

  uint64_t v106 = (uint64_t)v172;
  void *v172 = v105;
  swift_storeEnumTagMultiPayload();
  id v107 = (void *)sub_10038F1F0();
  sub_1000C6DAC(v106);
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  uint64_t v108 = (uint64_t)v151;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v154(v85, v157);
  uint64_t v109 = v194;
  sub_10052B078(v74, (uint64_t)v107, v89, v108, (uint64_t)v155);
  uint64_t v194 = v109;
  if (v109)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v75(v108, v191);
    (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v181, v175);
    uint64_t v110 = v89;
  }
  else
  {
    v75(v108, v191);

    sub_100132738(v89, v161);
    REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v111 = v174;
    if (qword_100907988 != -1) {
      swift_once();
    }
    uint64_t v112 = type metadata accessor for Logger();
    sub_10008E2DC(v112, (uint64_t)qword_10091DF50);
    NSString v113 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
    unint64_t v114 = v167;
    uint64_t v115 = v181;
    uint64_t v116 = v175;
    v113(v167, v181, v175);
    os_log_type_t v117 = v168;
    unint64_t v196 = v113;
    v113(v168, v115, v116);
    uint64_t v118 = (uint64_t)v155;
    swift_bridgeObjectRetain();
    id v119 = Logger.logObject.getter();
    int v120 = static os_log_type_t.default.getter();
    BOOL v121 = os_log_type_enabled(v119, (os_log_type_t)v120);
    uint64_t v122 = v169;
    if (v121)
    {
      LODWORD(v192) = v120;
      uint64_t v195 = v119;
      uint64_t v123 = swift_slowAlloc();
      *(_DWORD *)uint64_t v123 = 134218496;
      id v124 = *(objc_class **)(v118 + 16);
      swift_bridgeObjectRelease();
      v197 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v123 + 12) = 2048;
      uint64_t v125 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
      if ((v125 & 0xC000000000000001) != 0) {
        uint64_t v126 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v126 = *(void *)(v125 + 16);
      }
      uint64_t v139 = v174;
      uint64_t v140 = v168;
      swift_bridgeObjectRelease();
      uint64_t v143 = *(NSObject **)(v139 + 8);
      uint64_t v142 = v139 + 8;
      unint64_t v141 = v143;
      ((void (*)(char *, uint64_t))v143)(v167, v175);
      v197 = (objc_class *)v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v123 + 22) = 2048;
      uint64_t v144 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
      if ((v144 & 0xC000000000000001) != 0) {
        uint64_t v145 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v145 = *(void *)(v144 + 16);
      }
      uint64_t v193 = v142 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      swift_bridgeObjectRelease();
      uint64_t v136 = v175;
      ((void (*)(char *))v141)(v140);
      v197 = (objc_class *)v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v146 = v195;
      _os_log_impl((void *)&_mh_execute_header, v195, (os_log_type_t)v192, "reminders %ld updated %ld inserted %ld", (uint8_t *)v123, 0x20u);
      swift_slowDealloc();

      uint64_t v137 = v171;
      uint64_t v122 = v169;
      unint64_t v138 = v163;
      uint64_t v195 = v141;
    }
    else
    {
      uint64_t v135 = *(NSObject **)(v111 + 8);
      uint64_t v193 = (v111 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      ((void (*)(char *, uint64_t))v135)(v117, v116);
      uint64_t v195 = v135;
      ((void (*)(char *, uint64_t))v135)(v114, v116);

      swift_bridgeObjectRelease_n();
      uint64_t v136 = v116;
      uint64_t v137 = v171;
      unint64_t v138 = v163;
    }
    uint64_t v147 = v170;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v138, v170, v137);
    id v148 = v156;
    REMRemindersListDataView.ListSectionsModel.init(sectionsModel:list:)();
    uint64_t v149 = v181;
    v196(v162, v181, v136);
    sub_1005A8344(&qword_10091DF90, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel);
    sub_1005A8344(&qword_10091DF98, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v122 + 8))(v147, v171);
    ((void (*)(uint64_t, uint64_t))v195)(v149, v136);
    uint64_t v110 = v183;
  }
  return (void *)sub_1000966BC(v110, &qword_100909C70);
}

void sub_1005A7F20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v8 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.ListSectionsInvocation.Parameters.configuration.getter();
  char v11 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, Configuration);
  if (v11)
  {
    uint64_t v12 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter();
    id v13 = [v12 objectID];

    *uint64_t v6 = v13;
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = (void *)sub_10038F1F0();
    sub_1000C6DAC((uint64_t)v6);
    sub_10051EB6C(v18, (uint64_t)v14);
    if (!v2)
    {
      uint64_t v15 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 0, 1, v15);
    }
  }
  else
  {
    uint64_t v16 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

void *sub_1005A8160(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)REMRemindersListDataView.ListSectionsInvocation.Parameters.list.getter();
  id v7 = [v6 objectID];

  uint64_t v8 = (void *)REMObjectID.codable.getter();
  type metadata accessor for REMListStableSortingDataView.Invocation();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = v8;
  unint64_t v21 = inited;
  specialized Array._endMutation()();
  if (v21 >> 62)
  {
    id v15 = v8;
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v12 = v8;
    if (v11)
    {
LABEL_3:
      sub_10032E994(v21);
      uint64_t v14 = v13;
      goto LABEL_6;
    }
  }
  uint64_t v14 = &_swiftEmptySetSingleton;
LABEL_6:
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_1001FDE54((uint64_t)a2, a3, (uint64_t)v14);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v17;

    swift_bridgeObjectRelease();
    id v19 = v8;
    a2 = sub_1002EFE4C(v19, v18);

    swift_bridgeObjectRelease();
    if (!a2)
    {
      [self noSuchObjectErrorWithObjectID:v19];
      swift_willThrow();
    }
  }
  return a2;
}

uint64_t sub_1005A8344(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005A838C(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v1;
  sub_100094134(&qword_10090AAE8);
  swift_allocObject();
  id v4 = a1;
  return Future.init(_:)();
}

uint64_t sub_1005A840C()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  sub_100094134(&qword_10090AAE8);
  swift_allocObject();
  swift_retain();
  uint64_t v3 = Future.init(_:)();
  swift_beginAccess();
  id v4 = *(id *)(v1 + 16);
  swift_release();
  return v3;
}

uint64_t sub_1005A84E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005A851C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DFA0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DFA0);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1005A85E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1000D0FD4();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.utility(_:), v6);
  swift_retain();
  id v12 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1005A8DC8;
  *(void *)(v13 + 24) = v10;
  aBlock[4] = sub_1005A9000;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CBBC0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [ObjCClassFromMetadata waitForSyncEngineSystemAvailabilityBlockingQueue:a3 completionQueue:v12 completionBlock:v14];
  _Block_release(v14);
}

uint64_t sub_1005A87F0(uint64_t (*a1)(void))
{
  if (qword_100907990 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091DFA0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DADSystemAvailabilityChecker(Swift extension) systemAvailableFuture fulfilled", v5, 2u);
    swift_slowDealloc();
  }

  return a1(0);
}

void sub_1005A88E8(void (*a1)(void ***), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_retain();
  if ([ObjCClassFromMetadata hasPassedBuddy])
  {
    swift_release();
    LOBYTE(aBlock) = 0;
    a1(&aBlock);
  }
  else
  {
    sub_1000D0FD4();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.utility(_:), v12);
    uint64_t v18 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    id v19 = [objc_allocWithZone((Class)DADBuddyStateObserver) initWithQueue:v18];
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v19;
    v20[3] = sub_1005A8DC8;
    v20[4] = v16;
    uint64_t v38 = sub_1005A8F18;
    uint64_t v39 = v20;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_100236C78;
    uint64_t v37 = &unk_1008CBAD0;
    unint64_t v21 = _Block_copy(&aBlock);
    id v22 = v19;
    swift_release();
    [v22 setBuddyDidFinishHandler:v21];
    _Block_release(v21);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    uint64_t v38 = sub_1005A8F3C;
    uint64_t v39 = (void *)v23;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_100236C78;
    uint64_t v37 = &unk_1008CBB20;
    uint64_t v24 = _Block_copy(&aBlock);
    id v25 = v22;
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_1000D1088();
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000D10E0();
    uint64_t v26 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v26);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    swift_release();
    swift_beginAccess();
    uint64_t v27 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = v25;
  }
}

uint64_t sub_1005A8D88()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005A8DC0(void (*a1)(void ***), uint64_t a2)
{
  sub_1005A88E8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1005A8DCC(void *a1, uint64_t (*a2)(void))
{
  if (qword_100907990 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091DFA0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DADBuddyStateObserver(Swift extension) hasPassedBuddyFuture fulfilled", v7, 2u);
    swift_slowDealloc();
  }

  [a1 stop];
  return a2(0);
}

uint64_t sub_1005A8ED8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005A8F18()
{
  return sub_1005A8DCC(*(void **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1005A8F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005A8F34()
{
  return swift_release();
}

id sub_1005A8F3C()
{
  return [*(id *)(v0 + 16) start];
}

uint64_t sub_1005A8F4C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005A8F84(uint64_t a1, uint64_t a2)
{
  sub_1005A85E4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1005A8F8C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005A8FC4(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1 & 1;
  return v2(&v4);
}

uint64_t sub_1005A9000()
{
  return sub_1005A87F0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1005A9024()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DFB8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DFB8);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = *(void **)(v1 + 16);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 objectForKey:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10009A1A0(v30, v31);
    sub_10009A1B0((uint64_t)v31, (uint64_t)v30);
    uint64_t v9 = type metadata accessor for Date();
    int v10 = swift_dynamicCast();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    if (v10)
    {
      uint64_t v12 = *(void *)(v9 - 8);
      v11((uint64_t)v5, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v9) != 1)
      {
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v31);
        (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v9);
        uint64_t v13 = a1;
        uint64_t v14 = 0;
        return v11(v13, v14, 1, v9);
      }
    }
    else
    {
      v11((uint64_t)v5, 1, 1, v9);
    }
    sub_1000EACF4((uint64_t)v5);
    if (qword_100907998 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10091DFB8);
    sub_10009A1B0((uint64_t)v31, (uint64_t)v30);
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = a1;
      uint64_t v29 = v22;
      uint64_t v26 = v11;
      *(_DWORD *)unint64_t v21 = 136315138;
      sub_10009A1B0((uint64_t)v30, (uint64_t)v28);
      uint64_t v23 = String.init<A>(describing:)();
      v28[0] = sub_1000C51B8(v23, v24, &v29);
      uint64_t v11 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v30);
      swift_arrayDestroy();
      a1 = v27;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v30);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v31);
    uint64_t v13 = a1;
    uint64_t v14 = 1;
    return v11(v13, v14, 1, v9);
  }
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);

  return v16(a1, 1, 1, v15);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDate.setter(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = *(void **)(v1 + 16);
  sub_1000CAA4C(a1, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v6 setObject:isa forKey:v10];
  swift_unknownObjectRelease();

  return sub_1000EACF4(a1);
}

void (*RDSynchronizedKeyValueStore.lastDismissedDate.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8) + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  RDSynchronizedKeyValueStore.lastDismissedDate.getter((uint64_t)v4);
  return sub_1005A96F0;
}

void sub_1005A96F0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_1000CAA4C((uint64_t)v3, (uint64_t)v2);
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v2);
    sub_1000EACF4((uint64_t)v3);
  }
  else
  {
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t RDSynchronizedKeyValueStore.lastDismissedDateDidChangeExternally()()
{
  uint64_t v0 = sub_100094134(&qword_10091DFD0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  size_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[1] = RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(0xD00000000000002ELL, 0x8000000100792F90);
  sub_100094134(&qword_10091DFD8);
  sub_1000967F4(&qword_10091DFE0, &qword_10091DFD8);
  Publisher.filter(_:)();
  swift_release();
  sub_1000967F4(&qword_10091DFE8, &qword_10091DFD0);
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1005A9900(unsigned __int8 *a1)
{
  unsigned int v1 = a1[8];
  if (v1 >= 2) {
    return v1 == 3;
  }
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (!v3) {
    return 0;
  }
  if (v2[4] == 0xD000000000000023 && v2[5] == 0x80000001007D9090) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v5 = v2 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v7 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if (*(v5 - 1) == 0xD000000000000023 && *v5 == 0x80000001007D9090
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 1;
    }
    uint64_t result = 0;
    v5 += 2;
    if (v7 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1005A9A14@<X0>(uint64_t a1@<X8>)
{
  return RDSynchronizedKeyValueStore.lastDismissedDate.getter(a1);
}

uint64_t sub_1005A9A38(uint64_t a1)
{
  return RDSynchronizedKeyValueStore.lastDismissedDate.setter(a1);
}

void (*sub_1005A9A5C(void **a1))(uint64_t a1, char a2)
{
  size_t v3 = *(void *)(*(void *)(sub_100094134((uint64_t *)&unk_100909A40) - 8) + 64);
  *a1 = malloc(v3);
  uint64_t v4 = malloc(v3);
  uint64_t v5 = *v1;
  a1[1] = v4;
  a1[2] = v5;
  RDSynchronizedKeyValueStore.lastDismissedDate.getter((uint64_t)v4);
  return sub_1005A9AE8;
}

void sub_1005A9AE8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)a1;
  if (a2)
  {
    sub_1000CAA4C((uint64_t)v2, (uint64_t)v3);
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v3);
    sub_1000EACF4((uint64_t)v2);
  }
  else
  {
    RDSynchronizedKeyValueStore.lastDismissedDate.setter((uint64_t)v2);
  }
  free(v2);

  free(v3);
}

uint64_t sub_1005A9B58()
{
  uint64_t v0 = sub_100094134(&qword_10091DFD0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  size_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[1] = RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(0xD00000000000002ELL, 0x8000000100792F90);
  sub_100094134(&qword_10091DFD8);
  sub_1000967F4(&qword_10091DFE0, &qword_10091DFD8);
  Publisher.filter(_:)();
  swift_release();
  sub_1000967F4(&qword_10091DFE8, &qword_10091DFD0);
  uint64_t v4 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1005A9CFC()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_significantTimeNotificationStream);
  uint64_t v3 = swift_allocObject();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = ObjectType;
  uint64_t v6 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = sub_1005AB498;
  *(void *)(v2 + 24) = v5;

  return sub_100096314(v6);
}

void sub_1005A9DC4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 displayDateTimeZone];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1005A9E2C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setDisplayDateTimeZone:];
}

uint64_t sub_1005A9E9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091DFF0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091DFF0);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005A9F64()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (qword_1009079A0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10091DFF0);
    NSString v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updating display dates in all stores due to significant time change…", v5, 2u);
      swift_slowDealloc();
    }

    id v6 = [v1 persistentStoreCoordinator];
    id v7 = [v6 persistentStores];

    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v9 = result;
      if (result) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_8:
        if (v9 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(v8 + 8 * i + 32);
          }
          uint64_t v12 = v11;
          sub_1005AA188(v11);
        }
      }
    }

    return swift_bridgeObjectRelease_n();
  }
  return result;
}

void sub_1005AA188(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1009079A0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10091DFF0);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = v5;
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "UpdateDisplayDates BEGIN {store: %@}", v8, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    uint64_t v2 = v1;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v12 = [v5 persistentStoreCoordinator];
  [v11 setPersistentStoreCoordinator:v12];

  [v11 setTransactionAuthor:RDStoreControllerDisplayDateUpdaterAuthor];
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v2;
  v13[3] = v5;
  v13[4] = v11;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1005AA930;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_10008F6F4;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008CBC60;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v5;
  unint64_t v17 = v11;
  swift_retain();
  swift_release();
  [v17 performBlockAndWait:v15];
  _Block_release(v15);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v16;
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v24 = v17;
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v21 = 138412290;
      aBlock[0] = v18;
      uint64_t v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v18;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "UpdateDisplayDates END {store: %@}", v21, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      uint64_t v18 = v24;
    }
    else
    {
      swift_release();

      id v19 = v17;
    }
  }
}

void sub_1005AA5E8(uint64_t a1, void *a2, void *a3)
{
}

uint64_t type metadata accessor for RDDisplayDateUpdater()
{
  return self;
}

uint64_t sub_1005AA8F0()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1005AA930()
{
  sub_1005AA5E8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1005AA93C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005AA94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005AA95C()
{
  return swift_release();
}

void sub_1005AA964(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TimeZone.current.getter();
  Date.init()();
  uint64_t v12 = TimeZone.secondsFromGMT(for:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100094134(&qword_10090C688);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = sub_10039AD8C(KeyPath);
  swift_release();
  *(void *)(inited + 32) = v15;
  uint64_t v16 = swift_getKeyPath();
  uint64_t v17 = sub_1003A060C(v16, v12);
  swift_release();
  *(void *)(inited + 40) = v17;
  id v73 = (id)inited;
  specialized Array._endMutation()();
  uint64_t v18 = (void *)sub_1002F52FC(v73);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v19 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v20 = [(id)swift_getObjCClassFromMetadata() entity];
  [v19 setEntity:v20];

  [v19 setAffectedStores:0];
  id v71 = v18;
  [v19 setPredicate:v18];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_10077A530;
  *(void *)(v21 + 32) = a1;
  id v73 = (id)v21;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  id v22 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v24 = a2;
  [v19 setAffectedStores:isa];

  [v19 setFetchBatchSize:64];
  uint64_t v25 = v72;
  unint64_t v26 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v27 = v25;
  if (v25)
  {
    id v28 = v71;
LABEL_3:

    return;
  }
  unint64_t v29 = v26;
  unint64_t v30 = v26 >> 62;
  if (v26 >> 62)
  {
LABEL_50:
    unint64_t v64 = v30;
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v30 = v64;
    if (v31)
    {
LABEL_6:
      v65[0] = v30;
      v65[1] = v27;
      id v66 = v19;
      unint64_t v32 = v29 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      uint64_t v27 = 4;
      uint64_t v33 = &selRef_ckServerChangeTokens;
      *(void *)&long long v34 = 134218240;
      long long v68 = v34;
      unint64_t v69 = v29;
      unint64_t v70 = v29 & 0xC000000000000001;
      uint64_t v67 = v24;
      uint64_t v72 = v31;
      do
      {
        if (v32) {
          id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v35 = *(id *)(v29 + 8 * v27);
        }
        uint64_t v36 = v35;
        id v19 = (id)(v27 - 3);
        if (__OFADD__(v27 - 4, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        [v35 updateDisplayDate];
        if (v19 & 0x3F) == 0 && ([v24 v33[350]])
        {
          if (qword_1009079A0 != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          sub_10008E2DC(v37, (uint64_t)qword_10091DFF0);
          uint64_t v38 = v24;
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = swift_slowAlloc();
            *(_DWORD *)uint64_t v41 = v68;
            id v42 = [v38 updatedObjects];
            sub_1000963CC(0, (unint64_t *)&qword_100909B00);
            sub_100384A30();
            uint64_t v43 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            if ((v43 & 0xC000000000000001) != 0) {
              uint64_t v44 = __CocoaSet.count.getter();
            }
            else {
              uint64_t v44 = *(void *)(v43 + 16);
            }

            swift_bridgeObjectRelease();
            *(void *)(v41 + 4) = v44;

            *(_WORD *)(v41 + 12) = 2048;
            *(void *)(v41 + 14) = v19;
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "UpdateDisplayDates: Saving batch {updatedObjectsCount: %ld, totalUpdatedCount: %ld}", (uint8_t *)v41, 0x16u);
            swift_slowDealloc();
            unint64_t v29 = v69;
            unint64_t v24 = v67;
          }
          else
          {

            uint64_t v39 = v38;
          }

          id v73 = 0;
          uint64_t v33 = &selRef_ckServerChangeTokens;
          if (![v38 save:&v73])
          {
            id v60 = v73;
            swift_bridgeObjectRelease_n();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            id v28 = v66;
            id v19 = v36;
            goto LABEL_3;
          }
          id v45 = v73;
          uint64_t v31 = v72;
          unint64_t v32 = v70;
        }

        ++v27;
      }
      while (v19 != (id)v31);
      swift_bridgeObjectRelease();
      if (![v24 v33[350]])
      {
        if (qword_1009079A0 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_10008E2DC(v55, (uint64_t)qword_10091DFF0);
        swift_bridgeObjectRetain();
        id v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v56, v57))
        {

          swift_bridgeObjectRelease_n();
          return;
        }
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 134217984;
        if (v65[0])
        {
          swift_bridgeObjectRetain();
          uint64_t v59 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v59 = *(void **)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        id v73 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Not saving since there are no changes {totalUpdatedCount: %ld}", v58, 0xCu);
        swift_slowDealloc();

        goto LABEL_47;
      }
      if (qword_1009079A0 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_10008E2DC(v46, (uint64_t)qword_10091DFF0);
      id v47 = v24;
      swift_bridgeObjectRetain();
      id v48 = v47;
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = v68;
        id v52 = [v48 updatedObjects];
        sub_1000963CC(0, (unint64_t *)&qword_100909B00);
        sub_100384A30();
        uint64_t v53 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v53 & 0xC000000000000001) != 0) {
          uint64_t v54 = (void *)__CocoaSet.count.getter();
        }
        else {
          uint64_t v54 = *(void **)(v53 + 16);
        }

        swift_bridgeObjectRelease();
        id v73 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v51 + 12) = 2048;
        if (v65[0])
        {
          swift_bridgeObjectRetain();
          int v61 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          int v61 = *(void **)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        id v73 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "UpdateDisplayDates: Saving last objects {updatedObjectsCount: %ld, totalUpdatedCount: %ld}", (uint8_t *)v51, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v73 = 0;
      if ([v48 save:&v73])
      {
        id v62 = v73;
LABEL_47:

        return;
      }
      id v63 = v73;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v28 = v71;
      id v19 = v66;
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v31 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v31) {
      goto LABEL_6;
    }
  }

  swift_bridgeObjectRelease();
}

const char *sub_1005AB3D4()
{
  return "displayDateUpdatedForSecondsFromGMT";
}

id sub_1005AB3E0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 displayDateUpdatedForSecondsFromGMT];
  *a2 = result;
  return result;
}

id sub_1005AB414(void *a1, id *a2)
{
  return [*a2 setDisplayDateUpdatedForSecondsFromGMT:*a1];
}

uint64_t sub_1005AB428()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005AB460()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005AB498()
{
  return sub_1005A9F64();
}

uint64_t sub_1005AB4A0(uint64_t a1)
{
  uint64_t result = sub_1005AF4BC(&qword_10091E078, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_1005AB4F8(void *a1, void *a2, uint64_t a3, char *a4, uint64_t a5)
{
  *(void *)&long long v69 = a5;
  uint64_t v74 = a2;
  uint64_t v75 = a4;
  uint64_t v80 = a3;
  uint64_t v7 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v71 = *(void *)(v7 - 8);
  uint64_t v72 = v7;
  __chkstk_darwin(v7);
  unint64_t v70 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  unint64_t v64 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  *(void *)&long long v68 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v76);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v62 - v16;
  __chkstk_darwin(v18);
  uint64_t v73 = (uint64_t)&v62 - v19;
  uint64_t v20 = _s10PredicatesOMa(0);
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  uint64_t v23 = (uint64_t *)((char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v24 = a1;
  id v25 = [a1 customContext:v21];
  if (!v25) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v26 = v25;
  uint64_t v67 = v5;
  uint64_t v27 = (void *)REMSmartListCustomContext.filter.getter();

  uint64_t result = _swiftEmptyArrayStorage;
  if (v27)
  {
    unint64_t v29 = (char *)v23 + *(int *)(sub_100094134(&qword_100916948) + 64);
    void *v23 = v27;
    id v63 = v27;
    v23[1] = [v24 accountID];
    uint64_t v30 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v29, v80, v30);
    swift_storeEnumTagMultiPayload();
    uint64_t v62 = sub_10038F1F0();
    sub_10012607C((uint64_t)v23, _s10PredicatesOMa);
    (*(void (**)(char *, void, uint64_t))(v68 + 16))(v12, v69, v10);
    uint64_t v31 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    uint64_t v32 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v17, v31, v32);
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = (uint64_t)v12;
    uint64_t v34 = v73;
    sub_100520FD4(v33, (uint64_t)v17, v73);
    sub_1001F82BC(v34, (uint64_t)v14);
    LODWORD(v31) = swift_getEnumCaseMultiPayload();
    uint64_t v35 = (uint64_t)v14;
    uint64_t v36 = v24;
    sub_10012607C(v35, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
    uint64_t v37 = v74;
    if (v31 == 5)
    {
      id v38 = [v24 objectID];
      id v39 = [v38 uuid];

      os_log_type_t v40 = v64;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = UUID.uuidString.getter();
      uint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v66);
      id v44 = [v36 accountID];
      sub_100526968(v37, 2, v41, v43, v44, (uint64_t)v78);
      long long v68 = v78[1];
      long long v69 = v78[0];
      uint64_t v45 = v79;
      swift_bridgeObjectRelease();

      id v46 = [v36 accountID];
      sub_10012607C(v34, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      long long v47 = v68;
      *(_OWORD *)uint64_t v17 = v69;
      *((_OWORD *)v17 + 1) = v47;
      *((void *)v17 + 4) = v45;
      *((void *)v17 + 5) = v46;
      swift_storeEnumTagMultiPayload();
      sub_100431BD4((uint64_t)v17, v34);
    }
    id v48 = [v36 accountID];
    id v49 = [v37 persistentStoreOfAccountWithAccountID:v48];

    if (v49)
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_10077A530;
      *(void *)(v50 + 32) = v49;
      v77[0] = v50;
      specialized Array._endMutation()();
      id v49 = (id)v77[0];
    }
    uint64_t v51 = v67;
    id v52 = v63;
    uint64_t v53 = (void *)v62;
    uint64_t v54 = v70;
    REMCustomSmartListFilterDescriptor.operation.getter();
    int v55 = (*(uint64_t (**)(char *, uint64_t))(v71 + 88))(v54, v72);
    if (v55 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
    {
      uint64_t v56 = static Set<>.typesSupportedByCustomSmartList.getter();
      uint64_t v57 = static Set<>.typesIndescribableByNSPredicate.getter();
      sub_1005AE410(v57, v56, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1005AE5AC);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v55 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
      {
        uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return result;
      }
      static Set<>.typesSupportedByCustomSmartList.getter();
    }
    v77[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v77[4] = sub_1004705A8();
    v77[0] = v37;
    id v58 = v37;
    uint64_t v59 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v77);
    swift_bridgeObjectRelease();
    id v60 = sub_100522260((uint64_t)v58, (uint64_t)v53, v34, 0, 0, v80, v75, v59, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v49, 0);
    if (v51)
    {
      sub_10012607C(v34, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      swift_bridgeObjectRelease();

      return (void *)swift_bridgeObjectRelease();
    }
    else
    {
      int v61 = v60;
      swift_bridgeObjectRelease();
      sub_10012607C(v34, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v61;
    }
  }
  return result;
}

void sub_1005ABD10(void *a1@<X0>, char a2@<W1>, char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v46 = a3;
  id v49 = a1;
  uint64_t v52 = a5;
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s10PredicatesOMa(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void **)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)&double v17 = __chkstk_darwin(v15).n128_u64[0];
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0
    && (id v20 = objc_msgSend(a4, "customContext", v17)) != 0
    && (v21 = v20, uint64_t v22 = (void *)REMSmartListCustomContext.filter.getter(), v21, v22))
  {
    id v44 = a4;
    REMCustomSmartListFilterDescriptor.operation.getter();
    int v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
    if (v23 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
    {
      uint64_t v24 = static Set<>.typesSupportedByCustomSmartList.getter();
      uint64_t v25 = static Set<>.typesIndescribableByNSPredicate.getter();
      sub_1005AE410(v25, v24, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1005AE5AC);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v23 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        return;
      }
      static Set<>.typesSupportedByCustomSmartList.getter();
    }
    v53[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    v53[4] = sub_1004705A8();
    v53[0] = v49;
    id v27 = v49;
    uint64_t v28 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v53);
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v29)
    {
      uint64_t v31 = v50;
      uint64_t v30 = v51;
      (*(void (**)(char *, void, uint64_t))(v50 + 104))(v11, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v51);
      uint64_t v33 = v47;
      uint64_t v32 = v48;
      uint64_t v34 = (uint64_t)v45;
      (*(void (**)(char *, void, uint64_t))(v47 + 104))(v45, enum case for REMRemindersListDataView.SortingStyle.default(_:), v48);
      uint64_t v35 = v54;
      sub_1005AB4F8(v44, v27, (uint64_t)v11, v46, v34);
      if (v35)
      {

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
        uint64_t v42 = v52;
        REMRemindersListDataView.CountByCompleted.init(reminders:)();

        uint64_t v43 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
      }
    }
    else
    {
      uint64_t v36 = (char *)v14 + *(int *)(sub_100094134(&qword_100916948) + 64);
      *uint64_t v14 = v22;
      id v37 = v22;
      v14[1] = [v44 accountID];
      (*(void (**)(char *, void, uint64_t))(v50 + 104))(v36, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v51);
      swift_storeEnumTagMultiPayload();
      id v38 = (void *)sub_10038F1F0();
      sub_10012607C((uint64_t)v14, _s10PredicatesOMa);
      uint64_t v39 = v52;
      uint64_t v40 = v54;
      sub_10051EB6C((uint64_t)v27, (uint64_t)v38);
      if (!v40)
      {
        uint64_t v41 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v39, 0, 1, v41);
      }
    }
  }
  else
  {
    uint64_t v26 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v52, 1, 1, v26);
  }
}

uint64_t sub_1005AC2DC(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v110 = a5;
  uint64_t v106 = (char *)a4;
  os_log_type_t v102 = a2;
  id v99 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v94 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  id v93 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = _s10PredicatesOMa(0);
  __chkstk_darwin(v90);
  uint64_t v91 = (uint64_t *)((char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  __chkstk_darwin(v8);
  uint64_t v96 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  uint64_t v107 = *(void *)(v10 - 8);
  uint64_t v108 = v10;
  __chkstk_darwin(v10);
  id v88 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v87 - v13;
  uint64_t v109 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v14 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v101 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v112 = (char *)&v87 - v17;
  uint64_t v18 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v18 - 8);
  uint64_t v92 = (uint64_t)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v105 = (uint64_t)&v87 - v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v87 - v23;
  uint64_t v25 = sub_100094134(&qword_10091C4A8);
  uint64_t v26 = v25 - 8;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v87 - v30;
  uint64_t v32 = (char *)&v87 + *(int *)(v26 + 56) - v30;
  sub_1000BF710(a3, (uint64_t)&v87 - v30, &qword_100909C70);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v34 = v109;
  v33(v32, v106, v109);
  *(void *)&v31[*(int *)(v26 + 72)] = v110;
  uint64_t v35 = &v28[*(int *)(v26 + 56)];
  sub_1000BF710((uint64_t)v31, (uint64_t)v28, &qword_100909C70);
  uint64_t v100 = v33;
  v33(v35, v32, v34);
  uint64_t v36 = v34;
  uint64_t v37 = v107;
  sub_100096408((uint64_t)v28, (uint64_t)v24, &qword_100909C70);
  uint64_t v38 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v112, v35, v34);
  uint64_t v106 = v24;
  uint64_t v39 = (uint64_t)v24;
  uint64_t v40 = v105;
  sub_1000BF710(v39, v105, &qword_100909C70);
  uint64_t v41 = v40;
  uint64_t v42 = v40;
  uint64_t v43 = v108;
  uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t))(v37 + 48);
  if (v89(v42, 1) != 1)
  {
    id v46 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v103, v41, v43);
    swift_bridgeObjectRetain();
    uint64_t v47 = REMRemindersListDataView.CountByCompleted.incomplete.getter();
    uint64_t v48 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v46, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v112, v36);
    sub_1000966BC((uint64_t)v106, &qword_100909C70);
    sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
    if (!__OFADD__(v47, v48))
    {
      LOBYTE(v45) = v47 + v48 > 0;
      return v45 & 1;
    }
    __break(1u);
    goto LABEL_33;
  }
  id v44 = v110;
  swift_bridgeObjectRetain();
  sub_1000966BC(v41, &qword_100909C70);
  if (v44[2])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v112, v36);
    sub_1000966BC((uint64_t)v106, &qword_100909C70);
    sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
    LOBYTE(v45) = 1;
    return v45 & 1;
  }
  id v49 = v101;
  uint64_t v50 = v112;
  v100(v101, v112, v36);
  uint64_t v51 = v14;
  int v52 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v49, v36);
  if (v52 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v49, v36);
LABEL_11:
    id v53 = [v102 customContext];
    uint64_t v54 = v104;
    if (v53)
    {
      int v55 = v53;
      uint64_t v56 = (void *)REMSmartListCustomContext.filter.getter();

      if (v56)
      {
        uint64_t v57 = v96;
        REMCustomSmartListFilterDescriptor.operation.getter();
        int v58 = (*(uint64_t (**)(char *, uint64_t))(v97 + 88))(v57, v98);
        if (v58 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
        {
          uint64_t v59 = static Set<>.typesSupportedByCustomSmartList.getter();
          uint64_t v60 = static Set<>.typesIndescribableByNSPredicate.getter();
          sub_1005AE410(v60, v59, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1005AE5AC);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (v58 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
          {
LABEL_34:
            _diagnoseUnexpectedEnumCase<A>(type:)();
            __break(1u);
            goto LABEL_35;
          }
          static Set<>.typesSupportedByCustomSmartList.getter();
        }
        v111[3] = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
        v111[4] = sub_1004705A8();
        v111[0] = v99;
        id v61 = v99;
        uint64_t v62 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v111);
        swift_bridgeObjectRelease();
        uint64_t v63 = *(void *)(v62 + 16);
        swift_bridgeObjectRelease();
        if (!v63)
        {
          uint64_t v70 = sub_100094134(&qword_100916948);
          uint64_t v71 = (uint64_t)v91;
          uint64_t v72 = (char *)v91 + *(int *)(v70 + 64);
          void *v91 = v56;
          uint64_t v110 = v56;
          *(void *)(v71 + 8) = [v102 accountID];
          (*(void (**)(char *, void, uint64_t))(v51 + 104))(v72, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v109);
          swift_storeEnumTagMultiPayload();
          uint64_t v73 = (void *)sub_10038F1F0();
          sub_10012607C(v71, _s10PredicatesOMa);
          sub_1000EEBC8();
          id v74 = [objc_allocWithZone((Class)NSFetchRequest) init];
          id v75 = [(id)swift_getObjCClassFromMetadata() entity];
          [v74 setEntity:v75];

          [v74 setAffectedStores:0];
          [v74 setPredicate:v73];
          [v74 setFetchLimit:1];
          [v74 setAffectedStores:0];
          uint64_t v76 = NSManagedObjectContext.count<A>(for:)();
          long long v69 = (void (**)(char *, uint64_t))(v51 + 8);
          if (!v54)
          {
            uint64_t v45 = v76;

            LOBYTE(v45) = v45 > 0;
            (*v69)(v112, v109);
            sub_1000966BC((uint64_t)v106, &qword_100909C70);
            sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
            return v45 & 1;
          }

          goto LABEL_22;
        }
        uint64_t v110 = v56;
        uint64_t v64 = v94;
        uint64_t v65 = v93;
        uint64_t v66 = Subtasks;
        (*(void (**)(char *, void, uint64_t))(v94 + 104))(v93, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
        uint64_t v67 = v61;
        uint64_t v68 = v92;
        sub_1005ABD10(v67, 1, v65, v102, v92);
        if (v54)
        {

          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          long long v69 = (void (**)(char *, uint64_t))(v51 + 8);
LABEL_22:
          uint64_t v45 = (uint64_t)v106;
          (*v69)(v112, v109);
          sub_1000966BC(v45, &qword_100909C70);
          sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
          return v45 & 1;
        }
        (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
        uint64_t v80 = v108;
        int v81 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v68, 1, v108);
        os_log_t v82 = v112;
        uint64_t v83 = v68;
        if (v81 == 1)
        {

          (*(void (**)(char *, uint64_t))(v51 + 8))(v82, v109);
          sub_1000966BC((uint64_t)v106, &qword_100909C70);
          sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
          uint64_t v78 = v68;
          id v77 = &qword_100909C70;
          goto LABEL_25;
        }
        uint64_t v84 = v107;
        os_log_type_t v85 = v88;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v88, v83, v80);
        uint64_t v45 = REMRemindersListDataView.CountByCompleted.incomplete.getter();
        uint64_t v86 = REMRemindersListDataView.CountByCompleted.completed.getter();

        (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v80);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v82, v109);
        sub_1000966BC((uint64_t)v106, &qword_100909C70);
        sub_1000966BC((uint64_t)v31, &qword_10091C4A8);
        if (!__OFADD__(v45, v86))
        {
          LOBYTE(v45) = v45 + v86 > 0;
          return v45 & 1;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
LABEL_24:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v36);
    sub_1000966BC((uint64_t)v106, &qword_100909C70);
    id v77 = &qword_10091C4A8;
    uint64_t v78 = (uint64_t)v31;
LABEL_25:
    sub_1000966BC(v78, v77);
    LOBYTE(v45) = 0;
    return v45 & 1;
  }
  if (v52 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v49, v36);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v52 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)) {
    goto LABEL_11;
  }
  if (v52 == enum case for REMRemindersListDataView.ShowCompleted.on(_:)) {
    goto LABEL_24;
  }
LABEL_35:
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1005ACF5C@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)&double v12 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    id v15 = [a1 uuid:v12];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    id v19 = sub_100529EE0((void *)2, v16, v18, a2, a3);
    if (!v19) {
      id v19 = [self newObjectID];
    }
    uint64_t v20 = v19;
    REMObjectID.codable.getter();
    REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)();

    uint64_t v21 = type metadata accessor for REMManualOrdering.ManualOrderingID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a5, 0, 1, v21);
  }
  else
  {
    uint64_t v23 = type metadata accessor for REMManualOrdering.ManualOrderingID();
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    return v24(a5, 1, 1, v23);
  }
}

void sub_1005AD16C(void (*a1)(char *, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v152 = a2;
  uint64_t v142 = a4;
  uint64_t v6 = sub_100094134(&qword_100909C60);
  __chkstk_darwin(v6 - 8);
  unint64_t v141 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v144 = (uint64_t)&v125 - v9;
  uint64_t v140 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  unint64_t v138 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v143 = (char *)&v125 - v12;
  uint64_t v13 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v13 - 8);
  uint64_t v133 = (uint64_t)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v149 = v15;
  uint64_t v150 = v16;
  __chkstk_darwin(v15);
  uint64_t v145 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v148 = (char *)&v125 - v19;
  uint64_t v20 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v146 = *(void *)(v20 - 8);
  uint64_t v147 = v20;
  __chkstk_darwin(v20);
  uint64_t v137 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v136 = (char *)&v125 - v23;
  __chkstk_darwin(v24);
  uint64_t v135 = (char *)&v125 - v25;
  __chkstk_darwin(v26);
  uint64_t v153 = (uint64_t)&v125 - v27;
  uint64_t v28 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v28 - 8);
  uint64_t v134 = (uint64_t)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v154 = (uint64_t)&v125 - v31;
  __chkstk_darwin(v32);
  uint64_t v155 = (uint64_t)&v125 - v33;
  uint64_t v160 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v156 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  id v159 = (void (*)(uint64_t, uint64_t))((char *)&v125 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v164 = *(void **)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v36 = (char *)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v158 = (char *)&v125 - v38;
  uint64_t v39 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v161 = *(void (**)(char *, uint64_t))(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v125 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  id v44 = (char *)&v125 - v43;
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v125 - v46;
  __chkstk_darwin(v48);
  uint64_t v157 = (char *)&v125 - v49;
  uint64_t v50 = (void *)REMRemindersListDataView.CustomSmartListInvocation.Parameters.smartList.getter();
  long long v163 = a1;
  uint64_t v51 = a1;
  int v52 = a3;
  id v53 = v165;
  id v165 = sub_1005AF2D0(v51, a3, v50);

  if (v53) {
    return;
  }
  uint64_t v129 = v47;
  uint64_t v130 = v44;
  uint64_t v54 = v156;
  uint64_t v131 = v36;
  int v55 = v164;
  uint64_t v126 = v41;
  uint64_t v132 = v39;
  uint64_t v127 = v52;
  uint64_t v56 = (uint64_t)v157;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter();
  uint64_t v57 = v158;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.fetchSubtasks.getter();
  uint64_t v58 = (uint64_t)v159;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.sortingStyle.getter();
  uint64_t v125 = sub_1005AB4F8(v165, v163, v56, v57, v58);
  uint64_t v128 = 0;
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v58, v160);
  uint64_t v59 = (void (*)(char *, uint64_t))v55[1];
  uint64_t v164 = v55 + 1;
  v59(v57, Subtasks);
  uint64_t v60 = v161;
  id v61 = (void (*)(uint64_t, uint64_t))*((void *)v161 + 1);
  uint64_t v62 = v132;
  uint64_t v160 = (uint64_t)v161 + 8;
  v61(v56, v132);
  char v63 = REMRemindersListDataView.CustomSmartListInvocation.Parameters.countCompleted.getter();
  id v159 = v61;
  if ((v63 & 1) != 0
    && (uint64_t v64 = v129,
        REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter(),
        uint64_t v65 = v130,
        (*((void (**)(char *, void, uint64_t))v60 + 13))(v130, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v62), char v66 = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)(), v61((uint64_t)v65, v62), v61((uint64_t)v64, v62), (v66 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v67 = v155;
    REMRemindersListDataView.CountByCompleted.init(reminders:)();
    uint64_t v68 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
    uint64_t v69 = (uint64_t)v163;
  }
  else
  {
    char v70 = REMRemindersListDataView.CustomSmartListInvocation.Parameters.countCompleted.getter();
    uint64_t v71 = v131;
    REMRemindersListDataView.CustomSmartListInvocation.Parameters.fetchSubtasks.getter();
    uint64_t v72 = v154;
    uint64_t v69 = (uint64_t)v163;
    uint64_t v73 = v165;
    uint64_t v74 = v128;
    sub_1005ABD10(v163, v70 & 1, v71, v165, v154);
    uint64_t v67 = v155;
    if (v74)
    {
      v59(v71, Subtasks);

      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v128 = 0;
    v59(v71, Subtasks);
    sub_100096408(v72, v67, &qword_100909C70);
  }
  id v75 = [v151 fetchResultTokenToDiffAgainst];
  uint64_t v76 = v153;
  uint64_t v77 = v128;
  sub_10051F2BC(v75, v69, v153);
  if (v77)
  {
    sub_1000966BC(v67, &qword_100909C70);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v78 = v69;

  uint64_t v79 = v148;
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.remindersPrefetch.getter();
  uint64_t v80 = v150;
  int v81 = (uint64_t *)v145;
  os_log_t v82 = v79;
  uint64_t v83 = v149;
  (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v145, v82, v149);
  int v84 = (*(uint64_t (**)(uint64_t *, uint64_t))(v80 + 88))(v81, v83);
  os_log_type_t v85 = v165;
  if (v84 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v80 + 96))(v81, v83);
    uint64_t v86 = (void *)*v81;
    uint64_t v87 = v125;
    swift_bridgeObjectRetain();
    id v88 = sub_1005280D0((uint64_t)v86, (uint64_t)v87, v78, v127, 0);
LABEL_14:
    uint64_t v164 = v88;
    goto LABEL_15;
  }
  uint64_t v89 = v127;
  if (v84 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v150 + 96))(v81, v83);
    uint64_t v90 = *v81;
    uint64_t v87 = v125;
    swift_bridgeObjectRetain();
    id v88 = sub_100528BCC(v90, v76, v78, v89, 0);
    goto LABEL_14;
  }
  if (v84 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    uint64_t v92 = (uint64_t)v126;
    if (v84 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return;
    }
    uint64_t v93 = v67;
    uint64_t v164 = _swiftEmptyArrayStorage;
    uint64_t v87 = v125;
    uint64_t v91 = v148;
    goto LABEL_16;
  }
  (*(void (**)(uint64_t *, uint64_t))(v150 + 96))(v81, v83);
  uint64_t v164 = (void *)*v81;
  uint64_t v111 = (uint64_t)v81 + *(int *)(sub_100094134(&qword_100909C78) + 48);
  uint64_t v112 = v133;
  sub_100096408(v111, v133, &qword_100909C68);
  uint64_t v87 = v125;
  swift_bridgeObjectRetain();
  uint64_t v164 = sub_1005280D0((uint64_t)v164, (uint64_t)v87, v78, v89, 0);
  sub_10052929C(v112, (uint64_t)v87, v78, v89, 0);
  os_log_type_t v85 = v165;
  sub_1000966BC(v112, &qword_100909C68);
LABEL_15:
  swift_bridgeObjectRelease();
  uint64_t v91 = v148;
  uint64_t v92 = (uint64_t)v126;
  uint64_t v93 = v67;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v150 + 8))(v91, v149);
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.showCompleted.getter();
  uint64_t v94 = v163;
  sub_1005AC2DC(v163, v85, v93, v92, v87);
  uint64_t v128 = 0;
  v159(v92, v132);
  sub_1000BF710(v93, v134, &qword_100909C70);
  swift_bridgeObjectRetain();
  REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  id v95 = [v85 objectID];
  id v96 = [v85 accountID];
  char ManualOrdering = REMRemindersListDataView.CustomSmartListInvocation.Parameters.shouldFetchManualOrderingID.getter();
  sub_1005ACF5C(v95, v96, v94, ManualOrdering & 1, v144);

  if (qword_1009079A8 != -1) {
    swift_once();
  }
  uint64_t v98 = type metadata accessor for Logger();
  sub_10008E2DC(v98, (uint64_t)qword_10091E040);
  uint64_t v99 = v146;
  uint64_t v100 = v147;
  uint64_t v101 = (void *)(v146 + 16);
  os_log_type_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 16);
  uint64_t v103 = v135;
  v102(v135, v76, v147);
  uint64_t v104 = v136;
  long long v163 = v102;
  uint64_t v164 = v101;
  v102(v136, v76, v100);
  swift_bridgeObjectRetain();
  uint64_t v105 = Logger.logObject.getter();
  int v106 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v105, (os_log_type_t)v106))
  {
    LODWORD(v161) = v106;
    uint64_t v107 = swift_slowAlloc();
    *(_DWORD *)uint64_t v107 = 134218496;
    uint64_t v108 = v87[2];
    swift_bridgeObjectRelease();
    uint64_t v166 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v107 + 12) = 2048;
    uint64_t v109 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
    if ((v109 & 0xC000000000000001) != 0) {
      uint64_t v110 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v110 = *(void *)(v109 + 16);
    }
    swift_bridgeObjectRelease();
    id v119 = *(void (**)(char *, uint64_t))(v99 + 8);
    uint64_t Subtasks = (v99 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v119(v103, v100);
    uint64_t v166 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v107 + 22) = 2048;
    uint64_t v120 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
    if ((v120 & 0xC000000000000001) != 0) {
      uint64_t v121 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v121 = *(void *)(v120 + 16);
    }
    swift_bridgeObjectRelease();
    v119(v104, v100);
    uint64_t v166 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v161, "reminders %ld updated %ld inserted %ld", (uint8_t *)v107, 0x20u);
    swift_slowDealloc();

    uint64_t v114 = (uint64_t)v141;
    uint64_t v118 = v144;
    uint64_t v115 = v140;
    uint64_t v116 = v100;
    os_log_type_t v117 = v137;
    uint64_t v161 = v119;
  }
  else
  {
    NSString v113 = *(void (**)(char *, uint64_t))(v99 + 8);
    uint64_t Subtasks = (v99 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v113(v104, v100);
    uint64_t v161 = v113;
    v113(v103, v100);

    swift_bridgeObjectRelease_n();
    uint64_t v114 = (uint64_t)v141;
    uint64_t v115 = v140;
    uint64_t v116 = v100;
    os_log_type_t v117 = v137;
    uint64_t v118 = v144;
  }
  uint64_t v122 = v139;
  uint64_t v123 = v143;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v138, v143, v115);
  uint64_t v124 = v153;
  v163(v117, v153, v116);
  sub_1000BF710(v118, v114, &qword_100909C60);
  REMRemindersListDataView.CustomSmartListInvocation.Result.init(model:diff:smartList:manualOrderingID:)();
  sub_1000966BC(v118, &qword_100909C60);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v115);
  v161((char *)v124, v116);
  sub_1000966BC(v155, &qword_100909C70);
}

uint64_t sub_1005AE270()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E040);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E040);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005AE338(uint64_t a1, uint64_t a2)
{
  return sub_1005AE410(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1005AE5AC);
}

uint64_t sub_1005AE3A4(uint64_t a1, uint64_t a2)
{
  return sub_1005AE410(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1005AEDB8);
}

uint64_t sub_1005AE410(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

void sub_1005AE5AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a2;
  uint64_t v69 = a1;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v7 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v66 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v66 - v12;
  __n128 v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v66 - v15;
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(a4 + 16);
  uint64_t v81 = v7 + 16;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v76 = v7;
  if (v20 >= v19)
  {
    uint64_t v73 = 0;
    int64_t v43 = 0;
    uint64_t v44 = *(void *)(a3 + 56);
    int64_t v68 = a3 + 56;
    uint64_t v45 = 1 << *(unsigned char *)(a3 + 32);
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    unint64_t v47 = v46 & v44;
    int64_t v70 = (unint64_t)(v45 + 63) >> 6;
    uint64_t v77 = a4 + 56;
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v80 = v16;
    if ((v46 & v44) != 0) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v50 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      if (v50 < v70)
      {
        unint64_t v51 = *(void *)(v68 + 8 * v50);
        int64_t v52 = v43 + 1;
        if (!v51)
        {
          int64_t v52 = v43 + 2;
          if (v43 + 2 >= v70) {
            goto LABEL_62;
          }
          unint64_t v51 = *(void *)(v68 + 8 * v52);
          if (!v51)
          {
            int64_t v52 = v43 + 3;
            if (v43 + 3 >= v70) {
              goto LABEL_62;
            }
            unint64_t v51 = *(void *)(v68 + 8 * v52);
            if (!v51)
            {
              uint64_t v53 = v43 + 4;
              if (v43 + 4 >= v70) {
                goto LABEL_62;
              }
              unint64_t v51 = *(void *)(v68 + 8 * v53);
              if (!v51)
              {
                while (1)
                {
                  int64_t v52 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    goto LABEL_68;
                  }
                  if (v52 >= v70) {
                    goto LABEL_62;
                  }
                  unint64_t v51 = *(void *)(v68 + 8 * v52);
                  ++v53;
                  if (v51) {
                    goto LABEL_53;
                  }
                }
              }
              int64_t v52 = v43 + 4;
            }
          }
        }
LABEL_53:
        uint64_t v74 = (v51 - 1) & v51;
        int64_t v75 = v52;
        for (unint64_t i = __clz(__rbit64(v51)) + (v52 << 6); ; unint64_t i = __clz(__rbit64(v47)) | (v43 << 6))
        {
          uint64_t v54 = *(void *)(a3 + 48);
          uint64_t v55 = *(void *)(v7 + 72);
          unint64_t v72 = i;
          uint64_t v56 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
          v56(v80, v54 + v55 * i, PredicateType, v17);
          sub_1005AF4BC(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
          uint64_t v57 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v58 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            uint64_t v71 = (char *)((unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
            uint64_t v60 = ~v58;
            while (1)
            {
              ((void (*)(char *, unint64_t, uint64_t))v56)(v10, *(void *)(v79 + 48) + v59 * v55, PredicateType);
              sub_1005AF4BC((unint64_t *)&qword_100914720, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
              char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v62 = *v48;
              (*v48)(v10, PredicateType);
              if (v61) {
                break;
              }
              unint64_t v59 = (v59 + 1) & v60;
              if (((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              {
                a3 = v78;
                a4 = v79;
                int64_t v43 = v75;
                uint64_t v7 = v76;
                char v63 = v80;
                unint64_t v47 = v74;
                goto LABEL_60;
              }
            }
            v62(v80, PredicateType);
            *(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            unint64_t v47 = v74;
            BOOL v28 = __OFADD__(v73++, 1);
            a3 = v78;
            a4 = v79;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            if (v28) {
              goto LABEL_66;
            }
            if (!v74) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v62 = *v48;
            a3 = v78;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            char v63 = v80;
            unint64_t v47 = v74;
LABEL_60:
            v62(v63, PredicateType);
            if (!v47) {
              goto LABEL_40;
            }
          }
LABEL_39:
          uint64_t v74 = (v47 - 1) & v47;
          int64_t v75 = v43;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v67 = a4 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a4 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & v22;
    int64_t v68 = (unint64_t)(v23 + 63) >> 6;
    unint64_t v72 = v7 + 32;
    uint64_t v73 = 0;
    uint64_t v77 = a3 + 56;
    uint64_t v80 = (char *)(v7 + 8);
    uint64_t v71 = (char *)&v66 - v15;
    if ((v24 & v22) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v30 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v30 < v68)
      {
        unint64_t v31 = *(void *)(v67 + 8 * v30);
        int64_t v32 = v21 + 1;
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 2;
        if (v21 + 2 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 3;
        if (v21 + 3 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31)
        {
LABEL_23:
          uint64_t v74 = (v31 - 1) & v31;
          int64_t v75 = v32;
          for (unint64_t j = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t j = __clz(__rbit64(v25)) | (v21 << 6))
          {
            uint64_t v34 = *(void *)(v7 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16);
            v35(v18, *(void *)(a4 + 48) + v34 * j, PredicateType, v17);
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v18, PredicateType);
            sub_1005AF4BC(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
            uint64_t v36 = v13;
            uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v38 = -1 << *(unsigned char *)(a3 + 32);
            unint64_t v39 = v37 & ~v38;
            if ((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
            {
              int64_t v70 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v40 = ~v38;
              while (1)
              {
                ((void (*)(char *, unint64_t, uint64_t))v35)(v10, *(void *)(v78 + 48) + v39 * v34, PredicateType);
                sub_1005AF4BC((unint64_t *)&qword_100914720, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
                char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v42 = *(void (**)(char *, uint64_t))v80;
                (*(void (**)(char *, uint64_t))v80)(v10, PredicateType);
                if (v41) {
                  break;
                }
                unint64_t v39 = (v39 + 1) & v40;
                if (((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
                {
                  a3 = v78;
                  int64_t v21 = v75;
                  uint64_t v7 = v76;
                  uint64_t v13 = v36;
                  uint64_t v18 = v71;
                  goto LABEL_30;
                }
              }
              v42(v36, PredicateType);
              uint64_t v26 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v27 = 1 << v39;
              uint64_t v13 = v36;
              *(unint64_t *)((char *)v69 + v26) |= v27;
              unint64_t v25 = v74;
              BOOL v28 = __OFADD__(v73++, 1);
              a3 = v78;
              a4 = v79;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v18 = v71;
              if (v28) {
                goto LABEL_65;
              }
              if (!v74) {
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v42 = *(void (**)(char *, uint64_t))v80;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v13 = v36;
              uint64_t v18 = v71;
LABEL_30:
              unint64_t v25 = v74;
              v42(v13, PredicateType);
              a4 = v79;
              if (!v25) {
                goto LABEL_10;
              }
            }
LABEL_9:
            uint64_t v74 = (v25 - 1) & v25;
            int64_t v75 = v21;
          }
        }
        uint64_t v33 = v21 + 4;
        if (v21 + 4 < v68)
        {
          unint64_t v31 = *(void *)(v67 + 8 * v33);
          if (v31)
          {
            int64_t v32 = v21 + 4;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v32 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_67;
            }
            if (v32 >= v68) {
              break;
            }
            unint64_t v31 = *(void *)(v67 + 8 * v32);
            ++v33;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_62:
      uint64_t v64 = v66;
      uint64_t v65 = v73;
      swift_retain();
      sub_10023FF44(v69, v64, v65, a3);
      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
}

void sub_1005AEDB8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v53 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v54 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v56 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          uint64_t v57 = (v9 - 1) & v9;
          int64_t v59 = v6;
          unint64_t v11 = __clz(__rbit64(v9)) | (v6 << 6);
        }
        else
        {
          int64_t v12 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v54) {
            goto LABEL_63;
          }
          unint64_t v13 = *(void *)(v53 + 8 * v12);
          int64_t v14 = v6 + 1;
          if (!v13)
          {
            int64_t v14 = v6 + 2;
            if (v6 + 2 >= v54) {
              goto LABEL_63;
            }
            unint64_t v13 = *(void *)(v53 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v6 + 3;
              if (v6 + 3 >= v54) {
                goto LABEL_63;
              }
              unint64_t v13 = *(void *)(v53 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v6 + 4;
                if (v6 + 4 >= v54) {
                  goto LABEL_63;
                }
                unint64_t v13 = *(void *)(v53 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_67;
                    }
                    if (v14 >= v54) {
                      goto LABEL_63;
                    }
                    unint64_t v13 = *(void *)(v53 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v14 = v6 + 4;
              }
            }
          }
LABEL_22:
          uint64_t v57 = (v13 - 1) & v13;
          int64_t v59 = v14;
          unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        Swift::Int v16 = *(void *)(v5 + 40);
        id v17 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
        Swift::Int v18 = NSObject._rawHashValue(seed:)(v16);
        uint64_t v19 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v20 = v18 & ~v19;
        unint64_t v21 = v20 >> 6;
        uint64_t v22 = 1 << v20;
        if (((1 << v20) & *(void *)(v10 + 8 * (v20 >> 6))) != 0) {
          break;
        }
LABEL_6:

        uint64_t v4 = a4;
        unint64_t v9 = v57;
        int64_t v6 = v59;
      }
      type metadata accessor for REMObjectID_Codable();
      id v23 = *(id *)(*(void *)(v5 + 48) + 8 * v20);
      char v24 = static NSObject.== infix(_:_:)();

      if ((v24 & 1) == 0)
      {
        uint64_t v25 = ~v19;
        for (unint64_t i = v20 + 1; ; unint64_t i = v27 + 1)
        {
          unint64_t v27 = i & v25;
          uint64_t v5 = a3;
          if (((*(void *)(v10 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0) {
            break;
          }
          id v28 = *(id *)(*(void *)(a3 + 48) + 8 * v27);
          char v29 = static NSObject.== infix(_:_:)();

          if (v29)
          {

            unint64_t v21 = v27 >> 6;
            uint64_t v22 = 1 << v27;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

LABEL_30:
      int64_t v6 = v59;
      uint64_t v5 = a3;
      a1[v21] |= v22;
      unint64_t v9 = v57;
      BOOL v30 = __OFADD__(v56++, 1);
      uint64_t v4 = a4;
      if (v30) {
        goto LABEL_66;
      }
    }
  }
  int64_t v31 = 0;
  uint64_t v55 = a3 + 56;
  uint64_t v56 = 0;
  uint64_t v32 = 1 << *(unsigned char *)(a3 + 32);
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  else {
    uint64_t v33 = -1;
  }
  unint64_t v34 = v33 & *(void *)(a3 + 56);
  int64_t v58 = (unint64_t)(v32 + 63) >> 6;
  uint64_t v35 = a4 + 56;
  while (1)
  {
    if (v34)
    {
      unint64_t v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v37 = v31;
      unint64_t v38 = v36 | (v31 << 6);
      uint64_t v5 = a3;
      goto LABEL_55;
    }
    int64_t v39 = v31 + 1;
    uint64_t v5 = a3;
    if (__OFADD__(v31, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v39 >= v58) {
      goto LABEL_63;
    }
    unint64_t v40 = *(void *)(v55 + 8 * v39);
    int64_t v41 = v31 + 1;
    if (!v40)
    {
      int64_t v41 = v31 + 2;
      if (v31 + 2 >= v58) {
        goto LABEL_63;
      }
      unint64_t v40 = *(void *)(v55 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v31 + 3;
        if (v31 + 3 >= v58) {
          goto LABEL_63;
        }
        unint64_t v40 = *(void *)(v55 + 8 * v41);
        if (!v40) {
          break;
        }
      }
    }
LABEL_54:
    unint64_t v34 = (v40 - 1) & v40;
    int64_t v37 = v41;
    unint64_t v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    unint64_t v60 = v38;
    Swift::Int v43 = *(void *)(v4 + 40);
    id v44 = *(id *)(*(void *)(v5 + 48) + 8 * v38);
    Swift::Int v45 = NSObject._rawHashValue(seed:)(v43);
    uint64_t v46 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v47 = v45 & ~v46;
    if (((*(void *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
      goto LABEL_38;
    }
    type metadata accessor for REMObjectID_Codable();
    id v48 = *(id *)(*(void *)(a4 + 48) + 8 * v47);
    uint64_t v5 = static NSObject.== infix(_:_:)();

    if (v5)
    {
LABEL_60:

      *(unint64_t *)((char *)a1 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
      BOOL v30 = __OFADD__(v56++, 1);
      uint64_t v4 = a4;
      int64_t v31 = v37;
      if (v30)
      {
        __break(1u);
LABEL_63:
        swift_retain();
        sub_100240568(a1, a2, v56, v5);
        return;
      }
    }
    else
    {
      uint64_t v49 = ~v46;
      while (1)
      {
        unint64_t v47 = (v47 + 1) & v49;
        if (((*(void *)(v35 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
          break;
        }
        id v50 = *(id *)(*(void *)(a4 + 48) + 8 * v47);
        uint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5) {
          goto LABEL_60;
        }
      }
LABEL_38:

      uint64_t v4 = a4;
      int64_t v31 = v37;
    }
  }
  uint64_t v42 = v31 + 4;
  if (v31 + 4 >= v58) {
    goto LABEL_63;
  }
  unint64_t v40 = *(void *)(v55 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v31 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v58) {
      goto LABEL_63;
    }
    unint64_t v40 = *(void *)(v55 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_54;
    }
  }
LABEL_68:
  __break(1u);
}

id sub_1005AF2D0(void *a1, void *a2, id a3)
{
  uint64_t v7 = REMSmartListTypeCustom;
  id v8 = [a3 objectID];
  if (qword_100907B18 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100942620;
  swift_retain();
  uint64_t v10 = sub_10064C1FC(v7, v8, a1, v9);

  id result = (id)swift_release();
  if (v3) {
    return result;
  }
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077A530;
  *(void *)(v12 + 32) = v10;
  unint64_t v18 = v12;
  specialized Array._endMutation()();
  unint64_t v13 = v10;
  unint64_t v14 = (unint64_t)sub_10064A824(v18, a2);
  id result = (id)swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_6;
    }
LABEL_11:
    swift_bridgeObjectRelease();

    return a3;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_6:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_9;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v14 + 32);
LABEL_9:
    id v16 = v15;
    swift_bridgeObjectRelease();

    return v16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005AF4BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s34PersistentHistoryTruncationHandlerOMa_1()
{
  return &_s34PersistentHistoryTruncationHandlerON_1;
}

uint64_t sub_1005AF514()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E080);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E080);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDSavedAttachment.recordTypes()()
{
  return &off_1008B7528;
}

uint64_t static REMCDSavedAttachment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDSavedAttachment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v15 = v14;

      [v10 setAccount:a2];
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      REMCDSavedAttachment.mergeData(from:accountID:)((CKRecord)a1, v16);
      swift_bridgeObjectRelease();
      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_1009079B0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10091E080);
      id v18 = a2;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        uint64_t v32 = v4;
        *(_DWORD *)uint64_t v21 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v22 = String.init<A>(describing:)();
        uint64_t v32 = sub_1000C51B8(v22, v23, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2082;
        id v24 = [v18 remObjectID:v31];
        if (v24)
        {
          uint64_t v25 = v24;
          id v26 = [v24 description];

          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v29 = v28;
        }
        else
        {
          unint64_t v29 = 0xE300000000000000;
          uint64_t v27 = 7104878;
        }
        uint64_t v32 = sub_1000C51B8(v27, v29, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::Void __swiftcall REMCDSavedAttachment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v18 = String._bridgeToObjectiveC()();
  v59.receiver = v2;
  v59.super_class = ObjectType;
  [super mergeDataFromRecord:from.super.isa accountID:v18];

  id v19 = [(objc_class *)from.super.isa recordID];
  NSString v20 = [v19 recordName];

  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v53 = v8;
  uint64_t v54 = v10;
  uint64_t v55 = v9;
  NSString v21 = [v3 ckIdentifierFromRecordName:v20, v14];

  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v21];

  uint64_t v22 = 8;
  unint64_t v23 = &byte_1008B7520;
  unint64_t v56 = 0x80000001007CEB80;
  id v24 = &type metadata for String;
  do
  {
    int v26 = *v23++;
    switch(v26)
    {
      case 2:
        uint64_t v27 = v24;
        sub_10012451C();
        uint64_t v28 = type metadata accessor for Date();
        CKRecordKeyValueSetting.subscript.getter();
        uint64_t v29 = *(void *)(v28 - 8);
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v28) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v28);
        }
        [v3 setLastModifiedDate:isa];

        id v24 = v27;
        break;
      case 5:
        if (CKRecord.subscript.getter())
        {
          self;
          uint64_t v31 = (void *)swift_dynamicCastObjCClass();
          if (!v31) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        id v32 = sub_1000C50EC(v31);

        if (v32)
        {
          type metadata accessor for REMCDSavedReminder();
          uint64_t v33 = (void *)swift_dynamicCastClass();
          if (!v33) {
        }
          }
        else
        {
          uint64_t v33 = 0;
        }
        [v3 setReminder:v33];

        break;
      case 6:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (*((void *)&v58 + 1))
        {
          NSString v25 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v25 = 0;
        }
        [v3 setAttachmentTypeRawValue:v25];
        goto LABEL_9;
      case 7:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (*((void *)&v58 + 1))
        {
          NSString v25 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v25 = 0;
        }
        [v3 setUti:v25];
LABEL_9:

        break;
      default:
        break;
    }
    --v22;
  }
  while (v22);
  sub_1004C1A54(from.super.isa, 0x617461646174654DLL, 1, &v58);
  unint64_t v34 = *((void *)&v58 + 1);
  if (*((void *)&v58 + 1) >> 60 == 15)
  {
    Class v35 = 0;
  }
  else
  {
    uint64_t v36 = v58;
    Class v35 = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F20(v36, v34);
  }
  [v3 setMetadata:v35];

  id v37 = [(objc_class *)from.super.isa encryptedValues];
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 objectForKeyedSubscript:v38];
  swift_unknownObjectRelease();

  if (!v39) {
    return;
  }
  id v57 = v39;
  sub_100094134(&qword_100909AB0);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  long long v40 = v58;
  if (!CKRecord.subscript.getter())
  {
LABEL_40:
    swift_bridgeObjectRelease();
    return;
  }
  self;
  int64_t v41 = (void *)swift_dynamicCastObjCClass();
  if (!v41)
  {
    swift_unknownObjectRelease();
    goto LABEL_40;
  }
  id v42 = [v41 fileURL];
  if (v42)
  {
    Swift::Int v43 = v42;
    id v44 = v52;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = (uint64_t)v53;
    uint64_t v46 = v54;
    unint64_t v47 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    id v48 = v44;
    uint64_t v49 = v55;
    v47(v53, v48, v55);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v45, 0, 1, v49);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v49) != 1)
    {
      uint64_t v50 = v51;
      v47((char *)v51, (char *)v45, v49);
      sub_10061BF3C(v50, v40, *((uint64_t *)&v40 + 1), 0);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v50, v49);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, 1, 1, v55);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000966BC(v45, (uint64_t *)&unk_100909E40);
}

Swift::String __swiftcall REMCDSavedAttachment.recordType()()
{
  uint64_t v0 = 0x7474416465766153;
  uint64_t v1 = (void *)0xEF746E656D686361;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

CKRecord_optional __swiftcall REMCDSavedAttachment.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v8 = (char *)&v101 - v7;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v116 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)&double v13 = __chkstk_darwin(v11).n128_u64[0];
  uint64_t v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121.receiver = v1;
  v121.super_class = ObjectType;
  id v16 = [super newlyCreatedRecord:v13];
  id v19 = v16;
  if (!v16) {
    goto LABEL_65;
  }
  int v106 = v15;
  uint64_t v110 = v11;
  uint64_t v20 = 8;
  uint64_t v117 = 0;
  uint64_t v109 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v103 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  NSString v21 = &byte_1008B7520;
  os_log_type_t v102 = (void (**)(char *, uint64_t))(v12 + 8);
  *(void *)&long long v18 = 136446466;
  long long v105 = v18;
  uint64_t v104 = (char *)&type metadata for Any + 8;
  unint64_t v113 = 0x80000001007CEB80;
  *(void *)&long long v18 = 136446210;
  long long v107 = v18;
  id v111 = v16;
  uint64_t v112 = v1;
  uint64_t v114 = v8;
  uint64_t v115 = v5;
  while (2)
  {
    int v23 = *v21++;
    switch(v23)
    {
      case 1:
        id v38 = [v19 encryptedValues];
        id v39 = [v1 fileName];
        if (v39)
        {
          long long v40 = v39;
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v43 = v42;

          *((void *)&v119 + 1) = &type metadata for String;
          uint64_t v120 = &protocol witness table for String;
          *(void *)&long long v118 = v41;
          *((void *)&v118 + 1) = v43;
          id v8 = v114;
        }
        else
        {
          uint64_t v120 = 0;
          long long v118 = 0u;
          long long v119 = 0u;
        }
        swift_getObjectType();
        CKRecordKeyValueSetting.subscript.setter();
        swift_unknownObjectRelease();
        goto LABEL_5;
      case 2:
        id v44 = [v1 lastModifiedDate];
        if (v44)
        {
          uint64_t v45 = v44;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v46 = type metadata accessor for Date();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v5, 0, 1, v46);
        }
        else
        {
          uint64_t v46 = type metadata accessor for Date();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v5, 1, 1, v46);
        }
        sub_1000CAAB4((uint64_t)v5, (uint64_t)v8);
        type metadata accessor for Date();
        uint64_t v73 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v8, 1, v46) == 1)
        {
          sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909A40);
          long long v118 = 0u;
          long long v119 = 0u;
          uint64_t v120 = 0;
        }
        else
        {
          *((void *)&v119 + 1) = v46;
          uint64_t v120 = &protocol witness table for Date;
          uint64_t v22 = sub_1000C1FE8((uint64_t *)&v118);
          (*(void (**)(uint64_t *, char *, uint64_t))(v73 + 32))(v22, v8, v46);
        }
        goto LABEL_4;
      case 3:
      case 4:
        goto LABEL_5;
      case 5:
        if ([v1 markedForDeletion])
        {
          if (qword_1009079B0 != -1) {
            swift_once();
          }
          uint64_t v47 = type metadata accessor for Logger();
          sub_10008E2DC(v47, (uint64_t)qword_10091E080);
          id v48 = v1;
          uint64_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v49, v50))
          {
            uint64_t v51 = swift_slowAlloc();
            uint64_t v52 = swift_slowAlloc();
            *(void *)&long long v118 = v52;
            *(_DWORD *)uint64_t v51 = v107;
            id v53 = [v48 remObjectID];
            if (v53)
            {
              uint64_t v54 = v53;
              id v55 = [v53 description];
              uint64_t v108 = v52;
              id v56 = v55;

              uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v59 = v58;
            }
            else
            {
              unint64_t v59 = 0xE300000000000000;
              uint64_t v57 = 7104878;
            }
            id v8 = v114;
            *(void *)(v51 + 4) = sub_1000C51B8(v57, v59, (uint64_t *)&v118);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "REMCDSavedAttachment+CloudKit: newlyCreatedRecord() (key=.savedReminder) unsetting savedReminder CK reference as the saved attachment is markedForDeletion {savedAttachment: %{public}s}", (uint8_t *)v51, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v1 = v112;
            id v5 = v115;
          }
          else
          {
          }
          id v19 = v111;
          CKRecord.subscript.setter();
          goto LABEL_5;
        }
        id v65 = [v1 reminder];
        if (v65)
        {
          uint64_t v66 = v65;
          id v67 = [v65 recordID];
          id v68 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v67];

          CKRecord.subscript.setter();
          goto LABEL_5;
        }
        if (qword_1009079B0 != -1) {
          swift_once();
        }
        uint64_t v74 = type metadata accessor for Logger();
        sub_10008E2DC(v74, (uint64_t)qword_10091E080);
        id v75 = v1;
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.fault.getter();
        if (!os_log_type_enabled(v76, v77))
        {

          goto LABEL_5;
        }
        uint64_t v78 = swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(void *)&long long v118 = v108;
        *(_DWORD *)uint64_t v78 = v107;
        id v79 = [v75 remObjectID];
        if (v79)
        {
          uint64_t v80 = v79;
          id v81 = [v79 description];

          uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v84 = v83;

          id v19 = v111;
        }
        else
        {
          unint64_t v84 = 0xE300000000000000;
          uint64_t v82 = 7104878;
        }
        id v8 = v114;
        *(void *)(v78 + 4) = sub_1000C51B8(v82, v84, (uint64_t *)&v118);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "REMCDSavedAttachment+CloudKit: Unexpectedly got cdSavedAttachment.reminder == nil in newlyCreatedRecord() (key=.savedReminder) {savedAttachment: %{public}s}", (uint8_t *)v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_55;
      case 6:
        id v60 = [v1 attachmentTypeRawValue];
        if (v60) {
          goto LABEL_24;
        }
        uint64_t v120 = 0;
        long long v118 = 0u;
        long long v119 = 0u;
        goto LABEL_4;
      case 7:
        id v60 = [v1 uti];
        if (v60)
        {
LABEL_24:
          char v61 = v60;
          uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v64 = v63;

          *((void *)&v119 + 1) = &type metadata for String;
          uint64_t v120 = &protocol witness table for String;
          *(void *)&long long v118 = v62;
          *((void *)&v118 + 1) = v64;
        }
        else
        {
          uint64_t v120 = 0;
          long long v118 = 0u;
          long long v119 = 0u;
        }
LABEL_4:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.setter();
        goto LABEL_5;
      default:
        uint64_t v24 = v116;
        uint64_t v25 = v117;
        sub_10061C868(v116);
        if (!v25)
        {
          uint64_t v69 = v8;
          uint64_t v70 = v110;
          int v71 = (*v109)(v24, 1, v110);
          uint64_t v72 = v24;
          if (v71 == 1)
          {
            sub_1000966BC(v24, (uint64_t *)&unk_100909E40);
          }
          else
          {
            os_log_type_t v85 = v106;
            (*v103)(v106, v72, v70);
            id v86 = objc_allocWithZone((Class)CKAsset);
            URL._bridgeToObjectiveC()(v87);
            uint64_t v89 = v88;
            [v86 initWithFileURL:v88];

            CKRecord.subscript.setter();
            (*v102)(v85, v70);
          }
          uint64_t v117 = 0;
          id v8 = v69;
LABEL_56:
          id v5 = v115;
          goto LABEL_5;
        }
        if (qword_1009079B0 != -1) {
          swift_once();
        }
        uint64_t v117 = 0;
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_10091E080);
        id v27 = v1;
        swift_errorRetain();
        id v28 = v27;
        swift_errorRetain();
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v29, v30))
        {
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();

LABEL_55:
          uint64_t v1 = v112;
          goto LABEL_56;
        }
        uint64_t v31 = swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(void *)&long long v118 = v108;
        *(_DWORD *)uint64_t v31 = v105;
        id v32 = [v28 remObjectID];
        if (v32)
        {
          uint64_t v33 = v32;
          id v34 = [v32 description];

          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v37 = v36;
        }
        else
        {
          unint64_t v37 = 0xE300000000000000;
          uint64_t v35 = 7104878;
        }
        *(void *)(v31 + 4) = sub_1000C51B8(v35, v37, (uint64_t *)&v118);

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        swift_getErrorValue();
        uint64_t v90 = Error.rem_errorDescription.getter();
        *(void *)(v31 + 14) = sub_1000C51B8(v90, v91, (uint64_t *)&v118);
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMCDSavedAttachment+CloudKit: newlyCreatedRecord() Failed to compute file URL {savedAttachment: %{public}s, error: %{public}s}", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        id v19 = v111;
        uint64_t v1 = v112;
        id v8 = v114;
        id v5 = v115;
LABEL_5:
        if (--v20) {
          continue;
        }
        id v92 = [v1 metadata];
        if (v92)
        {
          uint64_t v93 = v92;
          uint64_t v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v96 = v95;

          uint64_t v97 = 0;
          switch(v96 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v94), v94))
              {
                __break(1u);
LABEL_67:
                __break(1u);
                JUMPOUT(0x1005B15B4);
              }
              uint64_t v97 = HIDWORD(v94) - (int)v94;
              break;
            case 2uLL:
              uint64_t v99 = *(void *)(v94 + 16);
              uint64_t v98 = *(void *)(v94 + 24);
              uint64_t v97 = v98 - v99;
              if (!__OFSUB__(v98, v99)) {
                break;
              }
              goto LABEL_67;
            case 3uLL:
              break;
            default:
              uint64_t v97 = BYTE6(v96);
              break;
          }
        }
        else
        {
          uint64_t v97 = 0;
          uint64_t v94 = 0;
          unint64_t v96 = 0xF000000000000000;
        }
        sub_1004D0F28(v94, v96, v97, v19, 0x617461646174654DLL, 0xE800000000000000, 0x617461646174654DLL, 0xED00007465737341, 1, 1uLL);
        sub_100097F20(v94, v96);
LABEL_65:
        uint64_t v100 = (objc_class *)v19;
        result.value.super.Class isa = v100;
        result.is_nil = v17;
        return result;
    }
  }
}

Swift::Void __swiftcall REMCDSavedAttachment.cleanUpAfterLocalObjectMerge()()
{
  if (qword_1009079B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091E080);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917400);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Void __swiftcall REMCDSavedAttachment.fixBrokenReferences()()
{
  if (qword_1009079B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091E080);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  id v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for saved attachment {savedAttachmentID: %{public}s, savedReminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    int v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      id v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          id v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Saved reminder is marked for deletion but saved attachment is not {savedAttachmentID: %{public}s, savedReminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

uint64_t _s7remindd20REMCDSavedAttachmentC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_1009079B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091E080);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917400);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd20REMCDSavedAttachmentC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_1009079B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091E080);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100917400);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1005B22E0(void *a1, unsigned __int8 a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v36 = _swiftEmptyArrayStorage;
  switch(a2 >> 5)
  {
    case 1:
    case 2:
      uint64_t KeyPath = swift_getKeyPath();
      id v11 = [a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 0, 1, v12);
      sub_10032F7CC(KeyPath, (uint64_t)v6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v13 = swift_getKeyPath();
      unint64_t v14 = 0xE400000000000000;
      uint64_t v15 = 1701603686;
      if ((a2 & 0x1F) != 1)
      {
        uint64_t v15 = 0x6567616D69;
        unint64_t v14 = 0xE500000000000000;
      }
      if ((a2 & 0x1F) != 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 7107189;
      }
      if ((a2 & 0x1F) != 0) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 0xE300000000000000;
      }
      sub_10032F7C0(v13, v16, v17);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    case 3:
      sub_100094134(&qword_10091E098);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      uint64_t v19 = swift_getKeyPath();
      sub_1005B3640(a1, a2);
      uint64_t v20 = sub_10032F7C0(v19, 1701603686, 0xE400000000000000);
      swift_release();
      *(void *)(inited + 32) = v20;
      uint64_t v21 = swift_getKeyPath();
      uint64_t v22 = sub_10032F7C0(v21, 0x6567616D69, 0xE500000000000000);
      swift_release();
      *(void *)(inited + 40) = v22;
      uint64_t v35 = inited;
      specialized Array._endMutation()();
      sub_100397E58(v35);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v23 = swift_getKeyPath();
      id v24 = [a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 0, 1, v25);
      sub_10032F7CC(v23, (uint64_t)v6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1005B36E4(a1, a2);
      return sub_1002F52FC(v36);
    case 4:
      sub_100094134(&qword_10091E098);
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_100776E80;
      uint64_t v27 = swift_getKeyPath();
      uint64_t v28 = sub_10032F7C0(v27, 1701603686, 0xE400000000000000);
      swift_release();
      *(void *)(v26 + 32) = v28;
      uint64_t v29 = swift_getKeyPath();
      uint64_t v30 = sub_10032F7C0(v29, 0x6567616D69, 0xE500000000000000);
      swift_release();
      *(void *)(v26 + 40) = v30;
      uint64_t v35 = v26;
      specialized Array._endMutation()();
      sub_100397E58(v35);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v31 = swift_getKeyPath();
      id v32 = sub_1001FF8A4((uint64_t)a1);
      sub_1003A0290(v31, (uint64_t)v32);
      swift_release();
      goto LABEL_25;
    default:
      uint64_t v7 = swift_getKeyPath();
      id v8 = [a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
      sub_10032F7CC(v7, (uint64_t)v6);
      swift_release();
LABEL_14:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1005B36E4(a1, a2);
      sub_1002F51CC(0);
LABEL_25:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v36[2] >= v36[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return sub_1002F52FC(v36);
  }
}

void sub_1005B293C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1005B2978(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

void sub_1005B2AC0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 attachmentTypeRawValue];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1005B2B28(uint64_t a1, void **a2)
{
  id v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setAttachmentTypeRawValue:];
}

uint64_t sub_1005B2B98()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_1009425D0 = v0;
  return result;
}

void *sub_1005B2C20()
{
  sub_1001DE058(0, 5, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  id v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0xD000000000000016;
  v4[5] = 0x8000000100793190;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1001DE058(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  uint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x656D614E656C6966;
  v7[5] = 0xE800000000000000;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1001DE058(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  id v11 = &_swiftEmptyArrayStorage[2 * v9];
  v11[4] = 0x696669746E656469;
  void v11[5] = 0xEA00000000007265;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1001DE058(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  uint64_t v14 = &_swiftEmptyArrayStorage[2 * v10];
  v14[4] = 0x617461646174656DLL;
  v14[5] = 0xE800000000000000;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
  {
    sub_1001DE058(v15 > 1, v16 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16 + 1;
  uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
  void v17[4] = 6911093;
  v17[5] = 0xE300000000000000;
  return result;
}

uint64_t sub_1005B30E0(void *a1, uint64_t a2, Class a3)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v9 = a1;
  id v10 = [v9 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 0, 1, v11);
  sub_10032F7CC(KeyPath, (uint64_t)v7);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v19[2] >= v19[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v19[2] >= v19[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v12 = (void *)sub_1002F52FC(v19);
  type metadata accessor for REMCDSavedAttachment();
  id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  [v13 setAffectedStores:0];
  [v13 setPredicate:v12];

  if (qword_1009079B8 != -1) {
    swift_once();
  }
  sub_1001BCA48();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v13 setSortDescriptors:isa];

  if (a3)
  {
    sub_1001FFC40((uint64_t)a3);
    a3 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v13 setPropertiesToFetch:a3];

  uint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  return v16;
}

id sub_1005B3414@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_1005B3450(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

uint64_t sub_1005B3464@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1005B34AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1005B34FC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_lastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1005B3544(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1005B3594()
{
  return "attachmentTypeRawValue";
}

uint64_t sub_1005B35A8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DCAC4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1005B35F0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_1005B3640(id result, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      id result = result;
      break;
    case 4:
      id result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

id sub_1005B368C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1005B36C8(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

void sub_1005B36E4(id a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
    case 3:

      break;
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

id sub_1005B3730@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 template];
  *a2 = result;
  return result;
}

id sub_1005B376C(void *a1, id *a2)
{
  return [*a2 setTemplate:*a1];
}

uint64_t sub_1005B3788(uint64_t a1)
{
  uint64_t result = sub_1005B3A58(&qword_10091E0D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.CountInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005B37E0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E0A0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E0A0);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_1005B38A8(void *a1, uint64_t a2)
{
  uint64_t v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = sub_1005B6158(v7, a1, a2);
  if (!v2)
  {
    uint64_t v9 = (uint64_t)v8;
    if (qword_100907418 != -1) {
      swift_once();
    }
    a1 = (void *)sub_10039E88C((uint64_t)v7, (objc_class *)qword_1009421D8, (uint64_t)a1, v9, 0, 0, 0, (uint64_t)&off_1008B1620, 0);
    sub_1003DC140((uint64_t)v7, _s10PredicatesOMa);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1005B3A00(uint64_t a1)
{
  uint64_t result = sub_1005B3A58(&qword_10091E100, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.DeleteInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005B3A58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005B3AA0@<X0>(unint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1005B7634(a1, a3);
  if (v4) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v19 = a4;
  type metadata accessor for ReminderIDsMergeableOrderingHelper();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = _swiftEmptyDictionarySingleton;
  *(void *)(inited + 24) = _swiftEmptyArrayStorage;
  sub_1005B7C54(a1, v9);
  id v11 = [objc_allocWithZone((Class)NSMutableDictionary) init];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_4:
      if (v12 < 1) {
        __break(1u);
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(a1 + 8 * i + 32);
        }
        unint64_t v15 = v14;
        [v14 updateDeletedFlagAccordingToOrphanState:v11, v19];
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_10033305C(v9);
  sub_1005B3D18(v16);
  swift_bridgeObjectRelease();
  sub_1005B40B8();
  id v20 = 0;
  if ([a2 save:&v20])
  {
    id v17 = v20;
    REMRemindersListBatchDeleteInvocation.DeleteInvocation.Result.init(deletedReminderIDs:accounts:)();
  }
  else
  {
    id v18 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  swift_setDeallocating();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005B3D18(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  unint64_t v8 = a1 & 0xC000000000000001;
  int64_t v30 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v28 = v3;
  unint64_t v29 = a1 & 0xC000000000000001;
  uint64_t v27 = v3 + 64;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_25;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v14 >= v30) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v4 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v14 + 3;
          if (v14 + 3 >= v30) {
            return swift_release();
          }
          unint64_t v15 = *(void *)(v4 + 8 * v10);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_25:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v13);
    if (v8)
    {
      swift_retain();
      if (!__CocoaSet.count.getter()) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 16);
      swift_retain();
      if (!v18) {
        goto LABEL_6;
      }
    }
    id v19 = sub_1005B71EC();
    if (v19)
    {
      id v20 = v19;
      [v19 count];
      sub_100333A50(a1);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v20 minusSet:isa];

      if (qword_1009079C0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E2DC(v22, (uint64_t)qword_10091E0A0);
      uint64_t v23 = v20;
      id v11 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v24))
      {
        uint64_t v25 = a1;
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v26 + 12) = 2048;
        [v23 count];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v11, v24, "ReminderIDsMergeableOrderingHelper orderedSet count: %ld -> %ld", (uint8_t *)v26, 0x16u);
        a1 = v25;
        uint64_t v4 = v27;
        uint64_t v3 = v28;
        swift_slowDealloc();
      }
      else
      {

        id v11 = v23;
      }
      unint64_t v8 = v29;

      *(unsigned char *)(v17 + 16) = 1;
    }
LABEL_6:
    uint64_t result = swift_release();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v30) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v4 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1005B40B8()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(char **)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v36 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - v8;
  swift_beginAccess();
  unint64_t v10 = *(void *)(v0 + 24);
  if (v10 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    if (v37) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v37 = v11;
    if (v11)
    {
LABEL_3:
      id v33 = (uint64_t *)(v0 + 16);
      uint64_t v34 = v9;
      unint64_t v39 = v10 & 0xC000000000000001;
      id v38 = (void (**)(char *, char *, uint64_t))(v5 + 32);
      unint64_t v12 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      uint64_t v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      uint64_t v31 = (void (**)(char *, uint64_t))(v5 + 8);
      unint64_t v32 = v10;
      uint64_t v13 = 4;
      uint64_t v9 = (char *)v37;
      while (1)
      {
        uint64_t v0 = v13 - 4;
        if (v39) {
          int64_t v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          int64_t v14 = (char *)*(id *)(v10 + 8 * v13);
        }
        uint64_t v5 = v14;
        unint64_t v15 = (char *)(v13 - 3);
        if (__OFADD__(v0, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        id v16 = [v14 identifier];
        if (!v16) {
          break;
        }
        uint64_t v17 = v16;
        uint64_t v18 = v36;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v19 = *v38;
        id v20 = v18;
        uint64_t v9 = (char *)v37;
        (*v38)(v3, v20, v4);
        (*v12)(v3, 0, 1, v4);
        if ((*v35)(v3, 1, v4) == 1) {
          goto LABEL_5;
        }
        uint64_t v21 = (uint64_t)v34;
        v19(v34, v3, v4);
        uint64_t v22 = v33;
        swift_beginAccess();
        uint64_t v23 = *v22;
        if (*(void *)(v23 + 16) && (unint64_t v24 = sub_100306EC4(v21), (v25 & 1) != 0))
        {
          uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
          swift_endAccess();
          swift_retain();
          uint64_t v27 = v30;
          sub_1005B8918(v5, v26);
          uint64_t v30 = v27;
          if (v27)
          {

            swift_release();
            (*v31)(v34, v4);
            return swift_bridgeObjectRelease();
          }
          (*v31)(v34, v4);
          swift_release();

          unint64_t v10 = v32;
        }
        else
        {
          swift_endAccess();

          (*v31)((char *)v21, v4);
          unint64_t v10 = v32;
        }
LABEL_6:
        ++v13;
        if (v15 == v9) {
          return swift_bridgeObjectRelease();
        }
      }
      (*v12)(v3, 1, 1, v4);
LABEL_5:

      sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_100909E50);
      goto LABEL_6;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005B44A8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  int64_t v14 = (char *)&v29 - v13;
  id v15 = [a1 identifier:v12];
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
  }
  id v16 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E50);
  }
  v17(v14, v6, v7);
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 16) + 16) && (sub_100306EC4((uint64_t)v14), (v18 & 1) != 0))
  {
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
  else
  {
    swift_endAccess();
    id v20 = [a1 reminderIDsMergeableOrdering];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v24 = 0xF000000000000000;
    }
    type metadata accessor for ReminderIDsMergeableOrdering();
    uint64_t v25 = swift_allocObject();
    *(_WORD *)(v25 + 16) = 0;
    *(void *)(v25 + 32) = v24;
    *(void *)(v25 + 40) = 1;
    *(void *)(v25 + 24) = v22;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v14, v7);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0x8000000000000000;
    sub_1002C43F4(v25, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 16) = v29;
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    v27(v10, v7);
    swift_endAccess();
    swift_beginAccess();
    id v28 = a1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v2 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v2 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v27)(v14, v7);
  }
}

uint64_t sub_1005B4894(void *a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  uint64_t v13 = (char *)&v22 - v12;
  id v14 = [a1 identifier:v11];
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_7;
  }
  id v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v16(v5, v9, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_7:
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v16(v13, v5, v6);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v1 + 16);
  if (*(void *)(v17 + 16) && (unint64_t v18 = sub_100306EC4((uint64_t)v13), (v19 & 1) != 0))
  {
    uint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
    swift_retain();
  }
  else
  {
    uint64_t v20 = 0;
  }
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  return v20;
}

void sub_1005B4B04(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      return;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      return;
    }
  }
  id v11 = sub_1005B71EC();
  if (!v11) {
    return;
  }
  id v25 = v11;
  uint64_t v12 = (char *)[v11 indexOfObject:a2];
  if (v12 != (char *)NSNotFound.getter())
  {
    uint64_t v24 = v7;
    IndexSet.init()();
    if (v10 < 1)
    {
      __break(1u);
    }
    else
    {
      unint64_t v23 = v12;
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v15 = *(id *)(a1 + 8 * i + 32);
        }
        id v16 = v15;
        id v17 = [v25 indexOfObject:v15];
        if (v17 != (id)NSNotFound.getter()) {
          IndexSet.insert(_:)((Swift::Int)v17);
        }
      }
      swift_bridgeObjectRelease();
      if (IndexSet.isEmpty.getter())
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);

        return;
      }
      IndexSet._bridgeToObjectiveC()(v18);
      uint64_t v20 = v24;
      if (!__OFADD__(v23, 1))
      {
        uint64_t v21 = v19;
        [v25 moveObjectsAtIndexes:v19 toIndex:v23 + 1];

        (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v6);
        *(_WORD *)(v3 + 16) = 257;
        return;
      }
    }
    __break(1u);
    return;
  }
  id v13 = v25;
}

uint64_t sub_1005B4DA0(uint64_t a1)
{
  uint64_t result = sub_1005B3A58(&qword_10091E128, (void (*)(uint64_t))&type metadata accessor for REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1005B4DF8(void *a1@<X1>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a3@<X8>)
{
  uint64_t v145 = a2;
  uint64_t v136 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v134 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v147 = (char *)&v126 - v8;
  __chkstk_darwin(v9);
  unint64_t v141 = (char *)&v126 - v10;
  __chkstk_darwin(v11);
  unint64_t v138 = (char *)&v126 - v12;
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  uint64_t v137 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  *(void *)&long long v146 = (char *)&v126 - v16;
  __chkstk_darwin(v17);
  uint64_t v144 = (char *)&v126 - v18;
  __chkstk_darwin(v19);
  uint64_t v135 = (char *)&v126 - v20;
  __chkstk_darwin(v21);
  unint64_t v23 = (char *)&v126 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v126 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v126 - v28;
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v126 - v31;
  uint64_t v33 = _s10PredicatesOMa(0);
  __n128 v34 = __chkstk_darwin(v33 - 8);
  unint64_t v36 = (unint64_t)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = v5;
  unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v37 = v5 + 56;
  id v38 = v39;
  uint64_t v148 = v4;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v39)(v32, 1, 1, v4, v34);
  uint64_t v40 = v149;
  unint64_t v41 = sub_1005B6158((void *)v36, a1, (uint64_t)v32);
  if (v40)
  {
    sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
  }
  else
  {
    uint64_t v149 = v26;
    uint64_t v140 = (void (*)(char *, uint64_t, uint64_t))a1;
    uint64_t v145 = v38;
    uint64_t v143 = v37;
    uint64_t v130 = v29;
    uint64_t v133 = 0;
    uint64_t v139 = v41;
    sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
    uint64_t v42 = v148;
    if (v139[2])
    {
      uint64_t v127 = v23;
      unint64_t v131 = v36;
      uint64_t v43 = (uint64_t)v139;
      id v44 = (void *)sub_10038F1F0();
      uint64_t v45 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      id v46 = [objc_allocWithZone((Class)NSFetchRequest) init];
      uint64_t v129 = v45;
      id v47 = [(id)swift_getObjCClassFromMetadata() entity];
      [v46 setEntity:v47];

      [v46 setAffectedStores:0];
      id v132 = v46;
      [v46 setPredicate:v44];

      *(void *)&long long v151 = v43;
      sub_100094134(&qword_1009169B0);
      sub_1000BFEAC(&qword_1009169B8, &qword_1009169B0);
      unint64_t Predicate = Sequence<>.postFetchPredicateTypes.getter();
      uint64_t v154 = sub_1001C0698(Predicate);
      uint64_t KeyPath = swift_getKeyPath();
      sub_10031DE40((uint64_t *)&v151, KeyPath);
      swift_release();
      uint64_t v50 = v154;
      uint64_t v51 = swift_bridgeObjectRetain();
      unint64_t v52 = (unint64_t)sub_100209C78(v51);
      uint64_t v128 = v50;
      swift_bridgeObjectRelease();
      if ((v52 & 0x8000000000000000) != 0 || (v52 & 0x4000000000000000) != 0) {
        goto LABEL_39;
      }
      uint64_t v53 = *(void *)(v52 + 16);
      while (!v53)
      {
        swift_release();
LABEL_22:
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v132 setPropertiesToFetch:isa];

        uint64_t v78 = sub_1001C06B0(Predicate);
        swift_bridgeObjectRelease();
        unint64_t v79 = (unint64_t)sub_100209C78(v78);
        swift_bridgeObjectRelease();
        if ((v79 & 0x8000000000000000) != 0 || (v79 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (!v53)
          {
LABEL_41:
            swift_release();
LABEL_42:
            Class v90 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v91 = v132;
            [v132 setRelationshipKeyPathsForPrefetching:v90];

            id v92 = v133;
            unint64_t v93 = NSManagedObjectContext.fetch<A>(_:)();
            uint64_t v53 = (uint64_t)v144;
            if (!v92)
            {
              unint64_t Predicate = (unint64_t)sub_10039C7F8(v93, (uint64_t)&_swiftEmptySetSingleton, (uint64_t)v139);
              uint64_t v54 = 0;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (Predicate >> 62) {
                goto LABEL_83;
              }
              uint64_t v94 = *(void *)((Predicate & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              while (1)
              {
                uint64_t v133 = v54;
                if (v94)
                {
                  if (v94 < 1)
                  {
                    __break(1u);
                    goto LABEL_85;
                  }
                  uint64_t v95 = 0;
                  uint64_t v140 = (void (*)(char *, uint64_t, uint64_t))(Predicate & 0xC000000000000001);
                  unint64_t v96 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
                  uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v142 + 32);
                  uint64_t v149 = _swiftEmptyArrayStorage;
                  uint64_t v139 = (void *)Predicate;
                  do
                  {
                    if (v140) {
                      id v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else {
                      id v98 = *(id *)(Predicate + 8 * v95 + 32);
                    }
                    uint64_t v99 = v98;
                    id v100 = [v98 completionDate];
                    if (v100)
                    {
                      uint64_t v101 = v100;
                      uint64_t v102 = v146;
                      static Date._unconditionallyBridgeFromObjectiveC(_:)();

                      uint64_t v103 = v102;
                      uint64_t v53 = (uint64_t)v144;
                      uint64_t v104 = 0;
                    }
                    else
                    {
                      uint64_t v104 = 1;
                      uint64_t v103 = v146;
                    }
                    v145(v103, v104, 1, v42);
                    sub_1000CAAB4(v103, v53);

                    if ((*v96)(v53, 1, v42) == 1)
                    {
                      sub_1000966BC(v53, (uint64_t *)&unk_100909A40);
                      unint64_t Predicate = (unint64_t)v139;
                    }
                    else
                    {
                      uint64_t v105 = v42;
                      int v106 = *v97;
                      long long v107 = v141;
                      (*v97)(v141, v53, v105);
                      v106(v147, (uint64_t)v107, v105);
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      unint64_t Predicate = (unint64_t)v139;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                        uint64_t v149 = (void *)sub_100309750(0, v149[2] + 1, 1, (unint64_t)v149);
                      }
                      unint64_t v110 = v149[2];
                      unint64_t v109 = v149[3];
                      if (v110 >= v109 >> 1) {
                        uint64_t v149 = (void *)sub_100309750(v109 > 1, v110 + 1, 1, (unint64_t)v149);
                      }
                      id v111 = v149;
                      v149[2] = v110 + 1;
                      unint64_t v112 = (unint64_t)v111
                           + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))
                           + *(void *)(v142 + 72) * v110;
                      uint64_t v42 = v148;
                      ((void (*)(unint64_t))v106)(v112);
                    }
                    ++v95;
                  }
                  while (v94 != v95);
                }
                else
                {
                  uint64_t v149 = _swiftEmptyArrayStorage;
                }
                swift_bridgeObjectRelease_n();
                uint64_t v147 = (char *)v149[2];
                if (!v147)
                {
                  uint64_t v115 = (uint64_t)v135;
                  uint64_t v116 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v145;
                  v145((uint64_t)v135, 1, 1, v42);
LABEL_72:
                  sub_1000966BC(v115, (uint64_t *)&unk_100909A40);
                  uint64_t v119 = (uint64_t)v127;
                  v116(v127, 1, 1, v42);
LABEL_73:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000CAA4C(v119, (uint64_t)v130);
                  REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result.init(oldestCompletionDate:)();

                  sub_1000966BC(v119, (uint64_t *)&unk_100909A40);
                  sub_1003DC140(v131, _s10PredicatesOMa);
                  return;
                }
                uint64_t v113 = v142;
                unint64_t Predicate = v142 + 16;
                uint64_t v114 = *(char **)(v142 + 16);
                uint64_t v115 = (uint64_t)v135;
                *(void *)&long long v146 = (char *)v149
                                 + ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
                uint64_t v144 = v114;
                ((void (*)(char *))v114)(v135);
                uint64_t v116 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v145;
                v145(v115, 0, 1, v42);
                unint64_t v141 = *(char **)(v113 + 48);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v141)(v115, 1, v42) == 1) {
                  goto LABEL_72;
                }
                uint64_t v53 = v113 + 32;
                uint64_t v140 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 32);
                v140(v138, v115, v42);
                swift_bridgeObjectRetain();
                uint64_t v117 = v134;
                uint64_t v42 = (uint64_t)v137;
                if (v147 == (char *)1)
                {
LABEL_69:
                  uint64_t v118 = v148;
                  v145(v42, 1, 1, v148);
LABEL_70:
                  swift_bridgeObjectRelease();
                  sub_1000966BC(v42, (uint64_t *)&unk_100909A40);
                  uint64_t v119 = (uint64_t)v127;
                  v140(v127, (uint64_t)v138, v118);
                  v145(v119, 0, 1, v118);
                  goto LABEL_73;
                }
                uint64_t v120 = (void (**)(char *, uint64_t))(v142 + 8);
                unint64_t v36 = 1;
                uint64_t v54 = v140;
                while (v36 < v149[2])
                {
                  uint64_t v118 = v148;
                  ((void (*)(uint64_t, void, uint64_t))v144)(v42, v146 + *(void *)(v142 + 72) * v36, v148);
                  v145(v42, 0, 1, v118);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v141)(v42, 1, v118) == 1) {
                    goto LABEL_70;
                  }
                  v54(v117, v42, v118);
                  objc_super v121 = v117;
                  uint64_t v122 = v138;
                  char v123 = static Date.< infix(_:_:)();
                  uint64_t v124 = *v120;
                  if (v123)
                  {
                    v124(v122, v118);
                    v54(v122, (uint64_t)v121, v118);
                  }
                  else
                  {
                    v124(v121, v118);
                  }
                  uint64_t v117 = v121;
                  ++v36;
                  uint64_t v42 = (uint64_t)v137;
                  if (v147 == (char *)v36) {
                    goto LABEL_69;
                  }
                }
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                swift_bridgeObjectRetain();
                uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v53 = *(void *)(v79 + 16);
          if (!v53) {
            goto LABEL_41;
          }
        }
        v153[0] = _swiftEmptyArrayStorage;
        uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))v153;
        sub_1001DE058(0, v53 & ~(v53 >> 63), 0);
        if (v53 < 0) {
          goto LABEL_82;
        }
        uint64_t v42 = 0;
        unint64_t v52 = v153[0];
        uint64_t v149 = (void *)(v79 & 0xC000000000000001);
        uint64_t v80 = (void *)v79;
        while (v53 != v42)
        {
          if (v149)
          {
            unint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            unint64_t v36 = *(void *)(v79 + 8 * v42 + 32);
            swift_retain();
          }
          uint64_t v81 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
          if (!v82) {
            goto LABEL_85;
          }
          unint64_t Predicate = v81;
          uint64_t v83 = v82;
          swift_release();
          v153[0] = v52;
          unint64_t v85 = *(void *)(v52 + 16);
          unint64_t v84 = *(void *)(v52 + 24);
          unint64_t v36 = v85 + 1;
          if (v85 >= v84 >> 1)
          {
            sub_1001DE058(v84 > 1, v85 + 1, 1);
            unint64_t v52 = v153[0];
          }
          ++v42;
          *(void *)(v52 + 16) = v36;
          id v86 = (void *)(v52 + 16 * v85);
          v86[4] = Predicate;
          v86[5] = v83;
          unint64_t v79 = (unint64_t)v80;
          if (v53 == v42)
          {
            swift_release();
            uint64_t v42 = v148;
            goto LABEL_42;
          }
        }
LABEL_38:
        __break(1u);
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      uint64_t v149 = (void *)Predicate;
      v153[0] = _swiftEmptyArrayStorage;
      uint64_t v54 = (void (*)(char *, uint64_t, uint64_t))v153;
      sub_1001DE1C4(0, v53 & ~(v53 >> 63), 0);
      if (v53 < 0) {
        goto LABEL_81;
      }
      uint64_t v42 = 0;
      uint64_t v55 = v153[0];
      unint64_t Predicate = v52 & 0xC000000000000001;
      while (1)
      {
        if (v53 == v42)
        {
          __break(1u);
          goto LABEL_38;
        }
        if (Predicate)
        {
          unint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          unint64_t v36 = *(void *)(v52 + 8 * v42 + 32);
          swift_retain();
        }
        uint64_t v56 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v57) {
          break;
        }
        uint64_t v58 = v56;
        uint64_t v59 = v57;
        uint64_t v152 = &type metadata for String;
        swift_release();
        *(void *)&long long v151 = v58;
        *((void *)&v151 + 1) = v59;
        v153[0] = v55;
        unint64_t v36 = *(void *)(v55 + 16);
        unint64_t v60 = *(void *)(v55 + 24);
        if (v36 >= v60 >> 1)
        {
          sub_1001DE1C4(v60 > 1, v36 + 1, 1);
          uint64_t v55 = v153[0];
        }
        ++v42;
        *(void *)(v55 + 16) = v36 + 1;
        sub_10009A1A0(&v151, (_OWORD *)(v55 + 32 * v36 + 32));
        if (v53 == v42)
        {
          swift_release();
          uint64_t v42 = v148;
          unint64_t Predicate = (unint64_t)v149;
          goto LABEL_22;
        }
      }
LABEL_85:
      *(void *)&long long v151 = 0;
      *((void *)&v151 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v125._countAndFlagsBits = 0xD00000000000002CLL;
      v125._object = (void *)0x80000001007CAF70;
      String.append(_:)(v125);
      unint64_t v150 = v36;
      sub_100094134((uint64_t *)&unk_10090B070);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v61 = sub_1000963CC(0, &qword_10090B098);
      swift_getKeyPath();
      uint64_t v62 = NSExpression.init<A, B>(forKeyPath:)();
      sub_100094134((uint64_t *)&unk_10090A050);
      uint64_t v63 = swift_allocObject();
      long long v146 = xmmword_100776E40;
      *(_OWORD *)(v63 + 16) = xmmword_100776E40;
      *(void *)(v63 + 56) = v61;
      *(void *)(v63 + 32) = v62;
      uint64_t v147 = v62;
      NSString v64 = String._bridgeToObjectiveC()();
      Class v65 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v66 = [self expressionForFunction:v64 arguments:v65];

      id v67 = [objc_allocWithZone((Class)NSExpressionDescription) init];
      NSString v68 = String._bridgeToObjectiveC()();
      [v67 setName:v68];

      [v67 setExpression:v66];
      [v67 setExpressionResultType:900];
      uint64_t v69 = (void *)sub_10038F1F0();
      id v70 = [objc_allocWithZone((Class)NSFetchRequest) init];
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      id v71 = [(id)swift_getObjCClassFromMetadata() entity];
      [v70 setEntity:v71];

      [v70 setAffectedStores:0];
      [v70 setPredicate:v69];
      [v70 setResultType:2];

      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = v146;
      *(void *)(v72 + 56) = sub_1000963CC(0, (unint64_t *)&unk_10090B0A0);
      *(void *)(v72 + 32) = v67;
      id v73 = v67;
      Class v74 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v70 setPropertiesToFetch:v74];

      sub_1000963CC(0, &qword_10090E4F0);
      id v75 = v133;
      uint64_t v76 = NSManagedObjectContext.fetch<A>(_:)();
      if (v75)
      {
        sub_1003DC140(v36, _s10PredicatesOMa);
      }
      else
      {
        uint64_t v87 = v76;
        unint64_t v131 = v36;
        uint64_t v152 = (void *)sub_100094134(&qword_10091E290);
        *(void *)&long long v151 = v87;
        sub_100094134(&qword_10091E298);
        throwingCast<A>(_:as:failureMessage:)();
        uint64_t v88 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v151);
        *(void *)&long long v146 = &v126;
        *(void *)&long long v151 = v154;
        __chkstk_darwin(v88);
        sub_1000BFEAC(&qword_10091E2A0, &qword_10091E298);
        uint64_t v89 = (uint64_t)v130;
        Sequence.firstMap<A>(_:)();
        swift_bridgeObjectRelease();
        sub_1000CAA4C(v89, (uint64_t)v149);
        REMRemindersListBatchDeleteInvocation.OldestCompletionDateInvocation.Result.init(oldestCompletionDate:)();

        sub_1000966BC(v89, (uint64_t *)&unk_100909A40);
LABEL_44:
        sub_1003DC140(v131, _s10PredicatesOMa);
      }
    }
  }
}

void *sub_1005B6158(void *a1, void *a2, uint64_t a3)
{
  id v96 = a2;
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v93 = *(void *)(v6 - 8);
  uint64_t v94 = v6;
  __chkstk_darwin(v6);
  id v92 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v95 = (void **)((char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = _s10PredicatesOMa_1();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for REMRemindersListBatchDeleteInvocation.ListType();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, v3, v13, v15);
  int v18 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v17, v13);
  if (v18 == enum case for REMRemindersListBatchDeleteInvocation.ListType.list(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
    uint64_t v19 = *v17;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_10077A530;
    *(void *)(v20 + 32) = v19;
    v98[0] = v20;
    specialized Array._endMutation()();
    uint64_t v21 = v98[0];
    uint64_t v22 = (uint64_t)a1 + *(int *)(sub_100094134(&qword_100916920) + 48);
    *a1 = v21;
    sub_1000CAA4C(a3, v22);
LABEL_3:
    swift_storeEnumTagMultiPayload();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v90 = a3;
  uint64_t v91 = v8;
  uint64_t v89 = a1;
  if (v18 != enum case for REMRemindersListBatchDeleteInvocation.ListType.customSmartList(_:))
  {
    if (v18 == enum case for REMRemindersListBatchDeleteInvocation.ListType.reminders(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
      uint64_t v31 = *v17;
      uint64_t v32 = sub_100094134(&qword_100916910);
      uint64_t v33 = v89;
      uint64_t v34 = (uint64_t)v89 + *(int *)(v32 + 48);
      uint64_t v35 = sub_10020A3A0(v31);
      swift_bridgeObjectRelease();
      *uint64_t v33 = v35;
      sub_1000CAA4C(v90, v34);
      goto LABEL_3;
    }
    if (v18 == enum case for REMRemindersListBatchDeleteInvocation.ListType.group(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
      unint64_t v36 = (void *)*v17;
      *(void *)uint64_t v12 = *v17;
      v12[8] = 0;
      swift_storeEnumTagMultiPayload();
      id v37 = v36;
      uint64_t v27 = (void *)sub_100535B3C();
      sub_1003DC140((uint64_t)v12, (uint64_t (*)(void))_s10PredicatesOMa_1);
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      uint64_t v30 = [objc_allocWithZone((Class)NSFetchRequest) init];
      id v38 = [(id)swift_getObjCClassFromMetadata() entity];
      [v30 setEntity:v38];

      [v30 setAffectedStores:0];
      [v30 setPredicate:v27];
      sub_100094134((uint64_t *)&unk_10090A050);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_100776E40;
      *(void *)(v23 + 56) = &type metadata for String;
      *(void *)(v23 + 32) = 0x696669746E656469;
      *(void *)(v23 + 40) = 0xEA00000000007265;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v30 setPropertiesToFetch:isa];

      uint64_t v40 = v97;
      uint64_t v41 = NSManagedObjectContext.fetch<A>(_:)();
      if (v40)
      {

LABEL_22:
        return (void *)v23;
      }
      uint64_t v56 = v41;
      uint64_t v99 = (ValueMetadata *)sub_100094134(&qword_100910160);
      v98[0] = v56;
      sub_100094134(&qword_10091B610);
      throwingCast<A>(_:as:failureMessage:)();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);
      unint64_t v71 = v101;
      v98[0] = _swiftEmptyArrayStorage;
      if (v101 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v72 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v73 = v90;
      uint64_t v97 = 0;
      if (!v72)
      {
        swift_bridgeObjectRelease();
        uint64_t v82 = _swiftEmptyArrayStorage;
LABEL_60:
        swift_bridgeObjectRelease();

        uint64_t v84 = sub_100094134(&qword_100916920);
        uint64_t v85 = (uint64_t)v89 + *(int *)(v84 + 48);
        *uint64_t v89 = v82;
        sub_1000CAA4C(v73, v85);
        goto LABEL_3;
      }
      uint64_t v95 = v27;
      id v96 = v37;
      if (v72 >= 1)
      {
        for (uint64_t i = 0; i != v72; ++i)
        {
          if ((v71 & 0xC000000000000001) != 0)
          {
            id v75 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            id v75 = *(void **)(v71 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          id v76 = [v75 remObjectID:v89];
          swift_unknownObjectRelease();
          if (v76)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v82 = (void *)v98[0];
        uint64_t v73 = v90;
        uint64_t v27 = v95;
        id v37 = v96;
        goto LABEL_60;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (v18 != enum case for REMRemindersListBatchDeleteInvocation.ListType.all(_:))
    {
LABEL_67:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      goto LABEL_68;
    }
    swift_storeEnumTagMultiPayload();
    id v48 = (void *)sub_100535B3C();
    sub_1003DC140((uint64_t)v12, (uint64_t (*)(void))_s10PredicatesOMa_1);
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    id v49 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v50 = [(id)swift_getObjCClassFromMetadata() entity];
    [v49 setEntity:v50];

    [v49 setAffectedStores:0];
    [v49 setPredicate:v48];
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_100776E40;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 32) = 0x696669746E656469;
    *(void *)(v23 + 40) = 0xEA00000000007265;
    Class v51 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v49 setPropertiesToFetch:v51];

    uint64_t v52 = v97;
    uint64_t v53 = NSManagedObjectContext.fetch<A>(_:)();
    if (v52)
    {

      return (void *)v23;
    }
    uint64_t v57 = v53;
    uint64_t v99 = (ValueMetadata *)sub_100094134(&qword_100910160);
    v98[0] = v57;
    sub_100094134(&qword_10091B610);
    throwingCast<A>(_:as:failureMessage:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);
    unint64_t v77 = v101;
    v98[0] = _swiftEmptyArrayStorage;
    if (v101 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v97 = 0;
      if (v78) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v78 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v97 = 0;
      if (v78)
      {
LABEL_47:
        id v96 = v48;
        if (v78 < 1)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        for (uint64_t j = 0; j != v78; ++j)
        {
          if ((v77 & 0xC000000000000001) != 0)
          {
            uint64_t v80 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v80 = *(void **)(v77 + 8 * j + 32);
            swift_unknownObjectRetain();
          }
          id v81 = [v80 remObjectID:v89];
          swift_unknownObjectRelease();
          if (v81)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v98[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v83 = (void *)v98[0];
        id v48 = v96;
LABEL_64:
        swift_bridgeObjectRelease();

        uint64_t v86 = *(int *)(sub_100094134(&qword_100916920) + 48);
        uint64_t v87 = v90;
        uint64_t v88 = (uint64_t)v89 + v86;
        *uint64_t v89 = v83;
        sub_1000CAA4C(v87, v88);
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v83 = _swiftEmptyArrayStorage;
    goto LABEL_64;
  }
  (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v17, v13);
  uint64_t v24 = (void *)*v17;
  uint64_t v25 = REMSmartListTypeCustom;
  uint64_t v26 = qword_100907B18;
  uint64_t v27 = v24;
  uint64_t v28 = v96;
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100942620;
  swift_retain();
  uint64_t v29 = v97;
  uint64_t v30 = sub_10064C1FC(v25, v24, v28, v23);

  if (v29)
  {

    swift_release();
    return (void *)v23;
  }
  swift_release();
  id v42 = [v30 parentAccount];
  if (!v42
    || (v43 = v42, id v44 = [v42 remObjectID], v43, !v44))
  {
    uint64_t v54 = self;
    NSString v55 = String._bridgeToObjectiveC()();
    [v54 internalErrorWithDebugDescription:v55];

    swift_willThrow();
    goto LABEL_22;
  }
  id v45 = [v30 filterData];
  if (v45)
  {
    id v46 = v45;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for REMCustomSmartListFilterDescriptor();
    [v30 minimumSupportedVersion];
    uint64_t v47 = REMCustomSmartListFilterDescriptor.__allocating_init(data:minimumSupportedVersion:)();
  }
  else
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor();
    uint64_t v47 = REMCustomSmartListFilterDescriptor.__allocating_init()();
  }
  uint64_t v59 = (void *)v47;
  uint64_t v60 = sub_100094134(&qword_100916918);
  uint64_t v61 = v95;
  uint64_t v62 = (uint64_t)v95 + *(int *)(v60 + 64);
  void *v95 = v59;
  v61[1] = v44;
  sub_1000CAA4C(v90, v62);
  swift_storeEnumTagMultiPayload();
  id v63 = v59;
  id v64 = v44;
  Class v65 = v92;
  REMCustomSmartListFilterDescriptor.operation.getter();
  int v66 = (*(uint64_t (**)(char *, uint64_t))(v93 + 88))(v65, v94);
  if (v66 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
  {
    uint64_t v67 = static Set<>.typesSupportedByCustomSmartList.getter();
    uint64_t v68 = static Set<>.typesIndescribableByNSPredicate.getter();
    sub_1005AE338(v68, v67);
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v69 = (uint64_t)v89;
    uint64_t v99 = &type metadata for ReminderIDsWithMatchingHashtagsProvider;
    unint64_t v100 = sub_1004705A8();
    v98[0] = v28;
    id v70 = v28;
    uint64_t v23 = REMCustomSmartListFilterDescriptor.postFetchPredicates(for:reminderIDsWithMatchingHashtagsProvider:)();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v98);

    swift_bridgeObjectRelease();
    sub_1005B75D0((uint64_t)v95, v69);
    return (void *)v23;
  }
  if (v66 == enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
  {
    static Set<>.typesSupportedByCustomSmartList.getter();
    goto LABEL_31;
  }
LABEL_68:
  uint64_t result = (void *)_diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1005B6EE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  if (*(void *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1001806F8(a2, a3);
    if (v9)
    {
      unint64_t v10 = v8;
      uint64_t v11 = *(void *)(v5 + 56);
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(a4, v11 + *(void *)(v13 + 72) * v10, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, v12);
    }
    else
    {
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a4, 1, 1, v16);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a4, 1, 1, v14);
  }
}

void *sub_1005B708C()
{
  id v0 = sub_1005B71EC();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  id v6 = 0;
  id v2 = [self reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:v0 error:&v6];
  id v3 = v6;
  if (v2)
  {
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  return v4;
}

uint64_t sub_1005B7188()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReminderIDsMergeableOrderingHelper()
{
  return self;
}

id sub_1005B71EC()
{
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    id v2 = sub_1005B724C(v0);
    id v3 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v2;
    id v4 = v2;
    sub_1005B759C(v3);
  }
  sub_1005B8D10(v1);
  return v2;
}

id sub_1005B724C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >> 60 != 15)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    id v4 = self;
    sub_100097E38(v3, v1);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v16 = 0;
    id v6 = [v4 reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:isa error:&v16];

    if (v6)
    {
      id v7 = v16;
      id v2 = [v6 mutableCopy];
      sub_100097F20(v3, v1);

      return v2;
    }
    id v9 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1009079C0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10091E0A0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      id v16 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_getErrorValue();
      uint64_t v14 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v14, v15, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to decode reminderIDsMergeableOrdering {error: %s}", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100097F20(v3, v1);

      swift_errorRelease();
    }
    else
    {
      sub_100097F20(v3, v1);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return 0;
}

uint64_t sub_1005B7538()
{
  sub_100097F20(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_1005B759C(*(id *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReminderIDsMergeableOrdering()
{
  return self;
}

void sub_1005B759C(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1005B75B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005B6EE8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1005B75D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005B7634(unint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = &_swiftEmptySetSingleton;
  id v6 = (id)(a1 >> 62);
  unint64_t v55 = a1;
  if (a1 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    Swift::Int v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v49 = v4;
  sub_100094134(&qword_10091C480);
  Set.reserveCapacity(_:)(v7);
  if (v6)
  {
    unint64_t v8 = v55;
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v9 = result;
    if (result) {
      goto LABEL_5;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    unint64_t v12 = (unint64_t)_swiftEmptyDictionarySingleton;
LABEL_42:
    unint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = sub_10020A148(v34);
    unint64_t v55 = v12;
    swift_bridgeObjectRelease();
    type metadata accessor for REMAccountStorageCDIngestor();
    swift_initStackObject();
    uint64_t v36 = v49;
    if (qword_100907430 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_10008E2DC(v36, (uint64_t)qword_100916CC0);
    id v38 = v50;
    uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v37, v36);
    id v57 = v35;
    __chkstk_darwin(v39);
    *(&v45 - 2) = (uint64_t)v38;
    sub_100094134(&qword_100910070);
    sub_1000963CC(0, &qword_100910180);
    sub_1000BFEAC((unint64_t *)&qword_1009133E0, &qword_100910070);
    uint64_t v40 = v48;
    uint64_t v41 = Sequence.map<A>(skippingError:_:)();
    if (v40)
    {
      swift_errorRelease();
      id v42 = _swiftEmptyArrayStorage;
    }
    else
    {
      id v42 = (void *)v41;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v36);
    id v43 = a2;
    sub_10046B6A8((unint64_t)v42, (uint64_t)v43);
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    id v44 = v58;
    swift_bridgeObjectRelease();
    return (uint64_t)v44;
  }
  unint64_t v8 = v55;
  uint64_t v9 = *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_41;
  }
LABEL_5:
  if (v9 >= 1)
  {
    id v46 = a2;
    a2 = 0;
    unint64_t v11 = v8 & 0xC000000000000001;
    unint64_t v12 = (unint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v47 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v52 = v9;
    unint64_t v54 = v8 & 0xC000000000000001;
    while (1)
    {
      if (v11) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v8 + 8 * (void)a2 + 32);
      }
      uint64_t v14 = v13;
      id v15 = [v13 remObjectID];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = (void *)REMObjectID.codable.getter();
        sub_10031DE8C(&v57, v17);

        id v18 = [v14 list];
        if (v18)
        {
          uint64_t v19 = v18;
          id v6 = [v18 account];

          if (v6)
          {
            id v20 = [v6 remObjectID];
            if (v20)
            {
              uint64_t v21 = v20;
              unint64_t v53 = v12 & 0xC000000000000001;
              if ((v12 & 0xC000000000000001) != 0)
              {
                id v22 = v20;
                uint64_t v23 = __CocoaDictionary.lookup(_:)();
                if (v23)
                {
                  Swift::Int v24 = v12;
                  uint64_t v56 = v23;
                  sub_1000963CC(0, &qword_10090ABC0);
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  id v25 = v57;
                  swift_unknownObjectRelease();
                  goto LABEL_25;
                }
LABEL_27:
                Swift::Int v24 = v12;

                goto LABEL_28;
              }
              Swift::Int v24 = v12;
              if (!*(void *)(v12 + 16)) {
                goto LABEL_28;
              }
              unint64_t v26 = sub_100306FE8((uint64_t)v20);
              if ((v27 & 1) == 0) {
                goto LABEL_27;
              }
              id v25 = *(id *)(*(void *)(v12 + 56) + 8 * v26);
LABEL_25:

              if (v25)
              {

                unint64_t v12 = v24;
              }
              else
              {
LABEL_28:
                if (v53)
                {
                  if (v24 < 0) {
                    uint64_t v4 = v24;
                  }
                  else {
                    uint64_t v4 = v24 & 0xFFFFFFFFFFFFFF8;
                  }
                  id v28 = v21;
                  id v29 = v6;
                  uint64_t v30 = __CocoaDictionary.count.getter();
                  if (__OFADD__(v30, 1))
                  {
                    __break(1u);
                    goto LABEL_49;
                  }
                  Swift::Int v24 = sub_1001A7314(v4, v30 + 1);
                }
                else
                {
                  id v31 = v21;
                  id v32 = v6;
                }
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                id v57 = (id)v24;
                sub_1002C4280((uint64_t)v6, v21, isUniquelyReferenced_nonNull_native);
                unint64_t v12 = (unint64_t)v57;

                swift_bridgeObjectRelease();
              }
              uint64_t v9 = v52;
            }
            else
            {
            }
            unint64_t v11 = v54;
          }
          else
          {
          }
          unint64_t v8 = v55;
          goto LABEL_8;
        }
      }
      else
      {
      }
LABEL_8:
      a2 = (char *)a2 + 1;
      if ((void *)v9 == a2)
      {
        swift_bridgeObjectRelease();
        a2 = v46;
        goto LABEL_42;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1005B7C54(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_98;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      unint64_t v6 = v3 & 0xC000000000000001;
      uint64_t v81 = v3 + 32;
      uint64_t v82 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v94 = a2 & 0xC000000000000001;
      uint64_t v89 = a2 + 56;
      uint64_t v87 = a2;
      uint64_t v83 = v4;
      uint64_t v84 = v3;
      unint64_t v85 = v3 & 0xC000000000000001;
LABEL_7:
      if (v6)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v5 >= *(void *)(v82 + 16)) {
          goto LABEL_97;
        }
        id v7 = *(id *)(v81 + 8 * v5);
      }
      unint64_t v8 = v7;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_96;
      }
      id v10 = [v7 list];
      id v11 = v10;
      if (v10)
      {
        id v12 = v10;
        sub_1005B44A8(v12);
        [v8 setList:0];
        id v13 = [v8 createResolutionTokenMapIfNecessary];
        NSString v14 = String._bridgeToObjectiveC()();
        [v13 updateForKey:v14];
      }
      uint64_t v88 = v11;
      id v15 = [v8 parentReminder];

      if (v15)
      {
        [v8 setParentReminder:0];
        id v16 = [v8 createResolutionTokenMapIfNecessary];
        NSString v17 = String._bridgeToObjectiveC()();
        [v16 updateForKey:v17];
      }
      id v18 = [v8 children];
      if (!v18) {
        goto LABEL_5;
      }
      uint64_t v19 = v18;
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      sub_100287740();
      uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v20 & 0xC000000000000001) != 0)
      {
        if (!__CocoaSet.count.getter()) {
          goto LABEL_4;
        }
      }
      else if (!*(void *)(v20 + 16))
      {
LABEL_4:
        swift_bridgeObjectRelease();
LABEL_5:

        goto LABEL_6;
      }
      unint64_t v86 = v5;
      uint64_t v21 = &selRef_intersectsSet_;
      id v90 = [v8 remObjectID];
      unint64_t v100 = (unint64_t)_swiftEmptyArrayStorage;
      if ((v20 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v20 = v101;
        uint64_t v93 = v102;
        uint64_t v22 = v103;
        uint64_t v23 = v104;
        unint64_t v24 = v105;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v25 = -1 << *(unsigned char *)(v20 + 32);
        uint64_t v93 = v20 + 56;
        uint64_t v26 = ~v25;
        uint64_t v27 = -v25;
        uint64_t v28 = v27 < 64 ? ~(-1 << v27) : -1;
        unint64_t v24 = v28 & *(void *)(v20 + 56);
        uint64_t v22 = v26;
      }
      int64_t v91 = (unint64_t)(v22 + 64) >> 6;
      id v92 = v8;
      uint64_t v95 = v20;
      while (v20 < 0)
      {
        uint64_t v31 = __CocoaSet.Iterator.next()();
        if (!v31) {
          goto LABEL_74;
        }
        uint64_t v99 = v31;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v32 = (id)v98[0];
        swift_unknownObjectRelease();
        uint64_t v30 = v23;
        uint64_t v3 = v24;
        if (!v32) {
          goto LABEL_74;
        }
LABEL_50:
        id v36 = [v32 v21[446]];
        if (!v36) {
          goto LABEL_28;
        }
        uint64_t v37 = v36;
        uint64_t v96 = v3;
        uint64_t v97 = v30;
        id v38 = (id)REMObjectID.codable.getter();

        if (v94)
        {
          id v39 = v38;
          char v40 = __CocoaSet.contains(_:)();

          if ((v40 & 1) == 0) {
            goto LABEL_62;
          }
          id v38 = v39;
        }
        else
        {
          if (!*(void *)(a2 + 16)) {
            goto LABEL_62;
          }
          Swift::Int v41 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
          uint64_t v42 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v43 = v41 & ~v42;
          if (((*(void *)(v89 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0) {
            goto LABEL_62;
          }
          type metadata accessor for REMObjectID_Codable();
          id v44 = *(id *)(*(void *)(a2 + 48) + 8 * v43);
          char v45 = static NSObject.== infix(_:_:)();

          if ((v45 & 1) == 0)
          {
            uint64_t v46 = ~v42;
            while (1)
            {
              unint64_t v43 = (v43 + 1) & v46;
              unint64_t v8 = v92;
              if (((*(void *)(v89 + ((v43 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v43) & 1) == 0) {
                break;
              }
              id v47 = *(id *)(*(void *)(a2 + 48) + 8 * v43);
              char v48 = static NSObject.== infix(_:_:)();

              if (v48) {
                goto LABEL_60;
              }
            }
LABEL_62:
            if (qword_1009079C0 != -1) {
              swift_once();
            }
            uint64_t v49 = type metadata accessor for Logger();
            sub_10008E2DC(v49, (uint64_t)qword_10091E0A0);
            id v50 = v38;
            id v51 = v90;
            id v52 = v50;
            id v53 = v51;
            unint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v54, v55))
            {
              uint64_t v56 = swift_slowAlloc();
              id v57 = (void *)swift_slowAlloc();
              v98[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v56 = 138412546;
              *(void *)(v56 + 4) = v52;
              *id v57 = v52;

              *(_WORD *)(v56 + 12) = 2080;
              if (v90)
              {
                id v58 = [v53 description];
                uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v61 = v60;
              }
              else
              {
                unint64_t v61 = 0xE300000000000000;
                uint64_t v59 = 7104878;
              }
              uint64_t v20 = v95;
              *(void *)(v56 + 14) = sub_1000C51B8(v59, v61, v98);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v54, v55, "Found subtasks not to be deleted; make them top level instead. {subtaskID: %@, parentID: %s}",
                (uint8_t *)v56,
                0x16u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              a2 = v87;
              unint64_t v8 = v92;
            }
            else
            {

              uint64_t v20 = v95;
            }
            [v32 setParentReminder:0];
            id v38 = [v32 createResolutionTokenMapIfNecessary];
            NSString v62 = String._bridgeToObjectiveC()();
            [v38 updateForKey:v62];

            [v32 updateChangeCount];
            swift_beginAccess();
            id v63 = v52;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v21 = &selRef_intersectsSet_;
            if (*(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();

            id v32 = v63;
            goto LABEL_73;
          }
LABEL_60:
          unint64_t v8 = v92;
        }
        uint64_t v20 = v95;
LABEL_73:
        uint64_t v3 = v96;
        uint64_t v30 = v97;

LABEL_28:
        uint64_t v23 = v30;
        unint64_t v24 = v3;
      }
      if (v24) {
        break;
      }
      int64_t v33 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        if (v33 >= v91) {
          goto LABEL_74;
        }
        unint64_t v34 = *(void *)(v93 + 8 * v33);
        uint64_t v30 = v23 + 1;
        if (!v34)
        {
          uint64_t v30 = v23 + 2;
          if (v23 + 2 >= v91) {
            goto LABEL_74;
          }
          unint64_t v34 = *(void *)(v93 + 8 * v30);
          if (!v34)
          {
            uint64_t v30 = v23 + 3;
            if (v23 + 3 >= v91) {
              goto LABEL_74;
            }
            unint64_t v34 = *(void *)(v93 + 8 * v30);
            if (!v34)
            {
              uint64_t v30 = v23 + 4;
              if (v23 + 4 >= v91) {
                goto LABEL_74;
              }
              unint64_t v34 = *(void *)(v93 + 8 * v30);
              if (!v34)
              {
                uint64_t v35 = v23 + 5;
                while (v91 != v35)
                {
                  unint64_t v34 = *(void *)(v93 + 8 * v35++);
                  if (v34)
                  {
                    uint64_t v30 = v35 - 1;
                    goto LABEL_48;
                  }
                }
LABEL_74:
                sub_1000C1AF8();
                swift_beginAccess();
                if (v100 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v64 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
                }
                uint64_t v4 = v83;
                uint64_t v3 = v84;
                unint64_t v5 = v86;
                unint64_t v6 = v85;
                if (!v64)
                {

                  goto LABEL_86;
                }
                if (!v90)
                {

LABEL_86:
LABEL_87:
                  swift_bridgeObjectRelease();
                  goto LABEL_6;
                }
                if (!v88)
                {

                  goto LABEL_87;
                }
                id v65 = v88;
                id v66 = v90;
                if (sub_1005B4894(v65))
                {
                  if (qword_1009079C0 != -1) {
                    swift_once();
                  }
                  uint64_t v67 = type metadata accessor for Logger();
                  sub_10008E2DC(v67, (uint64_t)qword_10091E0A0);
                  id v66 = v66;
                  uint64_t v68 = Logger.logObject.getter();
                  os_log_type_t v69 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v68, v69))
                  {
                    uint64_t v70 = swift_slowAlloc();
                    v98[0] = swift_slowAlloc();
                    *(_DWORD *)uint64_t v70 = 136315394;
                    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
                    swift_bridgeObjectRetain();
                    uint64_t v71 = Array.description.getter();
                    unint64_t v73 = v72;
                    swift_bridgeObjectRelease();
                    uint64_t v99 = sub_1000C51B8(v71, v73, v98);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v70 + 12) = 2080;
                    id v74 = [v66 description];
                    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v77 = v76;

                    uint64_t v78 = v75;
                    a2 = v87;
                    uint64_t v99 = sub_1000C51B8(v78, v77, v98);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    unint64_t v5 = v86;
                    uint64_t v4 = v83;
                    uint64_t v3 = v84;
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Moving subtask IDs to reflect top level ordering. {subtaskIDs: %s, parentID: %s}", (uint8_t *)v70, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {
                  }
                  unint64_t v79 = swift_bridgeObjectRetain();
                  sub_1005B4B04(v79, (uint64_t)v66);
                  swift_release();
                  swift_bridgeObjectRelease();
                }
                else
                {
                }
                swift_bridgeObjectRelease();
                unint64_t v6 = v85;
LABEL_6:
                if (v5 == v4) {
                  return swift_bridgeObjectRelease();
                }
                goto LABEL_7;
              }
            }
          }
        }
LABEL_48:
        uint64_t v3 = (v34 - 1) & v34;
        unint64_t v29 = __clz(__rbit64(v34)) + (v30 << 6);
        goto LABEL_49;
      }
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_99;
      }
    }
    uint64_t v3 = (v24 - 1) & v24;
    unint64_t v29 = __clz(__rbit64(v24)) | (v23 << 6);
    uint64_t v30 = v23;
LABEL_49:
    id v32 = *(id *)(*(void *)(v20 + 48) + 8 * v29);
    if (!v32) {
      goto LABEL_74;
    }
    goto LABEL_50;
  }
LABEL_99:

  return swift_bridgeObjectRelease();
}

void sub_1005B8918(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1009079C0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10091E0A0);
  swift_retain_n();
  id v7 = a1;
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    id v11 = [v7 remObjectID];
    os_log_type_t v28 = v9;
    if (v11)
    {
      id v12 = v11;
      id v13 = [v11 description];

      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    sub_1000C51B8(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v17 = 1702195828;
    }
    else {
      uint64_t v17 = 0x65736C6166;
    }
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v18 = 0xE400000000000000;
    }
    else {
      unint64_t v18 = 0xE500000000000000;
    }
    sub_1000C51B8(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    if (*(unsigned char *)(a2 + 17)) {
      uint64_t v19 = 1702195828;
    }
    else {
      uint64_t v19 = 0x65736C6166;
    }
    if (*(unsigned char *)(a2 + 17)) {
      unint64_t v20 = 0xE400000000000000;
    }
    else {
      unint64_t v20 = 0xE500000000000000;
    }
    sub_1000C51B8(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v28, "REMRemindersListBatchDeleteInvocation: updating REMCDList ordering {listID: %s, orderingChanged: %s, needsSortReminders: %s}", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v3 = v2;
  }
  else
  {

    swift_release_n();
  }
  if (*(unsigned char *)(a2 + 16) == 1)
  {
    uint64_t v21 = sub_1005B708C();
    if (v3) {
      return;
    }
    unint64_t v23 = v22;
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = (uint64_t)v21;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v7 setReminderIDsMergeableOrdering:isa];

      id v26 = [v7 createResolutionTokenMapIfNecessary];
      NSString v27 = String._bridgeToObjectiveC()();
      [v26 updateForKey:v27];

      [v7 updateChangeCount];
      sub_100097F20(v24, v23);
    }
  }
  if (*(unsigned char *)(a2 + 17) == 1) {
    sub_1002F8428();
  }
}

id sub_1005B8D10(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1005B8D20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E2A8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E2A8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1005B8DE8(uint64_t a1)
{
}

id sub_1005B8E00()
{
  uint64_t v0 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = _s10PredicatesOMa(0);
  __chkstk_darwin(v7);
  os_log_type_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v9, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v12 = [(id)swift_getObjCClassFromMetadata() entity];
  [v11 setEntity:v12];

  [v11 setAffectedStores:0];
  [v11 setPredicate:v10];

  uint64_t v13 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v6, v13, v14);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v0);
  sub_100527148((uint64_t)v6, (uint64_t)v3, 0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10012607C((uint64_t)v6, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setSortDescriptors:isa];

  return v11;
}

void sub_1005B9128(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = sub_1005B8E00();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  unint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (v1) {
    return;
  }
  id v9 = [self defaultFetchOptions];
  unint64_t v10 = sub_10039D0B0(v8, v9, a1);
  v21[0] = v11;
  v21[1] = v10;

  swift_bridgeObjectRelease();
  type metadata accessor for REMReminderStorageCDIngestor();
  v21[3] = swift_initStackObject();
  if (qword_1009079C8 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10008E2DC(v3, (uint64_t)qword_10091E2A8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v12, v3);
  void v21[2] = v21;
  unint64_t v22 = (void *)v8;
  __chkstk_darwin(v13);
  v21[-2] = v6;
  sub_100094134(&qword_10090D750);
  sub_1000963CC(0, &qword_1009100F8);
  sub_100431B78();
  unint64_t v14 = Sequence.map<A>(skippingError:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  unint64_t v22 = _swiftEmptyArrayStorage;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    id v20 = objc_allocWithZone((Class)type metadata accessor for REMComplicationDataView.FetchModelInvocation.Result());
    REMComplicationDataView.FetchModelInvocation.Result.init(accountStorages:listStorages:reminderStorages:)();
    return;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_19;
  }
LABEL_8:
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v14 + 8 * i + 32);
      }
      unint64_t v18 = v17;
      id v19 = [v17 displayDate];

      if (v19)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_1005B9518(uint64_t a1)
{
  uint64_t result = sub_1005C18BC(&qword_10091E2F8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_1005B9570(uint64_t a1, void (*a2)(uint64_t *__return_ptr, char *), uint64_t a3)
{
  void (*v50)(uint64_t *__return_ptr, char *);
  void (**v51)(uint64_t, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  uint64_t v4 = v3;
  id v50 = a2;
  id v53 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  __chkstk_darwin(v53);
  uint64_t v49 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v52 = (char *)v39 - v10;
  os_log_type_t v55 = _swiftEmptyDictionarySingleton;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v39[0] = v9;
    v39[1] = a1;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v12 = v9 + 16;
    uint64_t v14 = *(unsigned __int8 *)(v12 + 64);
    uint64_t v15 = (v14 + 32) & ~v14;
    uint64_t v16 = a1 + v15;
    uint64_t v17 = *(void *)(v12 + 56);
    uint64_t v46 = v15;
    id v47 = v13;
    uint64_t v41 = v14 | 7;
    uint64_t v42 = v17 + v15;
    unint64_t v18 = _swiftEmptyDictionarySingleton;
    uint64_t v48 = v12;
    id v51 = (void (**)(uint64_t, char *, uint64_t))(v12 + 16);
    long long v40 = xmmword_100776E40;
    uint64_t v43 = a3;
    while (1)
    {
      id v19 = v52;
      v47(v52, v16, v53);
      v50(&v54, v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v39[0] + 8))(v52, v53);
        swift_bridgeObjectRelease();
        swift_release();
        return v18;
      }
      unsigned __int8 v20 = v54;
      unint64_t v22 = sub_100307114(v54);
      uint64_t v23 = v18[2];
      BOOL v24 = (v21 & 1) == 0;
      uint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        break;
      }
      char v26 = v21;
      if (v18[3] < v25)
      {
        sub_10030ED1C(v25, 1);
        unint64_t v18 = v55;
        unint64_t v27 = sub_100307114(v20);
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_23;
        }
        unint64_t v22 = v27;
      }
      if (v26)
      {
        uint64_t v29 = v18[7];
        id v44 = *v51;
        uint64_t v45 = 0;
        v44((uint64_t)v49, v52, v53);
        unint64_t v30 = *(void *)(v29 + 8 * v22);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v29 + 8 * v22) = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v30 = sub_1003091E4(0, *(void *)(v30 + 16) + 1, 1, v30);
          *(void *)(v29 + 8 * v22) = v30;
        }
        unint64_t v33 = *(void *)(v30 + 16);
        unint64_t v32 = *(void *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          unint64_t v30 = sub_1003091E4(v32 > 1, v33 + 1, 1, v30);
          *(void *)(v29 + 8 * v22) = v30;
        }
        *(void *)(v30 + 16) = v33 + 1;
        v44(v30 + v46 + v33 * v17, v49, v53);
        uint64_t v4 = v45;
      }
      else
      {
        sub_100094134(&qword_10090C168);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v40;
        (*v51)(v34 + v46, v52, v53);
        v18[(v22 >> 6) + 8] |= 1 << v22;
        *(unsigned char *)(v18[6] + v22) = v20;
        *(void *)(v18[7] + 8 * v22) = v34;
        uint64_t v35 = v18[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_22;
        }
        long long v18[2] = v37;
      }
      v16 += v17;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_1005B9934(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(Swift::UInt *__return_ptr, id *))
{
  uint64_t v6 = v5;
  uint64_t v7 = _swiftEmptyDictionarySingleton;
  uint64_t v34 = _swiftEmptyDictionarySingleton;
  int64_t v8 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease();
    return (uint64_t)v7;
  }
  else
  {
    uint64_t v9 = a3;
    while (v9 < v8)
    {
      id v33 = *(id *)(a2 + 8 * v9);
      id v11 = v33;
      a5(&v31, &v33);
      if (v6)
      {
        swift_release();
        swift_unknownObjectRelease();

        return (uint64_t)v7;
      }
      Swift::UInt v13 = v31;
      Swift::UInt v12 = v32;
      unint64_t v15 = sub_1003072F0(v31, v32);
      uint64_t v16 = v7[2];
      BOOL v17 = (v14 & 1) == 0;
      uint64_t v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        goto LABEL_20;
      }
      char v19 = v14;
      if (v7[3] < v18)
      {
        sub_10030F974(v18, 1);
        uint64_t v7 = v34;
        unint64_t v20 = sub_1003072F0(v13, v12);
        if ((v19 & 1) != (v21 & 1)) {
          goto LABEL_22;
        }
        unint64_t v15 = v20;
      }
      if (v19)
      {
        uint64_t v10 = (void *)(v7[7] + 8 * v15);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_10077A530;
        *(void *)(v22 + 32) = v11;
        uint64_t v30 = v22;
        specialized Array._endMutation()();
        v7[(v15 >> 6) + 8] |= 1 << v15;
        uint64_t v23 = (Swift::UInt *)(v7[6] + 16 * v15);
        Swift::UInt *v23 = v13;
        v23[1] = v12;
        *(void *)(v7[7] + 8 * v15) = v30;
        uint64_t v24 = v7[2];
        BOOL v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_21;
        }
        v7[2] = v26;
      }
      uint64_t v6 = 0;
      if (v8 == ++v9) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B9B7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *__return_ptr, id *))
{
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  Swift::UInt v31 = _swiftEmptyDictionarySingleton;
  int64_t v7 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease();
    return (uint64_t)v6;
  }
  else
  {
    uint64_t v8 = a3;
    while (v8 < v7)
    {
      id v30 = *(id *)(a2 + 8 * v8);
      id v10 = v30;
      a5(&v29, &v30);
      if (v5)
      {
        swift_release();
        swift_unknownObjectRelease();

        return (uint64_t)v6;
      }
      uint64_t v11 = v29;
      unint64_t v13 = sub_100307370(v29);
      uint64_t v14 = v6[2];
      BOOL v15 = (v12 & 1) == 0;
      uint64_t v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        goto LABEL_20;
      }
      char v17 = v12;
      if (v6[3] < v16)
      {
        sub_10030FC60(v16, 1);
        uint64_t v6 = v31;
        unint64_t v18 = sub_100307370(v11);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_22;
        }
        unint64_t v13 = v18;
      }
      if (v17)
      {
        uint64_t v9 = (void *)(v6[7] + 8 * v13);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_10077A530;
        *(void *)(v20 + 32) = v10;
        uint64_t v28 = v20;
        specialized Array._endMutation()();
        v6[(v13 >> 6) + 8] |= 1 << v13;
        uint64_t v21 = 8 * v13;
        *(void *)(v6[6] + v21) = v11;
        *(void *)(v6[7] + v21) = v28;
        uint64_t v22 = v6[2];
        BOOL v23 = __OFADD__(v22, 1);
        uint64_t v24 = v22 + 1;
        if (v23) {
          goto LABEL_21;
        }
        void v6[2] = v24;
      }
      if (v7 == ++v8) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

Swift::Int sub_1005B9DB4(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_1001F541C(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1005BC320(v5);
  *a1 = v2;
  return result;
}

void sub_1005B9E20(void *a1@<X1>, char *a2@<X2>, void *a3@<X3>, void (**a4)(char *, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v186 = a4;
  uint64_t v164 = a3;
  uint64_t v178 = a2;
  uint64_t v179 = a5;
  uint64_t v167 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel();
  uint64_t v168 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v166 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v172 = (char *)&v144 - v8;
  uint64_t v9 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v9 - 8);
  long long v163 = (uint64_t (**)(char *, uint64_t))((char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v189 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day();
  uint64_t v180 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  uint64_t v187 = (void (**)(char *, uint64_t))((char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v188 = (uint64_t *)((char *)&v144 - v13);
  __chkstk_darwin(v14);
  id v176 = (char *)&v144 - v15;
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket();
  uint64_t v181 = *(void *)(v16 - 8);
  uint64_t v182 = v16;
  __chkstk_darwin(v16);
  uint64_t v171 = (char **)((char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v177 = (char *)&v144 - v19;
  __chkstk_darwin(v20);
  uint64_t v183 = (char *)&v144 - v21;
  __chkstk_darwin(v22);
  uint64_t v184 = (char *)&v144 - v23;
  uint64_t v24 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v174 = *(void *)(v24 - 8);
  uint64_t v175 = v24;
  __chkstk_darwin(v24);
  uint64_t v170 = (uint64_t *)((char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  uint64_t v173 = (char *)&v144 - v27;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  unint64_t v169 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  id v30 = (char *)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v165 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  id v33 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  BOOL v36 = (char *)&v144 - v35;
  uint64_t v37 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v37 - 8);
  id v39 = (char *)&v144 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v144 - v41;
  uint64_t v43 = (uint64_t)a1;
  uint64_t v44 = v190;
  sub_1005BDEA0(a1, v186);
  if (v44) {
    return;
  }
  id v159 = v30;
  uint64_t v160 = Configuration;
  uint64_t v158 = v39;
  uint64_t v161 = v33;
  long long v162 = v36;
  uint64_t v190 = v31;
  uint64_t v46 = v45;
  swift_bridgeObjectRetain();
  id v47 = v185;
  sub_1005BB440((uint64_t)a1, v46, (uint64_t)v42);
  uint64_t v157 = v46;
  id v48 = [v47 fetchResultTokenToDiffAgainst];
  sub_10051F2BC(v48, (uint64_t)a1, (uint64_t)v162);
  uint64_t v155 = 0;
  uint64_t v153 = v42;

  uint64_t v49 = v159;
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  id v50 = v173;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  (*(void (**)(char *, uint64_t))(v169 + 8))(v49, v160);
  uint64_t v52 = v174;
  id v51 = (char *)v175;
  id v53 = v170;
  (*(void (**)(uint64_t *, char *, uint64_t))(v174 + 16))(v170, v50, v175);
  int v54 = (*(uint64_t (**)(uint64_t *, char *))(v52 + 88))(v53, v51);
  if (v54 != enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
LABEL_37:
    uint64_t v94 = v168;
    uint64_t v57 = (uint64_t)v161;
    uint64_t v95 = v189;
    uint64_t v96 = v182;
    if (v54 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, char *))(v52 + 96))(v53, v51);
      sub_100528BCC(*v53, (uint64_t)v162, v43, v164, 0);
      uint64_t v97 = v172;
LABEL_90:
      uint64_t v60 = v190;
      uint64_t v137 = (uint64_t)v158;
      goto LABEL_91;
    }
    if (v54 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
    {
      uint64_t v60 = v190;
      uint64_t v137 = (uint64_t)v158;
      if (v54 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:)) {
        goto LABEL_100;
      }
      uint64_t v97 = v172;
      goto LABEL_91;
    }
    uint64_t v151 = v43;
    (*(void (**)(uint64_t *, char *))(v52 + 96))(v53, v51);
    uint64_t v72 = *v53;
    uint64_t v98 = sub_100094134(&qword_100909C78);
    os_log_type_t v69 = v163;
    sub_1001326D0((uint64_t)v53 + *(int *)(v98 + 48), (uint64_t)v163);
    uint64_t v67 = _swiftEmptyArrayStorage;
    uint64_t v191 = _swiftEmptyArrayStorage;
    uint64_t v178 = *(char **)(v157 + 16);
    if (!v178)
    {
LABEL_87:
      uint64_t v97 = v172;
LABEL_89:
      uint64_t v138 = v151;
      uint64_t v139 = v164;
      sub_1005280D0(v72, (uint64_t)v67, v151, v164, 0);
      sub_10052929C((uint64_t)v69, (uint64_t)v67, v138, v139, 0);
      swift_bridgeObjectRelease();
      sub_1000966BC((uint64_t)v69, &qword_100909C68);
      uint64_t v94 = v168;
      goto LABEL_90;
    }
    uint64_t v145 = v72;
    unint64_t v169 = *(void *)(v181 + 16);
    uint64_t v160 = v157 + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80));
    id v159 = (char *)(v181 + 88);
    LODWORD(v156) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
    int v150 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
    LODWORD(v149) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
    int v148 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
    int v146 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
    uint64_t v170 = (uint64_t *)(v181 + 96);
    uint64_t v147 = (void (**)(char *, char **, uint64_t))(v180 + 32);
    uint64_t v185 = (void *)(v180 + 16);
    uint64_t v186 = (void (**)(char *, uint64_t))(v180 + 8);
    uint64_t v152 = (void (**)(char *, uint64_t))(v181 + 8);
    v181 += 16;
    uint64_t v154 = *(void *)(v181 + 56);
    swift_bridgeObjectRetain();
    uint64_t v99 = 0;
    unint64_t v100 = v176;
    uint64_t v101 = v177;
    uint64_t v102 = v187;
    while (1)
    {
      uint64_t v184 = v99;
      uint64_t v106 = v160 + v154 * (void)v99;
      long long v107 = (void (*)(char **, char *, uint64_t))v169;
      ((void (*)(char *, uint64_t, uint64_t))v169)(v101, v106, v96);
      uint64_t v108 = v171;
      v107(v171, v101, v96);
      int v109 = (*(uint64_t (**)(char **, uint64_t))v159)(v108, v96);
      if (v109 == v156)
      {
        ((void (*)(char **, uint64_t))*v170)(v108, v96);
        unint64_t v110 = *v108;
LABEL_48:
        uint64_t v112 = v180;
        goto LABEL_49;
      }
      if (v109 == v150)
      {
        ((void (*)(char **, uint64_t))*v170)(v108, v96);
        unint64_t v110 = *(char **)((char *)v108 + *(int *)(sub_100094134(&qword_10091E310) + 48));
        uint64_t v111 = type metadata accessor for Date();
        (*(void (**)(char **, uint64_t))(*(void *)(v111 - 8) + 8))(v108, v111);
        goto LABEL_48;
      }
      if (v109 == v149)
      {
        ((void (*)(char **, uint64_t))*v170)(v108, v96);
        (*v147)(v100, v108, v95);
        uint64_t v103 = (void *)REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
        (*v186)(v100, v95);
LABEL_72:
        uint64_t v101 = v177;
        goto LABEL_43;
      }
      uint64_t v112 = v180;
      if (v109 == v148)
      {
        ((void (*)(char **, uint64_t))*v170)(v108, v96);
        unint64_t v110 = *(char **)((char *)v108 + *(int *)(sub_100094134(&qword_10091E310) + 48));
        uint64_t v135 = type metadata accessor for Date();
        (*(void (**)(char **, uint64_t))(*(void *)(v135 - 8) + 8))(v108, v135);
LABEL_49:
        uint64_t v101 = v177;
        uint64_t v113 = *((void *)v110 + 2);
        if (v113) {
          break;
        }
        goto LABEL_42;
      }
      uint64_t v101 = v177;
      if (v109 != v146) {
        goto LABEL_101;
      }
      ((void (*)(char **, uint64_t))*v170)(v108, v96);
      unint64_t v110 = *(char **)((char *)v108 + *(int *)(sub_100094134(&qword_10091E310) + 48));
      uint64_t v136 = type metadata accessor for Date();
      (*(void (**)(char **, uint64_t))(*(void *)(v136 - 8) + 8))(v108, v136);
      uint64_t v113 = *((void *)v110 + 2);
      if (v113) {
        break;
      }
LABEL_42:
      swift_bridgeObjectRelease();
      uint64_t v103 = _swiftEmptyArrayStorage;
      unint64_t v100 = v176;
LABEL_43:
      uint64_t v99 = v184 + 1;
      uint64_t v104 = v182;
      (*v152)(v101, v182);
      uint64_t v105 = (uint64_t)v103;
      uint64_t v96 = v104;
      sub_1002026F8(v105);
      if (v99 == v178)
      {
        swift_bridgeObjectRelease();
        uint64_t v67 = v191;
        uint64_t v97 = v172;
        uint64_t v72 = v145;
        os_log_type_t v69 = v163;
        goto LABEL_89;
      }
    }
    uint64_t v114 = &v110[(*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80)];
    uint64_t v188 = *(uint64_t **)(v112 + 72);
    uint64_t v115 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v112 + 16);
    uint64_t v183 = v110;
    swift_bridgeObjectRetain();
    uint64_t v103 = _swiftEmptyArrayStorage;
    while (1)
    {
      v115(v102, v114, v95);
      uint64_t v116 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
      (*v186)((char *)v102, v95);
      uint64_t v117 = *(void *)(v116 + 16);
      int64_t v118 = v103[2];
      int64_t v119 = v118 + v117;
      if (__OFADD__(v118, v117)) {
        goto LABEL_95;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v119 <= v103[3] >> 1)
      {
        if (*(void *)(v116 + 16)) {
          goto LABEL_62;
        }
      }
      else
      {
        if (v118 <= v119) {
          int64_t v121 = v118 + v117;
        }
        else {
          int64_t v121 = v118;
        }
        uint64_t v103 = (void *)sub_1003091E4(isUniquelyReferenced_nonNull_native, v121, 1, (unint64_t)v103);
        if (*(void *)(v116 + 16))
        {
LABEL_62:
          uint64_t v122 = v103[2];
          uint64_t v123 = (v103[3] >> 1) - v122;
          uint64_t v124 = *(void *)(type metadata accessor for REMRemindersListDataView.ReminderLite() - 8);
          uint64_t v125 = *(void *)(v124 + 72);
          if (v123 < v117) {
            goto LABEL_97;
          }
          unint64_t v126 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
          uint64_t v127 = (char *)v103 + v126 + v125 * v122;
          unint64_t v128 = v116 + v126;
          uint64_t v129 = v125 * v117;
          uint64_t v130 = &v127[v129];
          unint64_t v131 = v128 + v129;
          BOOL v132 = v128 >= (unint64_t)v130 || (unint64_t)v127 >= v131;
          uint64_t v102 = v187;
          if (!v132) {
            goto LABEL_99;
          }
          swift_arrayInitWithCopy();
          if (v117)
          {
            uint64_t v133 = v103[2];
            BOOL v89 = __OFADD__(v133, v117);
            uint64_t v134 = v133 + v117;
            if (v89) {
              goto LABEL_98;
            }
            v103[2] = v134;
          }
          goto LABEL_52;
        }
      }
      uint64_t v102 = v187;
      if (v117) {
        goto LABEL_96;
      }
LABEL_52:
      swift_bridgeObjectRelease();
      uint64_t v114 = (char *)v188 + (void)v114;
      if (!--v113)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v57 = (uint64_t)v161;
        unint64_t v100 = v176;
        goto LABEL_72;
      }
    }
  }
  uint64_t v151 = (uint64_t)a1;
  (*(void (**)(uint64_t *, char *))(v52 + 96))(v53, v51);
  uint64_t v55 = *v53;
  uint64_t v56 = _swiftEmptyArrayStorage;
  uint64_t v191 = _swiftEmptyArrayStorage;
  uint64_t v57 = (uint64_t)v161;
  uint64_t v58 = v182;
  uint64_t v177 = *(char **)(v157 + 16);
  if (!v177)
  {
    uint64_t v97 = v172;
    uint64_t v60 = v190;
LABEL_82:
    sub_1005280D0(v55, (uint64_t)v56, v151, v164, 0);
    swift_bridgeObjectRelease();
    uint64_t v137 = (uint64_t)v158;
    uint64_t v94 = v168;
LABEL_91:
    (*(void (**)(char *, uint64_t))(v174 + 8))(v173, v175);
    sub_1000BF710((uint64_t)v153, v137, &qword_100909C70);
    REMRemindersListDataView.ScheduledDateBucketsModel.init(buckets:remindersCount:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v140 = v167;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v166, v97, v167);
    uint64_t v141 = v165;
    uint64_t v142 = v57;
    uint64_t v143 = (uint64_t)v162;
    (*(void (**)(uint64_t, char *, uint64_t))(v165 + 16))(v142, v162, v60);
    sub_1005C18BC(&qword_10091E300, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel);
    sub_1005C18BC(&qword_10091E308, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v172, v140);
    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v143, v60);
    sub_1000966BC((uint64_t)v153, &qword_100909C70);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v147 = (void (**)(char *, char **, uint64_t))v55;
  uint64_t v59 = v181 + 16;
  uint64_t v170 = *(uint64_t **)(v181 + 16);
  unint64_t v169 = v157 + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80));
  long long v163 = (uint64_t (**)(char *, uint64_t))(v181 + 88);
  LODWORD(v160) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
  LODWORD(v154) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
  LODWORD(v152) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
  int v150 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
  int v148 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
  uint64_t v171 = (char **)(v181 + 96);
  uint64_t v149 = (void (**)(char *, char *, uint64_t))(v180 + 32);
  uint64_t v186 = (void (**)(char *, uint64_t))(v180 + 16);
  uint64_t v187 = (void (**)(char *, uint64_t))(v180 + 8);
  uint64_t v156 = (void (**)(char *, uint64_t))(v181 + 8);
  id v159 = *(char **)(v181 + 72);
  swift_bridgeObjectRetain();
  uint64_t v43 = 0;
  uint64_t v52 = v179;
  uint64_t v60 = v190;
  id v53 = v188;
  unint64_t v61 = v184;
  uint64_t v181 = v59;
  while (1)
  {
    uint64_t v185 = (void *)v43;
    id v63 = v170;
    ((void (*)(char *, unint64_t, uint64_t))v170)(v61, v169 + (void)v159 * v43, v58);
    id v51 = v183;
    ((void (*)(char *, char *, uint64_t))v63)(v183, v61, v58);
    int v64 = (*v163)(v51, v58);
    if (v64 == v160)
    {
      ((void (*)(char *, uint64_t))*v171)(v51, v58);
      uint64_t v65 = *(void *)v51;
      uint64_t v66 = *(void *)(*(void *)v51 + 16);
      if (v66) {
        break;
      }
      goto LABEL_31;
    }
    if (v64 != v154)
    {
      if (v64 == v152)
      {
        uint64_t v62 = v52;
        ((void (*)(char *, uint64_t))*v171)(v51, v58);
        id v92 = v176;
        uint64_t v93 = v189;
        (*v149)(v176, v51, v189);
        uint64_t v70 = (void *)REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
        (*v187)(v92, v93);
        goto LABEL_6;
      }
      if (v64 != v150 && v64 != v148)
      {
        int v54 = _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        goto LABEL_37;
      }
    }
    ((void (*)(char *, uint64_t))*v171)(v51, v58);
    uint64_t v65 = *(void *)&v51[*(int *)(sub_100094134(&qword_10091E310) + 48)];
    uint64_t v91 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v91 - 8) + 8))(v51, v91);
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66) {
      break;
    }
LABEL_31:
    uint64_t v62 = v52;
    swift_bridgeObjectRelease();
    uint64_t v70 = _swiftEmptyArrayStorage;
LABEL_6:
    unint64_t v61 = v184;
    uint64_t v43 = (uint64_t)v185 + 1;
    (*v156)(v184, v58);
    sub_1002026F8((uint64_t)v70);
    uint64_t v52 = v62;
    if ((char *)v43 == v177)
    {
      swift_bridgeObjectRelease();
      uint64_t v56 = v191;
      uint64_t v57 = (uint64_t)v161;
      uint64_t v97 = v172;
      uint64_t v55 = (uint64_t)v147;
      goto LABEL_82;
    }
  }
  uint64_t v67 = (void *)(v65 + ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80)));
  uint64_t v68 = *(void *)(v180 + 72);
  os_log_type_t v69 = *(uint64_t (***)(char *, uint64_t))(v180 + 16);
  uint64_t v178 = (char *)v65;
  swift_bridgeObjectRetain();
  uint64_t v70 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v71 = v189;
    ((void (*)(uint64_t *, void *, uint64_t))v69)(v53, v67, v189);
    uint64_t v72 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
    (*v187)((char *)v53, v71);
    uint64_t v57 = *(void *)(v72 + 16);
    int64_t v73 = v70[2];
    int64_t v74 = v73 + v57;
    if (__OFADD__(v73, v57))
    {
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    int v75 = swift_isUniquelyReferenced_nonNull_native();
    if (!v75 || v74 > v70[3] >> 1)
    {
      if (v73 <= v74) {
        int64_t v76 = v73 + v57;
      }
      else {
        int64_t v76 = v73;
      }
      uint64_t v70 = (void *)sub_1003091E4(v75, v76, 1, (unint64_t)v70);
    }
    uint64_t v60 = v190;
    if (!*(void *)(v72 + 16))
    {
      id v53 = v188;
      if (v57) {
        goto LABEL_86;
      }
      goto LABEL_11;
    }
    uint64_t v77 = v70[2];
    uint64_t v78 = (v70[3] >> 1) - v77;
    uint64_t v79 = *(void *)(type metadata accessor for REMRemindersListDataView.ReminderLite() - 8);
    uint64_t v80 = *(void *)(v79 + 72);
    if (v78 < v57) {
      break;
    }
    unint64_t v81 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    uint64_t v82 = (char *)v70 + v81 + v80 * v77;
    unint64_t v83 = v72 + v81;
    uint64_t v84 = v80 * v57;
    unint64_t v85 = &v82[v84];
    unint64_t v86 = v83 + v84;
    BOOL v87 = v83 >= (unint64_t)v85 || (unint64_t)v82 >= v86;
    uint64_t v60 = v190;
    if (!v87) {
      goto LABEL_99;
    }
    swift_arrayInitWithCopy();
    id v53 = v188;
    if (v57)
    {
      uint64_t v88 = v70[2];
      BOOL v89 = __OFADD__(v88, v57);
      id v90 = (char *)(v88 + v57);
      if (v89) {
        goto LABEL_94;
      }
      v70[2] = v90;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v67 = (void *)((char *)v67 + v68);
    if (!--v66)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v62 = v179;
      uint64_t v58 = v182;
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_100:
  swift_bridgeObjectRelease();
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_101:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

void sub_1005BB440(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v75 = a1;
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v97 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v94 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v67 - v8;
  uint64_t v96 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day();
  uint64_t v80 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  int64_t v76 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v95 = (char *)v67 - v12;
  uint64_t v82 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket();
  uint64_t v13 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v91 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v93 = (char *)v67 - v16;
  uint64_t v74 = _s10PredicatesOMa(0);
  __chkstk_darwin(v74);
  int64_t v73 = (char *)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v19 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v21 = (char *)v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  char v22 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, Configuration);
  if ((v22 & 1) == 0)
  {
    uint64_t v59 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(a3, 1, 1, v59);
    return;
  }
  uint64_t v71 = a3;
  uint64_t v83 = *(void *)(a2 + 16);
  if (!v83)
  {
LABEL_45:
    uint64_t v60 = (uint64_t)v73;
    swift_storeEnumTagMultiPayload();
    unint64_t v61 = (void *)sub_10038F1F0();
    sub_1000C6DAC(v60);
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    id v62 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v63 = [(id)swift_getObjCClassFromMetadata() entity];
    [v62 setEntity:v63];

    [v62 setAffectedStores:0];
    [v62 setPredicate:v61];
    uint64_t v64 = v78;
    NSManagedObjectContext.count<A>(for:)();
    uint64_t v65 = v71;
    if (v64)
    {
    }
    else
    {

      REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)();
      uint64_t v66 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 0, 1, v66);
    }
    return;
  }
  uint64_t v24 = *(void (**)(void, void, void))(v13 + 16);
  uint64_t v23 = v13 + 16;
  uint64_t v88 = a2 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
  BOOL v89 = (void (*)(char *, char *, uint64_t))v24;
  BOOL v87 = (uint64_t (**)(uint64_t *, uint64_t))(v23 + 72);
  int v86 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:);
  int v77 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:);
  int v72 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
  int v70 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
  int v68 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
  unint64_t v85 = (void (**)(uint64_t *, uint64_t))(v23 + 80);
  os_log_type_t v69 = (void (**)(char *, uint64_t *, uint64_t))(v80 + 32);
  uint64_t v107 = v97 + 16;
  uint64_t v25 = (void (**)(char *, uint64_t))(v97 + 8);
  uint64_t v98 = v80 + 16;
  uint64_t v99 = (void (**)(char *, uint64_t))(v80 + 8);
  unint64_t v81 = (void (**)(char *, uint64_t))(v23 - 8);
  uint64_t v90 = v23;
  uint64_t v84 = *(void *)(v23 + 56);
  v67[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v29 = v95;
  uint64_t v28 = v96;
  uint64_t v30 = v82;
  uint64_t v31 = v93;
  while (1)
  {
    id v33 = v89;
    uint64_t v92 = v26;
    v89(v31, (char *)(v88 + v84 * v26), v30);
    uint64_t v34 = v30;
    uint64_t v35 = (uint64_t *)v91;
    v33(v91, v93, v34);
    BOOL v36 = v35;
    uint64_t v30 = v34;
    int v37 = (*v87)(v36, v34);
    if (v37 == v86)
    {
      (*v85)(v36, v34);
      uint64_t v38 = *v36;
      goto LABEL_10;
    }
    if (v37 != v77) {
      break;
    }
LABEL_9:
    (*v85)(v36, v34);
    uint64_t v39 = *(uint64_t *)((char *)v36 + *(int *)(sub_100094134(&qword_10091E310) + 48));
    uint64_t v40 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v40 - 8) + 8))(v36, v40);
    uint64_t v38 = v39;
LABEL_10:
    uint64_t v103 = *(void *)(v38 + 16);
    if (v103)
    {
      uint64_t v102 = v38 + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
      uint64_t v41 = *(void *)(v80 + 72);
      unint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
      uint64_t v101 = v41;
      uint64_t v79 = v38;
      swift_bridgeObjectRetain();
      uint64_t v42 = 0;
      do
      {
        uint64_t v106 = v42;
        v100(v29, v102 + v101 * v42, v28);
        uint64_t v43 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
        uint64_t v44 = *(void *)(v43 + 16);
        if (v44)
        {
          uint64_t v104 = v43;
          uint64_t v105 = v27;
          uint64_t v45 = 0;
          unint64_t v46 = v43 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
          uint64_t v47 = *(void *)(v97 + 72);
          id v48 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
          v48(v9, v46, v5);
          while (1)
          {
            char v49 = REMRemindersListDataView.ReminderLite.isCompleted.getter();
            (*v25)(v9, v5);
            if ((v49 & 1) == 0)
            {
              BOOL v50 = __OFADD__(v45++, 1);
              if (v50)
              {
                __break(1u);
                goto LABEL_45;
              }
            }
            v46 += v47;
            if (!--v44) {
              break;
            }
            v48(v9, v46, v5);
          }
          swift_bridgeObjectRelease();
          uint64_t v29 = v95;
          uint64_t v28 = v96;
          uint64_t v27 = v105 + v45;
          if (__OFADD__(v105, v45))
          {
            __break(1u);
            goto LABEL_48;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v42 = v106 + 1;
        (*v99)(v29, v28);
      }
      while (v42 != v103);
      swift_bridgeObjectRelease_n();
LABEL_41:
      uint64_t v30 = v82;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v31 = v93;
    uint64_t v32 = v92 + 1;
    (*v81)(v93, v30);
    uint64_t v26 = v32;
    if (v32 == v83)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  if (v37 != v72)
  {
    if (v37 != v70 && v37 != v68) {
      goto LABEL_50;
    }
    goto LABEL_9;
  }
  uint64_t v105 = v27;
  (*v85)(v36, v34);
  (*v69)(v76, v36, v28);
  uint64_t v51 = REMRemindersListDataView.ScheduledDateBucketsModel.Day.reminders.getter();
  uint64_t v52 = *(void *)(v51 + 16);
  if (!v52)
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = 0;
LABEL_39:
    uint64_t v27 = v105 + v53;
    if (__OFADD__(v105, v53)) {
      goto LABEL_49;
    }
    (*v99)(v76, v28);
    goto LABEL_41;
  }
  uint64_t v53 = 0;
  uint64_t v54 = *(unsigned __int8 *)(v97 + 80);
  uint64_t v104 = v51;
  uint64_t v55 = v51 + ((v54 + 32) & ~v54);
  uint64_t v106 = *(void *)(v97 + 72);
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
  while (1)
  {
    uint64_t v57 = v94;
    v56(v94, v55, v5);
    char v58 = REMRemindersListDataView.ReminderLite.isCompleted.getter();
    (*v25)(v57, v5);
    if ((v58 & 1) == 0)
    {
      BOOL v50 = __OFADD__(v53++, 1);
      if (v50) {
        break;
      }
    }
    v55 += v106;
    if (!--v52)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = v95;
      uint64_t v28 = v96;
      goto LABEL_39;
    }
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_1005BBECC()
{
  uint64_t v0 = _s9UtilitiesO12SortingStyleOMa();
  sub_10008E278(v0, qword_10091E2C0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E2C0);
  uint64_t v2 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v3 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1005BBF80@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v26[0] = a3;
  v26[1] = a2;
  uint64_t v28 = a4;
  uint64_t v27 = type metadata accessor for Calendar.Component();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v16 = __chkstk_darwin(v15).n128_u64[0];
  uint64_t v18 = (char *)v26 - v17;
  id v19 = [*a1 displayDateDate:v16];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_5;
  }
  uint64_t v20 = v19;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v14, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_5:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    uint64_t v25 = v27;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.year(_:), v27);
    (*(void (**)(char *, void, uint64_t))(v12 + 16))(v14, v26[0], v11);
    uint64_t v23 = Calendar.component(_:from:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v25);
    goto LABEL_6;
  }
  v21(v18, v10, v11);
  uint64_t v22 = v27;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Calendar.Component.year(_:), v27);
  uint64_t v23 = Calendar.component(_:from:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
LABEL_6:
  *uint64_t v28 = v23;
  return result;
}

Swift::Int sub_1005BC320(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = 0;
      uint64_t v86 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v88 = *(void *)(v86 + 16 * i);
        uint64_t v89 = v85;
        do
        {
          if (v88 >= *(void *)(v86 + v89)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          uint64_t v90 = (void *)(v86 + v89);
          uint64_t v91 = *(void *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *uint64_t v90 = v88;
          v90[1] = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v92 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          uint64_t v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_1005BC9F4((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v95 = sub_1001F433C((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v103[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100094134(&qword_10090F768);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 32;
  uint64_t v100 = *a1 - 16;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v104 = v6;
  Swift::Int v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      uint64_t v17 = *(void *)(v11 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (uint64_t *)(v102 + 16 * v14);
        uint64_t v19 = v15;
        while (1)
        {
          uint64_t v21 = *v18;
          v18 += 2;
          uint64_t v20 = v21;
          if (v15 < v17 == v21 >= v19) {
            break;
          }
          ++v10;
          uint64_t v19 = v20;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v22 = 16 * v10;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = *(void *)(v11 + v16);
              uint64_t v27 = *(void *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      Swift::Int v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = v100 + 16 * v10;
      do
      {
        uint64_t v30 = *(void *)(v11 + 16 * v10);
        Swift::Int v31 = v14;
        uint64_t v32 = v29;
        do
        {
          if (v30 >= *(void *)v32) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *(void *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(void *)uint64_t v32 = v30;
          *(void *)(v32 + 8) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      Swift::Int v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1001F3D80(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v35 = *((void *)v12 + 2);
    unint64_t v34 = *((void *)v12 + 3);
    unint64_t v13 = v35 + 1;
    uint64_t v11 = v106;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = sub_1001F3D80((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v106;
      uint64_t v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    BOOL v36 = v12 + 32;
    int v37 = &v12[16 * v35 + 32];
    *(void *)int v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        unint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          BOOL v49 = __OFSUB__(v45, v44);
          uint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          uint64_t v48 = *((void *)v43 - 6);
          uint64_t v47 = *((void *)v43 - 5);
          BOOL v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          char v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          unint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          BOOL v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          BOOL v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            int64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            BOOL v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            BOOL v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            char v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          uint64_t v39 = *((void *)v12 + 5);
          BOOL v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          char v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        unint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        char v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        id v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v49 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          BOOL v66 = v41 < v65;
LABEL_83:
          if (v66) {
            unint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        os_log_type_t v69 = &v36[16 * v38];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v78 = v12;
        uint64_t v79 = &v36[16 * v77];
        uint64_t v80 = *(void *)v79;
        unint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        sub_1005BC9F4((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        unint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        uint64_t v12 = v78;
        unint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v106;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v104;
    Swift::Int v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005BC9F4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v24 = __src;
  Swift::Int v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v16 = &v4[16 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v17 = (char *)(a3 - 16);
        uint64_t v18 = v6;
        while (1)
        {
          uint64_t v19 = v17 + 16;
          uint64_t v20 = *((void *)v18 - 2);
          v18 -= 16;
          if (*((void *)v16 - 2) >= v20)
          {
            uint64_t v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)uint64_t v17 = *((_OWORD *)v16 - 1);
            }
            uint64_t v18 = v6;
            v16 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            }
            Swift::Int v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 16;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    Swift::Int v14 = &v4[16 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          Swift::Int v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    sub_1001F3F68((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1005BCC70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v35 = a2;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  __chkstk_darwin(v11);
  unint64_t v34 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  Swift::Int v31 = (char *)v28 - v15;
  int64_t v16 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v28[1] = a4;
    void v28[2] = a1;
    uint64_t v17 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v29 = a3;
    uint64_t v30 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v19 = a4 & 1 | (2 * a3);
    uint64_t v20 = a3;
    while (1)
    {
      if (v20 >= v16)
      {
        __break(1u);
        return;
      }
      id v21 = *(id *)(v35 + 8 * v20);
      id v22 = [v21 displayDateDate];
      if (!v22) {
        break;
      }
      Swift::Int v23 = v22;
      Swift::Int v24 = v34;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = *v17;
      (*v17)(v10, v24, v11);
      (*v18)(v10, 0, 1, v11);
      if ((*v33)(v10, 1, v11) == 1) {
        goto LABEL_4;
      }
      uint64_t v26 = v31;
      v25(v31, v10, v11);
      sub_1005C18BC((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v30)(v26, v11);

      if ((v27 & 1) == 0)
      {
        if (v20 <= v29)
        {
          uint64_t v35 = 0;
          return;
        }
        if (v20 < 0) {
          __break(1u);
        }
        goto LABEL_13;
      }
LABEL_5:
      ++v20;
      v19 += 2;
      if (v16 == v20) {
        goto LABEL_13;
      }
    }
    (*v18)(v10, 1, 1, v11);
LABEL_4:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);

    goto LABEL_5;
  }
LABEL_13:
  swift_unknownObjectRetain();
}

void *sub_1005BCFAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  int64_t v20 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v36[1] = v6;
    int v37 = (char *)v36 - v17;
    char v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    uint64_t v43 = v19;
    uint64_t v38 = v18;
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t result = (void *)swift_unknownObjectRetain();
    id v21 = _swiftEmptyArrayStorage;
    uint64_t v45 = v15;
    uint64_t v44 = a2;
    uint64_t v39 = a1;
    uint64_t v40 = v20;
    while (a3 < v20)
    {
      id v23 = *(id *)(a2 + 8 * a3);
      id v24 = [v23 objectID];
      uint64_t v25 = v24;
      if (*(void *)(a5 + 16) && (unint64_t v26 = sub_100306F98((uint64_t)v24), (v27 & 1) != 0)) {
        uint64_t v28 = *(void *)(*(void *)(a5 + 56) + 8 * v26);
      }
      else {
        uint64_t v28 = 0;
      }

      sub_100521784(v23, v28, 0, (uint64_t)v14);
      uint64_t v29 = v45;
      if ((*v42)(v14, 1, v45) == 1)
      {
        uint64_t result = (void *)sub_1000966BC((uint64_t)v14, &qword_10090FD78);
      }
      else
      {
        uint64_t v30 = *v41;
        Swift::Int v31 = v37;
        (*v41)(v37, v14, v29);
        v30(v43, v31, v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v21 = (void *)sub_1003091E4(0, v21[2] + 1, 1, (unint64_t)v21);
        }
        unint64_t v33 = v21[2];
        unint64_t v32 = v21[3];
        uint64_t v34 = v38;
        if (v33 >= v32 >> 1)
        {
          uint64_t v35 = sub_1003091E4(v32 > 1, v33 + 1, 1, (unint64_t)v21);
          uint64_t v34 = v38;
          id v21 = (void *)v35;
        }
        void v21[2] = v33 + 1;
        uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v30)((char *)v21+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v33, v43, v45);
      }
      int64_t v20 = v40;
      ++a3;
      a2 = v44;
      if (v40 == a3)
      {
        swift_unknownObjectRelease();
        return v21;
      }
    }
    __break(1u);
  }
  return result;
}

void *sub_1005BD2E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v86 = a6;
  uint64_t v88 = a2;
  uint64_t v97 = a1;
  uint64_t v87 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day();
  uint64_t v89 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v92 = (char *)&v76 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v96 = (char *)&v76 - v18;
  __chkstk_darwin(v19);
  uint64_t v102 = (char *)&v76 - v20;
  __chkstk_darwin(v21);
  uint64_t v106 = (char *)&v76 - v22;
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v23 - 8);
  uint64_t v84 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v100 = (uint64_t)&v76 - v26;
  __chkstk_darwin(v27);
  uint64_t v99 = (uint64_t)&v76 - v28;
  __chkstk_darwin(v29);
  Swift::Int v31 = (char *)&v76 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v76 - v33;
  uint64_t v83 = type metadata accessor for Calendar();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v95 = (char *)&v76 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  BOOL v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v103 = v34;
  uint64_t v105 = v14 + 56;
  uint64_t v111 = v36;
  v36(v34, 1, 1, v13);
  unint64_t v81 = a4;
  int64_t v37 = a4 >> 1;
  unint64_t v108 = (a4 >> 1) - a3;
  if (a4 >> 1 != a3)
  {
    uint64_t v93 = a3;
    if ((uint64_t)(a4 >> 1) <= a3) {
      goto LABEL_47;
    }
    int64_t v85 = a4 >> 1;
    uint64_t v76 = v16;
    uint64_t v78 = v10;
    uint64_t v90 = v6;
    int v109 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    unint64_t v110 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    unint64_t v94 = (void (**)(uint64_t, char *, uint64_t))(v14 + 16);
    unint64_t v80 = v81 & 1;
    uint64_t v79 = v89 + 32;
    uint64_t v77 = v14;
    uint64_t v98 = (void (**)(char *, uint64_t))(v14 + 8);
    swift_unknownObjectRetain();
    uint64_t v14 = 0;
    uint64_t v107 = v88 + 8 * v93;
    uint64_t v101 = _swiftEmptyArrayStorage;
    uint64_t v91 = v93;
    uint64_t v10 = v102;
    while (1)
    {
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        uint64_t v101 = (void *)sub_1003096D4(0, v101[2] + 1, 1, (unint64_t)v101);
LABEL_35:
        unint64_t v73 = v101[2];
        unint64_t v72 = v101[3];
        if (v73 >= v72 >> 1) {
          uint64_t v101 = (void *)sub_1003096D4(v72 > 1, v73 + 1, 1, (unint64_t)v101);
        }
        uint64_t v74 = v101;
        v101[2] = v73 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v89 + 32))((unint64_t)v74+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(void *)(v89 + 72) * v73, v10, v87);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v14 + 8))(v31, v13);
        uint64_t v69 = (uint64_t)v103;
LABEL_38:
        sub_1000966BC(v69, (uint64_t *)&unk_100909A40);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v95, v83);
        return v101;
      }
      id v39 = *(id *)(v107 + 8 * v14);
      id v40 = [v39 displayDateDate];
      if (!v40) {
        break;
      }
      uint64_t v41 = v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v42 = *v109;
      (*v109)(v31, v10, v13);
      v111(v31, 0, 1, v13);
      uint64_t v43 = *v110;
      if ((*v110)(v31, 1, v13) == 1) {
        goto LABEL_6;
      }
      Swift::Int v104 = v42;
      v42(v106, v31, v13);
      uint64_t v44 = (uint64_t)v103;
      uint64_t v45 = v99;
      sub_1000BF710((uint64_t)v103, v99, (uint64_t *)&unk_100909A40);
      unsigned int v46 = v43((char *)v45, 1, v13);
      sub_1000966BC(v45, (uint64_t *)&unk_100909A40);
      if (v46 == 1)
      {
        sub_1000966BC(v44, (uint64_t *)&unk_100909A40);
        (*v94)(v44, v106, v13);
        v111((char *)v44, 0, 1, v13);
      }
      uint64_t v47 = v44;
      uint64_t v48 = v100;
      sub_1000BF710(v47, v100, (uint64_t *)&unk_100909A40);
      if (v43((char *)v48, 1, v13) == 1)
      {
        (*v98)(v106, v13);

        sub_1000966BC(v48, (uint64_t *)&unk_100909A40);
        uint64_t v10 = v102;
      }
      else
      {
        BOOL v49 = v96;
        v104(v96, (char *)v48, v13);
        unint64_t v50 = v106;
        char v51 = Calendar.isDate(_:inSameDayAs:)();
        uint64_t v10 = v102;
        if (v51)
        {

          uint64_t v52 = *v98;
          (*v98)(v49, v13);
          v52(v50, v13);
        }
        else
        {
          int64_t v53 = v93 + v14;
          if (__OFADD__(v93, v14)) {
            goto LABEL_41;
          }
          uint64_t v54 = v91;
          if (v53 < v91) {
            goto LABEL_42;
          }
          if (v85 < v91) {
            goto LABEL_43;
          }
          if (v91 < v93) {
            goto LABEL_44;
          }
          if (v85 < v53) {
            goto LABEL_45;
          }
          if (v53 < 0) {
            goto LABEL_46;
          }
          uint64_t v55 = v80 | (2 * v53);
          uint64_t v56 = v97;
          swift_unknownObjectRetain();
          uint64_t v57 = v86;
          swift_bridgeObjectRetain();
          unint64_t v58 = v55;
          uint64_t v59 = v90;
          sub_1005BCFAC(v56, v88, v54, v58, v57);
          uint64_t v90 = v59;
          swift_bridgeObjectRelease();
          uint64_t v60 = v96;
          (*v94)((uint64_t)v10, v96, v13);
          REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v101 = (void *)sub_1003096D4(0, v101[2] + 1, 1, (unint64_t)v101);
          }
          unint64_t v62 = v101[2];
          unint64_t v61 = v101[3];
          uint64_t v63 = v62 + 1;
          if (v62 >= v61 >> 1)
          {
            uint64_t v91 = v62 + 1;
            BOOL v66 = (void *)sub_1003096D4(v61 > 1, v62 + 1, 1, (unint64_t)v101);
            uint64_t v63 = v91;
            uint64_t v101 = v66;
          }
          uint64_t v64 = v101;
          v101[2] = v63;
          (*(void (**)(unint64_t, char *, uint64_t))(v89 + 32))((unint64_t)v64+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(void *)(v89 + 72) * v62, v92, v87);
          swift_unknownObjectRelease();

          (*v98)(v60, v13);
          uint64_t v65 = (uint64_t)v103;
          sub_1000966BC((uint64_t)v103, (uint64_t *)&unk_100909A40);
          v104((char *)v65, v106, v13);
          v111((char *)v65, 0, 1, v13);
          uint64_t v91 = v53;
        }
      }
LABEL_7:
      if (v108 == ++v14)
      {
        swift_unknownObjectRelease();
        uint64_t v10 = v78;
        uint64_t v14 = v77;
        uint64_t v16 = v76;
        a3 = v93;
        int64_t v37 = v85;
        uint64_t v38 = v91;
        goto LABEL_29;
      }
    }
    v111(v31, 1, 1, v13);
LABEL_6:

    sub_1000966BC((uint64_t)v31, (uint64_t *)&unk_100909A40);
    goto LABEL_7;
  }
  uint64_t v101 = _swiftEmptyArrayStorage;
  uint64_t v38 = a3;
LABEL_29:
  uint64_t v67 = (uint64_t)v103;
  Swift::Int v31 = v84;
  if (v38 >= v37)
  {
    uint64_t v69 = (uint64_t)v103;
    goto LABEL_38;
  }
  uint64_t v68 = v38;
  sub_1000BF710((uint64_t)v103, (uint64_t)v84, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v31, 1, v13) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v31, v13);
    if (v68 < a3) {
      goto LABEL_48;
    }
    uint64_t v70 = v97;
    swift_unknownObjectRetain();
    uint64_t v71 = v86;
    swift_bridgeObjectRetain();
    sub_1005BCFAC(v70, v88, v68, v81, v71);
    swift_bridgeObjectRelease();
    Swift::Int v31 = v16;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v102, v16, v13);
    REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_35;
  }
  sub_1000966BC(v67, (uint64_t *)&unk_100909A40);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v95, v83);
  sub_1000966BC((uint64_t)v31, (uint64_t *)&unk_100909A40);
  return v101;
}

void sub_1005BDEA0(void *a1, void *a2)
{
  v435 = a2;
  id v426 = a1;
  uint64_t v395 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v370 = *(void (***)(char *, void, uint64_t))(v395 - 8);
  __chkstk_darwin(v395);
  v394 = (char *)&v359 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v393 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v369 = *(void *)(v393 - 8);
  __chkstk_darwin(v393);
  v392 = (char *)&v359 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v414 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v368 = *(void (***)(char *, void, uint64_t))(v414 - 8);
  __chkstk_darwin(v414);
  v391 = (char *)&v359 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v5 - 8);
  v398 = (char *)&v359 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100916990);
  __chkstk_darwin(v7 - 8);
  v397 = (char *)&v359 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v396 = type metadata accessor for DateComponents();
  uint64_t v367 = *(void *)(v396 - 8);
  __chkstk_darwin(v396);
  v374 = (char *)&v359 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v390 = (char *)&v359 - v11;
  uint64_t v380 = type metadata accessor for Calendar.Component();
  uint64_t v362 = *(void *)(v380 - 8);
  __chkstk_darwin(v380);
  v379 = (char *)&v359 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v13 - 8);
  v373 = (char *)&v359 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v389 = (char *)&v359 - v16;
  __chkstk_darwin(v17);
  uint64_t v366 = (char *)&v359 - v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (id *)((char *)&v359 - v20);
  uint64_t v431 = type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket();
  uint64_t v419 = *(void *)(v431 - 8);
  __chkstk_darwin(v431);
  uint64_t v381 = (char *)&v359 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v406 = (char *)&v359 - v24;
  __chkstk_darwin(v25);
  v361 = (char *)&v359 - v26;
  __chkstk_darwin(v27);
  v423 = (char *)&v359 - v28;
  __chkstk_darwin(v29);
  v382 = (id *)((char *)&v359 - v30);
  uint64_t v405 = type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsStyle();
  uint64_t v404 = *(void *)(v405 - 8);
  __chkstk_darwin(v405);
  v399 = (char *)&v359 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v445 = type metadata accessor for Date();
  v415 = *(void **)(v445 - 8);
  __chkstk_darwin(v445);
  uint64_t v384 = (char *)&v359 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v388 = (char *)&v359 - v34;
  __chkstk_darwin(v35);
  v413 = (char *)&v359 - v36;
  __chkstk_darwin(v37);
  v365 = (void (**)(char *, uint64_t))((char *)&v359 - v38);
  __chkstk_darwin(v39);
  v372 = (char *)&v359 - v40;
  __chkstk_darwin(v41);
  v411 = (char *)&v359 - v42;
  __chkstk_darwin(v43);
  v441 = (id *)((char *)&v359 - v44);
  __chkstk_darwin(v45);
  v444 = (char *)&v359 - v46;
  __chkstk_darwin(v47);
  uint64_t v425 = (uint64_t)&v359 - v48;
  uint64_t v402 = type metadata accessor for Calendar();
  uint64_t v378 = *(void *)(v402 - 8);
  __chkstk_darwin(v402);
  v424 = (char *)&v359 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v422 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v428 = *(void *)(v422 - 8);
  __chkstk_darwin(v422);
  v377 = (char *)&v359 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  unint64_t v386 = (char *)&v359 - v52;
  __chkstk_darwin(v53);
  v364 = (void (**)(char *, uint64_t))((char *)&v359 - v54);
  __chkstk_darwin(v55);
  v387 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v359 - v56);
  __chkstk_darwin(v57);
  v409 = (char *)&v359 - v58;
  __chkstk_darwin(v59);
  v418 = (char *)&v359 - v60;
  uint64_t v417 = _s10PredicatesOMa(0);
  __chkstk_darwin(v417);
  v416 = (char *)&v359 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = (char *)type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  v439 = (void *)*((void *)Subtasks - 1);
  __chkstk_darwin(Subtasks);
  unint64_t v410 = (unint64_t)&v359 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63);
  v421 = (char *)&v359 - v64;
  __chkstk_darwin(v65);
  v438 = (char *)&v359 - v66;
  __chkstk_darwin(v67);
  unint64_t v437 = (unint64_t)&v359 - v68;
  Swift::Int v440 = type metadata accessor for REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters();
  v447 = *(void (***)(void))(v440 - 8);
  __chkstk_darwin(v440);
  v443 = (char *)&v359 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v446 = (char **)type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v70 = (uint64_t)*(v446 - 1);
  __chkstk_darwin(v446);
  unint64_t v72 = (char *)&v359 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73);
  uint64_t v75 = (char *)&v359 - v74;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v77 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v376 = (char *)&v359 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79);
  v385 = (char *)&v359 - v80;
  __chkstk_darwin(v81);
  v363 = (void (**)(char *, uint64_t))((char *)&v359 - v82);
  __chkstk_darwin(v83);
  unint64_t v383 = (char *)&v359 - v84;
  __chkstk_darwin(v85);
  v408 = (char *)&v359 - v86;
  __chkstk_darwin(v87);
  v407 = (char *)&v359 - v88;
  __chkstk_darwin(v89);
  uint64_t v91 = (char *)&v359 - v90;
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v92 = *(void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v427 = Configuration;
  v429 = v92;
  uint64_t v430 = v77 + 8;
  v92(v91, Configuration);
  uint64_t v93 = v446;
  v432 = *(void **)(v70 + 104);
  ((void (*)(char *, void, char **))v432)(v72, enum case for REMRemindersListDataView.SortingStyle.default(_:), v446);
  char v94 = static REMRemindersListDataView.SortingStyle.== infix(_:_:)();
  uint64_t v95 = *(void (**)(char *, char **))(v70 + 8);
  uint64_t v433 = (uint64_t)v72;
  v95(v72, v93);
  unint64_t v434 = (unint64_t)v75;
  uint64_t v96 = v93;
  uint64_t v97 = (void (*)(uint64_t, char **))v95;
  v436 = (char *)(v70 + 8);
  v95(v75, v96);
  uint64_t v98 = v443;
  uint64_t v99 = v440;
  v447[2]();
  if (v94)
  {
    ((void (*)(char *, uint64_t))v447[1])(v98, v99);
    uint64_t v100 = v427;
  }
  else
  {
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
    unint64_t v101 = v434;
    REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
    v429(v91, v427);
    uint64_t v102 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    uint64_t v103 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    uint64_t v104 = v433;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 104))(v433, v102, v103);
    uint64_t v105 = v446;
    ((void (*)(uint64_t, void, char **))v432)(v104, enum case for REMRemindersListDataView.SortingStyle.displayDate(_:), v446);
    LOBYTE(v102) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)();
    v97(v104, v105);
    v97(v101, v105);
    ((void (*)(char *, uint64_t))v447[1])(v443, v99);
    uint64_t v100 = v427;
    if ((v102 & 1) == 0)
    {
LABEL_12:
      uint64_t v129 = self;
      NSString v130 = String._bridgeToObjectiveC()();
      [v129 internalErrorWithDebugDescription:v130];

      swift_willThrow();
      return;
    }
  }
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  unint64_t v106 = v437;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v429(v91, v100);
  unint64_t v108 = v438;
  uint64_t v107 = v439;
  int v109 = (void (*)(char *))v439[13];
  LODWORD(v446) = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  uint64_t v110 = (uint64_t)Subtasks;
  v109(v438);
  sub_1005C18BC(&qword_100911210, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks);
  char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v112 = (void (*)(char *, uint64_t))v107[1];
  v112(v108, v110);
  v447 = (void (**)(void))v112;
  v112((char *)v106, v110);
  if (v111) {
    goto LABEL_12;
  }
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  uint64_t v113 = (uint64_t)v416;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v429(v91, v100);
  swift_storeEnumTagMultiPayload();
  id v375 = (id)sub_10038F1F0();
  sub_1000C6DAC(v113);
  if (qword_100907790 == -1) {
    goto LABEL_6;
  }
  while (2)
  {
    swift_once();
LABEL_6:
    uint64_t v114 = (void *)qword_100942318;
    uint64_t v115 = v428;
    uint64_t v116 = v445;
    if (qword_100907798 != -1) {
      swift_once();
    }
    v403 = v91;
    v448 = v114;
    swift_bridgeObjectRetain();
    unint64_t v117 = swift_bridgeObjectRetain();
    sub_1002014E4(v117);
    int64_t v118 = (void *)sub_1003BC8C4((unint64_t)v448, 0, 0, (uint64_t)v375);
    swift_bridgeObjectRelease();
    if (qword_1009079D0 != -1) {
      swift_once();
    }
    uint64_t v119 = _s9UtilitiesO12SortingStyleOMa();
    uint64_t v120 = sub_10008E2DC(v119, (uint64_t)qword_10091E2C0);
    int64_t v121 = *(void (**)(char *, void, uint64_t))(v115 + 104);
    uint64_t v122 = (uint64_t)v418;
    uint64_t v123 = v422;
    v121(v418, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v422);
    sub_100527148(v120, v122, 0);
    uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v428 + 8);
    v428 += 8;
    v124(v122, v123);
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v118 setSortDescriptors:isa];

    uint64_t v126 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t v127 = (char *)v420;
    uint64_t v128 = NSManagedObjectContext.fetch<A>(_:)();
    v436 = v127;
    if (v127)
    {

      return;
    }
    unint64_t v437 = v128;
    uint64_t v400 = v126;
    v412 = (void (*)(char *, uint64_t))v124;
    id v359 = v118;
    unint64_t v131 = v407;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
    BOOL v132 = v131;
    uint64_t v133 = v427;
    uint64_t v134 = v429;
    v429(v132, v427);
    uint64_t v135 = v408;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
    uint64_t v91 = v409;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    v134(v135, v133);
    uint64_t v136 = v439;
    unint64_t v137 = v410;
    uint64_t v138 = (uint64_t)Subtasks;
    ((void (*)(unint64_t, char *, char *))v439[2])(v410, v421, Subtasks);
    int v139 = ((uint64_t (*)(unint64_t, uint64_t))v136[11])(v137, v138);
    if (v139 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v139 == v446)
    {
      unint64_t v410 = sub_1002EDB5C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v140 = v422;
      uint64_t v143 = v435;
    }
    else
    {
      uint64_t v140 = v422;
      if (v139 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:)) {
        goto LABEL_225;
      }
      uint64_t v141 = v436;
      sub_1005242F8(v437, v91, v426, 0);
      v436 = v141;
      uint64_t v143 = v435;
      if (v141)
      {

        v412(v91, v140);
        ((void (*)(char *, char *))v447)(v421, Subtasks);
        swift_bridgeObjectRelease();
        return;
      }
      unint64_t v410 = v142;
    }
    v412(v91, v140);
    ((void (*)(char *, char *))v447)(v421, Subtasks);
    static Calendar.current.getter();
    uint64_t v144 = v444;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.today.getter();
    Calendar.startOfDay(for:)();
    v438 = (char *)v415[1];
    v439 = v415 + 1;
    ((void (*)(char *, uint64_t))v438)(v144, v116);
    unint64_t v145 = v437;
    id v426 = (id)(v437 >> 62);
    v401 = v21;
    if (v437 >> 62)
    {
LABEL_209:
      swift_bridgeObjectRetain_n();
      uint64_t v357 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v433 = v357;
      if ((v357 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v358 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((v358 & 0x8000000000000000) == 0)
        {
          swift_bridgeObjectRetain();
          int64_t v258 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v258 < v433)
          {
            __break(1u);
LABEL_213:
            int64_t v258 = sub_100309708(0, *(void *)(v258 + 16) + 1, 1, v258);
LABEL_125:
            unint64_t v260 = *(void *)(v258 + 16);
            unint64_t v259 = *(void *)(v258 + 24);
            unint64_t v202 = v258;
            id v261 = v372;
            if (v260 >= v259 >> 1) {
              unint64_t v202 = sub_100309708(v259 > 1, v260 + 1, 1, v258);
            }
            *(void *)(v202 + 16) = v260 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v419 + 32))(v202+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v260, v91, v431);
            uint64_t v232 = (uint64_t)v143;
LABEL_129:
            uint64_t v203 = v232;
            v371(v232, v261, v116);
            goto LABEL_130;
          }
          goto LABEL_227;
        }
        goto LABEL_223;
      }
      goto LABEL_222;
    }
    uint64_t v433 = *(void *)((v437 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    int v146 = v436;
    while (1)
    {
      v407 = (char *)(v145 & 0xC000000000000001);
      if ((v145 & 0xC000000000000001) != 0 && v433)
      {
        Swift::Int v147 = 0;
        uint64_t v148 = v433;
        do
        {
          Swift::Int v149 = v147 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v147);
          Swift::Int v147 = v149;
        }
        while (v148 != v149);
      }
      if (v426)
      {
        swift_bridgeObjectRetain();
        uint64_t v151 = _CocoaArrayWrapper.subscript.getter();
        v447 = (void (**)(void))v153;
        uint64_t v150 = v154;
        unint64_t v152 = v155;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v150 = 0;
        uint64_t v151 = v145 & 0xFFFFFFFFFFFFFF8;
        v447 = (void (**)(void))((v145 & 0xFFFFFFFFFFFFFF8) + 32);
        unint64_t v152 = (2 * v433) | 1;
      }
      uint64_t v156 = v399;
      REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.style.getter();
      int v157 = (*(uint64_t (**)(char *, uint64_t))(v404 + 88))(v156, v405);
      LODWORD(v416) = enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.regular(_:);
      LODWORD(v417) = v157;
      if (v157 == enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.regular(_:)
        || v157 == enum case for REMRemindersListDataView.ScheduledByDateBucketsStyle.compact(_:))
      {
        break;
      }
LABEL_224:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_225:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_226:
      swift_release();
      __break(1u);
LABEL_227:
      int v146 = v436;
      unint64_t v145 = v437;
      uint64_t v21 = v401;
    }
    uint64_t v159 = swift_unknownObjectRetain();
    Swift::Int v440 = v150;
    unint64_t v434 = v152;
    sub_1005BCC70(v159, (uint64_t)v447, v150, v152, v425);
    uint64_t v161 = v160;
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    unint64_t v167 = v166;
    swift_unknownObjectRelease();
    v436 = v146;
    uint64_t Subtasks = (char *)v151;
    if (!v161) {
      goto LABEL_37;
    }
    v446 = (char **)(v167 >> 1);
    if (v165 == v167 >> 1)
    {
      swift_unknownObjectRelease();
LABEL_37:
      uint64_t v168 = _swiftEmptyArrayStorage;
      uint64_t v169 = v437;
      goto LABEL_38;
    }
    id v212 = v383;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
    uint64_t v213 = (uint64_t)v387;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    os_log_type_t v214 = v212;
    int v215 = (char *)v161;
    v429(v214, v427);
    uint64_t v216 = v436;
    uint64_t v217 = sub_1005BD2E8(v161, v163, v165, v167, v213, v410);
    if (v216)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();

      v412((char *)v213, v422);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v378 + 8))(v424, v402);
      ((void (*)(uint64_t, uint64_t))v438)(v425, v116);
      return;
    }
    os_log_t v234 = v217;
    v443 = v215;
    v412((char *)v213, v422);
    uint64_t v235 = v382;
    void *v382 = v234;
    (*(void (**)(void *, void, uint64_t))(v419 + 104))(v235, enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.pastDue(_:), v431);
    unint64_t v236 = sub_100309708(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v238 = *(void *)(v236 + 16);
    unint64_t v237 = *(void *)(v236 + 24);
    uint64_t v239 = v236;
    uint64_t v169 = v437;
    if (v238 >= v237 >> 1) {
      uint64_t v239 = sub_100309708(v237 > 1, v238 + 1, 1, v236);
    }
    *(void *)(v239 + 16) = v238 + 1;
    (*(void (**)(unint64_t, void *, uint64_t))(v419 + 32))(v239+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v238, v235, v431);
    uint64_t v240 = (uint64_t)v446;
    if (v433 < (uint64_t)v446)
    {
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
      goto LABEL_224;
    }
    if (v426)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v241 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v241 = *(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (v241 < v240) {
      goto LABEL_215;
    }
    if (!v407 || v240 == v433) {
      goto LABEL_108;
    }
    if (v240 >= v433) {
      goto LABEL_218;
    }
    Swift::Int v244 = v240;
    uint64_t v245 = v433;
    do
    {
      Swift::Int v246 = v244 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v244);
      Swift::Int v244 = v246;
    }
    while (v245 != v246);
LABEL_108:
    v436 = 0;
    if (v426)
    {
      swift_bridgeObjectRetain();
      uint64_t v247 = _CocoaArrayWrapper.subscript.getter();
      v447 = (void (**)(void))v248;
      Swift::Int v440 = v249;
      unint64_t v434 = v250;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t Subtasks = (char *)v247;
    }
    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t Subtasks = (char *)(v169 & 0xFFFFFFFFFFFFFF8);
      v447 = (void (**)(void))((v169 & 0xFFFFFFFFFFFFFF8) + 32);
      unint64_t v434 = (2 * v433) | 1;
      Swift::Int v440 = v240;
    }
    uint64_t v168 = (void *)v239;
LABEL_38:
    uint64_t v170 = 2;
    if (v417 == v416) {
      uint64_t v170 = 7;
    }
    v399 = (char *)v170;
    v446 = (char **)(v415 + 4);
    uint64_t v143 = v415 + 7;
    v443 = (char *)(v415 + 6);
    if (v169 < 0) {
      uint64_t v171 = v169;
    }
    else {
      uint64_t v171 = v169 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v404 = v171;
    uint64_t v405 = v169 & 0xFFFFFFFFFFFFFF8;
    unint64_t v383 = (char *)((v169 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v172 = 1;
    v382 = (void *)((2 * v433) | 1);
    v420 = (void (**)(char *, uint64_t, uint64_t))(v415 + 2);
    LODWORD(v387) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.day(_:);
    v409 = (char *)(v419 + 104);
    v408 = (char *)(v419 + 32);
    v415 += 5;
    uint64_t v91 = v411;
LABEL_46:
    v421 = (char *)v172;
    v432 = v168;
    Calendar.beginningOfNextDay(_:)();
    unint64_t v174 = v434;
    int64_t v175 = v434 >> 1;
    swift_unknownObjectRetain();
    uint64_t v176 = v440;
    if (v440 == v175)
    {
      uint64_t v176 = v174 >> 1;
      goto LABEL_60;
    }
    unint64_t v174 = v174 & 1 | (2 * v440);
    while (2)
    {
      if (v176 >= v175)
      {
        __break(1u);
LABEL_92:
        v231 = _swiftEmptyArrayStorage;
        uint64_t v232 = v425;
        unint64_t v202 = (unint64_t)v432;
        uint64_t v91 = v361;
        uint64_t v233 = (uint64_t)Subtasks;
LABEL_123:
        uint64_t v256 = v231[2];
        uint64_t Subtasks = (char *)v233;
        if (!v256)
        {
          swift_bridgeObjectRelease();
          id v261 = v372;
          goto LABEL_129;
        }
        uint64_t v257 = *(int *)(sub_100094134(&qword_10091E310) + 48);
        ((void (*)(char *, uint64_t, uint64_t))v444)(v91, v232, v116);
        *(void *)&v91[v257] = v231;
        (*(void (**)(char *, void, uint64_t))v409)(v91, enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.nextFiveDays(_:), v431);
        int64_t v258 = v202;
        uint64_t v143 = (void *)v232;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_213;
        }
        goto LABEL_125;
      }
      uint64_t v177 = v447[v176];
      id v178 = [v177 displayDateDate];
      if (!v178)
      {
        ((void (*)(void *, uint64_t, uint64_t, uint64_t))*v143)(v21, 1, 1, v116);
LABEL_50:
        sub_1000966BC((uint64_t)v21, (uint64_t *)&unk_100909A40);

        goto LABEL_51;
      }
      uint64_t v179 = v178;
      uint64_t v180 = v444;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v181 = (void (*)(char *, uint64_t, uint64_t))*v446;
      uint64_t v182 = v180;
      uint64_t v116 = v445;
      ((void (*)(void *, char *, uint64_t))*v446)(v21, v182, v445);
      ((void (*)(void *, void, uint64_t, uint64_t))*v143)(v21, 0, 1, v116);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))v443)(v21, 1, v116) == 1) {
        goto LABEL_50;
      }
      v181(v91, (uint64_t)v21, v116);
      sub_1005C18BC((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v183 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v438)(v91, v116);

      if (v183)
      {
LABEL_51:
        ++v176;
        v174 += 2;
        if (v175 == v176)
        {
          uint64_t v176 = v175;
          unint64_t v174 = v434;
          goto LABEL_60;
        }
        continue;
      }
      break;
    }
    if (v440 >= v176)
    {
      uint64_t v191 = (uint64_t)Subtasks;
      swift_unknownObjectRelease();
      uint64_t v21 = _swiftEmptyArrayStorage;
      goto LABEL_74;
    }
    if (v176 < 0) {
      goto LABEL_208;
    }
LABEL_60:
    uint64_t v184 = v403;
    REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
    uint64_t v91 = v418;
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
    v429(v184, v427);
    uint64_t v185 = v410;
    swift_bridgeObjectRetain();
    uint64_t v186 = v436;
    uint64_t v21 = sub_1005BCFAC((uint64_t)Subtasks, (uint64_t)v447, v440, v174, v185);
    v436 = v186;
    swift_bridgeObjectRelease();
    v412(v91, v422);
    if (v433 < v176)
    {
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
      continue;
    }
    break;
  }
  if (v426)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v187 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v187 = *(void *)(v405 + 16);
    swift_bridgeObjectRetain();
  }
  if (v187 < v176) {
    goto LABEL_201;
  }
  if (!v407 || v176 == v433) {
    goto LABEL_70;
  }
  if (v176 >= v433) {
    goto LABEL_202;
  }
  Swift::Int v188 = v176;
  uint64_t v189 = v433;
  do
  {
    Swift::Int v190 = v188 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v188);
    Swift::Int v188 = v190;
  }
  while (v189 != v190);
LABEL_70:
  if (v426)
  {
    swift_bridgeObjectRetain();
    uint64_t v191 = _CocoaArrayWrapper.subscript.getter();
    v447 = (void (**)(void))v192;
    Swift::Int v440 = v193;
    unint64_t v434 = v194;
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_unknownObjectRelease_n();
    uint64_t v191 = v405;
    v447 = (void (**)(void))v383;
    Swift::Int v440 = v176;
    unint64_t v434 = (unint64_t)v382;
  }
  uint64_t v91 = v411;
LABEL_74:
  uint64_t Subtasks = (char *)v191;
  uint64_t v195 = v425;
  uint64_t v168 = v432;
  unint64_t v196 = v441;
  if (v417 == v416 || v21[2])
  {
    uint64_t v197 = v425;
    (*v420)(v444, v425, v116);
    uint64_t v198 = v423;
    REMRemindersListDataView.ScheduledDateBucketsModel.Day.init(date:reminders:)();
    (*(void (**)(char *, void, uint64_t))v409)(v198, v387, v431);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v168 = (void *)sub_100309708(0, v168[2] + 1, 1, (unint64_t)v168);
    }
    uint64_t v21 = v401;
    unint64_t v200 = v168[2];
    unint64_t v199 = v168[3];
    uint64_t v201 = (uint64_t)v168;
    uint64_t v116 = v445;
    if (v200 >= v199 >> 1) {
      uint64_t v201 = sub_100309708(v199 > 1, v200 + 1, 1, (unint64_t)v168);
    }
    *(void *)(v201 + 16) = v200 + 1;
    uint64_t v168 = (void *)v201;
    (*(void (**)(unint64_t, char *, uint64_t))(v419 + 32))(v201+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v200, v423, v431);
    uint64_t v195 = v197;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = v401;
  }
  uint64_t v173 = (void (*)(uint64_t, char *, uint64_t))*v415;
  ((void (*)(uint64_t, void *, uint64_t))*v415)(v195, v196, v116);
  uint64_t v172 = (uint64_t)(v421 + 1);
  if (v421 != v399) {
    goto LABEL_46;
  }
  id v371 = v173;
  unint64_t v202 = (unint64_t)v168;
  uint64_t v203 = v195;
  if (v417 == v416)
  {
LABEL_130:
    int v262 = v370;
    uint64_t v263 = v369;
    id v264 = (void (**)(void, void, void))v368;
    uint64_t v265 = v367;
    id v266 = v436;
    v421 = *(char **)(v378 + 56);
    v423 = (char *)(v378 + 56);
    LODWORD(v372) = enum case for Calendar.MatchingPolicy.nextTime(_:);
    uint64_t v370 = v368 + 13;
    LODWORD(v369) = enum case for Calendar.RepeatedTimePolicy.first(_:);
    uint64_t v368 = (void (**)(char *, void, uint64_t))(v263 + 104);
    LODWORD(v367) = enum case for Calendar.SearchDirection.forward(_:);
    uint64_t v366 = (char *)(v262 + 13);
    v365 = (void (**)(char *, uint64_t))(v262 + 1);
    v364 = (void (**)(char *, uint64_t))(v263 + 8);
    v363 = (void (**)(char *, uint64_t))(v264 + 1);
    v418 = (char *)(v265 + 8);
    unsigned int v360 = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.month(_:);
    uint64_t v267 = 1;
    unint64_t v268 = v434;
    do
    {
      v441 = (void *)v267;
      unint64_t v434 = v268;
      v432 = (void *)v202;
      v436 = v266;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v421)(v397, 1, 1, v402);
      uint64_t v269 = type metadata accessor for TimeZone();
      uint64_t v270 = *(void *)(v269 - 8);
      unint64_t v271 = *(char **)(v270 + 56);
      uint64_t v272 = v203;
      v411 = (char *)v269;
      v403 = v271;
      v401 = (void *)(v270 + 56);
      ((void (*)(char *, uint64_t, uint64_t))v271)(v398, 1, 1);
      uint64_t v273 = v390;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
      unint64_t v274 = v391;
      (*v370)(v391, v372, v414);
      v275 = v392;
      uint64_t v276 = v393;
      (*v368)(v392, v369, v393);
      id v277 = v394;
      uint64_t v278 = v395;
      (*(void (**)(char *, void, uint64_t))v366)(v394, v367, v395);
      uint64_t v279 = (uint64_t)v389;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      (*v365)(v277, v278);
      (*v364)(v275, v276);
      uint64_t v280 = v445;
      (*v363)(v274, v414);
      v399 = *(char **)v418;
      ((void (*)(char *, uint64_t))v399)(v273, v396);
      v281 = v388;
      uint64_t v282 = v272;
      uint64_t v116 = v280;
      v444 = (char *)*v420;
      ((void (*)(char *, uint64_t, uint64_t))v444)(v388, v282, v280);
      v387 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v443;
      if (v387(v279, 1, v280) == 1)
      {
        uint64_t v283 = (uint64_t)v413;
        v361 = *v446;
        ((void (*)(char *, char *, uint64_t))v361)(v413, v281, v116);
        sub_1000966BC(v279, (uint64_t *)&unk_100909A40);
      }
      else
      {
        ((void (*)(char *, uint64_t))v438)(v281, v280);
        uint64_t v283 = (uint64_t)v413;
        v361 = *v446;
        ((void (*)(char *, uint64_t, uint64_t))v361)(v413, v279, v116);
      }
      id v266 = v436;
      uint64_t v284 = (uint64_t)Subtasks;
      uint64_t v285 = v440;
      unint64_t v286 = v434;
      uint64_t v287 = swift_unknownObjectRetain();
      sub_1005BCC70(v287, (uint64_t)v447, v285, v286, v283);
      uint64_t v289 = v288;
      uint64_t v291 = v290;
      unint64_t v292 = v286;
      uint64_t v294 = v293;
      unint64_t v296 = v295;
      swift_unknownObjectRelease();
      if (v289)
      {
        uint64_t v297 = v266;
        uint64_t v298 = v385;
        REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
        uint64_t v299 = (uint64_t)v386;
        REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
        v429(v298, v427);
        uint64_t v300 = sub_1005BD2E8(v289, v291, v294, v296, v299, v410);
        if (v297)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          v412((char *)v299, v422);
          char v230 = &v445;
          goto LABEL_164;
        }
        uint64_t v301 = v300;
        uint64_t v143 = 0;
        v412((char *)v299, v422);
        uint64_t v302 = v296 >> 1;
        uint64_t v21 = (void *)v433;
        Swift::Int v440 = v302;
        uint64_t v91 = Subtasks;
        if (v433 < v302) {
          goto LABEL_203;
        }
        if (v426)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v303 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v303 = *(void *)(v405 + 16);
          swift_bridgeObjectRetain();
        }
        if (v303 < v440) {
          goto LABEL_204;
        }
        if (v407 && (void *)v440 != v21)
        {
          if (v440 >= (uint64_t)v21)
          {
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
            goto LABEL_209;
          }
          Swift::Int v305 = v440;
          do
          {
            v306 = (void *)(v305 + 1);
            _ArrayBuffer._typeCheckSlowPath(_:)(v305);
            Swift::Int v305 = (Swift::Int)v306;
          }
          while (v21 != v306);
        }
        if (v426)
        {
          swift_bridgeObjectRetain();
          uint64_t v307 = _CocoaArrayWrapper.subscript.getter();
          v447 = (void (**)(void))v308;
          Swift::Int v440 = v309;
          unint64_t v268 = v310;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t Subtasks = (char *)v307;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t Subtasks = (char *)v405;
          v447 = (void (**)(void))v383;
          unint64_t v268 = (unint64_t)v382;
        }
        uint64_t v304 = v425;
        id v266 = 0;
      }
      else
      {
        uint64_t Subtasks = (char *)v284;
        uint64_t v301 = _swiftEmptyArrayStorage;
        uint64_t v304 = v425;
        unint64_t v268 = v292;
      }
      unint64_t v202 = (unint64_t)v432;
      if (v417 == v416 || v301[2])
      {
        uint64_t v311 = *(int *)(sub_100094134(&qword_10091E310) + 48);
        uint64_t v312 = v406;
        ((void (*)(char *, uint64_t, uint64_t))v444)(v406, v304, v116);
        *(void *)&v312[v311] = v301;
        (*(void (**)(char *, void, uint64_t))v409)(v312, v360, v431);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v202 = sub_100309708(0, *(void *)(v202 + 16) + 1, 1, v202);
        }
        unint64_t v314 = *(void *)(v202 + 16);
        unint64_t v313 = *(void *)(v202 + 24);
        uint64_t v315 = v202;
        if (v314 >= v313 >> 1) {
          uint64_t v315 = sub_100309708(v313 > 1, v314 + 1, 1, v202);
        }
        unint64_t v202 = v315;
        *(void *)(v315 + 16) = v314 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v419 + 32))(v315+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v314, v406, v431);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v203 = v304;
      v371(v304, v413, v116);
      uint64_t v267 = (uint64_t)v441 + 1;
    }
    while (v441 != (void *)12);
    uint64_t v316 = swift_bridgeObjectRelease();
    uint64_t v317 = v440;
    if (v440 == v268 >> 1)
    {
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      unint64_t v318 = v424;
      goto LABEL_198;
    }
    __chkstk_darwin(v316);
    unint64_t v318 = v424;
    uint64_t v321 = swift_unknownObjectRetain();
    sub_1005B9B7C(v321, (uint64_t)v447, v317, v268, (void (*)(uint64_t *__return_ptr, id *))sub_1005C18A0);
    uint64_t v322 = swift_bridgeObjectRetain();
    uint64_t v323 = sub_10020A278(v322);
    swift_bridgeObjectRelease();
    v448 = v323;
    sub_1005B9DB4(&v448);
    id v324 = v359;
    if (!v266)
    {
      uint64_t v91 = 0;
      swift_bridgeObjectRelease();
      uint64_t v143 = v448;
      v447 = (void (**)(void))v448[2];
      if (!v447)
      {
LABEL_197:

        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_198:
        (*(void (**)(char *, uint64_t))(v378 + 8))(v318, v402);
        ((void (*)(uint64_t, uint64_t))v438)(v304, v116);
        return;
      }
      unint64_t v325 = 0;
      v441 = v448 + 4;
      LODWORD(v440) = enum case for Calendar.Component.year(_:);
      unint64_t v437 = v362 + 104;
      unint64_t v434 = v362 + 8;
      LODWORD(v426) = enum case for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket.year(_:);
      uint64_t v433 = (uint64_t)v448;
      while (2)
      {
        v432 = (void *)v202;
        v436 = v91;
        if (v325 >= v143[2]) {
          goto LABEL_206;
        }
        v326 = &v441[2 * v325];
        uint64_t v327 = *v326;
        unint64_t v328 = v326[1];
        v329 = v379;
        uint64_t v330 = v380;
        (*(void (**)(char *, void, uint64_t))v437)(v379, v440, v380);
        swift_bridgeObjectRetain();
        uint64_t v331 = v425;
        uint64_t v332 = Calendar.component(_:from:)();
        (*(void (**)(char *, uint64_t))v434)(v329, v330);
        if (v327 == v332)
        {
          ((void (*)(char *, uint64_t, uint64_t))v444)(v384, v331, v116);
          goto LABEL_176;
        }
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v421)(v397, 1, 1, v402);
        ((void (*)(char *, uint64_t, uint64_t, char *))v403)(v398, 1, 1, v411);
        uint64_t v333 = v374;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
        uint64_t v334 = (uint64_t)v373;
        Calendar.date(from:)();
        ((void (*)(char *, uint64_t))v399)(v333, v396);
        if (v387(v334, 1, v116) == 1)
        {
          swift_bridgeObjectRelease();
          sub_1000966BC(v334, (uint64_t *)&unk_100909A40);
          uint64_t v304 = v425;
          uint64_t v91 = v436;
          id v324 = v359;
          unint64_t v202 = (unint64_t)v432;
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t))v361)(v384, v334, v116);
LABEL_176:
          uint64_t v143 = (void *)(v328 >> 62);
          uint64_t v335 = (uint64_t)v377;
          if (v328 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v336 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v336 < 0) {
              goto LABEL_220;
            }
            swift_bridgeObjectRetain();
            uint64_t v356 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v356 < 0) {
              goto LABEL_221;
            }
            swift_bridgeObjectRetain();
            uint64_t v91 = (char *)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if ((uint64_t)v91 < v336) {
              goto LABEL_207;
            }
            uint64_t v335 = (uint64_t)v377;
            uint64_t v116 = v445;
          }
          else
          {
            uint64_t v336 = *(void *)((v328 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if ((v328 & 0xC000000000000001) != 0 && v336 != 0)
          {
            Swift::Int v338 = 0;
            do
            {
              Swift::Int v339 = v338 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v338);
              Swift::Int v338 = v339;
            }
            while (v336 != v339);
          }
          if (v143)
          {
            swift_bridgeObjectRetain();
            uint64_t v340 = _CocoaArrayWrapper.subscript.getter();
            uint64_t v341 = v343;
            uint64_t v143 = v344;
            unint64_t v342 = v345;
            swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v340 = v328 & 0xFFFFFFFFFFFFFF8;
            uint64_t v341 = (v328 & 0xFFFFFFFFFFFFFF8) + 32;
            unint64_t v342 = (2 * v336) | 1;
          }
          v346 = v376;
          REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
          REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
          v429(v346, v427);
          v347 = v436;
          v348 = sub_1005BD2E8(v340, v341, (uint64_t)v143, v342, v335, v410);
          uint64_t v349 = v335;
          uint64_t v304 = v425;
          if (v347)
          {
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            v412((char *)v349, v422);
            uint64_t v319 = (void (*)(uint64_t, uint64_t))v438;
            ((void (*)(char *, uint64_t))v438)(v384, v116);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
            (*(void (**)(char *, uint64_t))(v378 + 8))(v424, v402);
            uint64_t v320 = v304;
            goto LABEL_165;
          }
          v350 = v348;
          v412((char *)v349, v422);
          swift_unknownObjectRelease();
          uint64_t v351 = *(int *)(sub_100094134(&qword_10091E310) + 48);
          v352 = v381;
          ((void (*)(char *, char *, uint64_t))v444)(v381, v384, v116);
          *(void *)&v352[v351] = v350;
          (*(void (**)(char *, void, uint64_t))v409)(v352, v426, v431);
          unint64_t v202 = (unint64_t)v432;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v318 = v424;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v202 = sub_100309708(0, *(void *)(v202 + 16) + 1, 1, v202);
          }
          unint64_t v355 = *(void *)(v202 + 16);
          unint64_t v354 = *(void *)(v202 + 24);
          if (v355 >= v354 >> 1) {
            unint64_t v202 = sub_100309708(v354 > 1, v355 + 1, 1, v202);
          }
          *(void *)(v202 + 16) = v355 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v419 + 32))(v202+ ((*(unsigned __int8 *)(v419 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v419 + 80))+ *(void *)(v419 + 72) * v355, v381, v431);
          ((void (*)(char *, uint64_t))v438)(v384, v116);
          uint64_t v91 = 0;
          id v324 = v359;
        }
        uint64_t v143 = (void *)v433;
        if ((void (**)(void))++v325 == v447) {
          goto LABEL_197;
        }
        continue;
      }
    }
    goto LABEL_226;
  }
  uint64_t v204 = v362;
  v205 = v379;
  uint64_t v206 = v380;
  (*(void (**)(char *, void, uint64_t))(v362 + 104))(v379, enum case for Calendar.Component.day(_:), v380);
  uint64_t v207 = (uint64_t)v366;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v204 + 8))(v205, v206);
  uint64_t v208 = (char *)v365;
  v444 = (char *)*v420;
  ((void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v444)(v365, v203, v116);
  int v209 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v443)(v207, 1, v116);
  os_log_t v210 = v436;
  v432 = (void *)v202;
  if (v209 == 1)
  {
    uint64_t v211 = (uint64_t)v372;
    ((void (*)(char *, char *, uint64_t))*v446)(v372, v208, v116);
    sub_1000966BC(v207, (uint64_t *)&unk_100909A40);
  }
  else
  {
    ((void (*)(char *, uint64_t))v438)(v208, v116);
    uint64_t v211 = (uint64_t)v372;
    ((void (*)(char *, uint64_t, uint64_t))*v446)(v372, v207, v116);
  }
  uint64_t v218 = swift_unknownObjectRetain();
  sub_1005BCC70(v218, (uint64_t)v447, v440, v434, v211);
  uint64_t v220 = v219;
  uint64_t v222 = v221;
  uint64_t v224 = v223;
  unint64_t v226 = v225;
  swift_unknownObjectRelease();
  if (!v220) {
    goto LABEL_92;
  }
  uint64_t v227 = v363;
  REMRemindersListDataView.ScheduledByDateBucketsInvocation.Parameters.configuration.getter();
  uint64_t v228 = (uint64_t)v364;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v429((char *)v227, v427);
  uint64_t v229 = sub_1005BD2E8(v220, v222, v224, v226, v228, v410);
  if (!v210)
  {
    v231 = v229;
    v412((char *)v228, v422);
    unint64_t v202 = (unint64_t)v432;
    uint64_t v242 = v433;
    Swift::Int v440 = v226 >> 1;
    if (v433 < (uint64_t)(v226 >> 1)) {
      goto LABEL_216;
    }
    v436 = 0;
    if (v426)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v243 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v243 = *(void *)(v405 + 16);
      swift_bridgeObjectRetain();
    }
    if (v243 < v440) {
      goto LABEL_217;
    }
    if (v407 && v440 != v242)
    {
      if (v440 >= v242) {
        goto LABEL_219;
      }
      Swift::Int v251 = v440;
      do
      {
        Swift::Int v252 = v251 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v251);
        Swift::Int v251 = v252;
      }
      while (v242 != v252);
    }
    if (v426)
    {
      swift_bridgeObjectRetain();
      uint64_t v233 = _CocoaArrayWrapper.subscript.getter();
      v447 = (void (**)(void))v253;
      Swift::Int v440 = v254;
      unint64_t v434 = v255;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v233 = v405;
      v447 = (void (**)(void))v383;
      unint64_t v434 = (unint64_t)v382;
    }
    uint64_t v91 = v361;
    uint64_t v232 = v425;
    goto LABEL_123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v412((char *)v228, v422);
  char v230 = &v404;
LABEL_164:
  uint64_t v319 = (void (*)(uint64_t, uint64_t))v438;
  ((void (*)(void, uint64_t))v438)(*(v230 - 32), v116);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v378 + 8))(v424, v402);
  uint64_t v320 = v425;
LABEL_165:
  v319(v320, v116);
}

uint64_t sub_1005C18A0@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005BBF80(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1005C18BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005C1904(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  v2[33] = *v1;
  uint64_t v3 = type metadata accessor for Locale();
  v2[34] = v3;
  v2[35] = *(void *)(v3 - 8);
  v2[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[37] = v4;
  v2[38] = *(void *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[42] = v5;
  v2[43] = *(void *)(v5 - 8);
  v2[44] = swift_task_alloc();
  return _swift_task_switch(sub_1005C1AC0, 0, 0);
}

uint64_t sub_1005C1AC0()
{
  uint64_t v25 = v0;
  if (qword_1009079D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = sub_10008E2DC(v1, (uint64_t)qword_10091E318);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446466;
    *(void *)(v0 + 152) = v5;
    swift_getMetatypeMetadata();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 232) = sub_1000C51B8(v7, v8, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2114;
    uint64_t v9 = *(void **)(v4 + 24);
    *(void *)(v0 + 240) = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v9;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s: Start execution {listObjectID: %{public}@}", (uint8_t *)v6, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v14 = *(void **)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 256);
  Date.init()();
  uint64_t v15 = *(void **)(v13 + 24);
  *(void *)(v0 + 368) = v15;
  uint64_t v16 = swift_allocObject();
  *(void *)(v0 + 376) = v16;
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v14;
  *(_DWORD *)(v0 + 520) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v17 = *(void (**)(uint64_t))(v12 + 104);
  *(void *)(v0 + 384) = v17;
  *(void *)(v0 + 392) = (v12 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v17(v11);
  id v18 = v15;
  id v19 = v14;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1005C1E24;
  uint64_t v21 = *(void *)(v0 + 328);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, v21, sub_1005C4804, v16, &_s31ThreadSafePartialRepresentationVN_1);
}

uint64_t sub_1005C1E24()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 328);
  uint64_t v4 = *(void *)(*(void *)v1 + 304);
  uint64_t v5 = *(void *)(*(void *)v1 + 296);
  v2[51] = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[52] = v6;
  v2[53] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v7 = sub_1005C23A8;
  }
  else {
    uint64_t v7 = sub_1005C1FC4;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1005C1FC4()
{
  uint64_t v29 = v0;
  long long v1 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v1;
  *(void *)(v0 + 120) = *(void *)(v0 + 64);
  if (*(unsigned char *)(v0 + 104) & 1) != 0 || (*(unsigned char *)(v0 + 105))
  {
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void **)(v0 + 368);
      uint64_t v17 = *(void *)(v0 + 264);
      uint64_t v18 = swift_slowAlloc();
      id v19 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      *(void *)(v0 + 200) = v17;
      swift_getMetatypeMetadata();
      uint64_t v20 = String.init<A>(describing:)();
      *(void *)(v0 + 216) = sub_1000C51B8(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2114;
      *(void *)(v0 + 224) = v16;
      id v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v19 = v16;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Skipped suggesting conversion to grocery list because we already determined that we should suggest the conversion or it is already a grocery list {listObjectID: %{public}@}", (uint8_t *)v18, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1005C483C(v0 + 72);
    }
    else
    {
      sub_1005C483C(v0 + 72);
      swift_release_n();
    }
    uint64_t v24 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v25 = *(void *)(v0 + 336);
    sub_1005C32D0(*(void *)(v0 + 256), v23, *(void *)(v0 + 264));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26(0);
  }
  else
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
    uint64_t v3 = *(unsigned int *)(v0 + 520);
    uint64_t v4 = *(void **)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 320);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v7 = *(void **)(v0 + 248);
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 432) = v8;
    *(void *)(v8 + 16) = v4;
    *(void *)(v8 + 24) = v7;
    v2(v5, v3, v6);
    id v9 = v4;
    id v10 = v7;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v11;
    uint64_t v12 = sub_100094134((uint64_t *)&unk_10090AFB0);
    *uint64_t v11 = v0;
    v11[1] = sub_1005C247C;
    uint64_t v13 = *(void *)(v0 + 320);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 160, v13, sub_1005C4820, v8, v12);
  }
}

uint64_t sub_1005C23A8()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  sub_1005C32D0(v0[32], v1, v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1005C247C()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 416);
  uint64_t v3 = *(void *)(*(void *)v1 + 320);
  uint64_t v4 = *(void *)(*(void *)v1 + 296);
  *(void *)(*(void *)v1 + 448) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1005C27D8;
  }
  else {
    uint64_t v5 = sub_1005C2618;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005C2618()
{
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[20];
  v0[57] = v4;
  static Locale.current.getter();
  uint64_t v5 = Locale.identifier.getter();
  uint64_t v7 = v6;
  v0[58] = v5;
  v0[59] = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[60] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1005C28B4;
    return sub_1005C360C(v4, (uint64_t)(v0 + 9), v5, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1005C483C((uint64_t)(v0 + 9));
    uint64_t v11 = v0[43];
    uint64_t v10 = v0[44];
    uint64_t v12 = v0[42];
    sub_1005C32D0(v0[32], v10, v0[33]);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13(0);
  }
}

uint64_t sub_1005C27D8()
{
  sub_1005C483C((uint64_t)(v0 + 9));
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  sub_1005C32D0(v0[32], v1, v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1005C28B4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 488) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = sub_1005C2EAC;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 524) = a1 & 1;
    uint64_t v5 = sub_1005C29FC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005C29FC()
{
  char v1 = *(unsigned char *)(v0 + 524);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  uint64_t v3 = *(unsigned int *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void **)(v0 + 248);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 496) = v7;
  *(void *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v0 + 104);
  *(void *)(v7 + 72) = *(void *)(v0 + 120);
  *(unsigned char *)(v7 + 80) = v1;
  v2(v4, v3, v5);
  id v8 = v6;
  sub_1005C4DF0(v0 + 72);
  id v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v9;
  *id v9 = v0;
  v9[1] = sub_1005C2B54;
  uint64_t v10 = *(void *)(v0 + 312);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v10, sub_1005C4DCC, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1005C2B54()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 416);
  uint64_t v3 = *(void *)(*(void *)v1 + 312);
  uint64_t v4 = *(void *)(*(void *)v1 + 296);
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1005C2DD0;
  }
  else {
    uint64_t v5 = sub_1005C2CF0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005C2CF0()
{
  sub_1005C483C(v0 + 72);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 524);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 336);
  sub_1005C32D0(*(void *)(v0 + 256), v2, *(void *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v1);
}

uint64_t sub_1005C2DD0()
{
  sub_1005C483C((uint64_t)(v0 + 9));
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = v0[42];
  sub_1005C32D0(v0[32], v1, v0[33]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t sub_1005C2EAC()
{
  uint64_t v16 = v0;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = *(void *)(v0 + 472);
    uint64_t v4 = *(void **)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446978;
    v15[1] = v5;
    swift_getMetatypeMetadata();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 168) = sub_1000C51B8(v7, v8, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2114;
    *(void *)(v0 + 176) = v4;
    id v9 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v4;
    swift_release_n();
    *(_WORD *)(v6 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 184) = sub_1000C51B8(v14, v3, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 32) = 2082;
    swift_getErrorValue();
    uint64_t v10 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 208) = sub_1000C51B8(v10, v11, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s: Failed to predict whether to suggest conversion to grocery list {listObjectID: %{public}@, groceryLocaleID: %{public}s, error: %{public}s}", (uint8_t *)v6, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  *(unsigned char *)(v0 + 524) = 0;
  return _swift_task_switch(sub_1005C29FC, 0, 0);
}

uint64_t sub_1005C3208()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E318);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E318);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1005C32D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009079D8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091E318);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_retain_n();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    unint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v13 = 136446722;
    os_log_t v22 = v11;
    uint64_t v25 = a3;
    swift_getMetatypeMetadata();
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v25 = sub_1000C51B8(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2114;
    uint64_t v16 = *(void **)(a1 + 24);
    uint64_t v25 = (uint64_t)v16;
    id v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_release_n();
    *(_WORD *)(v13 + 22) = 2048;
    Date.rem_elapsedInMilliseconds.getter();
    uint64_t v25 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    os_log_t v19 = v22;
    _os_log_impl((void *)&_mh_execute_header, v22, v12, "%{public}s: Finished execution {listObjectID: %{public}@, elapsedSeconds: %f ms}", (uint8_t *)v13, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1005C360C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  sub_100094134(&qword_100909BE0);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1005C36A8, 0, 0);
}

uint64_t sub_1005C36A8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  static TaskPriority.high.getter();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 0, 1, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = v2;
  *(void *)(v8 + 40) = v4;
  *(void *)(v8 + 48) = v3;
  *(void *)(v8 + 56) = v6;
  long long v9 = *(_OWORD *)v5;
  long long v10 = *(_OWORD *)(v5 + 16);
  long long v11 = *(_OWORD *)(v5 + 32);
  *(void *)(v8 + 112) = *(void *)(v5 + 48);
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
  *(_OWORD *)(v8 + 64) = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1005C4DF0(v5);
  uint64_t v12 = sub_1002BBF24(v1, (uint64_t)&unk_10091E408, v8);
  v0[8] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[9] = v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_10090ABB0);
  void *v13 = v0;
  v13[1] = sub_1005C3858;
  return Task.value.getter(v0 + 11, v12, &type metadata for Bool, v14, &protocol self-conformance witness table for Error);
}

uint64_t sub_1005C3858()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1005C39F4;
  }
  else {
    uint64_t v2 = sub_1005C3988;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005C3988()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 88);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1005C39F4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

void sub_1005C3A5C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = _s10PredicatesOMa_1();
  __chkstk_darwin(v5);
  uint64_t v7 = (unint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10077A530;
  *(void *)(v8 + 32) = a1;
  unint64_t v25 = v8;
  specialized Array._endMutation()();
  *uint64_t v7 = v25;
  swift_storeEnumTagMultiPayload();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077DE90;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = swift_getKeyPath();
  unint64_t v25 = inited;
  specialized Array._endMutation()();
  unint64_t v10 = v25;
  id v11 = a1;
  uint64_t v12 = (void *)sub_100535B3C();
  uint64_t v13 = (void *)sub_1003BD0F4(v10, 0, 0, (uint64_t)v12);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v13 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    sub_1003DC140((uint64_t)v7, (uint64_t (*)(void))_s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v22 = a2;
  unint64_t v25 = v15;
  sub_100094134(&qword_100910160);
  sub_1000ED03C();
  unint64_t v16 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1003DC140((uint64_t)v7, (uint64_t (*)(void))_s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v11];
    swift_willThrow();
    return;
  }
  if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v17 = v22;
    goto LABEL_10;
  }
  uint64_t v17 = v22;
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v16 + 32);
LABEL_10:
    swift_bridgeObjectRelease();
    sub_1005C4F98(v18, (uint64_t)v23);
    long long v19 = v23[1];
    *(_OWORD *)uint64_t v17 = v23[0];
    *(_OWORD *)(v17 + 16) = v19;
    *(_OWORD *)(v17 + 32) = v23[2];
    *(void *)(v17 + 48) = v24;
    return;
  }
  __break(1u);
}

void sub_1005C3E14(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = _s10PredicatesOMa(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = a1;
  v7[8] = 1;
  swift_storeEnumTagMultiPayload();
  id v8 = a1;
  long long v9 = (void *)sub_10038F1F0();
  sub_1003DC140((uint64_t)v7, _s10PredicatesOMa);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];
  [v10 setResultType:2];

  [v10 setReturnsDistinctResults:0];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100776E80;
  *(void *)(v12 + 32) = 0x696669746E656469;
  *(void *)(v12 + 40) = 0xEA00000000007265;
  *(void *)(v12 + 88) = &type metadata for String;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = 0x656C746974;
  *(void *)(v12 + 72) = 0xE500000000000000;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    return;
  }
  unint64_t v15 = v14;
  v27[1] = 0;
  id v28 = v10;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v29 = a2;
    if (v16) {
      goto LABEL_5;
    }
LABEL_26:
    id v18 = _swiftEmptyArrayStorage;
LABEL_27:

    swift_bridgeObjectRelease_n();
    *uint64_t v29 = v18;
    return;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v29 = a2;
  if (!v16) {
    goto LABEL_26;
  }
LABEL_5:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    id v18 = _swiftEmptyArrayStorage;
    uint64_t v35 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v20 = *(id *)(v15 + 8 * v17 + 32);
      }
      uint64_t v21 = v20;
      *(void *)&v30[0] = 0x656C746974;
      *((void *)&v30[0] + 1) = 0xE500000000000000;
      id v22 = [v20 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v22)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v30, 0, sizeof(v30));
      }
      sub_100096408((uint64_t)v30, (uint64_t)v31, &qword_100908190);
      if (v32)
      {
        if (swift_dynamicCast()) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_1000F5B8C((uint64_t)v31);
      }
      uint64_t v33 = 0;
      uint64_t v34 = 0;
LABEL_20:

      uint64_t v23 = v34;
      if (v34)
      {
        uint64_t v24 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v18 = sub_100308F88(0, v18[2] + 1, 1, v18);
        }
        unint64_t v26 = v18[2];
        unint64_t v25 = v18[3];
        if (v26 >= v25 >> 1) {
          id v18 = sub_100308F88((void *)(v25 > 1), v26 + 1, 1, v18);
        }
        long long v18[2] = v26 + 1;
        long long v19 = &v18[2 * v26];
        v19[4] = v24;
        v19[5] = v23;
      }
      if (v16 == ++v17) {
        goto LABEL_27;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1005C4294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  _OWORD v8[5] = a6;
  _OWORD v8[2] = a1;
  v8[3] = a4;
  return _swift_task_switch(sub_1005C42BC, 0, 0);
}

uint64_t sub_1005C42BC()
{
  v0[8] = (*(uint64_t (**)(void, void))(v0[3] + 40))(v0[4], v0[5]);
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = sub_1005C43C8;
  uint64_t v5 = v0[6];
  return REMGroceryClassifier.shouldSuggestConvertToGrocery(titles:listName:)(v5, v2, v3);
}

uint64_t sub_1005C43C8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1005C4564;
  }
  else
  {
    *(unsigned char *)(v4 + 88) = a1 & 1;
    uint64_t v5 = sub_1005C44F4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005C44F4()
{
  char v1 = *(unsigned char *)(v0 + 88);
  uint64_t v2 = *(unsigned char **)(v0 + 16);

  *uint64_t v2 = v1;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1005C4564()
{
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1005C45C8(void *a1, uint64_t *a2, char a3)
{
  uint64_t v4 = *a2;
  id v11 = 0;
  id v5 = [a1 existingObjectWithID:v4 error:&v11];
  id v6 = v11;
  if (v5)
  {
    uint64_t v7 = v5;
    self;
    id v8 = (void *)swift_dynamicCastObjCClass();
    id v9 = v6;
    if (v8) {
      [v8 setShouldSuggestConversionToGroceryList:a3 & 1];
    }
  }
  else
  {
    id v10 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_1005C46C0()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDGroceryOperationSuggestConversionToGroceryList()
{
  return self;
}

uint64_t sub_1005C472C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000C6EF4;
  return sub_1005C1904(a1);
}

uint64_t sub_1005C47C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005C4804(uint64_t a1@<X8>)
{
  sub_1005C3A5C(*(void **)(v1 + 16), a1);
}

void sub_1005C4820(void *a1@<X8>)
{
  sub_1005C3E14(*(void **)(v1 + 16), a1);
}

uint64_t sub_1005C483C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1005C488C()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v52[0] = 0xD00000000000002BLL;
  v52[1] = 0x80000001007D0CD0;
  id v2 = *v0;
  id v3 = [v2 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8069182;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v52, "remObjectID: ");
  HIWORD(v52[1]) = -4864;
  sub_100096408((uint64_t)(v1 + 1), (uint64_t)v53, (uint64_t *)&unk_100914BC0);
  sub_100096408((uint64_t)v53, (uint64_t)&v50, (uint64_t *)&unk_100914BC0);
  sub_100094134((uint64_t *)&unk_100914BC0);
  v9._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  uint64_t v11 = v52[0];
  uint64_t v12 = (void *)v52[1];
  v52[0] = 0xD00000000000002BLL;
  v52[1] = 0x80000001007D0CD0;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v14 = v52[0];
  unint64_t v15 = v52[1];
  unint64_t v50 = 0x203A656D616ELL;
  unint64_t v51 = 0xE600000000000000;
  sub_100096408((uint64_t)(v1 + 2), (uint64_t)v52, (uint64_t *)&unk_10090A4C0);
  sub_100096408((uint64_t)v52, (uint64_t)&v48, (uint64_t *)&unk_10090A4C0);
  sub_100094134((uint64_t *)&unk_10090A4C0);
  v16._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v50;
  long long v19 = (void *)v51;
  unint64_t v50 = v14;
  unint64_t v51 = v15;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v21 = v50;
  unint64_t v22 = v51;
  unint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  unint64_t v50 = 0xD00000000000001ELL;
  unint64_t v51 = 0x80000001007D0D00;
  if ((_BYTE)v1[4]) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if ((_BYTE)v1[4]) {
    unint64_t v24 = 0xE400000000000000;
  }
  else {
    unint64_t v24 = 0xE500000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  uint64_t v27 = v50;
  id v28 = (void *)v51;
  unint64_t v50 = v21;
  unint64_t v51 = v22;
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v30 = v50;
  unint64_t v31 = v51;
  unint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  unint64_t v50 = 0xD000000000000026;
  unint64_t v51 = 0x80000001007D9330;
  if (*((unsigned char *)v1 + 33)) {
    uint64_t v32 = 1702195828;
  }
  else {
    uint64_t v32 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + 33)) {
    unint64_t v33 = 0xE400000000000000;
  }
  else {
    unint64_t v33 = 0xE500000000000000;
  }
  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v50;
  uint64_t v37 = (void *)v51;
  unint64_t v50 = v30;
  unint64_t v51 = v31;
  swift_bridgeObjectRetain();
  v38._countAndFlagsBits = v36;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v39 = v50;
  unint64_t v40 = v51;
  unint64_t v50 = 0;
  unint64_t v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  unint64_t v48 = 0xD000000000000011;
  unint64_t v49 = 0x80000001007D0D20;
  sub_100096408((uint64_t)(v1 + 5), (uint64_t)&v50, (uint64_t *)&unk_10090A4C0);
  sub_100096408((uint64_t)&v50, (uint64_t)v47, (uint64_t *)&unk_10090A4C0);
  v41._countAndFlagsBits = Optional.descriptionOrNil.getter();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = v48;
  uint64_t v43 = (void *)v49;
  unint64_t v48 = v39;
  unint64_t v49 = v40;
  swift_bridgeObjectRetain();
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v45._countAndFlagsBits = 125;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  return v48;
}

unint64_t sub_1005C4D30()
{
  return sub_1005C488C();
}

uint64_t sub_1005C4D74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 81, 7);
}

void sub_1005C4DCC()
{
  sub_1005C45C8(*(void **)(v0 + 16), (uint64_t *)(v0 + 24), *(unsigned char *)(v0 + 80));
}

uint64_t sub_1005C4DF0(uint64_t a1)
{
  id v2 = *(void **)a1;
  id v3 = *(void **)(a1 + 8);
  swift_bridgeObjectRetain();
  id v4 = v2;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1005C4E3C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1005C4EAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 48);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1000C6EF4;
  *(void *)(v6 + 56) = v1 + 64;
  *(_OWORD *)(v6 + 40) = v7;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 16) = a1;
  return _swift_task_switch(sub_1005C42BC, 0, 0);
}

void sub_1005C4F98(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 name];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v7 = 0;
  }
  id v8 = [a1 objectID];
  id v9 = [a1 remObjectID];
  unsigned __int8 v10 = [a1 shouldCategorizeGroceryItems];
  unsigned __int8 v11 = [a1 shouldSuggestConversionToGroceryList];
  id v12 = [a1 groceryLocaleID];
  if (v12)
  {
    Swift::String v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {

    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = v10;
  *(unsigned char *)(a2 + 33) = v11;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v16;
}

uint64_t _s31ThreadSafePartialRepresentationVwxx_1(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s31ThreadSafePartialRepresentationVwcp_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  id v7 = v3;
  id v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwca_1(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s31ThreadSafePartialRepresentationVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s31ThreadSafePartialRepresentationVwta_1(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s31ThreadSafePartialRepresentationVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s31ThreadSafePartialRepresentationVwst_0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s31ThreadSafePartialRepresentationVMa_2()
{
  return &_s31ThreadSafePartialRepresentationVN_1;
}

uint64_t sub_1005C5364()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E410);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E410);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_IsPinnedByCurrentUser.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  *(void *)&v8[0] = 0xD00000000000002FLL;
  *((void *)&v8[0] + 1) = 0x80000001007935D0;
  id v4 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000F5B8C((uint64_t)v9);
LABEL_9:
    sub_1005C563C(_.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD00000000000002FLL;
    v9[1] = 0x80000001007935D0;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

uint64_t sub_1005C563C(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  if (qword_1009079E0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10091E410);
  id v4 = a1;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    aBlock[0] = ObjectType;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    aBlock[0] = sub_1000C51B8(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    id v10 = sub_1002ECF34();
    aBlock[0] = sub_1000C51B8((uint64_t)v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: BEGIN {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v13 = [v4 persistentStoreCoordinator];
  [v12 setPersistentStoreCoordinator:v13];

  [v12 setTransactionAuthor:RDStoreControllerIsPinnedByCurrentUserMigrationAuthor];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v4;
  v14[4] = ObjectType;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1005C640C;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10008F6F4;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008CBEF0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v4;
  id v18 = v12;
  swift_retain();
  swift_release();
  [v18 performBlockAndWait:v16];

  _Block_release(v16);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v18) {
    __break(1u);
  }
  return result;
}

void sub_1005C59DC(void *a1, NSObject *a2, void *a3)
{
  uint64_t v73 = a3;
  uint64_t v74 = a2;
  uint64_t v4 = _s10PredicatesOMa_1();
  __chkstk_darwin(v4);
  os_log_type_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v66 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v66 - v14;
  Date.init()();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  id v75 = (id)inited;
  specialized Array._endMutation()();
  unint64_t v17 = (unint64_t)v75;
  swift_storeEnumTagMultiPayload();
  id v18 = (void *)sub_100535B3C();
  sub_1000ECFE0((uint64_t)v6);
  long long v19 = (void *)sub_1003BD0F4(v17, 0, 0, (uint64_t)v18);
  uint64_t v20 = a1;
  swift_bridgeObjectRelease();

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  unint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v34 = v21;
  id v67 = v20;
  id v70 = v19;
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v35 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v69 = v7;
  uint64_t v68 = v8;
  uint64_t v71 = v15;
  uint64_t v66 = v12;
  if (v35)
  {
    if (v35 < 1) {
      __break(1u);
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v24 = (v34 & 0xC000000000000001);
    unint64_t v25 = &selRef_includeReminderTitles;
    while (1)
    {
      if (v24) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v38 = *(id *)(v34 + 8 * v37 + 32);
      }
      unint64_t v39 = v38;
      if ((objc_msgSend(v38, "isPinnedByCurrentUser", v66) & 1) != 0
        || [v39 sharingStatus] > 1)
      {
      }
      else
      {
        [v39 setIsPinnedByCurrentUser:1];

        if (__OFADD__(v36++, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
      }
      if (v35 == ++v37) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v36 = 0;
LABEL_23:
  swift_bridgeObjectRelease();
  id v41 = v67;
  unsigned __int8 v42 = [v67 hasChanges];
  uint64_t v43 = v69;
  uint64_t v44 = v68;
  id v45 = v70;
  uint64_t v46 = v71;
  if ((v42 & 1) == 0) {
    goto LABEL_26;
  }
  id v75 = 0;
  if ([v41 save:&v75])
  {
    id v47 = v75;
LABEL_26:
    if (qword_1009079E0 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_10008E2DC(v48, (uint64_t)qword_10091E410);
    unint64_t v49 = v66;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v66, v46, v43);
    unint64_t v50 = v74;
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    int v53 = v52;
    uint64_t v74 = v51;
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v54 = swift_slowAlloc();
      id v67 = (id)swift_slowAlloc();
      uint64_t v76 = (uint64_t)v67;
      *(_DWORD *)uint64_t v54 = 136315906;
      id v75 = v73;
      swift_getMetatypeMetadata();
      uint64_t v55 = String.init<A>(describing:)();
      LODWORD(v73) = v53;
      id v75 = (id)sub_1000C51B8(v55, v56, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2082;
      id v57 = sub_1002ECF34();
      id v75 = (id)sub_1000C51B8((uint64_t)v57, v58, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 22) = 2050;
      id v75 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v54 + 32) = 2050;
      uint64_t v59 = v72;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v61 = v60;
      uint64_t v62 = *(void (**)(char *, uint64_t))(v44 + 8);
      v62(v59, v43);
      id v75 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v62(v49, v43);
      uint64_t v63 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v73, "%s: END {store: %{public}s, updateCount = %{public}ld, elapsedSeconds: %{public}f}", (uint8_t *)v54, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v62(v71, v43);
    }
    else
    {

      uint64_t v64 = *(void (**)(char *, uint64_t))(v44 + 8);
      v64(v49, v43);

      v64(v46, v43);
    }
    return;
  }
  id v65 = v75;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
  if (qword_1009079E0 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10008E2DC(v22, (uint64_t)qword_10091E410);
  uint64_t v23 = v74;
  swift_errorRetain();
  unint64_t v24 = v23;
  swift_errorRetain();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315650;
    id v75 = v73;
    swift_getMetatypeMetadata();
    uint64_t v28 = String.init<A>(describing:)();
    id v75 = (id)sub_1000C51B8(v28, v29, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    id v30 = sub_1002ECF34();
    id v75 = (id)sub_1000C51B8((uint64_t)v30, v31, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v32 = Error.rem_errorDescription.getter();
    id v75 = (id)sub_1000C51B8(v32, v33, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: FAILED {store: %{public}s, error: %{public}s}", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
LABEL_21:
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
}

id RDStoreControllerMigrator_IsPinnedByCurrentUser.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser();
  return [super init];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser()
{
  return self;
}

id RDStoreControllerMigrator_IsPinnedByCurrentUser.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_IsPinnedByCurrentUser();
  return [super dealloc];
}

uint64_t sub_1005C63CC()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1005C640C()
{
  sub_1005C59DC(*(void **)(v0 + 16), *(NSObject **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1005C6418()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005C6428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005C6438()
{
  return swift_release();
}

uint64_t sub_1005C6450()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E450);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E450);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1005C6518(uint64_t a1)
{
  return [*(id *)(a1 + 16) synchronize];
}

void sub_1005C6528()
{
}

id sub_1005C654C()
{
  return [self isInternetReachable];
}

uint64_t sub_1005C6578()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009079E8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10091E450);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Reminder daemon started", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener];
  [*(id *)(v13 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener) resume];
  [*(id *)(v13 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive) resume];
  if (qword_1009070E0 != -1) {
    swift_once();
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  aBlock[4] = sub_1005C78B8;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CBF70;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v1;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, void))(v6 + 8))(v8, v18[0]);
  return swift_release();
}

void sub_1005C6928(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_disabledAccountsEventHandler);
  id v3 = [self daemonUserDefaults];
  id v4 = [self babysittableWaiterID];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [self sharedBabysitter];
  if (v8)
  {
    uint64_t v9 = v8;
    sub_1005C78D8(v3, v5, v7, v8, v2);

    swift_bridgeObjectRelease();
    if (*(void *)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_suggestedAttributesAutoTrainer)) {
      sub_1006282F8();
    }
    sub_1005C7C90(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_housekeepingActivityScheduler, (uint64_t)v14);
    uint64_t v10 = v15;
    if (v15)
    {
      uint64_t v11 = v16;
      sub_1000C0DE0(v14, v15);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v14);
    }
    else
    {
      sub_1000966BC((uint64_t)v14, &qword_1009081A0);
    }
    sub_1005C7C90(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_cloudConfigurationUpdater, (uint64_t)v14);
    uint64_t v12 = v15;
    if (v15)
    {
      uint64_t v13 = v16;
      sub_1000C0DE0(v14, v15);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v14);
    }
    else
    {
      sub_1000966BC((uint64_t)v14, &qword_1009081A0);
    }
    if (*(void *)(a1 + OBJC_IVAR____TtC7remindd8RDDaemon_extraneousAlarmsCollector)) {
      sub_10022C124();
    }
  }
  else
  {
    __break(1u);
  }
}

void *sub_1005C6B10()
{
  uint64_t v0 = sub_100120D8C();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = (uint64_t *)(v0 + 40);
  while (1)
  {
    uint64_t v4 = *v2;
    uint64_t v21 = *(v2 - 1);
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v8 = sub_1001806F8(0xD00000000000001CLL, 0x80000001007D96A0);
    uint64_t v9 = _swiftEmptyDictionarySingleton[2];
    BOOL v10 = (v7 & 1) == 0;
    uint64_t v11 = v9 + v10;
    if (__OFADD__(v9, v10)) {
      break;
    }
    char v12 = v7;
    if (_swiftEmptyDictionarySingleton[3] >= v11)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v7) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_100318A14();
        if (v12) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_10030E654(v11, isUniquelyReferenced_nonNull_native);
      unint64_t v13 = sub_1001806F8(0xD00000000000001CLL, 0x80000001007D96A0);
      if ((v12 & 1) != (v14 & 1)) {
        goto LABEL_20;
      }
      unint64_t v8 = v13;
      if (v12)
      {
LABEL_3:
        id v3 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v8);
        swift_bridgeObjectRelease();
        *id v3 = v21;
        v3[1] = v4;
        goto LABEL_4;
      }
    }
    _swiftEmptyDictionarySingleton[(v8 >> 6) + 8] |= 1 << v8;
    uint64_t v15 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v8);
    *uint64_t v15 = 0xD00000000000001CLL;
    v15[1] = 0x80000001007D96A0;
    uint64_t v16 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v8);
    *uint64_t v16 = v21;
    v16[1] = v4;
    uint64_t v17 = _swiftEmptyDictionarySingleton[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_19;
    }
    _swiftEmptyDictionarySingleton[2] = v19;
    swift_bridgeObjectRetain();
LABEL_4:
    v2 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_1005C6DB0()
{
  return sub_1005C71F0(type metadata accessor for RDDaemon);
}

uint64_t type metadata accessor for RDDaemon()
{
  return self;
}

id sub_1005C70B0()
{
  uint64_t v1 = v0;
  if (qword_1009079E8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091E450);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reminder barebones daemon started", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7remindd17RDBarebonesDaemon_xpcClientConnectionListener);
  [*(id *)(v6 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener) resume];
  char v7 = *(void **)(v6 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive);

  return [v7 resume];
}

id sub_1005C71D8()
{
  return sub_1005C71F0(type metadata accessor for RDBarebonesDaemon);
}

id sub_1005C71F0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for RDBarebonesDaemon()
{
  return self;
}

uint64_t sub_1005C7298(void *a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections] = &_swiftEmptySetSingleton;
  sub_100121F2C();
  uint64_t v6 = qword_1009070B8;
  char v7 = a3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    uint64_t v9 = &v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon];
    *(void *)uint64_t v9 = a1;
    *((void *)v9 + 1) = &off_1008C3598;
    uint64_t v10 = OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue;
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue] = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = objc_allocWithZone((Class)NSXPCListener);
    id v25 = a1;
    id v12 = a2;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v14 = [v11 initWithMachServiceName:v13];

    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener] = v14;
    [v14 _setQueue:*(void *)&v7[v10]];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = objc_allocWithZone((Class)NSXPCListener);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [v15 initWithMachServiceName:v16];

    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive] = v17;
    [v17 _setQueue:*(void *)&v7[v10]];
    sub_100094134(&qword_10091E588);
    swift_allocObject();
    uint64_t v18 = PassthroughSubject.init()();
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePassthroughSubject] = v18;
    uint64_t v27 = v18;
    sub_1000967F4(&qword_10091E590, &qword_10091E588);
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher] = Publisher.eraseToAnyPublisher()();

    v26.receiver = v7;
    v26.super_class = (Class)type metadata accessor for RDClientConnectionListener();
    uint64_t v19 = (char *)[super init];
    uint64_t v20 = *(void **)&v19[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener];
    uint64_t v21 = v19;
    [v20 setDelegate:v21];
    uint64_t v22 = *(void **)&v21[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive];
    uint64_t v23 = v21;
    id v24 = v22;
    [v24 setDelegate:v23];

    return (uint64_t)v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C758C(void *a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections] = &_swiftEmptySetSingleton;
  sub_100121F2C();
  uint64_t v6 = qword_1009070B8;
  char v7 = a3;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    uint64_t v9 = &v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcDaemon];
    *(void *)uint64_t v9 = a1;
    *((void *)v9 + 1) = &off_1008C8958;
    uint64_t v10 = OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue;
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_listenerQueue] = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = objc_allocWithZone((Class)NSXPCListener);
    id v25 = a1;
    id v12 = a2;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v14 = [v11 initWithMachServiceName:v13];

    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener] = v14;
    [v14 _setQueue:*(void *)&v7[v10]];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = objc_allocWithZone((Class)NSXPCListener);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [v15 initWithMachServiceName:v16];

    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive] = v17;
    [v17 _setQueue:*(void *)&v7[v10]];
    sub_100094134(&qword_10091E588);
    swift_allocObject();
    uint64_t v18 = PassthroughSubject.init()();
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePassthroughSubject] = v18;
    uint64_t v27 = v18;
    sub_1000967F4(&qword_10091E590, &qword_10091E588);
    *(void *)&v7[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher] = Publisher.eraseToAnyPublisher()();

    v26.receiver = v7;
    v26.super_class = (Class)type metadata accessor for RDClientConnectionListener();
    uint64_t v19 = (char *)[super init];
    uint64_t v20 = *(void **)&v19[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener];
    uint64_t v21 = v19;
    [v20 setDelegate:v21];
    uint64_t v22 = *(void **)&v21[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive];
    uint64_t v23 = v21;
    id v24 = v22;
    [v24 setDelegate:v23];

    return (uint64_t)v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C7880()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1005C78B8()
{
  sub_1005C6928(*(void *)(v0 + 16));
}

uint64_t sub_1005C78C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005C78D0()
{
  return swift_release();
}

uint64_t sub_1005C78D8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v23 = a2;
  id v24 = a4;
  uint64_t v25 = *a5;
  uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = sub_100405004(v12, v13, (void *)0xD00000000000001ELL, 0x80000001007D96C0, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26[0] = v14;
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134(&qword_10091AE50);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  sub_1000967F4(&qword_10091E598, &qword_10091AE50);
  uint64_t v15 = Publisher.multicast<A>(_:)();
  swift_release();
  v26[0] = v15;
  sub_100094134(&qword_10091E5A0);
  sub_1000967F4(&qword_10091E5A8, &qword_10091E5A0);
  v26[0] = Publisher.eraseToAnyPublisher()();
  NSString v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = &off_1008C6908;
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  void v16[4] = &off_1008CA6F0;
  void v16[5] = v17;
  v16[6] = a3;
  v16[7] = v18;
  id v19 = a1;
  swift_bridgeObjectRetain();
  id v20 = v18;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  Publishers.Multicast.connect()();
  sub_1000C0DE0(v26, v26[3]);
  swift_beginAccess();
  Cancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
}

uint64_t sub_1005C7C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_1009081A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C7CF8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1005C7D40(uint64_t a1, uint64_t *a2)
{
  sub_1004D151C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56));
}

uint64_t sub_1005C7D50(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  id v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  unint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v14 = (char *)&v26 - v13;
  __chkstk_darwin(v15);
  unint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  id v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v14;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  id v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    id v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

void sub_1005C814C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 sha512Sum];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1005C81B4(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setSha512Sum:];
}

uint64_t sub_1005C8224@<X0>(void (*a1)(unsigned char *, __n128)@<X0>, uint64_t a2@<X8>)
{
  __chkstk_darwin(a1);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v12[-v9];
  a1(v5, v8);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v10, v6);
}

uint64_t sub_1005C83D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091E5B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091E5B0);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1005C84A0()
{
  id result = [self housekeepingingActivityScheduler];
  qword_10091E5C8 = (uint64_t)result;
  return result;
}

uint64_t sub_1005C84DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D4344((SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

void sub_1005C8510(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void *sub_1005C8528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005D723C(a1, a2, a3, a4);
}

id sub_1005C8540()
{
  id v1 = [v0 account];

  return v1;
}

id sub_1005C8578()
{
  id v1 = [v0 objectID];

  return v1;
}

void *sub_1005C85B0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1005D7544(a1, a2, a3, a4);
}

void *sub_1005C85C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005D7A44(a1, a2, a3, a4);
}

uint64_t sub_1005C85E0()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_1009079F8 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v9 = *(void (**)(void, void))(v4 + 8);
  uint64_t v7 = v4 + 8;
  __n128 v8 = (uint64_t (*)(void, void))v9;
  v9(v6, v3);
  if (qword_1009079F0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091E5B0);
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v19[1] = v1;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = v7;
    uint64_t v27 = v14;
    uint64_t v20 = v8;
    *(_DWORD *)uint64_t v13 = 136446210;
    uint64_t v22 = v3;
    uint64_t v16 = v2[18];
    unint64_t v15 = v2[19];
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_1000C51B8(v16, v15, &v27);
    uint64_t v3 = v22;
    __n128 v8 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] start execute()", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  sub_1005C8978();
  v24[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24[1] = v17;
  memset(&v24[2], 0, 24);
  __int16 v26 = 0x4000;
  int v25 = 0;
  sub_1003B5ADC((uint64_t)v24, (uint64_t)sub_1005D6710, (uint64_t)v2);
  swift_bridgeObjectRelease();
  sub_1005C8AF4(v2);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return v8(v6, v3);
}

uint64_t sub_1005C8978()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(void *)(v0 + 40) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  uint64_t v4 = static Array._allocateUninitialized(_:)();
  swift_beginAccess();
  *(void *)(v0 + 48) = v4;
  swift_bridgeObjectRelease();
  static Date.now.getter();
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 0, 1, v5);
  uint64_t v6 = v0 + qword_10091E7D8;
  swift_beginAccess();
  sub_10013B9A4((uint64_t)v3, v6);
  return swift_endAccess();
}

void sub_1005C8AF4(void *a1)
{
  sub_1005CFFD4(a1 + 12);
  if (qword_1009079F0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091E5B0);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    uint64_t v6 = a1[18];
    unint64_t v7 = a1[19];
    swift_bridgeObjectRetain();
    sub_1000C51B8(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] finish execute()", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

void sub_1005C8CD4(void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char **)((char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  os_log_type_t v12 = (char *)v50 - v11;
  uint64_t v62 = a1;
  unint64_t v13 = sub_1005C9F90();
  if (v2) {
    return;
  }
  unint64_t v14 = v13;
  if (v13 >> 62) {
    goto LABEL_44;
  }
  uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    id v67 = a2;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    unint64_t v61 = v14 & 0xC000000000000001;
    unint64_t v64 = v14;
    if ((v14 & 0xC000000000000001) != 0)
    {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_47:
        swift_once();
        goto LABEL_23;
      }
      id v16 = *(id *)(v14 + 32);
    }
    uint64_t v3 = v16;
    uint64_t v17 = a2[17];
    uint64_t v60 = v17 + 40;
    swift_beginAccess();
    uint64_t v19 = *(void *)(*(void *)(v17 + 40) + 16);
    uint64_t v65 = v17;
    if (v19 >= *(void *)(v17 + 16)) {
      break;
    }
    uint64_t v54 = v9;
    int v63 = 0;
    uint64_t v59 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v20 = 0;
    uint64_t v55 = &v72;
    uint64_t v53 = v64 & 0xFFFFFFFFFFFFFF8;
    uint64_t v58 = v15 - 1;
    uint64_t v9 = &selRef_stringFromDate_;
    *(void *)&long long v18 = 136446722;
    long long v52 = v18;
    v50[1] = (char *)&type metadata for Any + 8;
    *(void *)&long long v18 = 136446466;
    long long v51 = v18;
    uint64_t v57 = v6;
    unint64_t v56 = v12;
    while (1)
    {
      unint64_t v68 = v20 + 1;
      id v21 = [v3 v9[136]];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1005CA24C();
      uint64_t v66 = v20;
      uint64_t v22 = *v59;
      (*v59)(v12, v6);
      id v23 = [v3 v9[136]];
      id v24 = v54;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = (*(uint64_t (**)(void, void *, char **, void))(*(void *)(*a2 + 88) + 64))(a2[4], v62, v24, a2[11]);
      v22((char *)v24, v6);
      sub_1005CA4C0(v25, v3, v62);

      swift_bridgeObjectRelease();
      uint64_t v7 = v66;
      os_log_type_t v12 = v56;
      uint64_t v9 = &selRef_stringFromDate_;
      unint64_t v14 = v68;
      if (v58 == v66)
      {
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      if (v61)
      {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v68 >= *(void *)(v53 + 16)) {
          goto LABEL_43;
        }
        id v26 = *(id *)(v64 + 8 * v66 + 40);
      }
      uint64_t v3 = v26;
      if (__OFADD__(v14, 1)) {
        break;
      }
      swift_beginAccess();
      uint64_t v20 = v7 + 1;
      if (*(void *)(*(void *)(v65 + 40) + 16) >= *(void *)(v65 + 16)) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  int v63 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  if (qword_1009079F0 != -1) {
    goto LABEL_47;
  }
LABEL_23:
  uint64_t v27 = type metadata accessor for Logger();
  sub_10008E2DC(v27, (uint64_t)qword_10091E5B0);
  swift_retain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446466;
    uint64_t v31 = a2[18];
    unint64_t v32 = a2[19];
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_1000C51B8(v31, v32, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2050;
    uint64_t v33 = v67[11];
    swift_release();
    uint64_t v71 = v33;
    a2 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] no delete limit left {perRunDeleteLimit: %{public}ld}", (uint8_t *)v30, 0x16u);
    uint64_t v34 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v63) {
      goto LABEL_37;
    }
  }
  else
  {

    swift_release_n();
LABEL_27:
    if (v63)
    {
      uint64_t v34 = 1;
      goto LABEL_37;
    }
  }
LABEL_28:
  uint64_t v35 = a2[17];
  swift_beginAccess();
  uint64_t v36 = *(void *)(*(void *)(v35 + 40) + 16);
  uint64_t v65 = v35;
  if (v36 < *(void *)(v35 + 16))
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10091E5B0);
    swift_retain();
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      *(_DWORD *)unint64_t v40 = 136446210;
      uint64_t v41 = a2[18];
      unint64_t v42 = a2[19];
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_1000C51B8(v41, v42, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%{public}s] finished with some delete quota remaining: container deemed clean", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_1005CA694(v62);
    return;
  }
  uint64_t v34 = 0;
LABEL_37:
  if (qword_1009079F0 != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  sub_10008E2DC(v43, (uint64_t)qword_10091E5B0);
  swift_retain();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    unint64_t v68 = v34;
    uint64_t v71 = v47;
    *(_DWORD *)uint64_t v46 = 136446722;
    uint64_t v48 = a2[18];
    unint64_t v49 = a2[19];
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_1000C51B8(v48, v49, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 1026;
    LODWORD(v69) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v46 + 18) = 2050;
    uint64_t v69 = sub_1005CB280();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%{public}s] finished without deeming complete {errorEncountered: %{BOOL,public}d, quota remaining: %{public}ld}", (uint8_t *)v46, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

unint64_t sub_1005C9F90()
{
  unint64_t result = sub_1005CE254();
  if (v1) {
    return (unint64_t)v0;
  }
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_4:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v3 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    id v8 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:(int)[v6 type]];
    unsigned int v9 = [v8 supportsAttachments];

    if (v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
LABEL_17:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t result = swift_retain();
    if (!v10)
    {
LABEL_31:
      swift_release();
      uint64_t v0 = _swiftEmptyArrayStorage;
      swift_release();
      return (unint64_t)v0;
    }
    goto LABEL_19;
  }
LABEL_30:
  swift_retain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_31;
  }
LABEL_19:
  if (v10 >= 1)
  {
    for (uint64_t j = 0; j != v10; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = (id)_swiftEmptyArrayStorage[j + 4];
      }
      unint64_t v13 = v12;
      id v14 = [v12 remObjectID];

      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_31;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1005CA24C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)&double v3 = __chkstk_darwin(v1).n128_u64[0];
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*(id *)(v0 + 32) attachmentFileManager:v3];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 URLForHashedAttachmentDirectory:isa];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v9 = self;
  id v10 = [v9 defaultManager];
  URL.path(percentEncoded:)(0);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(isa) = [v10 fileExistsAtPath:v11];

  if ((isa & 1) == 0)
  {
    id v12 = [v9 defaultManager];
    URL._bridgeToObjectiveC()(v13);
    uint64_t v15 = v14;
    id v21 = 0;
    unsigned int v16 = [v12 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:&v21];

    if (v16)
    {
      uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
      id v18 = v21;
      return v17(v5, v1);
    }
    id v20 = v21;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_1005CA4C0(uint64_t a1, void *a2, void *a3)
{
  void (*v8)(void *__return_ptr, uint64_t *);
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v21)(void *__return_ptr, uint64_t *);
  uint64_t v22;
  void v23[4];
  uint64_t v24;

  uint64_t v5 = v4;
  v23[0] = a1;
  sub_100094134(&qword_10091F078);
  sub_1000967F4(&qword_10091F080, &qword_10091F078);
  uint64_t v6 = BidirectionalCollection<>.lazySlices(by:)();
  uint64_t v7 = v6;
  id v21 = v8;
  uint64_t v17 = *(void *)(v6 + 16);
  if (v17)
  {
    unsigned int v9 = 0;
    id v18 = *(void *)(v3 + 136);
    unsigned int v16 = v6;
    while (1)
    {
      uint64_t v22 = v5;
      id v24 = *(void *)(v7 + 8 * v9 + 32);
      v21(v23, &v24);
      id v10 = (void *)v23[0];
      NSString v11 = (void *)v23[1];
      unint64_t v13 = (void *)v23[2];
      id v12 = (void *)v23[3];
      swift_beginAccess();
      if (*(void *)(*(void *)(v18 + 40) + 16) >= *(void *)(v18 + 16))
      {
        swift_unknownObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      sub_1005CC5C8(v10, v11, v13, v12, a2, a3);
      uint64_t v5 = v22;
      if (v22) {
        break;
      }
      ++v9;
      swift_unknownObjectRelease();
      uint64_t v7 = v16;
      if (v17 == v9) {
        goto LABEL_6;
      }
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
LABEL_6:
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005CA694(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v109 = type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  uint64_t v99 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v98 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v5;
  __chkstk_darwin(v6);
  unint64_t v108 = (char *)&v89 - v7;
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v112 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v116 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v107 = (char *)&v89 - v11;
  __chkstk_darwin(v12);
  uint64_t v115 = (char *)&v89 - v13;
  __chkstk_darwin(v14);
  uint64_t v114 = (char *)&v89 - v15;
  uint64_t v16 = sub_100094134(&qword_10091F0A0);
  __chkstk_darwin(v16 - 8);
  unint64_t v106 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v105 = (uint64_t *)((char *)&v89 - v19);
  swift_beginAccess();
  uint64_t v20 = v1[8];
  uint64_t v21 = v1[9];
  uint64_t v93 = v1 + 5;
  sub_1000C0DE0(v1 + 5, v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
  if (v22)
  {
    uint64_t v23 = v22;
    swift_endAccess();
    type metadata accessor for RDDeduplicationActivity.Executable.CrashCleaner();
    id v24 = (void *)v1[4];
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = a1;
    id v26 = v24;
    id v27 = a1;
    uint64_t v28 = sub_1005CB314(v23);
    uint64_t v92 = v2;
    if (v2)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      uint64_t v32 = v28;
      uint64_t v33 = v29;
      uint64_t v113 = v8;
      uint64_t v90 = v23;
      uint64_t v89 = v25;
      uint64_t result = Set.init(minimumCapacity:)();
      unint64_t v34 = 0;
      uint64_t v119 = result;
      uint64_t v96 = v32;
      unint64_t v35 = *(void *)(v32 + 16);
      uint64_t v102 = (void (**)(char *, char *, uint64_t))(v112 + 16);
      uint64_t v103 = (void (**)(char *, char *, uint64_t))(v112 + 32);
      unint64_t v101 = (void (**)(char *, uint64_t))(v112 + 8);
      *(void *)&long long v36 = 136446722;
      long long v95 = v36;
      char v94 = (char *)&type metadata for Any + 8;
      unint64_t v117 = v3;
      uint64_t v37 = v109;
      uint64_t v97 = v33;
      unint64_t v104 = v35;
      while (1)
      {
        uint64_t v40 = (uint64_t)v106;
        os_log_type_t v39 = v107;
        if (v34 == v35)
        {
          uint64_t v41 = sub_100094134(&qword_10091F0A8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
          unint64_t v42 = v35;
        }
        else
        {
          uint64_t v43 = v96;
          if (v34 >= *(void *)(v96 + 16)) {
            goto LABEL_38;
          }
          uint64_t v44 = sub_100094134(&qword_10091F0A8);
          uint64_t v45 = *(void *)(v44 - 8);
          sub_1000BF710(v43+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v34, v40, &qword_10091F0A8);
          unint64_t v42 = v34 + 1;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v40, 0, 1, v44);
          unint64_t v35 = v104;
        }
        uint64_t v46 = v105;
        sub_100096408(v40, (uint64_t)v105, &qword_10091F0A0);
        uint64_t v47 = sub_100094134(&qword_10091F0A8);
        if ((*(unsigned int (**)(Swift::Int *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v46, 1, v47) == 1)break; {
        Swift::Int v48 = *v46;
        }
        Swift::Int v110 = v46[1];
        Swift::Int v111 = v48;
        unint64_t v49 = (char *)v46 + *(int *)(v47 + 48);
        unint64_t v50 = (char *)v46 + *(int *)(v47 + 64);
        long long v51 = *v103;
        uint64_t v52 = v113;
        uint64_t v53 = v114;
        (*v103)(v114, v49, v113);
        uint64_t v54 = v115;
        v51(v115, v50, v52);
        if (qword_1009079F0 != -1) {
          swift_once();
        }
        unint64_t v112 = v42;
        uint64_t v55 = type metadata accessor for Logger();
        sub_10008E2DC(v55, (uint64_t)qword_10091E5B0);
        unint64_t v56 = *v102;
        uint64_t v57 = v39;
        (*v102)(v39, v53, v52);
        unint64_t v58 = (unint64_t)v116;
        v56(v116, v54, v52);
        swift_retain();
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = swift_slowAlloc();
          uint64_t v100 = swift_slowAlloc();
          int64_t v118 = (unint64_t *)v100;
          *(_DWORD *)uint64_t v61 = v95;
          uint64_t v63 = v117[18];
          unint64_t v62 = v117[19];
          swift_bridgeObjectRetain();
          *(void *)(v61 + 4) = sub_1000C51B8(v63, v62, (uint64_t *)&v118);
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v61 + 12) = 2082;
          sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v61 + 14) = sub_1000C51B8(v64, v65, (uint64_t *)&v118);
          swift_bridgeObjectRelease();
          id v38 = *v101;
          uint64_t v52 = v113;
          (*v101)(v57, v113);
          *(_WORD *)(v61 + 22) = 2082;
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v61 + 24) = sub_1000C51B8(v66, v67, (uint64_t *)&v118);
          swift_bridgeObjectRelease();
          v38(v116, v52);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "[%{public}s] Cleaned after crash {accountID: %{public}s, attachmentID: %{public}s", (uint8_t *)v61, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v35 = v104;
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          id v38 = *v101;
          (*v101)(v57, v52);
          v38((char *)v58, v52);
        }

        sub_10031DC68((Swift::Int *)&v118, v111, v110);
        swift_bridgeObjectRelease();
        v38(v115, v52);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v114, v52);
        uint64_t v37 = v109;
        unint64_t v34 = v112;
      }
      swift_bridgeObjectRelease();
      uint64_t v68 = v97;
      if (!Array.endIndex.getter())
      {
LABEL_27:
        swift_bridgeObjectRelease();
        uint64_t v79 = sub_10012674C(v90);
        swift_bridgeObjectRelease();
        if (*(void *)(v119 + 16) <= *(void *)(v79 + 16) >> 3)
        {
          int64_t v118 = (unint64_t *)v79;
          sub_10065A5FC(v119);
          swift_bridgeObjectRelease();
          uint64_t v80 = v118;
        }
        else
        {
          uint64_t v80 = sub_10023CBC4(v119, v79);
          swift_bridgeObjectRelease();
        }
        uint64_t v31 = v93;
        uint64_t v81 = sub_100209D8C((uint64_t)v80);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v82 = v117[8];
        uint64_t v83 = v117[9];
        sub_100096204((uint64_t)v31, v82);
        (*(void (**)(void *, uint64_t, uint64_t))(v83 + 40))(v81, v82, v83);
        swift_endAccess();
        swift_release();
        goto LABEL_31;
      }
      uint64_t v69 = 0;
      uint64_t v70 = v117[18];
      uint64_t v116 = (char *)v117[19];
      uint64_t v71 = (void (**)(char *, uint64_t *, uint64_t))(v99 + 16);
      uint64_t v72 = (void (**)(char *, char *, uint64_t))(v99 + 32);
      uint64_t v73 = (void (**)(char *, uint64_t))(v99 + 8);
      while (1)
      {
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v99 + 16))(v108, v68+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v69, v37);
        }
        else
        {
          uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
          if (v91 != 8) {
            goto LABEL_39;
          }
          int64_t v118 = (unint64_t *)result;
          (*v71)(v108, (uint64_t *)&v118, v37);
          uint64_t result = swift_unknownObjectRelease();
        }
        uint64_t v75 = v69 + 1;
        uint64_t v76 = v98;
        if (__OFADD__(v69, 1)) {
          break;
        }
        uint64_t v37 = v109;
        (*v72)(v98, v108, v109);
        sub_1005CB600(v70, (unint64_t)v116, v37);
        if (sub_1005CC200(v37))
        {
          Swift::Int v77 = sub_1005CC3F8(v37);
          sub_10031DC68((Swift::Int *)&v118, v77, v78);
          swift_bridgeObjectRelease();
        }
        (*v73)(v76, v37);
        uint64_t v68 = v97;
        ++v69;
        if (v75 == Array.endIndex.getter()) {
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
  }
  else
  {
    swift_endAccess();
    unint64_t v117 = v1;
    uint64_t v31 = v93;
LABEL_31:
    swift_beginAccess();
    uint64_t v84 = v117[8];
    uint64_t v85 = v117[9];
    sub_1000C0DE0(v31, v84);
    uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 32))(v84, v85);
    swift_endAccess();
    if (v86) {
      uint64_t v87 = (void *)v86;
    }
    else {
      uint64_t v87 = _swiftEmptyArrayStorage;
    }
    uint64_t v88 = v87[2];
    uint64_t result = swift_bridgeObjectRelease();
    if (!v88)
    {
      swift_retain();
      sub_10044E120();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1005CB280()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)(v0 + 40) + 16);
  BOOL v4 = __OFSUB__(v1, v3);
  uint64_t v5 = v1 - v3;
  if (!v4) {
    return v5 & ~(v5 >> 63);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005CB2D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1005CB314(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_10090AFB0);
  uint64_t v4 = sub_100096058(&qword_10091F0A8);
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  v16[1] = v4;
  uint64_t v5 = type metadata accessor for Result();
  uint64_t v6 = sub_1000967F4(&qword_10091F0C0, (uint64_t *)&unk_10090AFB0);
  uint64_t v8 = (void *)sub_1005C7D50((void (*)(char *, char *))sub_1005D67FC, v1, v3, v5, (uint64_t)&type metadata for Never, v6, (uint64_t)&protocol witness table for Never, v7);
  uint64_t v9 = sub_1005D1274(v8);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v13 = sub_1005C7D50((void (*)(char *, char *))sub_1005D682C, v1, v10, v5, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v12);
    uint64_t v14 = swift_bridgeObjectRelease();
    v16[0] = v16;
    uint64_t v17 = v13;
    __chkstk_darwin(v14);
    swift_getWitnessTable();
    uint64_t v9 = Sequence.compactMap<A>(_:)();
    uint64_t v17 = v13;
    __chkstk_darwin(v9);
    Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
  }
  return v9;
}

void sub_1005CB600(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v94 = a2;
  uint64_t v92 = (char *)a1;
  uint64_t v93 = type metadata accessor for UUID();
  uint64_t v6 = *(void **)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_t v90 = (os_log_t)((char *)&v85 - v9);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v85 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v85 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v85 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v85 - v20;
  __chkstk_darwin(v22);
  id v24 = (char *)&v85 - v23;
  __chkstk_darwin(v25);
  id v27 = (char *)&v85 - v26;
  __n128 v29 = __chkstk_darwin(v28);
  uint64_t v31 = (uint64_t *)((char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v32 + 16))(v31, v4, a3, v29);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_100094134(&qword_10091F0A8);
      unint64_t v35 = (char *)v31 + *(int *)(v34 + 64);
      long long v36 = (void (*)(char *, char *, uint64_t))v6[4];
      uint64_t v37 = v93;
      v36(v27, (char *)v31 + *(int *)(v34 + 48), v93);
      v36(v24, v35, v37);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E2DC(v38, (uint64_t)qword_10091E5B0);
      os_log_type_t v39 = (void (*)(char *, char *, uint64_t))v6[2];
      v39(v21, v27, v37);
      v39(v18, v24, v37);
      unint64_t v40 = v94;
      swift_bridgeObjectRetain_n();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      int v43 = v42;
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v91 = (char *)swift_slowAlloc();
        uint64_t v96 = v91;
        *(_DWORD *)uint64_t v44 = 136446722;
        os_log_t v90 = v41;
        swift_bridgeObjectRetain();
        uint64_t v95 = sub_1000C51B8((uint64_t)v92, v40, (uint64_t *)&v96);
        uint64_t v92 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v44 + 12) = 2082;
        sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v94) = v43;
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v95 = sub_1000C51B8(v45, v46, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = (void (*)(char *, uint64_t))v6[1];
        v47(v21, v37);
        *(_WORD *)(v44 + 22) = 2082;
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v95 = sub_1000C51B8(v48, v49, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v47(v18, v37);
        os_log_t v50 = v90;
        _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v94, "[%{public}s] Attachment was not migrated {accountID: %{public}s, attachmentID: %{public}s}", (uint8_t *)v44, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v47(v24, v37);
        v47(v92, v37);
      }
      else
      {

        uint64_t v83 = (void (*)(char *, uint64_t))v6[1];
        v83(v18, v37);
        v83(v21, v37);
        swift_bridgeObjectRelease_n();
        v83(v24, v37);
        v83(v27, v37);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v59 = (char *)v31 + *(int *)(v58 + 48);
      os_log_type_t v60 = (char *)v31 + *(int *)(v58 + 64);
      uint64_t v61 = (void (*)(char *, char *, uint64_t))v6[4];
      unint64_t v62 = v15;
      uint64_t v63 = v15;
      uint64_t v64 = v93;
      v61(v63, v59, v93);
      unint64_t v65 = v12;
      v61(v12, v60, v64);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      sub_10008E2DC(v66, (uint64_t)qword_10091E5B0);
      unint64_t v67 = (void (*)(os_log_t, char *, uint64_t))v6[2];
      os_log_t v68 = v90;
      v67(v90, v62, v64);
      uint64_t v69 = v91;
      v67((os_log_t)v91, v65, v64);
      unint64_t v70 = v94;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      int v73 = v72;
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v74 = swift_slowAlloc();
        uint64_t v89 = v62;
        uint64_t v75 = v74;
        uint64_t v87 = (void *)swift_slowAlloc();
        uint64_t v88 = swift_slowAlloc();
        uint64_t v96 = (char *)v88;
        *(_DWORD *)uint64_t v75 = 136446978;
        os_log_t v86 = v71;
        swift_bridgeObjectRetain();
        uint64_t v95 = sub_1000C51B8((uint64_t)v92, v70, (uint64_t *)&v96);
        LODWORD(v92) = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v75 + 12) = 2082;
        sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        unint64_t v94 = (unint64_t)v65;
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v95 = sub_1000C51B8(v76, v77, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Swift::Int v78 = (void (*)(os_log_t, uint64_t))v6[1];
        v78(v68, v64);
        *(_WORD *)(v75 + 22) = 2082;
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v95 = sub_1000C51B8(v79, v80, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v78(v69, v64);
        *(_WORD *)(v75 + 32) = 2112;
        swift_errorRetain();
        uint64_t v81 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v95 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v87 = v81;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v82 = v86;
        _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v92, "[%{public}s] Purging attachment failed {accountID: %{public}s, attachmentID: %{public}s, error: %@}", (uint8_t *)v75, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        v78((os_log_t)v94, v64);
        v78(v89, v64);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        uint64_t v84 = (void (*)(char *, uint64_t))v6[1];
        v84((char *)v69, v64);
        v84((char *)v68, v64);
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        v84(v65, v64);
        v84(v62, v64);
      }
    }
  }
  else
  {
    uint64_t v52 = *v31;
    unint64_t v51 = v31[1];
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_10008E2DC(v53, (uint64_t)qword_10091E5B0);
    unint64_t v54 = v94;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v96 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_1000C51B8((uint64_t)v92, v54, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_1000C51B8(v52, v51, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%{public}s] Invalid cache key {cacheKey: %{public}s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1005CC200(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = sub_100094134(&qword_10091F0A8);
      uint64_t v8 = &v5[*(int *)(v7 + 48)];
      uint64_t v9 = &v5[*(int *)(v7 + 64)];
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(v8, v10);
      return 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v14 = &v5[*(int *)(v13 + 48)];
      uint64_t v15 = &v5[*(int *)(v13 + 64)];
      swift_errorRelease();
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v15, v16);
      v17(v14, v16);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
    return 1;
  }
}

uint64_t sub_1005CC3F8(uint64_t a1)
{
  __n128 v1 = __chkstk_darwin(a1);
  __n128 v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v4 + 16))(v3, v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return *(void *)v3;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *(void *)v3;
    uint64_t v7 = sub_100094134(&qword_10091F0A8);
    uint64_t v8 = &v3[*(int *)(v7 + 48)];
    uint64_t v9 = &v3[*(int *)(v7 + 64)];
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v9, v10);
    v11(v8, v10);
  }
  else
  {
    uint64_t v6 = *(void *)v3;
    uint64_t v12 = sub_100094134((uint64_t *)&unk_10091F0B0);
    uint64_t v13 = &v3[*(int *)(v12 + 48)];
    uint64_t v14 = &v3[*(int *)(v12 + 64)];
    swift_errorRelease();
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
    v16(v14, v15);
    v16(v13, v15);
  }
  return v6;
}

uint64_t sub_1005CC5C8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v8 = v7;
  id v93 = a6;
  uint64_t v14 = *(void *)(*v6 + 80);
  uint64_t v15 = *(void *)(*v6 + 88);
  uint64_t v90 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  uint64_t v87 = *(void (***)(uint64_t, uint64_t))(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (void *)((char *)v81 - v16);
  v104[0] = a1;
  v104[1] = a2;
  uint64_t v17 = v6;
  v104[2] = a3;
  v104[3] = a4;
  uint64_t v102 = v6;
  uint64_t v103 = a5;
  sub_100094134(&qword_10091F088);
  uint64_t v18 = type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment();
  sub_1000967F4((unint64_t *)&unk_10091F090, &qword_10091F088);
  v104[0] = (id)Sequence.compactMap<A>(_:)();
  uint64_t v100 = v6;
  unint64_t v101 = a5;
  uint64_t v91 = a5;
  uint64_t v19 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v20 = (void *)Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  uint64_t v92 = v20;
  v104[0] = v20;
  uint64_t v98 = v14;
  uint64_t v99 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = sub_1005C7D50((void (*)(char *, char *))sub_1005D67A8, (uint64_t)v97, v19, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v22);
  swift_beginAccess();
  uint64_t v24 = v17[8];
  uint64_t v25 = v17[9];
  sub_1000C0DE0(v17 + 5, v24);
  uint64_t v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
  swift_endAccess();
  if (!v26) {
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  v104[0] = v26;
  swift_bridgeObjectRetain();
  sub_100201B10(v23);
  id v27 = v104[0];
  swift_beginAccess();
  uint64_t v28 = v17[8];
  uint64_t v29 = v17[9];
  unint64_t v94 = v17;
  sub_100096204((uint64_t)(v17 + 5), v28);
  (*(void (**)(id, uint64_t, uint64_t))(v29 + 40))(v27, v28, v29);
  swift_endAccess();
  v104[0] = 0;
  if ([v93 save:v104])
  {
    id v30 = v104[0];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v31 = v94[8];
    uint64_t v32 = v94[9];
    v81[0] = v17 + 5;
    sub_1000C0DE0(v17 + 5, v31);
    uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
    swift_endAccess();
    if (!v33) {
      uint64_t v33 = _swiftEmptyArrayStorage;
    }
    uint64_t v34 = sub_10012674C((uint64_t)v33);
    swift_bridgeObjectRelease();
    uint64_t v96 = v34;
    if (Array.endIndex.getter())
    {
      uint64_t v36 = v18;
      ++v87;
      uint64_t v83 = &v96;
      uint64_t v37 = 4;
      *(void *)&long long v35 = 136447234;
      long long v82 = v35;
      v81[1] = (char *)&type metadata for Any + 8;
      uint64_t v88 = v36;
      do
      {
        uint64_t v52 = v37 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v54 = swift_retain();
          id v55 = (id)(v37 - 3);
          if (__OFADD__(v52, 1)) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v54 = _ArrayBuffer._getElementSlowPath(_:)();
          id v55 = (id)(v37 - 3);
          if (__OFADD__(v52, 1)) {
LABEL_24:
          }
            __break(1u);
        }
        uint64_t v56 = v54;
        sub_1005CDF20();
        if (v8)
        {
          id v93 = (id)v94[17];
          uint64_t v38 = (int *)sub_100094134(qword_10091EFD0);
          uint64_t v39 = (uint64_t)v89;
          uint64_t v40 = v56;
          uint64_t v41 = (char *)v89 + v38[12];
          os_log_type_t v42 = (char *)v89 + v38[16];
          uint64_t v43 = v37;
          uint64_t v44 = v38[20];
          *uint64_t v89 = v8;
          uint64_t v45 = v40 + qword_10091E740;
          uint64_t v46 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v41, v45, v46);
          uint64_t v47 = v40 + qword_10091E728;
          uint64_t v48 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v42, v47, v48);
          unint64_t v49 = v91;
          *(void *)(v39 + v44) = v91;
          uint64_t v37 = v43;
          uint64_t v50 = v90;
          swift_storeEnumTagMultiPayload();
          swift_errorRetain();
          id v51 = v49;
          sub_1005CDC9C(v39);
          swift_release();
          swift_errorRelease();
          (*v87)(v39, v50);
          uint64_t v8 = 0;
        }
        else
        {
          id v93 = v55;
          uint64_t v57 = sub_1005CDDD8();
          uint64_t v58 = v56;
          sub_10065ACF8(v57, v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_1009079F0 != -1) {
            swift_once();
          }
          uint64_t v60 = type metadata accessor for Logger();
          sub_10008E2DC(v60, (uint64_t)qword_10091E5B0);
          swift_retain_n();
          swift_retain();
          uint64_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.default.getter();
          int v63 = v62;
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v64 = swift_slowAlloc();
            uint64_t v85 = (void *)swift_slowAlloc();
            v104[0] = v85;
            *(_DWORD *)uint64_t v64 = v82;
            int v84 = v63;
            uint64_t v66 = v94[18];
            unint64_t v65 = v94[19];
            swift_bridgeObjectRetain();
            uint64_t v95 = sub_1000C51B8(v66, v65, (uint64_t *)v104);
            uint64_t v86 = v37;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 12) = 2080;
            Swift::String v67 = URL.path(percentEncoded:)(1);
            uint64_t v95 = sub_1000C51B8(v67._countAndFlagsBits, (unint64_t)v67._object, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 22) = 2080;
            Swift::String v68 = URL.path(percentEncoded:)(1);
            uint64_t v95 = sub_1000C51B8(v68._countAndFlagsBits, (unint64_t)v68._object, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 32) = 2082;
            uint64_t v70 = *(void *)(v56 + qword_10091E730);
            unint64_t v69 = *(void *)(v56 + qword_10091E730 + 8);
            swift_bridgeObjectRetain();
            uint64_t v95 = sub_1000C51B8(v70, v69, (uint64_t *)v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 42) = 2082;
            uint64_t v71 = UUID.uuidString.getter();
            uint64_t v95 = sub_1000C51B8(v71, v72, (uint64_t *)v104);
            uint64_t v37 = v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v84, "[%{public}s] Migrated from {%s} to {%s} with sha512sum '%{public}s' {attachmentID: %{public}s}", (uint8_t *)v64, 0x34u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
            swift_release();
          }
          sub_1005CE0D4(*(void *)(v58 + qword_10091E738), (*(unsigned char *)(v58 + qword_10091E750) & 1) == 0);
          swift_release();
          id v55 = v93;
        }
        ++v37;
      }
      while (v55 != (id)Array.endIndex.getter());
    }
    swift_bridgeObjectRelease();
    unint64_t v77 = sub_100209D8C(v96);
    swift_bridgeObjectRelease();
    uint64_t v78 = v81[0];
    swift_beginAccess();
    uint64_t v79 = v94[8];
    uint64_t v80 = v94[9];
    sub_100096204(v78, v79);
    (*(void (**)(void *, uint64_t, uint64_t))(v80 + 40))(v77, v79, v80);
    return swift_endAccess();
  }
  else
  {
    id v73 = v104[0];
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_beginAccess();
    uint64_t v74 = v94[8];
    uint64_t v75 = v94[9];
    sub_100096204((uint64_t)(v17 + 5), v74);
    (*(void (**)(void *, uint64_t, uint64_t))(v75 + 40))(v26, v74, v75);
    swift_endAccess();
    return swift_willThrow();
  }
}

void *sub_1005CD0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v103 = (void *)a3;
  uint64_t v7 = *(void *)(*v4 + 80);
  uint64_t v95 = *(void *)(*v4 + 88);
  uint64_t v96 = v7;
  uint64_t v8 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v79 - v10);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v97 = *(void *)(v12 - 8);
  uint64_t v98 = v12;
  __chkstk_darwin(v12);
  unint64_t v94 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v93 = (char *)&v79 - v15;
  __chkstk_darwin(v16);
  uint64_t v100 = (char *)&v79 - v17;
  uint64_t v18 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v99 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v101 = (char *)&v79 - v25;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  uint64_t v102 = v22;
  id v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v28 = v21;
  if (v27(v20, 1, v21) == 1)
  {
    sub_1000966BC((uint64_t)v20, (uint64_t *)&unk_100909E50);
    *uint64_t v11 = a1;
    v11[1] = a2;
    uint64_t v29 = v103;
    void v11[2] = (uint64_t)v103;
    swift_storeEnumTagMultiPayload();
    swift_unknownObjectRetain();
    id v30 = v29;
    sub_1005CDC9C((uint64_t)v11);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  uint64_t v90 = v9;
  uint64_t v91 = v8;
  uint64_t v31 = v103;
  uint64_t v32 = v102 + 32;
  uint64_t v33 = v101;
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
  v89(v101, v20, v28);
  uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  uint64_t v88 = a2;
  if (!v34)
  {
    uint64_t v65 = *(int *)(sub_100094134(&qword_10091EFB8) + 48);
    uint64_t v66 = v102;
    (*(void (**)(uint64_t *, char *, uint64_t))(v102 + 16))(v11, v33, v28);
    *(uint64_t *)((char *)v11 + v65) = (uint64_t)v31;
    uint64_t v67 = v91;
    swift_storeEnumTagMultiPayload();
    id v68 = v31;
    sub_1005CDC9C((uint64_t)v11);
    (*(void (**)(uint64_t *, uint64_t))(v90 + 8))(v11, v67);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v33, v28);
    return 0;
  }
  uint64_t v35 = v34;
  uint64_t v82 = v32;
  uint64_t v83 = a1;
  uint64_t v36 = (void *)v4[4];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v38 = v31;
  id v39 = [v31 uuid];
  uint64_t v40 = (uint64_t)v99;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class v41 = UUID._bridgeToObjectiveC()().super.isa;
  os_log_type_t v42 = *(void (**)(char *, uint64_t))(v102 + 8);
  uint64_t v84 = v28;
  uint64_t v86 = v42;
  uint64_t v87 = v102 + 8;
  v42((char *)v40, v28);
  uint64_t v85 = v35;
  NSString v43 = String._bridgeToObjectiveC()();
  id v81 = v36;
  id v44 = [v36 URLForAttachmentFile:isa accountID:v41 fileName:v43 sha512Sum:0];

  uint64_t v45 = v100;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = static REMFileDigester.sha512SumWithFileSize(url:)();
  if (!v47)
  {
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_100094134(&qword_10091EFC0);
    uint64_t v71 = (char *)v11 + *(int *)(v70 + 48);
    uint64_t v72 = *(int *)(v70 + 64);
    uint64_t v74 = v97;
    uint64_t v73 = v98;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v11, v45, v98);
    uint64_t v75 = v101;
    uint64_t v76 = v84;
    (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v71, v101, v84);
    *(uint64_t *)((char *)v11 + v72) = (uint64_t)v38;
    uint64_t v77 = v91;
    swift_storeEnumTagMultiPayload();
    id v78 = v38;
    sub_1005CDC9C((uint64_t)v11);
    (*(void (**)(uint64_t *, uint64_t))(v90 + 8))(v11, v77);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v73);
    v86(v75, v76);
    return 0;
  }
  uint64_t v49 = v46;
  uint64_t v50 = v38;
  id v51 = v101;
  uint64_t v102 = v48;
  uint64_t v80 = v47;
  Class v52 = UUID._bridgeToObjectiveC()().super.isa;
  id v53 = [v50 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class v54 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v55 = v84;
  v86((char *)v40, v84);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v57 = String._bridgeToObjectiveC()();
  id v58 = [v81 URLForAttachmentFile:v52 accountID:v54 fileName:v56 sha512Sum:v57];
  uint64_t v92 = v49;
  id v59 = v58;

  uint64_t v60 = (uint64_t)v93;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment();
  v89((char *)v40, v51, v55);
  uint64_t v61 = (uint64_t)v94;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v94, v45, v98);
  swift_allocObject();
  os_log_type_t v62 = v103;
  int v63 = sub_1005CFD8C(v83, v88, (uint64_t)v103, v40, v92, v80, v102, v61, v60);
  swift_unknownObjectRetain();
  id v64 = v62;
  return v63;
}

uint64_t sub_1005CD89C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v22 - v11);
  uint64_t v13 = *a1;
  sub_1005CDA84();
  if (v4)
  {
    v22[1] = *(void *)(a2 + 136);
    uint64_t v14 = sub_100094134(&qword_10091EFC8);
    uint64_t v15 = (char *)v12 + *(int *)(v14 + 48);
    uint64_t v16 = a4;
    uint64_t v17 = *(int *)(v14 + 64);
    *uint64_t v12 = v4;
    uint64_t v18 = v13 + qword_10091E728;
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v15, v18, v19);
    *(void *)((char *)v12 + v17) = a3;
    a4 = v16;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    id v20 = a3;
    sub_1005CDC9C((uint64_t)v12);
    swift_errorRelease();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = 0;
  }
  else
  {
    sub_1005CDC18();
    uint64_t result = swift_retain();
  }
  *a4 = v13;
  return result;
}

void sub_1005CDA84()
{
  uint64_t v1 = v0;
  uint64_t v2 = self;
  id v3 = [v2 defaultManager];
  URL.path(percentEncoded:)(0);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v5 = [v3 fileExistsAtPath:v4];

  if ((v5 & 1) == 0)
  {
    id v6 = [v2 defaultManager];
    URL._bridgeToObjectiveC()((NSURL *)qword_10091E740);
    uint64_t v8 = v7;
    URL._bridgeToObjectiveC()(v9);
    uint64_t v11 = v10;
    id v16 = 0;
    unsigned int v12 = [v6 copyItemAtURL:v8 toURL:v10 error:&v16];

    id v13 = v16;
    if (v12)
    {
      *(unsigned char *)(v1 + qword_10091E750) = 1;
      id v14 = v13;
    }
    else
    {
      id v15 = v16;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_1005CDC18()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = v0 + qword_10091E730;
  uint64_t v4 = *(void *)(v0 + qword_10091E730);
  uint64_t v5 = *(void *)(v3 + 8);
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32);
  swift_bridgeObjectRetain();
  return v6(v4, v5, ObjectType, v1);
}

uint64_t sub_1005CDC9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1005CE60C(*(void *)(v2 + 24), *(void (**)(void *, uint64_t))(v2 + 32), v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  return swift_endAccess();
}

uint64_t sub_1005CDDD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  id v7 = [*(id *)(v1 + 32) uuid:v4];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = UUID.uuidString.getter();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease();
  uint64_t v14 = v8;
  unint64_t v15 = v10;
  v11._countAndFlagsBits = 124;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1005CDF20()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()();
  id v4 = [self defaultManager];
  URL._bridgeToObjectiveC()(v5);
  id v7 = v6;
  id v13 = 0;
  unsigned __int8 v8 = [v4 removeItemAtURL:v6 error:&v13];

  if (v8)
  {
    unint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
    id v10 = v13;
    return v9(v3, v0);
  }
  else
  {
    id v12 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_1005CE0D4(uint64_t a1, char a2)
{
  uint64_t v5 = (void *)(v2 + 40);
  swift_beginAccess();
  uint64_t v6 = *(void **)(v2 + 40);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 40) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_10030BD6C(0, v6[2] + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = sub_10030BD6C((void *)(v8 > 1), v9 + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  void v6[2] = v9 + 1;
  id v10 = &v6[2 * v9];
  v10[4] = a1;
  *((unsigned char *)v10 + 40) = a2 & 1;
  return swift_endAccess();
}

void *sub_1005CE1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1005CFD8C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1005CE254()
{
  uint64_t v2 = v0;
  uint64_t v3 = (void *)sub_1003AD42C(3uLL, 0, 7);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v5 = (void *)sub_1003BC0CC(inited, 0, 0, (uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v6 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t v19 = v6;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setSortDescriptors:isa];

  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091E5B0);
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      uint64_t v18 = v3;
      uint64_t v14 = *(void *)(v2 + 144);
      unint64_t v13 = *(void *)(v2 + 152);
      swift_bridgeObjectRetain();
      sub_1000C51B8(v14, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v15 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v15, v16, &v19);
      uint64_t v3 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] failed to fetch accounts from database {error: %{public}s}", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }

  return v8;
}

void sub_1005CE60C(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v177 = a2;
  uint64_t v173 = a1;
  uint64_t v178 = type metadata accessor for UUID();
  uint64_t v176 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  os_log_t v171 = (os_log_t)((char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v172 = ((char *)&v164 - v8);
  __chkstk_darwin(v9);
  uint64_t v169 = (uint64_t *)((char *)&v164 - v10);
  __chkstk_darwin(v11);
  uint64_t v170 = (char *)&v164 - v12;
  __chkstk_darwin(v13);
  uint64_t v168 = (char *)&v164 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = ((char *)&v164 - v16);
  __chkstk_darwin(v18);
  unint64_t v167 = (uint64_t *)((char *)&v164 - v19);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v164 - v21;
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v174 = *(void *)(v23 - 8);
  uint64_t v175 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v164 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v164 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v164 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v164 - v33;
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v164 - v36;
  __n128 v39 = __chkstk_darwin(v38);
  Class v41 = (char *)&v164 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16))(v41, v4, a3, v39);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      id v59 = *(void **)&v41[*(int *)(sub_100094134(&qword_10091EFB8) + 48)];
      uint64_t v60 = v176;
      uint64_t v61 = v22;
      os_log_type_t v62 = v22;
      uint64_t v63 = v178;
      (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v62, v41, v178);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      sub_10008E2DC(v64, (uint64_t)qword_10091E5B0);
      uint64_t v65 = v167;
      (*(void (**)(void *, char *, uint64_t))(v60 + 16))(v167, v61, v63);
      unint64_t v66 = (unint64_t)v177;
      swift_bridgeObjectRetain_n();
      id v67 = v59;
      id v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v172 = swift_slowAlloc();
        uint64_t v174 = swift_slowAlloc();
        v180[0] = v174;
        *(_DWORD *)uint64_t v70 = 136446722;
        swift_bridgeObjectRetain();
        uint64_t v179 = sub_1000C51B8(v173, v66, v180);
        uint64_t v175 = (uint64_t)v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 12) = 2082;
        sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v179 = sub_1000C51B8(v71, v72, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v177 = *(void (**)(void *, uint64_t))(v60 + 8);
        v177(v65, v63);
        *(_WORD *)(v70 + 22) = 2114;
        uint64_t v179 = (uint64_t)v67;
        id v73 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v172->Class isa = (Class)v67;

        _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%{public}s] Attachment had null fileName {attachmentID: %{public}s, accountID: %{public}@}", (uint8_t *)v70, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        p_Class isa = (void *)v175;
        uint64_t v75 = v178;
        goto LABEL_14;
      }

      uint64_t v158 = *(void (**)(void *, uint64_t))(v60 + 8);
      v158(v65, v63);

      swift_bridgeObjectRelease_n();
      v158(v61, v63);
      break;
    case 2u:
      uint64_t v76 = sub_100094134(&qword_10091EFC0);
      uint64_t v77 = &v41[*(int *)(v76 + 48)];
      id v78 = *(void **)&v41[*(int *)(v76 + 64)];
      uint64_t v79 = v174;
      uint64_t v80 = v175;
      (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v34, v41, v175);
      uint64_t v81 = v176;
      uint64_t v82 = v17;
      uint64_t v83 = v17;
      uint64_t v84 = v178;
      (*(void (**)(NSObject *, char *, uint64_t))(v176 + 32))(v83, v77, v178);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v85 = type metadata accessor for Logger();
      sub_10008E2DC(v85, (uint64_t)qword_10091E5B0);
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v31, v34, v80);
      uint64_t v86 = v168;
      (*(void (**)(char *, NSObject *, uint64_t))(v81 + 16))(v168, v82, v84);
      uint64_t v172 = v34;
      unint64_t v87 = (unint64_t)v177;
      swift_bridgeObjectRetain_n();
      id v88 = v78;
      uint64_t v89 = Logger.logObject.getter();
      os_log_t v171 = v82;
      uint64_t v90 = v89;
      os_log_type_t v91 = static os_log_type_t.error.getter();
      int v92 = v91;
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v93 = swift_slowAlloc();
        uint64_t v169 = (void *)swift_slowAlloc();
        uint64_t v170 = (char *)swift_slowAlloc();
        v180[0] = (uint64_t)v170;
        *(_DWORD *)uint64_t v93 = 136446978;
        LODWORD(v167) = v92;
        swift_bridgeObjectRetain();
        uint64_t v179 = sub_1000C51B8(v173, v87, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v93 + 12) = 2080;
        Swift::String v94 = URL.path(percentEncoded:)(1);
        uint64_t v179 = sub_1000C51B8(v94._countAndFlagsBits, (unint64_t)v94._object, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v177 = *(void (**)(void *, uint64_t))(v79 + 8);
        v177(v31, v80);
        *(_WORD *)(v93 + 22) = 2082;
        uint64_t v95 = UUID.uuidString.getter();
        uint64_t v179 = sub_1000C51B8(v95, v96, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v176 = *(void *)(v176 + 8);
        uint64_t v97 = v178;
        ((void (*)(char *, uint64_t))v176)(v86, v178);
        *(_WORD *)(v93 + 32) = 2114;
        uint64_t v179 = (uint64_t)v88;
        id v98 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v169 = v88;

        _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v167, "[%{public}s] Failed to migrate from {%s} because sha512Sum failed {attachmentID: %{public}s, accountID: %{public}@}", (uint8_t *)v93, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(os_log_t, uint64_t))v176)(v171, v97);
        p_Class isa = &v172->isa;
        uint64_t v75 = v175;
LABEL_14:
        v177(p_isa, v75);
      }
      else
      {

        uint64_t v159 = *(void (**)(char *, uint64_t))(v81 + 8);
        v159(v86, v84);
        uint64_t v160 = *(void (**)(char *, uint64_t))(v79 + 8);
        v160(v31, v80);

        swift_bridgeObjectRelease_n();
        v159((char *)v171, v84);
        v160((char *)v172, v80);
      }
      break;
    case 3u:
      uint64_t v99 = sub_100094134(&qword_10091EFC8);
      uint64_t v100 = &v41[*(int *)(v99 + 48)];
      unint64_t v101 = *(void **)&v41[*(int *)(v99 + 64)];
      uint64_t v102 = v176;
      uint64_t v103 = v170;
      uint64_t v104 = v178;
      (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v170, v100, v178);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v105 = type metadata accessor for Logger();
      sub_10008E2DC(v105, (uint64_t)qword_10091E5B0);
      unint64_t v106 = (char *)v169;
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))((char *)v169, v103, v104);
      uint64_t v107 = (void (*)(void, void))v177;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v108 = v101;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v109 = v108;
      Swift::Int v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.error.getter();
      int v112 = v111;
      if (os_log_type_enabled(v110, v111))
      {
        uint64_t v113 = swift_slowAlloc();
        LODWORD(v174) = v112;
        unint64_t v114 = (unint64_t)v107;
        uint64_t v115 = v113;
        uint64_t v172 = swift_slowAlloc();
        uint64_t v175 = swift_slowAlloc();
        v180[0] = v175;
        *(_DWORD *)uint64_t v115 = 136446978;
        os_log_t v171 = v110;
        swift_bridgeObjectRetain();
        uint64_t v179 = sub_1000C51B8(v173, v114, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v115 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v116 = Error.rem_errorDescription.getter();
        uint64_t v179 = sub_1000C51B8(v116, v117, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v115 + 22) = 2082;
        sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v179 = sub_1000C51B8(v118, v119, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v120 = *(void (**)(char *, uint64_t))(v102 + 8);
        int64_t v121 = v106;
        uint64_t v122 = v104;
        v120(v121, v104);
        uint64_t v123 = v120;
        *(_WORD *)(v115 + 32) = 2114;
        uint64_t v179 = (uint64_t)v109;
        id v124 = v109;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v172->Class isa = (Class)v109;

        os_log_t v125 = v171;
        _os_log_impl((void *)&_mh_execute_header, v171, (os_log_type_t)v174, "[%{public}s] Could not copy file for deduplication. Skipping {error: %s, attachmentID: %{public}s, accountID: %{public}@}", (uint8_t *)v115, 0x2Au);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        v123(v170, v122);
      }
      else
      {

        uint64_t v161 = *(void (**)(void *, uint64_t))(v102 + 8);
        v161(v106, v104);
        swift_errorRelease();
        swift_errorRelease();

        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        v161(v103, v104);
      }
      break;
    case 4u:
      uint64_t v169 = *(void **)v41;
      uint64_t v126 = (int *)sub_100094134(qword_10091EFD0);
      uint64_t v127 = &v41[v126[12]];
      uint64_t v128 = &v41[v126[16]];
      uint64_t v129 = *(void **)&v41[v126[20]];
      uint64_t v130 = v174;
      uint64_t v131 = v175;
      BOOL v132 = *(void (**)(char *, char *, uint64_t))(v174 + 32);
      uint64_t v170 = v28;
      v132(v28, v127, v175);
      uint64_t v133 = v176;
      uint64_t v134 = v172;
      uint64_t v135 = v178;
      (*(void (**)(NSObject *, char *, uint64_t))(v176 + 32))(v172, v128, v178);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v136 = type metadata accessor for Logger();
      sub_10008E2DC(v136, (uint64_t)qword_10091E5B0);
      (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v25, v170, v131);
      os_log_t v137 = v171;
      (*(void (**)(os_log_t, NSObject *, uint64_t))(v133 + 16))(v171, v134, v135);
      unint64_t v138 = (unint64_t)v177;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v139 = v129;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v140 = v139;
      uint64_t v141 = Logger.logObject.getter();
      os_log_type_t v142 = static os_log_type_t.error.getter();
      int v143 = v142;
      if (os_log_type_enabled(v141, v142))
      {
        uint64_t v144 = swift_slowAlloc();
        id v165 = v140;
        uint64_t v145 = v144;
        unint64_t v167 = (void *)swift_slowAlloc();
        uint64_t v168 = (char *)swift_slowAlloc();
        v180[0] = (uint64_t)v168;
        *(_DWORD *)uint64_t v145 = 136447234;
        int v166 = v143;
        swift_bridgeObjectRetain();
        uint64_t v179 = sub_1000C51B8(v173, v138, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v145 + 12) = 2080;
        sub_1005D6984((unint64_t *)&qword_100916028, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v146 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v179 = sub_1000C51B8(v146, v147, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v148 = *(void (**)(void *, uint64_t))(v130 + 8);
        uint64_t v174 = v130 + 8;
        uint64_t v177 = v148;
        v148(v25, v131);
        *(_WORD *)(v145 + 22) = 2080;
        swift_getErrorValue();
        uint64_t v149 = Error.rem_errorDescription.getter();
        uint64_t v179 = sub_1000C51B8(v149, v150, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v145 + 32) = 2082;
        sub_1005D6984((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
        os_log_t v151 = v171;
        uint64_t v152 = v178;
        uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v179 = sub_1000C51B8(v153, v154, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v155 = *(void (**)(os_log_t, uint64_t))(v176 + 8);
        v155(v151, v152);
        *(_WORD *)(v145 + 42) = 2114;
        id v156 = v165;
        uint64_t v179 = (uint64_t)v165;
        id v157 = v165;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v167 = v156;

        _os_log_impl((void *)&_mh_execute_header, v141, (os_log_type_t)v166, "[%{public}s] Could not delete file <%s> after deduplication. Leaving in place {error: %s, attachmentID: %{public}s, accountID: %{public}@}", (uint8_t *)v145, 0x34u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        v155(v172, v178);
        v177(v170, v175);
      }
      else
      {

        uint64_t v162 = *(void (**)(os_log_t, uint64_t))(v133 + 8);
        v162(v137, v135);
        swift_errorRelease();
        swift_errorRelease();
        uint64_t v163 = *(void (**)(char *, uint64_t))(v130 + 8);
        v163(v25, v131);

        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        v162(v172, v135);
        v163(v170, v131);
      }
      break;
    default:
      uint64_t v43 = *((void *)v41 + 1);
      id v44 = (void *)*((void *)v41 + 2);
      if (qword_1009079F0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_10008E2DC(v45, (uint64_t)qword_10091E5B0);
      unint64_t v46 = (unint64_t)v177;
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain_n();
      id v47 = v44;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v176 = swift_slowAlloc();
        uint64_t v178 = swift_slowAlloc();
        v180[0] = v178;
        *(_DWORD *)uint64_t v50 = 136446722;
        swift_bridgeObjectRetain();
        uint64_t v179 = sub_1000C51B8(v173, v46, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v50 + 12) = 2082;
        uint64_t v177 = (void (*)(void *, uint64_t))(v50 + 14);
        uint64_t ObjectType = swift_getObjectType();
        Class v52 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v43 + 56))(ObjectType, v43);
        id v53 = [v52 URIRepresentation];

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1005D6984((unint64_t *)&qword_100916028, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v54 = v175;
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v57 = v56;
        (*(void (**)(char *, uint64_t))(v174 + 8))(v37, v54);
        uint64_t v179 = sub_1000C51B8(v55, v57, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 22) = 2114;
        uint64_t v179 = (uint64_t)v47;
        id v58 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v176 = v47;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%{public}s] Attachment had null identifier {managedObjectID: %{public}s, accountID: %{public}@}", (uint8_t *)v50, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
      break;
  }
}

void *sub_1005CFD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *((unsigned char *)v9 + qword_10091E750) = 0;
  v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  uint64_t v15 = (char *)v9 + qword_10091E728;
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a4, v16);
  uint64_t v17 = (void *)((char *)v9 + qword_10091E730);
  void *v17 = a5;
  v17[1] = a6;
  *(void *)((char *)v9 + qword_10091E738) = a7;
  uint64_t v18 = (char *)v9 + qword_10091E740;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v18, a8, v19);
  v20((char *)v9 + qword_10091E748, a9, v19);
  return v9;
}

uint64_t sub_1005CFEC0()
{
  swift_unknownObjectRelease();

  uint64_t v1 = v0 + qword_10091E728;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + qword_10091E740;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + qword_10091E748, v4);
  return v0;
}

uint64_t sub_1005CFFBC()
{
  return sub_1005D0DEC(sub_1005CFEC0);
}

uint64_t sub_1005CFFD4(void *a1)
{
  id v68 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v65 - v11;
  static Date.now.getter();
  uint64_t v73 = (uint64_t)v1;
  uint64_t v13 = (uint64_t)v1 + qword_10091E7D8;
  swift_beginAccess();
  sub_1000BF710(v13, (uint64_t)v5, (uint64_t *)&unk_100909A40);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  uint64_t v71 = v6;
  uint64_t v70 = v7;
  os_log_type_t v69 = v12;
  int v67 = v14;
  if (v14 == 1)
  {
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909A40);
    uint64_t v66 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    Date.timeIntervalSince(_:)();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v66 = v16;
  }
  uint64_t v17 = (void *)v73;
  uint64_t v18 = v73 + 40;
  swift_beginAccess();
  uint64_t v19 = v17[5];
  int64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    uint64_t v77 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE694(0, v20, 0);
    uint64_t v21 = v77;
    unint64_t v22 = v77[2];
    uint64_t v23 = (unsigned char *)(v19 + 40);
    do
    {
      if (*v23) {
        uint64_t v24 = *((void *)v23 - 1);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v77 = v21;
      unint64_t v25 = v21[3];
      if (v22 >= v25 >> 1)
      {
        sub_1001DE694(v25 > 1, v22 + 1, 1);
        uint64_t v21 = v77;
      }
      v23 += 16;
      void v21[2] = v22 + 1;
      v21[v22++ + 4] = v24;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)v73;
  }
  uint64_t v74 = v21;
  sub_100094134(&qword_10091F060);
  sub_1000967F4(&qword_10091F068, &qword_10091F060);
  Sequence<>.sum()();
  swift_bridgeObjectRelease();
  unint64_t v72 = v77;
  uint64_t v26 = *(void *)v18;
  int64_t v27 = *(void *)(*(void *)v18 + 16);
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    v65[0] = v18;
    v65[1] = v2;
    uint64_t v77 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001DE694(0, v27, 0);
    uint64_t v28 = v77;
    unint64_t v29 = v77[2];
    uint64_t v30 = 32;
    do
    {
      uint64_t v31 = *(void *)(v26 + v30);
      uint64_t v77 = v28;
      unint64_t v32 = v28[3];
      if (v29 >= v32 >> 1)
      {
        sub_1001DE694(v32 > 1, v29 + 1, 1);
        uint64_t v28 = v77;
      }
      void v28[2] = v29 + 1;
      v28[v29 + 4] = v31;
      v30 += 16;
      ++v29;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)v73;
    uint64_t v18 = v65[0];
  }
  uint64_t v74 = v28;
  Sequence<>.sum()();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)v18;
  uint64_t v34 = *(void *)(*(void *)v18 + 16);
  if (v34)
  {
    uint64_t v35 = 0;
    uint64_t v36 = (unsigned char *)(v33 + 40);
    while (*v36 != 1 || !__OFADD__(v35++, 1))
    {
      v36 += 16;
      if (!--v34) {
        goto LABEL_27;
      }
    }
    __break(1u);
  }
  uint64_t v35 = 0;
LABEL_27:
  sub_100094134(&qword_10091F070);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100778380;
  *(void *)(inited + 32) = 0x6564656563637573;
  *(void *)(inited + 40) = 0xE900000000000064;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0x64656C696166;
  *(void *)(inited + 64) = 0xE600000000000000;
  swift_beginAccess();
  type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError();
  swift_bridgeObjectRetain();
  Array.count.getter();
  swift_bridgeObjectRelease();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 80), "dedupedCount");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(void *)(inited + 104) = 0xD000000000000018;
  *(void *)(inited + 112) = 0x80000001007D9A00;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  strcpy((char *)(inited + 128), "bytesRecovered");
  *(unsigned char *)(inited + 143) = -18;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  unint64_t v39 = sub_1002EEC68(inited);
  uint64_t v74 = (void *)v17[6];
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v40 = 0;
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090ABB0);
    uint64_t v40 = _arrayForceCast<A, B>(_:)();
    swift_bridgeObjectRelease();
  }
  sub_1000C0DE0(v68, v68[3]);
  sub_10042085C(v39);
  swift_bridgeObjectRelease();
  if (v40)
  {
    type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics.CompositeError();
    swift_getWitnessTable();
    swift_allocError();
    *Class v41 = v40;
  }
  int v42 = v67;
  dispatch thunk of AnalyticsType.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  if (v42 == 1)
  {
    unint64_t v43 = 0xE400000000000000;
    uint64_t v44 = 1936539455;
  }
  else
  {
    id v45 = [objc_allocWithZone((Class)NSNumberFormatter) init];
    [v45 setUsesSignificantDigits:1];
    [v45 setMinimumSignificantDigits:3];
    [v45 setMaximumSignificantDigits:4];
    uint64_t v74 = 0;
    unint64_t v75 = 0xE000000000000000;
    Class isa = Double._bridgeToObjectiveC()().super.super.isa;
    id v47 = [v45 stringForObjectValue:isa];

    if (v47)
    {
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;
    }
    else
    {
      uint64_t v50 = (void *)0xE200000000000000;
      uint64_t v48 = 16191;
    }
    v51._countAndFlagsBits = v48;
    v51._object = v50;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 29549;
    v52._object = (void *)0xE200000000000000;
    String.append(_:)(v52);

    uint64_t v44 = (uint64_t)v74;
    unint64_t v43 = v75;
  }
  if (qword_1009079F0 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_10008E2DC(v53, (uint64_t)qword_10091E5B0);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v74 = (void *)v73;
    *(_DWORD *)uint64_t v56 = 136447234;
    id v68 = (void *)v44;
    uint64_t v57 = v17[3];
    unint64_t v58 = v17[4];
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_1000C51B8(v57, v58, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2050;
    uint64_t v59 = *(void *)(v17[5] + 16);
    swift_release();
    uint64_t v76 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v56 + 22) = 2050;
    uint64_t v76 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 32) = 2082;
    id v60 = [self stringFromByteCount:v72 countStyle:0];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v63 = v62;

    uint64_t v76 = sub_1000C51B8(v61, v63, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_1000C51B8((uint64_t)v68, v43, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%{public}s] Successfully migrated %{public}ld attachments, finding %{public}ld duplicates, saving %{public}s. Took %s", (uint8_t *)v56, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v69, v71);
}

uint64_t sub_1005D0BA4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v1, 0);
    uint64_t v2 = 0;
    do
    {
      swift_getErrorValue();
      swift_errorRetain();
      uint64_t v3 = Error.rem_errorDescription.getter();
      uint64_t v5 = v4;
      swift_errorRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001DE058(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1) {
        sub_1001DE058(v6 > 1, v7 + 1, 1);
      }
      ++v2;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v3;
      _OWORD v8[5] = v5;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0x203A73726F727245;
}

uint64_t sub_1005D0D7C()
{
  return sub_1005D0BA4(*v0);
}

uint64_t sub_1005D0D8C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000966BC(v0 + qword_10091E7D8, (uint64_t *)&unk_100909A40);
  return v0;
}

uint64_t sub_1005D0DD4()
{
  return sub_1005D0DEC(sub_1005D0D8C);
}

uint64_t sub_1005D0DEC(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t sub_1005D0E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v36 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v37 = 124;
  unint64_t v38 = 0xE100000000000000;
  sub_1000E4FD8();
  uint64_t v20 = StringProtocol.components<A>(separatedBy:)();
  if (*(void *)(v20 + 16) != 2)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *a3 = a1;
    a3[1] = a2;
    type metadata accessor for RDDeduplicationActivity.CrashCleanError();
    swift_storeEnumTagMultiPayload();
    sub_100096058(&qword_10091F0A8);
    swift_getWitnessTable();
    type metadata accessor for Result();
LABEL_10:
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  unint64_t v32 = v16;
  uint64_t v33 = a1;
  uint64_t v34 = v7;
  uint64_t v35 = a2;
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v21(v12, 1, v13) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = (uint64_t)v12;
LABEL_8:
    sub_1000966BC(v22, (uint64_t *)&unk_100909E50);
    a2 = v35;
    a1 = v33;
    goto LABEL_9;
  }
  uint64_t v31 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t result = v31(v19, v12, v13);
  if (*(void *)(v20 + 16) >= 2uLL)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v24 = v36;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (v21(v24, 1, v13) != 1)
    {
      uint64_t v26 = (void (*)(char *, char *, uint64_t))v31;
      unint64_t v25 = v32;
      v31(v32, v24, v13);
      uint64_t v27 = sub_100094134(&qword_10091F0A8);
      uint64_t v28 = (char *)a3 + *(int *)(v27 + 48);
      unint64_t v29 = (char *)a3 + *(int *)(v27 + 64);
      uint64_t v30 = v35;
      *a3 = v33;
      a3[1] = v30;
      v26(v28, v19, v13);
      v26(v29, v25, v13);
      type metadata accessor for RDDeduplicationActivity.CrashCleanError();
      swift_getWitnessTable();
      type metadata accessor for Result();
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    uint64_t v22 = (uint64_t)v24;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005D1274(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  unint64_t v87 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v90 = (char *)v75 - v8;
  __chkstk_darwin(v9);
  uint64_t v97 = (uint64_t)v75 - v10;
  id v88 = (void *)type metadata accessor for UUID();
  uint64_t v81 = *(v88 - 1);
  __chkstk_darwin(v88);
  uint64_t v86 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v89 = (char *)v75 - v13;
  __chkstk_darwin(v14);
  uint64_t v80 = (uint64_t)v75 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v75 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v75 - v20;
  id v78 = a1;
  unint64_t v101 = a1;
  uint64_t v22 = *(void *)(v4 + 80);
  uint64_t v98 = v22;
  uint64_t v23 = *(void *)(v4 + 88);
  uint64_t v99 = v23;
  sub_100096058(&qword_10091F0A8);
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for Result();
  uint64_t v25 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v26 = v96;
  uint64_t v27 = Sequence.compactMap<A>(_:)();
  unint64_t v101 = _swiftEmptyDictionarySingleton;
  uint64_t v28 = sub_1005D2494();
  if (v26)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v27;
  }
  os_log_type_t v91 = v21;
  uint64_t v94 = v25;
  uint64_t v84 = v18;
  v75[1] = 0;
  uint64_t v95 = v24;
  uint64_t v96 = v23;
  uint64_t v76 = v22;
  uint64_t v77 = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v77 + 16);
  if (!v29)
  {
    uint64_t v85 = 0;
    uint64_t v35 = v95;
    uint64_t v34 = v96;
    uint64_t v36 = v94;
LABEL_28:
    uint64_t v71 = swift_bridgeObjectRelease();
    uint64_t v100 = v78;
    __chkstk_darwin(v71);
    v75[-4] = v76;
    v75[-3] = v34;
    v75[-2] = &v101;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v27 = sub_1005C7D50((void (*)(char *, char *))sub_1005D68E8, (uint64_t)&v75[-6], v36, v35, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v73);
    swift_bridgeObjectRelease();
    sub_100096314((uint64_t)v85);
    return v27;
  }
  uint64_t v85 = 0;
  int v92 = (unsigned int (**)(uint64_t, uint64_t, void *))(v81 + 48);
  uint64_t v93 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v81 + 56);
  uint64_t v79 = (void (**)(uint64_t, char *, void *))(v81 + 16);
  uint64_t v82 = (void (**)(uint64_t, void *))(v81 + 8);
  uint64_t v83 = (void **)(v81 + 32);
  uint64_t v30 = (uint64_t *)(v77 + 40);
  uint64_t v31 = v88;
  while (1)
  {
    uint64_t v37 = *v30;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 48);
    swift_unknownObjectRetain();
    uint64_t v40 = (void *)v39(ObjectType, v37);
    if (!v40)
    {
      uint64_t v32 = v97;
      (*v93)(v97, 1, 1, v31);
LABEL_6:
      swift_unknownObjectRelease();
      uint64_t v33 = v32;
LABEL_7:
      sub_1000966BC(v33, (uint64_t *)&unk_100909E50);
      goto LABEL_8;
    }
    Class v41 = v40;
    id v42 = [v40 identifier];

    if (v42)
    {
      unint64_t v43 = v90;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = 1;
      unint64_t v43 = v90;
    }
    (*v93)((uint64_t)v43, v44, 1, v31);
    uint64_t v45 = (uint64_t)v43;
    uint64_t v32 = v97;
    sub_100096408(v45, v97, (uint64_t *)&unk_100909E50);
    unint64_t v46 = (unsigned int (*)(char *, uint64_t, void *))*v92;
    if ((*v92)(v32, 1, v31) == 1) {
      goto LABEL_6;
    }
    id v88 = *v83;
    ((void (*)(char *, uint64_t, void *))v88)(v91, v32, v31);
    id v47 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    uint64_t v48 = v37;
    os_log_type_t v49 = v87;
    v47(ObjectType, v48);
    if (v46(v49, 1, v31) == 1)
    {
      swift_unknownObjectRelease();
      (*v82)((uint64_t)v91, v31);
      uint64_t v33 = (uint64_t)v49;
      goto LABEL_7;
    }
    uint64_t v50 = v84;
    ((void (*)(char *, char *, void *))v88)(v84, v49, v31);
    Swift::String v51 = (void (*)(char *, char *, void *))*v79;
    uint64_t v52 = (uint64_t)v89;
    (*v79)((uint64_t)v89, v91, v31);
    v51(v86, v50, v31);
    sub_100096314((uint64_t)v85);
    uint64_t v53 = v101;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v100 = v53;
    unint64_t v101 = (void *)0x8000000000000000;
    unint64_t v56 = sub_100306EC4(v52);
    uint64_t v57 = v53[2];
    BOOL v58 = (v55 & 1) == 0;
    uint64_t v59 = v57 + v58;
    if (__OFADD__(v57, v58)) {
      break;
    }
    char v60 = v55;
    if (v53[3] >= v59)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100319418();
        uint64_t v53 = v100;
      }
    }
    else
    {
      sub_10031032C(v59, isUniquelyReferenced_nonNull_native);
      uint64_t v53 = v100;
      unint64_t v61 = sub_100306EC4((uint64_t)v89);
      if ((v60 & 1) != (v62 & 1)) {
        goto LABEL_32;
      }
      unint64_t v56 = v61;
    }
    uint64_t v63 = v81;
    unint64_t v101 = v53;
    swift_bridgeObjectRelease();
    if (v60)
    {
      swift_bridgeObjectRetain();
      uint64_t v64 = (uint64_t)v89;
    }
    else
    {
      v53[(v56 >> 6) + 8] |= 1 << v56;
      unint64_t v65 = v53[6] + *(void *)(v63 + 72) * v56;
      swift_bridgeObjectRetain();
      uint64_t v64 = (uint64_t)v89;
      v51((char *)v65, v89, v31);
      *(void *)(v53[7] + 8 * v56) = &_swiftEmptySetSingleton;
      uint64_t v66 = v53[2];
      BOOL v67 = __OFADD__(v66, 1);
      uint64_t v68 = v66 + 1;
      if (v67) {
        goto LABEL_31;
      }
      v53[2] = v68;
    }
    swift_bridgeObjectRelease();
    uint64_t v69 = v80;
    sub_10031DEC0(v80, v86);
    uint64_t v70 = *v82;
    (*v82)(v69, v31);
    swift_unknownObjectRelease();
    v70(v64, v31);
    v70((uint64_t)v84, v31);
    v70((uint64_t)v91, v31);
    uint64_t v85 = sub_1000D82A8;
LABEL_8:
    uint64_t v35 = v95;
    uint64_t v34 = v96;
    uint64_t v36 = v94;
    v30 += 2;
    if (!--v29) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1005D1B0C@<X0>(uint64_t a1@<X8>)
{
  sub_100096058(&qword_10091F0A8);
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Result();
  return sub_1005D21D4((void (*)(char *))sub_1005D687C, v2, a1);
}

uint64_t sub_1005D1BF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v21[0] = a3;
  v21[1] = a2;
  uint64_t v4 = sub_100094134(&qword_10091F0A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (uint64_t)v6 + v8;
  uint64_t v10 = *(int *)(v7 + 72);
  uint64_t v11 = (uint64_t)v6 + v10;
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a1 + v10;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  *uint64_t v6 = v15;
  v6[1] = v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 16);
  v18(v9, v12, v16);
  v18(v11, v13, v16);
  swift_bridgeObjectRetain();
  sub_1005D1D68(v15, v14, v9, v11, v21[0]);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v11, v16);
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v9, v16);
}

uint64_t sub_1005D1D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v42 = a2;
  uint64_t v41 = a1;
  uint64_t v51 = a5;
  uint64_t v49 = *v5;
  uint64_t v50 = sub_100094134(&qword_10091F0C8);
  __chkstk_darwin(v50);
  uint64_t v48 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v43 = (char *)&v38 - v14;
  uint64_t v15 = sub_100094134(&qword_10091F0A8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char **)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char **)((char *)&v38 - v20);
  uint64_t v46 = (uint64_t)&v38 - v20;
  uint64_t v23 = (char *)&v38 + *(int *)(v22 + 48) - v20;
  uint64_t v24 = (char *)&v38 + *(int *)(v22 + 64) - v20;
  void *v21 = a1;
  v21[1] = a2;
  uint64_t v25 = v11;
  uint64_t v45 = v11;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  unint64_t v38 = v23;
  v26(v23, a3, v10, v19);
  uint64_t v39 = v24;
  ((void (*)(char *, uint64_t, uint64_t))v26)(v24, v40, v10);
  uint64_t v27 = (char *)v17 + *(int *)(v15 + 48);
  uint64_t v28 = (char *)v17 + *(int *)(v15 + 64);
  ((void (*)(char *, char *, uint64_t))v26)(v27, v23, v10);
  ((void (*)(char *, char *, uint64_t))v26)(v28, v24, v10);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v30 = v43;
  v29(v43, v27, v10);
  uint64_t v31 = v44;
  v29(v44, v28, v10);
  uint64_t v32 = (char *)v17 + *(int *)(v15 + 48);
  uint64_t v33 = (char *)v17 + *(int *)(v15 + 64);
  uint64_t v34 = v41;
  uint64_t v35 = v42;
  void *v17 = v41;
  v17[1] = v35;
  ((void (*)(char *, char *, uint64_t))v26)(v32, v38, v10);
  ((void (*)(char *, char *, uint64_t))v26)(v33, v39, v10);
  uint64_t v58 = v47;
  uint64_t v59 = v31;
  char v60 = v30;
  unint64_t v61 = v17;
  swift_bridgeObjectRetain_n();
  sub_100094134((uint64_t *)&unk_10090ABB0);
  sub_1005C8224((void (*)(unsigned char *, __n128))sub_1005D6884, v48);
  sub_1000966BC((uint64_t)v17, &qword_10091F0A8);
  uint64_t v52 = *(void *)(v49 + 80);
  uint64_t v53 = *(void *)(v49 + 88);
  uint64_t v54 = v34;
  uint64_t v55 = v35;
  unint64_t v56 = v30;
  uint64_t v57 = v31;
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  sub_1005D2FB0((void (*)(char *))sub_1005D68A8, v50, v51);
  sub_1000966BC(v46, &qword_10091F0A8);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v45 + 8);
  v36(v31, v10);
  return ((uint64_t (*)(char *, uint64_t))v36)(v30, v10);
}

uint64_t sub_1005D21D4@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v14 + 16))(v13, v15, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v13, *(void *)(a2 + 24));
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    a1(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1005D23E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_100096058(&qword_10091F0A8);
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for Result();
  return a4(v5);
}

uint64_t sub_1005D2494()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100094134(&qword_10091F0D0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = sub_1005C7D50((void (*)(char *, char *))sub_1005D29A8, 0, v2, v3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v5);
  swift_getWitnessTable();
  sub_1005D6984((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v7 = Sequence.mapToSet<A>(_:)();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 88) + 72))(v0[2], v0[3], v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1005D2660@<X0>(uint64_t a1@<X8>)
{
  sub_100096058(&qword_10091F0A8);
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Result();
  return sub_1005D21D4((void (*)(char *))sub_1005D6918, v2, a1);
}

uint64_t sub_1005D2750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v9 = *a5;
  if (*(void *)(*a5 + 16)
    && (unint64_t v14 = sub_100306EC4(a3), (v15 & 1) != 0)
    && (uint64_t v16 = *(void *)(*(void *)(v9 + 56) + 8 * v14),
        swift_bridgeObjectRetain(),
        char v17 = sub_1001CBD6C(a4, v16),
        swift_bridgeObjectRelease(),
        (v17 & 1) != 0))
  {
    uint64_t v18 = sub_100094134(&qword_10091F0A8);
    uint64_t v24 = (char *)a7 + *(int *)(v18 + 48);
    uint64_t v25 = (char *)a7 + *(int *)(v18 + 64);
    *a7 = a1;
    a7[1] = a2;
    uint64_t v19 = type metadata accessor for UUID();
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
    v20(v24, a3, v19);
    v20(v25, a4, v19);
    type metadata accessor for RDDeduplicationActivity.CrashCleanError();
    swift_storeEnumTagMultiPayload();
    swift_getWitnessTable();
    type metadata accessor for Result();
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_100096058(&qword_10091F0A8);
    type metadata accessor for RDDeduplicationActivity.CrashCleanError();
    swift_getWitnessTable();
    uint64_t v22 = type metadata accessor for Result();
    uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16);
    return v23(a7, a6, v22);
  }
}

uint64_t sub_1005D29A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_10091F0A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (char *)v6 + v8;
  uint64_t v10 = *(int *)(v7 + 72);
  __n128 v11 = (char *)v6 + v10;
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a1 + v10;
  uint64_t v14 = a1[1];
  *uint64_t v6 = *a1;
  v6[1] = v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  char v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v9, v12, v15);
  v17(v11, v13, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v11, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v9, v15);
}

uint64_t sub_1005D2B08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_10091F0A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (char *)v6 + v8;
  uint64_t v10 = *(int *)(v7 + 72);
  __n128 v11 = (char *)v6 + v10;
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a1 + v10;
  uint64_t v14 = a1[1];
  *uint64_t v6 = *a1;
  v6[1] = v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  char v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v9, v12, v15);
  v17(v11, v13, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v9, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v11, v15);
}

uint64_t sub_1005D2C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(a1 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v12 = UUID._bridgeToObjectiveC()().super.isa;
  id v13 = [v10 URLForAttachmentDirectory:isa accountID:v12];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = [self defaultManager];
  URL._bridgeToObjectiveC()(v15);
  char v17 = v16;
  id v25 = 0;
  LOBYTE(v13) = [v14 removeItemAtURL:v16 error:&v25];

  if (v13)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    id v19 = v25;
    v18(v9, v6);
    return sub_1000BF710(v23, a4, &qword_10091F0A8);
  }
  else
  {
    id v21 = v25;
    uint64_t v22 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *uint64_t v24 = v22;
  }
  return result;
}

uint64_t sub_1005D2E98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v10 = *a1;
  __n128 v11 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
  Class v12 = (char *)a6 + v11[12];
  id v13 = (char *)a6 + v11[16];
  uint64_t v14 = v11[20];
  *a6 = a2;
  a6[1] = a3;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v12, a4, v15);
  v16(v13, a5, v15);
  *(void *)((char *)a6 + v14) = v10;
  type metadata accessor for RDDeduplicationActivity.CrashCleanError();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return swift_errorRetain();
}

uint64_t sub_1005D2FB0@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v3, *(void *)(a2 + 16));
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t sub_1005D3184()
{
  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 40);
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 96);
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1005D31D4()
{
  sub_1005D3184();

  return swift_deallocClassInstance();
}

uint64_t sub_1005D3204()
{
  return sub_1005C85E0();
}

uint64_t sub_1005D3228@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_10091E620);
  a1[3] = type metadata accessor for RDDeduplicationActivity.Executable();
  a1[4] = &off_1008CC778;
  a1[5] = &off_1008CC788;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_1005D32D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(*(void *)(v0 + qword_10091E618) + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  uint64_t v3 = v2[4];
  sub_1000C0DE0(v2, v2[3]);
  uint64_t v4 = sub_10044EA10();
  char v5 = (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(v1 + qword_10091E608);
  uint64_t v7 = *(void *)(v1 + qword_10091E608 + 24);
  uint64_t v8 = v6[4];
  sub_1000C0DE0(v6, v7);
  uint64_t v9 = *(void *)(v8 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(v9 + 16))(v7);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v9 + 8))(v7);
  }
}

uint64_t sub_1005D33B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[qword_10091E608];
  uint64_t v4 = *(void *)&v0[qword_10091E608 + 24];
  uint64_t v3 = *(void *)&v0[qword_10091E608 + 32];
  sub_1000C0DE0(v2, v4);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v4))
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10091E5B0);
    uint64_t v10 = v1;
    __n128 v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136446210;
      uint64_t v18 = sub_1005D3714();
      sub_1000C51B8(v18, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v16 = "[%{public}s] configuration validation fail - cannot execute because configurations.approximatePerRunDeleteLimit is 0";
      goto LABEL_11;
    }
LABEL_12:

    return 0;
  }
  char v5 = (void *)(*(void *)&v1[qword_10091E618] + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  uint64_t v6 = v5[4];
  sub_1000C0DE0(v5, v5[3]);
  uint64_t v7 = sub_10044EA10();
  char v8 = (*(uint64_t (**)(uint64_t))(v6 + 8))(v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091E5B0);
    uint64_t v10 = v1;
    __n128 v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136446210;
      uint64_t v14 = sub_1005D3714();
      sub_1000C51B8(v14, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v16 = "[%{public}s] skipping execute because sentinel file exists";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v16, v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }
    goto LABEL_12;
  }
  return 1;
}

uint64_t sub_1005D3700@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D385C(&qword_10091E5E8, (uint64_t *)&unk_10090EEB0, a1);
}

uint64_t sub_1005D3714()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_1005D374C@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(v1 + qword_10091E5F0, a1);
}

uint64_t sub_1005D3774@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  id v4 = v1;
  sub_1005D32D0();
  double v6 = v5;
  id v9 = v4;
  uint64_t v7 = type metadata accessor for RDDeduplicationActivity();
  uint64_t result = sub_1005091C0((uint64_t)&v9, v6, v3, v7, (uint64_t)&off_1008CC7C8);
  a1[3] = v3;
  a1[4] = (uint64_t)&off_1008C8B10;
  *a1 = result;
  return result;
}

uint64_t sub_1005D3848@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D385C(&qword_10091E5F8, (uint64_t *)&unk_10090E4D0, a1);
}

uint64_t sub_1005D385C@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return sub_1000BF710(v6, a3, a2);
}

uint64_t sub_1005D38BC()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = sub_1005D3714();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x746973796261622ELL;
  v1._object = (void *)0xEB00000000726574;
  String.append(_:)(v1);
  return 0x6C7070612E6D6F63;
}

id sub_1005D3960(void *a1)
{
  id v1 = a1;
  sub_1005D38BC();
  uint64_t v3 = v2;

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }

  return v4;
}

double sub_1005D39D8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_1000C0DE0(v0, v1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t sub_1005D3A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v18);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDDeduplicationActivity();
  if (swift_dynamicCast())
  {

    swift_beginAccess();
    uint64_t v5 = v2[5];
    uint64_t v6 = v2[6];
    sub_1000C0DE0(v2 + 2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    swift_endAccess();
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  }
  else
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10091E5B0);
    sub_100096838(a1, (uint64_t)v17);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      __n128 v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)__n128 v11 = 136446210;
      sub_100096838((uint64_t)v17, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = (id)sub_1000C51B8(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[RDDeduplicationActivity.ExecutionDateStorage] lastExecutedDate(for:) must work with RDDeduplicationActivity only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_1005D3D24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDDeduplicationActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_1009079F0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10091E5B0);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = (id)sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[RDDeduplicationActivity.ExecutionDateStorage] updateLastExecutedDate(for:) must work with RDDeduplicationActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_1005D407C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D3A54(a1, a2);
}

uint64_t sub_1005D40A0(uint64_t a1, uint64_t a2)
{
  return sub_1005D3D24(a1, a2);
}

void sub_1005D40C4()
{
}

id sub_1005D4108()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDDeduplicationActivity();
  return [super dealloc];
}

uint64_t sub_1005D417C(uint64_t a1)
{
  sub_1000966BC(a1 + qword_10091E5E8, (uint64_t *)&unk_10090EEB0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1 + qword_10091E5F0);
  sub_1000966BC(a1 + qword_10091E5F8, (uint64_t *)&unk_10090E4D0);

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1 + qword_10091E608);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1 + qword_10091E610);
  swift_release();

  return swift_release();
}

uint64_t sub_1005D424C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005D3774(a1);
}

uint64_t sub_1005D4270()
{
  return sub_1005D3714();
}

uint64_t sub_1005D4294@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D374C(a1);
}

uint64_t sub_1005D42B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D4344((SEL *)&selRef_imageDeduplicationLastExecutionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

void sub_1005D42EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1005D42F8(uint64_t a1, uint64_t a2)
{
  return sub_1005D453C(a1, a2, (SEL *)&selRef_imageDeduplicationLegacyAttachmentsMarkedForDeletion);
}

void sub_1005D4304(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1005D4310@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D4344((SEL *)&selRef_savedImageDeduplicationLastExecutionDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_1005D4344@<X0>(SEL *a1@<X2>, void (*a2)(void)@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  id v8 = [v4 *a1];
  if (v8)
  {
    uint64_t v9 = v8;
    a2();

    uint64_t v10 = ((uint64_t (*)(void))a3)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a4;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a3();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a4;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

void sub_1005D4424(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1005D4430(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  Class v11 = 0;
  if (v10 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    Class v11 = isa;
  }
  Class v13 = v11;
  [v6 *a4];
}

uint64_t sub_1005D4530(uint64_t a1, uint64_t a2)
{
  return sub_1005D453C(a1, a2, (SEL *)&selRef_savedImageDeduplicationLegacyAttachmentsMarkedForDeletion);
}

uint64_t sub_1005D453C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_1005D4594(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1005D45A0(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  [v4 *a4:isa];
}

id sub_1005D461C()
{
  return [*v0 imageDeduplicationDefaultThrottleInterval];
}

id sub_1005D462C()
{
  return [*v0 imageDeduplicationBackoffThrottleInterval];
}

id sub_1005D463C()
{
  id v1 = [*v0 imageDeduplicationRateReduceFactor];

  return v1;
}

id sub_1005D4674()
{
  return [*v0 imageDeduplicationApproximatePerRunDeleteLimit];
}

id sub_1005D4684()
{
  return [*v0 savedImageDeduplicationDefaultThrottleInterval];
}

id sub_1005D4694()
{
  return [*v0 savedImageDeduplicationBackoffThrottleInterval];
}

id sub_1005D46A4()
{
  id v1 = [*v0 savedImageDeduplicationRateReduceFactor];

  return v1;
}

id sub_1005D46DC()
{
  return [*v0 savedImageDeduplicationApproximatePerRunDeleteLimit];
}

uint64_t sub_1005D46EC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for RDDeduplicationActivity()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D4784()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D4818()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.PreprocessedAttachment()
{
  return sub_1000E6FBC();
}

void sub_1005D492C()
{
  sub_1000D68FC();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D49FC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.CrashCleaner()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D4A5C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for RDDeduplicationActivity.ExecutionDateStorage()
{
  return sub_1000E6FBC();
}

uint64_t type metadata accessor for RDImageDeduplicationActivityObjC()
{
  return self;
}

uint64_t sub_1005D4B24()
{
  unint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 24) + 8))(v2);
}

uint64_t sub_1005D4B74()
{
  unint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 24) + 16))(v2);
}

uint64_t sub_1005D4BC4()
{
  unint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8))(v2);
}

uint64_t sub_1005D4C14()
{
  unint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v2);
}

uint64_t sub_1005D4C68()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
}

uint64_t sub_1005D4CBC(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  sub_1000BF710(a1, (uint64_t)v5, (uint64_t *)&unk_100909A40);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v5, ObjectType, v6);
  return sub_1000966BC(a1, (uint64_t *)&unk_100909A40);
}

uint64_t sub_1005D4D8C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

uint64_t sub_1005D4DD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(a1, ObjectType, v3);
}

uint64_t type metadata accessor for RDImageDeduplicationActivity(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10091E9B8);
}

uint64_t sub_1005D4E50()
{
  return type metadata accessor for RDImageDeduplicationActivity(0);
}

uint64_t type metadata accessor for RDImageDeduplicationActivity.Configurations()
{
  return self;
}

uint64_t type metadata accessor for RDImageDeduplicationActivity.States()
{
  return self;
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivityObjC()
{
  return self;
}

uint64_t sub_1005D4F4C()
{
  uint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 24) + 8))(v2);
}

uint64_t sub_1005D4F9C()
{
  uint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 24) + 16))(v2);
}

uint64_t sub_1005D4FEC()
{
  uint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8))(v2);
}

uint64_t sub_1005D503C()
{
  uint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v2);
}

uint64_t sub_1005D508C()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1005D50C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
}

uint64_t sub_1005D5118(uint64_t a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  sub_1000BF710(a1, (uint64_t)v5, (uint64_t *)&unk_100909A40);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v5, ObjectType, v6);
  return sub_1000966BC(a1, (uint64_t *)&unk_100909A40);
}

uint64_t sub_1005D51E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
}

uint64_t sub_1005D522C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(a1, ObjectType, v3);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10091ECE0);
}

uint64_t sub_1005D52A8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1005D52E0()
{
  return type metadata accessor for RDSavedImageDeduplicationActivity(0);
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity.Configurations()
{
  return self;
}

uint64_t type metadata accessor for RDSavedImageDeduplicationActivity.States()
{
  return self;
}

uint64_t sub_1005D5330()
{
  uint64_t v7 = &unk_100793EB8;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v8 = &v6;
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      uint64_t v9 = &v5;
      swift_getTupleTypeLayout3();
      int v10 = &v4;
      swift_getTupleTypeLayout();
      Class v11 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1005D5498(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = *(int *)(sub_100094134(&qword_10091EFB8) + 48);
        Class v11 = *(void **)((char *)a2 + v10);
        *(uint64_t *)((char *)a1 + v10) = (uint64_t)v11;
        id v12 = v11;
        break;
      case 2u:
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        uint64_t v14 = sub_100094134(&qword_10091EFC0);
        uint64_t v15 = *(int *)(v14 + 48);
        uint64_t v16 = (char *)a1 + v15;
        unint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        uint64_t v19 = *(int *)(v14 + 64);
        uint64_t v20 = *(void **)((char *)a2 + v19);
        *(uint64_t *)((char *)a1 + v19) = (uint64_t)v20;
        id v21 = v20;
        break;
      case 3u:
        uint64_t v22 = *a2;
        swift_errorRetain();
        *a1 = v22;
        uint64_t v23 = sub_100094134(&qword_10091EFC8);
        uint64_t v24 = *(int *)(v23 + 48);
        id v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
        uint64_t v28 = *(int *)(v23 + 64);
        uint64_t v29 = *(void **)((char *)a2 + v28);
        *(uint64_t *)((char *)a1 + v28) = (uint64_t)v29;
        id v30 = v29;
        break;
      case 4u:
        uint64_t v31 = *a2;
        swift_errorRetain();
        *a1 = v31;
        uint64_t v32 = (int *)sub_100094134(qword_10091EFD0);
        uint64_t v33 = v32[12];
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
        uint64_t v37 = v32[16];
        unint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = (char *)a2 + v37;
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
        uint64_t v41 = v32[20];
        uint64_t v42 = *(void **)((char *)a2 + v41);
        *(uint64_t *)((char *)a1 + v41) = (uint64_t)v42;
        id v43 = v42;
        break;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = (void *)a2[2];
        a1[2] = (uint64_t)v6;
        swift_unknownObjectRetain();
        id v7 = v6;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_1005D5808(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      unint64_t v2 = (void **)(a1 + 16);
      swift_unknownObjectRelease();
      goto LABEL_9;
    case 1u:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = *(int *)(sub_100094134(&qword_10091EFB8) + 48);
      goto LABEL_8;
    case 2u:
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      char v6 = &qword_10091EFC0;
      goto LABEL_6;
    case 3u:
      swift_errorRelease();
      char v6 = &qword_10091EFC8;
LABEL_6:
      uint64_t v7 = sub_100094134(v6);
      uint64_t v8 = a1 + *(int *)(v7 + 48);
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      uint64_t v4 = *(int *)(v7 + 64);
      goto LABEL_8;
    case 4u:
      swift_errorRelease();
      uint64_t v10 = (int *)sub_100094134(qword_10091EFD0);
      uint64_t v11 = a1 + v10[12];
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
      uint64_t v13 = a1 + v10[16];
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
      uint64_t v4 = v10[20];
LABEL_8:
      unint64_t v2 = (void **)(a1 + v4);
LABEL_9:
      uint64_t v15 = *v2;

      break;
    default:
      return;
  }
}

void *sub_1005D5A34(void *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(sub_100094134(&qword_10091EFB8) + 48);
      uint64_t v8 = *(void **)((char *)a2 + v7);
      *(void *)((char *)a1 + v7) = v8;
      id v9 = v8;
      break;
    case 2u:
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = sub_100094134(&qword_10091EFC0);
      uint64_t v12 = *(int *)(v11 + 48);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      uint64_t v16 = *(int *)(v11 + 64);
      unint64_t v17 = *(void **)((char *)a2 + v16);
      *(void *)((char *)a1 + v16) = v17;
      id v18 = v17;
      break;
    case 3u:
      uint64_t v19 = *a2;
      swift_errorRetain();
      *a1 = v19;
      uint64_t v20 = sub_100094134(&qword_10091EFC8);
      uint64_t v21 = *(int *)(v20 + 48);
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      uint64_t v25 = *(int *)(v20 + 64);
      uint64_t v26 = *(void **)((char *)a2 + v25);
      *(void *)((char *)a1 + v25) = v26;
      id v27 = v26;
      break;
    case 4u:
      uint64_t v28 = *a2;
      swift_errorRetain();
      *a1 = v28;
      uint64_t v29 = (int *)sub_100094134(qword_10091EFD0);
      uint64_t v30 = v29[12];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
      uint64_t v34 = v29[16];
      uint64_t v35 = (char *)a1 + v34;
      uint64_t v36 = (char *)a2 + v34;
      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
      uint64_t v38 = v29[20];
      uint64_t v39 = *(void **)((char *)a2 + v38);
      *(void *)((char *)a1 + v38) = v39;
      id v40 = v39;
      break;
    default:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v4 = (void *)a2[2];
      a1[2] = v4;
      swift_unknownObjectRetain();
      id v5 = v4;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_1005D5D54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = *(int *)(sub_100094134(&qword_10091EFB8) + 48);
        id v9 = *(void **)((char *)a2 + v8);
        *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
        id v10 = v9;
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        uint64_t v12 = sub_100094134(&qword_10091EFC0);
        uint64_t v13 = *(int *)(v12 + 48);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        uint64_t v17 = *(int *)(v12 + 64);
        id v18 = *(void **)((char *)a2 + v17);
        *(uint64_t *)((char *)a1 + v17) = (uint64_t)v18;
        id v19 = v18;
        break;
      case 3u:
        uint64_t v20 = *a2;
        swift_errorRetain();
        *a1 = v20;
        uint64_t v21 = sub_100094134(&qword_10091EFC8);
        uint64_t v22 = *(int *)(v21 + 48);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
        uint64_t v26 = *(int *)(v21 + 64);
        id v27 = *(void **)((char *)a2 + v26);
        *(uint64_t *)((char *)a1 + v26) = (uint64_t)v27;
        id v28 = v27;
        break;
      case 4u:
        uint64_t v29 = *a2;
        swift_errorRetain();
        *a1 = v29;
        uint64_t v30 = (int *)sub_100094134(qword_10091EFD0);
        uint64_t v31 = v30[12];
        uint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
        uint64_t v35 = v30[16];
        uint64_t v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
        uint64_t v39 = v30[20];
        id v40 = *(void **)((char *)a2 + v39);
        *(uint64_t *)((char *)a1 + v39) = (uint64_t)v40;
        id v41 = v40;
        break;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        id v5 = (void *)a2[2];
        a1[2] = (uint64_t)v5;
        swift_unknownObjectRetain();
        id v6 = v5;
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1005D60AC(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_100094134(&qword_10091EFB8);
      *(void *)((char *)a1 + *(int *)(v7 + 48)) = *(void *)((char *)a2 + *(int *)(v7 + 48));
      goto LABEL_7;
    case 2u:
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = sub_100094134(&qword_10091EFC0);
      uint64_t v10 = *(int *)(v9 + 48);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      *(void *)((char *)a1 + *(int *)(v9 + 64)) = *(void *)((char *)a2 + *(int *)(v9 + 64));
      goto LABEL_7;
    case 3u:
      *a1 = *a2;
      uint64_t v14 = sub_100094134(&qword_10091EFC8);
      uint64_t v15 = *(int *)(v14 + 48);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(void *)((char *)a1 + *(int *)(v14 + 64)) = *(void *)((char *)a2 + *(int *)(v14 + 64));
      goto LABEL_7;
    case 4u:
      *a1 = *a2;
      id v19 = (int *)sub_100094134(qword_10091EFD0);
      uint64_t v20 = v19[12];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      uint64_t v24 = v19[16];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
      *(void *)((char *)a1 + v19[20]) = *(void *)((char *)a2 + v19[20]);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1005D63A8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = sub_100094134(&qword_10091EFB8);
        *(void *)((char *)a1 + *(int *)(v7 + 48)) = *(void *)((char *)a2 + *(int *)(v7 + 48));
        goto LABEL_8;
      case 2u:
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = sub_100094134(&qword_10091EFC0);
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = (char *)a2 + v10;
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
        *(void *)((char *)a1 + *(int *)(v9 + 64)) = *(void *)((char *)a2 + *(int *)(v9 + 64));
        goto LABEL_8;
      case 3u:
        *a1 = *a2;
        uint64_t v14 = sub_100094134(&qword_10091EFC8);
        uint64_t v15 = *(int *)(v14 + 48);
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        *(void *)((char *)a1 + *(int *)(v14 + 64)) = *(void *)((char *)a2 + *(int *)(v14 + 64));
        goto LABEL_8;
      case 4u:
        *a1 = *a2;
        id v19 = (int *)sub_100094134(qword_10091EFD0);
        uint64_t v20 = v19[12];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        uint64_t v24 = v19[16];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
        *(void *)((char *)a1 + v19[20]) = *(void *)((char *)a2 + v19[20]);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.DeduplicationError()
{
  return sub_1000E6FBC();
}

void sub_1005D6710(void *a1)
{
  sub_1005C8CD4(a1, v1);
}

uint64_t type metadata accessor for RDDeduplicationActivity.Executable.LocalAnalytics.CompositeError()
{
  return sub_1000E6FBC();
}

void *sub_1005D6744@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1005CD0E0(*a1, a1[1], *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1005D678C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1005CD89C(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_1005D67A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005CDDD8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for RDDeduplicationActivity.CrashCleanError()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D67FC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1005D0E44(*a1, a1[1], a2);
}

uint64_t sub_1005D682C@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D1B0C(a1);
}

uint64_t sub_1005D684C(uint64_t a1)
{
  return sub_1005D23E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))&Result.failureOrNil());
}

uint64_t sub_1005D687C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D1BF0(a1, v2, a2);
}

uint64_t sub_1005D6884@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D2C68(*(void *)(v2 + 16), *(void *)(v2 + 40), a1, a2);
}

uint64_t sub_1005D68A8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1005D2E98(a1, v2[4], v2[5], v2[6], v2[7], a2);
}

uint64_t sub_1005D68B8(uint64_t a1)
{
  return sub_1005D23E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))&Result.valueOrNil());
}

uint64_t sub_1005D68E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1005D2660(a1);
}

uint64_t sub_1005D690C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1005D2750(a1, a2, a3, a4, *(uint64_t **)(v5 + 32), *(void *)(v5 + 40), a5);
}

uint64_t sub_1005D6918(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v1 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = sub_100094134(&qword_10091F0A8);
  return v3(v4, v5, &a1[*(int *)(v6 + 48)], &a1[*(int *)(v6 + 64)]);
}

uint64_t sub_1005D6984(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005D69DC(uint64_t a1, void *a2)
{
  id v28 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v10;
  uint64_t v30 = v4 + 16;
  uint64_t v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v29 = v4 + 48;
  uint64_t v27 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v15 >= v25) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v24 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_19:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(void *)(v32 + 48) + *(void *)(v4 + 72) * v17, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
    {
      swift_release();
      return v33;
    }
    (*v27)(v6, v9, v3);
    UUID.uuidString.getter();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v28 storeForAccountIdentifier:v21];

    uint64_t result = (*v26)(v6, v3);
    if (v22)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v25) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v24 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v25) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v24 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v25) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v24 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v25)
  {
LABEL_30:
    (*v31)(v9, 1, 1, v3);
    swift_release();
    return v33;
  }
  unint64_t v19 = *(void *)(v24 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v15 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v24 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void sub_1005D6DDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  UUID.uuidString.getter();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [a1 storeForAccountIdentifier:v7];

  if (v8)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v10 = (void *)sub_1003A059C(KeyPath);
    swift_release();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
    id v11 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v12 = [(id)swift_getObjCClassFromMetadata() entity];
    [v11 setEntity:v12];

    [v11 setAffectedStores:0];
    [v11 setPredicate:v10];

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10077A530;
    *(void *)(v13 + 32) = v8;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    id v14 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setAffectedStores:isa];

    [v11 setFetchBatchSize:a4];
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_100776E60;
    *(void *)(v16 + 32) = 0x656D614E656C6966;
    *(void *)(v16 + 40) = 0xE800000000000000;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = 0x696669746E656469;
    *(void *)(v16 + 72) = 0xEA00000000007265;
    *(void *)(v16 + 120) = &type metadata for String;
    *(void *)(v16 + 88) = &type metadata for String;
    *(void *)(v16 + 96) = 0x7553323135616873;
    *(void *)(v16 + 104) = 0xE90000000000006DLL;
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setPropertiesToFetch:v17];

    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_10077A530;
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    swift_getKeyPath();
    *(void *)(v18 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
    specialized Array._endMutation()();
    Class v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setSortDescriptors:v19];

    unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
    if (v4)
    {
    }
    else
    {
      sub_1002007F0(v20);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    NSString v21 = self;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = UUID.uuidString.getter();
    *(void *)(inited + 40) = v23;
    sub_10012674C(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    Class v24 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v21 accountStoreMissingError:v24];

    swift_willThrow();
  }
}

void *sub_1005D723C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = (void *)sub_1003A059C(KeyPath);
  swift_release();
  uint64_t v11 = swift_getKeyPath();
  id v12 = sub_1001FF8A4(a3);
  uint64_t v13 = (void *)sub_1003A02A4(v11, (uint64_t)v12);
  swift_release();
  sub_100094134(qword_10091F0D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 40) = v13;
  uint64_t v27 = inited;
  specialized Array._endMutation()();
  id v26 = v13;
  id v15 = v10;
  uint64_t v16 = (void *)sub_1002F52FC(v27);
  sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
  id v17 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v18 = [(id)swift_getObjCClassFromMetadata() entity];
  [v17 setEntity:v18];

  [v17 setAffectedStores:0];
  [v17 setPredicate:v16];

  id v19 = a1;
  sub_1005D69DC(a4, v19);

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 setAffectedStores:isa];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100776E40;
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 32) = 0x696669746E656469;
  *(void *)(v21 + 40) = 0xEA00000000007265;
  Class v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 setPropertiesToFetch:v22];

  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  [v17 setRelationshipKeyPathsForPrefetching:v23];

  unint64_t v24 = NSManagedObjectContext.fetch<A>(_:)();
  if (v4)
  {
  }
  else
  {
    uint64_t v5 = sub_1002007F0(v24);

    swift_bridgeObjectRelease();
  }
  return v5;
}

void *sub_1005D7544(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  UUID.uuidString.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [a1 storeForAccountIdentifier:v8];

  if (v9)
  {
    uint64_t v10 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v12 = [v10 objectIDWithUUID:isa];

    sub_100094134(&qword_10091E098);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    id v14 = v12;
    uint64_t v15 = sub_1005B22E0(v12, 0x60u);

    *(void *)(inited + 32) = v15;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v17 = sub_1003A05C0(KeyPath);
    swift_release();
    *(void *)(inited + 40) = v17;
    specialized Array._endMutation()();
    id v18 = (void *)sub_1002F52FC(inited);
    type metadata accessor for REMCDSavedAttachment();
    id v19 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v20 = [(id)swift_getObjCClassFromMetadata() entity];
    [v19 setEntity:v20];

    [v19 setAffectedStores:0];
    [v19 setPredicate:v18];

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_10077A530;
    *(void *)(v21 + 32) = v9;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    id v22 = v9;
    Class v23 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setAffectedStores:v23];

    [v19 setFetchBatchSize:a4];
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_100776E60;
    *(void *)(v24 + 32) = 0x656D614E656C6966;
    *(void *)(v24 + 40) = 0xE800000000000000;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = 0x696669746E656469;
    *(void *)(v24 + 72) = 0xEA00000000007265;
    *(void *)(v24 + 120) = &type metadata for String;
    *(void *)(v24 + 88) = &type metadata for String;
    *(void *)(v24 + 96) = 0x7553323135616873;
    *(void *)(v24 + 104) = 0xE90000000000006DLL;
    Class v25 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setPropertiesToFetch:v25];

    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_10077A530;
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    swift_getKeyPath();
    *(void *)(v26 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
    specialized Array._endMutation()();
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setSortDescriptors:v27];

    id v28 = a2;
    unint64_t v29 = NSManagedObjectContext.fetch<A>(_:)();
    if (v4)
    {
    }
    else
    {
      id v28 = sub_1002007FC(v29);

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v30 = self;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_100776E40;
    *(void *)(v31 + 32) = UUID.uuidString.getter();
    *(void *)(v31 + 40) = v32;
    sub_10012674C(v31);
    swift_setDeallocating();
    swift_arrayDestroy();
    id v28 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v30 accountStoreMissingError:v28];

    swift_willThrow();
  }
  return v28;
}

void *sub_1005D7A44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100094134(&qword_10091E098);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = sub_10032F7C0(KeyPath, 1701603686, 0xE400000000000000);
  swift_release();
  *(void *)(inited + 32) = v11;
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = sub_10032F7C0(v12, 0x6567616D69, 0xE500000000000000);
  swift_release();
  *(void *)(inited + 40) = v13;
  specialized Array._endMutation()();
  id v14 = (void *)sub_100397E58(inited);
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = (void *)sub_1003A05C0(v15);
  swift_release();
  uint64_t v17 = swift_getKeyPath();
  id v18 = sub_1001FF8A4(a3);
  id v19 = (void *)sub_1003A0290(v17, (uint64_t)v18);
  swift_release();
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_100776E60;
  *(void *)(v20 + 32) = v14;
  *(void *)(v20 + 40) = v16;
  *(void *)(v20 + 48) = v19;
  uint64_t v34 = v20;
  specialized Array._endMutation()();
  id v33 = v19;
  id v21 = v14;
  id v32 = v16;
  id v22 = (void *)sub_1002F52FC(v34);
  type metadata accessor for REMCDSavedAttachment();
  id v23 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v24 = [(id)swift_getObjCClassFromMetadata() entity];
  [v23 setEntity:v24];

  [v23 setAffectedStores:0];
  [v23 setPredicate:v22];

  id v25 = a1;
  sub_1005D69DC(a4, v25);

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setAffectedStores:isa];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100776E40;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 32) = 0x696669746E656469;
  *(void *)(v27 + 40) = 0xEA00000000007265;
  Class v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setPropertiesToFetch:v28];

  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  [v23 setRelationshipKeyPathsForPrefetching:v29];

  unint64_t v30 = NSManagedObjectContext.fetch<A>(_:)();
  if (v4)
  {
  }
  else
  {
    uint64_t v5 = sub_1002007FC(v30);

    swift_bridgeObjectRelease();
  }
  return v5;
}

void sub_1005D7DF4()
{
}

const char *sub_1005D7E2C()
{
  return "sha512Sum";
}

void sub_1005D7E38(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1005D7E50(uint64_t a1, void **a2)
{
}

void sub_1005D7E70(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1005D7E88(uint64_t a1, void **a2)
{
}

uint64_t type metadata accessor for RDDeduplicationActivity.RateReducer()
{
  return sub_1000E6FBC();
}

uint64_t sub_1005D7EC0()
{
  uint64_t v4 = &unk_100793C18;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v5 = &v3;
    swift_getTupleTypeLayout();
    uint64_t v6 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_1005D7FA0(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v15;
      swift_bridgeObjectRetain();
      uint64_t v16 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v17 = v16[12];
      id v18 = &a1[v17];
      id v19 = &a2[v17];
      uint64_t v20 = type metadata accessor for UUID();
      id v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      v21(&a1[v16[16]], &a2[v16[16]], v20);
      uint64_t v22 = v16[20];
      uint64_t v23 = *(void *)&a2[v22];
      swift_errorRetain();
      *(void *)&a1[v22] = v23;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v7;
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_100094134(&qword_10091F0A8);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for UUID();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 64)], &a2[*(int *)(v8 + 64)], v12);
    }
    else
    {
      uint64_t v24 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v24;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1005D81B0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v3 = sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v4 = a1 + *(int *)(v3 + 48);
      uint64_t v5 = type metadata accessor for UUID();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(v4, v5);
      v6(a1 + *(int *)(v3 + 64), v5);
      return swift_errorRelease();
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v7 = sub_100094134(&qword_10091F0A8);
      uint64_t v8 = a1 + *(int *)(v7 + 48);
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v11)((void *)(v9 - 8), v8, v9);
      uint64_t v10 = a1 + *(int *)(v7 + 64);
      return v11(v10, v9);
    case 0:
      return swift_bridgeObjectRelease();
  }
  return result;
}

char *sub_1005D8374(char *a1, char *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v12;
    swift_bridgeObjectRetain();
    uint64_t v13 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
    uint64_t v14 = v13[12];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for UUID();
    id v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v18(&a1[v13[16]], &a2[v13[16]], v17);
    uint64_t v19 = v13[20];
    uint64_t v20 = *(void *)&a2[v19];
    swift_errorRetain();
    *(void *)&a1[v19] = v20;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v5;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_100094134(&qword_10091F0A8);
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v10);
  }
  else
  {
    uint64_t v21 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v21;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *sub_1005D8520(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(char *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      uint64_t v12 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v13 = v12[12];
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(v14, v15, v16);
      v17(&a1[v12[16]], &a2[v12[16]], v16);
      uint64_t v18 = v12[20];
      uint64_t v19 = *(void *)&a2[v18];
      swift_errorRetain();
      *(void *)&a1[v18] = v19;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_100094134(&qword_10091F0A8);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = &a1[v7];
        uint64_t v9 = &a2[v7];
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
        v11(v8, v9, v10);
        v11(&a1[*(int *)(v6 + 64)], &a2[*(int *)(v6 + 64)], v10);
      }
      else
      {
        swift_bridgeObjectRetain();
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_1005D871C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v13 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
    uint64_t v14 = v13[12];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    v18(&a1[v13[16]], &a2[v13[16]], v17);
    *(void *)&a1[v13[20]] = *(void *)&a2[v13[20]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = sub_100094134(&qword_10091F0A8);
    uint64_t v8 = *(int *)(v7 + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    v12(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1005D88D8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v13 = (int *)sub_100094134((uint64_t *)&unk_10091F0B0);
      uint64_t v14 = v13[12];
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for UUID();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
      v18(v15, v16, v17);
      v18(&a1[v13[16]], &a2[v13[16]], v17);
      *(void *)&a1[v13[20]] = *(void *)&a2[v13[20]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v7 = sub_100094134(&qword_10091F0A8);
      uint64_t v8 = *(int *)(v7 + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      v12(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t sub_1005D8AF0(uint64_t a1)
{
  return sub_1005D68B8(a1);
}

uint64_t sub_1005D8B10(void *a1, unint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v41 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v3 = ~v6;
    unint64_t v41 = a2 + 64;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a2 + 64);
    unint64_t v5 = a2;
  }
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  int64_t v40 = (unint64_t)(v3 + 64) >> 6;
  unint64_t v42 = v5;
  while (1)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
      uint64_t v10 = a1;
      if (!__CocoaDictionary.Iterator.next()()) {
        goto LABEL_45;
      }
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v12 = v44;
      swift_unknownObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v13 = v44;
      swift_unknownObjectRelease();
      uint64_t v43 = v4;
      if (!v44) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v4)
      {
        uint64_t v10 = a1;
        uint64_t v43 = (v4 - 1) & v4;
        unint64_t v11 = __clz(__rbit64(v4)) | (v9 << 6);
      }
      else
      {
        int64_t v14 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_48;
        }
        int64_t v15 = v9;
        if (v14 >= v40) {
          goto LABEL_44;
        }
        unint64_t v16 = *(void *)(v41 + 8 * v14);
        ++v9;
        if (!v16)
        {
          int64_t v9 = v14 + 1;
          if (v14 + 1 >= v40) {
            goto LABEL_44;
          }
          unint64_t v16 = *(void *)(v41 + 8 * v9);
          if (!v16)
          {
            int64_t v9 = v14 + 2;
            if (v14 + 2 >= v40) {
              goto LABEL_44;
            }
            unint64_t v16 = *(void *)(v41 + 8 * v9);
            if (!v16)
            {
              int64_t v9 = v14 + 3;
              if (v14 + 3 >= v40) {
                goto LABEL_44;
              }
              unint64_t v16 = *(void *)(v41 + 8 * v9);
              if (!v16)
              {
                int64_t v9 = v14 + 4;
                if (v14 + 4 >= v40) {
                  goto LABEL_44;
                }
                unint64_t v16 = *(void *)(v41 + 8 * v9);
                if (!v16)
                {
                  uint64_t v17 = v15 + 6;
                  while (v40 != v17)
                  {
                    unint64_t v16 = *(void *)(v41 + 8 * v17++);
                    if (v16)
                    {
                      int64_t v9 = v17 - 1;
                      goto LABEL_31;
                    }
                  }
LABEL_44:
                  uint64_t v10 = a1;
LABEL_45:
                  sub_1000C1AF8();
                  return (uint64_t)v10;
                }
              }
            }
          }
        }
LABEL_31:
        uint64_t v10 = a1;
        uint64_t v43 = (v16 - 1) & v16;
        unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
      }
      uint64_t v18 = 8 * v11;
      uint64_t v19 = *(void **)(*(void *)(v5 + 56) + v18);
      id v12 = *(id *)(*(void *)(v5 + 48) + v18);
      id v13 = v19;
      if (!v12) {
        goto LABEL_45;
      }
    }
    uint64_t v20 = v3;
    id v21 = v12;
    uint64_t v22 = v13;
    id v23 = [v13 integerValue];
    uint64_t v24 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = v10;
    unint64_t v27 = sub_100306FE8((uint64_t)v21);
    uint64_t v28 = v10[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    char v31 = v26;
    if (v24[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        a1 = v44;
        if (v26) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_10031CEBC();
        a1 = v44;
        if (v31) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_100316514(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = sub_100306FE8((uint64_t)v21);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_49;
      }
      unint64_t v27 = v32;
      a1 = v44;
      if (v31)
      {
LABEL_8:
        *(void *)(a1[7] + 8 * v27) = v23;
        goto LABEL_9;
      }
    }
    a1[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v34 = 8 * v27;
    *(void *)(a1[6] + v34) = v21;
    *(void *)(a1[7] + v34) = v23;
    uint64_t v35 = a1[2];
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_47;
    }
    a1[2] = v37;
    id v38 = v21;
LABEL_9:

    swift_bridgeObjectRelease();
    uint64_t v3 = v20;
    unint64_t v5 = v42;
    unint64_t v4 = v43;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_1005D8F6C(id a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  uint64_t v8 = v7;
  id v15 = [v7 createResolutionTokenMapIfNecessary];
  NSString v16 = String._bridgeToObjectiveC()();
  unsigned int v17 = [v15 mergeWithMap:a4 forKey:v16];

  if (a7)
  {

    if (v17) {
      sub_100097E24((uint64_t)a1, a2);
    }
    else {
      return 0;
    }
  }
  else
  {
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v8 valueForKey:v18];

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v32, 0, sizeof(v32));
    }
    sub_100096408((uint64_t)v32, (uint64_t)v33, &qword_100908190);
    if (v33[3])
    {
      int v20 = swift_dynamicCast();
      if (v20) {
        uint64_t v21 = v30;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v20) {
        unint64_t v22 = v31;
      }
      else {
        unint64_t v22 = 0xF000000000000000;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)v33, &qword_100908190);
      uint64_t v21 = 0;
      unint64_t v22 = 0xF000000000000000;
    }
    v33[0] = 0;
    id v23 = [v8 remObjectIDWithError:v33];
    a1 = v33[0];
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = v33[0];
      a1 = (id)sub_1005E1BEC(a3, v21, v22, a5, a6, v24);

      if (!v29)
      {
        sub_100097F20(v21, v22);

        return a1;
      }
      sub_100097F20(v21, v22);
    }
    else
    {
      id v26 = v33[0];
      sub_100097F20(v21, v22);
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return a1;
}

uint64_t sub_1005D91F8(char a1)
{
  uint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
    case 14:
    case 30:
      uint64_t result = 0xD000000000000012;
      break;
    case 2:
      uint64_t result = 0xD000000000000017;
      break;
    case 3:
      uint64_t result = 0x6F54636E79536164;
      break;
    case 4:
      uint64_t result = 0x654B687375506164;
      break;
    case 5:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      uint64_t result = 0x65526B6C75426164;
      break;
    case 7:
      uint64_t result = 0x616C707369446164;
      break;
    case 8:
      uint64_t result = 0xD000000000000016;
      break;
    case 9:
      uint64_t result = 0x6461655273496164;
      break;
    case 10:
      uint64_t result = 0x756D6D4973496164;
      break;
    case 11:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 12:
      uint64_t result = 0xD000000000000017;
      break;
    case 13:
      uint64_t result = 0x70756F72477369;
      break;
    case 15:
      uint64_t result = 1701667182;
      break;
    case 16:
      uint64_t result = 0x726F6C6F63;
      break;
    case 17:
      uint64_t result = 0x626D456567646162;
      break;
    case 18:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 19:
      uint64_t result = 0xD000000000000024;
      break;
    case 20:
      uint64_t result = 0x4C797265636F7267;
      break;
    case 21:
      uint64_t result = 0xD00000000000002CLL;
      break;
    case 22:
      uint64_t result = 0xD000000000000017;
      break;
    case 23:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 24:
      uint64_t result = 0xD000000000000020;
      break;
    case 25:
      uint64_t result = 0xD000000000000018;
      break;
    case 26:
      uint64_t result = 0xD00000000000001FLL;
      break;
    case 27:
      uint64_t result = 0x6574616C706D6574;
      break;
    case 28:
    case 29:
      uint64_t result = 0x774F646572616873;
      break;
    case 31:
      unsigned int v3 = 1918986355;
      goto LABEL_33;
    case 32:
      uint64_t result = 0x73656572616873;
      break;
    case 33:
      uint64_t result = 0xD000000000000013;
      break;
    case 34:
      unsigned int v3 = 1953656691;
LABEL_33:
      uint64_t result = v3 | 0x53676E6900000000;
      break;
    case 35:
      uint64_t result = 0x614464656E6E6970;
      break;
    case 36:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 37:
      uint64_t result = 0xD000000000000019;
      break;
    case 38:
      uint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005D96C8(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091F268, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1005D96F4(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091F280, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_1005D9720(uint64_t a1)
{
  return sub_100156B24(a1, qword_10091F298, &qword_100907848, (uint64_t)qword_100942520);
}

unint64_t sub_1005D974C(char a1)
{
  unint64_t result = 0x49746E756F636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0x6341746E65726170;
      break;
    case 4:
      unint64_t result = 0x694C746E65726170;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1005D9858(char a1)
{
  unint64_t result = 0xD00000000000001CLL;
  if (a1 == 1) {
    return 0xD00000000000001FLL;
  }
  return result;
}

uint64_t sub_1005D98B4(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1005D91F8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1005D91F8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1005D9940()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1005D91F8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1005D99A4()
{
  sub_1005D91F8(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005D99F8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1005D91F8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1005D9A58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1005E1B98();
  *a1 = result;
  return result;
}

uint64_t sub_1005D9A88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005D91F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005D9AB4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1005E1B98();
  *a1 = result;
  return result;
}

uint64_t sub_1005D9ADC()
{
  return sub_1005D91F8(*v0);
}

void sub_1005D9AE4(void *a1@<X8>)
{
  *a1 = &off_1008B5958;
}

uint64_t sub_1005D9AF4(unsigned __int8 *a1, char *a2)
{
  return sub_1002F3040(*a1, *a2);
}

Swift::Int sub_1005D9B00()
{
  return sub_1002F0878();
}

uint64_t sub_1005D9B0C()
{
  return sub_1002F4B88();
}

Swift::Int sub_1005D9B14()
{
  return sub_1002F0878();
}

unint64_t sub_1005D9B1C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005E1B00(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1005D9B4C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1005D974C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1005D9B78@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005E1B00(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1005D9BA0()
{
  return sub_1005D974C(*v0);
}

void sub_1005D9BA8(void *a1@<X8>)
{
  *a1 = &off_1008B59A0;
}

uint64_t sub_1005D9BB8(char *a1, char *a2)
{
  return sub_1002F2F94(*a1, *a2);
}

Swift::Int sub_1005D9BC4()
{
  return Hasher._finalize()();
}

uint64_t sub_1005D9C4C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005D9CC0()
{
  return Hasher._finalize()();
}

uint64_t sub_1005D9D44@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4F60, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1005D9DA4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7265646E696D6572;
  if (*v1) {
    uint64_t v2 = 0x736E6F6974636573;
  }
  unint64_t v3 = 0xE900000000000073;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1005D9DE8@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4F60, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1005D9E4C()
{
  if (*v0) {
    return 0x736E6F6974636573;
  }
  else {
    return 0x7265646E696D6572;
  }
}

void sub_1005D9E8C(void *a1@<X8>)
{
  *a1 = &off_1008B7610;
}

uint64_t sub_1005D9E9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F2E9C(*a1, *a2);
}

Swift::Int sub_1005D9EA8()
{
  return sub_1005958C0();
}

uint64_t sub_1005D9EB0()
{
  return sub_1002F4AF8();
}

Swift::Int sub_1005D9EB8()
{
  return sub_1002F09C8();
}

unint64_t sub_1005D9EC0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005E1B4C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1005D9EF0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1005D9858(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1005D9F1C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1005E1B4C(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1005D9F44()
{
  return sub_1005D9858(*v0);
}

void sub_1005D9F4C(void *a1@<X8>)
{
  *a1 = &off_1008B7638;
}

void *sub_1005D9F5C()
{
  unint64_t result = sub_1005D9F7C();
  qword_1009425D8 = (uint64_t)result;
  return result;
}

void *sub_1005D9F7C()
{
  uint64_t v0 = 39;
  char v1 = &byte_1008B5978;
  do
  {
    char v4 = *v1++;
    char v3 = v4;
    if (((1 << v4) & 0xFFFDFFFFFLL) != 0)
    {
      uint64_t v5 = sub_1005D91F8(v3);
      uint64_t v7 = v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v10 = sub_1001806F8(v5, v7);
      uint64_t v11 = _swiftEmptyDictionarySingleton[2];
      BOOL v12 = (v9 & 1) == 0;
      uint64_t v13 = v11 + v12;
      if (__OFADD__(v11, v12)) {
        goto LABEL_42;
      }
      char v14 = v9;
      if (_swiftEmptyDictionarySingleton[3] < v13)
      {
        sub_10030E654(v13, isUniquelyReferenced_nonNull_native);
        unint64_t v15 = sub_1001806F8(v5, v7);
        if ((v14 & 1) != (v16 & 1)) {
          goto LABEL_45;
        }
        unint64_t v10 = v15;
        if ((v14 & 1) == 0) {
          goto LABEL_13;
        }
LABEL_2:
        uint64_t v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
        swift_bridgeObjectRelease();
        *uint64_t v2 = v5;
        v2[1] = v7;
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v9) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v14) {
          goto LABEL_2;
        }
      }
LABEL_13:
      _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
      unsigned int v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v10);
      uint64_t *v17 = v5;
      v17[1] = v7;
      NSString v18 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
      *NSString v18 = v5;
      v18[1] = v7;
      uint64_t v19 = _swiftEmptyDictionarySingleton[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_44;
      }
      _swiftEmptyDictionarySingleton[2] = v21;
      swift_bridgeObjectRetain();
      goto LABEL_3;
    }
LABEL_4:
    --v0;
  }
  while (v0);
  uint64_t v22 = 7;
  id v23 = &byte_1008B59C0;
  do
  {
    int v25 = *v23++;
    unint64_t v26 = 0xE900000000000044;
    uint64_t v27 = 0x49746E756F636361;
    unint64_t v28 = 0xE900000000000044;
    switch(v25)
    {
      case 1:
        uint64_t v27 = 0xD000000000000016;
        uint64_t v29 = "publicLinkExpirationDate";
        goto LABEL_26;
      case 2:
        uint64_t v27 = 0xD00000000000001BLL;
        uint64_t v29 = "childListIDsToUndelete";
        goto LABEL_26;
      case 3:
        unint64_t v28 = 0xED0000746E756F63;
        unint64_t v26 = 0xEF4449746E756F63;
        uint64_t v27 = 0x6341746E65726170;
        break;
      case 4:
        unint64_t v28 = 0xEA00000000007473;
        unint64_t v26 = 0xEC00000044497473;
        uint64_t v27 = 0x694C746E65726170;
        break;
      case 5:
        uint64_t v27 = 0xD000000000000015;
        uint64_t v29 = "ntAccountID";
LABEL_26:
        unint64_t v26 = (unint64_t)v29 | 0x8000000000000000;
        goto LABEL_28;
      case 6:
        unint64_t v26 = 0x80000001007C6240;
        uint64_t v27 = 0xD000000000000014;
LABEL_28:
        unint64_t v28 = v26;
        break;
      default:
        break;
    }
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v32 = sub_1001806F8(v27, v26);
    uint64_t v33 = _swiftEmptyDictionarySingleton[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1005DA3B4);
    }
    char v36 = v31;
    if (_swiftEmptyDictionarySingleton[3] >= v35)
    {
      if (v30)
      {
        if (v31) {
          goto LABEL_18;
        }
      }
      else
      {
        sub_100318A14();
        if (v36) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      sub_10030E654(v35, v30);
      unint64_t v37 = sub_1001806F8(v27, v26);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_45;
      }
      unint64_t v32 = v37;
      if (v36)
      {
LABEL_18:
        uint64_t v24 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v32);
        swift_bridgeObjectRelease();
        *uint64_t v24 = v27;
        v24[1] = v28;
        goto LABEL_19;
      }
    }
    _swiftEmptyDictionarySingleton[(v32 >> 6) + 8] |= 1 << v32;
    uint64_t v39 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v32);
    *uint64_t v39 = v27;
    v39[1] = v26;
    int64_t v40 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v32);
    *int64_t v40 = v27;
    v40[1] = v28;
    uint64_t v41 = _swiftEmptyDictionarySingleton[2];
    BOOL v20 = __OFADD__(v41, 1);
    uint64_t v42 = v41 + 1;
    if (v20) {
      goto LABEL_43;
    }
    _swiftEmptyDictionarySingleton[2] = v42;
    swift_bridgeObjectRetain();
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    --v22;
  }
  while (v22);
  return _swiftEmptyDictionarySingleton;
}

void sub_1005DA3D0(NSObject *a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v363 = a4;
  uint64_t v356 = *v4;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unsigned int v360 = (char *)&v337 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  v352 = (char *)&v337 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v359 = (char *)&v337 - v14;
  __chkstk_darwin(v15);
  unint64_t v354 = (char *)&v337 - v16;
  uint64_t v17 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v17 - 8);
  uint64_t v358 = (char *)&v337 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v362 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v362 - 8);
  *(void *)&double v20 = __chkstk_darwin(v362).n128_u64[0];
  v361 = (char *)&v337 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a2;
  id v23 = [a2 createResolutionTokenMapIfNecessary];
  id v24 = [a1 resolutionTokenMap];
  int v25 = v23;
  id v364 = v23;
  if (!v24)
  {
    if (qword_100907A00 != -1) {
      swift_once();
    }
    uint64_t v221 = type metadata accessor for Logger();
    sub_10008E2DC(v221, (uint64_t)qword_10091F268);
    swift_bridgeObjectRetain_n();
    uint64_t v222 = a3;
    uint64_t v223 = a1;
    uint64_t v224 = Logger.logObject.getter();
    int v225 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v224, (os_log_type_t)v225))
    {
      LODWORD(v369) = v225;
      id v226 = v25;
      uint64_t v227 = swift_slowAlloc();
      uint64_t v228 = (void *)swift_slowAlloc();
      uint64_t v229 = (char *)swift_slowAlloc();
      v371[0] = v229;
      *(_DWORD *)uint64_t v227 = 138543618;
      char v230 = [v223 objectID];
      p_Class isa = v230;
      uint64_t v368 = &v373;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v370 = v228;
      void *v228 = v230;

      *(_WORD *)(v227 + 12) = 2082;
      int64_t v231 = *(void *)(v222 + 16);
      uint64_t v355 = v222;
      if (v231)
      {
        uint64_t v366 = v229;
        uint64_t v367 = v224;
        p_Class isa = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v231, 0);
        uint64_t v232 = p_isa;
        uint64_t v233 = (char *)(v222 + 32);
        unint64_t v234 = p_isa[2];
        uint64_t v235 = 2 * v234;
        do
        {
          char v236 = *v233++;
          uint64_t v237 = sub_1005D91F8(v236);
          uint64_t v239 = v238;
          p_Class isa = v232;
          unint64_t v240 = v232[3];
          if (v234 >= v240 >> 1)
          {
            sub_1001DE058(v240 > 1, v234 + 1, 1);
            uint64_t v232 = p_isa;
          }
          v232[2] = v234 + 1;
          uint64_t v241 = &v232[v235];
          v241[4] = v237;
          v241[5] = v239;
          v235 += 2;
          ++v234;
          --v231;
        }
        while (v231);
        id v226 = v364;
        uint64_t v224 = v367;
      }
      uint64_t v253 = Array.description.getter();
      unint64_t v255 = v254;
      swift_bridgeObjectRelease();
      p_Class isa = (void *)sub_1000C51B8(v253, v255, (uint64_t *)v371);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v369, "REMListStorageCDIngestor: merge(storage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v227, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      int v25 = v226;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v256 = self;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v258 = String._bridgeToObjectiveC()();
    [v256 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v258];

    swift_willThrow();
    return;
  }
  uint64_t v353 = v8;
  unint64_t v26 = v24;
  uint64_t v27 = (char *)sub_100480CF0(v24, a3);
  unint64_t v28 = v27;
  uint64_t v29 = *(char **)(a3 + 16);
  uint64_t v367 = a1;
  id v357 = v26;
  if (!v29)
  {
    uint64_t v29 = v27;
    BOOL v34 = a1;
    id v242 = v370;
    id v35 = v25;
    uint64_t v33 = v22;
    goto LABEL_271;
  }
  uint64_t v30 = a3 + 32;
  unint64_t v345 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  v348 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v344 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  Swift::Int v339 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v341 = (void (**)(void))(v19 + 32);
  uint64_t v343 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v340 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v347 = (void (**)(char *, uint64_t))(v19 + 8);
  swift_bridgeObjectRetain();
  char v31 = 0;
  int v351 = 0;
  int v350 = 0;
  unsigned int v346 = 0;
  unint64_t v342 = v29 - 1;
  uint64_t v355 = a3;
  uint64_t v349 = a3 + 33;
  unint64_t v32 = v29;
  uint64_t v369 = (char *)v28;
  uint64_t v33 = v22;
  uint64_t v368 = v22;
  uint64_t v366 = v29;
  v365 = (void *)v30;
  BOOL v34 = a1;
  id v35 = v25;
  while (2)
  {
    char v36 = v31 + 1;
    switch(v31[v30])
    {
      case 1:
LABEL_16:
        id v45 = [v34 externalIdentifier];
        [v33 setExternalIdentifier:v45];
        goto LABEL_171;
      case 2:
LABEL_18:
        id v45 = [v34 externalModificationTag];
        [v33 setExternalModificationTag:v45];
        goto LABEL_171;
      case 3:
LABEL_20:
        id v45 = [v34 daSyncToken];
        [v33 setDaSyncToken:v45];
        goto LABEL_171;
      case 4:
LABEL_22:
        id v45 = [v34 daPushKey];
        [v33 setDaPushKey:v45];
        goto LABEL_171;
      case 5:
LABEL_24:
        id v45 = [v34 daExternalIdentificationTag];
        [v33 setDaExternalIdentificationTag:v45];
        goto LABEL_171;
      case 6:
LABEL_26:
        id v46 = [v34 daBulkRequests];
        if (!v46) {
          goto LABEL_225;
        }
        uint64_t v47 = v46;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v48 = self;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v371[0] = 0;
        id v50 = [v48 dataWithPropertyList:isa format:100 options:0 error:v371];

        id v51 = v371[0];
        if (v50)
        {
          uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;

          Class v55 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v33 = v368;
          [v368 setDaBulkRequests:v55];

          sub_100097F34(v52, v54);
        }
        else
        {
          unint64_t v56 = v51;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
          id v370 = 0;
          uint64_t v33 = v368;
        }
        unint64_t v28 = v369;
        uint64_t v29 = v366;
        goto LABEL_223;
      case 7:
LABEL_32:
        [v33 setDaDisplayOrder:[v34 daDisplayOrder]];
        goto LABEL_225;
      case 8:
LABEL_34:
        [v33 setDaIsEventOnlyContainer:[v34 daIsEventOnlyContainer]];
        goto LABEL_225;
      case 9:
LABEL_36:
        [v33 setDaIsReadOnly:[v34 daIsReadOnly]];
        goto LABEL_225;
      case 10:
LABEL_38:
        [v33 setDaIsImmutable:[v34 daIsImmutable]];
        goto LABEL_225;
      case 11:
LABEL_40:
        [v33 setDaIsNotificationsCollection:[v34 daIsNotificationsCollection]];
        goto LABEL_225;
      case 12:
LABEL_42:
        if (qword_100907A18 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009425D8 + 16)) {
          goto LABEL_49;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD000000000000017, 0x80000001007C63B0);
        if (v57)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_49:
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v58 = type metadata accessor for Logger();
          sub_10008E2DC(v58, (uint64_t)qword_100917690);
          uint64_t v59 = Logger.logObject.getter();
          os_log_type_t v60 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v59, v60))
          {
            uint64_t v61 = swift_slowAlloc();
            v371[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 136315138;
            *(void *)(v61 + 4) = sub_1000C51B8(0xD000000000000017, 0x80000001007C63B0, (uint64_t *)v371);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unknown ingestable key {key: %s}", (uint8_t *)v61, 0xCu);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            id v35 = v364;
            swift_slowDealloc();
            swift_slowDealloc();
          }

          uint64_t v30 = (uint64_t)v365;
        }
        NSString v62 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v28 = v369;
        unsigned __int8 v63 = [v35 mergeWithMap:v369 forKey:v62];

        uint64_t v33 = v368;
        if ((v63 & 1) == 0) {
          goto LABEL_224;
        }
        BOOL v34 = v367;
        [v368 setMinimumSupportedVersion:[v367 minimumSupportedVersion]];
        goto LABEL_225;
      case 13:
LABEL_57:
        [v33 setIsGroup:[v34 isGroup]];
        goto LABEL_225;
      case 14:
LABEL_59:
        id v64 = v35;
        unint64_t v65 = v28;
        uint64_t v66 = v64;
        BOOL v67 = v34;
        sub_10047EDE8(14);
        NSString v68 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v69 = v66;
        uint64_t v70 = v66;
        unint64_t v28 = v65;
        unsigned int v71 = [v70 mergeWithMap:v65 forKey:v68];

        if (v71)
        {
          BOOL v34 = v67;
          Class v72 = (Class)[v67 lastUserAccessDate];
          if (v72)
          {
            uint64_t v73 = v360;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v74 = v354;
            uint64_t v75 = v353;
            (*v345)(v354, v73, v353);
            (*v348)(v74, 0, 1, v75);
            if ((*v344)(v74, 1, v75) == 1)
            {
              Class v72 = 0;
            }
            else
            {
              v76.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
              uint64_t v77 = v74;
              Class v72 = v76.super.isa;
              (*v339)(v77, v75);
            }
            BOOL v34 = v67;
            unint64_t v28 = v65;
          }
          else
          {
            (*v348)(v354, 1, 1, v353);
          }
          uint64_t v33 = v368;
          [v368 setLastUserAccessDate:v72];

          id v35 = v69;
        }
        else
        {
          BOOL v34 = v67;
          uint64_t v33 = v368;
          id v35 = v69;
        }
        goto LABEL_225;
      case 15:
LABEL_69:
        if (qword_100907A18 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009425D8 + 16)) {
          goto LABEL_76;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(1701667182, 0xE400000000000000);
        if (v78)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_76:
          uint64_t v79 = v33;
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v80 = type metadata accessor for Logger();
          sub_10008E2DC(v80, (uint64_t)qword_100917690);
          uint64_t v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v81, v82))
          {
            uint64_t v83 = swift_slowAlloc();
            v371[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v83 = 136315138;
            *(void *)(v83 + 4) = sub_1000C51B8(1701667182, 0xE400000000000000, (uint64_t *)v371);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "Unknown ingestable key {key: %s}", (uint8_t *)v83, 0xCu);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            id v35 = v364;
            swift_slowDealloc();
            uint64_t v33 = v368;
            swift_slowDealloc();

            uint64_t v30 = (uint64_t)v365;
          }
          else
          {

            uint64_t v30 = (uint64_t)v365;
            uint64_t v33 = v79;
          }
        }
        NSString v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v28 = v369;
        unsigned __int8 v85 = [v35 mergeWithMap:v369 forKey:v84];

        if ((v85 & 1) == 0) {
          goto LABEL_224;
        }
        BOOL v34 = v367;
        id v45 = [v367 name];
        if (!v45)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v45 = String._bridgeToObjectiveC()();
          BOOL v34 = v367;
          swift_bridgeObjectRelease();
        }
        [v33 setName:v45];
        goto LABEL_171;
      case 16:
LABEL_86:
        if (qword_100907A18 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009425D8 + 16)) {
          goto LABEL_93;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0x726F6C6F63, 0xE500000000000000);
        if (v86)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_93:
          unint64_t v87 = v33;
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v88 = type metadata accessor for Logger();
          sub_10008E2DC(v88, (uint64_t)qword_100917690);
          uint64_t v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v89, v90))
          {
            uint64_t v91 = swift_slowAlloc();
            v371[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v91 = 136315138;
            *(void *)(v91 + 4) = sub_1000C51B8(0x726F6C6F63, 0xE500000000000000, (uint64_t *)v371);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Unknown ingestable key {key: %s}", (uint8_t *)v91, 0xCu);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            id v35 = v364;
            swift_slowDealloc();
            uint64_t v33 = v368;
            swift_slowDealloc();

            uint64_t v30 = (uint64_t)v365;
          }
          else
          {

            uint64_t v30 = (uint64_t)v365;
            uint64_t v33 = v87;
          }
        }
        NSString v92 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v28 = v369;
        unsigned __int8 v93 = [v35 mergeWithMap:v369 forKey:v92];

        if ((v93 & 1) == 0) {
          goto LABEL_224;
        }
        BOOL v34 = v367;
        id v45 = [v367 color];
        [v33 setColor:v45];
        goto LABEL_171;
      case 17:
LABEL_101:
        if (qword_100907A18 != -1) {
          swift_once();
        }
        if (!*(void *)(qword_1009425D8 + 16)) {
          goto LABEL_108;
        }
        swift_bridgeObjectRetain();
        sub_1001806F8(0x626D456567646162, 0xEB000000006D656CLL);
        if (v94)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_108:
          uint64_t v95 = v33;
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v96 = type metadata accessor for Logger();
          sub_10008E2DC(v96, (uint64_t)qword_100917690);
          uint64_t v97 = Logger.logObject.getter();
          os_log_type_t v98 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v97, v98))
          {
            uint64_t v99 = swift_slowAlloc();
            v371[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v99 = 136315138;
            *(void *)(v99 + 4) = sub_1000C51B8(0x626D456567646162, 0xEB000000006D656CLL, (uint64_t *)v371);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v97, v98, "Unknown ingestable key {key: %s}", (uint8_t *)v99, 0xCu);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            id v35 = v364;
            swift_slowDealloc();
            uint64_t v33 = v368;
            swift_slowDealloc();

            uint64_t v30 = (uint64_t)v365;
          }
          else
          {

            uint64_t v30 = (uint64_t)v365;
            uint64_t v33 = v95;
          }
        }
        NSString v100 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v28 = v369;
        unsigned __int8 v101 = [v35 mergeWithMap:v369 forKey:v100];

        if ((v101 & 1) == 0) {
          goto LABEL_224;
        }
        BOOL v34 = v367;
        id v45 = [v367 badgeEmblem];
        [v33 setBadgeEmblem:v45];
        goto LABEL_171;
      case 18:
LABEL_116:
        if (qword_100907A18 != -1) {
          swift_once();
        }
        id v102 = v35;
        if (!*(void *)(qword_1009425D8 + 16)) {
          goto LABEL_123;
        }
        uint64_t v103 = v34;
        swift_bridgeObjectRetain();
        sub_1001806F8(0xD00000000000001CLL, 0x80000001007C63F0);
        if (v104)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_123:
          uint64_t v103 = v34;
          swift_bridgeObjectRelease();
          if (qword_1009074C8 != -1) {
            swift_once();
          }
          uint64_t v105 = type metadata accessor for Logger();
          sub_10008E2DC(v105, (uint64_t)qword_100917690);
          unint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            v371[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v108 = 136315138;
            *(void *)(v108 + 4) = sub_1000C51B8(0xD00000000000001CLL, 0x80000001007C63F0, (uint64_t *)v371);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v106, v107, "Unknown ingestable key {key: %s}", (uint8_t *)v108, 0xCu);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            uint64_t v103 = v367;
            swift_slowDealloc();
            id v109 = v364;
            uint64_t v30 = (uint64_t)v365;
            swift_slowDealloc();

            goto LABEL_129;
          }
        }
        id v109 = v102;
LABEL_129:
        NSString v110 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v111 = v109;
        int v112 = v109;
        uint64_t v113 = v369;
        unsigned __int8 v114 = [v112 mergeWithMap:forKey:];

        uint64_t v33 = v368;
        if (v114)
        {
          BOOL v34 = v103;
          if ([v103 shouldCategorizeGroceryItems]) {
            unsigned int v346 = [v33 shouldCategorizeGroceryItems] ^ 1;
          }
          else {
            unsigned int v346 = 0;
          }
          id v35 = v111;
          [v33 setShouldCategorizeGroceryItems:[v34 shouldCategorizeGroceryItems]];
          unint64_t v28 = v113;
        }
        else
        {
          BOOL v34 = v103;
          id v35 = v111;
          unint64_t v28 = v113;
        }
        goto LABEL_225;
      case 19:
      case 21:
      case 24:
      case 36:
        goto LABEL_225;
      case 20:
LABEL_136:
        uint64_t v115 = v28;
        uint64_t v116 = v33;
        unint64_t v117 = v34;
        sub_10047EDE8(20);
        NSString v118 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v119 = [v35 mergeWithMap:v115 forKey:v118];

        BOOL v34 = v117;
        if (v119)
        {
          id v120 = [v117 groceryLocaleID];
          uint64_t v33 = v116;
          [v116 setGroceryLocaleID:v120];
        }
        else
        {
          uint64_t v33 = v116;
        }
        unint64_t v28 = v115;
        goto LABEL_196;
      case 22:
LABEL_141:
        [v33 setShowingLargeAttachments:[v34 showingLargeAttachments]];
        goto LABEL_225;
      case 23:
LABEL_143:
        char v121 = *(unsigned char *)(v363 + 16);
        id v122 = v370;
        uint64_t v123 = sub_1005DE140(v121);
        if (v122)
        {

          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v126 = (uint64_t)v123;
        unint64_t v127 = v124;
        uint64_t v128 = v125;
        id v129 = sub_1005D8F6C(v123, v124, v125, (uint64_t)v369, 0xD00000000000001CLL, 0x80000001007C6260, v121);
        unint64_t v131 = v130;
        id v370 = 0;
        if (v130 >> 60 == 15)
        {
          sub_100097F20(v126, v127);

          uint64_t v33 = v368;
          unint64_t v28 = v369;
          uint64_t v29 = v366;
          uint64_t v30 = (uint64_t)v365;
        }
        else
        {
          uint64_t v132 = (uint64_t)v129;
          Class v133 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v134 = v368;
          [v368 setReminderIDsMergeableOrdering:v133];
          sub_100097F20(v126, v127);

          uint64_t v135 = v367;
          id v136 = v364;

          uint64_t v137 = v132;
          BOOL v34 = v135;
          sub_100097F20(v137, v131);
          unint64_t v138 = v134;
          id v35 = v136;
          uint64_t v33 = v138;
          unint64_t v28 = v369;
LABEL_195:
          uint64_t v29 = v366;
LABEL_196:
          uint64_t v30 = (uint64_t)v365;
        }
LABEL_225:
        if (v36 != v29) {
          goto LABEL_226;
        }
        swift_bridgeObjectRelease();
        id v242 = v370;
        if (v351) {
          goto LABEL_252;
        }
LABEL_263:
        if ((v350 & 1) != 0 || (v346 & 1) == 0)
        {
          uint64_t v29 = (char *)v28;
          goto LABEL_271;
        }
        sub_1005E3B40(v33);
        if (v242)
        {
          unint64_t v259 = v35;
          unint64_t v260 = v28;
          if (qword_100907A00 != -1) {
            swift_once();
          }
          uint64_t v261 = type metadata accessor for Logger();
          sub_10008E2DC(v261, (uint64_t)qword_10091F268);
          int v262 = v34;
          swift_errorRetain();
          uint64_t v263 = v262;
          swift_errorRetain();
          id v264 = Logger.logObject.getter();
          os_log_type_t v265 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v264, v265))
          {
            uint64_t v266 = swift_slowAlloc();
            uint64_t v267 = swift_slowAlloc();
            id v370 = v242;
            unint64_t v268 = (void *)v267;
            uint64_t v368 = swift_slowAlloc();
            p_Class isa = &v368->isa;
            *(_DWORD *)uint64_t v266 = 136446722;
            v371[0] = v356;
            swift_getMetatypeMetadata();
            uint64_t v269 = String.init<A>(describing:)();
            v371[0] = (id)sub_1000C51B8(v269, v270, (uint64_t *)&p_isa);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v266 + 12) = 2112;
            id v271 = [v263 objectID];
            v371[0] = v271;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v268 = v271;

            *(_WORD *)(v266 + 22) = 2080;
            swift_getErrorValue();
            uint64_t v272 = Error.rem_errorDescription.getter();
            v371[0] = (id)sub_1000C51B8(v272, v273, (uint64_t *)&p_isa);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v264, v265, "%{public}s: Failed to auto-categorize reminders in list after changing 'shouldCategorizeGroceryItems' to 'true' {listObjectID: %@, error: %s}", (uint8_t *)v266, 0x20u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_278;
          }

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        else
        {
        }
        return;
      case 25:
LABEL_148:
        id v139 = v35;
        id v140 = v33;
        uint64_t v141 = v34;
        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v142 = type metadata accessor for Logger();
        sub_10008E2DC(v142, (uint64_t)qword_10091F268);
        int v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v143, v144)) {
          goto LABEL_158;
        }
        uint64_t v145 = v28;
        uint64_t v146 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v146 = 0;
        unint64_t v147 = "Actually really doing nothing for a merge on .reminderIDsOrderingHints";
        goto LABEL_157;
      case 26:
LABEL_153:
        id v139 = v35;
        id v140 = v33;
        uint64_t v141 = v34;
        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v148 = type metadata accessor for Logger();
        sub_10008E2DC(v148, (uint64_t)qword_10091F268);
        int v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v143, v144)) {
          goto LABEL_158;
        }
        uint64_t v145 = v28;
        uint64_t v146 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v146 = 0;
        unint64_t v147 = "Actually really doing nothing for a merge on .remindersICSDisplayOrderChanged";
LABEL_157:
        _os_log_impl((void *)&_mh_execute_header, v143, v144, v147, v146, 2u);
        unint64_t v28 = v145;
        uint64_t v29 = v366;
        swift_slowDealloc();
LABEL_158:

        BOOL v34 = v141;
        uint64_t v33 = v140;
        id v35 = v139;
        goto LABEL_225;
      case 27:
        if (v36 == v29)
        {
LABEL_299:
          swift_bridgeObjectRelease();
          goto LABEL_303;
        }
        uint64_t v44 = v32 - 1;
        while (2)
        {
          if (v44 != v31)
          {
            switch(v31[v349])
            {
              case 1:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_16;
              case 2:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_18;
              case 3:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_20;
              case 4:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_22;
              case 5:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_24;
              case 6:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_26;
              case 7:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_32;
              case 8:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_34;
              case 9:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_36;
              case 10:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_38;
              case 11:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_40;
              case 12:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_42;
              case 13:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_57;
              case 14:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_59;
              case 15:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_69;
              case 16:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_86;
              case 17:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_101;
              case 18:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_116;
              case 19:
              case 21:
              case 24:
              case 36:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_225;
              case 20:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_136;
              case 22:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_141;
              case 23:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_143;
              case 25:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_148;
              case 26:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_153;
              case 27:
                if (v342 == ++v31) {
                  goto LABEL_299;
                }
                continue;
              case 28:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_160;
              case 29:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_168;
              case 30:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_170;
              case 31:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_173;
              case 32:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_180;
              case 33:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_182;
              case 34:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_186;
              case 35:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_190;
              case 37:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_214;
              case 38:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_232;
              default:
                char v36 = v31 + 2;
                int v351 = 1;
                goto LABEL_5;
            }
          }
          goto LABEL_305;
        }
      case 28:
LABEL_160:
        id v149 = [v34 sharedOwnerID];
        id v45 = v149;
        if (v149)
        {
          unint64_t v150 = v33;
          os_log_t v151 = v34;
          uint64_t v152 = v28;
          id v153 = [v149 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v154 = v358;
          uint64_t v155 = v362;
          (*v341)();
          (*v343)(v154, 0, 1, v155);
          if ((*v340)(v154, 1, v155) == 1)
          {
            id v45 = 0;
          }
          else
          {
            id v45 = UUID._bridgeToObjectiveC()().super.isa;
            (*v347)(v154, v155);
          }
          unint64_t v28 = v152;
          uint64_t v29 = v366;
          BOOL v34 = v151;
          uint64_t v33 = v150;
        }
        else
        {
          (*v343)(v358, 1, 1, v362);
        }
        [v33 setSharedOwnerIdentifier:v45];
        goto LABEL_171;
      case 29:
LABEL_168:
        id v45 = [v34 sharedOwnerName];
        [v33 setSharedOwnerName:v45];
        goto LABEL_171;
      case 30:
LABEL_170:
        id v45 = [v34 sharedOwnerAddress];
        [v33 setSharedOwnerAddress:v45];
        goto LABEL_171;
      case 31:
LABEL_173:
        uint64_t v156 = (uint64_t)[v34 sharingStatus];
        uint64_t v157 = 0x7FFFLL;
        if (v156 < 0x7FFF) {
          uint64_t v157 = v156;
        }
        if (v157 <= -32768) {
          uint64_t v158 = -32768;
        }
        else {
          uint64_t v158 = v157;
        }
        [v33 setSharingStatus:v158];
        goto LABEL_225;
      case 32:
LABEL_180:
        id v159 = v370;
        sub_1005E233C(v34, v33);
        goto LABEL_183;
      case 33:
LABEL_182:
        id v159 = v370;
        sub_1005E2A48(v34, v33);
LABEL_183:
        id v370 = v159;
        if (!v159) {
          goto LABEL_225;
        }

        swift_bridgeObjectRelease();
        return;
      case 34:
LABEL_186:
        uint64_t v160 = v33;
        uint64_t v161 = v34;
        sub_10047EDE8(34);
        NSString v162 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v163 = [v35 mergeWithMap:v28 forKey:v162];

        if (v163)
        {
          id v164 = [v161 sortingStyle];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          BOOL v34 = v161;
          id v45 = String._bridgeToObjectiveC()();
          uint64_t v29 = v366;
          swift_bridgeObjectRelease();
          uint64_t v33 = v160;
          [v160 setSortingStyle:v45];
          goto LABEL_171;
        }
        BOOL v34 = v161;
        uint64_t v33 = v160;
        goto LABEL_225;
      case 35:
LABEL_190:
        unint64_t v165 = (unint64_t)[v34 pinnedDate];
        if (v165)
        {
          int v166 = v34;
          unint64_t v167 = v360;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v168 = (uint64_t)v359;
          uint64_t v169 = v167;
          BOOL v34 = v166;
          uint64_t v170 = v353;
          (*v345)(v359, v169, v353);
          os_log_t v171 = *v348;
          (*v348)((char *)v168, 0, 1, v170);
          unint64_t v165 = (*v344)((char *)v168, 1, v170) != 1;
        }
        else
        {
          os_log_t v171 = *v348;
          uint64_t v168 = (uint64_t)v359;
          (*v348)(v359, 1, 1, v353);
        }
        sub_1000966BC(v168, (uint64_t *)&unk_100909A40);
        [v33 setIsPinnedByCurrentUser:v165];
        uint64_t v172 = (char *)[v34 sharingStatus];
        if ((unint64_t)(v172 - 2) < 3)
        {
          unint64_t v28 = v369;
          uint64_t v33 = v368;
          goto LABEL_195;
        }
        if ((unint64_t)v172 > 1)
        {
          if (qword_100907A00 != -1) {
            swift_once();
          }
          uint64_t v178 = type metadata accessor for Logger();
          sub_10008E2DC(v178, (uint64_t)qword_10091F268);
          uint64_t v179 = v367;
          uint64_t v180 = Logger.logObject.getter();
          os_log_type_t v181 = static os_log_type_t.fault.getter();
          BOOL v182 = os_log_type_enabled(v180, v181);
          uint64_t v29 = v366;
          if (v182)
          {
            uint64_t v183 = swift_slowAlloc();
            uint64_t v184 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v183 = 138543618;
            id v185 = [v179 objectID];
            *(void *)(v183 + 4) = v185;
            *uint64_t v184 = v185;
            *(_WORD *)(v183 + 12) = 2050;
            *(void *)(v183 + 14) = [v179 sharingStatus];

            _os_log_impl((void *)&_mh_execute_header, v180, v181, "REMListStorageCDIngestor: merge(storage:into cdList:...) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}", (uint8_t *)v183, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          unint64_t v28 = v369;
          uint64_t v33 = v368;
          goto LABEL_223;
        }
        sub_10047EDE8(35);
        NSString v173 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v174 = [v35 mergeWithMap:v369 forKey:v173];

        uint64_t v29 = v366;
        if (!v174)
        {
          uint64_t v33 = v368;
          goto LABEL_222;
        }
        BOOL v34 = v367;
        id v45 = [v367 pinnedDate];
        uint64_t v33 = v368;
        if (v45)
        {
          uint64_t v175 = v360;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v176 = v352;
          uint64_t v177 = v353;
          (*v345)(v352, v175, v353);
          v171(v176, 0, 1, v177);
          if ((*v344)(v176, 1, v177) == 1)
          {
            id v45 = 0;
          }
          else
          {
            v186.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
            uint64_t v187 = v176;
            id v45 = v186.super.isa;
            (*v339)(v187, v177);
          }
          unint64_t v28 = v369;
          uint64_t v29 = v366;
          uint64_t v30 = (uint64_t)v365;
          BOOL v34 = v367;
        }
        else
        {
          v171(v352, 1, 1, v353);
          unint64_t v28 = v369;
          uint64_t v30 = (uint64_t)v365;
        }
        [v33 setPinnedDate:v45];
LABEL_171:

        goto LABEL_225;
      case 37:
LABEL_214:
        id v188 = [v34 unsavedSectionIDsOrdering];
        if (!v188) {
          goto LABEL_225;
        }
        uint64_t v189 = v188;
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        unint64_t v190 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v191 = v370;
        sub_10015E77C(v190, 1);
        id v370 = v191;
        if (v191)
        {
          swift_bridgeObjectRelease();
          if (qword_100907A10 != -1) {
            swift_once();
          }
          uint64_t v192 = type metadata accessor for Logger();
          sub_10008E2DC(v192, (uint64_t)qword_10091F298);
          uint64_t v193 = v367;
          swift_errorRetain();
          unint64_t v194 = v193;
          swift_errorRetain();
          uint64_t v195 = Logger.logObject.getter();
          os_log_type_t v196 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v195, v196))
          {
            uint64_t v197 = swift_slowAlloc();
            uint64_t v198 = (void *)swift_slowAlloc();
            Swift::Int v338 = (void *)swift_slowAlloc();
            p_Class isa = v338;
            *(_DWORD *)uint64_t v197 = 136446722;
            v371[0] = v356;
            swift_getMetatypeMetadata();
            uint64_t v199 = String.init<A>(describing:)();
            *(void *)(v197 + 4) = sub_1000C51B8(v199, v200, (uint64_t *)&p_isa);
            swift_bridgeObjectRelease();
            *(_WORD *)(v197 + 12) = 2114;
            id v201 = [v194 objectID];
            *(void *)(v197 + 14) = v201;
            *uint64_t v198 = v201;

            *(_WORD *)(v197 + 22) = 2082;
            swift_getErrorValue();
            uint64_t v202 = Error.rem_errorDescription.getter();
            *(void *)(v197 + 24) = sub_1000C51B8(v202, v203, (uint64_t *)&p_isa);
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v195, v196, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedSectionIDsOrdering' into 'cdList' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v197, 0x20u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            uint64_t v29 = v366;
            BOOL v34 = v367;
            id v35 = v364;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            id v370 = 0;
            uint64_t v33 = v368;
            unint64_t v28 = v369;
            goto LABEL_196;
          }
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();

          id v370 = 0;
          uint64_t v33 = v368;
          id v35 = v364;
LABEL_222:
          unint64_t v28 = v369;
LABEL_223:
          uint64_t v30 = (uint64_t)v365;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v28 = v369;
        }
LABEL_224:
        BOOL v34 = v367;
        goto LABEL_225;
      case 38:
LABEL_232:
        id v204 = [v34 unsavedMembershipsOfRemindersInSections];
        if (v204)
        {
          v205 = v204;
          id v206 = v370;
          sub_10015B234(v204);
          id v370 = v206;
          if (v206)
          {
            if (qword_100907A10 != -1) {
              swift_once();
            }
            uint64_t v207 = type metadata accessor for Logger();
            sub_10008E2DC(v207, (uint64_t)qword_10091F298);
            uint64_t v208 = v34;
            swift_errorRetain();
            int v209 = v208;
            swift_errorRetain();
            os_log_t v210 = Logger.logObject.getter();
            os_log_type_t v211 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v210, v211))
            {
              uint64_t v212 = swift_slowAlloc();
              os_log_t v337 = v210;
              uint64_t v213 = v212;
              os_log_type_t v214 = (void *)swift_slowAlloc();
              Swift::Int v338 = (void *)swift_slowAlloc();
              p_Class isa = v338;
              *(_DWORD *)uint64_t v213 = 136446722;
              v371[0] = v356;
              swift_getMetatypeMetadata();
              uint64_t v215 = String.init<A>(describing:)();
              *(void *)(v213 + 4) = sub_1000C51B8(v215, v216, (uint64_t *)&p_isa);
              swift_bridgeObjectRelease();
              *(_WORD *)(v213 + 12) = 2114;
              id v217 = [v209 objectID];
              *(void *)(v213 + 14) = v217;
              *os_log_type_t v214 = v217;

              *(_WORD *)(v213 + 22) = 2082;
              swift_getErrorValue();
              uint64_t v218 = Error.rem_errorDescription.getter();
              *(void *)(v213 + 24) = sub_1000C51B8(v218, v219, (uint64_t *)&p_isa);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              os_log_t v220 = v337;
              _os_log_impl((void *)&_mh_execute_header, v337, v211, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedMembershipsOfRemindersInSections' into 'cdList' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v213, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
              swift_errorRelease();
            }
            id v370 = 0;
            id v35 = v364;
            BOOL v34 = v367;
            uint64_t v33 = v368;
            unint64_t v28 = v369;
            uint64_t v29 = v366;
          }
          else
          {

            unint64_t v28 = v369;
          }
        }
        else
        {
          unint64_t v28 = v369;
        }
        goto LABEL_225;
      default:
LABEL_5:
        unint64_t v37 = v29;
        uint64_t v29 = (char *)v28;
        char v38 = v33;
        uint64_t v33 = v34;
        id v39 = [v34 objectID];
        id v40 = [v39 uuid];

        uint64_t v41 = v361;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v42 = UUID._bridgeToObjectiveC()().super.isa;
        (*v347)(v41, v362);
        unint64_t v28 = v38;
        [v38 setIdentifier:v42];

        if (v36 == v37)
        {
          swift_bridgeObjectRelease();
          if ((v351 & 1) == 0) {
            goto LABEL_306;
          }
          int v350 = 1;
          unint64_t v28 = v29;
          BOOL v34 = v33;
LABEL_303:
          id v242 = v370;
LABEL_252:
          id v370 = v242;
          uint64_t v243 = (char *)[v34 templateID];
          if (!v243)
          {
            id v242 = v370;
            uint64_t v33 = v368;
            goto LABEL_263;
          }
          uint64_t v366 = v243;
          Swift::Int v244 = v34;
          id v245 = [v368 account];
          uint64_t v246 = v362;
          if (!v245)
          {
LABEL_290:
            id v300 = [v368 storeControllerManagedObjectContext];
            if (!v300) {
              goto LABEL_295;
            }
            uint64_t v301 = v300;
            uint64_t v302 = self;
            id v303 = [v244 accountID];
            id v304 = v35;
            id v305 = [v303 uuid];

            v306 = v361;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            UUID.uuidString.getter();
            (*v347)(v306, v246);
            NSString v307 = String._bridgeToObjectiveC()();
            id v35 = v304;
            swift_bridgeObjectRelease();
            id v247 = [v302 cloudKitAccountWithCKIdentifier:v307 context:v301];

            if (!v247)
            {
LABEL_295:
              id v308 = 0;
              goto LABEL_297;
            }
LABEL_292:
            id v308 = v247;
            id v309 = [v308 accountTypeHost];
            unsigned int v310 = [v309 isCloudKit];

            if (v310)
            {
              id v311 = [v244 objectID];
              uint64_t v312 = v366;
              id v313 = v370;
              sub_1005E3154(v308, v366, v311);

              id v242 = v313;
              if (!v313)
              {

                uint64_t v33 = v368;
                unint64_t v28 = v369;
                BOOL v34 = v244;
                goto LABEL_263;
              }

              goto LABEL_298;
            }

LABEL_297:
            id v370 = self;
            v371[0] = 0;
            v371[1] = (id)0xE000000000000000;
            _StringGuts.grow(_:)(181);
            v314._countAndFlagsBits = 0xD000000000000082;
            v314._object = (void *)0x80000001007D9AA0;
            String.append(_:)(v314);
            id v315 = [v244 objectID];
            id v316 = [v315 description];
            uint64_t v317 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v319 = v318;

            v320._countAndFlagsBits = v317;
            v320._object = v319;
            String.append(_:)(v320);

            swift_bridgeObjectRelease();
            v321._object = (void *)0x80000001007CC5F0;
            v321._countAndFlagsBits = 0xD000000000000016;
            String.append(_:)(v321);
            id v322 = [v244 accountID];
            id v323 = [v322 description];
            uint64_t v324 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v326 = v325;

            v327._countAndFlagsBits = v324;
            v327._object = v326;
            String.append(_:)(v327);

            swift_bridgeObjectRelease();
            v328._object = (void *)0x80000001007D9B30;
            v328._countAndFlagsBits = 0xD000000000000016;
            String.append(_:)(v328);
            v329 = v366;
            id v330 = [v366 description];
            uint64_t v331 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v333 = v332;

            v334._countAndFlagsBits = v331;
            v334._object = v333;
            String.append(_:)(v334);
            swift_bridgeObjectRelease();
            v335._countAndFlagsBits = 125;
            v335._object = (void *)0xE100000000000000;
            String.append(_:)(v335);
            NSString v336 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v370 invalidParameterErrorWithDescription:v336];

            swift_willThrow();
LABEL_298:

            return;
          }
          id v247 = v245;
          id v248 = [v245 remObjectID];
          id v249 = [v244 accountID];
          unint64_t v250 = v249;
          if (v248)
          {
            if (v249)
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v251 = v248;
              char v252 = static NSObject.== infix(_:_:)();

              Swift::Int v244 = v367;
              id v35 = v364;

              if (v252) {
                goto LABEL_292;
              }
              goto LABEL_289;
            }
            unint64_t v250 = v248;
          }
          else if (!v249)
          {
            goto LABEL_292;
          }

          id v247 = v250;
LABEL_289:

          goto LABEL_290;
        }
        int v350 = 1;
        uint64_t v43 = v29;
        uint64_t v29 = v366;
        uint64_t v30 = (uint64_t)v365;
        BOOL v34 = v33;
        uint64_t v33 = v38;
        unint64_t v28 = v43;
LABEL_226:
        char v31 = v36;
        if (v36 <= v29) {
          unint64_t v32 = v29;
        }
        else {
          unint64_t v32 = v36;
        }
        if (v36 < v29) {
          continue;
        }
LABEL_305:
        __break(1u);
LABEL_306:
        BOOL v34 = v33;
        id v242 = v370;
        uint64_t v33 = v28;
LABEL_271:
        id v274 = [v34 unsavedReminderIDsToCategorizeAsGroceryItems];
        if (v274)
        {
          v275 = v274;
          id v276 = v242;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          unint64_t v277 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v278 = [v33 account];
          if (v278)
          {
            uint64_t v279 = v33;
            uint64_t v280 = v278;
            v281 = v276;
            sub_1005E39F4(v277, v279, (uint64_t)v278);
            if (v276)
            {
              if (qword_100907A00 != -1) {
                swift_once();
              }
              uint64_t v282 = type metadata accessor for Logger();
              sub_10008E2DC(v282, (uint64_t)qword_10091F268);
              uint64_t v283 = v367;
              swift_errorRetain();
              uint64_t v284 = v283;
              swift_errorRetain();
              swift_bridgeObjectRetain();
              uint64_t v285 = Logger.logObject.getter();
              os_log_type_t v286 = static os_log_type_t.error.getter();
              int v287 = v286;
              if (os_log_type_enabled(v285, v286))
              {
                uint64_t v288 = swift_slowAlloc();
                uint64_t v367 = v285;
                uint64_t v369 = v29;
                id v370 = v281;
                uint64_t v289 = v288;
                uint64_t v290 = (void *)swift_slowAlloc();
                v365 = v290;
                uint64_t v368 = swift_slowAlloc();
                p_Class isa = &v368->isa;
                *(_DWORD *)uint64_t v289 = 136446978;
                LODWORD(v366) = v287;
                v371[0] = v356;
                swift_getMetatypeMetadata();
                uint64_t v291 = String.init<A>(describing:)();
                v371[0] = (id)sub_1000C51B8(v291, v292, (uint64_t *)&p_isa);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v289 + 12) = 2112;
                id v293 = [v284 objectID];
                v371[0] = v293;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v290 = v293;

                *(_WORD *)(v289 + 22) = 2080;
                swift_bridgeObjectRetain();
                uint64_t v294 = Array.description.getter();
                unint64_t v296 = v295;
                swift_bridgeObjectRelease();
                v371[0] = (id)sub_1000C51B8(v294, v296, (uint64_t *)&p_isa);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v289 + 32) = 2080;
                swift_getErrorValue();
                uint64_t v297 = Error.rem_errorDescription.getter();
                v371[0] = (id)sub_1000C51B8(v297, v298, (uint64_t *)&p_isa);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                swift_errorRelease();
                swift_errorRelease();
                uint64_t v299 = v367;
                _os_log_impl((void *)&_mh_execute_header, v367, (os_log_type_t)v366, "%{public}s: Failed to auto-categorize specific reminders in list {listObjectID: %@, reminderIDsToCategorizeAsGroceryItems: %s, error: %s}", (uint8_t *)v289, 0x2Au);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

LABEL_278:
                swift_errorRelease();
              }
              else
              {

                swift_errorRelease();
                swift_bridgeObjectRelease_n();

                swift_errorRelease();
                swift_errorRelease();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
        }
        return;
    }
  }
}

void *sub_1005DE140(char a1)
{
  if (a1)
  {
    if ([v1 hasDeserializedReminderIDsMergeableOrdering]
      && (id v2 = [v1 reminderIDsMergeableOrdering]) != 0)
    {
      char v3 = v2;
      id v21 = 0;
      id v4 = [self reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:v2 error:&v21];
      id v5 = v21;
      if (v4)
      {
        uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        sub_10008E2DC(v7, (uint64_t)qword_10091F268);
        id v8 = v1;
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v19 = v8;
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          double v20 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 138412290;
          id v12 = [v8 objectID];
          id v21 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *double v20 = v12;

          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Serialized to json data from REMListStorage.reminderIDsMergeableOrdering during ingesting. {objectID: %@}", v11, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        uint64_t v6 = v5;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      id v14 = [v1 reminderIDsMergeableOrderingData];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v16 = self;
        sub_1000963CC(0, (unint64_t *)&unk_100914440);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        uint64_t v6 = String._bridgeToObjectiveC()();
        [v16 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v6];

        swift_willThrow();
      }
    }
  }
  else
  {
    id v13 = [v1 reminderIDsMergeableOrdering];
    return 0;
  }
  return v6;
}

void sub_1005DE4C0(void *a1, char a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for REMJSONDeserializationError();
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  if (a2)
  {
    if (objc_msgSend(a4, "shouldUpdateSectionsOrdering", v11))
    {
      id v18 = [a3 storeControllerManagedObjectContext];
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = [a4 objectID];
        if (qword_100907910 != -1) {
          swift_once();
        }
        uint64_t v21 = sub_10058707C((unint64_t)v20, 0, (uint64_t)v19, (Class)qword_100942580, 0, 0);
        if (v5)
        {
        }
        else
        {
          char v86 = v20;
          unint64_t v89 = v21;
          id v36 = [a3 sectionIDsOrderingAsData];
          if (v36)
          {
            unint64_t v37 = v36;
            uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v40 = v39;

            sub_1000963CC(0, (unint64_t *)&qword_10090D600);
            static REMJSONRepresentable.fromJSONData(_:)();
            sub_100097F34(v38, v40);
            type metadata accessor for REMCDListSection();
            unint64_t v58 = REMOrderedIdentifierMap.reorder<A>(objects:)();

            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v58 = v89;
          }
          sub_100200770(v58);
          swift_bridgeObjectRelease();
          id v79 = objc_allocWithZone((Class)NSMutableOrderedSet);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v81 = [v79 initWithArray:isa];

          [a3 setSections:v81];
        }
      }
    }
    return;
  }
  NSString v84 = a1;
  os_log_type_t v90 = a4;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077B710;
  *(void *)(v12 + 32) = swift_getKeyPath();
  *(void *)(v12 + 40) = swift_getKeyPath();
  v94[0] = (id)v12;
  specialized Array._endMutation()();
  unint64_t v13 = v12;
  unint64_t v95 = v12;
  id v14 = [a3 parentAccount];
  if (!v14
    || (uint64_t v15 = v14,
        id v16 = [v14 accountTypeHost],
        v15,
        !v16))
  {
    id v16 = [objc_allocWithZone((Class)REMAccountTypeHost) initWithType:0];
  }
  if (*(unsigned char *)(a5 + 17))
  {
    unsigned int v85 = 0;
    uint64_t v17 = v90;
  }
  else
  {
    uint64_t v17 = v90;
    if ([v16 isLocal])
    {
      [v90 remindersICSDisplayOrderChanged];
      unsigned int v85 = 1;
      goto LABEL_19;
    }
    unsigned int v85 = [v16 isCalDav];
  }
  if (([v17 remindersICSDisplayOrderChanged] & 1) != 0 || v85)
  {
LABEL_19:
    swift_getKeyPath();
    swift_getKeyPath();
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!__OFADD__(v82, 2))
      {
LABEL_21:
        sub_1001A6A8C();
        specialized Array._endMutation()();
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_22:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          unint64_t v13 = v95;
          uint64_t v17 = v90;
          goto LABEL_25;
        }
LABEL_83:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_22;
      }
    }
    else if (!__OFADD__(*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10), 2))
    {
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_83;
  }
  unsigned int v85 = 0;
LABEL_25:
  swift_bridgeObjectRetain();
  sub_10039FB64(a3, v13);
  swift_bridgeObjectRelease();
  uint64_t v22 = &selRef_includeReminderTitles;
  if (![v17 remindersICSDisplayOrderChanged]) {
    goto LABEL_59;
  }
  if (qword_100907A00 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E2DC(v23, (uint64_t)qword_10091F268);
  id v24 = v17;
  int v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v83 = v24;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    unint64_t v28 = (id *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 138412290;
    v94[0] = [v83 remObjectID];
    uint64_t v22 = &selRef_includeReminderTitles;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v28 = v94[0];

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Some reminders have changes in .icsDisplayOrder so ICS display orders is taking precedence as the true sort hint - {list: %@}", v27, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v24 = v83;
    swift_slowDealloc();
  }
  else
  {
  }
  id v29 = [v24 v22[235]];
  uint64_t v17 = v90;
  if (!v29)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = v24;
    BOOL v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v34, v35))
    {

LABEL_75:
      NSDate v76 = self;
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v78 = String._bridgeToObjectiveC()();
      [v76 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v78];

      swift_willThrow();
LABEL_76:

      return;
    }
LABEL_67:
    uint64_t v71 = swift_slowAlloc();
    Class v72 = (void *)swift_slowAlloc();
    v94[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 138543618;
    id v73 = v16;
    id v74 = [v33 objectID];
    *(void *)&v93[0] = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Class v72 = v74;
    id v16 = v73;

    *(_WORD *)(v71 + 12) = 2082;
    *(void *)&v93[0] = sub_1000C51B8(0x7265646E696D6572, 0xE900000000000073, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.reminderIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v71, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_75;
  }
  uint64_t v30 = v29;
  char v31 = sub_1005E5E50(v29, v84);
  if (v5)
  {

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v41 = v32;
  if ((v31 & 1) == 0)
  {
LABEL_58:
    [v24 setRemindersICSDisplayOrderChanged:0];

LABEL_59:
    id v61 = [v17 v22[235]];
    if (v61)
    {
      NSString v62 = v61;
      id v63 = [v17 reminderIDsOrderingHints];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      unint64_t v64 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v65 = sub_1005D8B10(_swiftEmptyDictionarySingleton, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100907A00 != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      sub_10008E2DC(v66, (uint64_t)qword_10091F268);
      swift_bridgeObjectRetain();
      BOOL v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 134217984;
        v94[0] = *(id *)(v65 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "REMListStorageCDIngestor:mutateOrdering - number of reminderIDsOrderingHints {count: %ld}", v69, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      uint64_t v75 = *(void *)(v65 + 16);
      if (v75 == 1) {
        sub_10009A254(v84, v65);
      }
      swift_bridgeObjectRelease();
      sub_100098420((uint64_t)v84, v75 == 1);
      if (v85) {
        sub_1005E61CC(v84);
      }

      goto LABEL_76;
    }
    swift_bridgeObjectRelease();
    if (qword_100907A00 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_10008E2DC(v70, (uint64_t)qword_10091F268);
    uint64_t v33 = v90;
    BOOL v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v34, v35))
    {

      goto LABEL_75;
    }
    goto LABEL_67;
  }
  id v42 = [v24 resolutionTokenMap];
  if (v42)
  {
    uint64_t v43 = v42;
    sub_10047EDE8(23);
    uint64_t v44 = v24;
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 updateForKey:v45];

    [v44 setReminderIDsMergeableOrdering:v41];
    if ([v84 firstObject])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v93, 0, sizeof(v93));
    }
    sub_100096408((uint64_t)v93, (uint64_t)v94, &qword_100908190);
    if (v94[3])
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      if (swift_dynamicCast())
      {
        uint64_t v52 = [v92 list];
        if (v52)
        {
          unint64_t v53 = v52;
          unint64_t v54 = v43;
          sub_1005DA3D0(v44, v52, (uint64_t)&off_1008B6950, a5);

LABEL_57:
          uint64_t v17 = v90;

          uint64_t v22 = &selRef_includeReminderTitles;
          id v24 = v44;
          goto LABEL_58;
        }
        unint64_t v54 = v43;
      }
      else
      {
        unint64_t v54 = v43;
      }
    }
    else
    {
      unint64_t v54 = v43;
      sub_1000966BC((uint64_t)v94, &qword_100908190);
    }
    unint64_t v53 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v59))
    {
      os_log_type_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v59, "Cannot get any REMCDList from the ordered set of reminders in the list.", v60, 2u);
      swift_slowDealloc();
    }
    goto LABEL_57;
  }
  uint64_t v91 = v41;
  swift_bridgeObjectRelease();
  id v46 = v24;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc();
    unint64_t v87 = v47;
    id v50 = (void *)swift_slowAlloc();
    v94[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 138543618;
    id v51 = [v46 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v50 = v51;

    *(_WORD *)(v49 + 12) = 2082;
    *(void *)&v93[0] = sub_1000C51B8(0x7265646E696D6572, 0xE900000000000073, (uint64_t *)v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v87, v48, "REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v49, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  Class v55 = self;
  sub_1000963CC(0, (unint64_t *)&unk_100914440);
  uint64_t v56 = swift_getObjCClassFromMetadata();
  NSString v57 = String._bridgeToObjectiveC()();
  [v55 unexpectedNilPropertyWithClass:v56 property:v57];

  swift_willThrow();
}

uint64_t sub_1005DFD38(uint64_t a1, uint64_t a2)
{
  sub_10009A1B0(a1, (uint64_t)v7);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  sub_10009A1B0(a2, (uint64_t)v7);
  if (swift_dynamicCast())
  {
    id v3 = [v6 displayOrder];
    id v4 = [v6 displayOrder];

    if (v3 == v4) {
      return 0;
    }
    if (v3 < v4) {
      return -1;
    }
    else {
      return 1;
    }
  }
  else
  {

    return 0;
  }
}

uint64_t type metadata accessor for REMListStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1005DFE58()
{
  return &off_1008CC9D0;
}

_UNKNOWN **sub_1005DFE64()
{
  return &off_1008CC9A0;
}

_UNKNOWN **sub_1005DFE70()
{
  return &off_1008CC970;
}

_UNKNOWN **sub_1005DFE7C()
{
  return &off_1008CC940;
}

NSObject *sub_1005DFE88(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = ((char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v167 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  unint64_t v165 = (char *)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v168 = (char *)&v151 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v172 = *(void *)(v17 - 8);
  uint64_t v173 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v170 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v169 = (char *)&v151 - v20;
  *(void *)&long long v176 = 0;
  id v21 = [a1 remObjectIDWithError:&v176];
  if (!v21)
  {
    id v33 = (id)v176;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v6;
  }
  uint64_t v164 = v11;
  id v171 = v21;
  id v22 = (id)v176;
  id v23 = [a1 account];
  if (v23)
  {
    id v24 = v23;
    id v25 = [v23 remObjectID];

    if (v25)
    {
      uint64_t v160 = v3;
      id v26 = [a1 name];
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v163 = 0;
      }
      id v37 = [a1 reminderIDsMergeableOrdering];
      uint64_t v166 = v1;
      uint64_t v158 = v4;
      uint64_t v157 = v9;
      uint64_t v152 = v6;
      uint64_t v154 = v10;
      if (v37)
      {
        uint64_t v38 = v37;
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;
      }
      else
      {
        if (qword_100907A08 != -1) {
          swift_once();
        }
        sub_10008E2DC(v173, (uint64_t)qword_10091F280);
        id v42 = v171;
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          NSString v45 = (uint8_t *)swift_slowAlloc();
          NSString v162 = (void *)swift_slowAlloc();
          *(_DWORD *)NSString v45 = 138412290;
          id v161 = v45 + 4;
          *(void *)&long long v176 = v42;
          id v46 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v162 = v171;

          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v39 = 0;
        unint64_t v41 = 0xC000000000000000;
      }
      id v47 = [a1 isGroup];
      id v48 = objc_allocWithZone((Class)REMListStorage);
      id v49 = v171;
      sub_100097E38(v39, v41);
      id v50 = v25;
      NSString v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v156 = v39;
      unint64_t v155 = v41;
      sub_100097F34(v39, v41);
      uint64_t v6 = [v48 initWithObjectID:v49 accountID:v50 name:v51 isGroup:v47 reminderIDsMergeableOrderingData:isa];

      [v6 setReminderIDsMergeableOrdering:0];
      id v53 = [a1 externalIdentifier];
      [v6 setExternalIdentifier:v53];

      id v54 = [a1 externalModificationTag];
      [v6 setExternalModificationTag:v54];

      id v55 = [a1 daSyncToken];
      [v6 setDaSyncToken:v55];

      id v56 = [a1 daPushKey];
      [v6 setDaPushKey:v56];

      id v57 = [a1 daExternalIdentificationTag];
      [v6 setDaExternalIdentificationTag:v57];

      -[NSObject setDaDisplayOrder:](v6, "setDaDisplayOrder:", [a1 daDisplayOrder]);
      -[NSObject setDaIsEventOnlyContainer:](v6, "setDaIsEventOnlyContainer:", [a1 daIsEventOnlyContainer]);
      -[NSObject setDaIsReadOnly:](v6, "setDaIsReadOnly:", [a1 daIsReadOnly]);
      -[NSObject setDaIsImmutable:](v6, "setDaIsImmutable:", [a1 daIsImmutable]);
      -[NSObject setDaIsNotificationsCollection:](v6, "setDaIsNotificationsCollection:", [a1 daIsNotificationsCollection]);
      -[NSObject setMinimumSupportedVersion:](v6, "setMinimumSupportedVersion:", [a1 minimumSupportedVersion]);
      -[NSObject setEffectiveMinimumSupportedVersion:](v6, "setEffectiveMinimumSupportedVersion:", [a1 effectiveMinimumSupportedVersion]);
      id v58 = [a1 sharedOwnerName];
      [v6 setSharedOwnerName:v58];

      id v59 = [a1 sharedOwnerAddress];
      [v6 setSharedOwnerAddress:v59];

      unint64_t v159 = (int)[a1 sharingStatus];
      -[NSObject setSharingStatus:](v6, "setSharingStatus:");
      type metadata accessor for REMShareeCDIngestor();
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = v50;
      *(void *)(inited + 24) = v49;
      NSString v162 = (void *)inited;
      type metadata accessor for REMCalDAVNotificationCDIngestor();
      uint64_t v61 = swift_initStackObject();
      *(void *)(v61 + 16) = v50;
      *(void *)(v61 + 24) = v49;
      uint64_t v163 = v61;
      id v62 = v49;
      id v63 = v50;
      id v161 = v62;
      id v153 = v63;
      id v64 = [a1 sharees];
      if (!v64)
      {
        uint64_t v68 = v154;
        goto LABEL_34;
      }
      uint64_t v65 = v64;
      sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
      sub_1000ED098((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
      uint64_t v66 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&long long v176 = v66;
      sub_100094134(&qword_10091F4E8);
      sub_1000967F4(&qword_10091F4F0, &qword_10091F4E8);
      uint64_t v67 = Sequence.elements<A>(ofType:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = v154;
      if (qword_100907A08 != -1) {
        swift_once();
      }
      uint64_t v69 = v173;
      uint64_t v70 = sub_10008E2DC(v173, (uint64_t)qword_10091F280);
      uint64_t v71 = v169;
      uint64_t v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))(v169, v70, v69);
      *(void *)&long long v176 = v67;
      __chkstk_darwin(v72);
      *(&v151 - 2) = (uint64_t)v71;
      sub_100094134(&qword_100921E20);
      sub_1000963CC(0, &qword_10090A3E8);
      sub_1000967F4(&qword_10091F528, &qword_100921E20);
      uint64_t v73 = v166;
      uint64_t v74 = Sequence.map<A>(skippingError:_:)();
      if (v73)
      {
        swift_errorRelease();
        uint64_t v166 = 0;
        unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
      }
      else
      {
        unint64_t v75 = v74;
        uint64_t v166 = 0;
      }
      (*(void (**)(char *, uint64_t))(v172 + 8))(v169, v173);
      swift_bridgeObjectRelease();
      if (v75 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v77) {
          goto LABEL_31;
        }
      }
      else if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_31:
        Class v76 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v6 setSharees:v76];

        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
LABEL_34:
      uint64_t v78 = v164;
      sub_100443A94();
      if (v79)
      {
        uint64_t v80 = v79;
        id v81 = [v79 remObjectID];
      }
      else
      {
        id v81 = 0;
      }
      [v6 setSharedOwnerID:v81];

      id v82 = [a1 calDAVNotifications];
      if (!v82)
      {
LABEL_49:
        id v95 = [a1 color];
        [v6 setColor:v95];

        id v96 = [a1 badgeEmblem];
        [v6 setBadgeEmblem:v96];

        Class v97 = (Class)[a1 lastUserAccessDate];
        if (v97)
        {
          os_log_type_t v98 = v167;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = v168;
          (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v168, v98, v68);
          NSString v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
          v100(v99, 0, 1, v68);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v99, 1, v68) == 1)
          {
            Class v97 = 0;
          }
          else
          {
            v101.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
            id v102 = v99;
            Class v97 = v101.super.isa;
            (*(void (**)(char *, uint64_t))(v78 + 8))(v102, v68);
          }
        }
        else
        {
          NSString v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
          v100(v168, 1, 1, v68);
        }
        [v6 setLastUserAccessDate:v97];

        -[NSObject setShowingLargeAttachments:](v6, "setShowingLargeAttachments:", [a1 showingLargeAttachments]);
        id v103 = [a1 parentAccount];
        if (v103)
        {
          char v104 = v103;
          id v105 = [v103 remObjectID];
        }
        else
        {
          id v105 = 0;
        }
        [v6 setParentAccountID:v105];

        id v106 = [a1 parentList];
        if (v106)
        {
          os_log_type_t v107 = v106;
          id v108 = [v106 remObjectID];
        }
        else
        {
          id v108 = 0;
        }
        [v6 setParentListID:v108];

        -[NSObject setShouldCategorizeGroceryItems:](v6, "setShouldCategorizeGroceryItems:", [a1 shouldCategorizeGroceryItems]);
        -[NSObject setShouldSuggestConversionToGroceryList:](v6, "setShouldSuggestConversionToGroceryList:", [a1 shouldSuggestConversionToGroceryList]);
        id v109 = [a1 groceryLocaleID];
        [v6 setGroceryLocaleID:v109];

        [v6 setResolutionTokenMap:0];
        Class v110 = (Class)[a1 resolutionTokenMapData];
        if (v110)
        {
          uint64_t v111 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v113 = v112;

          Class v110 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F34(v111, v113);
        }
        [v6 setResolutionTokenMapData:v110];

        id v114 = [a1 daBulkRequests];
        if (v114)
        {
          uint64_t v115 = v114;
          uint64_t v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v118 = v117;

          unsigned int v119 = self;
          Class v120 = Data._bridgeToObjectiveC()().super.isa;
          id v174 = 0;
          id v121 = [v119 propertyListWithData:v120 options:0 format:0 error:&v174];

          id v122 = v174;
          if (v121)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            sub_10009A1A0(&v175, &v176);
            sub_10009A1B0((uint64_t)&v176, (uint64_t)&v175);
            sub_100094134(&qword_10091F510);
            if (swift_dynamicCast())
            {
              Class v123 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v6 setDaBulkRequests:v123];
              sub_100097F34(v116, v118);
            }
            else
            {
              sub_100097F34(v116, v118);
            }
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v176);
          }
          else
          {
            unint64_t v124 = v122;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRelease();
            sub_100097F34(v116, v118);
            uint64_t v166 = 0;
          }
        }
        -[NSObject setIsPlaceholder:](v6, "setIsPlaceholder:", [a1 isPlaceholder]);
        NSString v125 = [a1 currentUserShareParticipantID];
        if (v125)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          String.uppercased()();
          swift_bridgeObjectRelease();
          NSString v125 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v6 setCurrentUserShareParticipantID:v125];

        id v126 = [a1 sortingStyle];
        if (v126)
        {
          unint64_t v127 = v126;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v128 = (id)REMSortingStyle.init(stringValue:)();
          if (!v128) {
            id v128 = REMSortingStyleDefault;
          }
          id v129 = v128;
          uint64_t v130 = v160;
          [v6 setSortingStyle:v128];
        }
        else
        {
          [v6 setSortingStyle:REMSortingStyleDefault];
          uint64_t v130 = v160;
        }
        if (![a1 isPinnedByCurrentUser]) {
          goto LABEL_92;
        }
        if (v159 >= 2)
        {
          if (v159 - 3 < 2)
          {
LABEL_92:
            Class v143 = (Class)[a1 mostRecentTargetTemplateIdentifierByCurrentUser];
            if (v143)
            {
              os_log_type_t v144 = (char *)v152;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v145 = v158;
              uint64_t v146 = v157;
              (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v144, v130);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v146, 0, 1, v130);
              int v147 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48))(v146, 1, v130);
              unint64_t v148 = v155;
              if (v147 == 1)
              {
                Class v143 = 0;
              }
              else
              {
                Class v143 = UUID._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v130);
              }
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56))(v157, 1, 1, v130);
              unint64_t v148 = v155;
            }
            [v6 setMostRecentTargetTemplateIdentifier:v143];

            [v6 setShouldUpdateSectionsOrdering:0];
            [v6 setUnsavedSectionIDsOrdering:0];
            [v6 setUnsavedMembershipsOfRemindersInSections:0];
            [v6 setUnsavedReminderIDsToCategorizeAsGroceryItems:0];
            sub_100097F34(v156, v148);
            swift_release();

            uint64_t v149 = v163;
            swift_setDeallocating();

            return v6;
          }
          if (v159 != 2)
          {
            if (qword_100907A00 != -1) {
              swift_once();
            }
            sub_10008E2DC(v173, (uint64_t)qword_10091F268);
            id v136 = v161;
            v135.super.Class isa = (Class)Logger.logObject.getter();
            os_log_type_t v137 = static os_log_type_t.fault.getter();
            int v138 = v137;
            if (os_log_type_enabled((os_log_t)v135.super.isa, v137))
            {
              uint64_t v139 = swift_slowAlloc();
              uint64_t v140 = swift_slowAlloc();
              LODWORD(v173) = v138;
              uint64_t v141 = (void *)v140;
              *(_DWORD *)uint64_t v139 = 138543618;
              *(void *)&long long v176 = v136;
              id v142 = v136;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v141 = v171;

              *(_WORD *)(v139 + 12) = 2050;
              *(void *)&long long v176 = v159;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v135.super.isa, (os_log_type_t)v173, "REMListStorageCDIngestor: storage(from:) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}", (uint8_t *)v139, 0x16u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v130 = v160;
              swift_slowDealloc();
            }
            else
            {

              v135.super.Class isa = (Class)v136;
            }
            goto LABEL_91;
          }
          unint64_t v131 = v167;
          static Date.distantPast.getter();
          goto LABEL_83;
        }
        id v132 = [a1 pinnedDate];
        if (v132)
        {
          Class v133 = v132;
          uint64_t v134 = v167;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v131 = v165;
          (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v165, v134, v68);
          v100(v131, 0, 1, v68);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v131, 1, v68) != 1)
          {
LABEL_83:
            v135.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v78 + 8))(v131, v68);
LABEL_90:
            [v6 setPinnedDate:v135.super.isa];
LABEL_91:

            goto LABEL_92;
          }
        }
        else
        {
          v100(v165, 1, 1, v68);
        }
        v135.super.Class isa = 0;
        goto LABEL_90;
      }
      uint64_t v83 = v82;
      sub_1000963CC(0, (unint64_t *)&qword_100921E40);
      sub_1000ED098(&qword_10091F4F8, (unint64_t *)&qword_100921E40);
      uint64_t v84 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&long long v176 = v84;
      sub_100094134(&qword_10091F500);
      sub_1000967F4(&qword_10091F508, &qword_10091F500);
      uint64_t v85 = Sequence.elements<A>(ofType:)();
      swift_bridgeObjectRelease();
      if (qword_100907A08 != -1) {
        swift_once();
      }
      uint64_t v86 = v173;
      uint64_t v87 = sub_10008E2DC(v173, (uint64_t)qword_10091F280);
      uint64_t v88 = v170;
      uint64_t v89 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))(v170, v87, v86);
      *(void *)&long long v176 = v85;
      __chkstk_darwin(v89);
      *(&v151 - 2) = (uint64_t)v88;
      sub_100094134(&qword_10091F518);
      sub_1000963CC(0, &qword_1009173A0);
      sub_1000967F4(&qword_10091F520, &qword_10091F518);
      uint64_t v90 = v166;
      uint64_t v91 = Sequence.map<A>(skippingError:_:)();
      if (v90)
      {
        swift_errorRelease();
        uint64_t v166 = 0;
        unint64_t v92 = (unint64_t)_swiftEmptyArrayStorage;
      }
      else
      {
        unint64_t v92 = v91;
        uint64_t v166 = 0;
      }
      (*(void (**)(char *, uint64_t))(v172 + 8))(v170, v173);
      swift_bridgeObjectRelease();
      if (v92 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v94) {
          goto LABEL_45;
        }
      }
      else if (*(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_45:
        Class v93 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v6 setCalDAVNotifications:v93];

LABEL_48:
        uint64_t v78 = v164;
        goto LABEL_49;
      }
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
  }
  if (qword_100907A08 != -1) {
    swift_once();
  }
  sub_10008E2DC(v173, (uint64_t)qword_10091F280);
  unint64_t v28 = v171;
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    char v31 = (uint8_t *)swift_slowAlloc();
    unint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)char v31 = 138412290;
    *(void *)&long long v176 = v28;
    uint64_t v6 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v32 = v171;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMListStorageCDIngestor: cdList.account is nil {cdList.remObjectID: %@}", v31, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v29 = v28;
  }

  BOOL v34 = self;
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v36 = String._bridgeToObjectiveC()();
  [v34 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v36];

  swift_willThrow();
  return v6;
}

unint64_t sub_1005E1B00(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1728, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_1005E1B4C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B17F0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005E1B98()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x27) {
    return 39;
  }
  else {
    return v0;
  }
}

uint64_t sub_1005E1BEC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  if (a1)
  {
    uint64_t v10 = qword_100907A00;
    id v11 = a1;
    if (a3 >> 60 == 15)
    {
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_10091F268);
      id v13 = a6;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      uint64_t v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        id v48 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        id v51 = v13;
        id v18 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v48 = v13;

        _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v16, "mergeOrderedSet(): REMCDList.reminderIDsMergeableOrdering data is nil. Serializing from inutput orderedSet directly. {objectID: %@}", v17, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v51 = 0;
      id v31 = [self reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:v11 error:&v51];
      id v32 = v51;
      if (v31)
      {
        uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        os_log_type_t v35 = v32;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
    else
    {
      uint64_t v47 = a4;
      unint64_t v49 = a5;
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_10091F268);
      id v20 = v11;
      id v21 = a6;
      id v22 = v20;
      id v23 = v21;
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 138412546;
        unint64_t v28 = v22;
        id v29 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v27 = v23;

        id v22 = v28;
        *(_WORD *)(v26 + 12) = 2048;
        id v30 = [v28 count];

        id v51 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v24, v25, "mergeOrderedSet(): Merge not supported for REMCDList.reminderIDsMergeableOrdering for now, directly serializing from input orderedSet. {objectID: %@, count: %ld}", (uint8_t *)v26, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v51 = 0;
      id v33 = [self reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:v22 error:&v51];
      id v34 = v51;
      if (v33)
      {
        uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        NSString v36 = v34;
        id v50 = v22;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        id v37 = v23;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        id v38 = v37;
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          id v42 = (void *)swift_slowAlloc();
          id v51 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 138412802;
          id v43 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v42 = v38;

          *(_WORD *)(v41 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v47, v49, (uint64_t *)&v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v41 + 22) = 2080;
          swift_getErrorValue();
          uint64_t v44 = Error.localizedDescription.getter();
          sub_1000C51B8(v44, v45, (uint64_t *)&v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "mergeOrderedSet(): Failed to merge ordered set for list {list.objectID: %@, key: %s}: %s", (uint8_t *)v41, 0x20u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {

          swift_errorRelease();
          swift_bridgeObjectRelease_n();

          swift_errorRelease();
          swift_errorRelease();
        }
        return 0;
      }
    }
  }
  else
  {
    uint64_t v16 = a2;
    sub_100097E24(a2, a3);
  }
  return v16;
}

void sub_1005E233C(void *a1, void *a2)
{
  uint64_t v4 = &selRef_retryTimer;
  id v5 = [a1 sharees];
  id v53 = a1;
  if (!v5)
  {
    uint64_t v17 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_15;
  }
  uint64_t v6 = v5;
  sub_1000963CC(0, &qword_10090A3E8);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = [a1 accountID];
  id v9 = [a1 objectID];
  type metadata accessor for REMShareeCDIngestor();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  sub_1006A19E4(v7, v10);
  swift_release();
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_4:
      id v58 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v11 < 0) {
        __break(1u);
      }
      uint64_t v12 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v7 + 8 * v12 + 32);
        }
        uint64_t v14 = v13;
        ++v12;
        id v15 = [v13 objectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v11 != v12);
      uint64_t v16 = v58;
      swift_bridgeObjectRelease();
      uint64_t v4 = &selRef_retryTimer;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v17 = sub_100126B08((unint64_t)v16);
  swift_bridgeObjectRelease();
LABEL_15:
  id v18 = [a2 v4[443]];
  if (v18)
  {
    uint64_t v19 = v18;
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_1000ED098((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    id v20 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v58 = v20;
    sub_100094134(&qword_10091F4E8);
    sub_1000967F4(&qword_10091F4F0, &qword_10091F4E8);
    unint64_t v21 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    if (v21 >> 62) {
      goto LABEL_47;
    }
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v22)
    {
      uint64_t v23 = 0;
      unint64_t v51 = v21 + 32;
      unint64_t v54 = v17 & 0xC000000000000001;
      uint64_t v56 = v17 + 56;
      unint64_t v57 = v21 & 0xC000000000000001;
      uint64_t v55 = v22;
      uint64_t v52 = v17;
      while (1)
      {
        id v24 = v57 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v51 + 8 * v23);
        unint64_t v21 = (unint64_t)v24;
        if (__OFADD__(v23++, 1)) {
          break;
        }
        id v58 = 0;
        id v26 = [v24 remObjectIDWithError:&v58];
        if (!v26)
        {
          id v50 = v58;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return;
        }
        uint64_t v27 = v26;
        if (v54)
        {
          unint64_t v28 = v58;
          id v29 = v27;
          char v30 = __CocoaSet.contains(_:)();

          if ((v30 & 1) == 0) {
            goto LABEL_36;
          }
LABEL_19:

          if (v23 == v55) {
            goto LABEL_48;
          }
        }
        else
        {
          if (*(void *)(v17 + 16))
          {
            Swift::Int v31 = *(void *)(v17 + 40);
            id v32 = v58;
            Swift::Int v33 = NSObject._rawHashValue(seed:)(v31);
            uint64_t v34 = -1 << *(unsigned char *)(v17 + 32);
            unint64_t v35 = v33 & ~v34;
            if ((*(void *)(v56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v36 = *(id *)(*(void *)(v17 + 48) + 8 * v35);
              char v37 = static NSObject.== infix(_:_:)();

              if ((v37 & 1) == 0)
              {
                uint64_t v38 = ~v34;
                while (1)
                {
                  unint64_t v35 = (v35 + 1) & v38;
                  if (((*(void *)(v56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
                    goto LABEL_36;
                  }
                  id v39 = *(id *)(*(void *)(v17 + 48) + 8 * v35);
                  char v40 = static NSObject.== infix(_:_:)();

                  if (v40) {
                    goto LABEL_19;
                  }
                }
              }
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v41 = v58;
          }
LABEL_36:
          if (qword_100907A00 != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          sub_10008E2DC(v42, (uint64_t)qword_10091F268);
          id v43 = v27;
          uint64_t v44 = v53;
          unint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = swift_slowAlloc();
            id v48 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v47 = 138412546;
            id v49 = [v44 objectID];
            *(void *)(v47 + 4) = v49;
            *id v48 = v49;

            *(_WORD *)(v47 + 12) = 2112;
            *(void *)(v47 + 14) = v43;
            v48[1] = v27;
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "Removing sharee from list {list.objectID: %@, shareeobjectID: %@}", (uint8_t *)v47, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            unint64_t v45 = v44;
          }

          [(id)v21 setList:0];
          uint64_t v17 = v52;
          if (v23 == v55) {
            goto LABEL_48;
          }
        }
      }
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_48:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_1005E2A48(void *a1, void *a2)
{
  uint64_t v4 = &selRef_includeReminderTitles;
  id v5 = [a1 calDAVNotifications];
  id v53 = a1;
  if (!v5)
  {
    uint64_t v17 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_15;
  }
  uint64_t v6 = v5;
  sub_1000963CC(0, &qword_1009173A0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v8 = [a1 accountID];
  id v9 = [a1 objectID];
  type metadata accessor for REMCalDAVNotificationCDIngestor();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  sub_1006A222C(v7, v10);
  swift_release();
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_4:
      id v58 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v11 < 0) {
        __break(1u);
      }
      uint64_t v12 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v13 = *(id *)(v7 + 8 * v12 + 32);
        }
        uint64_t v14 = v13;
        ++v12;
        id v15 = [v13 objectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v11 != v12);
      uint64_t v16 = v58;
      swift_bridgeObjectRelease();
      uint64_t v4 = &selRef_includeReminderTitles;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_14:
  uint64_t v17 = sub_100126B08((unint64_t)v16);
  swift_bridgeObjectRelease();
LABEL_15:
  id v18 = [a2 v4[473]];
  if (v18)
  {
    uint64_t v19 = v18;
    sub_1000963CC(0, (unint64_t *)&qword_100921E40);
    sub_1000ED098(&qword_10091F4F8, (unint64_t *)&qword_100921E40);
    id v20 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v58 = v20;
    sub_100094134(&qword_10091F500);
    sub_1000967F4(&qword_10091F508, &qword_10091F500);
    unint64_t v21 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();
    if (v21 >> 62) {
      goto LABEL_47;
    }
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v22)
    {
      uint64_t v23 = 0;
      unint64_t v51 = v21 + 32;
      unint64_t v54 = v17 & 0xC000000000000001;
      uint64_t v56 = v17 + 56;
      unint64_t v57 = v21 & 0xC000000000000001;
      uint64_t v55 = v22;
      uint64_t v52 = v17;
      while (1)
      {
        id v24 = v57 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v51 + 8 * v23);
        unint64_t v21 = (unint64_t)v24;
        if (__OFADD__(v23++, 1)) {
          break;
        }
        id v58 = 0;
        id v26 = [v24 remObjectIDWithError:&v58];
        if (!v26)
        {
          id v50 = v58;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          return;
        }
        uint64_t v27 = v26;
        if (v54)
        {
          unint64_t v28 = v58;
          id v29 = v27;
          char v30 = __CocoaSet.contains(_:)();

          if ((v30 & 1) == 0) {
            goto LABEL_36;
          }
LABEL_19:

          if (v23 == v55) {
            goto LABEL_48;
          }
        }
        else
        {
          if (*(void *)(v17 + 16))
          {
            Swift::Int v31 = *(void *)(v17 + 40);
            id v32 = v58;
            Swift::Int v33 = NSObject._rawHashValue(seed:)(v31);
            uint64_t v34 = -1 << *(unsigned char *)(v17 + 32);
            unint64_t v35 = v33 & ~v34;
            if ((*(void *)(v56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v36 = *(id *)(*(void *)(v17 + 48) + 8 * v35);
              char v37 = static NSObject.== infix(_:_:)();

              if ((v37 & 1) == 0)
              {
                uint64_t v38 = ~v34;
                while (1)
                {
                  unint64_t v35 = (v35 + 1) & v38;
                  if (((*(void *)(v56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
                    goto LABEL_36;
                  }
                  id v39 = *(id *)(*(void *)(v17 + 48) + 8 * v35);
                  char v40 = static NSObject.== infix(_:_:)();

                  if (v40) {
                    goto LABEL_19;
                  }
                }
              }
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v41 = v58;
          }
LABEL_36:
          if (qword_100907A00 != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          sub_10008E2DC(v42, (uint64_t)qword_10091F268);
          id v43 = v27;
          uint64_t v44 = v53;
          unint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v45, v46))
          {
            uint64_t v47 = swift_slowAlloc();
            id v48 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v47 = 138412546;
            id v49 = [v44 objectID];
            *(void *)(v47 + 4) = v49;
            *id v48 = v49;

            *(_WORD *)(v47 + 12) = 2112;
            *(void *)(v47 + 14) = v43;
            v48[1] = v27;
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "Removing calDAVNotification from list {list.objectID: %@, calDAVNotificationobjectID: %@}", (uint8_t *)v47, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            unint64_t v45 = v44;
          }

          [(id)v21 setOwner:0];
          uint64_t v17 = v52;
          if (v23 == v55) {
            goto LABEL_48;
          }
        }
      }
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_48:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_1005E3154(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v78 - v14;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v15 - 8);
  uint64_t v85 = (void (*)(void))v15;
  *(void *)&double v16 = __chkstk_darwin(v15).n128_u64[0];
  id v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [a1 storeControllerManagedObjectContext:v16];
  if (!v19)
  {
    uint64_t v88 = 0;
    unint64_t v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(137);
    v29._countAndFlagsBits = 0xD000000000000086;
    v29._object = (void *)0x80000001007D9B50;
    String.append(_:)(v29);
    id v30 = [a1 remObjectID];
    if (v30)
    {
      Swift::Int v31 = v30;
      id v32 = [v30 description];

      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;
    }
    else
    {
      unint64_t v35 = (void *)0xE300000000000000;
      uint64_t v33 = 7104878;
    }
    uint64_t v47 = self;
    v48._countAndFlagsBits = v33;
    v48._object = v35;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 125;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v47 invalidParameterErrorWithDescription:v50];

    swift_willThrow();
    return;
  }
  id v20 = v19;
  id v82 = a1;
  uint64_t v83 = v9;
  id v79 = a3;
  uint64_t v80 = v12;
  uint64_t v81 = v6;
  uint64_t v87 = a2;
  id v21 = [a2 entityName];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = [self cdEntityName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 == v22 && v28 == v24)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      unint64_t v45 = v20;
      char v37 = v87;
      if (v22 != 0xD000000000000013 || v24 != 0x80000001007C8B50)
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v52 = v82;
        if ((v51 & 1) == 0)
        {
          id v53 = self;
          uint64_t v88 = 0;
          unint64_t v89 = 0xE000000000000000;
          _StringGuts.grow(_:)(100);
          v54._countAndFlagsBits = 0xD000000000000061;
          v54._object = (void *)0x80000001007D9BE0;
          String.append(_:)(v54);
          id v55 = [v37 description];
          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v58 = v57;

          v59._countAndFlagsBits = v56;
          v59._object = v58;
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          v60._countAndFlagsBits = 125;
          v60._object = (void *)0xE100000000000000;
          String.append(_:)(v60);
          NSString v61 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v53 invalidParameterErrorWithDescription:v61];

          swift_willThrow();
          return;
        }
        uint64_t v46 = 2;
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
      uint64_t v46 = 2;
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  char v37 = v87;
  uint64_t v38 = v90;
  unint64_t v39 = sub_1003DE658((uint64_t)&off_1008B6928, v87);
  if (v38)
  {

    return;
  }
  unint64_t v40 = v39;
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v90 = 0;
    if (v41) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v90 = 0;
    if (v41)
    {
LABEL_12:
      uint64_t v78 = v20;
      if (v41 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v41; ++i)
      {
        if ((v40 & 0xC000000000000001) != 0) {
          id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v43 = *(id *)(v40 + 8 * i + 32);
        }
        uint64_t v44 = v43;
        [v43 setPriorityRawValue:30, v78];
      }
      swift_bridgeObjectRelease_n();
      uint64_t v46 = 1;
      id v20 = v78;
      char v37 = v87;
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v46 = 1;
LABEL_29:
  uint64_t v52 = v82;
LABEL_30:
  type metadata accessor for REMCDTemplateOperationQueueItem();
  id v62 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v78 = v20;
  id v63 = [v62 initWithContext:v20];
  [v63 setAccount:v52];
  [v63 setOperationTypeRawValue:v46];
  [v63 setPriorityRawValue:20];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, void (*)(void)))(v84 + 8))(v18, v85);
  [v63 setCreationDate:isa];

  id v65 = v37;
  id v66 = [v65 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v67 = v86;
  uint64_t v68 = v81;
  uint64_t v85 = (void (*)(void))v7[4];
  v85();
  uint64_t v84 = v7[7];
  ((void (*)(char *, void, uint64_t, uint64_t))v84)(v67, 0, 1, v68);
  uint64_t v87 = v7;
  uint64_t v69 = (unsigned int (*)(char *, uint64_t, uint64_t))v7[6];
  Class v70 = 0;
  if (v69(v67, 1, v68) != 1)
  {
    Class v70 = UUID._bridgeToObjectiveC()().super.isa;
    (*((void (**)(char *, uint64_t))v87 + 1))(v67, v68);
  }
  [v63 setTemplateIdentifier:v70];

  id v71 = v79;
  id v72 = [v71 uuid];
  uint64_t v73 = v83;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v74 = v80;
  ((void (*)(char *, char *, uint64_t))v85)(v80, v73, v68);
  unint64_t v75 = v74;
  ((void (*)(char *, void, uint64_t, uint64_t))v84)(v74, 0, 1, v68);
  if (v69(v74, 1, v68) == 1)
  {
    Class v76 = 0;
  }
  else
  {
    Class v76 = UUID._bridgeToObjectiveC()().super.isa;
    (*((void (**)(char *, uint64_t))v87 + 1))(v75, v68);
  }
  uint64_t v77 = v78;
  [v63 setListIdentifier:v76];
}

void sub_1005E39F4(unint64_t a1, id a2, uint64_t a3)
{
  if ([a2 shouldCategorizeGroceryItems])
  {
    id v7 = [a2 storeControllerManagedObjectContext];
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = [a2 remObjectID];
      if (v9)
      {
        id v10 = v9;
        if (a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v12)
          {
LABEL_6:
            type metadata accessor for RDGroceryOperationQueue();
            swift_bridgeObjectRetain();
            id v11 = v10;
            id v10 = sub_1005EB4CC(v10, a1, 0, a3, (uint64_t)v8);

            swift_bridgeObjectRelease();
            if (v3) {
              return;
            }
            goto LABEL_11;
          }
        }
        else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_6;
        }
      }
      else
      {
        id v10 = v8;
      }
LABEL_11:
    }
  }
}

void sub_1005E3B40(void *a1)
{
  uint64_t v3 = _s10PredicatesOMa(0);
  *(void *)&double v4 = __chkstk_darwin(v3).n128_u64[0];
  uint64_t v6 = (void **)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(a1, "shouldCategorizeGroceryItems", v4))
  {
    id v7 = [a1 storeControllerManagedObjectContext];
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = [a1 remObjectID];
      if (!v9)
      {

        return;
      }
      id v10 = v9;
      id v11 = [a1 account];
      if (!v11)
      {

        return;
      }
      uint64_t v12 = v11;
      uint64_t v13 = (char *)v6 + *(int *)(sub_100094134(&qword_100916940) + 48);
      *uint64_t v6 = v10;
      uint64_t v14 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
      uint64_t v15 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
      uint64_t v16 = qword_100907418;
      id v28 = v10;
      if (v16 != -1) {
        swift_once();
      }
      uint64_t v17 = (objc_class *)qword_1009421D8;
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10077A530;
      *(void *)(inited + 32) = swift_getKeyPath();
      unint64_t v29 = inited;
      specialized Array._endMutation()();
      id v19 = _swiftEmptyArrayStorage;
      unint64_t v20 = sub_10039E88C((uint64_t)v6, v17, (uint64_t)v8, (uint64_t)_swiftEmptyArrayStorage, 0, 0, v29, (uint64_t)_swiftEmptyArrayStorage, 0);
      swift_bridgeObjectRelease();
      if (v1)
      {

        sub_1000C6DAC((uint64_t)v6);
        return;
      }
      sub_1000C6DAC((uint64_t)v6);
      unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        if (v21) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v21)
        {
LABEL_13:
          uint64_t v26 = v12;
          uint64_t v27 = v8;
          if (v21 < 1)
          {
            __break(1u);
            return;
          }
          for (uint64_t i = 0; i != v21; ++i)
          {
            if ((v20 & 0xC000000000000001) != 0) {
              id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v23 = *(id *)(v20 + 8 * i + 32);
            }
            uint64_t v24 = v23;
            id v25 = [v23 remObjectID:v26, v27, v28];

            if (v25)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          swift_bridgeObjectRelease();
          id v19 = (void *)v29;
          uint64_t v12 = v26;
          uint64_t v8 = v27;
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      sub_1005E39F4((unint64_t)v19, a1, (uint64_t)v12);

      swift_bridgeObjectRelease();
    }
  }
}

void *sub_1005E3F14(id a1, char a2)
{
  switch(a2)
  {
    case 1:
      id v4 = [a1 childListIDsToUndelete];
      goto LABEL_15;
    case 2:
      id v4 = [a1 childSmartListIDsToUndelete];
      goto LABEL_15;
    case 3:
      id v5 = [a1 parentAccountID];
      goto LABEL_7;
    case 4:
      id v5 = [a1 parentListID];
LABEL_7:
      id v6 = v5;
      id v7 = v6;
      uint64_t v3 = _swiftEmptyArrayStorage;
      if (v6)
      {
        id v8 = v6;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v3 = _swiftEmptyArrayStorage;
      }

      goto LABEL_12;
    case 5:
      id v4 = [a1 reminderIDsToUndelete];
      goto LABEL_15;
    case 6:
      id v4 = [a1 sectionIDsToUndelete];
LABEL_15:
      id v10 = v4;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = sub_10020A3A0(v11);
      swift_bridgeObjectRelease();
      unint64_t result = v12;
      break;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      *((_OWORD *)v3 + 1) = xmmword_10077A530;
      v3[4] = [a1 accountID];
      specialized Array._endMutation()();
LABEL_12:
      unint64_t result = v3;
      break;
  }
  return result;
}

void sub_1005E415C(id a1, void *a2, char a3, uint64_t a4)
{
  LOBYTE(v5) = a3;
  unint64_t v6 = (unint64_t)a1;
  switch(a3)
  {
    case 1:
      id v37 = [a1 childListIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v38 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v7 = v38;
      uint64_t v39 = v4;
      if ((v38 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v7 = v181;
        *(void *)type = v182;
        uint64_t v40 = v183;
        uint64_t v5 = v184;
        unint64_t v41 = v185;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v62 = -1 << *(unsigned char *)(v38 + 32);
        *(void *)type = v38 + 56;
        uint64_t v40 = ~v62;
        uint64_t v63 = -v62;
        if (v63 < 64) {
          uint64_t v64 = ~(-1 << v63);
        }
        else {
          uint64_t v64 = -1;
        }
        unint64_t v41 = v64 & *(void *)(v38 + 56);
      }
      os_log_t log = (os_log_t)((unint64_t)(v40 + 64) >> 6);
      unint64_t v171 = v7;
      if (v7 < 0) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v65 = v39;
        if (v41)
        {
          uint64_t v67 = (v41 - 1) & v41;
          unint64_t v68 = __clz(__rbit64(v41)) | (v5 << 6);
          uint64_t v66 = v5;
        }
        else
        {
          uint64_t v66 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            goto LABEL_193;
          }
          if (v66 >= (uint64_t)log) {
            goto LABEL_176;
          }
          unint64_t v69 = *(void *)(*(void *)type + 8 * v66);
          if (!v69)
          {
            uint64_t v70 = v5 + 2;
            if (v5 + 2 >= (uint64_t)log) {
              goto LABEL_176;
            }
            unint64_t v69 = *(void *)(*(void *)type + 8 * v70);
            if (v69) {
              goto LABEL_47;
            }
            uint64_t v70 = v5 + 3;
            if (v5 + 3 >= (uint64_t)log) {
              goto LABEL_176;
            }
            unint64_t v69 = *(void *)(*(void *)type + 8 * v70);
            if (v69)
            {
LABEL_47:
              uint64_t v66 = v70;
            }
            else
            {
              uint64_t v66 = v5 + 4;
              if (v5 + 4 >= (uint64_t)log) {
                goto LABEL_176;
              }
              unint64_t v69 = *(void *)(*(void *)type + 8 * v66);
              if (!v69)
              {
                os_log_t v74 = (os_log_t)(v5 + 5);
                do
                {
                  if (log == v74) {
                    goto LABEL_176;
                  }
                  unint64_t v69 = *(void *)(*(void *)type + 8 * (void)v74);
                  os_log_t v74 = (os_log_t)((char *)v74 + 1);
                }
                while (!v69);
                uint64_t v66 = (uint64_t)&v74[-1].isa + 7;
              }
            }
          }
          uint64_t v67 = (v69 - 1) & v69;
          unint64_t v68 = __clz(__rbit64(v69)) + (v66 << 6);
        }
        uint64_t v7 = (uint64_t)*(id *)(*(void *)(v7 + 48) + 8 * v68);
        while (1)
        {
          if (!v7) {
            goto LABEL_176;
          }
          sub_100478504(1, (void *)v7, a4);
          if (v65) {
            goto LABEL_123;
          }
          unint64_t v6 = (unint64_t)v71;
          uint64_t v39 = 0;
          [v71 setParentList:a2];
          id v72 = [(id)v6 createResolutionTokenMapIfNecessary];
          sub_10047E214(4);
          NSString v73 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v72 updateForKey:v73];

          uint64_t v5 = v66;
          unint64_t v41 = v67;
          uint64_t v7 = v171;
          if ((v171 & 0x8000000000000000) == 0) {
            break;
          }
LABEL_36:
          uint64_t v65 = v39;
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_176;
          }
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v7 = v201;
          swift_unknownObjectRelease();
          uint64_t v66 = v5;
          uint64_t v67 = v41;
        }
      }
    case 2:
      uint64_t v42 = v4;
      id v43 = [a1 childSmartListIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v44 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v44 & 0xC000000000000001) != 0) {
        uint64_t v45 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v45 = *(void *)(v44 + 16);
      }
      swift_bridgeObjectRelease();
      if (!v45) {
        return;
      }
      id v75 = [(id)v6 childSmartListIDsToUndelete];
      uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v7 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v7 = v186;
        *(void *)typec = v187;
        uint64_t v76 = v188;
        uint64_t v5 = v189;
        unint64_t v6 = v190;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v108 = -1 << *(unsigned char *)(v7 + 32);
        *(void *)typec = v7 + 56;
        uint64_t v76 = ~v108;
        uint64_t v109 = -v108;
        if (v109 < 64) {
          uint64_t v110 = ~(-1 << v109);
        }
        else {
          uint64_t v110 = -1;
        }
        unint64_t v6 = v110 & *(void *)(v7 + 56);
      }
      os_log_t logc = (os_log_t)((unint64_t)(v76 + 64) >> 6);
      unint64_t v174 = v7;
      if (v7 < 0) {
        goto LABEL_138;
      }
LABEL_140:
      uint64_t v111 = v42;
      if (v6)
      {
        uint64_t v113 = (v6 - 1) & v6;
        unint64_t v114 = __clz(__rbit64(v6)) | (v5 << 6);
        uint64_t v112 = v5;
LABEL_151:
        uint64_t v7 = (uint64_t)*(id *)(*(void *)(v7 + 48) + 8 * v114);
        while (v7)
        {
          sub_100478ED8(2, (void *)v7, a4);
          if (v111) {
            goto LABEL_123;
          }
          unint64_t v118 = v117;
          uint64_t v42 = 0;
          [v117 setParentList:a2];
          id v119 = [v118 createResolutionTokenMapIfNecessary];
          sub_10047D91C(2);
          NSString v120 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v119 updateForKey:v120];

          uint64_t v5 = v112;
          unint64_t v6 = v113;
          uint64_t v7 = v174;
          if ((v174 & 0x8000000000000000) == 0) {
            goto LABEL_140;
          }
LABEL_138:
          uint64_t v111 = v42;
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_176;
          }
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v7 = v201;
          swift_unknownObjectRelease();
          uint64_t v112 = v5;
          uint64_t v113 = v6;
        }
        goto LABEL_176;
      }
      uint64_t v112 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_195;
      }
      if (v112 < (uint64_t)logc)
      {
        unint64_t v115 = *(void *)(*(void *)typec + 8 * v112);
        if (!v115)
        {
          uint64_t v116 = v5 + 2;
          if (v5 + 2 >= (uint64_t)logc) {
            goto LABEL_176;
          }
          unint64_t v115 = *(void *)(*(void *)typec + 8 * v116);
          if (v115) {
            goto LABEL_149;
          }
          uint64_t v116 = v5 + 3;
          if (v5 + 3 >= (uint64_t)logc) {
            goto LABEL_176;
          }
          unint64_t v115 = *(void *)(*(void *)typec + 8 * v116);
          if (v115)
          {
LABEL_149:
            uint64_t v112 = v116;
          }
          else
          {
            uint64_t v112 = v5 + 4;
            if (v5 + 4 >= (uint64_t)logc) {
              goto LABEL_176;
            }
            unint64_t v115 = *(void *)(*(void *)typec + 8 * v112);
            if (!v115)
            {
              os_log_t v121 = (os_log_t)(v5 + 5);
              do
              {
                if (logc == v121) {
                  goto LABEL_176;
                }
                unint64_t v115 = *(void *)(*(void *)typec + 8 * (void)v121);
                os_log_t v121 = (os_log_t)((char *)v121 + 1);
              }
              while (!v115);
              uint64_t v112 = (uint64_t)&v121[-1].isa + 7;
            }
          }
        }
        uint64_t v113 = (v115 - 1) & v115;
        unint64_t v114 = __clz(__rbit64(v115)) + (v112 << 6);
        goto LABEL_151;
      }
LABEL_176:
      sub_1000C1AF8();
      return;
    case 3:
    case 4:
      uint64_t v7 = (uint64_t)[a2 createResolutionTokenMapIfNecessary];
      id v8 = [(id)v6 resolutionTokenMap];
      if (v8)
      {
        id v9 = v8;
        sub_100094134(&qword_100914110);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100776E40;
        *(unsigned char *)(inited + 32) = v5;
        id v11 = sub_100481120(v9, inited);
        swift_setDeallocating();
        sub_10047E214(v5);
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unsigned int v13 = [(id)v7 mergeWithMap:v11 forKey:v12];

        if (!v13)
        {

          return;
        }
        if (v5 == 3)
        {
          id v14 = [(id)v6 parentAccountID];
          if (!v14)
          {
            uint64_t v17 = 0;
            goto LABEL_170;
          }
          id v15 = v14;
          sub_1004784DC(3, v15, a4);
          if (!v4)
          {
            uint64_t v17 = v16;

LABEL_170:
            if (qword_100907A00 != -1) {
              swift_once();
            }
            uint64_t v125 = type metadata accessor for Logger();
            sub_10008E2DC(v125, (uint64_t)qword_10091F268);
            id v126 = v17;
            id v127 = a2;
            id v128 = v126;
            id v129 = v127;
            uint64_t v130 = Logger.logObject.getter();
            os_log_type_t v131 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v130, v131))
            {
              os_log_type_t typed = v131;
              long long v175 = v130;
              uint64_t v157 = v17;
              uint64_t v132 = swift_slowAlloc();
              uint64_t v201 = swift_slowAlloc();
              *(_DWORD *)uint64_t v132 = 136315394;
              id v133 = [v129 remObjectID];
              sub_100094134((uint64_t *)&unk_100914BC0);
              uint64_t v134 = Optional.descriptionOrNil.getter();
              unint64_t v136 = v135;

              sub_1000C51B8(v134, v136, &v201);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v132 + 12) = 2080;
              if (v157) {
                id v137 = [v128 remObjectID];
              }
              else {
                id v137 = 0;
              }
              uint64_t v151 = Optional.descriptionOrNil.getter();
              unint64_t v153 = v152;

              sub_1000C51B8(v151, v153, &v201);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v175, typed, "Updating list.parentAccount {list: %s, account: %s}", (uint8_t *)v132, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            [v129 setParentAccount:v128];
LABEL_191:

            return;
          }
LABEL_130:

          uint64_t v7 = (uint64_t)v15;
          goto LABEL_131;
        }
        id v106 = [(id)v6 parentListID];
        if (v106)
        {
          id v15 = v106;
          sub_100478504(4, v15, a4);
          if (v4) {
            goto LABEL_130;
          }
          int v138 = v107;
        }
        else
        {
          int v138 = 0;
        }
        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v139 = type metadata accessor for Logger();
        sub_10008E2DC(v139, (uint64_t)qword_10091F268);
        id v140 = v138;
        id v141 = a2;
        id v128 = v140;
        id v142 = v141;
        Class v143 = Logger.logObject.getter();
        os_log_type_t v144 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v143, v144))
        {
          os_log_type_t typee = v144;
          long long v176 = v143;
          uint64_t v158 = v138;
          uint64_t v145 = swift_slowAlloc();
          uint64_t v201 = swift_slowAlloc();
          *(_DWORD *)uint64_t v145 = 136315394;
          id v146 = [v142 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v147 = Optional.descriptionOrNil.getter();
          unint64_t v149 = v148;

          sub_1000C51B8(v147, v149, &v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v145 + 12) = 2080;
          if (v158) {
            id v150 = [v128 remObjectID];
          }
          else {
            id v150 = 0;
          }
          uint64_t v154 = Optional.descriptionOrNil.getter();
          unint64_t v156 = v155;

          sub_1000C51B8(v154, v156, &v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v176, typee, "Updating list.parentList {list: %s, parentList: %s}", (uint8_t *)v145, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [v142 setParentList:v128];
        goto LABEL_191;
      }
      if (qword_100907A00 != -1) {
        goto LABEL_196;
      }
LABEL_22:
      uint64_t v54 = type metadata accessor for Logger();
      sub_10008E2DC(v54, (uint64_t)qword_10091F268);
      id v55 = (id)v6;
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v178 = v56;
        Swift::String v59 = (void *)swift_slowAlloc();
        uint64_t v201 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 138543618;
        id v180 = [v55 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::String v59 = v180;

        *(_WORD *)(v58 + 12) = 2082;
        if (v5 == 4) {
          uint64_t v60 = 0x694C746E65726170;
        }
        else {
          uint64_t v60 = 0x6341746E65726170;
        }
        if (v5 == 4) {
          unint64_t v61 = 0xEC00000044497473;
        }
        else {
          unint64_t v61 = 0xEF4449746E756F63;
        }
        sub_1000C51B8(v60, v61, &v201);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v178, v57, "REMListStorageCDIngestor: establishRelationship(onStorage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v58, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v103 = self;
      sub_1000963CC(0, (unint64_t *)&unk_100914440);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v105 = String._bridgeToObjectiveC()();
      [v103 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v105];

      swift_willThrow();
LABEL_131:

      return;
    case 5:
      uint64_t v46 = v4;
      id v47 = [a1 reminderIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v7 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v7 = v191;
        *(void *)typea = v192;
        uint64_t v48 = v193;
        uint64_t v5 = v194;
        unint64_t v49 = v195;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v77 = -1 << *(unsigned char *)(v7 + 32);
        *(void *)typea = v7 + 56;
        uint64_t v48 = ~v77;
        uint64_t v78 = -v77;
        if (v78 < 64) {
          uint64_t v79 = ~(-1 << v78);
        }
        else {
          uint64_t v79 = -1;
        }
        unint64_t v49 = v79 & *(void *)(v7 + 56);
      }
      os_log_t loga = (os_log_t)((unint64_t)(v48 + 64) >> 6);
      unint64_t v172 = v7;
      if (v7 < 0) {
        goto LABEL_69;
      }
LABEL_71:
      uint64_t v80 = v46;
      if (v49)
      {
        uint64_t v82 = (v49 - 1) & v49;
        unint64_t v83 = __clz(__rbit64(v49)) | (v5 << 6);
        uint64_t v81 = v5;
      }
      else
      {
        uint64_t v81 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (v81 >= (uint64_t)loga) {
          goto LABEL_176;
        }
        unint64_t v84 = *(void *)(*(void *)typea + 8 * v81);
        if (!v84)
        {
          uint64_t v85 = v5 + 2;
          if (v5 + 2 >= (uint64_t)loga) {
            goto LABEL_176;
          }
          unint64_t v84 = *(void *)(*(void *)typea + 8 * v85);
          if (v84) {
            goto LABEL_80;
          }
          uint64_t v85 = v5 + 3;
          if (v5 + 3 >= (uint64_t)loga) {
            goto LABEL_176;
          }
          unint64_t v84 = *(void *)(*(void *)typea + 8 * v85);
          if (v84)
          {
LABEL_80:
            uint64_t v81 = v85;
          }
          else
          {
            uint64_t v81 = v5 + 4;
            if (v5 + 4 >= (uint64_t)loga) {
              goto LABEL_176;
            }
            unint64_t v84 = *(void *)(*(void *)typea + 8 * v81);
            if (!v84)
            {
              os_log_t v89 = (os_log_t)(v5 + 5);
              do
              {
                if (loga == v89) {
                  goto LABEL_176;
                }
                unint64_t v84 = *(void *)(*(void *)typea + 8 * (void)v89);
                os_log_t v89 = (os_log_t)((char *)v89 + 1);
              }
              while (!v84);
              uint64_t v81 = (uint64_t)&v89[-1].isa + 7;
            }
          }
        }
        uint64_t v82 = (v84 - 1) & v84;
        unint64_t v83 = __clz(__rbit64(v84)) + (v81 << 6);
      }
      uint64_t v7 = (uint64_t)*(id *)(*(void *)(v7 + 48) + 8 * v83);
      while (v7)
      {
        sub_100478F00(5, (void *)v7, a4);
        if (v80) {
          goto LABEL_123;
        }
        unint64_t v6 = (unint64_t)v86;
        uint64_t v46 = 0;
        [v86 setList:a2];
        id v87 = [(id)v6 createResolutionTokenMapIfNecessary];
        sub_10047DD94(1);
        NSString v88 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v87 updateForKey:v88];

        uint64_t v5 = v81;
        unint64_t v49 = v82;
        uint64_t v7 = v172;
        if ((v172 & 0x8000000000000000) == 0) {
          goto LABEL_71;
        }
LABEL_69:
        uint64_t v80 = v46;
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_176;
        }
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v7 = v201;
        swift_unknownObjectRelease();
        uint64_t v81 = v5;
        uint64_t v82 = v49;
      }
      goto LABEL_176;
    case 6:
      uint64_t v50 = v4;
      id v51 = [a1 sectionIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1000ED098((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
      uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v7 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v7 = v196;
        *(void *)typeb = v197;
        uint64_t v52 = v198;
        uint64_t v5 = v199;
        unint64_t v53 = v200;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v90 = -1 << *(unsigned char *)(v7 + 32);
        *(void *)typeb = v7 + 56;
        uint64_t v52 = ~v90;
        uint64_t v91 = -v90;
        if (v91 < 64) {
          uint64_t v92 = ~(-1 << v91);
        }
        else {
          uint64_t v92 = -1;
        }
        unint64_t v53 = v92 & *(void *)(v7 + 56);
      }
      os_log_t logb = (os_log_t)((unint64_t)(v52 + 64) >> 6);
      unint64_t v173 = v7;
      if (v7 < 0) {
        goto LABEL_98;
      }
LABEL_100:
      uint64_t v93 = v50;
      if (v53)
      {
        uint64_t v95 = (v53 - 1) & v53;
        unint64_t v96 = __clz(__rbit64(v53)) | (v5 << 6);
        uint64_t v94 = v5;
      }
      else
      {
        uint64_t v94 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          swift_once();
          goto LABEL_22;
        }
        if (v94 >= (uint64_t)logb) {
          goto LABEL_176;
        }
        unint64_t v97 = *(void *)(*(void *)typeb + 8 * v94);
        if (!v97)
        {
          uint64_t v98 = v5 + 2;
          if (v5 + 2 >= (uint64_t)logb) {
            goto LABEL_176;
          }
          unint64_t v97 = *(void *)(*(void *)typeb + 8 * v98);
          if (v97) {
            goto LABEL_109;
          }
          uint64_t v98 = v5 + 3;
          if (v5 + 3 >= (uint64_t)logb) {
            goto LABEL_176;
          }
          unint64_t v97 = *(void *)(*(void *)typeb + 8 * v98);
          if (v97)
          {
LABEL_109:
            uint64_t v94 = v98;
          }
          else
          {
            uint64_t v94 = v5 + 4;
            if (v5 + 4 >= (uint64_t)logb) {
              goto LABEL_176;
            }
            unint64_t v97 = *(void *)(*(void *)typeb + 8 * v94);
            if (!v97)
            {
              os_log_t v102 = (os_log_t)(v5 + 5);
              do
              {
                if (logb == v102) {
                  goto LABEL_176;
                }
                unint64_t v97 = *(void *)(*(void *)typeb + 8 * (void)v102);
                os_log_t v102 = (os_log_t)((char *)v102 + 1);
              }
              while (!v97);
              uint64_t v94 = (uint64_t)&v102[-1].isa + 7;
            }
          }
        }
        uint64_t v95 = (v97 - 1) & v97;
        unint64_t v96 = __clz(__rbit64(v97)) + (v94 << 6);
      }
      uint64_t v7 = (uint64_t)*(id *)(*(void *)(v7 + 48) + 8 * v96);
      while (1)
      {
        if (!v7) {
          goto LABEL_176;
        }
        sub_100478F28(6, (void *)v7, a4);
        if (v93) {
          break;
        }
        unint64_t v6 = (unint64_t)v99;
        uint64_t v50 = 0;
        [v99 setList:a2];
        id v100 = [(id)v6 createResolutionTokenMapIfNecessary];
        sub_10047EB88(1);
        NSString v101 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v100 updateForKey:v101];

        uint64_t v5 = v94;
        unint64_t v53 = v95;
        uint64_t v7 = v173;
        if ((v173 & 0x8000000000000000) == 0) {
          goto LABEL_100;
        }
LABEL_98:
        uint64_t v93 = v50;
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_176;
        }
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v7 = v201;
        swift_unknownObjectRelease();
        uint64_t v94 = v5;
        uint64_t v95 = v53;
      }
LABEL_123:
      sub_1000C1AF8();
      goto LABEL_131;
    default:
      id v18 = [a1 accountID];
      sub_1004784DC(0, v18, a4);
      unint64_t v20 = v19;

      if (!v4)
      {
        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_10008E2DC(v21, (uint64_t)qword_10091F268);
        id v22 = a2;
        id v23 = v20;
        id v24 = v22;
        id v25 = v23;
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          uint64_t v201 = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315394;
          os_log_type_t typef = v27;
          id v29 = [v24 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          logd = v26;
          uint64_t v30 = Optional.descriptionOrNil.getter();
          unint64_t v32 = v31;

          sub_1000C51B8(v30, v32, &v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 12) = 2080;
          id v33 = [v25 remObjectID];
          uint64_t v34 = Optional.descriptionOrNil.getter();
          unint64_t v36 = v35;

          sub_1000C51B8(v34, v36, &v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, logd, typef, "Updating list.account {list: %s, account: %s}", (uint8_t *)v28, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [v24 setAccount:v25];
        id v122 = [(id)v6 unsavedReminderIDsToCategorizeAsGroceryItems];
        if (v122)
        {
          Class v123 = v122;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          unint64_t v124 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1005E39F4(v124, v24, (uint64_t)v25);
          swift_bridgeObjectRelease();
        }
      }
      return;
  }
}

uint64_t sub_1005E5E50(void *a1, void *a2)
{
  v18[4] = sub_1005D8B0C;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  void v18[2] = sub_100288114;
  v18[3] = &unk_1008CCA00;
  unint64_t v4 = (unint64_t)_Block_copy(v18);
  swift_release();
  id v5 = [a2 sortedArrayWithOptions:16 usingComparator:v4];
  _Block_release((const void *)v4);
  if (swift_isEscapingClosureAtFileLocation())
  {
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    if (result) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unsigned int v13 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18[0] = v6;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  sub_100094134(&qword_100914560);
  sub_1000967F4(&qword_100912288, &qword_100914560);
  unint64_t v4 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();
  v18[0] = _swiftEmptyArrayStorage;
  if (v4 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_17;
  }
LABEL_4:
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  id v19 = a1;
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v4 + 8 * i + 32);
    }
    id v11 = v10;
    id v12 = [v10 remObjectID:v18[0]];

    if (v12)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unsigned int v13 = (void *)v18[0];
  a1 = v19;
LABEL_18:
  swift_bridgeObjectRelease();
  sub_1001FFDB0((unint64_t)v13);
  swift_bridgeObjectRelease();
  id v14 = objc_allocWithZone((Class)NSOrderedSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v14 initWithArray:isa];

  unsigned int v17 = [a1 isEqual:v16];
  if (v17)
  {
    a1;
  }
  return v17 ^ 1;
}

void sub_1005E61CC(void *a1)
{
  uint64_t v145 = type metadata accessor for UUID();
  uint64_t v141 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  id v142 = &v138[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  Class v143 = &v138[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  os_log_type_t v144 = &v138[-v7];
  *(void *)&long long v152 = type metadata accessor for Date();
  id v146 = *(NSObject **)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v147 = &v138[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  id v11 = &v138[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  id v14 = &v138[-v13];
  uint64_t v15 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = &v138[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v162 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v163 = (unint64_t)_swiftEmptyArrayStorage;
  id v19 = a1;
  NSOrderedSet.makeIterator()();

  sub_1002913D4();
  dispatch thunk of IteratorProtocol.next()();
  if (v161)
  {
    uint64_t v1 = ((char *)&type metadata for Any + 8);
    do
    {
      sub_10009A1A0(&v160, v156);
      sub_10009A1B0((uint64_t)v156, (uint64_t)v155);
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v159 = 0;
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v156);
      if (v159)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v161);
  }
  uint64_t v151 = (void (**)(unsigned char *, unsigned char *, uint64_t))v11;
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v20 = v162;
  if (v162 >> 62) {
    goto LABEL_186;
  }
  unint64_t v162 = *(void *)((v162 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v21 = v162;
  swift_bridgeObjectRetain();
  uint64_t v22 = v21;
  while (1)
  {
    unint64_t v153 = v22;
    uint64_t v154 = v20;
    uint64_t v148 = v21;
    if (!v21)
    {
      unint64_t v31 = 0;
LABEL_56:
      swift_bridgeObjectRelease();
      id v23 = (char *)(v31 + 1);
      if (v31 == -1) {
        goto LABEL_191;
      }
      unint64_t v31 = v153;
      unint64_t v162 = v153;
      while (1)
      {
        if (qword_100907A00 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        uint64_t v57 = sub_10008E2DC(v56, (uint64_t)qword_10091F268);
        swift_bridgeObjectRetain();
        uint64_t v147 = (unsigned char *)v57;
        unint64_t v30 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled((os_log_t)v30, v58))
        {
          uint64_t v59 = swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 134218496;
          *(void *)&long long v160 = v31;
          id v14 = (char *)&v160 + 8;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 12) = 2048;
          swift_beginAccess();
          *(void *)&long long v160 = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v59 + 22) = 2048;
          *(void *)&long long v160 = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v30, v58, "Going to back propagate ordering changes to CD reminders {remindersCount: %ld, startIndexToKeepUntouched: %ld, maxDisplayOrder: %lu}", (uint8_t *)v59, 0x20u);
          uint64_t v21 = v148;
          swift_slowDealloc();

          uint64_t v159 = 0;
          if (!v21) {
            goto LABEL_71;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
          uint64_t v159 = 0;
          if (!v21)
          {
LABEL_71:
            uint64_t v60 = 0;
            goto LABEL_72;
          }
        }
        if ((v20 & 0xC000000000000001) != 0) {
          goto LABEL_192;
        }
        if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          unint64_t v30 = (unint64_t)*(id *)(v20 + 32);
          goto LABEL_69;
        }
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        Class v32 = (Class)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_33:
        Class v33 = v32;
        id v34 = [(objc_class *)v32 displayOrder];

        if (!v34) {
          goto LABEL_36;
        }
        if (v1)
        {
          unint64_t v35 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v30 & 0x8000000000000000) != 0) {
            goto LABEL_201;
          }
          if (v30 >= *((void *)v150 + 2)) {
            goto LABEL_202;
          }
          unint64_t v35 = v149[v30].isa;
        }
        uint64_t v54 = v35;
        id v55 = (char *)[(objc_class *)v35 displayOrder];

        id v23 = v55 - 1;
        if (!v55) {
          goto LABEL_198;
        }
      }
    }
    id v23 = 0;
    uint64_t v1 = (v20 & 0xC000000000000001);
    id v150 = (char *)(v20 & 0xFFFFFFFFFFFFFF8);
    unint64_t v149 = (v20 + 32);
    unint64_t v24 = -1;
    while (1)
    {
      unint64_t v25 = (unint64_t)&v23[v21 - 1];
      if (__OFSUB__(&v23[v21], 1))
      {
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
      if (v1)
      {
        uint64_t v26 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v25 & 0x8000000000000000) != 0) {
          goto LABEL_178;
        }
        if (v25 >= *((void *)v150 + 2)) {
          goto LABEL_179;
        }
        uint64_t v26 = v149[v25].isa;
      }
      os_log_type_t v27 = v26;
      id v28 = [(objc_class *)v26 displayOrder];
      uint64_t v20 = (uint64_t)[(objc_class *)v27 icsDisplayOrder];

      BOOL v29 = v20 > 0 || (unint64_t)v28 >= v24;
      if (v29) {
        break;
      }
      unint64_t v30 = (unint64_t)&v23[v153 - 1];
      if (__OFSUB__(&v23[v153], 1)) {
        goto LABEL_173;
      }
      unint64_t v162 = (unint64_t)&(v23--)[v153 - 1];
      unint64_t v24 = (unint64_t)v28;
      uint64_t v20 = v154;
      if (!v25)
      {
        unint64_t v31 = v153;
        goto LABEL_28;
      }
    }
    unint64_t v31 = v153;
    unint64_t v30 = (unint64_t)&v23[v153];
    uint64_t v20 = v154;
LABEL_28:
    swift_bridgeObjectRelease();
    if ((uint64_t)v30 < (uint64_t)v31)
    {
      if (v1) {
        goto LABEL_195;
      }
      if ((v30 & 0x8000000000000000) == 0)
      {
        if (v30 >= *((void *)v150 + 2)) {
          goto LABEL_197;
        }
        Class v32 = v149[v30].isa;
        goto LABEL_33;
      }
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
      goto LABEL_200;
    }
LABEL_36:
    if (v21 < 1) {
      break;
    }
    unint64_t v36 = v146 + 7;
    id v37 = v146 + 6;
    unint64_t v149 = v146 + 2;
    ++v146;
    swift_bridgeObjectRetain();
    uint64_t v38 = 0;
    unint64_t v31 = 0;
    uint64_t v39 = (uint64_t *)&unk_100909A40;
    id v150 = v14;
    while (1)
    {
      id v40 = v1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v20 + 8 * v38 + 32);
      unint64_t v41 = v40;
      uint64_t v42 = v39;
      id v43 = [v40 creationDate];
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v45 = (void (**)(void, void, void))v151;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v46 = 1;
        uint64_t v45 = (void (**)(void, void, void))v151;
      }
      uint64_t v47 = v152;
      ((void (*)(void, uint64_t, uint64_t, void))v36->isa)(v45, v46, 1, v152);
      uint64_t v48 = (uint64_t)v45;
      uint64_t v39 = v42;
      id v14 = v150;
      sub_100096408(v48, (uint64_t)v150, v39);
      if (((unint64_t (*)(char *, uint64_t, uint64_t))v37->isa)(v14, 1, v47))
      {
        sub_1000966BC((uint64_t)v14, v39);

        double v49 = 0.0;
      }
      else
      {
        uint64_t v50 = v147;
        ((void (*)(unsigned char *, char *, uint64_t))v149->isa)(v147, v14, v47);
        sub_1000966BC((uint64_t)v14, v39);
        Date.timeIntervalSince1970.getter();
        double v52 = v51;
        unint64_t v53 = v50;
        uint64_t v21 = v148;
        ((void (*)(unsigned char *, void))v146->isa)(v53, v152);

        double v49 = 1.84467441e19;
        if (v52 <= 1.84467441e19) {
          double v49 = v52;
        }
        if (v52 <= 0.0) {
          double v49 = 0.0;
        }
      }
      uint64_t v20 = v154;
      if ((~*(void *)&v49 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v49 <= -1.0) {
        goto LABEL_175;
      }
      if (v49 >= 1.84467441e19) {
        goto LABEL_176;
      }
      if (v31 <= (unint64_t)v49) {
        unint64_t v31 = (unint64_t)v49;
      }
      if (v21 == ++v38) {
        goto LABEL_56;
      }
    }
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v162 = v22;
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  while (1)
  {
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_69:
    uint64_t v60 = [(id)v30 displayOrder];

LABEL_72:
    swift_beginAccess();
    uint64_t v1 = v162;
    if ((v162 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_189:
    __break(1u);
  }
  if (!v162)
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
    goto LABEL_142;
  }
  uint64_t v151 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v31 - 1);
  if (__OFSUB__(v31, 1)) {
    goto LABEL_194;
  }
  id v146 = v23;
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  *(void *)&long long v152 = v20 & 0xC000000000000001;
  uint64_t v148 = v20 & 0xFFFFFFFFFFFFFF8;
  id v150 = (char *)(v162 - 1);
  uint64_t v63 = (id *)(v20 + 40);
  unint64_t v149 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v21 = v62 + 1;
    if (!(void)v152) {
      break;
    }
    id v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    if (v62 >= (uint64_t)v151) {
      goto LABEL_89;
    }
    id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_86:
    uint64_t v67 = v65;
    unint64_t v31 = (unint64_t)[v65 displayOrder];

    if (v61 < v60 && (unint64_t)v60 < v31) {
      goto LABEL_76;
    }
LABEL_93:
    BOOL v29 = __CFADD__(v61, 1);
    uint64_t v64 = ((char *)&v61->isa + 1);
    if (v29) {
      goto LABEL_180;
    }
    if (v64 == v60)
    {
LABEL_76:
      uint64_t v64 = v60;
      goto LABEL_77;
    }
    id v14 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v149 = sub_10030B894(0, (int64_t)v149[2].isa + 1, 1, v149);
    }
    unint64_t isa = (unint64_t)v149[2].isa;
    unint64_t v68 = (unint64_t)v149[3].isa;
    if (isa >= v68 >> 1) {
      unint64_t v149 = sub_10030B894((void *)(v68 > 1), isa + 1, 1, v149);
    }
    uint64_t v70 = v149;
    v149[2].unint64_t isa = (Class)(isa + 1);
    id v71 = &v70[3 * isa];
    v71[4].unint64_t isa = (Class)v14;
    v71[5].unint64_t isa = (Class)v60;
    v71[6].unint64_t isa = (Class)v64;
    id v72 = [v14 objectID];
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v20 = v154;
LABEL_77:

    uint64_t v60 = v64;
    if (v150 == (char *)v62) {
      goto LABEL_103;
    }
LABEL_78:
    ++v63;
    unint64_t v61 = v60;
    ++v62;
    uint64_t v60 = v31;
    if (v1 == v21) {
      goto LABEL_177;
    }
  }
  unint64_t v66 = *(void *)(v148 + 16);
  if (v62 >= v66) {
    goto LABEL_181;
  }
  id v14 = (char *)*(v63 - 1);
  if (v62 < (uint64_t)v151)
  {
    if (v21 >= v66) {
      goto LABEL_183;
    }
    id v65 = *v63;
    goto LABEL_86;
  }
LABEL_89:
  unint64_t v31 = -1;
  if (v60 == -1 || v61 >= v60) {
    goto LABEL_93;
  }

  if (v150 != (char *)v62) {
    goto LABEL_78;
  }
  uint64_t v64 = v60;
LABEL_103:
  uint64_t v159 = (uint64_t)v64;
  id v14 = (char *)v146;
  if (v146 >= v64)
  {
    uint64_t v1 = v149;
    goto LABEL_142;
  }
  NSString v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134218240;
    *(void *)&v156[0] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2048;
    id v14 = (char *)(v21 + 14);
    swift_beginAccess();
    uint64_t v158 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Back propagating ordering changes: display order has gone too large in first try. Going to reset from 1 {maxDisplayOrder: %lu, largestDisplayOrder: %lu}", (uint8_t *)v21, 0x16u);
    swift_slowDealloc();
  }
  swift_bridgeObjectRelease();

  unint64_t v163 = (unint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  int64_t v75 = v162;
  id v23 = (char *)v153;
  if ((v162 & 0x8000000000000000) != 0) {
    goto LABEL_199;
  }
  if (v162)
  {
    uint64_t v21 = 0;
    uint64_t v1 = _swiftEmptyArrayStorage;
    while (v75 != v21)
    {
      if ((void)v152)
      {
        uint64_t v76 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v21 >= *(void *)(v148 + 16)) {
          goto LABEL_185;
        }
        uint64_t v76 = (char *)*(id *)(v20 + 8 * v21 + 32);
      }
      id v14 = v76;
      ++v21;
      uint64_t v77 = (objc_class *)[v76 displayOrder];
      if ((objc_class *)v21 != v77)
      {
        uint64_t v78 = v77;
        uint64_t v79 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = sub_10030B894(0, (int64_t)v1[2].isa + 1, 1, v1);
        }
        unint64_t v31 = (unint64_t)v1[2].isa;
        unint64_t v80 = (unint64_t)v1[3].isa;
        if (v31 >= v80 >> 1) {
          uint64_t v1 = sub_10030B894((void *)(v80 > 1), v31 + 1, 1, v1);
        }
        v1[2].unint64_t isa = (Class)(v31 + 1);
        uint64_t v81 = &v1[3 * v31];
        v81[4].unint64_t isa = (Class)v79;
        v81[5].unint64_t isa = v78;
        v81[6].unint64_t isa = (Class)v21;
        id v82 = [v79 objectID];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v20 = v154;
      }

      if (v75 == v21) {
        goto LABEL_125;
      }
    }
    goto LABEL_182;
  }
  uint64_t v1 = _swiftEmptyArrayStorage;
LABEL_125:
  if ((uint64_t)v23 < v75)
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
    return;
  }
  if ((char *)v75 != v23)
  {
    while (v75 < (uint64_t)v23)
    {
      if ((void)v152)
      {
        id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v75 >= *(void *)(v148 + 16)) {
          goto LABEL_189;
        }
        id v83 = *(id *)(v20 + 8 * v75 + 32);
      }
      unint64_t v84 = v83;
      ++v75;
      uint64_t v85 = (objc_class *)[v83 displayOrder];
      if ((unint64_t)v85 >= v75)
      {

        goto LABEL_142;
      }
      uint64_t v86 = v85;
      uint64_t v21 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v1 = sub_10030B894(0, (int64_t)v1[2].isa + 1, 1, v1);
      }
      unint64_t v88 = (unint64_t)v1[2].isa;
      unint64_t v87 = (unint64_t)v1[3].isa;
      if (v88 >= v87 >> 1) {
        uint64_t v1 = sub_10030B894((void *)(v87 > 1), v88 + 1, 1, v1);
      }
      v1[2].unint64_t isa = (Class)(v88 + 1);
      os_log_t v89 = &v1[3 * v88];
      v89[4].unint64_t isa = (Class)v21;
      v89[5].unint64_t isa = v86;
      v89[6].unint64_t isa = (Class)v75;
      id v14 = (char *)[(id)v21 objectID];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      if (v23 == (char *)v75) {
        goto LABEL_142;
      }
    }
    goto LABEL_184;
  }
LABEL_142:
  swift_bridgeObjectRelease();
  if (!v1[2].isa)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v99 = 0;
      id v100 = "Produced empty change logs when trying to back propagated ordering changes to CD reminders, maybe a bug or "
             "should shortcut earlier.";
LABEL_149:
      _os_log_impl((void *)&_mh_execute_header, v97, v98, v100, v99, 2u);
      swift_slowDealloc();
    }
LABEL_150:

    return;
  }
  uint64_t v90 = [(objc_class *)v1[4].isa managedObjectContext];
  unint64_t v91 = v163;
  if (!v90)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      uint64_t v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v99 = 0;
      id v100 = "backPropagateOrderingChangesToICSDisplayOrder: Failed to obtain an managedObjextContext from a changed reminder";
      goto LABEL_149;
    }
    goto LABEL_150;
  }
  uint64_t v92 = v90;
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  uint64_t v154 = sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_100776E40;
  *(void *)(v93 + 56) = sub_100094134(&qword_100908270);
  *(void *)(v93 + 64) = sub_1000967F4(&qword_10091C490, &qword_100908270);
  *(void *)(v93 + 32) = v91;
  uint64_t v94 = NSPredicate.init(format:_:)();
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v95 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v96 = [(id)swift_getObjCClassFromMetadata() entity];
  [v95 setEntity:v96];

  [v95 setAffectedStores:0];
  [v95 setPredicate:v94];
  NSManagedObjectContext.fetch<A>(_:)();

  swift_bridgeObjectRelease();
  uint64_t v101 = v145;
  Class v102 = v1[2].isa;
  if (v102)
  {
    swift_bridgeObjectRetain();
    id v103 = (uint64_t *)&v1[6];
    do
    {
      char v104 = (void *)*(v103 - 2);
      uint64_t v105 = *v103;
      v103 += 3;
      [v104 setDisplayOrder:v105];
      Class v102 = (Class)((char *)v102 - 1);
    }
    while (v102);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  id v106 = Logger.logObject.getter();
  int v107 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v106, (os_log_type_t)v107))
  {
    uint64_t v108 = (uint8_t *)swift_slowAlloc();
    uint64_t v148 = swift_slowAlloc();
    uint64_t v158 = v148;
    *(_DWORD *)uint64_t v108 = 136315138;
    uint64_t v109 = v1;
    int64_t v110 = (int64_t)v1[2].isa;
    if (v110)
    {
      int v139 = v107;
      id v140 = v108;
      id v146 = v106;
      uint64_t v147 = v92;
      uint64_t v157 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1001DE930(0, v110, 0);
      unint64_t v153 = v141 + 56;
      uint64_t v111 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v141 + 48);
      uint64_t v151 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v141 + 16);
      id v150 = (char *)(v141 + 8);
      unint64_t v149 = v109;
      uint64_t v112 = v109 + 6;
      long long v152 = xmmword_100776E80;
      do
      {
        Class v113 = v112[-1].isa;
        Class v114 = v112->isa;
        unint64_t v115 = v112[-2].isa;
        id v116 = [(objc_class *)v115 identifier];
        if (v116)
        {
          unint64_t v117 = v116;
          uint64_t v118 = (uint64_t)v143;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v119 = 0;
        }
        else
        {
          uint64_t v119 = 1;
          uint64_t v118 = (uint64_t)v143;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v153)(v118, v119, 1, v101);
        NSString v120 = v144;
        sub_100096408(v118, (uint64_t)v144, (uint64_t *)&unk_100909E50);
        if ((*v111)(v120, 1, v101))
        {
          sub_1000966BC((uint64_t)v120, (uint64_t *)&unk_100909E50);
          uint64_t v121 = 0;
          uint64_t v122 = 0;
        }
        else
        {
          Class v123 = v142;
          (*v151)(v142, v120, v101);
          sub_1000966BC((uint64_t)v120, (uint64_t *)&unk_100909E50);
          uint64_t v124 = UUID.uuidString.getter();
          uint64_t v125 = v101;
          uint64_t v121 = v124;
          uint64_t v122 = v126;
          (*(void (**)(unsigned char *, uint64_t))v150)(v123, v125);
        }
        uint64_t v127 = swift_allocObject();
        *(_OWORD *)(v127 + 16) = v152;
        *(void *)(v127 + 56) = &type metadata for UInt;
        *(void *)(v127 + 64) = &protocol witness table for UInt;
        *(void *)(v127 + 72) = v114;
        *(void *)(v127 + 32) = v113;
        *(void *)(v127 + 96) = &type metadata for UInt;
        *(void *)(v127 + 104) = &protocol witness table for UInt;
        uint64_t v128 = String.init(format:_:)();
        uint64_t v130 = v129;

        os_log_type_t v131 = v157;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE930(0, v131[2] + 1, 1);
          os_log_type_t v131 = v157;
        }
        unint64_t v133 = v131[2];
        unint64_t v132 = v131[3];
        if (v133 >= v132 >> 1)
        {
          sub_1001DE930(v132 > 1, v133 + 1, 1);
          os_log_type_t v131 = v157;
        }
        v112 += 3;
        v131[2] = v133 + 1;
        uint64_t v134 = &v131[4 * v133];
        v134[4] = v121;
        v134[5] = v122;
        v134[6] = v128;
        v134[7] = v130;
        --v110;
        uint64_t v101 = v145;
      }
      while (v110);
      swift_bridgeObjectRelease();
      uint64_t v92 = v147;
      id v106 = v146;
      uint64_t v108 = v140;
      LOBYTE(v107) = v139;
    }
    sub_100094134(&qword_10090F6C0);
    uint64_t v135 = Array.description.getter();
    unint64_t v137 = v136;
    swift_bridgeObjectRelease();
    uint64_t v157 = (void *)sub_1000C51B8(v135, v137, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v107, "Back propagated ordering changes to CD reminders - {changes: %s}", v108, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

const char *sub_1005E7AD8()
{
  return "icsDisplayOrder";
}

id sub_1005E7AE4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 icsDisplayOrder];
  *a2 = result;
  return result;
}

id sub_1005E7B18(void *a1, id *a2)
{
  return [*a2 setIcsDisplayOrder:*a1];
}

uint64_t sub_1005E7B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005E7B3C()
{
  return swift_release();
}

uint64_t sub_1005E7B44@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005E7BA8(a1, (uint64_t (*)(void))sub_1003F7C60, a2);
}

uint64_t sub_1005E7B70()
{
  return sub_1003E9594();
}

uint64_t sub_1005E7B7C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005E7BA8(a1, (uint64_t (*)(void))sub_100441580, a2);
}

uint64_t sub_1005E7BA8@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1005E7BDC()
{
  return sub_1003E97F0();
}

unsigned char *storeEnumTagSinglePayload for REMListStorageCDIngestor.RelationshipOrderingValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005E7CB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMListStorageCDIngestor.RelationshipOrderingValueKey;
}

unsigned char *storeEnumTagSinglePayload for REMListStorageCDIngestor.OrderableRelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005E7DB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMListStorageCDIngestor.OrderableRelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMListStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005E7EBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMListStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMListStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDA) {
    goto LABEL_17;
  }
  if (a2 + 38 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 38) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 38;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 38;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 38;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x27;
  int v8 = v6 - 39;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMListStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 38 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 38) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD9)
  {
    unsigned int v6 = ((a2 - 218) >> 8) + 1;
    *uint64_t result = a2 + 38;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1005E8050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 38;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMListStorageCDIngestor.ValueKey()
{
  return &type metadata for REMListStorageCDIngestor.ValueKey;
}

uint64_t sub_1005E8088()
{
  return sub_1000967F4(&qword_10091F530, &qword_10091F538);
}

unint64_t sub_1005E80C8()
{
  unint64_t result = qword_10091F540;
  if (!qword_10091F540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F540);
  }
  return result;
}

uint64_t sub_1005E811C()
{
  return sub_1000967F4(&qword_10091F548, &qword_10091F550);
}

unint64_t sub_1005E815C()
{
  unint64_t result = qword_10091F558;
  if (!qword_10091F558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F558);
  }
  return result;
}

uint64_t sub_1005E81B0()
{
  return sub_1000967F4(&qword_10091F560, &qword_10091F568);
}

unint64_t sub_1005E81F0()
{
  unint64_t result = qword_10091F570;
  if (!qword_10091F570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F570);
  }
  return result;
}

uint64_t sub_1005E8244()
{
  return sub_1000967F4(&qword_10091F578, &qword_10091F580);
}

unint64_t sub_1005E8284()
{
  unint64_t result = qword_10091F588;
  if (!qword_10091F588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F588);
  }
  return result;
}

void *sub_1005E82D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  id v11 = &v21[-v10 - 8];
  id v12 = [v1 identifier];
  if (v12)
  {
    uint64_t v13 = v12;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
  }
  sub_100096408((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v5, v11, v2);
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v15 = v16;
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  id v17 = [v1 accountTypeHost];
  sub_10058F158((uint64_t)v21);
  type metadata accessor for RDManualSortIDPersistenceHost();
  id v18 = (void *)swift_allocObject();
  void v18[2] = v14;
  v18[3] = v15;
  v18[4] = v17;
  sub_100096408((uint64_t)v21, (uint64_t)(v18 + 5), &qword_1009186E0);
  return v18;
}

uint64_t sub_1005E8560()
{
  swift_bridgeObjectRelease();

  sub_1000966BC(v0 + 40, &qword_1009186E0);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDManualSortIDPersistenceHost()
{
  return self;
}

Swift::Int sub_1005E85D4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (*(void *)(v1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1005E8660()
{
  if (*(void *)(*(void *)v0 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1005E86EC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (*(void *)(v1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1005E8774(uint64_t *a1, uint64_t *a2)
{
  return sub_1005E87D8(*a1, *a2);
}

unint64_t sub_1005E8784()
{
  unint64_t result = qword_10091F640;
  if (!qword_10091F640)
  {
    type metadata accessor for RDManualSortIDPersistenceHost();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F640);
  }
  return result;
}

uint64_t sub_1005E87D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t result = (v4 | v5) == 0;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && v4 == v5) {
      return 1;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_1005E8824(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  id v5 = objc_allocWithZone((Class)REMAccountTypeHost);
  id v6 = a1;
  id v7 = [v5 initWithType:a2];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1005E9054;
  *(void *)(v8 + 24) = v4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1005E905C;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1005E9054;
  *(void *)(v10 + 24) = v4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1005E9574;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1005E9054;
  *(void *)(v12 + 24) = v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1005E9574;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1005E9054;
  *(void *)(v14 + 24) = v4;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1005E9574;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1005E9054;
  *(void *)(v16 + 24) = v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1005E9574;
  *(void *)(v17 + 24) = v16;
  *(void *)(swift_allocObject() + 16) = v6;
  swift_retain_n();
  id v18 = v6;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v20 & 1;
}

uint64_t sub_1005E8BA0(uint64_t a1)
{
  id v1 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:a1];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5) {
    goto LABEL_13;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_14;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    if (v14 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v16 != v17)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_14;
      }
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
      if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v23 != v24)
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v25) {
          goto LABEL_14;
        }
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
        if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v30 & 1) == 0)
          {
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v34 = v33;
            if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v36 & 1) == 0)
              {
                uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v39 = v38;
                if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
                {
                  swift_bridgeObjectRelease_n();
                  uint64_t v18 = 0;
                  goto LABEL_15;
                }
                char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v18 = 0;
                if (v41) {
                  goto LABEL_15;
                }
                uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v44 = v43;
                if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v46 & 1) == 0)
                  {
                    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v49 = v48;
                    if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
                    {
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v51 & 1) == 0) {
                        goto LABEL_14;
                      }
                    }
                    id v31 = [v1 supportsHashtags];
LABEL_25:
                    uint64_t v18 = (uint64_t)v31;
                    goto LABEL_15;
                  }
                }
                id v31 = [v1 supportsCustomSmartLists];
                goto LABEL_25;
              }
            }
            id v31 = [v1 supportsAssignments];
            goto LABEL_25;
          }
        }
        id v31 = [v1 supportsFlagged];
        goto LABEL_25;
      }
    }
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v18 = 1;
LABEL_15:

  return v18;
}

uint64_t sub_1005E901C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005E9054()
{
  return sub_1005E8BA0(*(void *)(v0 + 16));
}

uint64_t sub_1005E905C()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1005E9090@<X0>(unsigned char *a1@<X8>)
{
  return sub_1005E90E0(a1);
}

uint64_t sub_1005E90A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005E90E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1005E9114@<X0>(char *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5) {
    goto LABEL_13;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v7) {
    goto LABEL_14;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12) {
    goto LABEL_13;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_14;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
    goto LABEL_13;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_14;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24) {
    goto LABEL_13;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_14;
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29) {
    goto LABEL_13;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_14;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34) {
    goto LABEL_13;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v35) {
    goto LABEL_14;
  }
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;
  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39) {
    goto LABEL_13;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_14;
  }
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;
  if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v43 == v44)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
  {
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;
    if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v48 == v49)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      char v19 = 1;
      goto LABEL_15;
    }
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v50)
    {
      char v19 = 1;
      goto LABEL_15;
    }
  }
LABEL_14:
  char v19 = 0;
LABEL_15:
  *a1 = v19;
  return result;
}

uint64_t sub_1005E94FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005E9534@<X0>(char *a1@<X8>)
{
  return sub_1005E9114(a1);
}

uint64_t sub_1005E9574()
{
  return sub_1005E905C();
}

uint64_t sub_1005E958C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091F648);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091F648);
  if (qword_100907820 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424A8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005E9654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v6, a1, a2, v9);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v12 = v15;
    if (!v15) {
      break;
    }
    sub_1005E983C(v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

id sub_1005E983C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  __n128 v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v11 = __chkstk_darwin(v10).n128_u64[0];
  char v13 = (char *)&v81 - v12;
  id v14 = [a1 ckIdentifier:v11];
  unint64_t v87 = a1;
  uint64_t v88 = v1;
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    uint64_t v102 = v16;
    unint64_t v19 = sub_1005EA1C0(v16, v18);
    unint64_t v21 = v19;
    if (v19 >> 62) {
      goto LABEL_44;
    }
    for (uint64_t i = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      unint64_t v86 = v21 & 0xC000000000000001;
      uint64_t v83 = v21 & 0xFFFFFFFFFFFFFF8;
      unint64_t v82 = v21 + 32;
      *(void *)&long long v20 = 136446722;
      long long v93 = v20;
      uint64_t v92 = (char *)&type metadata for Any + 8;
      uint64_t v94 = v18;
      unint64_t v85 = v21;
      uint64_t v84 = i;
      while (1)
      {
        if (v86)
        {
          id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v26 = __OFADD__(v23, 1);
          unint64_t v27 = v23 + 1;
          if (v26) {
            break;
          }
          goto LABEL_12;
        }
        if (v23 >= *(void *)(v83 + 16)) {
          goto LABEL_43;
        }
        id v25 = *(id *)(v82 + 8 * v23);
        BOOL v26 = __OFADD__(v23, 1);
        unint64_t v27 = v23 + 1;
        if (v26) {
          break;
        }
LABEL_12:
        unint64_t v90 = v27;
        id v28 = v25;
        swift_bridgeObjectRetain();
        sub_1005EA5BC((uint64_t)&off_1008B4468, v28, v102, v18);
        uint64_t v30 = v29;
        uint64_t v89 = v24;
        id v103 = v28;

        swift_bridgeObjectRelease();
        uint64_t v91 = v30;
        uint64_t v31 = *(void *)(v30 + 16);
        if (v31)
        {
          uint64_t v101 = *(void **)(v88 + 16);
          uint64_t v32 = (unsigned __int8 *)(v91 + 32);
          Class v100 = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
          while (1)
          {
            int v33 = *v32;
            uint64_t v34 = v100;
            char v35 = objc_allocWithZone(v100);
            uint64_t v36 = v102;
            id v37 = v103;
            *(void *)&v35[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v103;
            v35[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v33;
            uint64_t v38 = v101;
            *(void *)&v35[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v101;
            uint64_t v39 = (uint64_t *)&v35[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
            *uint64_t v39 = v36;
            v39[1] = v18;
            id v40 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
            id v41 = v37;
            id v42 = v38;
            id v43 = v41;
            swift_bridgeObjectRetain();
            id v44 = v42;
            char v45 = v35;
            id v46 = [v40 init:v43];
            *(void *)&v45[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v46;

            v106.receiver = v45;
            v106.super_class = v34;
            id v47 = [super init];

            uint64_t v48 = v47;
            uint64_t v50 = sub_100134E1C();
            uint64_t v52 = v51;
            unsigned __int8 v53 = v49;
            int v54 = v49;
            if (!(v49 >> 6)) {
              goto LABEL_19;
            }
            if (v49 >> 6 == 1) {
              break;
            }

LABEL_15:
            ++v32;
            if (!--v31) {
              goto LABEL_5;
            }
          }
          int v54 = v49 & 0x3F;
LABEL_19:
          int v99 = v54;
          if (qword_100907A20 != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          sub_10008E2DC(v55, (uint64_t)qword_10091F648);
          id v56 = v43;
          sub_1001774FC(v50, v52, v53);
          uint64_t v57 = Logger.logObject.getter();
          int v98 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, (os_log_type_t)v98))
          {
            os_log_t v97 = v57;
            uint64_t v58 = swift_slowAlloc();
            uint64_t v96 = swift_slowAlloc();
            v107[0] = v96;
            *(_DWORD *)uint64_t v58 = v93;
            if (v33) {
              uint64_t v59 = 0x7365746F6ELL;
            }
            else {
              uint64_t v59 = 0x656C746974;
            }
            *(void *)(v58 + 4) = sub_1000C51B8(v59, 0xE500000000000000, v107);
            swift_bridgeObjectRelease();
            *(_WORD *)(v58 + 12) = 2082;
            id v60 = [v56 remObjectID];
            if (v60)
            {
              unint64_t v61 = v60;
              id v62 = [v60 description];
              id v95 = v48;
              id v63 = v62;

              uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v66 = v65;

              uint64_t v48 = v95;
            }
            else
            {
              unint64_t v66 = 0xE300000000000000;
              uint64_t v64 = 7104878;
            }
            *(void *)(v58 + 14) = sub_1000C51B8(v64, v66, v107);

            swift_bridgeObjectRelease();
            *(_WORD *)(v58 + 22) = 2082;
            v104[0] = v50;
            v104[1] = v52;
            char v105 = v99;
            sub_100177534();
            uint64_t v67 = Error.rem_errorDescription.getter();
            *(void *)(v58 + 24) = sub_1000C51B8(v67, v68, v107);
            swift_bridgeObjectRelease();
            sub_100177518(v50, v52, v53);
            sub_100177518(v50, v52, v53);
            os_log_t v69 = v97;
            _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "#️⃣ RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error autoConverting %{public}s on reminder[%{public}s] {error: %{public}s}", (uint8_t *)v58, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v18 = v94;
          }
          else
          {

            sub_100177518(v50, v52, v53);
            sub_100177518(v50, v52, v53);
          }
          goto LABEL_15;
        }
LABEL_5:

        swift_bridgeObjectRelease();
        unint64_t v23 = v90;
        a1 = v87;
        uint64_t v1 = v88;
        unint64_t v21 = v85;
        uint64_t v24 = v89;
        if (v90 == v84) {
          goto LABEL_45;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      ;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907A20 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_10008E2DC(v70, (uint64_t)qword_10091F648);
    id v71 = a1;
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
      id v103 = (id)swift_slowAlloc();
      v104[0] = (uint64_t)v103;
      *(_DWORD *)os_log_type_t v74 = 136446210;
      id v75 = [v71 uuidForChangeTracking];
      if (v75)
      {
        uint64_t v76 = v75;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
      }
      sub_1000F44F4((uint64_t)v9, (uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3))
      {
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
        unint64_t v77 = 0xE90000000000003ELL;
        uint64_t v78 = 0x646975752D6F6E3CLL;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v3);
        sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909E50);
        uint64_t v78 = UUID.uuidString.getter();
        unint64_t v77 = v79;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      v107[0] = sub_1000C51B8(v78, v77, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "#️⃣ RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: activity[%{public}s] has nil ckIdentifier. Deleting without further action", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a1 = v87;
    }
    else
    {
    }
    uint64_t v1 = v88;
  }
  return [*(id *)(v1 + 16) deleteObject:a1];
}

uint64_t sub_1005EA1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PredicatesOMa(0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v6 = a1;
  *((void *)v6 + 1) = a2;
  char v6[16] = 1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v6);
  sub_1000EEBC8();
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  return v10;
}

uint64_t sub_1005EA53C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner()
{
  return self;
}

uint64_t sub_1005EA598(uint64_t a1, uint64_t a2)
{
  return sub_1005E9654(a1, a2);
}

void sub_1005EA5BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  id v42 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_10090FDF0);
  *(void *)&double v7 = __chkstk_darwin(v6 - 8).n128_u64[0];
  uint64_t v38 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a1 + 32;
    uint64_t v12 = _swiftEmptyArrayStorage;
    unint64_t v34 = *(void *)(a1 + 16);
    uint64_t v35 = v4;
    uint64_t v33 = a1 + 32;
    uint64_t v13 = (uint64_t)v38;
    do
    {
      uint64_t v36 = v12;
      unint64_t v37 = v10;
      uint64_t v14 = 0;
      if (v10 <= v9) {
        unint64_t v15 = v9;
      }
      else {
        unint64_t v15 = v10;
      }
      unint64_t v43 = v10 - v15;
      while (1)
      {
        if (!(v43 + v14))
        {
          __break(1u);
          return;
        }
        int v41 = *(unsigned __int8 *)(v11 + v10);
        id v16 = (v41 & 1) != 0 ? [v42 notes:v7] : [v42 title:v7];
        id v17 = v16;
        if (v17)
        {
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          uint64_t v46 = v18;
          uint64_t v47 = v20;
          static Locale.current.getter();
          uint64_t v21 = type metadata accessor for Locale();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 0, 1, v21);
          sub_1000E4FD8();
          uint64_t v22 = StringProtocol.foldedStringForWriting(locale:)();
          uint64_t v24 = v23;
          sub_1000966BC(v13, (uint64_t *)&unk_10090FDF0);
          swift_bridgeObjectRelease();
          uint64_t v46 = v22;
          uint64_t v47 = v24;
          uint64_t v44 = v39;
          uint64_t v45 = v40;
          char v25 = StringProtocol.contains<A>(_:)();
          unint64_t v10 = v37;
          swift_bridgeObjectRelease();
          if (v25) {
            break;
          }
        }
        ++v14;
        ++v11;
        if (v10 == --v9) {
          return;
        }
      }
      BOOL v26 = v36;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v26;
      uint64_t v48 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001DE64C(0, v26[2] + 1, 1);
        uint64_t v12 = v48;
      }
      unint64_t v29 = v12[2];
      unint64_t v28 = v12[3];
      if (v29 >= v28 >> 1)
      {
        sub_1001DE64C(v28 > 1, v29 + 1, 1);
        uint64_t v12 = v48;
      }
      unint64_t v30 = v10 + 1;
      v10 += 1 + v14;
      _OWORD v12[2] = v29 + 1;
      *((unsigned char *)v12 + v29 + 32) = v41;
      BOOL v31 = v30 == v9;
      unint64_t v9 = v34;
      uint64_t v11 = v33;
    }
    while (!v31);
  }
}

uint64_t sub_1005EA890(void **a1)
{
  return sub_1004EB060(*a1);
}

unint64_t sub_1005EA8AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t result = sub_100431E9C(*a1);
  if (!v1) {
    return sub_100432548(v2);
  }
  return result;
}

void sub_1005EA8E0(void **a1)
{
}

void sub_1005EA8FC(void *a1, uint64_t a2)
{
  sub_100094134(&qword_10091F740);
  uint64_t v5 = String.init<A>(describing:)();
  sub_100661C00(a1, v5, v6, a2);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    id v7 = [self daemonUserDefaults];
    [v7 deletePreferredDefaultListObjectIDUrl];
  }
}

uint64_t sub_1005EA9C8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100094134(a4);
  uint64_t v6 = String.init<A>(describing:)();
  sub_100661C00(a1, v6, v7, a2);
  return swift_bridgeObjectRelease();
}

id sub_1005EAAB8(uint64_t a1)
{
  sub_100094134(&qword_10091F728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E30;
  *(void *)(inited + 32) = 0xD00000000000001ELL;
  *(void *)(inited + 40) = 0x80000001007D9D30;
  *(void *)(inited + 48) = sub_1005EA890;
  *(void *)(inited + 56) = 0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1005EB040;
  *(void *)(v4 + 24) = v3;
  *(void *)(inited + 64) = 0xD00000000000001DLL;
  *(void *)(inited + 72) = 0x80000001007D9D50;
  *(void *)(inited + 80) = sub_1005EB06C;
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 96) = 0xD000000000000028;
  *(void *)(inited + 104) = 0x80000001007D9D70;
  *(void *)(inited + 112) = sub_1005EA8AC;
  *(void *)(inited + 120) = 0;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1005EB098;
  *(void *)(v6 + 24) = v5;
  *(void *)(inited + 128) = 0xD000000000000027;
  *(void *)(inited + 136) = 0x80000001007D9DA0;
  *(void *)(inited + 144) = sub_1005EB168;
  *(void *)(inited + 152) = v6;
  *(void *)(inited + 160) = 0xD000000000000039;
  *(void *)(inited + 168) = 0x80000001007D9DD0;
  *(void *)(inited + 176) = sub_1005EA8E0;
  *(void *)(inited + 184) = 0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1005EB0B4;
  *(void *)(v8 + 24) = v7;
  *(void *)(inited + 192) = 0xD000000000000038;
  *(void *)(inited + 200) = 0x80000001007D9E10;
  *(void *)(inited + 208) = sub_1005EB168;
  *(void *)(inited + 216) = v8;
  swift_bridgeObjectRetain_n();
  unint64_t v9 = sub_1002EFAF4(inited);
  sub_1005EB118();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v11 = 15;
  id v24 = [self bundleForClass:ObjCClassFromMetadata];
  unint64_t v25 = v9;
  unint64_t v27 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 15, 0);
  uint64_t v12 = &byte_1008B7680;
  uint64_t v13 = _swiftEmptyArrayStorage;
  do
  {
    int v14 = *v12++;
    unint64_t v15 = 0xD00000000000001ELL;
    unint64_t v16 = 0x80000001007D9D30;
    switch(v14)
    {
      case 1:
        unint64_t v16 = 0xE200000000000000;
        unint64_t v15 = 12918;
        break;
      case 2:
        unint64_t v16 = 0xE200000000000000;
        unint64_t v15 = 13174;
        break;
      case 3:
        unint64_t v16 = 0xEF313230325F6573;
        unint64_t v15 = 0x61656C65525F3376;
        break;
      case 4:
        unint64_t v15 = 0x61656C65525F3476;
        unint64_t v16 = 0xEF323230325F6573;
        break;
      case 5:
        break;
      case 6:
        unint64_t v16 = 0x80000001007D9D50;
        unint64_t v15 = 0xD00000000000001DLL;
        break;
      case 7:
        unint64_t v16 = 0xE200000000000000;
        unint64_t v15 = 14198;
        break;
      case 8:
        unint64_t v16 = 0xE700000000000000;
        unint64_t v15 = 0x435F3232303276;
        break;
      case 9:
        unint64_t v16 = 0xE700000000000000;
        unint64_t v15 = 0x415F3332303276;
        break;
      case 10:
        unint64_t v15 = 0xD000000000000028;
        unint64_t v16 = 0x80000001007D9D70;
        break;
      case 11:
        unint64_t v15 = 0xD000000000000027;
        unint64_t v16 = 0x80000001007D9DA0;
        break;
      case 12:
        unint64_t v16 = 0xEC00000041726F6ELL;
        unint64_t v15 = 0x696D5F3432303276;
        break;
      case 13:
        unint64_t v15 = 0xD000000000000039;
        unint64_t v16 = 0x80000001007D9DD0;
        break;
      case 14:
        unint64_t v15 = 0xD000000000000038;
        unint64_t v16 = 0x80000001007D9E10;
        break;
      default:
        unint64_t v15 = 0;
        unint64_t v16 = 0xE000000000000000;
        break;
    }
    unint64_t v27 = v13;
    unint64_t v18 = v13[2];
    unint64_t v17 = v13[3];
    if (v18 >= v17 >> 1)
    {
      sub_1001DE058(v17 > 1, v18 + 1, 1);
      uint64_t v13 = v27;
    }
    void v13[2] = v18 + 1;
    uint64_t v19 = &v13[2 * v18];
    v19[4] = v15;
    id v19[5] = v16;
    --v11;
  }
  while (v11);
  uint64_t v20 = (objc_class *)type metadata accessor for RDStagedLightweightCoreDataMigrationCoordinator();
  uint64_t v21 = (char *)objc_allocWithZone(v20);
  uint64_t v22 = &v21[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName];
  strcpy(&v21[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_modelName], "ReminderData");
  v22[13] = 0;
  *((_WORD *)v22 + 7) = -5120;
  *(void *)&v21[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_bundle] = v24;
  *(void *)&v21[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_allModelVersionIdentifiers] = v13;
  *(void *)&v21[OBJC_IVAR____TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator_postMigrationDataUpdateByModelVersionIdentifier] = v25;
  v26.receiver = v21;
  v26.super_class = v20;
  return [super init];
}

uint64_t sub_1005EB008()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005EB040(void *a1)
{
  return sub_1005EA9C8(a1, *(void *)(v1 + 16), (uint64_t)&_s34PersistentHistoryTruncationHandlerON, &qword_10091F748);
}

uint64_t sub_1005EB06C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_1005EB098(void *a1)
{
  sub_1005EA8FC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1005EB0B4(void *a1)
{
  return sub_1005EA9C8(a1, *(void *)(v1 + 16), (uint64_t)&_s34PersistentHistoryTruncationHandlerON_1, &qword_10091F738);
}

uint64_t sub_1005EB0E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1005EB118()
{
  unint64_t result = qword_10091F730;
  if (!qword_10091F730)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10091F730);
  }
  return result;
}

uint64_t sub_1005EB168(void *a1)
{
  return sub_1005EB06C(a1);
}

uint64_t sub_1005EB180(void *a1, void *a2, double a3)
{
  uint64_t v32 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v8 = (uint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v14 = (char *)&v30 - v13;
  uint64_t v15 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  v20[3] = 0;
  v20[4] = a1;
  v20[5] = a2;
  uint64_t v21 = v33;
  v20[6] = v18;
  v20[7] = v21;
  id v22 = a1;
  id v23 = a2;
  id v24 = v18;
  sub_1000C6B60((uint64_t)v17, (uint64_t)&unk_10091F7F8, (uint64_t)v20);
  swift_release();
  uint64_t result = static DispatchTime.now()();
  double v26 = a3 * 1000.0;
  if ((~COERCE__INT64(a3 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v26 < 9.22337204e18)
  {
    *uint64_t v8 = (uint64_t)v26;
    uint64_t v27 = v32;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchTimeInterval.milliseconds(_:), v32);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v27);
    unint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v29 = v31;
    v28(v11, v31);
    OS_dispatch_group.wait(timeout:)();

    return ((uint64_t (*)(char *, uint64_t))v28)(v14, v29);
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_1005EB4CC(void *a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v127 = a5;
  id v6 = v5;
  uint64_t v124 = a4;
  uint64_t v10 = type metadata accessor for Date();
  os_log_t v125 = *(os_log_t *)(v10 - 8);
  unint64_t v126 = v10;
  __chkstk_darwin(v10);
  Class v123 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (objc_class *)type metadata accessor for UUID();
  id v13 = (id)*((void *)v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v16 - 8);
  unint64_t v18 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v116 - v20;
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v122 = (uint64_t)v6;
      type metadata accessor for REMCDGroceryOperationQueueItem();
      id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      id v23 = a1;
      id v24 = [v22 initWithContext:v127];
      [v24 setOperationTypeRawValue:3];
      id v25 = [v23 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*((void (**)(char *, char *, objc_class *))v13 + 4))(v18, v15, v12);
      (*((void (**)(char *, void, uint64_t, objc_class *))v13 + 7))(v18, 0, 1, v12);
      Class isa = 0;
      if ((*((unsigned int (**)(char *, uint64_t, objc_class *))v13 + 6))(v18, 1, v12) != 1)
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*((void (**)(char *, objc_class *))v13 + 1))(v18, v12);
      }
      [v24 setListIdentifier:isa];
      sub_1005F2BB8(a1, a2, 1);

      sub_1005F2BB8(a1, a2, 1);
      goto LABEL_31;
    }
    type metadata accessor for REMCDGroceryOperationQueueItem();
    uint64_t v31 = (void *)sub_1002E58B8((uint64_t)&off_1008B3770, 0, 1);
    id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v33 = [ObjCClassFromMetadata entity];
    [v13 setEntity:v33];

    [v13 setAffectedStores:0];
    [v13 setPredicate:v31];

    if (qword_1009072A8 != -1) {
      swift_once();
    }
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    Class v34 = Array._bridgeToObjectiveC()().super.isa;
    [v13 setSortDescriptors:v34];

    [v13 setReturnsObjectsAsFaults:0];
    uint64_t v35 = v128;
    uint64_t v36 = NSManagedObjectContext.fetch<A>(_:)();
    if (v35)
    {

      return v13;
    }
    uint64_t v27 = v36;
    Class v121 = (Class)ObjCClassFromMetadata;

    uint64_t v128 = 0;
    uint64_t v122 = (uint64_t)v6;
    if (!((unint64_t)v27 >> 62))
    {
      uint64_t v37 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v37)
      {
LABEL_23:
        id v24 = (id)(v27 & 0xC000000000000001);
        uint64_t v38 = 4;
        while (1)
        {
          id v39 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v27 + 8 * v38);
          id v13 = v39;
          uint64_t v40 = (char **)(v38 - 3);
          if (__OFADD__(v38 - 4, 1)) {
            break;
          }
          id v41 = [v39 objectID];
          unsigned int v42 = [v41 isTemporaryID];

          if (v42)
          {
            swift_bridgeObjectRelease_n();
            return v13;
          }

          ++v38;
          if (v40 == (char **)v37) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        swift_once();
LABEL_33:
        uint64_t v46 = type metadata accessor for Logger();
        sub_10008E2DC(v46, (uint64_t)qword_10091F750);
        id v13 = v24;
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = swift_slowAlloc();
          uint64_t v127 = swift_slowAlloc();
          uint64_t v129 = v127;
          *(_DWORD *)uint64_t v49 = 136446722;
          unint64_t v130 = v122;
          swift_getMetatypeMetadata();
          uint64_t v50 = String.init<A>(describing:)();
          unint64_t v130 = sub_1000C51B8(v50, v51, &v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2082;
          unsigned int v52 = [v13 operationTypeRawValue];
          unsigned int v53 = 0x2010003u >> (8 * v52);
          if (v52 >= 4) {
            LOBYTE(v53) = 3;
          }
          LOBYTE(v130) = v53;
          sub_100094134(&qword_10091F7D0);
          uint64_t v128 = v40;
          uint64_t v54 = Optional.descriptionOrNil.getter();
          unint64_t v130 = sub_1000C51B8(v54, v55, &v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 22) = 2082;
          id v56 = sub_10012FBA0();
          unint64_t v130 = (unint64_t)v56;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v57 = Optional.descriptionOrNil.getter();
          unint64_t v59 = v58;

          unint64_t v130 = sub_1000C51B8(v57, v59, &v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%{public}s: Inserted grocery operation queue item {operationType: %{public}s, listObjectID: %{public}s}", (uint8_t *)v49, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        return v13;
      }
LABEL_30:
      swift_bridgeObjectRelease_n();
      id v43 = objc_allocWithZone(v121);
      id v24 = [v43 initWithContext:v127];
      [v24 setOperationTypeRawValue:2];
      [v24 setPriorityRawValue:30];
      [v24 setListIdentifier:0];
      [v24 setConfigurationData:0];

LABEL_31:
      uint64_t v40 = v128;
      goto LABEL_32;
    }
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    if (v37) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  unint64_t v130 = (unint64_t)_swiftEmptyArrayStorage;
  if (a2 >> 62)
  {
    id v102 = a1;
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v27 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v28 = a1;
    swift_bridgeObjectRetain();
  }
  uint64_t v119 = v15;
  NSString v120 = (void (**)(char *, void, objc_class *))v13;
  uint64_t v118 = v21;
  if (v27)
  {
    if (v27 < 1)
    {
      __break(1u);
      goto LABEL_74;
    }
    Class v121 = v12;
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v13 = v6;
      uint64_t v29 = 0;
      uint64_t v30 = v128;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        REMObjectID.codable.getter();
        swift_unknownObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v29;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      while (v27 != v29);
      swift_bridgeObjectRelease();
      id v6 = v13;
    }
    else
    {
      id v13 = 0;
      uint64_t v30 = v128;
      do
      {
        id v60 = *(id *)(a2 + 8 * (void)v13 + 32);
        REMObjectID.codable.getter();

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v130 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        id v13 = (char *)v13 + 1;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      while ((id)v27 != v13);
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v121;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v128;
  }
  uint64_t v61 = v130;
  id v62 = a1;
  uint64_t v63 = v127;
  uint64_t v64 = sub_1002E6258((uint64_t)&off_1008B3748, a1);
  if (v30)
  {
    swift_bridgeObjectRelease();

    goto LABEL_80;
  }
  unint64_t v65 = v64;
  unint64_t v117 = v61;

  uint64_t v128 = 0;
  if (!(v65 >> 62))
  {
    uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v122 = (uint64_t)v6;
    if (v66) {
      goto LABEL_48;
    }
LABEL_77:
    swift_bridgeObjectRelease_n();
    id v13 = v128;
LABEL_78:
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    unint64_t v130 = v117;
    sub_1005F2D84();
    uint64_t v104 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v40 = (char **)v13;
    if (!v13)
    {
      uint64_t v127 = v105;
      uint64_t v128 = (char **)v104;
      swift_release();
      type metadata accessor for REMCDGroceryOperationQueueItem();
      swift_bridgeObjectRelease();
      id v24 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:v63];
      [v24 setOperationTypeRawValue:1];
      [v24 setPriorityRawValue:20];
      id v107 = v62;
      id v108 = [v107 uuid];
      uint64_t v109 = v119;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v110 = v120;
      uint64_t v111 = v118;
      ((void (**)(char *, char *, objc_class *))v120)[4](v118, v109, v12);
      ((void (*)(char *, void, uint64_t, objc_class *))v110[7])(v111, 0, 1, v12);
      Class v112 = 0;
      if (((unsigned int (*)(char *, uint64_t, objc_class *))v110[6])(v111, 1, v12) != 1)
      {
        Class v112 = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, objc_class *))v110[1])(v111, v12);
      }
      [v24 setListIdentifier:v112, v116];

      unint64_t v114 = v127;
      uint64_t v113 = (uint64_t)v128;
      Class v115 = Data._bridgeToObjectiveC()().super.isa;
      [v24 setConfigurationData:v115];

      sub_100097F34(v113, v114);
LABEL_32:
      [v24 setAccount:v124];
      uint64_t v44 = v123;
      Date.init()();
      Class v45 = Date._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, unint64_t))v125[1].isa)(v44, v126);
      [v24 setCreationDate:v45];

      if (qword_100907A28 == -1) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_80:

    return v13;
  }
  swift_bridgeObjectRetain();
  uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v122 = (uint64_t)v6;
  if (!v66) {
    goto LABEL_77;
  }
LABEL_48:
  Class v121 = v12;
  id v116 = v62;
  id v24 = (id)(v65 & 0xC000000000000001);
  uint64_t v67 = 4;
  uint64_t v40 = &selRef_intersectsSet_;
  while (1)
  {
    if (v24) {
      id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v68 = *(id *)(v65 + 8 * v67);
    }
    os_log_t v69 = v68;
    id v13 = (id)(v67 - 3);
    if (__OFADD__(v67 - 4, 1)) {
      goto LABEL_70;
    }
    id v70 = [v68 objectID];
    unsigned int v71 = [v70 isTemporaryID];

    if (v71) {
      break;
    }

    ++v67;
    if (v13 == (id)v66)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v63 = v127;
      id v13 = v128;
LABEL_61:
      id v62 = v116;
      uint64_t v12 = v121;
      goto LABEL_78;
    }
  }
  swift_bridgeObjectRelease_n();
  id v72 = [v69 configurationData];
  uint64_t v63 = v127;
  if (!v72)
  {

    id v13 = v128;
    goto LABEL_61;
  }
  os_log_type_t v73 = v72;
  uint64_t v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v76 = v75;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1005F2DD8();
  uint64_t v78 = v128;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v78)
  {
    swift_release();
    swift_bridgeObjectRelease();

    sub_100097F34(v74, v76);
  }
  else
  {
    swift_release();
    sub_100201E6C(v117);
    uint64_t v79 = v130;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    unint64_t v130 = v79;
    sub_1005F2D84();
    uint64_t v81 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v83 = v82;
    swift_release();
    swift_bridgeObjectRelease();
    Class v84 = Data._bridgeToObjectiveC()().super.isa;
    [v69 setConfigurationData:v84];

    if (qword_100907A28 != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    sub_10008E2DC(v85, (uint64_t)qword_10091F750);
    id v13 = v69;
    unint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    int v88 = v87;
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v89 = swift_slowAlloc();
      uint64_t v128 = 0;
      uint64_t v90 = v89;
      uint64_t v127 = swift_slowAlloc();
      unint64_t v130 = v127;
      *(_DWORD *)uint64_t v90 = 136446722;
      os_log_t v125 = v86;
      uint64_t v91 = sub_1000D82B8();
      LODWORD(v124) = v88;
      uint64_t v129 = sub_1000C51B8(v91, v92, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v126 = v83;
      *(_WORD *)(v90 + 12) = 2080;
      unsigned int v93 = [v13 operationTypeRawValue];
      unsigned int v94 = 0x2010003u >> (8 * v93);
      if (v93 >= 4) {
        LOBYTE(v94) = 3;
      }
      LOBYTE(v129) = v94;
      sub_100094134(&qword_10091F7D0);
      uint64_t v95 = Optional.descriptionOrNil.getter();
      uint64_t v129 = sub_1000C51B8(v95, v96, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v90 + 22) = 2080;
      id v97 = sub_10012FBA0();
      uint64_t v129 = (uint64_t)v97;
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v98 = Optional.descriptionOrNil.getter();
      unint64_t v100 = v99;

      uint64_t v129 = sub_1000C51B8(v98, v100, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v101 = v125;
      _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v124, "%{public}s: Updated unsaved grocery operation queue item {operationType: %s, listObjectID: %s}", (uint8_t *)v90, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100097F34(v74, v76);
      sub_100097F34(v81, v126);
    }
    else
    {

      sub_100097F34(v74, v76);
      sub_100097F34(v81, v83);
    }
  }
  return v13;
}

id sub_1005EC6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self sharedBabysitter];
  if (result)
  {
    id v11 = result;
    uint64_t v31 = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
    uint64_t v32 = &off_1008C85D8;
    *(void *)&long long v30 = v11;
    sub_1000967D4(&v30, (uint64_t)v33);
    sub_1000C0DE0(v33, v33[3]);
    sub_1004F60C0(v3);
    if (qword_100907710 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10008E2DC(v6, (uint64_t)qword_10091BA40);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
    swift_bridgeObjectRetain_n();
    id v13 = v3;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v26 = a1;
      uint64_t v27 = v7;
      uint64_t v28 = a2;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v29 = v25;
      *(_DWORD *)uint64_t v16 = 136446466;
      id v17 = [v13 waiterID];
      if (!v17)
      {

        id result = (id)swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      unint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      *(void *)&long long v30 = sub_1000C51B8(v19, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2082;
      *(void *)&long long v30 = v26;
      *((void *)&v30 + 1) = v28;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v22 = Optional.descriptionOrNil.getter();
      *(void *)&long long v30 = sub_1000C51B8(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Reset babysitter for {waiterID: %{public}s, event: %{public}s}", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    return (id)_s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v33);
  }
  return result;
}

uint64_t sub_1005ECAA8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)v17 - v12;
  v17[1] = *(void *)(v0 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler);
  static DispatchTime.now()();
  + infix(_:_:)();
  unint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1005F3144;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008CCFF8;
  os_log_type_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v23 = _swiftEmptyArrayStorage;
  sub_1005F3164((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v21);
  v18(v13, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1005ECE74()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091F750);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091F750);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1005ECF3C()
{
  id result = [self intelligentGrocery];
  qword_10091F768 = (uint64_t)result;
  return result;
}

void sub_1005ECF78()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = (uint64_t *)(Strong + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables);
    swift_beginAccess();
    uint64_t v3 = *v2;
    if ((v3 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v4)
      {
LABEL_5:

        return;
      }
    }
    else if (*(void *)(v3 + 16))
    {
      goto LABEL_5;
    }
    sub_1005ED040();
    sub_1005EDC0C(1);
    goto LABEL_5;
  }
}

void sub_1005ED040()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v65 = v3;
  __chkstk_darwin(v3);
  uint64_t v63 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  __chkstk_darwin(v5);
  uint64_t v66 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  __chkstk_darwin(v7);
  uint64_t v67 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10091D280);
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_10090DD10);
  uint64_t v59 = *(void *)(v15 - 8);
  uint64_t v60 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100094134((uint64_t *)&unk_10091D290);
  uint64_t v61 = *(void *)(v18 - 8);
  uint64_t v62 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (void *)((char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v56 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if (v25)
  {
    uint64_t v26 = *(void **)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController);
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t v30 = swift_allocObject();
    uint64_t v72 = v1;
    os_log_type_t v73 = (char *)ObjectType;
    uint64_t v31 = v30;
    *(_OWORD *)(v30 + 16) = xmmword_100776E40;
    *(void *)(v30 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v31 + 40) = v32;
    id v33 = (void *)sub_100407394(v26, v27, v29, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v34 = sub_10032D9A0((uint64_t)&off_1008B7690);
    swift_arrayDestroy();
    id v75 = v33;
    *(void *)(swift_allocObject() + 16) = v34;
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090F110);
    sub_100094134((uint64_t *)&unk_10090DD40);
    v55[4] = &protocol conformance descriptor for AnyPublisher<A, B>;
    sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
    Publisher.map<A>(_:)();
    swift_release();
    v55[3] = &protocol conformance descriptor for Publishers.Map<A, B>;
    sub_1000967F4((unint64_t *)&unk_10090DD50, (uint64_t *)&unk_10091D280);
    uint64_t v35 = v58;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v35);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v36 = v56;
    id v75 = v56;
    uint64_t v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v57 = *(void *)(v38 + 56);
    uint64_t v58 = v38 + 56;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v11, 1, 1, v37);
    v55[1] = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    void v55[2] = &protocol conformance descriptor for Publishers.Filter<A>;
    sub_1000967F4(&qword_10090F130, (uint64_t *)&unk_10090DD10);
    v55[0] = sub_100096654();
    id v39 = v36;
    uint64_t v40 = v60;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v40);
    sub_1000967F4(&qword_10091F850, (uint64_t *)&unk_10091D290);
    uint64_t v41 = v62;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v41);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    id v75 = (id)sub_100407054((void *)0xD000000000000015, 0x80000001007C7A20, 0);
    sub_100094134((uint64_t *)&unk_1009081E0);
    sub_100094134((uint64_t *)&unk_10090AB80);
    sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
    unsigned int v42 = v63;
    Publisher.map<A>(_:)();
    sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
    uint64_t v43 = v65;
    uint64_t v44 = v66;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v42, v43);
    swift_release();
    id v75 = v39;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57)(v11, 1, 1, v37);
    uint64_t v14 = v73;
    sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
    id v45 = v39;
    uint64_t v46 = v67;
    uint64_t v47 = v69;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v47);
    sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
    uint64_t v48 = v71;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v48);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    if (qword_100907A28 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v49 = type metadata accessor for Logger();
  sub_10008E2DC(v49, (uint64_t)qword_10091F750);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    unsigned int v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    id v75 = v14;
    *(_DWORD *)unsigned int v52 = 136446210;
    swift_getMetatypeMetadata();
    uint64_t v53 = String.init<A>(describing:)();
    id v75 = (id)sub_1000C51B8(v53, v54, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s: Did set up subscriptions", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_1005EDC0C(int a1)
{
  uint64_t v2 = v1;
  int v37 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v3 - 8);
  uint64_t v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)&v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler];
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_4;
  }
  if (v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems]) {
    return result;
  }
  v2[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems] = 1;
  sub_1005EFEDC(0);
  if (qword_100907A28 != -1) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_10091F750);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = v5;
    uint64_t v22 = v21;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v39 = v33;
    *(_DWORD *)uint64_t v22 = 136446466;
    uint64_t v40 = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v40 = sub_1000C51B8(v23, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2082;
    if (v37) {
      uint64_t v25 = 1702195828;
    }
    else {
      uint64_t v25 = 0x65736C6166;
    }
    if (v37) {
      unint64_t v26 = 0xE400000000000000;
    }
    else {
      unint64_t v26 = 0xE500000000000000;
    }
    uint64_t v40 = sub_1000C51B8(v25, v26, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s: Began handling grocery operation queue items {isOnLaunch: %{public}s}", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v34;
    swift_slowDealloc();
  }

  Date.init()();
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v28 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v36, 1, 1, v27);
  uint64_t v29 = v35;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v35, v10, v5);
  unint64_t v30 = (*(unsigned __int8 *)(v6 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  *(void *)(v31 + 32) = v2;
  *(unsigned char *)(v31 + 40) = v37 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v31 + v30, v29, v5);
  *(void *)(v31 + ((v7 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  uint64_t v32 = v2;
  sub_1000C6B60(v28, (uint64_t)&unk_10091F830, v31);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

uint64_t sub_1005EE164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  uint64_t v10 = (void *)swift_task_alloc();
  v7[11] = v10;
  void *v10 = v7;
  v10[1] = sub_1005EE210;
  return sub_1005EE60C(a4, a5);
}

uint64_t sub_1005EE210()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005EE384;
  }
  else {
    uint64_t v2 = sub_1005EE324;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005EE324()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005EE384()
{
  uint64_t v13 = v0;
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091F750);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    *(void *)(v0 + 40) = v4;
    swift_getMetatypeMetadata();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 48) = sub_1000C51B8(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v8 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 64) = sub_1000C51B8(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s: Failed to handle incomplete grocery operation queue items during unit test {error: %{public}s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 72));
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1005EE60C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 344) = a2;
  *(void *)(v3 + 352) = v2;
  *(void *)(v3 + 336) = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v3 + 360) = v4;
  *(void *)(v3 + 368) = *(void *)(v4 - 8);
  *(void *)(v3 + 376) = swift_task_alloc();
  *(void *)(v3 + 384) = swift_task_alloc();
  *(void *)(v3 + 392) = sub_100094134(&qword_10091F808);
  *(void *)(v3 + 400) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  *(void *)(v3 + 408) = v5;
  *(void *)(v3 + 416) = *(void *)(v5 - 8);
  *(void *)(v3 + 424) = swift_task_alloc();
  *(void *)(v3 + 432) = swift_task_alloc();
  *(void *)(v3 + 440) = swift_task_alloc();
  *(void *)(v3 + 448) = swift_task_alloc();
  *(void *)(v3 + 456) = swift_task_alloc();
  *(void *)(v3 + 464) = swift_task_alloc();
  *(_DWORD *)(v3 + 584) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  *(unsigned char *)(v3 + 588) = 0;
  return _swift_task_switch(sub_1005EE7C4, 0, 0);
}

uint64_t sub_1005EE7C4()
{
  uint64_t v1 = *(unsigned int *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void **)(v0 + 336);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 472) = v6;
  *(void *)(v6 + 16) = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  *(void *)(v0 + 480) = v7;
  *(void *)(v0 + 488) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v7(v2, v1, v3);
  id v8 = v5;
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v9;
  *unint64_t v9 = v0;
  v9[1] = sub_1005EE8EC;
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v10 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 384);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v12, sub_1005F2F70, v6, v11);
}

uint64_t sub_1005EE8EC()
{
  uint64_t v2 = (void *)*v1;
  v2[63] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[48];
  uint64_t v4 = v2[46];
  uint64_t v5 = v2[45];
  id v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = v4 + 8;
  uint64_t v7 = v8;
  if (v0)
  {
    v7(v3, v5);
    swift_release();
    unint64_t v9 = sub_1005EF150;
  }
  else
  {
    v2[64] = v7;
    v2[65] = v6 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    swift_release();
    unint64_t v9 = sub_1005EEA9C;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1005EEA9C()
{
  uint64_t v51 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 48))(v1, 1, *(void *)(v0 + 408)) == 1)
  {
    sub_1000966BC(v1, &qword_10091F808);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v3 = *(unsigned __int8 *)(v0 + 588);
    return v2(v3);
  }
  else
  {
    uint64_t v5 = (long long *)(v0 + 16);
    uint64_t v6 = (uint64_t *)(v0 + 96);
    sub_1005F2F8C(v1, *(void *)(v0 + 464));
    if (qword_100907A28 != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 456);
    uint64_t v7 = *(void *)(v0 + 464);
    uint64_t v9 = type metadata accessor for Logger();
    *(void *)(v0 + 528) = sub_10008E2DC(v9, (uint64_t)qword_10091F750);
    sub_1005F2FF0(v7, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 456);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 352);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      *(void *)(v0 + 184) = v14;
      swift_getMetatypeMetadata();
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v0 + 320) = sub_1000C51B8(v16, v17, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2082;
      uint64_t v18 = sub_10013001C();
      *(void *)(v0 + 328) = sub_1000C51B8(v18, v19, &v50);
      uint64_t v6 = (uint64_t *)(v0 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v5 = (long long *)(v0 + 16);
      swift_bridgeObjectRelease();
      sub_1005F3054(v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Handling incomplete grocery operation queue item with top priority. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1005F3054(*(void *)(v0 + 456));
    }

    sub_1005F1F5C(*(void *)(v0 + 464), *(void **)(v0 + 344), v6);
    sub_1000BF710((uint64_t)v6, (uint64_t)v5, (uint64_t *)&unk_10091F810);
    if (*(void *)(v0 + 40))
    {
      sub_1000967D4(v5, v0 + 56);
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v21 = *(void *)(v0 + 88);
      sub_1000C0DE0((void *)(v0 + 56), v20);
      uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 16) + **(int **)(v21 + 16));
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_1005EF220;
      uint64_t v23 = *(void *)(v0 + 336);
      return v49(v23, v20, v21);
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 464);
      uint64_t v25 = *(void *)(v0 + 448);
      sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_10091F810);
      sub_1005F2FF0(v24, v25);
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.fault.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = *(void *)(v0 + 448);
      if (v28)
      {
        uint64_t v30 = *(void *)(v0 + 352);
        uint64_t v31 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136446466;
        *(void *)(v0 + 192) = v30;
        swift_getMetatypeMetadata();
        uint64_t v32 = String.init<A>(describing:)();
        *(void *)(v0 + 264) = sub_1000C51B8(v32, v33, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        uint64_t v34 = sub_10013001C();
        *(void *)(v0 + 272) = sub_1000C51B8(v34, v35, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1005F3054(v29);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s: Failed to create grocery operation for grocery operation queue item. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1005F3054(*(void *)(v0 + 448));
      }

      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
      uint64_t v37 = *(unsigned int *)(v0 + 584);
      uint64_t v38 = *(void ***)(v0 + 464);
      uint64_t v39 = *(void *)(v0 + 376);
      uint64_t v40 = *(void *)(v0 + 360);
      uint64_t v41 = *(void **)(v0 + 336);
      unsigned int v42 = *v38;
      *(void *)(v0 + 552) = *v38;
      uint64_t v43 = swift_allocObject();
      *(void *)(v0 + 560) = v43;
      *(void *)(v43 + 16) = v41;
      *(void *)(v43 + 24) = v42;
      id v44 = v42;
      v36(v39, v37, v40);
      id v45 = v41;
      id v46 = v44;
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v47;
      *uint64_t v47 = v0;
      v47[1] = sub_1005EF474;
      uint64_t v48 = *(void *)(v0 + 376);
      return NSManagedObjectContext.perform<A>(schedule:_:)(v47, v48, sub_1005F30F0, v43, (char *)&type metadata for () + 8);
    }
  }
}

uint64_t sub_1005EF150()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1005EF220()
{
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1005EF864;
  }
  else {
    uint64_t v2 = sub_1005EF334;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005EF334()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 56);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v2 = *(unsigned int *)(v0 + 584);
  uint64_t v3 = *(void ***)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void **)(v0 + 336);
  uint64_t v7 = *v3;
  *(void *)(v0 + 552) = *v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 560) = v8;
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  id v9 = v7;
  v1(v4, v2, v5);
  id v10 = v6;
  id v11 = v9;
  BOOL v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v12;
  *BOOL v12 = v0;
  v12[1] = sub_1005EF474;
  uint64_t v13 = *(void *)(v0 + 376);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_1005F30F0, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_1005EF474()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 512);
  uint64_t v3 = *(void *)(*(void *)v1 + 376);
  uint64_t v4 = *(void *)(*(void *)v1 + 360);
  *(void *)(*(void *)v1 + 576) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1005EFBE8;
  }
  else {
    uint64_t v5 = sub_1005EF610;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005EF610()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 440);

  sub_1005F2FF0(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v16 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 440);
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    *(void *)(v0 + 200) = v6;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 248) = sub_1000C51B8(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v10 = sub_10013001C();
    *(void *)(v0 + 256) = sub_1000C51B8(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005F3054(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Completed grocery operation queue item with top priority. {groceryOperationQueueItem: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1000966BC(v0 + 96, (uint64_t *)&unk_10091F810);
    uint64_t v12 = v16;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v14 = *(void *)(v0 + 440);

    sub_1005F3054(v14);
    sub_1000966BC(v0 + 96, (uint64_t *)&unk_10091F810);
    uint64_t v12 = v13;
  }
  sub_1005F3054(v12);
  *(unsigned char *)(v0 + 588) = 1;
  return _swift_task_switch(sub_1005EE7C4, 0, 0);
}

uint64_t sub_1005EF864()
{
  uint64_t v29 = v0;
  sub_1005F2FF0(*(void *)(v0 + 464), *(void *)(v0 + 432));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v27 = *(void *)(v0 + 432);
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 232) = v3;
    uint64_t v28 = v5;
    *(_DWORD *)uint64_t v4 = 136446722;
    swift_getMetatypeMetadata();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 280) = sub_1000C51B8(v6, v7, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2082;
    uint64_t v8 = sub_10013001C();
    *(void *)(v0 + 288) = sub_1000C51B8(v8, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005F3054(v27);
    *(_WORD *)(v4 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v10 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 312) = sub_1000C51B8(v10, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s: Failed to complete grocery operation queue item. {groceryOperationQueueItem: %{public}s, error: %{public}s}", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 432);
    swift_errorRelease();
    sub_1005F3054(v12);
    swift_errorRelease();
    swift_errorRelease();
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 56);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v14 = *(unsigned int *)(v0 + 584);
  uint64_t v15 = *(void ***)(v0 + 464);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void **)(v0 + 336);
  uint64_t v19 = *v15;
  *(void *)(v0 + 552) = *v15;
  uint64_t v20 = swift_allocObject();
  *(void *)(v0 + 560) = v20;
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v19;
  id v21 = v19;
  v13(v16, v14, v17);
  id v22 = v18;
  id v23 = v21;
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_1005EF474;
  uint64_t v25 = *(void *)(v0 + 376);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v24, v25, sub_1005F30F0, v20, (char *)&type metadata for () + 8);
}

uint64_t sub_1005EFBE8()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 424);

  sub_1005F2FF0(v1, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v18 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446722;
    *(void *)(v0 + 304) = v6;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 208) = sub_1000C51B8(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v10 = sub_10013001C();
    *(void *)(v0 + 216) = sub_1000C51B8(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1005F3054(v5);
    *(_WORD *)(v7 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v12 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 240) = sub_1000C51B8(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Failed to mark grocery operation queue item as completed. {groceryOperationQueueItem: %{public}s, error: %{public}s}", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_1000966BC(v0 + 96, (uint64_t *)&unk_10091F810);
    uint64_t v14 = v18;
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 464);
    uint64_t v16 = *(void *)(v0 + 424);

    swift_errorRelease();
    swift_errorRelease();
    sub_1005F3054(v16);
    swift_errorRelease();
    sub_1000966BC(v0 + 96, (uint64_t *)&unk_10091F810);
    uint64_t v14 = v15;
  }
  sub_1005F3054(v14);
  return _swift_task_switch(sub_1005EE7C4, 0, 0);
}

void sub_1005EFEDC(char a1)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10091F750);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "os_transaction INIT {name: com.apple.remindd.RDGroceryOperationQueue.handleIncompleteOperationQueueItems}", v10, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems) != (a1 & 1))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems))
    {
      *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction) = os_transaction_create();
      swift_unknownObjectRelease();
      static os_signpost_type_t.begin.getter();
      if (qword_100907A30 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      static os_signpost_type_t.end.getter();
      if (qword_100907A30 != -1) {
        swift_once();
      }
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      *(void *)(v1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction) = 0;
      swift_unknownObjectRelease();
    }
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction RELEASE {name: com.apple.remindd.RDGroceryOperationQueue.handleIncompleteOperationQueueItems}", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1005F0224()
{
  return sub_1005EDC0C(0);
}

void sub_1005F024C(uint64_t a1)
{
  sub_1005EC6D8(0xD00000000000001ALL, 0x80000001007D9F70);
  id v3 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController)];
  [v3 requestDownloadGroceryModelAssetsFromTrial];
}

uint64_t sub_1005F02E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 272) = a6;
  *(void *)(v7 + 280) = a7;
  *(unsigned char *)(v7 + 368) = a5;
  *(void *)(v7 + 264) = a4;
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v7 + 288) = v8;
  *(void *)(v7 + 296) = *(void *)(v8 - 8);
  *(void *)(v7 + 304) = swift_task_alloc();
  return _swift_task_switch(sub_1005F03A8, 0, 0);
}

uint64_t sub_1005F03A8()
{
  uint64_t v1 = *(void *)(v0 + 280);
  int v2 = *(unsigned __int8 *)(v0 + 368);
  id v3 = [*(id *)(*(void *)(v0 + 264) + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController) newBackgroundContextWithAuthor:RDGroceryOperationAuthor];
  *(void *)(v0 + 312) = v3;
  if (v2) {
    unint64_t v4 = 0xD00000000000002BLL;
  }
  else {
    unint64_t v4 = 0xD000000000000023;
  }
  if (v2) {
    unint64_t v5 = 0x80000001007C7990;
  }
  else {
    unint64_t v5 = 0x80000001007C7960;
  }
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v6;
  v7[3] = v3;
  v7[4] = v1;
  uint64_t v8 = type metadata accessor for RDSimpleExecutable();
  os_log_type_t v9 = (void *)swift_allocObject();
  *(void *)(v0 + 320) = v9;
  v9[2] = v4;
  v9[3] = v5;
  void v9[4] = &unk_10091F840;
  _OWORD v9[5] = v7;
  *(void *)(v0 + 40) = v8;
  *(void *)(v0 + 48) = &off_1008C8608;
  *(void *)(v0 + 16) = v9;
  *(void *)(v0 + 56) = &off_1008C85F8;
  unint64_t v13 = (uint64_t (*)(uint64_t))((char *)&dword_100917688 + dword_100917688);
  id v10 = v3;
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1005F0580;
  return v13(v0 + 16);
}

uint64_t sub_1005F0580()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = sub_1005F0B7C;
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v2 + 16);
    id v3 = sub_1005F069C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005F069C()
{
  swift_release();
  sub_1005F132C(*(void *)(v0 + 264), *(unsigned char *)(v0 + 368), *(void *)(v0 + 272), *(void *)(v0 + 280));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005F0720()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 304);
  uint64_t v3 = *(void *)(*(void *)v1 + 296);
  uint64_t v4 = *(void *)(*(void *)v1 + 288);
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1005F0FE4;
  }
  else {
    uint64_t v5 = sub_1005F08B4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005F08B4()
{
  uint64_t v17 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091F750);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v15 = *(void **)(v0 + 312);
    uint64_t v5 = *(void *)(v0 + 280);
    int v13 = *(unsigned __int8 *)(v0 + 368);
    uint64_t v14 = v1;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446722;
    *(void *)(v0 + 144) = v5;
    swift_getMetatypeMetadata();
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 240) = sub_1000C51B8(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    if (v13) {
      uint64_t v9 = 1702195828;
    }
    else {
      uint64_t v9 = 0x65736C6166;
    }
    if (v13) {
      unint64_t v10 = 0xE400000000000000;
    }
    else {
      unint64_t v10 = 0xE500000000000000;
    }
    *(void *)(v0 + 248) = sub_1000C51B8(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2048;
    *(void *)(v0 + 256) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Blocked by babysitter. Batch completed all incomplete grocery operation queue items. {isOnLaunch: %{public}s, affectedCount: %ld}", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {

    swift_release();
    swift_errorRelease();
  }
  sub_1005F132C(*(void *)(v0 + 264), *(unsigned char *)(v0 + 368), *(void *)(v0 + 272), *(void *)(v0 + 280));
  swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1005F0B7C()
{
  uint64_t v27 = v0;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);
  swift_getErrorValue();
  if (Error.isREMError(withErrorCode:)())
  {
    uint64_t v1 = *(void *)(v0 + 304);
    uint64_t v2 = *(void **)(v0 + 312);
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v4 = *(void *)(v0 + 296);
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 344) = v5;
    *(void *)(v5 + 16) = v2;
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
    id v6 = v2;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1005F0720;
    uint64_t v8 = *(void *)(v0 + 304);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 192, v8, sub_1005F34E8, v5, &type metadata for Int);
  }
  else
  {
    if (qword_100907A28 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091F750);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    int v13 = *(void **)(v0 + 312);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 280);
      uint64_t v25 = *(void **)(v0 + 312);
      int v24 = *(unsigned __int8 *)(v0 + 368);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446722;
      *(void *)(v0 + 176) = v14;
      swift_getMetatypeMetadata();
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v0 + 152) = sub_1000C51B8(v16, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2082;
      if (v24) {
        uint64_t v18 = 1702195828;
      }
      else {
        uint64_t v18 = 0x65736C6166;
      }
      if (v24) {
        unint64_t v19 = 0xE400000000000000;
      }
      else {
        unint64_t v19 = 0xE500000000000000;
      }
      *(void *)(v0 + 160) = sub_1000C51B8(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v20 = Error.rem_errorDescription.getter();
      *(void *)(v0 + 184) = sub_1000C51B8(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: Failed to handle incomplete grocery operation queue items. {isOnLaunch: %{public}s, error: %{public}s}", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      swift_release();
    }
    else
    {
      swift_release();

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_1005F132C(*(void *)(v0 + 264), *(unsigned char *)(v0 + 368), *(void *)(v0 + 272), *(void *)(v0 + 280));
    swift_task_dealloc();
    id v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_1005F0FE4()
{
  uint64_t v17 = v0;
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10091F750);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 280);
    int v14 = *(unsigned __int8 *)(v0 + 368);
    uint64_t v15 = *(void **)(v0 + 312);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446722;
    *(void *)(v0 + 224) = v4;
    swift_getMetatypeMetadata();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 200) = sub_1000C51B8(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    if (v14) {
      uint64_t v8 = 1702195828;
    }
    else {
      uint64_t v8 = 0x65736C6166;
    }
    if (v14) {
      unint64_t v9 = 0xE400000000000000;
    }
    else {
      unint64_t v9 = 0xE500000000000000;
    }
    *(void *)(v0 + 208) = sub_1000C51B8(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v10 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 232) = sub_1000C51B8(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s: Failed to batch complete all incomplete grocery operation queue items. {isOnLaunch: %{public}s, error: %{public}s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  else
  {

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1005F132C(*(void *)(v0 + 264), *(unsigned char *)(v0 + 368), *(void *)(v0 + 272), *(void *)(v0 + 280));
  swift_task_dealloc();
  BOOL v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

void sub_1005F132C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *(unsigned char *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems) = 0;
  sub_1005EFEDC(v12);
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091F750);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  int v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v16 = 136446722;
    uint64_t v25 = a4;
    swift_getMetatypeMetadata();
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v25 = sub_1000C51B8(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    if (a2) {
      uint64_t v19 = 1702195828;
    }
    else {
      uint64_t v19 = 0x65736C6166;
    }
    if (a2) {
      unint64_t v20 = 0xE400000000000000;
    }
    else {
      unint64_t v20 = 0xE500000000000000;
    }
    uint64_t v25 = sub_1000C51B8(v19, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2048;
    Date.rem_elapsedInMilliseconds.getter();
    uint64_t v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Finished handling grocery operation queue items {isOnLaunch: %{public}s, elapsedSeconds: %f}", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1005F1634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_1005F16F8, 0, 0);
}

uint64_t sub_1005F16F8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[15] = Strong;
  if (Strong)
  {
    id v2 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(Strong + OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController)];
    v0[16] = v2;
    os_log_type_t v3 = (void *)swift_task_alloc();
    v0[17] = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_1005F1828;
    uint64_t v4 = v0[10];
    return sub_1005EE60C(v4, (uint64_t)v2);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1005F1828(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1005F1EEC;
  }
  else
  {

    *(unsigned char *)(v4 + 176) = a1 & 1;
    uint64_t v5 = sub_1005F195C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005F195C()
{
  if (*(unsigned char *)(v0 + 176) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v1 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v4 = *(void **)(v0 + 80);
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 152) = v5;
    *(void *)(v5 + 16) = v4;
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
    id v6 = v4;
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1005F1AE0;
    uint64_t v8 = *(void *)(v0 + 112);
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 48, v8, sub_1005F3504, v5, &type metadata for Int);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1005F1AE0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_1005F1C74;
  }
  else {
    uint64_t v5 = sub_1005F1CE0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005F1C74()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005F1CE0()
{
  os_log_type_t v15 = v0;
  uint64_t v1 = v0[6];
  if (qword_100907A28 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10091F750);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  id v6 = (void *)v0[15];
  if (v5)
  {
    uint64_t v7 = v0[11];
    uint64_t v13 = v1;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[5] = v7;
    swift_getMetatypeMetadata();
    uint64_t v9 = String.init<A>(describing:)();
    v0[7] = sub_1000C51B8(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    v0[8] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Batch deleted completed grocery operation queue items. {deletionCount: %ld}", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1005F1EEC()
{
  uint64_t v1 = *(void **)(v0 + 120);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1005F1F5C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = (int *)type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v50 - v16;
  __chkstk_darwin(v18);
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      uint64_t v23 = type metadata accessor for RDGroceryOperationDownloadGroceryModelAssetsFromTrial();
      uint64_t v24 = swift_allocObject();
      *(unsigned char *)(v24 + 16) = 1;
      a3[3] = v23;
      a3[4] = (uint64_t)&off_1008CEAA0;
      *a3 = v24;
      return;
    case 2:
      uint64_t v25 = v7[9];
      if (!*(void *)(a1 + v25)) {
        goto LABEL_13;
      }
      uint64_t v58 = *(uint64_t **)(a1 + v25);
      uint64_t v26 = type metadata accessor for RDGroceryOperationSuggestConversionToGroceryList();
      uint64_t v27 = swift_allocObject();
      *(unsigned char *)(v27 + 16) = 2;
      *(void *)(v27 + 24) = v58;
      *(void *)(v27 + 32) = a2;
      *(void *)(v27 + 40) = sub_1005F287C;
      *(void *)(v27 + 48) = 0;
      a3[3] = v26;
      a3[4] = (uint64_t)&off_1008CBD58;
      *a3 = v27;
      id v28 = a2;
      uint64_t v29 = v58;
      uint64_t v30 = v29;
      return;
    case 3:
      goto LABEL_13;
    default:
      id v56 = a2;
      uint64_t v21 = *(void **)(a1 + v7[9]);
      if (!v21) {
        goto LABEL_13;
      }
      uint64_t v57 = (char *)&v50 - v20;
      uint64_t v58 = a3;
      uint64_t v55 = v3;
      uint64_t v22 = v19;
      sub_1000BF710(a1 + v7[7], (uint64_t)v10, (uint64_t *)&unk_100909A40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v22) == 1)
      {
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
      }
      else
      {
        uint64_t v31 = v57;
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v57, v10, v22);
        uint64_t v32 = (uint64_t *)(a1 + v7[10]);
        unint64_t v33 = v32[1];
        if (v33 >> 60 != 15)
        {
          uint64_t v53 = v12;
          uint64_t v54 = v22;
          uint64_t v34 = *v32;
          id v35 = v21;
          sub_100097E24(v34, v33);
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          sub_1005F2DD8();
          uint64_t v51 = v34;
          unint64_t v52 = v33;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          swift_release();
          uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
          v37(v17, v57, v54);
          type metadata accessor for REMObjectID_Codable();
          sub_1005F3164((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
          id v38 = v35;
          id v39 = v56;
          unint64_t v40 = Array<A>.removingDuplicates()();
          swift_bridgeObjectRelease();
          if (v40 >> 62)
          {
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            swift_bridgeObjectRetain();
            uint64_t v41 = _bridgeCocoaArray<A>(_:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            uint64_t v41 = v40;
          }
          swift_bridgeObjectRelease();
          uint64_t v42 = v54;
          v37(v14, v17, v54);
          id v43 = [self sharedConfiguration];
          uint64_t v44 = type metadata accessor for RDGroceryOperationCategorizeRemindersInList(0);
          uint64_t v45 = swift_allocObject();
          uint64_t v46 = sub_1005F2C14((uint64_t)v38, v41, (uint64_t)v14, (uint64_t)v39, (uint64_t)v43, (uint64_t)&unk_10091F820, 0, v45);
          uint64_t v47 = *(void (**)(char *, uint64_t))(v53 + 8);
          v47(v17, v42);
          uint64_t v48 = v38;
          uint64_t v49 = v58;
          v58[3] = v44;
          v49[4] = (uint64_t)&off_1008C05C8;
          sub_100097F20(v51, v52);

          *uint64_t v49 = v46;
          v47(v57, v42);
          return;
        }
        (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v22);
      }
      a3 = v58;
LABEL_13:
      a3[4] = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      return;
  }
}

uint64_t sub_1005F27C8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1005F27E8, 0, 0);
}

uint64_t sub_1005F27E8()
{
  uint64_t v1 = sub_100742C34(*(void *)(v0 + 16), *(void (**)(char *, uint64_t))(v0 + 24), 0xD000000000000019, 0x80000001007CB5F0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1005F287C(uint64_t a1, void (*a2)(char *, uint64_t))
{
  return sub_100742C34(a1, a2, 0xD00000000000001ALL, 0x80000001007D9EE0);
}

void *sub_1005F28AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (void *)sub_1002E6684(a1);
  if (!v2)
  {
    if (result)
    {
      sub_10012FDF8(result, a2);
      uint64_t v5 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
      return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
    }
    else
    {
      uint64_t v6 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 1, 1, v6);
    }
  }
  return result;
}

void sub_1005F2958(void *a1, uint64_t a2)
{
  id v11 = 0;
  id v3 = [a1 existingObjectWithID:a2 error:&v11];
  id v4 = v11;
  if (v3)
  {
    uint64_t v5 = v3;
    type metadata accessor for REMCDGroceryOperationQueueItem();
    uint64_t v6 = (void *)swift_dynamicCastClass();
    id v7 = v4;
    if (v6)
    {
      [v6 setIsCompleted:1];
      id v11 = 0;
      if ([a1 save:&v11])
      {
        id v8 = v11;
      }
      else
      {
        id v10 = v11;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  else
  {
    id v9 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_1005F2A94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for REMCDGroceryOperationQueueItem();
  id result = sub_1002E5B30(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t type metadata accessor for RDGroceryOperationQueue()
{
  return self;
}

void sub_1005F2BB8(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
  }
  else if (!a3)
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1005F2C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[3] = sub_1000963CC(0, &qword_1009081B0);
  v22[4] = &off_1008B8A68;
  v22[0] = a5;
  *(unsigned char *)(a8 + 16) = 0;
  *(void *)(a8 + 24) = a1;
  *(void *)(a8 + 32) = a2;
  uint64_t v16 = a8 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_queuedAt;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, a3, v17);
  *(void *)(a8 + 40) = a4;
  sub_100096838((uint64_t)v22, a8 + OBJC_IVAR____TtC7remindd43RDGroceryOperationCategorizeRemindersInList_classifierConfiguration);
  *(void *)(a8 + 48) = a6;
  *(void *)(a8 + 56) = a7;
  id v19 = [self daemonUserDefaults];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
  type metadata accessor for RDFeedbackProvider();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(a8 + 64) = v20;
  return a8;
}

unint64_t sub_1005F2D84()
{
  unint64_t result = qword_10091F7D8;
  if (!qword_10091F7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F7D8);
  }
  return result;
}

unint64_t sub_1005F2DD8()
{
  unint64_t result = qword_10091F7E0;
  if (!qword_10091F7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10091F7E0);
  }
  return result;
}

uint64_t sub_1005F2E2C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1005F2E7C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000C75D4;
  v6[9] = v5;
  v6[10] = v4;
  id v7 = (void *)swift_task_alloc();
  v6[11] = v7;
  *id v7 = v6;
  v7[1] = sub_1005EE210;
  return sub_1005EE60C(v2, v3);
}

void *sub_1005F2F70@<X0>(uint64_t a1@<X8>)
{
  return sub_1005F28AC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1005F2F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F2FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005F3054(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005F30B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005F30F0()
{
  sub_1005F2958(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1005F310C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1005F3144()
{
}

uint64_t sub_1005F314C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005F315C()
{
  return swift_release();
}

uint64_t sub_1005F3164(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005F31AC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005F328C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  char v9 = *(unsigned char *)(v1 + 40);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_1000C6EF4;
  return sub_1005F02E0(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1005F33C8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005F3408()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_1000C6EF4;
  return sub_1005F1634(v2, v3, v4);
}

uint64_t sub_1005F34B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1005F34E8@<X0>(void *a1@<X8>)
{
  return sub_1005F2A94(*(void **)(v1 + 16), a1);
}

id sub_1005F3504@<X0>(void *a1@<X8>)
{
  id result = sub_1002E6924(*(void **)(v1 + 16));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1005F3534()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1005F3574(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v38 = v7;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, (unint64_t)a2, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDAccountUtils: Updating account {accountID: %{public}s}", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v38;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a4;
  v17[3] = a5;
  void v17[4] = a6;
  uint64_t v18 = self;
  swift_retain();
  id v19 = a4;
  id v20 = [v18 sharedInstance];
  id v21 = [v20 accountStore];

  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 accountWithIdentifier:v22];

  if (v23)
  {
    id v24 = sub_1005F9E74();
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = (void *)swift_allocObject();
      void v26[2] = v7;
      v26[3] = v23;
      void v26[4] = v25;
      v26[5] = sub_100617304;
      v26[6] = v17;
      swift_retain();
      id v27 = v23;
      id v28 = v25;
      swift_retain();
      sub_100601EFC(a3 & 1, (uint64_t)sub_100617358, (uint64_t)v26);
      swift_release();

      swift_release();
      return;
    }
    uint64_t v34 = self;
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v35._countAndFlagsBits = 0xD000000000000044;
    v35._object = (void *)0x80000001007DA2E0;
    String.append(_:)(v35);
    v36._countAndFlagsBits = a1;
    v36._object = a2;
    String.append(_:)(v36);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v33 = [v34 internalErrorWithDebugDescription:v37];

    sub_1005FB64C(0, 0, (uint64_t)v33, (uint64_t)v19, a5, a6, (uint64_t)&unk_1008CDA08, (uint64_t)sub_1006174E8, (uint64_t)&unk_1008CDA20);
    swift_release();
  }
  else
  {
    uint64_t v29 = self;
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v30._object = (void *)0x80000001007DA290;
    v30._countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v30);
    v31._countAndFlagsBits = a1;
    v31._object = a2;
    String.append(_:)(v31);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v33 = [v29 internalErrorWithDebugDescription:v32];

    sub_1005FB64C(0, 0, (uint64_t)v33, (uint64_t)v19, a5, a6, (uint64_t)&unk_1008CDA08, (uint64_t)sub_1006174E8, (uint64_t)&unk_1008CDA20);
    swift_release();
  }
}

void sub_1005F3A88(uint64_t a1, unint64_t a2, char a3, char a4, char a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10091F858);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountUtils: Process migration state change", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  id v19 = self;
  id v20 = a6;
  swift_retain();
  id v21 = [v19 sharedInstance];
  id v22 = [v21 accountStore];

  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v22 accountWithIdentifier:v23];

  if (!v24) {
    goto LABEL_14;
  }
  char v45 = a3;
  char v25 = a4;
  id v26 = [v24 accountType];
  if (!v26)
  {
    __break(1u);
    return;
  }
  id v27 = v26;
  id v28 = [v26 identifier];

  if (!v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_13;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v31)
  {
LABEL_13:

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v29 == v32 && v31 == v33)
  {
    swift_bridgeObjectRelease_n();
    char v34 = v25;
    goto LABEL_20;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v34 = v25;
  if (v38)
  {
LABEL_20:
    if ((v45 & 1) != 0 && (objc_msgSend(v24, "rem_didChooseToMigrate") & 1) == 0)
    {
      id v39 = sub_10060095C(v24);
      if (v40)
      {
        sub_1005FCC30((uint64_t)v39, v40);
        swift_bridgeObjectRelease();
      }
    }
    id v41 = [v19 sharedInstance];
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v24;
    *(unsigned char *)(v42 + 24) = a5 & 1;
    *(void *)(v42 + 32) = v47;
    *(void *)(v42 + 40) = sub_1006179A0;
    *(void *)(v42 + 48) = v18;
    aBlock[4] = (uint64_t)sub_100617A2C;
    void aBlock[5] = v42;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100688540;
    aBlock[3] = (uint64_t)&unk_1008CDF48;
    id v43 = _Block_copy(aBlock);
    id v44 = v24;
    swift_retain();
    swift_retain();
    swift_release();
    [v41 saveDidChooseToMigrate:v45 & 1 didFinishMigration:v34 & 1 toACAccount:v44 inStore:v22 completionHandler:v43];
    _Block_release(v43);
    swift_release();

    return;
  }

LABEL_14:
  swift_bridgeObjectRetain_n();
  Swift::String v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    NSString v37 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)NSString v37 = 136446210;
    swift_bridgeObjectRetain();
    void aBlock[6] = sub_1000C51B8(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDAccountUtils: No ACAccount is found for updating migration state {acAccountID: %{public}s}", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release();
  }
}

void sub_1005F4004(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091F858);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDAccountUtils: Updating system accounts", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  void v14[3] = a3;
  v14[4] = a4;
  swift_retain();
  id v15 = a2;
  id v16 = sub_1005F9E74();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v5;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = sub_1006174F0;
    *(void *)(v18 + 40) = v14;
    *(unsigned char *)(v18 + 48) = a1 & 1;
    swift_retain();
    id v19 = v17;
    swift_retain();
    sub_100601EFC(1, (uint64_t)sub_10061759C, v18);
    swift_release();

    swift_release();
  }
  else
  {
    id v20 = self;
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v20 internalErrorWithDebugDescription:v21];

    sub_1005FB64C(0, 0, (uint64_t)v22, (uint64_t)v15, a3, a4, (uint64_t)&unk_1008CDE18, (uint64_t)sub_1006174E8, (uint64_t)&unk_1008CDE30);
    swift_release();
  }
}

void sub_1005F42A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10091F858);
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAccountUtils: Remove orphaned accounts", v11, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a1;
  uint64_t v12[3] = a2;
  v12[4] = a3;
  swift_retain();
  id v13 = a1;
  id v14 = sub_1005F9E74();
  if (v14)
  {
    id v15 = v14;
    id v16 = (void *)swift_allocObject();
    void v16[2] = v4;
    v16[3] = v15;
    void v16[4] = sub_100614878;
    void v16[5] = v12;
    swift_retain();
    id v17 = v15;
    swift_retain();
    sub_100601EFC(1, (uint64_t)sub_10061488C, (uint64_t)v16);
    swift_release();

    swift_release();
  }
  else
  {
    uint64_t v18 = self;
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v18 internalErrorWithDebugDescription:v19];

    sub_1005FDF18(0, (uint64_t)v20, (uint64_t)v13, a2, a3);
    swift_release();
  }
}

void sub_1005F4514(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v43 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = a2;
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)id v14 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1000C51B8(v43, v13, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDAccountUtils: requestToMergeLocalDataIntoSyncData {acAccountIdentifier: %{public}s}", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v13;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v15 = sub_1005F9E74();
  if (!v15)
  {
    uint64_t v29 = self;
    NSString v30 = String._bridgeToObjectiveC()();
    id v31 = [v29 internalErrorWithDebugDescription:v30];

    sub_1005FFE24((uint64_t)v31, a3, a4, a5, (uint64_t)&unk_1008CD3A0, (uint64_t)sub_100614858, (uint64_t)&unk_1008CD3B8);
    return;
  }
  id v16 = v15;
  id v17 = [self sharedInstance];
  id v18 = [v17 accountStore];

  NSString v19 = String._bridgeToObjectiveC()();
  uint64_t v42 = v18;
  id v20 = [v18 accountWithIdentifier:v19];

  if (!v20) {
    goto LABEL_18;
  }
  id v21 = [v20 accountType];
  if (!v21)
  {
    __break(1u);
    return;
  }
  id v22 = v21;
  id v23 = [v21 identifier];

  if (!v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_17:

    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  id v41 = v20;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v26)
  {
    id v20 = v41;
    goto LABEL_17;
  }
  if (v24 != v27 || v26 != v28)
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_22;
    }

LABEL_18:
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      char v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)char v34 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1000C51B8(v43, a2, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAccountUtils: requestToMergeLocalDataIntoSyncData: Could not find an Apple ACAccount for {acAccountIdentifier: %{public}s}", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  swift_bridgeObjectRelease_n();
LABEL_22:
  swift_bridgeObjectRetain_n();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v38 = a2;
    id v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)id v39 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1000C51B8(v43, v38, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store already exists, move local data now {acAccountIdentifier: %{public}s}", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for RDAccountUtils.LocalDataToICloudMover();
  *(void *)(swift_initStackObject() + 16) = v16;
  id v40 = v16;
  sub_1005FF7DC(v41);

  sub_1005FFE24(0, a3, a4, a5, (uint64_t)&unk_1008CD3A0, (uint64_t)sub_100614858, (uint64_t)&unk_1008CD3B8);
}

void sub_1005F538C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_1005F9E74();
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [self localAccountID];
    v35[0] = 0;
    id v8 = [v6 fetchAccountWithObjectID:v7 error:v35];

    id v9 = v35[0];
    if (v8)
    {
      type metadata accessor for RDAccountDataMover();
      swift_initStackObject();
      id v10 = v9;
      id v11 = v6;
      sub_1004D3338(v11);
      sub_1004D5300((uint64_t)v8);
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_10008E2DC(v27, (uint64_t)qword_10091F858);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        NSString v30 = (uint8_t *)swift_slowAlloc();
        v35[0] = (id)swift_slowAlloc();
        *(_DWORD *)NSString v30 = 136446210;
        uint64_t v31 = sub_1004D322C();
        sub_1000C51B8(v31, v32, (uint64_t *)v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "RDAccountUtils: requestToDeleteLocalData: Local account emptied {stats: %{public}s}.", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release_n();
      }
      sub_1005FFE24(0, a1, a2, a3, (uint64_t)&unk_1008CD350, (uint64_t)sub_100614858, (uint64_t)&unk_1008CD368);
    }
    else
    {
      id v14 = v35[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_10091F858);
      swift_errorRetain();
      swift_errorRetain();
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        id v18 = (uint8_t *)swift_slowAlloc();
        v35[0] = (id)swift_slowAlloc();
        *(_DWORD *)id v18 = 136446210;
        swift_getErrorValue();
        uint64_t v19 = Error.localizedDescription.getter();
        sub_1000C51B8(v19, v20, (uint64_t *)v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountUtils: requestToDeleteLocalData: Error occurred when trying to delete local data {error: %{public}s}", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      id v21 = self;
      v35[0] = 0;
      v35[1] = (id)0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v22._object = (void *)0x80000001007DA0D0;
      v22._countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v22);
      swift_getErrorValue();
      v23._countAndFlagsBits = Error.localizedDescription.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 125;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v26 = [v21 internalErrorWithDebugDescription:v25];

      sub_1005FFE24((uint64_t)v26, a1, a2, a3, (uint64_t)&unk_1008CD350, (uint64_t)sub_100614858, (uint64_t)&unk_1008CD368);
      swift_errorRelease();
    }
  }
  else
  {
    os_log_type_t v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    id v33 = [v12 internalErrorWithDebugDescription:v13];

    sub_1005FFE24((uint64_t)v33, a1, a2, a3, (uint64_t)&unk_1008CD350, (uint64_t)sub_100614858, (uint64_t)&unk_1008CD368);
  }
}

uint64_t sub_1005F5A24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10091F858);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10091F858);
  if (qword_1009077F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942430);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1005F5AEC(char *a1, char *a2)
{
  return sub_1002F45E8(*a1, *a2);
}

Swift::Int sub_1005F5AF8()
{
  return sub_100595968();
}

uint64_t sub_1005F5B00()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005F5B6C()
{
  return sub_1002F0358();
}

uint64_t sub_1005F5B74@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B76C0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1005F5BD4(void *a1@<X8>)
{
  unint64_t v2 = 0x80000001007C66C0;
  if (*v1) {
    unint64_t v2 = 0x80000001007C6700;
  }
  *a1 = 0xD000000000000012;
  a1[1] = v2;
}

uint64_t sub_1005F5C10()
{
  sub_100094134(&qword_10091FB38);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100778370;
  *(void *)(inited + 32) = _auto_REMAccountTypeForPrimaryCloudKit();
  *(_OWORD *)(inited + 40) = xmmword_100794970;
  *(void *)(inited + 56) = 4;
  uint64_t v1 = (void *)sub_100332274(inited);
  uint64_t result = swift_setDeallocating();
  off_10091F870 = v1;
  return result;
}

void sub_1005F5C90(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_10060D4EC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);

  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_1005F5D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  a15(a1, a2, a3, a4, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t sub_1005F5D84(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, char a8, uint64_t a9, uint64_t a10)
{
  sub_100614220(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void sub_1005F5E00(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, void), uint64_t a6, void *a7)
{
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  NSString v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v53 = sub_1000C51B8(a3, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received migration state from user record {accountID: %{public}s}", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v16 = self;
  id v17 = [v16 sharedInstance];
  id v18 = [v17 accountStore];

  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 accountWithIdentifier:v19];

  if (v20)
  {
    uint64_t v44 = a7;
    if (a1)
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      id v21 = a1;
      CKRecordKeyValueSetting.subscript.getter();
      unsigned int v43 = aBlock[0] & 1;
      CKRecordKeyValueSetting.subscript.getter();

      int v22 = aBlock[0] & 1;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      Swift::String v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        NSString v25 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)NSString v25 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v53 = sub_1000C51B8(a3, a4, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to fetch user record. Let's assume the account is not migrated {accountID: %{public}s}", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      int v22 = 0;
      unsigned int v43 = 0;
      a7 = v44;
    }
    LOBYTE(aBlock[0]) = 0;
    id v26 = [a7 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v26)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v53, (uint64_t)aBlock);
    if (v50)
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      int v27 = swift_dynamicCast();
      uint64_t v28 = v48;
      if (!v27) {
        uint64_t v28 = 0;
      }
      id v45 = v28;
    }
    else
    {
      sub_1000966BC((uint64_t)aBlock, &qword_100908190);
      id v45 = 0;
    }
    LOBYTE(v53) = 1;
    id v29 = [a7 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v53 = 0u;
      long long v54 = 0u;
    }
    sub_1000D6CBC((uint64_t)&v53, (uint64_t)aBlock);
    if (v50)
    {
      sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
      NSString v30 = v48;
      if (swift_dynamicCast()) {
        uint64_t v31 = v48;
      }
      else {
        uint64_t v31 = 0;
      }
      unint64_t v32 = v45;
      if (v45 && v31)
      {
        if (v43 == [v45 BOOLValue] && v22 == objc_msgSend(v31, "BOOLValue"))
        {
          a5(1, 0);

          goto LABEL_40;
        }
      }
      else
      {
        NSString v30 = v31;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)aBlock, &qword_100908190);
      NSString v30 = 0;
      unint64_t v32 = v45;
    }
    id v41 = v30;
    unsigned int v42 = v22;
    swift_bridgeObjectRetain_n();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v46 = a5;
      char v35 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v35 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v36 = a3;
      *(void *)&long long v53 = sub_1000C51B8(a3, a4, aBlock);
      unint64_t v32 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Cache migration state in ACAccount object {accountID: %{public}s}", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = v46;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v36 = a3;
    }
    id v37 = [v16 sharedInstance];
    unint64_t v38 = (void *)swift_allocObject();
    v38[2] = v36;
    v38[3] = a4;
    v38[4] = v44;
    v38[5] = a5;
    v38[6] = a6;
    uint64_t v51 = sub_100614818;
    unint64_t v52 = v38;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100688540;
    uint64_t v50 = &unk_1008CD2A0;
    id v39 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v40 = v44;
    swift_retain();
    swift_release();
    [v37 saveDidChooseToMigrate:v43 didFinishMigration:v42 toACAccount:v40 inStore:v18 completionHandler:v39];

    _Block_release(v39);
    id v18 = v37;
  }
  else
  {
    a5(0, 0);
  }
LABEL_40:
}

uint64_t sub_1005F66C8(char a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t (*a6)(void, uint64_t))
{
  if (a1)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10091F858);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Migration state cache saved {accountID: %{public}s}", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_13:

      return a6(a1 & 1, a2);
    }

    swift_bridgeObjectRelease_n();
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10091F858);
    id v17 = a5;
    swift_errorRetain();
    id v18 = v17;
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v19))
    {

      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_13;
    }
    uint64_t v20 = swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412546;
    id v22 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v18;

    *(_WORD *)(v20 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      unint64_t v25 = v24;
    }
    else
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    sub_1000C51B8(v23, v25, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v19, "Error updating migration flags for ACAccount {acAccount: %@, error: %s}", (uint8_t *)v20, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  return a6(a1 & 1, a2);
}

uint64_t sub_1005F6B00(uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t a3, char a4, char a5)
{
  if (a1)
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10091F858);
    swift_errorRetain();
    swift_errorRetain();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v23 = a2;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      sub_1000C51B8(v13, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "UpdateAccountsWithAccountInfos: Error saving context after adding account {error: %s}", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v23;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v19 = a4 & 1;
    uint64_t v20 = a5 & 1;
    uint64_t v21 = a1;
  }
  else
  {
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091F858);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "UpdateAccountsWithAccountInfos: Account object changes saved", v18, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = a4 & 1;
    uint64_t v20 = a5 & 1;
    uint64_t v21 = 0;
  }
  return a2(v19, v20, v21);
}

void sub_1005F6DD4(void *a1, void *a2, int a3, int a4, void (*a5)(void, void, void *, void), uint64_t a6)
{
  unint64_t v254 = a5;
  uint64_t v255 = a6;
  int v248 = a4;
  int v249 = a3;
  char v252 = a2;
  id v7 = (void *)type metadata accessor for Logger();
  uint64_t v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  id v10 = (char *)&v243 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v243 - v12;
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  os_log_type_t v17 = (char *)&v243 - v16;
  id v18 = [a1 displayAccount:v15];
  if (!v18) {
    id v18 = a1;
  }
  id v19 = [v18 identifier];
  if (!v19)
  {
    __break(1u);
LABEL_165:
    __break(1u);
  }
  uint64_t v20 = v19;
  id v251 = v13;
  uint64_t v257 = v8;
  uint64_t v253 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  id v23 = [v18 accountType];
  if (!v23) {
    goto LABEL_165;
  }
  uint64_t v24 = v23;
  id v25 = [v23 identifier];

  id v26 = &selRef_intersectsSet_;
  uint64_t v256 = v7;
  if (!v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v33 = v35;
    goto LABEL_13;
  }
  unint64_t v27 = v22;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v30 = v29;

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v33 = v32;
  if (!v30)
  {
    unint64_t v22 = v27;
    id v7 = v256;
LABEL_13:
    swift_bridgeObjectRelease();
    if (([v18 isEnabledForDataclass:ACAccountDataclassReminders] & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v28 == v31 && v30 == v32)
  {
    swift_bridgeObjectRelease_n();
    unsigned __int8 v34 = [v18 isEnabledForDataclass:ACAccountDataclassReminders];
    unint64_t v22 = v27;
    id v7 = v256;
    if ((v34 & 1) == 0)
    {
LABEL_25:
      if (qword_100907A38 != -1) {
        swift_once();
      }
      uint64_t v57 = sub_10008E2DC((uint64_t)v7, (uint64_t)qword_10091F858);
      uint64_t v58 = v257;
      (*(void (**)(char *, uint64_t, void *))(v257 + 16))(v10, v57, v7);
      id v59 = a1;
      uint64_t v60 = v18;
      uint64_t v61 = v7;
      id v62 = v59;
      id v40 = v60;
      swift_bridgeObjectRetain();
      id v26 = (char **)Logger.logObject.getter();
      id v33 = (id)static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v26, (os_log_type_t)v33))
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, void *))(v58 + 8))(v10, v61);
        goto LABEL_48;
      }
      unint64_t v247 = v22;
      uint64_t v63 = swift_slowAlloc();
      char v252 = (void *)swift_slowAlloc();
      *(void *)&long long aBlock = v252;
      *(_DWORD *)uint64_t v63 = 136446722;
      id v64 = [v62 identifier];
      if (v64)
      {
        uint64_t v65 = v64;
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;

        *(void *)&long long v264 = sub_1000C51B8(v66, v68, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2082;
        unint64_t v69 = v247;
        swift_bridgeObjectRetain();
        *(void *)&long long v264 = sub_1000C51B8(v253, v69, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v63 + 22) = 2082;
        id v70 = [v40 accountType];
        if (v70)
        {
          uint64_t v71 = v70;
          id v72 = [v70 identifier];

          if (v72)
          {
            uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v75 = v74;

            *(void *)&long long v264 = sub_1000C51B8(v73, v75, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, (os_log_type_t)v33, "UpdateAccountWithACAccount: ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v63, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, void *))(v257 + 8))(v10, v256);
            goto LABEL_48;
          }
          goto LABEL_168;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        __break(1u);
      }

      __break(1u);
LABEL_168:

      __break(1u);
      goto LABEL_169;
    }
LABEL_24:
    int v56 = 1;
    goto LABEL_34;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v55 = [v18 isEnabledForDataclass:ACAccountDataclassReminders];
  unint64_t v22 = v27;
  id v7 = v256;
  if ((v55 & 1) == 0) {
    goto LABEL_25;
  }
  if (v54) {
    goto LABEL_24;
  }
LABEL_14:
  if ([a1 accountPropertyForKey:REMDA_kCalDAVMobileAccountDelegatePrincipalPath])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    if (qword_100907A38 != -1) {
      swift_once();
    }
    uint64_t v36 = sub_10008E2DC((uint64_t)v7, (uint64_t)qword_10091F858);
    uint64_t v37 = v257;
    (*(void (**)(char *, uint64_t, void *))(v257 + 16))(v17, v36, v7);
    id v38 = a1;
    id v39 = v18;
    id v33 = v38;
    id v40 = v39;
    id v41 = Logger.logObject.getter();
    int v42 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v41, (os_log_type_t)v42))
    {

      (*(void (**)(char *, void *))(v37 + 8))(v17, v7);
      goto LABEL_48;
    }
    LODWORD(v253) = v42;
    id v26 = (char **)swift_slowAlloc();
    char v252 = (void *)swift_slowAlloc();
    *(void *)&long long aBlock = v252;
    *(_DWORD *)id v26 = 136446466;
    id v43 = [v33 identifier];
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      *(void *)&long long v264 = sub_1000C51B8(v45, v47, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *((_WORD *)v26 + 6) = 2082;
      id v48 = [v40 accountType];
      if (v48)
      {
        uint64_t v49 = v48;
        id v50 = [v48 identifier];

        if (v50)
        {
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v53 = v52;

          *(void *)&long long v264 = sub_1000C51B8(v51, v53, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v253, "UpdateAccountWithACAccount: Skip handling CalDAV delegate account {accountID: %{public}s, displayAccountType: %{public}s}", (uint8_t *)v26, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, void *))(v37 + 8))(v17, v256);
LABEL_48:
          v254(0, 0, _swiftEmptyArrayStorage, 0);

          return;
        }
        goto LABEL_172;
      }
LABEL_171:

      __break(1u);
LABEL_172:

      __break(1u);
      goto LABEL_173;
    }
LABEL_170:

    __break(1u);
    goto LABEL_171;
  }
  long long aBlock = 0u;
  long long v261 = 0u;
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  int v56 = 0;
LABEL_34:
  uint64_t v246 = v18;
  if (qword_100907A38 != -1) {
    swift_once();
  }
  uint64_t v76 = sub_10008E2DC((uint64_t)v7, (uint64_t)qword_10091F858);
  swift_bridgeObjectRetain_n();
  id v40 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v78 = 136446210;
    id v33 = v78 + 12;
    id v26 = (char **)(v78 + 4);
    swift_bridgeObjectRetain();
    *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v40, v77, "UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}", v78, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v79 = swift_allocObject();
  *(unsigned char *)(v79 + 16) = 0;
  unint64_t v80 = v246;
  unsigned __int8 v81 = [v246 rem_isEligibleForCloudKitReminders];
  if (!v56)
  {
    id v84 = [v80 accountType];
    if (!v84)
    {
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    uint64_t v85 = v84;
    unint64_t v86 = (void *)sub_100604818(v84);
    char v88 = v87;

    uint64_t v89 = v257;
    if (v88)
    {
      unint64_t v99 = v251;
      id v100 = v256;
      (*(void (**)(char *, uint64_t, void *))(v257 + 16))(v251, v76, v256);
      id v26 = v80;
      os_log_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        unint64_t v247 = v22;
        id v103 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = (void *)swift_slowAlloc();
        *(void *)&long long aBlock = v104;
        *(_DWORD *)id v103 = 136446210;
        id v105 = [v26 accountType];
        if (!v105)
        {
LABEL_173:

          __break(1u);
          goto LABEL_174;
        }
        objc_super v106 = v105;
        id v250 = v104;
        os_log_type_t v107 = v102;
        id v108 = [v105 identifier];

        if (!v108)
        {
LABEL_174:

          __break(1u);
          return;
        }
        uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v111 = v110;

        *(void *)&long long v264 = sub_1000C51B8(v109, v111, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v107, "UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}", v103, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, void *))(v89 + 8))(v251, v256);
        Class v112 = _swiftEmptyArrayStorage;
        unint64_t v114 = (void (*)(void, void, void, void))v254;
        uint64_t v113 = v255;
        unint64_t v22 = v247;
        unint64_t v80 = v246;
LABEL_155:
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        uint64_t v228 = swift_bridgeObjectRetain();
        sub_100612D40(v228, v252, v79, v253, v22, (uint64_t)v112, v114, v113);
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();

        swift_bridgeObjectRelease_n();
        return;
      }

      (*(void (**)(char *, id))(v89 + 8))(v99, v100);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      uint64_t v244 = v76;
      uint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.default.getter();
      BOOL v92 = os_log_type_enabled(v90, v91);
      id v250 = v86;
      if (v92)
      {
        uint64_t v93 = swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v93 + 12) = 2082;
        uint64_t v94 = REMAccountType.loggableDescription.getter();
        *(void *)&long long v264 = sub_1000C51B8(v94, v95, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v123 = sub_100604E08(v80);
      if (v124)
      {
        uint64_t v125 = (uint64_t)v123;
        unint64_t v126 = v124;
        uint64_t v127 = v80;
        swift_bridgeObjectRetain_n();
        uint64_t v128 = v127;
        uint64_t v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v245 = v79;
          unint64_t v247 = v22;
          uint64_t v131 = swift_slowAlloc();
          unint64_t v132 = (void *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v131 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v257 = v125;
          *(void *)&long long v264 = sub_1000C51B8(v125, v126, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v131 + 12) = 2114;
          id v133 = [v128 identifier];
          id v134 = v133;
          if (v133) {
            *(void *)&long long v264 = v133;
          }
          else {
            *(void *)&long long v264 = 0;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v132 = v134;

          _os_log_impl((void *)&_mh_execute_header, v129, v130, "UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.", (uint8_t *)v131, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          unint64_t v22 = v247;
          unint64_t v80 = v246;
          uint64_t v79 = v245;
          uint64_t v125 = v257;
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v168 = [self accountDescriptionWithACAccount:v128];
        if (v168)
        {
          uint64_t v169 = v168;
          uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v172 = v171;
        }
        else
        {
          uint64_t v170 = 0;
          unint64_t v172 = 0xE000000000000000;
        }
        Class v112 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v174 = v112[2];
        unint64_t v173 = v112[3];
        if (v174 >= v173 >> 1) {
          Class v112 = sub_10030BE7C((void *)(v173 > 1), v174 + 1, 1, v112);
        }
        v112[2] = v174 + 1;
        long long v175 = &v112[6 * v174];
        v175[4] = v125;
        v175[5] = v126;
        v175[6] = v170;
        v175[7] = v172;
        v175[8] = v250;
        *((_DWORD *)v175 + 18) = 33685505;
        *((unsigned char *)v175 + 76) = 2;
        goto LABEL_154;
      }
    }
    goto LABEL_65;
  }
  if ((v81 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v98 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}", v98, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Class v115 = sub_10060095C(v80);
    if (v116)
    {
      uint64_t v117 = (uint64_t)v115;
      unint64_t v118 = v116;
      swift_bridgeObjectRetain_n();
      uint64_t v119 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.default.getter();
      BOOL v121 = os_log_type_enabled(v119, v120);
      uint64_t v245 = v79;
      if (v121)
      {
        uint64_t v122 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v264 = sub_1000C51B8(v117, v118, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV", v122, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v145 = [self accountDescriptionWithACAccount:v80];
      if (v145)
      {
        id v146 = v145;
        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v149 = v148;
      }
      else
      {
        uint64_t v147 = 0x64756F6C4369;
        unint64_t v149 = 0xE600000000000000;
      }
      Class v112 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v162 = v112[2];
      unint64_t v161 = v112[3];
      if (v162 >= v161 >> 1) {
        Class v112 = sub_10030BE7C((void *)(v161 > 1), v162 + 1, 1, v112);
      }
      v112[2] = v162 + 1;
      unint64_t v163 = &v112[6 * v162];
      v163[4] = v117;
      v163[5] = v118;
      v163[6] = v147;
      v163[7] = v149;
      v163[8] = 3;
      *((_DWORD *)v163 + 18) = 33685505;
      *((unsigned char *)v163 + 76) = 2;
      unint64_t v114 = (void (*)(void, void, void, void))v254;
      uint64_t v113 = v255;
      uint64_t v79 = v245;
      goto LABEL_155;
    }
LABEL_65:
    Class v112 = _swiftEmptyArrayStorage;
LABEL_154:
    unint64_t v114 = (void (*)(void, void, void, void))v254;
    uint64_t v113 = v255;
    goto LABEL_155;
  }
  *(void *)&long long v264 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v264 + 1) = v82;
  id v83 = [v80 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v83)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v264, (uint64_t)&aBlock);
  if (*((void *)&v261 + 1))
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    if (swift_dynamicCast())
    {
      id v135 = v258;
      int v136 = [v258 BOOLValue];

      goto LABEL_77;
    }
  }
  else
  {
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  }
  if (v249 == 2)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      int v138 = Strong;
      if ([Strong hasPassedBuddyAndSystemDataMigrator])
      {

        if (v248)
        {
          int v139 = v80;
          swift_bridgeObjectRetain();
          uint64_t v140 = (uint64_t)v250;
          swift_retain();
          uint64_t v141 = v252;
          uint64_t v142 = swift_retain();
          sub_1005F5D84(v139, v140, v253, v22, v140, v139, v141, 1, (uint64_t)v254, v142);
          swift_release();

          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        uint64_t v245 = v79;
        swift_bridgeObjectRetain_n();
        long long v176 = Logger.logObject.getter();
        os_log_type_t v177 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v176, v177))
        {
          uint64_t v178 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v178 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v176, v177, "UpdateAccountWithACAccount: hasPassedBuddyAndSystemDataMigrator != true, setting shouldFetchMigrationState to false {accountID: %{public}s}", v178, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v229 = Logger.logObject.getter();
    os_log_type_t v230 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v229, v230))
    {
      int64_t v231 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)int64_t v231 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v229, v230, "UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}", v231, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v232 = self;
    id v233 = [v232 sharedInstance];
    id v234 = [v233 accountStore];

    id v235 = [v232 sharedInstance];
    uint64_t v236 = swift_allocObject();
    id v237 = v250;
    *(void *)(v236 + 16) = v80;
    *(void *)(v236 + 24) = v237;
    uint64_t v238 = v252;
    *(void *)(v236 + 32) = v252;
    *(unsigned char *)(v236 + 40) = v248 & 1;
    uint64_t v239 = v255;
    *(void *)(v236 + 48) = v254;
    *(void *)(v236 + 56) = v239;
    int v262 = sub_10061421C;
    uint64_t v263 = v236;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v261 = sub_100688540;
    *((void *)&v261 + 1) = &unk_1008CD1D8;
    unint64_t v240 = _Block_copy(&aBlock);
    uint64_t v241 = v80;
    swift_retain();
    id v242 = v238;
    swift_retain();
    swift_release();
    [v235 saveDidChooseToMigrate:0 didFinishMigration:0 toACAccount:v241 inStore:v234 completionHandler:v240];

    _Block_release(v240);
    swift_release();

    return;
  }
  int v136 = v249 & 1;
LABEL_77:
  *(void *)&long long aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&aBlock + 1) = v143;
  id v144 = [v80 objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v144)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  sub_1000D6CBC((uint64_t)&v264, (uint64_t)&aBlock);
  if (!*((void *)&v261 + 1))
  {
    sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
    id v150 = 0;
    unsigned __int8 v259 = 0;
    if (v136) {
      goto LABEL_89;
    }
LABEL_93:
    int v157 = 1;
LABEL_94:
    uint64_t v245 = v79;
    uint64_t v244 = v76;
    if (v150 && ((v157 | [v150 BOOLValue] ^ 1) & 1) == 0)
    {
      *(unsigned char *)(v79 + 16) = 1;
      swift_bridgeObjectRetain_n();
      uint64_t v158 = Logger.logObject.getter();
      os_log_type_t v159 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v158, v159))
      {
        long long v160 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)long long v160 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v158, v159, "UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}", v160, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    if ([v80 aa_isAccountClass:AAAccountClassPrimary]) {
      uint64_t v257 = _auto_REMAccountTypeForPrimaryCloudKit();
    }
    else {
      uint64_t v257 = 6;
    }
    int v182 = v259;
    id v183 = v150;
    swift_bridgeObjectRetain_n();
    uint64_t v184 = v183;
    unint64_t v185 = Logger.logObject.getter();
    unint64_t v186 = v22;
    os_log_type_t v187 = static os_log_type_t.default.getter();
    BOOL v188 = os_log_type_enabled(v185, v187);
    unint64_t v247 = v186;
    LODWORD(v251) = v136;
    uint64_t v256 = v184;
    if (v188)
    {
      int v189 = v136;
      uint64_t v190 = swift_slowAlloc();
      id v250 = (id)swift_slowAlloc();
      *(void *)&long long aBlock = v250;
      *(_DWORD *)uint64_t v190 = 136447234;
      int v249 = v182;
      swift_bridgeObjectRetain();
      *(void *)&long long v264 = sub_1000C51B8(v253, v186, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v190 + 12) = 2082;
      uint64_t v191 = REMAccountType.loggableDescription.getter();
      *(void *)&long long v264 = sub_1000C51B8(v191, v192, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v190 + 22) = 1024;
      LODWORD(v264) = v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v190 + 28) = 1024;
      LODWORD(v264) = v249;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v190 + 34) = 2082;
      if (v150)
      {
        uint64_t v184 = v256;
        unsigned __int8 v193 = [v256 BOOLValue];
      }
      else
      {
        unsigned __int8 v193 = 2;
        uint64_t v184 = v256;
      }
      uint64_t v194 = &stru_1008F6000;
      LOBYTE(v264) = v193;
      sub_100094134((uint64_t *)&unk_10091DD70);
      uint64_t v195 = String.init<A>(describing:)();
      *(void *)&long long v264 = sub_1000C51B8(v195, v196, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v185, v187, "UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{BOOL}d, shouldShowCloudKitAccount: %{BOOL}d, didFinishMigration: %{public}s}", (uint8_t *)v190, 0x2Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v194 = &stru_1008F6000;
    }
    uint64_t v197 = self;
    id v198 = [v197 accountDescriptionWithACAccount:v80];
    if (v198)
    {
      uint64_t v199 = v198;
      uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v202 = v201;
    }
    else
    {
      uint64_t v200 = 0;
      unint64_t v202 = 0;
    }
    swift_beginAccess();
    unsigned __int8 v203 = v259;
    id v250 = v197;
    if (v150) {
      unsigned __int8 v204 = [v184 BOOLValue];
    }
    else {
      unsigned __int8 v204 = 2;
    }
    unsigned __int8 v205 = [v80 v194[110].types:AAAccountClassBasic];
    if (v202) {
      uint64_t v206 = v200;
    }
    else {
      uint64_t v206 = 0x64756F6C4369;
    }
    if (!v202) {
      unint64_t v202 = 0xE600000000000000;
    }
    swift_bridgeObjectRetain();
    Class v112 = sub_10030BE7C(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v208 = v112[2];
    unint64_t v207 = v112[3];
    if (v208 >= v207 >> 1) {
      Class v112 = sub_10030BE7C((void *)(v207 > 1), v208 + 1, 1, v112);
    }
    v112[2] = v208 + 1;
    int v209 = &v112[6 * v208];
    unint64_t v210 = v247;
    v209[4] = v253;
    v209[5] = v210;
    v209[6] = v206;
    v209[7] = v202;
    v209[8] = v257;
    *((unsigned char *)v209 + 72) = v203;
    *((unsigned char *)v209 + 73) = 0;
    *((unsigned char *)v209 + 74) = (_BYTE)v251;
    *((unsigned char *)v209 + 75) = v204;
    *((unsigned char *)v209 + 76) = v205;
    os_log_type_t v211 = sub_10060095C(v80);
    if (v212)
    {
      uint64_t v213 = (uint64_t)v211;
      unint64_t v214 = v212;
      swift_bridgeObjectRetain_n();
      uint64_t v215 = Logger.logObject.getter();
      os_log_type_t v216 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v215, v216))
      {
        uint64_t v217 = swift_slowAlloc();
        *(void *)&long long v264 = swift_slowAlloc();
        *(_DWORD *)uint64_t v217 = 136446466;
        swift_bridgeObjectRetain();
        id v258 = (id)sub_1000C51B8(v213, v214, (uint64_t *)&v264);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v217 + 12) = 1024;
        LODWORD(v258) = v251;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v215, v216, "UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{BOOL}d}", (uint8_t *)v217, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v22 = v247;
      uint64_t v218 = 0x64756F6C4369;
      id v219 = [v250 accountDescriptionWithACAccount:v80];
      if (v219)
      {
        os_log_t v220 = v219;
        uint64_t v221 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v223 = v222;
      }
      else
      {
        uint64_t v221 = 0;
        unint64_t v223 = 0;
      }
      char v224 = v259 ^ 1;
      if (v223) {
        uint64_t v218 = v221;
      }
      else {
        unint64_t v223 = 0xE600000000000000;
      }
      unint64_t v226 = v112[2];
      unint64_t v225 = v112[3];
      if (v226 >= v225 >> 1) {
        Class v112 = sub_10030BE7C((void *)(v225 > 1), v226 + 1, 1, v112);
      }
      v112[2] = v226 + 1;
      uint64_t v227 = &v112[6 * v226];
      v227[4] = v213;
      v227[5] = v214;
      v227[6] = v218;
      v227[7] = v223;
      v227[8] = 3;
      *((unsigned char *)v227 + 72) = v224 & 1;
      *(_DWORD *)((char *)v227 + 73) = 33686016;
    }
    else
    {
      unint64_t v22 = v247;
    }
    uint64_t v79 = v245;

    goto LABEL_154;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if (swift_dynamicCast()) {
    id v150 = v258;
  }
  else {
    id v150 = 0;
  }
  unsigned __int8 v259 = 0;
  if (!v136) {
    goto LABEL_93;
  }
LABEL_89:
  uint64_t v151 = swift_unknownObjectWeakLoadStrong();
  if (v151)
  {
    long long v152 = (void *)v151;
    id v153 = sub_10060062C(v253, v22);
    if (v153)
    {
      uint64_t v154 = v153;
      sub_1002AF948(v153, v152);
      uint64_t v156 = v155;

      int v157 = *(unsigned __int8 *)(v156 + 88);
      swift_release();
      unsigned __int8 v259 = v157 ^ 1;
      goto LABEL_94;
    }
    swift_bridgeObjectRetain();
    uint64_t v179 = Logger.logObject.getter();
    os_log_type_t v180 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v179, v180))
    {
      uint64_t v257 = (uint64_t)v150;
      uint64_t v181 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v181 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v264 = sub_1000C51B8(v253, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v179, v180, "Display ACAccount ID is not an UUID {displayACAccountID: %s}", v181, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v164, v165))
    {
      uint64_t v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Store controller missing for checking whether migration has failed", v166, 2u);
      swift_slowDealloc();
      unint64_t v167 = v80;
    }
    else
    {
      unint64_t v167 = v164;
      uint64_t v164 = v80;
    }
    swift_release();
  }
}